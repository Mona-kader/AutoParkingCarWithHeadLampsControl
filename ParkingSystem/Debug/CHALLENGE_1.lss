
CHALLENGE_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d2  00800100  00009346  000093da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009346  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  008002d2  008002d2  000095ac  2**0
                  ALLOC
  3 .stab         000076f8  00000000  00000000  000095ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003b95  00000000  00000000  00010ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00014839  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ef  00000000  00000000  000149d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002f63  00000000  00000000  00014bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000147c  00000000  00000000  00017b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001406  00000000  00000000  00018fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001a3b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000353  00000000  00000000  0001a570  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021b4  00000000  00000000  0001a8c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  0001ca77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 15 2a 	jmp	0x542a	; 0x542a <__vector_11>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 2a 	jmp	0x54ca	; 0x54ca <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 a9 48 	jmp	0x9152	; 0x9152 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e4       	ldi	r30, 0x46	; 70
      a0:	f3 e9       	ldi	r31, 0x93	; 147
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 3d       	cpi	r26, 0xD2	; 210
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a2 ed       	ldi	r26, 0xD2	; 210
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 3e       	cpi	r26, 0xEF	; 239
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 20 49 	call	0x9240	; 0x9240 <main>
      c6:	0c 94 a1 49 	jmp	0x9342	; 0x9342 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__fixunssfsi>:
      ce:	ef 92       	push	r14
      d0:	ff 92       	push	r15
      d2:	0f 93       	push	r16
      d4:	1f 93       	push	r17
      d6:	7b 01       	movw	r14, r22
      d8:	8c 01       	movw	r16, r24
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	40 e0       	ldi	r20, 0x00	; 0
      e0:	5f e4       	ldi	r21, 0x4F	; 79
      e2:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__gesf2>
      e6:	88 23       	and	r24, r24
      e8:	8c f0       	brlt	.+34     	; 0x10c <__fixunssfsi+0x3e>
      ea:	c8 01       	movw	r24, r16
      ec:	b7 01       	movw	r22, r14
      ee:	20 e0       	ldi	r18, 0x00	; 0
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	5f e4       	ldi	r21, 0x4F	; 79
      f6:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <__subsf3>
      fa:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__fixsfsi>
      fe:	9b 01       	movw	r18, r22
     100:	ac 01       	movw	r20, r24
     102:	20 50       	subi	r18, 0x00	; 0
     104:	30 40       	sbci	r19, 0x00	; 0
     106:	40 40       	sbci	r20, 0x00	; 0
     108:	50 48       	sbci	r21, 0x80	; 128
     10a:	06 c0       	rjmp	.+12     	; 0x118 <__fixunssfsi+0x4a>
     10c:	c8 01       	movw	r24, r16
     10e:	b7 01       	movw	r22, r14
     110:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__fixsfsi>
     114:	9b 01       	movw	r18, r22
     116:	ac 01       	movw	r20, r24
     118:	b9 01       	movw	r22, r18
     11a:	ca 01       	movw	r24, r20
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	08 95       	ret

00000126 <__udivdi3>:
     126:	ae e5       	ldi	r26, 0x5E	; 94
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	e9 e9       	ldi	r30, 0x99	; 153
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	0c 94 6a 49 	jmp	0x92d4	; 0x92d4 <__prologue_saves__>
     132:	a8 e0       	ldi	r26, 0x08	; 8
     134:	4e 01       	movw	r8, r28
     136:	08 94       	sec
     138:	81 1c       	adc	r8, r1
     13a:	91 1c       	adc	r9, r1
     13c:	f4 01       	movw	r30, r8
     13e:	6a 2e       	mov	r6, r26
     140:	11 92       	st	Z+, r1
     142:	6a 94       	dec	r6
     144:	e9 f7       	brne	.-6      	; 0x140 <__udivdi3+0x1a>
     146:	29 83       	std	Y+1, r18	; 0x01
     148:	3a 83       	std	Y+2, r19	; 0x02
     14a:	4b 83       	std	Y+3, r20	; 0x03
     14c:	5c 83       	std	Y+4, r21	; 0x04
     14e:	6d 83       	std	Y+5, r22	; 0x05
     150:	7e 83       	std	Y+6, r23	; 0x06
     152:	8f 83       	std	Y+7, r24	; 0x07
     154:	98 87       	std	Y+8, r25	; 0x08
     156:	ce 01       	movw	r24, r28
     158:	09 96       	adiw	r24, 0x09	; 9
     15a:	fc 01       	movw	r30, r24
     15c:	11 92       	st	Z+, r1
     15e:	aa 95       	dec	r26
     160:	e9 f7       	brne	.-6      	; 0x15c <__udivdi3+0x36>
     162:	a9 86       	std	Y+9, r10	; 0x09
     164:	ba 86       	std	Y+10, r11	; 0x0a
     166:	cb 86       	std	Y+11, r12	; 0x0b
     168:	dc 86       	std	Y+12, r13	; 0x0c
     16a:	ed 86       	std	Y+13, r14	; 0x0d
     16c:	fe 86       	std	Y+14, r15	; 0x0e
     16e:	0f 87       	std	Y+15, r16	; 0x0f
     170:	18 8b       	std	Y+16, r17	; 0x10
     172:	29 84       	ldd	r2, Y+9	; 0x09
     174:	3a 84       	ldd	r3, Y+10	; 0x0a
     176:	4b 84       	ldd	r4, Y+11	; 0x0b
     178:	5c 84       	ldd	r5, Y+12	; 0x0c
     17a:	ed 84       	ldd	r14, Y+13	; 0x0d
     17c:	fe 84       	ldd	r15, Y+14	; 0x0e
     17e:	0f 85       	ldd	r16, Y+15	; 0x0f
     180:	18 89       	ldd	r17, Y+16	; 0x10
     182:	69 80       	ldd	r6, Y+1	; 0x01
     184:	7a 80       	ldd	r7, Y+2	; 0x02
     186:	8b 80       	ldd	r8, Y+3	; 0x03
     188:	9c 80       	ldd	r9, Y+4	; 0x04
     18a:	6d a6       	std	Y+45, r6	; 0x2d
     18c:	7e a6       	std	Y+46, r7	; 0x2e
     18e:	8f a6       	std	Y+47, r8	; 0x2f
     190:	98 aa       	std	Y+48, r9	; 0x30
     192:	6d 80       	ldd	r6, Y+5	; 0x05
     194:	7e 80       	ldd	r7, Y+6	; 0x06
     196:	8f 80       	ldd	r8, Y+7	; 0x07
     198:	98 84       	ldd	r9, Y+8	; 0x08
     19a:	e1 14       	cp	r14, r1
     19c:	f1 04       	cpc	r15, r1
     19e:	01 05       	cpc	r16, r1
     1a0:	11 05       	cpc	r17, r1
     1a2:	09 f0       	breq	.+2      	; 0x1a6 <__udivdi3+0x80>
     1a4:	b3 c3       	rjmp	.+1894   	; 0x90c <__udivdi3+0x7e6>
     1a6:	62 14       	cp	r6, r2
     1a8:	73 04       	cpc	r7, r3
     1aa:	84 04       	cpc	r8, r4
     1ac:	95 04       	cpc	r9, r5
     1ae:	08 f0       	brcs	.+2      	; 0x1b2 <__udivdi3+0x8c>
     1b0:	3d c1       	rjmp	.+634    	; 0x42c <__udivdi3+0x306>
     1b2:	00 e0       	ldi	r16, 0x00	; 0
     1b4:	20 16       	cp	r2, r16
     1b6:	00 e0       	ldi	r16, 0x00	; 0
     1b8:	30 06       	cpc	r3, r16
     1ba:	01 e0       	ldi	r16, 0x01	; 1
     1bc:	40 06       	cpc	r4, r16
     1be:	00 e0       	ldi	r16, 0x00	; 0
     1c0:	50 06       	cpc	r5, r16
     1c2:	88 f4       	brcc	.+34     	; 0x1e6 <__udivdi3+0xc0>
     1c4:	1f ef       	ldi	r17, 0xFF	; 255
     1c6:	21 16       	cp	r2, r17
     1c8:	31 04       	cpc	r3, r1
     1ca:	41 04       	cpc	r4, r1
     1cc:	51 04       	cpc	r5, r1
     1ce:	39 f0       	breq	.+14     	; 0x1de <__udivdi3+0xb8>
     1d0:	30 f0       	brcs	.+12     	; 0x1de <__udivdi3+0xb8>
     1d2:	48 e0       	ldi	r20, 0x08	; 8
     1d4:	e4 2e       	mov	r14, r20
     1d6:	f1 2c       	mov	r15, r1
     1d8:	01 2d       	mov	r16, r1
     1da:	11 2d       	mov	r17, r1
     1dc:	18 c0       	rjmp	.+48     	; 0x20e <__udivdi3+0xe8>
     1de:	ee 24       	eor	r14, r14
     1e0:	ff 24       	eor	r15, r15
     1e2:	87 01       	movw	r16, r14
     1e4:	14 c0       	rjmp	.+40     	; 0x20e <__udivdi3+0xe8>
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	22 16       	cp	r2, r18
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	32 06       	cpc	r3, r18
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	42 06       	cpc	r4, r18
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	52 06       	cpc	r5, r18
     1f6:	30 f0       	brcs	.+12     	; 0x204 <__udivdi3+0xde>
     1f8:	38 e1       	ldi	r19, 0x18	; 24
     1fa:	e3 2e       	mov	r14, r19
     1fc:	f1 2c       	mov	r15, r1
     1fe:	01 2d       	mov	r16, r1
     200:	11 2d       	mov	r17, r1
     202:	05 c0       	rjmp	.+10     	; 0x20e <__udivdi3+0xe8>
     204:	20 e1       	ldi	r18, 0x10	; 16
     206:	e2 2e       	mov	r14, r18
     208:	f1 2c       	mov	r15, r1
     20a:	01 2d       	mov	r16, r1
     20c:	11 2d       	mov	r17, r1
     20e:	d2 01       	movw	r26, r4
     210:	c1 01       	movw	r24, r2
     212:	0e 2c       	mov	r0, r14
     214:	04 c0       	rjmp	.+8      	; 0x21e <__udivdi3+0xf8>
     216:	b6 95       	lsr	r27
     218:	a7 95       	ror	r26
     21a:	97 95       	ror	r25
     21c:	87 95       	ror	r24
     21e:	0a 94       	dec	r0
     220:	d2 f7       	brpl	.-12     	; 0x216 <__udivdi3+0xf0>
     222:	80 53       	subi	r24, 0x30	; 48
     224:	9e 4f       	sbci	r25, 0xFE	; 254
     226:	dc 01       	movw	r26, r24
     228:	2c 91       	ld	r18, X
     22a:	80 e2       	ldi	r24, 0x20	; 32
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e0       	ldi	r27, 0x00	; 0
     232:	8e 19       	sub	r24, r14
     234:	9f 09       	sbc	r25, r15
     236:	a0 0b       	sbc	r26, r16
     238:	b1 0b       	sbc	r27, r17
     23a:	7c 01       	movw	r14, r24
     23c:	8d 01       	movw	r16, r26
     23e:	e2 1a       	sub	r14, r18
     240:	f1 08       	sbc	r15, r1
     242:	01 09       	sbc	r16, r1
     244:	11 09       	sbc	r17, r1
     246:	e1 14       	cp	r14, r1
     248:	f1 04       	cpc	r15, r1
     24a:	01 05       	cpc	r16, r1
     24c:	11 05       	cpc	r17, r1
     24e:	a1 f1       	breq	.+104    	; 0x2b8 <__udivdi3+0x192>
     250:	0e 2c       	mov	r0, r14
     252:	04 c0       	rjmp	.+8      	; 0x25c <__udivdi3+0x136>
     254:	22 0c       	add	r2, r2
     256:	33 1c       	adc	r3, r3
     258:	44 1c       	adc	r4, r4
     25a:	55 1c       	adc	r5, r5
     25c:	0a 94       	dec	r0
     25e:	d2 f7       	brpl	.-12     	; 0x254 <__udivdi3+0x12e>
     260:	a4 01       	movw	r20, r8
     262:	93 01       	movw	r18, r6
     264:	0e 2c       	mov	r0, r14
     266:	04 c0       	rjmp	.+8      	; 0x270 <__udivdi3+0x14a>
     268:	22 0f       	add	r18, r18
     26a:	33 1f       	adc	r19, r19
     26c:	44 1f       	adc	r20, r20
     26e:	55 1f       	adc	r21, r21
     270:	0a 94       	dec	r0
     272:	d2 f7       	brpl	.-12     	; 0x268 <__udivdi3+0x142>
     274:	80 e2       	ldi	r24, 0x20	; 32
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	8e 19       	sub	r24, r14
     27a:	9f 09       	sbc	r25, r15
     27c:	6d a4       	ldd	r6, Y+45	; 0x2d
     27e:	7e a4       	ldd	r7, Y+46	; 0x2e
     280:	8f a4       	ldd	r8, Y+47	; 0x2f
     282:	98 a8       	ldd	r9, Y+48	; 0x30
     284:	04 c0       	rjmp	.+8      	; 0x28e <__udivdi3+0x168>
     286:	96 94       	lsr	r9
     288:	87 94       	ror	r8
     28a:	77 94       	ror	r7
     28c:	67 94       	ror	r6
     28e:	8a 95       	dec	r24
     290:	d2 f7       	brpl	.-12     	; 0x286 <__udivdi3+0x160>
     292:	62 2a       	or	r6, r18
     294:	73 2a       	or	r7, r19
     296:	84 2a       	or	r8, r20
     298:	95 2a       	or	r9, r21
     29a:	ad a4       	ldd	r10, Y+45	; 0x2d
     29c:	be a4       	ldd	r11, Y+46	; 0x2e
     29e:	cf a4       	ldd	r12, Y+47	; 0x2f
     2a0:	d8 a8       	ldd	r13, Y+48	; 0x30
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <__udivdi3+0x186>
     2a4:	aa 0c       	add	r10, r10
     2a6:	bb 1c       	adc	r11, r11
     2a8:	cc 1c       	adc	r12, r12
     2aa:	dd 1c       	adc	r13, r13
     2ac:	ea 94       	dec	r14
     2ae:	d2 f7       	brpl	.-12     	; 0x2a4 <__udivdi3+0x17e>
     2b0:	ad a6       	std	Y+45, r10	; 0x2d
     2b2:	be a6       	std	Y+46, r11	; 0x2e
     2b4:	cf a6       	std	Y+47, r12	; 0x2f
     2b6:	d8 aa       	std	Y+48, r13	; 0x30
     2b8:	62 01       	movw	r12, r4
     2ba:	ee 24       	eor	r14, r14
     2bc:	ff 24       	eor	r15, r15
     2be:	cd aa       	std	Y+53, r12	; 0x35
     2c0:	de aa       	std	Y+54, r13	; 0x36
     2c2:	ef aa       	std	Y+55, r14	; 0x37
     2c4:	f8 ae       	std	Y+56, r15	; 0x38
     2c6:	92 01       	movw	r18, r4
     2c8:	81 01       	movw	r16, r2
     2ca:	20 70       	andi	r18, 0x00	; 0
     2cc:	30 70       	andi	r19, 0x00	; 0
     2ce:	09 af       	std	Y+57, r16	; 0x39
     2d0:	1a af       	std	Y+58, r17	; 0x3a
     2d2:	2b af       	std	Y+59, r18	; 0x3b
     2d4:	3c af       	std	Y+60, r19	; 0x3c
     2d6:	c4 01       	movw	r24, r8
     2d8:	b3 01       	movw	r22, r6
     2da:	a7 01       	movw	r20, r14
     2dc:	96 01       	movw	r18, r12
     2de:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
     2e2:	7b 01       	movw	r14, r22
     2e4:	8c 01       	movw	r16, r24
     2e6:	c4 01       	movw	r24, r8
     2e8:	b3 01       	movw	r22, r6
     2ea:	2d a9       	ldd	r18, Y+53	; 0x35
     2ec:	3e a9       	ldd	r19, Y+54	; 0x36
     2ee:	4f a9       	ldd	r20, Y+55	; 0x37
     2f0:	58 ad       	ldd	r21, Y+56	; 0x38
     2f2:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
     2f6:	c9 01       	movw	r24, r18
     2f8:	da 01       	movw	r26, r20
     2fa:	3c 01       	movw	r6, r24
     2fc:	4d 01       	movw	r8, r26
     2fe:	c4 01       	movw	r24, r8
     300:	b3 01       	movw	r22, r6
     302:	29 ad       	ldd	r18, Y+57	; 0x39
     304:	3a ad       	ldd	r19, Y+58	; 0x3a
     306:	4b ad       	ldd	r20, Y+59	; 0x3b
     308:	5c ad       	ldd	r21, Y+60	; 0x3c
     30a:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
     30e:	9b 01       	movw	r18, r22
     310:	ac 01       	movw	r20, r24
     312:	87 01       	movw	r16, r14
     314:	ff 24       	eor	r15, r15
     316:	ee 24       	eor	r14, r14
     318:	ad a4       	ldd	r10, Y+45	; 0x2d
     31a:	be a4       	ldd	r11, Y+46	; 0x2e
     31c:	cf a4       	ldd	r12, Y+47	; 0x2f
     31e:	d8 a8       	ldd	r13, Y+48	; 0x30
     320:	c6 01       	movw	r24, r12
     322:	aa 27       	eor	r26, r26
     324:	bb 27       	eor	r27, r27
     326:	57 01       	movw	r10, r14
     328:	68 01       	movw	r12, r16
     32a:	a8 2a       	or	r10, r24
     32c:	b9 2a       	or	r11, r25
     32e:	ca 2a       	or	r12, r26
     330:	db 2a       	or	r13, r27
     332:	a2 16       	cp	r10, r18
     334:	b3 06       	cpc	r11, r19
     336:	c4 06       	cpc	r12, r20
     338:	d5 06       	cpc	r13, r21
     33a:	e0 f4       	brcc	.+56     	; 0x374 <__udivdi3+0x24e>
     33c:	08 94       	sec
     33e:	61 08       	sbc	r6, r1
     340:	71 08       	sbc	r7, r1
     342:	81 08       	sbc	r8, r1
     344:	91 08       	sbc	r9, r1
     346:	a2 0c       	add	r10, r2
     348:	b3 1c       	adc	r11, r3
     34a:	c4 1c       	adc	r12, r4
     34c:	d5 1c       	adc	r13, r5
     34e:	a2 14       	cp	r10, r2
     350:	b3 04       	cpc	r11, r3
     352:	c4 04       	cpc	r12, r4
     354:	d5 04       	cpc	r13, r5
     356:	70 f0       	brcs	.+28     	; 0x374 <__udivdi3+0x24e>
     358:	a2 16       	cp	r10, r18
     35a:	b3 06       	cpc	r11, r19
     35c:	c4 06       	cpc	r12, r20
     35e:	d5 06       	cpc	r13, r21
     360:	48 f4       	brcc	.+18     	; 0x374 <__udivdi3+0x24e>
     362:	08 94       	sec
     364:	61 08       	sbc	r6, r1
     366:	71 08       	sbc	r7, r1
     368:	81 08       	sbc	r8, r1
     36a:	91 08       	sbc	r9, r1
     36c:	a2 0c       	add	r10, r2
     36e:	b3 1c       	adc	r11, r3
     370:	c4 1c       	adc	r12, r4
     372:	d5 1c       	adc	r13, r5
     374:	a2 1a       	sub	r10, r18
     376:	b3 0a       	sbc	r11, r19
     378:	c4 0a       	sbc	r12, r20
     37a:	d5 0a       	sbc	r13, r21
     37c:	c6 01       	movw	r24, r12
     37e:	b5 01       	movw	r22, r10
     380:	2d a9       	ldd	r18, Y+53	; 0x35
     382:	3e a9       	ldd	r19, Y+54	; 0x36
     384:	4f a9       	ldd	r20, Y+55	; 0x37
     386:	58 ad       	ldd	r21, Y+56	; 0x38
     388:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
     38c:	7b 01       	movw	r14, r22
     38e:	8c 01       	movw	r16, r24
     390:	c6 01       	movw	r24, r12
     392:	b5 01       	movw	r22, r10
     394:	2d a9       	ldd	r18, Y+53	; 0x35
     396:	3e a9       	ldd	r19, Y+54	; 0x36
     398:	4f a9       	ldd	r20, Y+55	; 0x37
     39a:	58 ad       	ldd	r21, Y+56	; 0x38
     39c:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
     3a0:	c9 01       	movw	r24, r18
     3a2:	da 01       	movw	r26, r20
     3a4:	5c 01       	movw	r10, r24
     3a6:	6d 01       	movw	r12, r26
     3a8:	c6 01       	movw	r24, r12
     3aa:	b5 01       	movw	r22, r10
     3ac:	29 ad       	ldd	r18, Y+57	; 0x39
     3ae:	3a ad       	ldd	r19, Y+58	; 0x3a
     3b0:	4b ad       	ldd	r20, Y+59	; 0x3b
     3b2:	5c ad       	ldd	r21, Y+60	; 0x3c
     3b4:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
     3b8:	9b 01       	movw	r18, r22
     3ba:	ac 01       	movw	r20, r24
     3bc:	87 01       	movw	r16, r14
     3be:	ff 24       	eor	r15, r15
     3c0:	ee 24       	eor	r14, r14
     3c2:	8d a5       	ldd	r24, Y+45	; 0x2d
     3c4:	9e a5       	ldd	r25, Y+46	; 0x2e
     3c6:	af a5       	ldd	r26, Y+47	; 0x2f
     3c8:	b8 a9       	ldd	r27, Y+48	; 0x30
     3ca:	a0 70       	andi	r26, 0x00	; 0
     3cc:	b0 70       	andi	r27, 0x00	; 0
     3ce:	e8 2a       	or	r14, r24
     3d0:	f9 2a       	or	r15, r25
     3d2:	0a 2b       	or	r16, r26
     3d4:	1b 2b       	or	r17, r27
     3d6:	e2 16       	cp	r14, r18
     3d8:	f3 06       	cpc	r15, r19
     3da:	04 07       	cpc	r16, r20
     3dc:	15 07       	cpc	r17, r21
     3de:	c0 f4       	brcc	.+48     	; 0x410 <__udivdi3+0x2ea>
     3e0:	08 94       	sec
     3e2:	a1 08       	sbc	r10, r1
     3e4:	b1 08       	sbc	r11, r1
     3e6:	c1 08       	sbc	r12, r1
     3e8:	d1 08       	sbc	r13, r1
     3ea:	e2 0c       	add	r14, r2
     3ec:	f3 1c       	adc	r15, r3
     3ee:	04 1d       	adc	r16, r4
     3f0:	15 1d       	adc	r17, r5
     3f2:	e2 14       	cp	r14, r2
     3f4:	f3 04       	cpc	r15, r3
     3f6:	04 05       	cpc	r16, r4
     3f8:	15 05       	cpc	r17, r5
     3fa:	50 f0       	brcs	.+20     	; 0x410 <__udivdi3+0x2ea>
     3fc:	e2 16       	cp	r14, r18
     3fe:	f3 06       	cpc	r15, r19
     400:	04 07       	cpc	r16, r20
     402:	15 07       	cpc	r17, r21
     404:	28 f4       	brcc	.+10     	; 0x410 <__udivdi3+0x2ea>
     406:	08 94       	sec
     408:	a1 08       	sbc	r10, r1
     40a:	b1 08       	sbc	r11, r1
     40c:	c1 08       	sbc	r12, r1
     40e:	d1 08       	sbc	r13, r1
     410:	d3 01       	movw	r26, r6
     412:	99 27       	eor	r25, r25
     414:	88 27       	eor	r24, r24
     416:	86 01       	movw	r16, r12
     418:	75 01       	movw	r14, r10
     41a:	e8 2a       	or	r14, r24
     41c:	f9 2a       	or	r15, r25
     41e:	0a 2b       	or	r16, r26
     420:	1b 2b       	or	r17, r27
     422:	e9 aa       	std	Y+49, r14	; 0x31
     424:	fa aa       	std	Y+50, r15	; 0x32
     426:	0b ab       	std	Y+51, r16	; 0x33
     428:	1c ab       	std	Y+52, r17	; 0x34
     42a:	cf c4       	rjmp	.+2462   	; 0xdca <__udivdi3+0xca4>
     42c:	21 14       	cp	r2, r1
     42e:	31 04       	cpc	r3, r1
     430:	41 04       	cpc	r4, r1
     432:	51 04       	cpc	r5, r1
     434:	71 f4       	brne	.+28     	; 0x452 <__udivdi3+0x32c>
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	40 e0       	ldi	r20, 0x00	; 0
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
     44a:	c9 01       	movw	r24, r18
     44c:	da 01       	movw	r26, r20
     44e:	1c 01       	movw	r2, r24
     450:	2d 01       	movw	r4, r26
     452:	00 e0       	ldi	r16, 0x00	; 0
     454:	20 16       	cp	r2, r16
     456:	00 e0       	ldi	r16, 0x00	; 0
     458:	30 06       	cpc	r3, r16
     45a:	01 e0       	ldi	r16, 0x01	; 1
     45c:	40 06       	cpc	r4, r16
     45e:	00 e0       	ldi	r16, 0x00	; 0
     460:	50 06       	cpc	r5, r16
     462:	88 f4       	brcc	.+34     	; 0x486 <__udivdi3+0x360>
     464:	1f ef       	ldi	r17, 0xFF	; 255
     466:	21 16       	cp	r2, r17
     468:	31 04       	cpc	r3, r1
     46a:	41 04       	cpc	r4, r1
     46c:	51 04       	cpc	r5, r1
     46e:	31 f0       	breq	.+12     	; 0x47c <__udivdi3+0x356>
     470:	28 f0       	brcs	.+10     	; 0x47c <__udivdi3+0x356>
     472:	48 e0       	ldi	r20, 0x08	; 8
     474:	50 e0       	ldi	r21, 0x00	; 0
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	17 c0       	rjmp	.+46     	; 0x4aa <__udivdi3+0x384>
     47c:	40 e0       	ldi	r20, 0x00	; 0
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	12 c0       	rjmp	.+36     	; 0x4aa <__udivdi3+0x384>
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	22 16       	cp	r2, r18
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	32 06       	cpc	r3, r18
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	42 06       	cpc	r4, r18
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	52 06       	cpc	r5, r18
     496:	28 f0       	brcs	.+10     	; 0x4a2 <__udivdi3+0x37c>
     498:	48 e1       	ldi	r20, 0x18	; 24
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	04 c0       	rjmp	.+8      	; 0x4aa <__udivdi3+0x384>
     4a2:	40 e1       	ldi	r20, 0x10	; 16
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	d2 01       	movw	r26, r4
     4ac:	c1 01       	movw	r24, r2
     4ae:	04 2e       	mov	r0, r20
     4b0:	04 c0       	rjmp	.+8      	; 0x4ba <__udivdi3+0x394>
     4b2:	b6 95       	lsr	r27
     4b4:	a7 95       	ror	r26
     4b6:	97 95       	ror	r25
     4b8:	87 95       	ror	r24
     4ba:	0a 94       	dec	r0
     4bc:	d2 f7       	brpl	.-12     	; 0x4b2 <__udivdi3+0x38c>
     4be:	80 53       	subi	r24, 0x30	; 48
     4c0:	9e 4f       	sbci	r25, 0xFE	; 254
     4c2:	dc 01       	movw	r26, r24
     4c4:	2c 91       	ld	r18, X
     4c6:	e0 e2       	ldi	r30, 0x20	; 32
     4c8:	ee 2e       	mov	r14, r30
     4ca:	f1 2c       	mov	r15, r1
     4cc:	01 2d       	mov	r16, r1
     4ce:	11 2d       	mov	r17, r1
     4d0:	d8 01       	movw	r26, r16
     4d2:	c7 01       	movw	r24, r14
     4d4:	84 1b       	sub	r24, r20
     4d6:	95 0b       	sbc	r25, r21
     4d8:	a6 0b       	sbc	r26, r22
     4da:	b7 0b       	sbc	r27, r23
     4dc:	82 1b       	sub	r24, r18
     4de:	91 09       	sbc	r25, r1
     4e0:	a1 09       	sbc	r26, r1
     4e2:	b1 09       	sbc	r27, r1
     4e4:	00 97       	sbiw	r24, 0x00	; 0
     4e6:	a1 05       	cpc	r26, r1
     4e8:	b1 05       	cpc	r27, r1
     4ea:	61 f4       	brne	.+24     	; 0x504 <__udivdi3+0x3de>
     4ec:	64 01       	movw	r12, r8
     4ee:	53 01       	movw	r10, r6
     4f0:	a2 18       	sub	r10, r2
     4f2:	b3 08       	sbc	r11, r3
     4f4:	c4 08       	sbc	r12, r4
     4f6:	d5 08       	sbc	r13, r5
     4f8:	31 e0       	ldi	r19, 0x01	; 1
     4fa:	63 2e       	mov	r6, r19
     4fc:	71 2c       	mov	r7, r1
     4fe:	81 2c       	mov	r8, r1
     500:	91 2c       	mov	r9, r1
     502:	1e c1       	rjmp	.+572    	; 0x740 <__udivdi3+0x61a>
     504:	6f 96       	adiw	r28, 0x1f	; 31
     506:	8f af       	std	Y+63, r24	; 0x3f
     508:	6f 97       	sbiw	r28, 0x1f	; 31
     50a:	08 2e       	mov	r0, r24
     50c:	04 c0       	rjmp	.+8      	; 0x516 <__udivdi3+0x3f0>
     50e:	22 0c       	add	r2, r2
     510:	33 1c       	adc	r3, r3
     512:	44 1c       	adc	r4, r4
     514:	55 1c       	adc	r5, r5
     516:	0a 94       	dec	r0
     518:	d2 f7       	brpl	.-12     	; 0x50e <__udivdi3+0x3e8>
     51a:	ee 2d       	mov	r30, r14
     51c:	e8 1b       	sub	r30, r24
     51e:	64 01       	movw	r12, r8
     520:	53 01       	movw	r10, r6
     522:	0e 2e       	mov	r0, r30
     524:	04 c0       	rjmp	.+8      	; 0x52e <__udivdi3+0x408>
     526:	d6 94       	lsr	r13
     528:	c7 94       	ror	r12
     52a:	b7 94       	ror	r11
     52c:	a7 94       	ror	r10
     52e:	0a 94       	dec	r0
     530:	d2 f7       	brpl	.-12     	; 0x526 <__udivdi3+0x400>
     532:	a4 01       	movw	r20, r8
     534:	93 01       	movw	r18, r6
     536:	6f 96       	adiw	r28, 0x1f	; 31
     538:	0f ac       	ldd	r0, Y+63	; 0x3f
     53a:	6f 97       	sbiw	r28, 0x1f	; 31
     53c:	04 c0       	rjmp	.+8      	; 0x546 <__udivdi3+0x420>
     53e:	22 0f       	add	r18, r18
     540:	33 1f       	adc	r19, r19
     542:	44 1f       	adc	r20, r20
     544:	55 1f       	adc	r21, r21
     546:	0a 94       	dec	r0
     548:	d2 f7       	brpl	.-12     	; 0x53e <__udivdi3+0x418>
     54a:	6d a4       	ldd	r6, Y+45	; 0x2d
     54c:	7e a4       	ldd	r7, Y+46	; 0x2e
     54e:	8f a4       	ldd	r8, Y+47	; 0x2f
     550:	98 a8       	ldd	r9, Y+48	; 0x30
     552:	0e 2e       	mov	r0, r30
     554:	04 c0       	rjmp	.+8      	; 0x55e <__udivdi3+0x438>
     556:	96 94       	lsr	r9
     558:	87 94       	ror	r8
     55a:	77 94       	ror	r7
     55c:	67 94       	ror	r6
     55e:	0a 94       	dec	r0
     560:	d2 f7       	brpl	.-12     	; 0x556 <__udivdi3+0x430>
     562:	84 01       	movw	r16, r8
     564:	73 01       	movw	r14, r6
     566:	e2 2a       	or	r14, r18
     568:	f3 2a       	or	r15, r19
     56a:	04 2b       	or	r16, r20
     56c:	15 2b       	or	r17, r21
     56e:	e9 a6       	std	Y+41, r14	; 0x29
     570:	fa a6       	std	Y+42, r15	; 0x2a
     572:	0b a7       	std	Y+43, r16	; 0x2b
     574:	1c a7       	std	Y+44, r17	; 0x2c
     576:	32 01       	movw	r6, r4
     578:	88 24       	eor	r8, r8
     57a:	99 24       	eor	r9, r9
     57c:	92 01       	movw	r18, r4
     57e:	81 01       	movw	r16, r2
     580:	20 70       	andi	r18, 0x00	; 0
     582:	30 70       	andi	r19, 0x00	; 0
     584:	21 96       	adiw	r28, 0x01	; 1
     586:	0c af       	std	Y+60, r16	; 0x3c
     588:	1d af       	std	Y+61, r17	; 0x3d
     58a:	2e af       	std	Y+62, r18	; 0x3e
     58c:	3f af       	std	Y+63, r19	; 0x3f
     58e:	21 97       	sbiw	r28, 0x01	; 1
     590:	c6 01       	movw	r24, r12
     592:	b5 01       	movw	r22, r10
     594:	a4 01       	movw	r20, r8
     596:	93 01       	movw	r18, r6
     598:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
     59c:	7b 01       	movw	r14, r22
     59e:	8c 01       	movw	r16, r24
     5a0:	c6 01       	movw	r24, r12
     5a2:	b5 01       	movw	r22, r10
     5a4:	a4 01       	movw	r20, r8
     5a6:	93 01       	movw	r18, r6
     5a8:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
     5ac:	c9 01       	movw	r24, r18
     5ae:	da 01       	movw	r26, r20
     5b0:	25 96       	adiw	r28, 0x05	; 5
     5b2:	8c af       	std	Y+60, r24	; 0x3c
     5b4:	9d af       	std	Y+61, r25	; 0x3d
     5b6:	ae af       	std	Y+62, r26	; 0x3e
     5b8:	bf af       	std	Y+63, r27	; 0x3f
     5ba:	25 97       	sbiw	r28, 0x05	; 5
     5bc:	bc 01       	movw	r22, r24
     5be:	cd 01       	movw	r24, r26
     5c0:	21 96       	adiw	r28, 0x01	; 1
     5c2:	2c ad       	ldd	r18, Y+60	; 0x3c
     5c4:	3d ad       	ldd	r19, Y+61	; 0x3d
     5c6:	4e ad       	ldd	r20, Y+62	; 0x3e
     5c8:	5f ad       	ldd	r21, Y+63	; 0x3f
     5ca:	21 97       	sbiw	r28, 0x01	; 1
     5cc:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
     5d0:	9b 01       	movw	r18, r22
     5d2:	ac 01       	movw	r20, r24
     5d4:	87 01       	movw	r16, r14
     5d6:	ff 24       	eor	r15, r15
     5d8:	ee 24       	eor	r14, r14
     5da:	a9 a4       	ldd	r10, Y+41	; 0x29
     5dc:	ba a4       	ldd	r11, Y+42	; 0x2a
     5de:	cb a4       	ldd	r12, Y+43	; 0x2b
     5e0:	dc a4       	ldd	r13, Y+44	; 0x2c
     5e2:	c6 01       	movw	r24, r12
     5e4:	aa 27       	eor	r26, r26
     5e6:	bb 27       	eor	r27, r27
     5e8:	5c 01       	movw	r10, r24
     5ea:	6d 01       	movw	r12, r26
     5ec:	ae 28       	or	r10, r14
     5ee:	bf 28       	or	r11, r15
     5f0:	c0 2a       	or	r12, r16
     5f2:	d1 2a       	or	r13, r17
     5f4:	a2 16       	cp	r10, r18
     5f6:	b3 06       	cpc	r11, r19
     5f8:	c4 06       	cpc	r12, r20
     5fa:	d5 06       	cpc	r13, r21
     5fc:	60 f5       	brcc	.+88     	; 0x656 <__udivdi3+0x530>
     5fe:	25 96       	adiw	r28, 0x05	; 5
     600:	6c ad       	ldd	r22, Y+60	; 0x3c
     602:	7d ad       	ldd	r23, Y+61	; 0x3d
     604:	8e ad       	ldd	r24, Y+62	; 0x3e
     606:	9f ad       	ldd	r25, Y+63	; 0x3f
     608:	25 97       	sbiw	r28, 0x05	; 5
     60a:	61 50       	subi	r22, 0x01	; 1
     60c:	70 40       	sbci	r23, 0x00	; 0
     60e:	80 40       	sbci	r24, 0x00	; 0
     610:	90 40       	sbci	r25, 0x00	; 0
     612:	25 96       	adiw	r28, 0x05	; 5
     614:	6c af       	std	Y+60, r22	; 0x3c
     616:	7d af       	std	Y+61, r23	; 0x3d
     618:	8e af       	std	Y+62, r24	; 0x3e
     61a:	9f af       	std	Y+63, r25	; 0x3f
     61c:	25 97       	sbiw	r28, 0x05	; 5
     61e:	a2 0c       	add	r10, r2
     620:	b3 1c       	adc	r11, r3
     622:	c4 1c       	adc	r12, r4
     624:	d5 1c       	adc	r13, r5
     626:	a2 14       	cp	r10, r2
     628:	b3 04       	cpc	r11, r3
     62a:	c4 04       	cpc	r12, r4
     62c:	d5 04       	cpc	r13, r5
     62e:	98 f0       	brcs	.+38     	; 0x656 <__udivdi3+0x530>
     630:	a2 16       	cp	r10, r18
     632:	b3 06       	cpc	r11, r19
     634:	c4 06       	cpc	r12, r20
     636:	d5 06       	cpc	r13, r21
     638:	70 f4       	brcc	.+28     	; 0x656 <__udivdi3+0x530>
     63a:	61 50       	subi	r22, 0x01	; 1
     63c:	70 40       	sbci	r23, 0x00	; 0
     63e:	80 40       	sbci	r24, 0x00	; 0
     640:	90 40       	sbci	r25, 0x00	; 0
     642:	25 96       	adiw	r28, 0x05	; 5
     644:	6c af       	std	Y+60, r22	; 0x3c
     646:	7d af       	std	Y+61, r23	; 0x3d
     648:	8e af       	std	Y+62, r24	; 0x3e
     64a:	9f af       	std	Y+63, r25	; 0x3f
     64c:	25 97       	sbiw	r28, 0x05	; 5
     64e:	a2 0c       	add	r10, r2
     650:	b3 1c       	adc	r11, r3
     652:	c4 1c       	adc	r12, r4
     654:	d5 1c       	adc	r13, r5
     656:	a2 1a       	sub	r10, r18
     658:	b3 0a       	sbc	r11, r19
     65a:	c4 0a       	sbc	r12, r20
     65c:	d5 0a       	sbc	r13, r21
     65e:	c6 01       	movw	r24, r12
     660:	b5 01       	movw	r22, r10
     662:	a4 01       	movw	r20, r8
     664:	93 01       	movw	r18, r6
     666:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
     66a:	7b 01       	movw	r14, r22
     66c:	8c 01       	movw	r16, r24
     66e:	c6 01       	movw	r24, r12
     670:	b5 01       	movw	r22, r10
     672:	a4 01       	movw	r20, r8
     674:	93 01       	movw	r18, r6
     676:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
     67a:	c9 01       	movw	r24, r18
     67c:	da 01       	movw	r26, r20
     67e:	3c 01       	movw	r6, r24
     680:	4d 01       	movw	r8, r26
     682:	c4 01       	movw	r24, r8
     684:	b3 01       	movw	r22, r6
     686:	21 96       	adiw	r28, 0x01	; 1
     688:	2c ad       	ldd	r18, Y+60	; 0x3c
     68a:	3d ad       	ldd	r19, Y+61	; 0x3d
     68c:	4e ad       	ldd	r20, Y+62	; 0x3e
     68e:	5f ad       	ldd	r21, Y+63	; 0x3f
     690:	21 97       	sbiw	r28, 0x01	; 1
     692:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
     696:	9b 01       	movw	r18, r22
     698:	ac 01       	movw	r20, r24
     69a:	87 01       	movw	r16, r14
     69c:	ff 24       	eor	r15, r15
     69e:	ee 24       	eor	r14, r14
     6a0:	89 a5       	ldd	r24, Y+41	; 0x29
     6a2:	9a a5       	ldd	r25, Y+42	; 0x2a
     6a4:	ab a5       	ldd	r26, Y+43	; 0x2b
     6a6:	bc a5       	ldd	r27, Y+44	; 0x2c
     6a8:	a0 70       	andi	r26, 0x00	; 0
     6aa:	b0 70       	andi	r27, 0x00	; 0
     6ac:	57 01       	movw	r10, r14
     6ae:	68 01       	movw	r12, r16
     6b0:	a8 2a       	or	r10, r24
     6b2:	b9 2a       	or	r11, r25
     6b4:	ca 2a       	or	r12, r26
     6b6:	db 2a       	or	r13, r27
     6b8:	a2 16       	cp	r10, r18
     6ba:	b3 06       	cpc	r11, r19
     6bc:	c4 06       	cpc	r12, r20
     6be:	d5 06       	cpc	r13, r21
     6c0:	e0 f4       	brcc	.+56     	; 0x6fa <__udivdi3+0x5d4>
     6c2:	08 94       	sec
     6c4:	61 08       	sbc	r6, r1
     6c6:	71 08       	sbc	r7, r1
     6c8:	81 08       	sbc	r8, r1
     6ca:	91 08       	sbc	r9, r1
     6cc:	a2 0c       	add	r10, r2
     6ce:	b3 1c       	adc	r11, r3
     6d0:	c4 1c       	adc	r12, r4
     6d2:	d5 1c       	adc	r13, r5
     6d4:	a2 14       	cp	r10, r2
     6d6:	b3 04       	cpc	r11, r3
     6d8:	c4 04       	cpc	r12, r4
     6da:	d5 04       	cpc	r13, r5
     6dc:	70 f0       	brcs	.+28     	; 0x6fa <__udivdi3+0x5d4>
     6de:	a2 16       	cp	r10, r18
     6e0:	b3 06       	cpc	r11, r19
     6e2:	c4 06       	cpc	r12, r20
     6e4:	d5 06       	cpc	r13, r21
     6e6:	48 f4       	brcc	.+18     	; 0x6fa <__udivdi3+0x5d4>
     6e8:	08 94       	sec
     6ea:	61 08       	sbc	r6, r1
     6ec:	71 08       	sbc	r7, r1
     6ee:	81 08       	sbc	r8, r1
     6f0:	91 08       	sbc	r9, r1
     6f2:	a2 0c       	add	r10, r2
     6f4:	b3 1c       	adc	r11, r3
     6f6:	c4 1c       	adc	r12, r4
     6f8:	d5 1c       	adc	r13, r5
     6fa:	8d a5       	ldd	r24, Y+45	; 0x2d
     6fc:	9e a5       	ldd	r25, Y+46	; 0x2e
     6fe:	af a5       	ldd	r26, Y+47	; 0x2f
     700:	b8 a9       	ldd	r27, Y+48	; 0x30
     702:	6f 96       	adiw	r28, 0x1f	; 31
     704:	0f ac       	ldd	r0, Y+63	; 0x3f
     706:	6f 97       	sbiw	r28, 0x1f	; 31
     708:	04 c0       	rjmp	.+8      	; 0x712 <__udivdi3+0x5ec>
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	aa 1f       	adc	r26, r26
     710:	bb 1f       	adc	r27, r27
     712:	0a 94       	dec	r0
     714:	d2 f7       	brpl	.-12     	; 0x70a <__udivdi3+0x5e4>
     716:	8d a7       	std	Y+45, r24	; 0x2d
     718:	9e a7       	std	Y+46, r25	; 0x2e
     71a:	af a7       	std	Y+47, r26	; 0x2f
     71c:	b8 ab       	std	Y+48, r27	; 0x30
     71e:	a2 1a       	sub	r10, r18
     720:	b3 0a       	sbc	r11, r19
     722:	c4 0a       	sbc	r12, r20
     724:	d5 0a       	sbc	r13, r21
     726:	25 96       	adiw	r28, 0x05	; 5
     728:	ec ac       	ldd	r14, Y+60	; 0x3c
     72a:	fd ac       	ldd	r15, Y+61	; 0x3d
     72c:	0e ad       	ldd	r16, Y+62	; 0x3e
     72e:	1f ad       	ldd	r17, Y+63	; 0x3f
     730:	25 97       	sbiw	r28, 0x05	; 5
     732:	d7 01       	movw	r26, r14
     734:	99 27       	eor	r25, r25
     736:	88 27       	eor	r24, r24
     738:	68 2a       	or	r6, r24
     73a:	79 2a       	or	r7, r25
     73c:	8a 2a       	or	r8, r26
     73e:	9b 2a       	or	r9, r27
     740:	82 01       	movw	r16, r4
     742:	22 27       	eor	r18, r18
     744:	33 27       	eor	r19, r19
     746:	29 96       	adiw	r28, 0x09	; 9
     748:	0c af       	std	Y+60, r16	; 0x3c
     74a:	1d af       	std	Y+61, r17	; 0x3d
     74c:	2e af       	std	Y+62, r18	; 0x3e
     74e:	3f af       	std	Y+63, r19	; 0x3f
     750:	29 97       	sbiw	r28, 0x09	; 9
     752:	a2 01       	movw	r20, r4
     754:	91 01       	movw	r18, r2
     756:	40 70       	andi	r20, 0x00	; 0
     758:	50 70       	andi	r21, 0x00	; 0
     75a:	2d 96       	adiw	r28, 0x0d	; 13
     75c:	2c af       	std	Y+60, r18	; 0x3c
     75e:	3d af       	std	Y+61, r19	; 0x3d
     760:	4e af       	std	Y+62, r20	; 0x3e
     762:	5f af       	std	Y+63, r21	; 0x3f
     764:	2d 97       	sbiw	r28, 0x0d	; 13
     766:	c6 01       	movw	r24, r12
     768:	b5 01       	movw	r22, r10
     76a:	29 96       	adiw	r28, 0x09	; 9
     76c:	2c ad       	ldd	r18, Y+60	; 0x3c
     76e:	3d ad       	ldd	r19, Y+61	; 0x3d
     770:	4e ad       	ldd	r20, Y+62	; 0x3e
     772:	5f ad       	ldd	r21, Y+63	; 0x3f
     774:	29 97       	sbiw	r28, 0x09	; 9
     776:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
     77a:	7b 01       	movw	r14, r22
     77c:	8c 01       	movw	r16, r24
     77e:	c6 01       	movw	r24, r12
     780:	b5 01       	movw	r22, r10
     782:	29 96       	adiw	r28, 0x09	; 9
     784:	2c ad       	ldd	r18, Y+60	; 0x3c
     786:	3d ad       	ldd	r19, Y+61	; 0x3d
     788:	4e ad       	ldd	r20, Y+62	; 0x3e
     78a:	5f ad       	ldd	r21, Y+63	; 0x3f
     78c:	29 97       	sbiw	r28, 0x09	; 9
     78e:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
     792:	c9 01       	movw	r24, r18
     794:	da 01       	movw	r26, r20
     796:	61 96       	adiw	r28, 0x11	; 17
     798:	8c af       	std	Y+60, r24	; 0x3c
     79a:	9d af       	std	Y+61, r25	; 0x3d
     79c:	ae af       	std	Y+62, r26	; 0x3e
     79e:	bf af       	std	Y+63, r27	; 0x3f
     7a0:	61 97       	sbiw	r28, 0x11	; 17
     7a2:	bc 01       	movw	r22, r24
     7a4:	cd 01       	movw	r24, r26
     7a6:	2d 96       	adiw	r28, 0x0d	; 13
     7a8:	2c ad       	ldd	r18, Y+60	; 0x3c
     7aa:	3d ad       	ldd	r19, Y+61	; 0x3d
     7ac:	4e ad       	ldd	r20, Y+62	; 0x3e
     7ae:	5f ad       	ldd	r21, Y+63	; 0x3f
     7b0:	2d 97       	sbiw	r28, 0x0d	; 13
     7b2:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
     7b6:	9b 01       	movw	r18, r22
     7b8:	ac 01       	movw	r20, r24
     7ba:	87 01       	movw	r16, r14
     7bc:	ff 24       	eor	r15, r15
     7be:	ee 24       	eor	r14, r14
     7c0:	ad a4       	ldd	r10, Y+45	; 0x2d
     7c2:	be a4       	ldd	r11, Y+46	; 0x2e
     7c4:	cf a4       	ldd	r12, Y+47	; 0x2f
     7c6:	d8 a8       	ldd	r13, Y+48	; 0x30
     7c8:	c6 01       	movw	r24, r12
     7ca:	aa 27       	eor	r26, r26
     7cc:	bb 27       	eor	r27, r27
     7ce:	57 01       	movw	r10, r14
     7d0:	68 01       	movw	r12, r16
     7d2:	a8 2a       	or	r10, r24
     7d4:	b9 2a       	or	r11, r25
     7d6:	ca 2a       	or	r12, r26
     7d8:	db 2a       	or	r13, r27
     7da:	a2 16       	cp	r10, r18
     7dc:	b3 06       	cpc	r11, r19
     7de:	c4 06       	cpc	r12, r20
     7e0:	d5 06       	cpc	r13, r21
     7e2:	60 f5       	brcc	.+88     	; 0x83c <__udivdi3+0x716>
     7e4:	61 96       	adiw	r28, 0x11	; 17
     7e6:	6c ad       	ldd	r22, Y+60	; 0x3c
     7e8:	7d ad       	ldd	r23, Y+61	; 0x3d
     7ea:	8e ad       	ldd	r24, Y+62	; 0x3e
     7ec:	9f ad       	ldd	r25, Y+63	; 0x3f
     7ee:	61 97       	sbiw	r28, 0x11	; 17
     7f0:	61 50       	subi	r22, 0x01	; 1
     7f2:	70 40       	sbci	r23, 0x00	; 0
     7f4:	80 40       	sbci	r24, 0x00	; 0
     7f6:	90 40       	sbci	r25, 0x00	; 0
     7f8:	61 96       	adiw	r28, 0x11	; 17
     7fa:	6c af       	std	Y+60, r22	; 0x3c
     7fc:	7d af       	std	Y+61, r23	; 0x3d
     7fe:	8e af       	std	Y+62, r24	; 0x3e
     800:	9f af       	std	Y+63, r25	; 0x3f
     802:	61 97       	sbiw	r28, 0x11	; 17
     804:	a2 0c       	add	r10, r2
     806:	b3 1c       	adc	r11, r3
     808:	c4 1c       	adc	r12, r4
     80a:	d5 1c       	adc	r13, r5
     80c:	a2 14       	cp	r10, r2
     80e:	b3 04       	cpc	r11, r3
     810:	c4 04       	cpc	r12, r4
     812:	d5 04       	cpc	r13, r5
     814:	98 f0       	brcs	.+38     	; 0x83c <__udivdi3+0x716>
     816:	a2 16       	cp	r10, r18
     818:	b3 06       	cpc	r11, r19
     81a:	c4 06       	cpc	r12, r20
     81c:	d5 06       	cpc	r13, r21
     81e:	70 f4       	brcc	.+28     	; 0x83c <__udivdi3+0x716>
     820:	61 50       	subi	r22, 0x01	; 1
     822:	70 40       	sbci	r23, 0x00	; 0
     824:	80 40       	sbci	r24, 0x00	; 0
     826:	90 40       	sbci	r25, 0x00	; 0
     828:	61 96       	adiw	r28, 0x11	; 17
     82a:	6c af       	std	Y+60, r22	; 0x3c
     82c:	7d af       	std	Y+61, r23	; 0x3d
     82e:	8e af       	std	Y+62, r24	; 0x3e
     830:	9f af       	std	Y+63, r25	; 0x3f
     832:	61 97       	sbiw	r28, 0x11	; 17
     834:	a2 0c       	add	r10, r2
     836:	b3 1c       	adc	r11, r3
     838:	c4 1c       	adc	r12, r4
     83a:	d5 1c       	adc	r13, r5
     83c:	a2 1a       	sub	r10, r18
     83e:	b3 0a       	sbc	r11, r19
     840:	c4 0a       	sbc	r12, r20
     842:	d5 0a       	sbc	r13, r21
     844:	c6 01       	movw	r24, r12
     846:	b5 01       	movw	r22, r10
     848:	29 96       	adiw	r28, 0x09	; 9
     84a:	2c ad       	ldd	r18, Y+60	; 0x3c
     84c:	3d ad       	ldd	r19, Y+61	; 0x3d
     84e:	4e ad       	ldd	r20, Y+62	; 0x3e
     850:	5f ad       	ldd	r21, Y+63	; 0x3f
     852:	29 97       	sbiw	r28, 0x09	; 9
     854:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
     858:	7b 01       	movw	r14, r22
     85a:	8c 01       	movw	r16, r24
     85c:	c6 01       	movw	r24, r12
     85e:	b5 01       	movw	r22, r10
     860:	29 96       	adiw	r28, 0x09	; 9
     862:	2c ad       	ldd	r18, Y+60	; 0x3c
     864:	3d ad       	ldd	r19, Y+61	; 0x3d
     866:	4e ad       	ldd	r20, Y+62	; 0x3e
     868:	5f ad       	ldd	r21, Y+63	; 0x3f
     86a:	29 97       	sbiw	r28, 0x09	; 9
     86c:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
     870:	c9 01       	movw	r24, r18
     872:	da 01       	movw	r26, r20
     874:	5c 01       	movw	r10, r24
     876:	6d 01       	movw	r12, r26
     878:	c6 01       	movw	r24, r12
     87a:	b5 01       	movw	r22, r10
     87c:	2d 96       	adiw	r28, 0x0d	; 13
     87e:	2c ad       	ldd	r18, Y+60	; 0x3c
     880:	3d ad       	ldd	r19, Y+61	; 0x3d
     882:	4e ad       	ldd	r20, Y+62	; 0x3e
     884:	5f ad       	ldd	r21, Y+63	; 0x3f
     886:	2d 97       	sbiw	r28, 0x0d	; 13
     888:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
     88c:	9b 01       	movw	r18, r22
     88e:	ac 01       	movw	r20, r24
     890:	87 01       	movw	r16, r14
     892:	ff 24       	eor	r15, r15
     894:	ee 24       	eor	r14, r14
     896:	8d a5       	ldd	r24, Y+45	; 0x2d
     898:	9e a5       	ldd	r25, Y+46	; 0x2e
     89a:	af a5       	ldd	r26, Y+47	; 0x2f
     89c:	b8 a9       	ldd	r27, Y+48	; 0x30
     89e:	a0 70       	andi	r26, 0x00	; 0
     8a0:	b0 70       	andi	r27, 0x00	; 0
     8a2:	e8 2a       	or	r14, r24
     8a4:	f9 2a       	or	r15, r25
     8a6:	0a 2b       	or	r16, r26
     8a8:	1b 2b       	or	r17, r27
     8aa:	e2 16       	cp	r14, r18
     8ac:	f3 06       	cpc	r15, r19
     8ae:	04 07       	cpc	r16, r20
     8b0:	15 07       	cpc	r17, r21
     8b2:	c0 f4       	brcc	.+48     	; 0x8e4 <__udivdi3+0x7be>
     8b4:	08 94       	sec
     8b6:	a1 08       	sbc	r10, r1
     8b8:	b1 08       	sbc	r11, r1
     8ba:	c1 08       	sbc	r12, r1
     8bc:	d1 08       	sbc	r13, r1
     8be:	e2 0c       	add	r14, r2
     8c0:	f3 1c       	adc	r15, r3
     8c2:	04 1d       	adc	r16, r4
     8c4:	15 1d       	adc	r17, r5
     8c6:	e2 14       	cp	r14, r2
     8c8:	f3 04       	cpc	r15, r3
     8ca:	04 05       	cpc	r16, r4
     8cc:	15 05       	cpc	r17, r5
     8ce:	50 f0       	brcs	.+20     	; 0x8e4 <__udivdi3+0x7be>
     8d0:	e2 16       	cp	r14, r18
     8d2:	f3 06       	cpc	r15, r19
     8d4:	04 07       	cpc	r16, r20
     8d6:	15 07       	cpc	r17, r21
     8d8:	28 f4       	brcc	.+10     	; 0x8e4 <__udivdi3+0x7be>
     8da:	08 94       	sec
     8dc:	a1 08       	sbc	r10, r1
     8de:	b1 08       	sbc	r11, r1
     8e0:	c1 08       	sbc	r12, r1
     8e2:	d1 08       	sbc	r13, r1
     8e4:	61 96       	adiw	r28, 0x11	; 17
     8e6:	ec ac       	ldd	r14, Y+60	; 0x3c
     8e8:	fd ac       	ldd	r15, Y+61	; 0x3d
     8ea:	0e ad       	ldd	r16, Y+62	; 0x3e
     8ec:	1f ad       	ldd	r17, Y+63	; 0x3f
     8ee:	61 97       	sbiw	r28, 0x11	; 17
     8f0:	d7 01       	movw	r26, r14
     8f2:	99 27       	eor	r25, r25
     8f4:	88 27       	eor	r24, r24
     8f6:	96 01       	movw	r18, r12
     8f8:	85 01       	movw	r16, r10
     8fa:	08 2b       	or	r16, r24
     8fc:	19 2b       	or	r17, r25
     8fe:	2a 2b       	or	r18, r26
     900:	3b 2b       	or	r19, r27
     902:	09 ab       	std	Y+49, r16	; 0x31
     904:	1a ab       	std	Y+50, r17	; 0x32
     906:	2b ab       	std	Y+51, r18	; 0x33
     908:	3c ab       	std	Y+52, r19	; 0x34
     90a:	62 c2       	rjmp	.+1220   	; 0xdd0 <__udivdi3+0xcaa>
     90c:	6e 14       	cp	r6, r14
     90e:	7f 04       	cpc	r7, r15
     910:	80 06       	cpc	r8, r16
     912:	91 06       	cpc	r9, r17
     914:	08 f4       	brcc	.+2      	; 0x918 <__udivdi3+0x7f2>
     916:	51 c2       	rjmp	.+1186   	; 0xdba <__udivdi3+0xc94>
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	e2 16       	cp	r14, r18
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	f2 06       	cpc	r15, r18
     920:	21 e0       	ldi	r18, 0x01	; 1
     922:	02 07       	cpc	r16, r18
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	12 07       	cpc	r17, r18
     928:	88 f4       	brcc	.+34     	; 0x94c <__udivdi3+0x826>
     92a:	3f ef       	ldi	r19, 0xFF	; 255
     92c:	e3 16       	cp	r14, r19
     92e:	f1 04       	cpc	r15, r1
     930:	01 05       	cpc	r16, r1
     932:	11 05       	cpc	r17, r1
     934:	31 f0       	breq	.+12     	; 0x942 <__udivdi3+0x81c>
     936:	28 f0       	brcs	.+10     	; 0x942 <__udivdi3+0x81c>
     938:	48 e0       	ldi	r20, 0x08	; 8
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	17 c0       	rjmp	.+46     	; 0x970 <__udivdi3+0x84a>
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	12 c0       	rjmp	.+36     	; 0x970 <__udivdi3+0x84a>
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	e4 16       	cp	r14, r20
     950:	40 e0       	ldi	r20, 0x00	; 0
     952:	f4 06       	cpc	r15, r20
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	04 07       	cpc	r16, r20
     958:	41 e0       	ldi	r20, 0x01	; 1
     95a:	14 07       	cpc	r17, r20
     95c:	28 f0       	brcs	.+10     	; 0x968 <__udivdi3+0x842>
     95e:	48 e1       	ldi	r20, 0x18	; 24
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	04 c0       	rjmp	.+8      	; 0x970 <__udivdi3+0x84a>
     968:	40 e1       	ldi	r20, 0x10	; 16
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	d8 01       	movw	r26, r16
     972:	c7 01       	movw	r24, r14
     974:	04 2e       	mov	r0, r20
     976:	04 c0       	rjmp	.+8      	; 0x980 <__udivdi3+0x85a>
     978:	b6 95       	lsr	r27
     97a:	a7 95       	ror	r26
     97c:	97 95       	ror	r25
     97e:	87 95       	ror	r24
     980:	0a 94       	dec	r0
     982:	d2 f7       	brpl	.-12     	; 0x978 <__udivdi3+0x852>
     984:	80 53       	subi	r24, 0x30	; 48
     986:	9e 4f       	sbci	r25, 0xFE	; 254
     988:	dc 01       	movw	r26, r24
     98a:	2c 91       	ld	r18, X
     98c:	30 e2       	ldi	r19, 0x20	; 32
     98e:	a3 2e       	mov	r10, r19
     990:	b1 2c       	mov	r11, r1
     992:	c1 2c       	mov	r12, r1
     994:	d1 2c       	mov	r13, r1
     996:	d6 01       	movw	r26, r12
     998:	c5 01       	movw	r24, r10
     99a:	84 1b       	sub	r24, r20
     99c:	95 0b       	sbc	r25, r21
     99e:	a6 0b       	sbc	r26, r22
     9a0:	b7 0b       	sbc	r27, r23
     9a2:	82 1b       	sub	r24, r18
     9a4:	91 09       	sbc	r25, r1
     9a6:	a1 09       	sbc	r26, r1
     9a8:	b1 09       	sbc	r27, r1
     9aa:	00 97       	sbiw	r24, 0x00	; 0
     9ac:	a1 05       	cpc	r26, r1
     9ae:	b1 05       	cpc	r27, r1
     9b0:	89 f4       	brne	.+34     	; 0x9d4 <__udivdi3+0x8ae>
     9b2:	e6 14       	cp	r14, r6
     9b4:	f7 04       	cpc	r15, r7
     9b6:	08 05       	cpc	r16, r8
     9b8:	19 05       	cpc	r17, r9
     9ba:	08 f4       	brcc	.+2      	; 0x9be <__udivdi3+0x898>
     9bc:	f2 c1       	rjmp	.+996    	; 0xda2 <__udivdi3+0xc7c>
     9be:	6d a4       	ldd	r6, Y+45	; 0x2d
     9c0:	7e a4       	ldd	r7, Y+46	; 0x2e
     9c2:	8f a4       	ldd	r8, Y+47	; 0x2f
     9c4:	98 a8       	ldd	r9, Y+48	; 0x30
     9c6:	62 14       	cp	r6, r2
     9c8:	73 04       	cpc	r7, r3
     9ca:	84 04       	cpc	r8, r4
     9cc:	95 04       	cpc	r9, r5
     9ce:	08 f0       	brcs	.+2      	; 0x9d2 <__udivdi3+0x8ac>
     9d0:	e8 c1       	rjmp	.+976    	; 0xda2 <__udivdi3+0xc7c>
     9d2:	f3 c1       	rjmp	.+998    	; 0xdba <__udivdi3+0xc94>
     9d4:	6e 96       	adiw	r28, 0x1e	; 30
     9d6:	8f af       	std	Y+63, r24	; 0x3f
     9d8:	6e 97       	sbiw	r28, 0x1e	; 30
     9da:	08 2e       	mov	r0, r24
     9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <__udivdi3+0x8c0>
     9de:	ee 0c       	add	r14, r14
     9e0:	ff 1c       	adc	r15, r15
     9e2:	00 1f       	adc	r16, r16
     9e4:	11 1f       	adc	r17, r17
     9e6:	0a 94       	dec	r0
     9e8:	d2 f7       	brpl	.-12     	; 0x9de <__udivdi3+0x8b8>
     9ea:	6a 2d       	mov	r22, r10
     9ec:	68 1b       	sub	r22, r24
     9ee:	d2 01       	movw	r26, r4
     9f0:	c1 01       	movw	r24, r2
     9f2:	06 2e       	mov	r0, r22
     9f4:	04 c0       	rjmp	.+8      	; 0x9fe <__udivdi3+0x8d8>
     9f6:	b6 95       	lsr	r27
     9f8:	a7 95       	ror	r26
     9fa:	97 95       	ror	r25
     9fc:	87 95       	ror	r24
     9fe:	0a 94       	dec	r0
     a00:	d2 f7       	brpl	.-12     	; 0x9f6 <__udivdi3+0x8d0>
     a02:	5c 01       	movw	r10, r24
     a04:	6d 01       	movw	r12, r26
     a06:	ae 28       	or	r10, r14
     a08:	bf 28       	or	r11, r15
     a0a:	c0 2a       	or	r12, r16
     a0c:	d1 2a       	or	r13, r17
     a0e:	ad a2       	std	Y+37, r10	; 0x25
     a10:	be a2       	std	Y+38, r11	; 0x26
     a12:	cf a2       	std	Y+39, r12	; 0x27
     a14:	d8 a6       	std	Y+40, r13	; 0x28
     a16:	72 01       	movw	r14, r4
     a18:	61 01       	movw	r12, r2
     a1a:	6e 96       	adiw	r28, 0x1e	; 30
     a1c:	0f ac       	ldd	r0, Y+63	; 0x3f
     a1e:	6e 97       	sbiw	r28, 0x1e	; 30
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <__udivdi3+0x904>
     a22:	cc 0c       	add	r12, r12
     a24:	dd 1c       	adc	r13, r13
     a26:	ee 1c       	adc	r14, r14
     a28:	ff 1c       	adc	r15, r15
     a2a:	0a 94       	dec	r0
     a2c:	d2 f7       	brpl	.-12     	; 0xa22 <__udivdi3+0x8fc>
     a2e:	c9 a2       	std	Y+33, r12	; 0x21
     a30:	da a2       	std	Y+34, r13	; 0x22
     a32:	eb a2       	std	Y+35, r14	; 0x23
     a34:	fc a2       	std	Y+36, r15	; 0x24
     a36:	64 01       	movw	r12, r8
     a38:	53 01       	movw	r10, r6
     a3a:	06 2e       	mov	r0, r22
     a3c:	04 c0       	rjmp	.+8      	; 0xa46 <__udivdi3+0x920>
     a3e:	d6 94       	lsr	r13
     a40:	c7 94       	ror	r12
     a42:	b7 94       	ror	r11
     a44:	a7 94       	ror	r10
     a46:	0a 94       	dec	r0
     a48:	d2 f7       	brpl	.-12     	; 0xa3e <__udivdi3+0x918>
     a4a:	d4 01       	movw	r26, r8
     a4c:	c3 01       	movw	r24, r6
     a4e:	6e 96       	adiw	r28, 0x1e	; 30
     a50:	0f ac       	ldd	r0, Y+63	; 0x3f
     a52:	6e 97       	sbiw	r28, 0x1e	; 30
     a54:	04 c0       	rjmp	.+8      	; 0xa5e <__udivdi3+0x938>
     a56:	88 0f       	add	r24, r24
     a58:	99 1f       	adc	r25, r25
     a5a:	aa 1f       	adc	r26, r26
     a5c:	bb 1f       	adc	r27, r27
     a5e:	0a 94       	dec	r0
     a60:	d2 f7       	brpl	.-12     	; 0xa56 <__udivdi3+0x930>
     a62:	ed a4       	ldd	r14, Y+45	; 0x2d
     a64:	fe a4       	ldd	r15, Y+46	; 0x2e
     a66:	0f a5       	ldd	r16, Y+47	; 0x2f
     a68:	18 a9       	ldd	r17, Y+48	; 0x30
     a6a:	04 c0       	rjmp	.+8      	; 0xa74 <__udivdi3+0x94e>
     a6c:	16 95       	lsr	r17
     a6e:	07 95       	ror	r16
     a70:	f7 94       	ror	r15
     a72:	e7 94       	ror	r14
     a74:	6a 95       	dec	r22
     a76:	d2 f7       	brpl	.-12     	; 0xa6c <__udivdi3+0x946>
     a78:	37 01       	movw	r6, r14
     a7a:	48 01       	movw	r8, r16
     a7c:	68 2a       	or	r6, r24
     a7e:	79 2a       	or	r7, r25
     a80:	8a 2a       	or	r8, r26
     a82:	9b 2a       	or	r9, r27
     a84:	6d 8e       	std	Y+29, r6	; 0x1d
     a86:	7e 8e       	std	Y+30, r7	; 0x1e
     a88:	8f 8e       	std	Y+31, r8	; 0x1f
     a8a:	98 a2       	std	Y+32, r9	; 0x20
     a8c:	ed a0       	ldd	r14, Y+37	; 0x25
     a8e:	fe a0       	ldd	r15, Y+38	; 0x26
     a90:	0f a1       	ldd	r16, Y+39	; 0x27
     a92:	18 a5       	ldd	r17, Y+40	; 0x28
     a94:	38 01       	movw	r6, r16
     a96:	88 24       	eor	r8, r8
     a98:	99 24       	eor	r9, r9
     a9a:	98 01       	movw	r18, r16
     a9c:	87 01       	movw	r16, r14
     a9e:	20 70       	andi	r18, 0x00	; 0
     aa0:	30 70       	andi	r19, 0x00	; 0
     aa2:	65 96       	adiw	r28, 0x15	; 21
     aa4:	0c af       	std	Y+60, r16	; 0x3c
     aa6:	1d af       	std	Y+61, r17	; 0x3d
     aa8:	2e af       	std	Y+62, r18	; 0x3e
     aaa:	3f af       	std	Y+63, r19	; 0x3f
     aac:	65 97       	sbiw	r28, 0x15	; 21
     aae:	c6 01       	movw	r24, r12
     ab0:	b5 01       	movw	r22, r10
     ab2:	a4 01       	movw	r20, r8
     ab4:	93 01       	movw	r18, r6
     ab6:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
     aba:	7b 01       	movw	r14, r22
     abc:	8c 01       	movw	r16, r24
     abe:	c6 01       	movw	r24, r12
     ac0:	b5 01       	movw	r22, r10
     ac2:	a4 01       	movw	r20, r8
     ac4:	93 01       	movw	r18, r6
     ac6:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
     aca:	c9 01       	movw	r24, r18
     acc:	da 01       	movw	r26, r20
     ace:	1c 01       	movw	r2, r24
     ad0:	2d 01       	movw	r4, r26
     ad2:	c2 01       	movw	r24, r4
     ad4:	b1 01       	movw	r22, r2
     ad6:	65 96       	adiw	r28, 0x15	; 21
     ad8:	2c ad       	ldd	r18, Y+60	; 0x3c
     ada:	3d ad       	ldd	r19, Y+61	; 0x3d
     adc:	4e ad       	ldd	r20, Y+62	; 0x3e
     ade:	5f ad       	ldd	r21, Y+63	; 0x3f
     ae0:	65 97       	sbiw	r28, 0x15	; 21
     ae2:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	87 01       	movw	r16, r14
     aec:	ff 24       	eor	r15, r15
     aee:	ee 24       	eor	r14, r14
     af0:	ad 8c       	ldd	r10, Y+29	; 0x1d
     af2:	be 8c       	ldd	r11, Y+30	; 0x1e
     af4:	cf 8c       	ldd	r12, Y+31	; 0x1f
     af6:	d8 a0       	ldd	r13, Y+32	; 0x20
     af8:	c6 01       	movw	r24, r12
     afa:	aa 27       	eor	r26, r26
     afc:	bb 27       	eor	r27, r27
     afe:	57 01       	movw	r10, r14
     b00:	68 01       	movw	r12, r16
     b02:	a8 2a       	or	r10, r24
     b04:	b9 2a       	or	r11, r25
     b06:	ca 2a       	or	r12, r26
     b08:	db 2a       	or	r13, r27
     b0a:	a2 16       	cp	r10, r18
     b0c:	b3 06       	cpc	r11, r19
     b0e:	c4 06       	cpc	r12, r20
     b10:	d5 06       	cpc	r13, r21
     b12:	00 f5       	brcc	.+64     	; 0xb54 <__udivdi3+0xa2e>
     b14:	08 94       	sec
     b16:	21 08       	sbc	r2, r1
     b18:	31 08       	sbc	r3, r1
     b1a:	41 08       	sbc	r4, r1
     b1c:	51 08       	sbc	r5, r1
     b1e:	ed a0       	ldd	r14, Y+37	; 0x25
     b20:	fe a0       	ldd	r15, Y+38	; 0x26
     b22:	0f a1       	ldd	r16, Y+39	; 0x27
     b24:	18 a5       	ldd	r17, Y+40	; 0x28
     b26:	ae 0c       	add	r10, r14
     b28:	bf 1c       	adc	r11, r15
     b2a:	c0 1e       	adc	r12, r16
     b2c:	d1 1e       	adc	r13, r17
     b2e:	ae 14       	cp	r10, r14
     b30:	bf 04       	cpc	r11, r15
     b32:	c0 06       	cpc	r12, r16
     b34:	d1 06       	cpc	r13, r17
     b36:	70 f0       	brcs	.+28     	; 0xb54 <__udivdi3+0xa2e>
     b38:	a2 16       	cp	r10, r18
     b3a:	b3 06       	cpc	r11, r19
     b3c:	c4 06       	cpc	r12, r20
     b3e:	d5 06       	cpc	r13, r21
     b40:	48 f4       	brcc	.+18     	; 0xb54 <__udivdi3+0xa2e>
     b42:	08 94       	sec
     b44:	21 08       	sbc	r2, r1
     b46:	31 08       	sbc	r3, r1
     b48:	41 08       	sbc	r4, r1
     b4a:	51 08       	sbc	r5, r1
     b4c:	ae 0c       	add	r10, r14
     b4e:	bf 1c       	adc	r11, r15
     b50:	c0 1e       	adc	r12, r16
     b52:	d1 1e       	adc	r13, r17
     b54:	a2 1a       	sub	r10, r18
     b56:	b3 0a       	sbc	r11, r19
     b58:	c4 0a       	sbc	r12, r20
     b5a:	d5 0a       	sbc	r13, r21
     b5c:	c6 01       	movw	r24, r12
     b5e:	b5 01       	movw	r22, r10
     b60:	a4 01       	movw	r20, r8
     b62:	93 01       	movw	r18, r6
     b64:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	c6 01       	movw	r24, r12
     b6e:	b5 01       	movw	r22, r10
     b70:	a4 01       	movw	r20, r8
     b72:	93 01       	movw	r18, r6
     b74:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
     b78:	c9 01       	movw	r24, r18
     b7a:	da 01       	movw	r26, r20
     b7c:	3c 01       	movw	r6, r24
     b7e:	4d 01       	movw	r8, r26
     b80:	c4 01       	movw	r24, r8
     b82:	b3 01       	movw	r22, r6
     b84:	65 96       	adiw	r28, 0x15	; 21
     b86:	2c ad       	ldd	r18, Y+60	; 0x3c
     b88:	3d ad       	ldd	r19, Y+61	; 0x3d
     b8a:	4e ad       	ldd	r20, Y+62	; 0x3e
     b8c:	5f ad       	ldd	r21, Y+63	; 0x3f
     b8e:	65 97       	sbiw	r28, 0x15	; 21
     b90:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
     b94:	9b 01       	movw	r18, r22
     b96:	ac 01       	movw	r20, r24
     b98:	87 01       	movw	r16, r14
     b9a:	ff 24       	eor	r15, r15
     b9c:	ee 24       	eor	r14, r14
     b9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ba0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ba2:	af 8d       	ldd	r26, Y+31	; 0x1f
     ba4:	b8 a1       	ldd	r27, Y+32	; 0x20
     ba6:	a0 70       	andi	r26, 0x00	; 0
     ba8:	b0 70       	andi	r27, 0x00	; 0
     baa:	57 01       	movw	r10, r14
     bac:	68 01       	movw	r12, r16
     bae:	a8 2a       	or	r10, r24
     bb0:	b9 2a       	or	r11, r25
     bb2:	ca 2a       	or	r12, r26
     bb4:	db 2a       	or	r13, r27
     bb6:	a2 16       	cp	r10, r18
     bb8:	b3 06       	cpc	r11, r19
     bba:	c4 06       	cpc	r12, r20
     bbc:	d5 06       	cpc	r13, r21
     bbe:	00 f5       	brcc	.+64     	; 0xc00 <__udivdi3+0xada>
     bc0:	08 94       	sec
     bc2:	61 08       	sbc	r6, r1
     bc4:	71 08       	sbc	r7, r1
     bc6:	81 08       	sbc	r8, r1
     bc8:	91 08       	sbc	r9, r1
     bca:	6d a1       	ldd	r22, Y+37	; 0x25
     bcc:	7e a1       	ldd	r23, Y+38	; 0x26
     bce:	8f a1       	ldd	r24, Y+39	; 0x27
     bd0:	98 a5       	ldd	r25, Y+40	; 0x28
     bd2:	a6 0e       	add	r10, r22
     bd4:	b7 1e       	adc	r11, r23
     bd6:	c8 1e       	adc	r12, r24
     bd8:	d9 1e       	adc	r13, r25
     bda:	a6 16       	cp	r10, r22
     bdc:	b7 06       	cpc	r11, r23
     bde:	c8 06       	cpc	r12, r24
     be0:	d9 06       	cpc	r13, r25
     be2:	70 f0       	brcs	.+28     	; 0xc00 <__udivdi3+0xada>
     be4:	a2 16       	cp	r10, r18
     be6:	b3 06       	cpc	r11, r19
     be8:	c4 06       	cpc	r12, r20
     bea:	d5 06       	cpc	r13, r21
     bec:	48 f4       	brcc	.+18     	; 0xc00 <__udivdi3+0xada>
     bee:	08 94       	sec
     bf0:	61 08       	sbc	r6, r1
     bf2:	71 08       	sbc	r7, r1
     bf4:	81 08       	sbc	r8, r1
     bf6:	91 08       	sbc	r9, r1
     bf8:	a6 0e       	add	r10, r22
     bfa:	b7 1e       	adc	r11, r23
     bfc:	c8 1e       	adc	r12, r24
     bfe:	d9 1e       	adc	r13, r25
     c00:	d6 01       	movw	r26, r12
     c02:	c5 01       	movw	r24, r10
     c04:	82 1b       	sub	r24, r18
     c06:	93 0b       	sbc	r25, r19
     c08:	a4 0b       	sbc	r26, r20
     c0a:	b5 0b       	sbc	r27, r21
     c0c:	89 8f       	std	Y+25, r24	; 0x19
     c0e:	9a 8f       	std	Y+26, r25	; 0x1a
     c10:	ab 8f       	std	Y+27, r26	; 0x1b
     c12:	bc 8f       	std	Y+28, r27	; 0x1c
     c14:	d1 01       	movw	r26, r2
     c16:	99 27       	eor	r25, r25
     c18:	88 27       	eor	r24, r24
     c1a:	64 01       	movw	r12, r8
     c1c:	53 01       	movw	r10, r6
     c1e:	a8 2a       	or	r10, r24
     c20:	b9 2a       	or	r11, r25
     c22:	ca 2a       	or	r12, r26
     c24:	db 2a       	or	r13, r27
     c26:	a9 aa       	std	Y+49, r10	; 0x31
     c28:	ba aa       	std	Y+50, r11	; 0x32
     c2a:	cb aa       	std	Y+51, r12	; 0x33
     c2c:	dc aa       	std	Y+52, r13	; 0x34
     c2e:	86 01       	movw	r16, r12
     c30:	75 01       	movw	r14, r10
     c32:	2f ef       	ldi	r18, 0xFF	; 255
     c34:	3f ef       	ldi	r19, 0xFF	; 255
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	e2 22       	and	r14, r18
     c3c:	f3 22       	and	r15, r19
     c3e:	04 23       	and	r16, r20
     c40:	15 23       	and	r17, r21
     c42:	a6 01       	movw	r20, r12
     c44:	66 27       	eor	r22, r22
     c46:	77 27       	eor	r23, r23
     c48:	6d 96       	adiw	r28, 0x1d	; 29
     c4a:	4c af       	std	Y+60, r20	; 0x3c
     c4c:	5d af       	std	Y+61, r21	; 0x3d
     c4e:	6e af       	std	Y+62, r22	; 0x3e
     c50:	7f af       	std	Y+63, r23	; 0x3f
     c52:	6d 97       	sbiw	r28, 0x1d	; 29
     c54:	a9 a0       	ldd	r10, Y+33	; 0x21
     c56:	ba a0       	ldd	r11, Y+34	; 0x22
     c58:	cb a0       	ldd	r12, Y+35	; 0x23
     c5a:	dc a0       	ldd	r13, Y+36	; 0x24
     c5c:	6f ef       	ldi	r22, 0xFF	; 255
     c5e:	7f ef       	ldi	r23, 0xFF	; 255
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	a6 22       	and	r10, r22
     c66:	b7 22       	and	r11, r23
     c68:	c8 22       	and	r12, r24
     c6a:	d9 22       	and	r13, r25
     c6c:	89 a1       	ldd	r24, Y+33	; 0x21
     c6e:	9a a1       	ldd	r25, Y+34	; 0x22
     c70:	ab a1       	ldd	r26, Y+35	; 0x23
     c72:	bc a1       	ldd	r27, Y+36	; 0x24
     c74:	1d 01       	movw	r2, r26
     c76:	44 24       	eor	r4, r4
     c78:	55 24       	eor	r5, r5
     c7a:	c8 01       	movw	r24, r16
     c7c:	b7 01       	movw	r22, r14
     c7e:	a6 01       	movw	r20, r12
     c80:	95 01       	movw	r18, r10
     c82:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
     c86:	69 96       	adiw	r28, 0x19	; 25
     c88:	6c af       	std	Y+60, r22	; 0x3c
     c8a:	7d af       	std	Y+61, r23	; 0x3d
     c8c:	8e af       	std	Y+62, r24	; 0x3e
     c8e:	9f af       	std	Y+63, r25	; 0x3f
     c90:	69 97       	sbiw	r28, 0x19	; 25
     c92:	c8 01       	movw	r24, r16
     c94:	b7 01       	movw	r22, r14
     c96:	a2 01       	movw	r20, r4
     c98:	91 01       	movw	r18, r2
     c9a:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
     c9e:	3b 01       	movw	r6, r22
     ca0:	4c 01       	movw	r8, r24
     ca2:	6d 96       	adiw	r28, 0x1d	; 29
     ca4:	6c ad       	ldd	r22, Y+60	; 0x3c
     ca6:	7d ad       	ldd	r23, Y+61	; 0x3d
     ca8:	8e ad       	ldd	r24, Y+62	; 0x3e
     caa:	9f ad       	ldd	r25, Y+63	; 0x3f
     cac:	6d 97       	sbiw	r28, 0x1d	; 29
     cae:	a6 01       	movw	r20, r12
     cb0:	95 01       	movw	r18, r10
     cb2:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
     cb6:	7b 01       	movw	r14, r22
     cb8:	8c 01       	movw	r16, r24
     cba:	6d 96       	adiw	r28, 0x1d	; 29
     cbc:	6c ad       	ldd	r22, Y+60	; 0x3c
     cbe:	7d ad       	ldd	r23, Y+61	; 0x3d
     cc0:	8e ad       	ldd	r24, Y+62	; 0x3e
     cc2:	9f ad       	ldd	r25, Y+63	; 0x3f
     cc4:	6d 97       	sbiw	r28, 0x1d	; 29
     cc6:	a2 01       	movw	r20, r4
     cc8:	91 01       	movw	r18, r2
     cca:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
     cce:	5b 01       	movw	r10, r22
     cd0:	6c 01       	movw	r12, r24
     cd2:	a8 01       	movw	r20, r16
     cd4:	97 01       	movw	r18, r14
     cd6:	26 0d       	add	r18, r6
     cd8:	37 1d       	adc	r19, r7
     cda:	48 1d       	adc	r20, r8
     cdc:	59 1d       	adc	r21, r9
     cde:	69 96       	adiw	r28, 0x19	; 25
     ce0:	6c ac       	ldd	r6, Y+60	; 0x3c
     ce2:	7d ac       	ldd	r7, Y+61	; 0x3d
     ce4:	8e ac       	ldd	r8, Y+62	; 0x3e
     ce6:	9f ac       	ldd	r9, Y+63	; 0x3f
     ce8:	69 97       	sbiw	r28, 0x19	; 25
     cea:	c4 01       	movw	r24, r8
     cec:	aa 27       	eor	r26, r26
     cee:	bb 27       	eor	r27, r27
     cf0:	28 0f       	add	r18, r24
     cf2:	39 1f       	adc	r19, r25
     cf4:	4a 1f       	adc	r20, r26
     cf6:	5b 1f       	adc	r21, r27
     cf8:	2e 15       	cp	r18, r14
     cfa:	3f 05       	cpc	r19, r15
     cfc:	40 07       	cpc	r20, r16
     cfe:	51 07       	cpc	r21, r17
     d00:	48 f4       	brcc	.+18     	; 0xd14 <__udivdi3+0xbee>
     d02:	e1 2c       	mov	r14, r1
     d04:	f1 2c       	mov	r15, r1
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	06 2f       	mov	r16, r22
     d0a:	11 2d       	mov	r17, r1
     d0c:	ae 0c       	add	r10, r14
     d0e:	bf 1c       	adc	r11, r15
     d10:	c0 1e       	adc	r12, r16
     d12:	d1 1e       	adc	r13, r17
     d14:	ca 01       	movw	r24, r20
     d16:	aa 27       	eor	r26, r26
     d18:	bb 27       	eor	r27, r27
     d1a:	bc 01       	movw	r22, r24
     d1c:	cd 01       	movw	r24, r26
     d1e:	6a 0d       	add	r22, r10
     d20:	7b 1d       	adc	r23, r11
     d22:	8c 1d       	adc	r24, r12
     d24:	9d 1d       	adc	r25, r13
     d26:	69 8c       	ldd	r6, Y+25	; 0x19
     d28:	7a 8c       	ldd	r7, Y+26	; 0x1a
     d2a:	8b 8c       	ldd	r8, Y+27	; 0x1b
     d2c:	9c 8c       	ldd	r9, Y+28	; 0x1c
     d2e:	66 16       	cp	r6, r22
     d30:	77 06       	cpc	r7, r23
     d32:	88 06       	cpc	r8, r24
     d34:	99 06       	cpc	r9, r25
     d36:	40 f1       	brcs	.+80     	; 0xd88 <__udivdi3+0xc62>
     d38:	66 15       	cp	r22, r6
     d3a:	77 05       	cpc	r23, r7
     d3c:	88 05       	cpc	r24, r8
     d3e:	99 05       	cpc	r25, r9
     d40:	09 f0       	breq	.+2      	; 0xd44 <__udivdi3+0xc1e>
     d42:	43 c0       	rjmp	.+134    	; 0xdca <__udivdi3+0xca4>
     d44:	d9 01       	movw	r26, r18
     d46:	99 27       	eor	r25, r25
     d48:	88 27       	eor	r24, r24
     d4a:	69 96       	adiw	r28, 0x19	; 25
     d4c:	2c ad       	ldd	r18, Y+60	; 0x3c
     d4e:	3d ad       	ldd	r19, Y+61	; 0x3d
     d50:	4e ad       	ldd	r20, Y+62	; 0x3e
     d52:	5f ad       	ldd	r21, Y+63	; 0x3f
     d54:	69 97       	sbiw	r28, 0x19	; 25
     d56:	40 70       	andi	r20, 0x00	; 0
     d58:	50 70       	andi	r21, 0x00	; 0
     d5a:	82 0f       	add	r24, r18
     d5c:	93 1f       	adc	r25, r19
     d5e:	a4 1f       	adc	r26, r20
     d60:	b5 1f       	adc	r27, r21
     d62:	2d a5       	ldd	r18, Y+45	; 0x2d
     d64:	3e a5       	ldd	r19, Y+46	; 0x2e
     d66:	4f a5       	ldd	r20, Y+47	; 0x2f
     d68:	58 a9       	ldd	r21, Y+48	; 0x30
     d6a:	6e 96       	adiw	r28, 0x1e	; 30
     d6c:	0f ac       	ldd	r0, Y+63	; 0x3f
     d6e:	6e 97       	sbiw	r28, 0x1e	; 30
     d70:	04 c0       	rjmp	.+8      	; 0xd7a <__udivdi3+0xc54>
     d72:	22 0f       	add	r18, r18
     d74:	33 1f       	adc	r19, r19
     d76:	44 1f       	adc	r20, r20
     d78:	55 1f       	adc	r21, r21
     d7a:	0a 94       	dec	r0
     d7c:	d2 f7       	brpl	.-12     	; 0xd72 <__udivdi3+0xc4c>
     d7e:	28 17       	cp	r18, r24
     d80:	39 07       	cpc	r19, r25
     d82:	4a 07       	cpc	r20, r26
     d84:	5b 07       	cpc	r21, r27
     d86:	08 f5       	brcc	.+66     	; 0xdca <__udivdi3+0xca4>
     d88:	09 a9       	ldd	r16, Y+49	; 0x31
     d8a:	1a a9       	ldd	r17, Y+50	; 0x32
     d8c:	2b a9       	ldd	r18, Y+51	; 0x33
     d8e:	3c a9       	ldd	r19, Y+52	; 0x34
     d90:	01 50       	subi	r16, 0x01	; 1
     d92:	10 40       	sbci	r17, 0x00	; 0
     d94:	20 40       	sbci	r18, 0x00	; 0
     d96:	30 40       	sbci	r19, 0x00	; 0
     d98:	09 ab       	std	Y+49, r16	; 0x31
     d9a:	1a ab       	std	Y+50, r17	; 0x32
     d9c:	2b ab       	std	Y+51, r18	; 0x33
     d9e:	3c ab       	std	Y+52, r19	; 0x34
     da0:	14 c0       	rjmp	.+40     	; 0xdca <__udivdi3+0xca4>
     da2:	66 24       	eor	r6, r6
     da4:	77 24       	eor	r7, r7
     da6:	43 01       	movw	r8, r6
     da8:	21 e0       	ldi	r18, 0x01	; 1
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	29 ab       	std	Y+49, r18	; 0x31
     db2:	3a ab       	std	Y+50, r19	; 0x32
     db4:	4b ab       	std	Y+51, r20	; 0x33
     db6:	5c ab       	std	Y+52, r21	; 0x34
     db8:	0b c0       	rjmp	.+22     	; 0xdd0 <__udivdi3+0xcaa>
     dba:	66 24       	eor	r6, r6
     dbc:	77 24       	eor	r7, r7
     dbe:	43 01       	movw	r8, r6
     dc0:	19 aa       	std	Y+49, r1	; 0x31
     dc2:	1a aa       	std	Y+50, r1	; 0x32
     dc4:	1b aa       	std	Y+51, r1	; 0x33
     dc6:	1c aa       	std	Y+52, r1	; 0x34
     dc8:	03 c0       	rjmp	.+6      	; 0xdd0 <__udivdi3+0xcaa>
     dca:	66 24       	eor	r6, r6
     dcc:	77 24       	eor	r7, r7
     dce:	43 01       	movw	r8, r6
     dd0:	fe 01       	movw	r30, r28
     dd2:	71 96       	adiw	r30, 0x11	; 17
     dd4:	88 e0       	ldi	r24, 0x08	; 8
     dd6:	df 01       	movw	r26, r30
     dd8:	1d 92       	st	X+, r1
     dda:	8a 95       	dec	r24
     ddc:	e9 f7       	brne	.-6      	; 0xdd8 <__udivdi3+0xcb2>
     dde:	a9 a8       	ldd	r10, Y+49	; 0x31
     de0:	ba a8       	ldd	r11, Y+50	; 0x32
     de2:	cb a8       	ldd	r12, Y+51	; 0x33
     de4:	dc a8       	ldd	r13, Y+52	; 0x34
     de6:	a9 8a       	std	Y+17, r10	; 0x11
     de8:	ba 8a       	std	Y+18, r11	; 0x12
     dea:	cb 8a       	std	Y+19, r12	; 0x13
     dec:	dc 8a       	std	Y+20, r13	; 0x14
     dee:	6d 8a       	std	Y+21, r6	; 0x15
     df0:	7e 8a       	std	Y+22, r7	; 0x16
     df2:	8f 8a       	std	Y+23, r8	; 0x17
     df4:	98 8e       	std	Y+24, r9	; 0x18
     df6:	29 a9       	ldd	r18, Y+49	; 0x31
     df8:	3a 89       	ldd	r19, Y+18	; 0x12
     dfa:	4b 89       	ldd	r20, Y+19	; 0x13
     dfc:	5c 89       	ldd	r21, Y+20	; 0x14
     dfe:	66 2d       	mov	r22, r6
     e00:	7e 89       	ldd	r23, Y+22	; 0x16
     e02:	8f 89       	ldd	r24, Y+23	; 0x17
     e04:	98 8d       	ldd	r25, Y+24	; 0x18
     e06:	c2 5a       	subi	r28, 0xA2	; 162
     e08:	df 4f       	sbci	r29, 0xFF	; 255
     e0a:	e2 e1       	ldi	r30, 0x12	; 18
     e0c:	0c 94 86 49 	jmp	0x930c	; 0x930c <__epilogue_restores__>

00000e10 <__umoddi3>:
     e10:	ab e5       	ldi	r26, 0x5B	; 91
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	ee e0       	ldi	r30, 0x0E	; 14
     e16:	f7 e0       	ldi	r31, 0x07	; 7
     e18:	0c 94 6a 49 	jmp	0x92d4	; 0x92d4 <__prologue_saves__>
     e1c:	a8 e0       	ldi	r26, 0x08	; 8
     e1e:	4e 01       	movw	r8, r28
     e20:	08 94       	sec
     e22:	81 1c       	adc	r8, r1
     e24:	91 1c       	adc	r9, r1
     e26:	f4 01       	movw	r30, r8
     e28:	6a 2e       	mov	r6, r26
     e2a:	11 92       	st	Z+, r1
     e2c:	6a 94       	dec	r6
     e2e:	e9 f7       	brne	.-6      	; 0xe2a <__umoddi3+0x1a>
     e30:	29 83       	std	Y+1, r18	; 0x01
     e32:	3a 83       	std	Y+2, r19	; 0x02
     e34:	4b 83       	std	Y+3, r20	; 0x03
     e36:	5c 83       	std	Y+4, r21	; 0x04
     e38:	6d 83       	std	Y+5, r22	; 0x05
     e3a:	7e 83       	std	Y+6, r23	; 0x06
     e3c:	8f 83       	std	Y+7, r24	; 0x07
     e3e:	98 87       	std	Y+8, r25	; 0x08
     e40:	ce 01       	movw	r24, r28
     e42:	09 96       	adiw	r24, 0x09	; 9
     e44:	fc 01       	movw	r30, r24
     e46:	11 92       	st	Z+, r1
     e48:	aa 95       	dec	r26
     e4a:	e9 f7       	brne	.-6      	; 0xe46 <__umoddi3+0x36>
     e4c:	a9 86       	std	Y+9, r10	; 0x09
     e4e:	ba 86       	std	Y+10, r11	; 0x0a
     e50:	cb 86       	std	Y+11, r12	; 0x0b
     e52:	dc 86       	std	Y+12, r13	; 0x0c
     e54:	ed 86       	std	Y+13, r14	; 0x0d
     e56:	fe 86       	std	Y+14, r15	; 0x0e
     e58:	0f 87       	std	Y+15, r16	; 0x0f
     e5a:	18 8b       	std	Y+16, r17	; 0x10
     e5c:	29 84       	ldd	r2, Y+9	; 0x09
     e5e:	3a 84       	ldd	r3, Y+10	; 0x0a
     e60:	4b 84       	ldd	r4, Y+11	; 0x0b
     e62:	5c 84       	ldd	r5, Y+12	; 0x0c
     e64:	ad 84       	ldd	r10, Y+13	; 0x0d
     e66:	be 84       	ldd	r11, Y+14	; 0x0e
     e68:	cf 84       	ldd	r12, Y+15	; 0x0f
     e6a:	d8 88       	ldd	r13, Y+16	; 0x10
     e6c:	29 81       	ldd	r18, Y+1	; 0x01
     e6e:	3a 81       	ldd	r19, Y+2	; 0x02
     e70:	4b 81       	ldd	r20, Y+3	; 0x03
     e72:	5c 81       	ldd	r21, Y+4	; 0x04
     e74:	69 96       	adiw	r28, 0x19	; 25
     e76:	2f af       	std	Y+63, r18	; 0x3f
     e78:	69 97       	sbiw	r28, 0x19	; 25
     e7a:	6a 96       	adiw	r28, 0x1a	; 26
     e7c:	3f af       	std	Y+63, r19	; 0x3f
     e7e:	6a 97       	sbiw	r28, 0x1a	; 26
     e80:	6b 96       	adiw	r28, 0x1b	; 27
     e82:	4f af       	std	Y+63, r20	; 0x3f
     e84:	6b 97       	sbiw	r28, 0x1b	; 27
     e86:	6c 96       	adiw	r28, 0x1c	; 28
     e88:	5f af       	std	Y+63, r21	; 0x3f
     e8a:	6c 97       	sbiw	r28, 0x1c	; 28
     e8c:	6c 96       	adiw	r28, 0x1c	; 28
     e8e:	6c ac       	ldd	r6, Y+60	; 0x3c
     e90:	7d ac       	ldd	r7, Y+61	; 0x3d
     e92:	8e ac       	ldd	r8, Y+62	; 0x3e
     e94:	9f ac       	ldd	r9, Y+63	; 0x3f
     e96:	6c 97       	sbiw	r28, 0x1c	; 28
     e98:	69 aa       	std	Y+49, r6	; 0x31
     e9a:	7a aa       	std	Y+50, r7	; 0x32
     e9c:	8b aa       	std	Y+51, r8	; 0x33
     e9e:	9c aa       	std	Y+52, r9	; 0x34
     ea0:	6d 81       	ldd	r22, Y+5	; 0x05
     ea2:	7e 81       	ldd	r23, Y+6	; 0x06
     ea4:	8f 81       	ldd	r24, Y+7	; 0x07
     ea6:	98 85       	ldd	r25, Y+8	; 0x08
     ea8:	3b 01       	movw	r6, r22
     eaa:	4c 01       	movw	r8, r24
     eac:	6d aa       	std	Y+53, r6	; 0x35
     eae:	7e aa       	std	Y+54, r7	; 0x36
     eb0:	8f aa       	std	Y+55, r8	; 0x37
     eb2:	98 ae       	std	Y+56, r9	; 0x38
     eb4:	a1 14       	cp	r10, r1
     eb6:	b1 04       	cpc	r11, r1
     eb8:	c1 04       	cpc	r12, r1
     eba:	d1 04       	cpc	r13, r1
     ebc:	09 f0       	breq	.+2      	; 0xec0 <__umoddi3+0xb0>
     ebe:	04 c3       	rjmp	.+1544   	; 0x14c8 <__stack+0x3c9>
     ec0:	62 14       	cp	r6, r2
     ec2:	73 04       	cpc	r7, r3
     ec4:	84 04       	cpc	r8, r4
     ec6:	95 04       	cpc	r9, r5
     ec8:	08 f0       	brcs	.+2      	; 0xecc <__umoddi3+0xbc>
     eca:	00 c1       	rjmp	.+512    	; 0x10cc <__umoddi3+0x2bc>
     ecc:	00 e0       	ldi	r16, 0x00	; 0
     ece:	20 16       	cp	r2, r16
     ed0:	00 e0       	ldi	r16, 0x00	; 0
     ed2:	30 06       	cpc	r3, r16
     ed4:	01 e0       	ldi	r16, 0x01	; 1
     ed6:	40 06       	cpc	r4, r16
     ed8:	00 e0       	ldi	r16, 0x00	; 0
     eda:	50 06       	cpc	r5, r16
     edc:	88 f4       	brcc	.+34     	; 0xf00 <__umoddi3+0xf0>
     ede:	1f ef       	ldi	r17, 0xFF	; 255
     ee0:	21 16       	cp	r2, r17
     ee2:	31 04       	cpc	r3, r1
     ee4:	41 04       	cpc	r4, r1
     ee6:	51 04       	cpc	r5, r1
     ee8:	39 f0       	breq	.+14     	; 0xef8 <__umoddi3+0xe8>
     eea:	30 f0       	brcs	.+12     	; 0xef8 <__umoddi3+0xe8>
     eec:	88 e0       	ldi	r24, 0x08	; 8
     eee:	e8 2e       	mov	r14, r24
     ef0:	f1 2c       	mov	r15, r1
     ef2:	01 2d       	mov	r16, r1
     ef4:	11 2d       	mov	r17, r1
     ef6:	18 c0       	rjmp	.+48     	; 0xf28 <__umoddi3+0x118>
     ef8:	ee 24       	eor	r14, r14
     efa:	ff 24       	eor	r15, r15
     efc:	87 01       	movw	r16, r14
     efe:	14 c0       	rjmp	.+40     	; 0xf28 <__umoddi3+0x118>
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	24 16       	cp	r2, r20
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	34 06       	cpc	r3, r20
     f08:	40 e0       	ldi	r20, 0x00	; 0
     f0a:	44 06       	cpc	r4, r20
     f0c:	41 e0       	ldi	r20, 0x01	; 1
     f0e:	54 06       	cpc	r5, r20
     f10:	30 f0       	brcs	.+12     	; 0xf1e <__umoddi3+0x10e>
     f12:	b8 e1       	ldi	r27, 0x18	; 24
     f14:	eb 2e       	mov	r14, r27
     f16:	f1 2c       	mov	r15, r1
     f18:	01 2d       	mov	r16, r1
     f1a:	11 2d       	mov	r17, r1
     f1c:	05 c0       	rjmp	.+10     	; 0xf28 <__umoddi3+0x118>
     f1e:	a0 e1       	ldi	r26, 0x10	; 16
     f20:	ea 2e       	mov	r14, r26
     f22:	f1 2c       	mov	r15, r1
     f24:	01 2d       	mov	r16, r1
     f26:	11 2d       	mov	r17, r1
     f28:	d2 01       	movw	r26, r4
     f2a:	c1 01       	movw	r24, r2
     f2c:	0e 2c       	mov	r0, r14
     f2e:	04 c0       	rjmp	.+8      	; 0xf38 <__umoddi3+0x128>
     f30:	b6 95       	lsr	r27
     f32:	a7 95       	ror	r26
     f34:	97 95       	ror	r25
     f36:	87 95       	ror	r24
     f38:	0a 94       	dec	r0
     f3a:	d2 f7       	brpl	.-12     	; 0xf30 <__umoddi3+0x120>
     f3c:	80 53       	subi	r24, 0x30	; 48
     f3e:	9e 4f       	sbci	r25, 0xFE	; 254
     f40:	dc 01       	movw	r26, r24
     f42:	2c 91       	ld	r18, X
     f44:	80 e2       	ldi	r24, 0x20	; 32
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	a0 e0       	ldi	r26, 0x00	; 0
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	8e 19       	sub	r24, r14
     f4e:	9f 09       	sbc	r25, r15
     f50:	a0 0b       	sbc	r26, r16
     f52:	b1 0b       	sbc	r27, r17
     f54:	5c 01       	movw	r10, r24
     f56:	6d 01       	movw	r12, r26
     f58:	a2 1a       	sub	r10, r18
     f5a:	b1 08       	sbc	r11, r1
     f5c:	c1 08       	sbc	r12, r1
     f5e:	d1 08       	sbc	r13, r1
     f60:	a9 ae       	std	Y+57, r10	; 0x39
     f62:	ba ae       	std	Y+58, r11	; 0x3a
     f64:	cb ae       	std	Y+59, r12	; 0x3b
     f66:	dc ae       	std	Y+60, r13	; 0x3c
     f68:	a1 14       	cp	r10, r1
     f6a:	b1 04       	cpc	r11, r1
     f6c:	c1 04       	cpc	r12, r1
     f6e:	d1 04       	cpc	r13, r1
     f70:	09 f4       	brne	.+2      	; 0xf74 <__umoddi3+0x164>
     f72:	3f c0       	rjmp	.+126    	; 0xff2 <__umoddi3+0x1e2>
     f74:	69 ad       	ldd	r22, Y+57	; 0x39
     f76:	06 2e       	mov	r0, r22
     f78:	04 c0       	rjmp	.+8      	; 0xf82 <__umoddi3+0x172>
     f7a:	22 0c       	add	r2, r2
     f7c:	33 1c       	adc	r3, r3
     f7e:	44 1c       	adc	r4, r4
     f80:	55 1c       	adc	r5, r5
     f82:	0a 94       	dec	r0
     f84:	d2 f7       	brpl	.-12     	; 0xf7a <__umoddi3+0x16a>
     f86:	a4 01       	movw	r20, r8
     f88:	93 01       	movw	r18, r6
     f8a:	06 2e       	mov	r0, r22
     f8c:	04 c0       	rjmp	.+8      	; 0xf96 <__umoddi3+0x186>
     f8e:	22 0f       	add	r18, r18
     f90:	33 1f       	adc	r19, r19
     f92:	44 1f       	adc	r20, r20
     f94:	55 1f       	adc	r21, r21
     f96:	0a 94       	dec	r0
     f98:	d2 f7       	brpl	.-12     	; 0xf8e <__umoddi3+0x17e>
     f9a:	80 e2       	ldi	r24, 0x20	; 32
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	8a 19       	sub	r24, r10
     fa0:	9b 09       	sbc	r25, r11
     fa2:	6c 96       	adiw	r28, 0x1c	; 28
     fa4:	cc ac       	ldd	r12, Y+60	; 0x3c
     fa6:	dd ac       	ldd	r13, Y+61	; 0x3d
     fa8:	ee ac       	ldd	r14, Y+62	; 0x3e
     faa:	ff ac       	ldd	r15, Y+63	; 0x3f
     fac:	6c 97       	sbiw	r28, 0x1c	; 28
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <__umoddi3+0x1a8>
     fb0:	f6 94       	lsr	r15
     fb2:	e7 94       	ror	r14
     fb4:	d7 94       	ror	r13
     fb6:	c7 94       	ror	r12
     fb8:	8a 95       	dec	r24
     fba:	d2 f7       	brpl	.-12     	; 0xfb0 <__umoddi3+0x1a0>
     fbc:	87 01       	movw	r16, r14
     fbe:	76 01       	movw	r14, r12
     fc0:	e2 2a       	or	r14, r18
     fc2:	f3 2a       	or	r15, r19
     fc4:	04 2b       	or	r16, r20
     fc6:	15 2b       	or	r17, r21
     fc8:	ed aa       	std	Y+53, r14	; 0x35
     fca:	fe aa       	std	Y+54, r15	; 0x36
     fcc:	0f ab       	std	Y+55, r16	; 0x37
     fce:	18 af       	std	Y+56, r17	; 0x38
     fd0:	6c 96       	adiw	r28, 0x1c	; 28
     fd2:	8c ad       	ldd	r24, Y+60	; 0x3c
     fd4:	9d ad       	ldd	r25, Y+61	; 0x3d
     fd6:	ae ad       	ldd	r26, Y+62	; 0x3e
     fd8:	bf ad       	ldd	r27, Y+63	; 0x3f
     fda:	6c 97       	sbiw	r28, 0x1c	; 28
     fdc:	04 c0       	rjmp	.+8      	; 0xfe6 <__umoddi3+0x1d6>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	aa 1f       	adc	r26, r26
     fe4:	bb 1f       	adc	r27, r27
     fe6:	6a 95       	dec	r22
     fe8:	d2 f7       	brpl	.-12     	; 0xfde <__umoddi3+0x1ce>
     fea:	89 ab       	std	Y+49, r24	; 0x31
     fec:	9a ab       	std	Y+50, r25	; 0x32
     fee:	ab ab       	std	Y+51, r26	; 0x33
     ff0:	bc ab       	std	Y+52, r27	; 0x34
     ff2:	32 01       	movw	r6, r4
     ff4:	88 24       	eor	r8, r8
     ff6:	99 24       	eor	r9, r9
     ff8:	b2 01       	movw	r22, r4
     ffa:	a1 01       	movw	r20, r2
     ffc:	60 70       	andi	r22, 0x00	; 0
     ffe:	70 70       	andi	r23, 0x00	; 0
    1000:	21 96       	adiw	r28, 0x01	; 1
    1002:	4c af       	std	Y+60, r20	; 0x3c
    1004:	5d af       	std	Y+61, r21	; 0x3d
    1006:	6e af       	std	Y+62, r22	; 0x3e
    1008:	7f af       	std	Y+63, r23	; 0x3f
    100a:	21 97       	sbiw	r28, 0x01	; 1
    100c:	6d a9       	ldd	r22, Y+53	; 0x35
    100e:	7e a9       	ldd	r23, Y+54	; 0x36
    1010:	8f a9       	ldd	r24, Y+55	; 0x37
    1012:	98 ad       	ldd	r25, Y+56	; 0x38
    1014:	a4 01       	movw	r20, r8
    1016:	93 01       	movw	r18, r6
    1018:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    101c:	7b 01       	movw	r14, r22
    101e:	8c 01       	movw	r16, r24
    1020:	6d a9       	ldd	r22, Y+53	; 0x35
    1022:	7e a9       	ldd	r23, Y+54	; 0x36
    1024:	8f a9       	ldd	r24, Y+55	; 0x37
    1026:	98 ad       	ldd	r25, Y+56	; 0x38
    1028:	a4 01       	movw	r20, r8
    102a:	93 01       	movw	r18, r6
    102c:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    1030:	ca 01       	movw	r24, r20
    1032:	b9 01       	movw	r22, r18
    1034:	21 96       	adiw	r28, 0x01	; 1
    1036:	2c ad       	ldd	r18, Y+60	; 0x3c
    1038:	3d ad       	ldd	r19, Y+61	; 0x3d
    103a:	4e ad       	ldd	r20, Y+62	; 0x3e
    103c:	5f ad       	ldd	r21, Y+63	; 0x3f
    103e:	21 97       	sbiw	r28, 0x01	; 1
    1040:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
    1044:	9b 01       	movw	r18, r22
    1046:	ac 01       	movw	r20, r24
    1048:	87 01       	movw	r16, r14
    104a:	ff 24       	eor	r15, r15
    104c:	ee 24       	eor	r14, r14
    104e:	a9 a8       	ldd	r10, Y+49	; 0x31
    1050:	ba a8       	ldd	r11, Y+50	; 0x32
    1052:	cb a8       	ldd	r12, Y+51	; 0x33
    1054:	dc a8       	ldd	r13, Y+52	; 0x34
    1056:	c6 01       	movw	r24, r12
    1058:	aa 27       	eor	r26, r26
    105a:	bb 27       	eor	r27, r27
    105c:	57 01       	movw	r10, r14
    105e:	68 01       	movw	r12, r16
    1060:	a8 2a       	or	r10, r24
    1062:	b9 2a       	or	r11, r25
    1064:	ca 2a       	or	r12, r26
    1066:	db 2a       	or	r13, r27
    1068:	a2 16       	cp	r10, r18
    106a:	b3 06       	cpc	r11, r19
    106c:	c4 06       	cpc	r12, r20
    106e:	d5 06       	cpc	r13, r21
    1070:	90 f4       	brcc	.+36     	; 0x1096 <__umoddi3+0x286>
    1072:	a2 0c       	add	r10, r2
    1074:	b3 1c       	adc	r11, r3
    1076:	c4 1c       	adc	r12, r4
    1078:	d5 1c       	adc	r13, r5
    107a:	a2 14       	cp	r10, r2
    107c:	b3 04       	cpc	r11, r3
    107e:	c4 04       	cpc	r12, r4
    1080:	d5 04       	cpc	r13, r5
    1082:	48 f0       	brcs	.+18     	; 0x1096 <__umoddi3+0x286>
    1084:	a2 16       	cp	r10, r18
    1086:	b3 06       	cpc	r11, r19
    1088:	c4 06       	cpc	r12, r20
    108a:	d5 06       	cpc	r13, r21
    108c:	20 f4       	brcc	.+8      	; 0x1096 <__umoddi3+0x286>
    108e:	a2 0c       	add	r10, r2
    1090:	b3 1c       	adc	r11, r3
    1092:	c4 1c       	adc	r12, r4
    1094:	d5 1c       	adc	r13, r5
    1096:	a2 1a       	sub	r10, r18
    1098:	b3 0a       	sbc	r11, r19
    109a:	c4 0a       	sbc	r12, r20
    109c:	d5 0a       	sbc	r13, r21
    109e:	c6 01       	movw	r24, r12
    10a0:	b5 01       	movw	r22, r10
    10a2:	a4 01       	movw	r20, r8
    10a4:	93 01       	movw	r18, r6
    10a6:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    10aa:	7b 01       	movw	r14, r22
    10ac:	8c 01       	movw	r16, r24
    10ae:	c6 01       	movw	r24, r12
    10b0:	b5 01       	movw	r22, r10
    10b2:	a4 01       	movw	r20, r8
    10b4:	93 01       	movw	r18, r6
    10b6:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    10ba:	ca 01       	movw	r24, r20
    10bc:	b9 01       	movw	r22, r18
    10be:	21 96       	adiw	r28, 0x01	; 1
    10c0:	2c ad       	ldd	r18, Y+60	; 0x3c
    10c2:	3d ad       	ldd	r19, Y+61	; 0x3d
    10c4:	4e ad       	ldd	r20, Y+62	; 0x3e
    10c6:	5f ad       	ldd	r21, Y+63	; 0x3f
    10c8:	21 97       	sbiw	r28, 0x01	; 1
    10ca:	ba c1       	rjmp	.+884    	; 0x1440 <__stack+0x341>
    10cc:	21 14       	cp	r2, r1
    10ce:	31 04       	cpc	r3, r1
    10d0:	41 04       	cpc	r4, r1
    10d2:	51 04       	cpc	r5, r1
    10d4:	71 f4       	brne	.+28     	; 0x10f2 <__umoddi3+0x2e2>
    10d6:	61 e0       	ldi	r22, 0x01	; 1
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    10ea:	c9 01       	movw	r24, r18
    10ec:	da 01       	movw	r26, r20
    10ee:	1c 01       	movw	r2, r24
    10f0:	2d 01       	movw	r4, r26
    10f2:	00 e0       	ldi	r16, 0x00	; 0
    10f4:	20 16       	cp	r2, r16
    10f6:	00 e0       	ldi	r16, 0x00	; 0
    10f8:	30 06       	cpc	r3, r16
    10fa:	01 e0       	ldi	r16, 0x01	; 1
    10fc:	40 06       	cpc	r4, r16
    10fe:	00 e0       	ldi	r16, 0x00	; 0
    1100:	50 06       	cpc	r5, r16
    1102:	88 f4       	brcc	.+34     	; 0x1126 <__stack+0x27>
    1104:	1f ef       	ldi	r17, 0xFF	; 255
    1106:	21 16       	cp	r2, r17
    1108:	31 04       	cpc	r3, r1
    110a:	41 04       	cpc	r4, r1
    110c:	51 04       	cpc	r5, r1
    110e:	39 f0       	breq	.+14     	; 0x111e <__stack+0x1f>
    1110:	30 f0       	brcs	.+12     	; 0x111e <__stack+0x1f>
    1112:	68 e0       	ldi	r22, 0x08	; 8
    1114:	e6 2e       	mov	r14, r22
    1116:	f1 2c       	mov	r15, r1
    1118:	01 2d       	mov	r16, r1
    111a:	11 2d       	mov	r17, r1
    111c:	18 c0       	rjmp	.+48     	; 0x114e <__stack+0x4f>
    111e:	ee 24       	eor	r14, r14
    1120:	ff 24       	eor	r15, r15
    1122:	87 01       	movw	r16, r14
    1124:	14 c0       	rjmp	.+40     	; 0x114e <__stack+0x4f>
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	24 16       	cp	r2, r20
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	34 06       	cpc	r3, r20
    112e:	40 e0       	ldi	r20, 0x00	; 0
    1130:	44 06       	cpc	r4, r20
    1132:	41 e0       	ldi	r20, 0x01	; 1
    1134:	54 06       	cpc	r5, r20
    1136:	30 f0       	brcs	.+12     	; 0x1144 <__stack+0x45>
    1138:	58 e1       	ldi	r21, 0x18	; 24
    113a:	e5 2e       	mov	r14, r21
    113c:	f1 2c       	mov	r15, r1
    113e:	01 2d       	mov	r16, r1
    1140:	11 2d       	mov	r17, r1
    1142:	05 c0       	rjmp	.+10     	; 0x114e <__stack+0x4f>
    1144:	40 e1       	ldi	r20, 0x10	; 16
    1146:	e4 2e       	mov	r14, r20
    1148:	f1 2c       	mov	r15, r1
    114a:	01 2d       	mov	r16, r1
    114c:	11 2d       	mov	r17, r1
    114e:	d2 01       	movw	r26, r4
    1150:	c1 01       	movw	r24, r2
    1152:	0e 2c       	mov	r0, r14
    1154:	04 c0       	rjmp	.+8      	; 0x115e <__stack+0x5f>
    1156:	b6 95       	lsr	r27
    1158:	a7 95       	ror	r26
    115a:	97 95       	ror	r25
    115c:	87 95       	ror	r24
    115e:	0a 94       	dec	r0
    1160:	d2 f7       	brpl	.-12     	; 0x1156 <__stack+0x57>
    1162:	80 53       	subi	r24, 0x30	; 48
    1164:	9e 4f       	sbci	r25, 0xFE	; 254
    1166:	dc 01       	movw	r26, r24
    1168:	2c 91       	ld	r18, X
    116a:	30 e2       	ldi	r19, 0x20	; 32
    116c:	a3 2e       	mov	r10, r19
    116e:	b1 2c       	mov	r11, r1
    1170:	c1 2c       	mov	r12, r1
    1172:	d1 2c       	mov	r13, r1
    1174:	d6 01       	movw	r26, r12
    1176:	c5 01       	movw	r24, r10
    1178:	8e 19       	sub	r24, r14
    117a:	9f 09       	sbc	r25, r15
    117c:	a0 0b       	sbc	r26, r16
    117e:	b1 0b       	sbc	r27, r17
    1180:	7c 01       	movw	r14, r24
    1182:	8d 01       	movw	r16, r26
    1184:	e2 1a       	sub	r14, r18
    1186:	f1 08       	sbc	r15, r1
    1188:	01 09       	sbc	r16, r1
    118a:	11 09       	sbc	r17, r1
    118c:	e9 ae       	std	Y+57, r14	; 0x39
    118e:	fa ae       	std	Y+58, r15	; 0x3a
    1190:	0b af       	std	Y+59, r16	; 0x3b
    1192:	1c af       	std	Y+60, r17	; 0x3c
    1194:	e1 14       	cp	r14, r1
    1196:	f1 04       	cpc	r15, r1
    1198:	01 05       	cpc	r16, r1
    119a:	11 05       	cpc	r17, r1
    119c:	39 f4       	brne	.+14     	; 0x11ac <__stack+0xad>
    119e:	64 01       	movw	r12, r8
    11a0:	53 01       	movw	r10, r6
    11a2:	a2 18       	sub	r10, r2
    11a4:	b3 08       	sbc	r11, r3
    11a6:	c4 08       	sbc	r12, r4
    11a8:	d5 08       	sbc	r13, r5
    11aa:	e2 c0       	rjmp	.+452    	; 0x1370 <__stack+0x271>
    11ac:	f9 ac       	ldd	r15, Y+57	; 0x39
    11ae:	68 96       	adiw	r28, 0x18	; 24
    11b0:	ff ae       	std	Y+63, r15	; 0x3f
    11b2:	68 97       	sbiw	r28, 0x18	; 24
    11b4:	0f 2c       	mov	r0, r15
    11b6:	04 c0       	rjmp	.+8      	; 0x11c0 <__stack+0xc1>
    11b8:	22 0c       	add	r2, r2
    11ba:	33 1c       	adc	r3, r3
    11bc:	44 1c       	adc	r4, r4
    11be:	55 1c       	adc	r5, r5
    11c0:	0a 94       	dec	r0
    11c2:	d2 f7       	brpl	.-12     	; 0x11b8 <__stack+0xb9>
    11c4:	8a 2d       	mov	r24, r10
    11c6:	8f 19       	sub	r24, r15
    11c8:	64 01       	movw	r12, r8
    11ca:	53 01       	movw	r10, r6
    11cc:	08 2e       	mov	r0, r24
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <__stack+0xd9>
    11d0:	d6 94       	lsr	r13
    11d2:	c7 94       	ror	r12
    11d4:	b7 94       	ror	r11
    11d6:	a7 94       	ror	r10
    11d8:	0a 94       	dec	r0
    11da:	d2 f7       	brpl	.-12     	; 0x11d0 <__stack+0xd1>
    11dc:	a4 01       	movw	r20, r8
    11de:	93 01       	movw	r18, r6
    11e0:	04 c0       	rjmp	.+8      	; 0x11ea <__stack+0xeb>
    11e2:	22 0f       	add	r18, r18
    11e4:	33 1f       	adc	r19, r19
    11e6:	44 1f       	adc	r20, r20
    11e8:	55 1f       	adc	r21, r21
    11ea:	fa 94       	dec	r15
    11ec:	d2 f7       	brpl	.-12     	; 0x11e2 <__stack+0xe3>
    11ee:	6c 96       	adiw	r28, 0x1c	; 28
    11f0:	6c ac       	ldd	r6, Y+60	; 0x3c
    11f2:	7d ac       	ldd	r7, Y+61	; 0x3d
    11f4:	8e ac       	ldd	r8, Y+62	; 0x3e
    11f6:	9f ac       	ldd	r9, Y+63	; 0x3f
    11f8:	6c 97       	sbiw	r28, 0x1c	; 28
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <__stack+0x105>
    11fc:	96 94       	lsr	r9
    11fe:	87 94       	ror	r8
    1200:	77 94       	ror	r7
    1202:	67 94       	ror	r6
    1204:	8a 95       	dec	r24
    1206:	d2 f7       	brpl	.-12     	; 0x11fc <__stack+0xfd>
    1208:	84 01       	movw	r16, r8
    120a:	73 01       	movw	r14, r6
    120c:	e2 2a       	or	r14, r18
    120e:	f3 2a       	or	r15, r19
    1210:	04 2b       	or	r16, r20
    1212:	15 2b       	or	r17, r21
    1214:	ed a6       	std	Y+45, r14	; 0x2d
    1216:	fe a6       	std	Y+46, r15	; 0x2e
    1218:	0f a7       	std	Y+47, r16	; 0x2f
    121a:	18 ab       	std	Y+48, r17	; 0x30
    121c:	32 01       	movw	r6, r4
    121e:	88 24       	eor	r8, r8
    1220:	99 24       	eor	r9, r9
    1222:	b2 01       	movw	r22, r4
    1224:	a1 01       	movw	r20, r2
    1226:	60 70       	andi	r22, 0x00	; 0
    1228:	70 70       	andi	r23, 0x00	; 0
    122a:	25 96       	adiw	r28, 0x05	; 5
    122c:	4c af       	std	Y+60, r20	; 0x3c
    122e:	5d af       	std	Y+61, r21	; 0x3d
    1230:	6e af       	std	Y+62, r22	; 0x3e
    1232:	7f af       	std	Y+63, r23	; 0x3f
    1234:	25 97       	sbiw	r28, 0x05	; 5
    1236:	c6 01       	movw	r24, r12
    1238:	b5 01       	movw	r22, r10
    123a:	a4 01       	movw	r20, r8
    123c:	93 01       	movw	r18, r6
    123e:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    1242:	7b 01       	movw	r14, r22
    1244:	8c 01       	movw	r16, r24
    1246:	c6 01       	movw	r24, r12
    1248:	b5 01       	movw	r22, r10
    124a:	a4 01       	movw	r20, r8
    124c:	93 01       	movw	r18, r6
    124e:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    1252:	ca 01       	movw	r24, r20
    1254:	b9 01       	movw	r22, r18
    1256:	25 96       	adiw	r28, 0x05	; 5
    1258:	2c ad       	ldd	r18, Y+60	; 0x3c
    125a:	3d ad       	ldd	r19, Y+61	; 0x3d
    125c:	4e ad       	ldd	r20, Y+62	; 0x3e
    125e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1260:	25 97       	sbiw	r28, 0x05	; 5
    1262:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
    1266:	9b 01       	movw	r18, r22
    1268:	ac 01       	movw	r20, r24
    126a:	87 01       	movw	r16, r14
    126c:	ff 24       	eor	r15, r15
    126e:	ee 24       	eor	r14, r14
    1270:	ad a4       	ldd	r10, Y+45	; 0x2d
    1272:	be a4       	ldd	r11, Y+46	; 0x2e
    1274:	cf a4       	ldd	r12, Y+47	; 0x2f
    1276:	d8 a8       	ldd	r13, Y+48	; 0x30
    1278:	c6 01       	movw	r24, r12
    127a:	aa 27       	eor	r26, r26
    127c:	bb 27       	eor	r27, r27
    127e:	5c 01       	movw	r10, r24
    1280:	6d 01       	movw	r12, r26
    1282:	ae 28       	or	r10, r14
    1284:	bf 28       	or	r11, r15
    1286:	c0 2a       	or	r12, r16
    1288:	d1 2a       	or	r13, r17
    128a:	a2 16       	cp	r10, r18
    128c:	b3 06       	cpc	r11, r19
    128e:	c4 06       	cpc	r12, r20
    1290:	d5 06       	cpc	r13, r21
    1292:	90 f4       	brcc	.+36     	; 0x12b8 <__stack+0x1b9>
    1294:	a2 0c       	add	r10, r2
    1296:	b3 1c       	adc	r11, r3
    1298:	c4 1c       	adc	r12, r4
    129a:	d5 1c       	adc	r13, r5
    129c:	a2 14       	cp	r10, r2
    129e:	b3 04       	cpc	r11, r3
    12a0:	c4 04       	cpc	r12, r4
    12a2:	d5 04       	cpc	r13, r5
    12a4:	48 f0       	brcs	.+18     	; 0x12b8 <__stack+0x1b9>
    12a6:	a2 16       	cp	r10, r18
    12a8:	b3 06       	cpc	r11, r19
    12aa:	c4 06       	cpc	r12, r20
    12ac:	d5 06       	cpc	r13, r21
    12ae:	20 f4       	brcc	.+8      	; 0x12b8 <__stack+0x1b9>
    12b0:	a2 0c       	add	r10, r2
    12b2:	b3 1c       	adc	r11, r3
    12b4:	c4 1c       	adc	r12, r4
    12b6:	d5 1c       	adc	r13, r5
    12b8:	a2 1a       	sub	r10, r18
    12ba:	b3 0a       	sbc	r11, r19
    12bc:	c4 0a       	sbc	r12, r20
    12be:	d5 0a       	sbc	r13, r21
    12c0:	c6 01       	movw	r24, r12
    12c2:	b5 01       	movw	r22, r10
    12c4:	a4 01       	movw	r20, r8
    12c6:	93 01       	movw	r18, r6
    12c8:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    12cc:	7b 01       	movw	r14, r22
    12ce:	8c 01       	movw	r16, r24
    12d0:	c6 01       	movw	r24, r12
    12d2:	b5 01       	movw	r22, r10
    12d4:	a4 01       	movw	r20, r8
    12d6:	93 01       	movw	r18, r6
    12d8:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    12dc:	ca 01       	movw	r24, r20
    12de:	b9 01       	movw	r22, r18
    12e0:	25 96       	adiw	r28, 0x05	; 5
    12e2:	2c ad       	ldd	r18, Y+60	; 0x3c
    12e4:	3d ad       	ldd	r19, Y+61	; 0x3d
    12e6:	4e ad       	ldd	r20, Y+62	; 0x3e
    12e8:	5f ad       	ldd	r21, Y+63	; 0x3f
    12ea:	25 97       	sbiw	r28, 0x05	; 5
    12ec:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
    12f0:	9b 01       	movw	r18, r22
    12f2:	ac 01       	movw	r20, r24
    12f4:	87 01       	movw	r16, r14
    12f6:	ff 24       	eor	r15, r15
    12f8:	ee 24       	eor	r14, r14
    12fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    12fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    12fe:	af a5       	ldd	r26, Y+47	; 0x2f
    1300:	b8 a9       	ldd	r27, Y+48	; 0x30
    1302:	a0 70       	andi	r26, 0x00	; 0
    1304:	b0 70       	andi	r27, 0x00	; 0
    1306:	57 01       	movw	r10, r14
    1308:	68 01       	movw	r12, r16
    130a:	a8 2a       	or	r10, r24
    130c:	b9 2a       	or	r11, r25
    130e:	ca 2a       	or	r12, r26
    1310:	db 2a       	or	r13, r27
    1312:	a2 16       	cp	r10, r18
    1314:	b3 06       	cpc	r11, r19
    1316:	c4 06       	cpc	r12, r20
    1318:	d5 06       	cpc	r13, r21
    131a:	90 f4       	brcc	.+36     	; 0x1340 <__stack+0x241>
    131c:	a2 0c       	add	r10, r2
    131e:	b3 1c       	adc	r11, r3
    1320:	c4 1c       	adc	r12, r4
    1322:	d5 1c       	adc	r13, r5
    1324:	a2 14       	cp	r10, r2
    1326:	b3 04       	cpc	r11, r3
    1328:	c4 04       	cpc	r12, r4
    132a:	d5 04       	cpc	r13, r5
    132c:	48 f0       	brcs	.+18     	; 0x1340 <__stack+0x241>
    132e:	a2 16       	cp	r10, r18
    1330:	b3 06       	cpc	r11, r19
    1332:	c4 06       	cpc	r12, r20
    1334:	d5 06       	cpc	r13, r21
    1336:	20 f4       	brcc	.+8      	; 0x1340 <__stack+0x241>
    1338:	a2 0c       	add	r10, r2
    133a:	b3 1c       	adc	r11, r3
    133c:	c4 1c       	adc	r12, r4
    133e:	d5 1c       	adc	r13, r5
    1340:	6c 96       	adiw	r28, 0x1c	; 28
    1342:	ec ac       	ldd	r14, Y+60	; 0x3c
    1344:	fd ac       	ldd	r15, Y+61	; 0x3d
    1346:	0e ad       	ldd	r16, Y+62	; 0x3e
    1348:	1f ad       	ldd	r17, Y+63	; 0x3f
    134a:	6c 97       	sbiw	r28, 0x1c	; 28
    134c:	68 96       	adiw	r28, 0x18	; 24
    134e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1350:	68 97       	sbiw	r28, 0x18	; 24
    1352:	04 c0       	rjmp	.+8      	; 0x135c <__stack+0x25d>
    1354:	ee 0c       	add	r14, r14
    1356:	ff 1c       	adc	r15, r15
    1358:	00 1f       	adc	r16, r16
    135a:	11 1f       	adc	r17, r17
    135c:	0a 94       	dec	r0
    135e:	d2 f7       	brpl	.-12     	; 0x1354 <__stack+0x255>
    1360:	e9 aa       	std	Y+49, r14	; 0x31
    1362:	fa aa       	std	Y+50, r15	; 0x32
    1364:	0b ab       	std	Y+51, r16	; 0x33
    1366:	1c ab       	std	Y+52, r17	; 0x34
    1368:	a2 1a       	sub	r10, r18
    136a:	b3 0a       	sbc	r11, r19
    136c:	c4 0a       	sbc	r12, r20
    136e:	d5 0a       	sbc	r13, r21
    1370:	32 01       	movw	r6, r4
    1372:	88 24       	eor	r8, r8
    1374:	99 24       	eor	r9, r9
    1376:	b2 01       	movw	r22, r4
    1378:	a1 01       	movw	r20, r2
    137a:	60 70       	andi	r22, 0x00	; 0
    137c:	70 70       	andi	r23, 0x00	; 0
    137e:	29 96       	adiw	r28, 0x09	; 9
    1380:	4c af       	std	Y+60, r20	; 0x3c
    1382:	5d af       	std	Y+61, r21	; 0x3d
    1384:	6e af       	std	Y+62, r22	; 0x3e
    1386:	7f af       	std	Y+63, r23	; 0x3f
    1388:	29 97       	sbiw	r28, 0x09	; 9
    138a:	c6 01       	movw	r24, r12
    138c:	b5 01       	movw	r22, r10
    138e:	a4 01       	movw	r20, r8
    1390:	93 01       	movw	r18, r6
    1392:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    1396:	7b 01       	movw	r14, r22
    1398:	8c 01       	movw	r16, r24
    139a:	c6 01       	movw	r24, r12
    139c:	b5 01       	movw	r22, r10
    139e:	a4 01       	movw	r20, r8
    13a0:	93 01       	movw	r18, r6
    13a2:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    13a6:	ca 01       	movw	r24, r20
    13a8:	b9 01       	movw	r22, r18
    13aa:	29 96       	adiw	r28, 0x09	; 9
    13ac:	2c ad       	ldd	r18, Y+60	; 0x3c
    13ae:	3d ad       	ldd	r19, Y+61	; 0x3d
    13b0:	4e ad       	ldd	r20, Y+62	; 0x3e
    13b2:	5f ad       	ldd	r21, Y+63	; 0x3f
    13b4:	29 97       	sbiw	r28, 0x09	; 9
    13b6:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
    13ba:	9b 01       	movw	r18, r22
    13bc:	ac 01       	movw	r20, r24
    13be:	87 01       	movw	r16, r14
    13c0:	ff 24       	eor	r15, r15
    13c2:	ee 24       	eor	r14, r14
    13c4:	a9 a8       	ldd	r10, Y+49	; 0x31
    13c6:	ba a8       	ldd	r11, Y+50	; 0x32
    13c8:	cb a8       	ldd	r12, Y+51	; 0x33
    13ca:	dc a8       	ldd	r13, Y+52	; 0x34
    13cc:	c6 01       	movw	r24, r12
    13ce:	aa 27       	eor	r26, r26
    13d0:	bb 27       	eor	r27, r27
    13d2:	57 01       	movw	r10, r14
    13d4:	68 01       	movw	r12, r16
    13d6:	a8 2a       	or	r10, r24
    13d8:	b9 2a       	or	r11, r25
    13da:	ca 2a       	or	r12, r26
    13dc:	db 2a       	or	r13, r27
    13de:	a2 16       	cp	r10, r18
    13e0:	b3 06       	cpc	r11, r19
    13e2:	c4 06       	cpc	r12, r20
    13e4:	d5 06       	cpc	r13, r21
    13e6:	90 f4       	brcc	.+36     	; 0x140c <__stack+0x30d>
    13e8:	a2 0c       	add	r10, r2
    13ea:	b3 1c       	adc	r11, r3
    13ec:	c4 1c       	adc	r12, r4
    13ee:	d5 1c       	adc	r13, r5
    13f0:	a2 14       	cp	r10, r2
    13f2:	b3 04       	cpc	r11, r3
    13f4:	c4 04       	cpc	r12, r4
    13f6:	d5 04       	cpc	r13, r5
    13f8:	48 f0       	brcs	.+18     	; 0x140c <__stack+0x30d>
    13fa:	a2 16       	cp	r10, r18
    13fc:	b3 06       	cpc	r11, r19
    13fe:	c4 06       	cpc	r12, r20
    1400:	d5 06       	cpc	r13, r21
    1402:	20 f4       	brcc	.+8      	; 0x140c <__stack+0x30d>
    1404:	a2 0c       	add	r10, r2
    1406:	b3 1c       	adc	r11, r3
    1408:	c4 1c       	adc	r12, r4
    140a:	d5 1c       	adc	r13, r5
    140c:	a2 1a       	sub	r10, r18
    140e:	b3 0a       	sbc	r11, r19
    1410:	c4 0a       	sbc	r12, r20
    1412:	d5 0a       	sbc	r13, r21
    1414:	c6 01       	movw	r24, r12
    1416:	b5 01       	movw	r22, r10
    1418:	a4 01       	movw	r20, r8
    141a:	93 01       	movw	r18, r6
    141c:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    1420:	7b 01       	movw	r14, r22
    1422:	8c 01       	movw	r16, r24
    1424:	c6 01       	movw	r24, r12
    1426:	b5 01       	movw	r22, r10
    1428:	a4 01       	movw	r20, r8
    142a:	93 01       	movw	r18, r6
    142c:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    1430:	ca 01       	movw	r24, r20
    1432:	b9 01       	movw	r22, r18
    1434:	29 96       	adiw	r28, 0x09	; 9
    1436:	2c ad       	ldd	r18, Y+60	; 0x3c
    1438:	3d ad       	ldd	r19, Y+61	; 0x3d
    143a:	4e ad       	ldd	r20, Y+62	; 0x3e
    143c:	5f ad       	ldd	r21, Y+63	; 0x3f
    143e:	29 97       	sbiw	r28, 0x09	; 9
    1440:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
    1444:	9b 01       	movw	r18, r22
    1446:	ac 01       	movw	r20, r24
    1448:	87 01       	movw	r16, r14
    144a:	ff 24       	eor	r15, r15
    144c:	ee 24       	eor	r14, r14
    144e:	89 a9       	ldd	r24, Y+49	; 0x31
    1450:	9a a9       	ldd	r25, Y+50	; 0x32
    1452:	ab a9       	ldd	r26, Y+51	; 0x33
    1454:	bc a9       	ldd	r27, Y+52	; 0x34
    1456:	a0 70       	andi	r26, 0x00	; 0
    1458:	b0 70       	andi	r27, 0x00	; 0
    145a:	e8 2a       	or	r14, r24
    145c:	f9 2a       	or	r15, r25
    145e:	0a 2b       	or	r16, r26
    1460:	1b 2b       	or	r17, r27
    1462:	e2 16       	cp	r14, r18
    1464:	f3 06       	cpc	r15, r19
    1466:	04 07       	cpc	r16, r20
    1468:	15 07       	cpc	r17, r21
    146a:	90 f4       	brcc	.+36     	; 0x1490 <__stack+0x391>
    146c:	e2 0c       	add	r14, r2
    146e:	f3 1c       	adc	r15, r3
    1470:	04 1d       	adc	r16, r4
    1472:	15 1d       	adc	r17, r5
    1474:	e2 14       	cp	r14, r2
    1476:	f3 04       	cpc	r15, r3
    1478:	04 05       	cpc	r16, r4
    147a:	15 05       	cpc	r17, r5
    147c:	48 f0       	brcs	.+18     	; 0x1490 <__stack+0x391>
    147e:	e2 16       	cp	r14, r18
    1480:	f3 06       	cpc	r15, r19
    1482:	04 07       	cpc	r16, r20
    1484:	15 07       	cpc	r17, r21
    1486:	20 f4       	brcc	.+8      	; 0x1490 <__stack+0x391>
    1488:	e2 0c       	add	r14, r2
    148a:	f3 1c       	adc	r15, r3
    148c:	04 1d       	adc	r16, r4
    148e:	15 1d       	adc	r17, r5
    1490:	e2 1a       	sub	r14, r18
    1492:	f3 0a       	sbc	r15, r19
    1494:	04 0b       	sbc	r16, r20
    1496:	15 0b       	sbc	r17, r21
    1498:	d8 01       	movw	r26, r16
    149a:	c7 01       	movw	r24, r14
    149c:	09 ac       	ldd	r0, Y+57	; 0x39
    149e:	04 c0       	rjmp	.+8      	; 0x14a8 <__stack+0x3a9>
    14a0:	b6 95       	lsr	r27
    14a2:	a7 95       	ror	r26
    14a4:	97 95       	ror	r25
    14a6:	87 95       	ror	r24
    14a8:	0a 94       	dec	r0
    14aa:	d2 f7       	brpl	.-12     	; 0x14a0 <__stack+0x3a1>
    14ac:	89 8b       	std	Y+17, r24	; 0x11
    14ae:	9a 8b       	std	Y+18, r25	; 0x12
    14b0:	ab 8b       	std	Y+19, r26	; 0x13
    14b2:	bc 8b       	std	Y+20, r27	; 0x14
    14b4:	1d 8a       	std	Y+21, r1	; 0x15
    14b6:	1e 8a       	std	Y+22, r1	; 0x16
    14b8:	1f 8a       	std	Y+23, r1	; 0x17
    14ba:	18 8e       	std	Y+24, r1	; 0x18
    14bc:	28 2f       	mov	r18, r24
    14be:	3a 89       	ldd	r19, Y+18	; 0x12
    14c0:	4b 89       	ldd	r20, Y+19	; 0x13
    14c2:	5c 89       	ldd	r21, Y+20	; 0x14
    14c4:	6d 89       	ldd	r22, Y+21	; 0x15
    14c6:	0c c3       	rjmp	.+1560   	; 0x1ae0 <__stack+0x9e1>
    14c8:	6a 14       	cp	r6, r10
    14ca:	7b 04       	cpc	r7, r11
    14cc:	8c 04       	cpc	r8, r12
    14ce:	9d 04       	cpc	r9, r13
    14d0:	08 f4       	brcc	.+2      	; 0x14d4 <__stack+0x3d5>
    14d2:	09 c3       	rjmp	.+1554   	; 0x1ae6 <__stack+0x9e7>
    14d4:	00 e0       	ldi	r16, 0x00	; 0
    14d6:	a0 16       	cp	r10, r16
    14d8:	00 e0       	ldi	r16, 0x00	; 0
    14da:	b0 06       	cpc	r11, r16
    14dc:	01 e0       	ldi	r16, 0x01	; 1
    14de:	c0 06       	cpc	r12, r16
    14e0:	00 e0       	ldi	r16, 0x00	; 0
    14e2:	d0 06       	cpc	r13, r16
    14e4:	88 f4       	brcc	.+34     	; 0x1508 <__stack+0x409>
    14e6:	1f ef       	ldi	r17, 0xFF	; 255
    14e8:	a1 16       	cp	r10, r17
    14ea:	b1 04       	cpc	r11, r1
    14ec:	c1 04       	cpc	r12, r1
    14ee:	d1 04       	cpc	r13, r1
    14f0:	39 f0       	breq	.+14     	; 0x1500 <__stack+0x401>
    14f2:	30 f0       	brcs	.+12     	; 0x1500 <__stack+0x401>
    14f4:	28 e0       	ldi	r18, 0x08	; 8
    14f6:	e2 2e       	mov	r14, r18
    14f8:	f1 2c       	mov	r15, r1
    14fa:	01 2d       	mov	r16, r1
    14fc:	11 2d       	mov	r17, r1
    14fe:	18 c0       	rjmp	.+48     	; 0x1530 <__stack+0x431>
    1500:	ee 24       	eor	r14, r14
    1502:	ff 24       	eor	r15, r15
    1504:	87 01       	movw	r16, r14
    1506:	14 c0       	rjmp	.+40     	; 0x1530 <__stack+0x431>
    1508:	40 e0       	ldi	r20, 0x00	; 0
    150a:	a4 16       	cp	r10, r20
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	b4 06       	cpc	r11, r20
    1510:	40 e0       	ldi	r20, 0x00	; 0
    1512:	c4 06       	cpc	r12, r20
    1514:	41 e0       	ldi	r20, 0x01	; 1
    1516:	d4 06       	cpc	r13, r20
    1518:	30 f0       	brcs	.+12     	; 0x1526 <__stack+0x427>
    151a:	98 e1       	ldi	r25, 0x18	; 24
    151c:	e9 2e       	mov	r14, r25
    151e:	f1 2c       	mov	r15, r1
    1520:	01 2d       	mov	r16, r1
    1522:	11 2d       	mov	r17, r1
    1524:	05 c0       	rjmp	.+10     	; 0x1530 <__stack+0x431>
    1526:	80 e1       	ldi	r24, 0x10	; 16
    1528:	e8 2e       	mov	r14, r24
    152a:	f1 2c       	mov	r15, r1
    152c:	01 2d       	mov	r16, r1
    152e:	11 2d       	mov	r17, r1
    1530:	d6 01       	movw	r26, r12
    1532:	c5 01       	movw	r24, r10
    1534:	0e 2c       	mov	r0, r14
    1536:	04 c0       	rjmp	.+8      	; 0x1540 <__stack+0x441>
    1538:	b6 95       	lsr	r27
    153a:	a7 95       	ror	r26
    153c:	97 95       	ror	r25
    153e:	87 95       	ror	r24
    1540:	0a 94       	dec	r0
    1542:	d2 f7       	brpl	.-12     	; 0x1538 <__stack+0x439>
    1544:	80 53       	subi	r24, 0x30	; 48
    1546:	9e 4f       	sbci	r25, 0xFE	; 254
    1548:	dc 01       	movw	r26, r24
    154a:	2c 91       	ld	r18, X
    154c:	80 e2       	ldi	r24, 0x20	; 32
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	a0 e0       	ldi	r26, 0x00	; 0
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	8e 19       	sub	r24, r14
    1556:	9f 09       	sbc	r25, r15
    1558:	a0 0b       	sbc	r26, r16
    155a:	b1 0b       	sbc	r27, r17
    155c:	82 1b       	sub	r24, r18
    155e:	91 09       	sbc	r25, r1
    1560:	a1 09       	sbc	r26, r1
    1562:	b1 09       	sbc	r27, r1
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	a1 05       	cpc	r26, r1
    1568:	b1 05       	cpc	r27, r1
    156a:	09 f0       	breq	.+2      	; 0x156e <__stack+0x46f>
    156c:	4f c0       	rjmp	.+158    	; 0x160c <__stack+0x50d>
    156e:	a6 14       	cp	r10, r6
    1570:	b7 04       	cpc	r11, r7
    1572:	c8 04       	cpc	r12, r8
    1574:	d9 04       	cpc	r13, r9
    1576:	58 f0       	brcs	.+22     	; 0x158e <__stack+0x48f>
    1578:	6c 96       	adiw	r28, 0x1c	; 28
    157a:	ec ac       	ldd	r14, Y+60	; 0x3c
    157c:	fd ac       	ldd	r15, Y+61	; 0x3d
    157e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1580:	1f ad       	ldd	r17, Y+63	; 0x3f
    1582:	6c 97       	sbiw	r28, 0x1c	; 28
    1584:	e2 14       	cp	r14, r2
    1586:	f3 04       	cpc	r15, r3
    1588:	04 05       	cpc	r16, r4
    158a:	15 05       	cpc	r17, r5
    158c:	68 f1       	brcs	.+90     	; 0x15e8 <__stack+0x4e9>
    158e:	6c 96       	adiw	r28, 0x1c	; 28
    1590:	ec ac       	ldd	r14, Y+60	; 0x3c
    1592:	fd ac       	ldd	r15, Y+61	; 0x3d
    1594:	0e ad       	ldd	r16, Y+62	; 0x3e
    1596:	1f ad       	ldd	r17, Y+63	; 0x3f
    1598:	6c 97       	sbiw	r28, 0x1c	; 28
    159a:	e2 18       	sub	r14, r2
    159c:	f3 08       	sbc	r15, r3
    159e:	04 09       	sbc	r16, r4
    15a0:	15 09       	sbc	r17, r5
    15a2:	a4 01       	movw	r20, r8
    15a4:	93 01       	movw	r18, r6
    15a6:	2a 19       	sub	r18, r10
    15a8:	3b 09       	sbc	r19, r11
    15aa:	4c 09       	sbc	r20, r12
    15ac:	5d 09       	sbc	r21, r13
    15ae:	aa 24       	eor	r10, r10
    15b0:	bb 24       	eor	r11, r11
    15b2:	65 01       	movw	r12, r10
    15b4:	6c 96       	adiw	r28, 0x1c	; 28
    15b6:	6c ad       	ldd	r22, Y+60	; 0x3c
    15b8:	7d ad       	ldd	r23, Y+61	; 0x3d
    15ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    15bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    15be:	6c 97       	sbiw	r28, 0x1c	; 28
    15c0:	6e 15       	cp	r22, r14
    15c2:	7f 05       	cpc	r23, r15
    15c4:	80 07       	cpc	r24, r16
    15c6:	91 07       	cpc	r25, r17
    15c8:	28 f4       	brcc	.+10     	; 0x15d4 <__stack+0x4d5>
    15ca:	b1 e0       	ldi	r27, 0x01	; 1
    15cc:	ab 2e       	mov	r10, r27
    15ce:	b1 2c       	mov	r11, r1
    15d0:	c1 2c       	mov	r12, r1
    15d2:	d1 2c       	mov	r13, r1
    15d4:	da 01       	movw	r26, r20
    15d6:	c9 01       	movw	r24, r18
    15d8:	8a 19       	sub	r24, r10
    15da:	9b 09       	sbc	r25, r11
    15dc:	ac 09       	sbc	r26, r12
    15de:	bd 09       	sbc	r27, r13
    15e0:	8d ab       	std	Y+53, r24	; 0x35
    15e2:	9e ab       	std	Y+54, r25	; 0x36
    15e4:	af ab       	std	Y+55, r26	; 0x37
    15e6:	b8 af       	std	Y+56, r27	; 0x38
    15e8:	e9 8a       	std	Y+17, r14	; 0x11
    15ea:	fa 8a       	std	Y+18, r15	; 0x12
    15ec:	0b 8b       	std	Y+19, r16	; 0x13
    15ee:	1c 8b       	std	Y+20, r17	; 0x14
    15f0:	6d a8       	ldd	r6, Y+53	; 0x35
    15f2:	7e a8       	ldd	r7, Y+54	; 0x36
    15f4:	8f a8       	ldd	r8, Y+55	; 0x37
    15f6:	98 ac       	ldd	r9, Y+56	; 0x38
    15f8:	6d 8a       	std	Y+21, r6	; 0x15
    15fa:	7e 8a       	std	Y+22, r7	; 0x16
    15fc:	8f 8a       	std	Y+23, r8	; 0x17
    15fe:	98 8e       	std	Y+24, r9	; 0x18
    1600:	2e 2d       	mov	r18, r14
    1602:	3a 89       	ldd	r19, Y+18	; 0x12
    1604:	4b 89       	ldd	r20, Y+19	; 0x13
    1606:	5c 89       	ldd	r21, Y+20	; 0x14
    1608:	6d a9       	ldd	r22, Y+53	; 0x35
    160a:	6a c2       	rjmp	.+1236   	; 0x1ae0 <__stack+0x9e1>
    160c:	67 96       	adiw	r28, 0x17	; 23
    160e:	8f af       	std	Y+63, r24	; 0x3f
    1610:	67 97       	sbiw	r28, 0x17	; 23
    1612:	a6 01       	movw	r20, r12
    1614:	95 01       	movw	r18, r10
    1616:	08 2e       	mov	r0, r24
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <__stack+0x523>
    161a:	22 0f       	add	r18, r18
    161c:	33 1f       	adc	r19, r19
    161e:	44 1f       	adc	r20, r20
    1620:	55 1f       	adc	r21, r21
    1622:	0a 94       	dec	r0
    1624:	d2 f7       	brpl	.-12     	; 0x161a <__stack+0x51b>
    1626:	a0 e2       	ldi	r26, 0x20	; 32
    1628:	aa 2e       	mov	r10, r26
    162a:	a8 1a       	sub	r10, r24
    162c:	66 96       	adiw	r28, 0x16	; 22
    162e:	af ae       	std	Y+63, r10	; 0x3f
    1630:	66 97       	sbiw	r28, 0x16	; 22
    1632:	d2 01       	movw	r26, r4
    1634:	c1 01       	movw	r24, r2
    1636:	04 c0       	rjmp	.+8      	; 0x1640 <__stack+0x541>
    1638:	b6 95       	lsr	r27
    163a:	a7 95       	ror	r26
    163c:	97 95       	ror	r25
    163e:	87 95       	ror	r24
    1640:	aa 94       	dec	r10
    1642:	d2 f7       	brpl	.-12     	; 0x1638 <__stack+0x539>
    1644:	6c 01       	movw	r12, r24
    1646:	7d 01       	movw	r14, r26
    1648:	c2 2a       	or	r12, r18
    164a:	d3 2a       	or	r13, r19
    164c:	e4 2a       	or	r14, r20
    164e:	f5 2a       	or	r15, r21
    1650:	c9 a6       	std	Y+41, r12	; 0x29
    1652:	da a6       	std	Y+42, r13	; 0x2a
    1654:	eb a6       	std	Y+43, r14	; 0x2b
    1656:	fc a6       	std	Y+44, r15	; 0x2c
    1658:	82 01       	movw	r16, r4
    165a:	71 01       	movw	r14, r2
    165c:	67 96       	adiw	r28, 0x17	; 23
    165e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1660:	67 97       	sbiw	r28, 0x17	; 23
    1662:	04 c0       	rjmp	.+8      	; 0x166c <__stack+0x56d>
    1664:	ee 0c       	add	r14, r14
    1666:	ff 1c       	adc	r15, r15
    1668:	00 1f       	adc	r16, r16
    166a:	11 1f       	adc	r17, r17
    166c:	0a 94       	dec	r0
    166e:	d2 f7       	brpl	.-12     	; 0x1664 <__stack+0x565>
    1670:	ed a2       	std	Y+37, r14	; 0x25
    1672:	fe a2       	std	Y+38, r15	; 0x26
    1674:	0f a3       	std	Y+39, r16	; 0x27
    1676:	18 a7       	std	Y+40, r17	; 0x28
    1678:	64 01       	movw	r12, r8
    167a:	53 01       	movw	r10, r6
    167c:	66 96       	adiw	r28, 0x16	; 22
    167e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1680:	66 97       	sbiw	r28, 0x16	; 22
    1682:	04 c0       	rjmp	.+8      	; 0x168c <__stack+0x58d>
    1684:	d6 94       	lsr	r13
    1686:	c7 94       	ror	r12
    1688:	b7 94       	ror	r11
    168a:	a7 94       	ror	r10
    168c:	0a 94       	dec	r0
    168e:	d2 f7       	brpl	.-12     	; 0x1684 <__stack+0x585>
    1690:	a4 01       	movw	r20, r8
    1692:	93 01       	movw	r18, r6
    1694:	67 96       	adiw	r28, 0x17	; 23
    1696:	0f ac       	ldd	r0, Y+63	; 0x3f
    1698:	67 97       	sbiw	r28, 0x17	; 23
    169a:	04 c0       	rjmp	.+8      	; 0x16a4 <__stack+0x5a5>
    169c:	22 0f       	add	r18, r18
    169e:	33 1f       	adc	r19, r19
    16a0:	44 1f       	adc	r20, r20
    16a2:	55 1f       	adc	r21, r21
    16a4:	0a 94       	dec	r0
    16a6:	d2 f7       	brpl	.-12     	; 0x169c <__stack+0x59d>
    16a8:	6c 96       	adiw	r28, 0x1c	; 28
    16aa:	8c ad       	ldd	r24, Y+60	; 0x3c
    16ac:	9d ad       	ldd	r25, Y+61	; 0x3d
    16ae:	ae ad       	ldd	r26, Y+62	; 0x3e
    16b0:	bf ad       	ldd	r27, Y+63	; 0x3f
    16b2:	6c 97       	sbiw	r28, 0x1c	; 28
    16b4:	66 96       	adiw	r28, 0x16	; 22
    16b6:	0f ac       	ldd	r0, Y+63	; 0x3f
    16b8:	66 97       	sbiw	r28, 0x16	; 22
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <__stack+0x5c5>
    16bc:	b6 95       	lsr	r27
    16be:	a7 95       	ror	r26
    16c0:	97 95       	ror	r25
    16c2:	87 95       	ror	r24
    16c4:	0a 94       	dec	r0
    16c6:	d2 f7       	brpl	.-12     	; 0x16bc <__stack+0x5bd>
    16c8:	3c 01       	movw	r6, r24
    16ca:	4d 01       	movw	r8, r26
    16cc:	62 2a       	or	r6, r18
    16ce:	73 2a       	or	r7, r19
    16d0:	84 2a       	or	r8, r20
    16d2:	95 2a       	or	r9, r21
    16d4:	69 a2       	std	Y+33, r6	; 0x21
    16d6:	7a a2       	std	Y+34, r7	; 0x22
    16d8:	8b a2       	std	Y+35, r8	; 0x23
    16da:	9c a2       	std	Y+36, r9	; 0x24
    16dc:	6c 96       	adiw	r28, 0x1c	; 28
    16de:	ec ac       	ldd	r14, Y+60	; 0x3c
    16e0:	fd ac       	ldd	r15, Y+61	; 0x3d
    16e2:	0e ad       	ldd	r16, Y+62	; 0x3e
    16e4:	1f ad       	ldd	r17, Y+63	; 0x3f
    16e6:	6c 97       	sbiw	r28, 0x1c	; 28
    16e8:	67 96       	adiw	r28, 0x17	; 23
    16ea:	0f ac       	ldd	r0, Y+63	; 0x3f
    16ec:	67 97       	sbiw	r28, 0x17	; 23
    16ee:	04 c0       	rjmp	.+8      	; 0x16f8 <__stack+0x5f9>
    16f0:	ee 0c       	add	r14, r14
    16f2:	ff 1c       	adc	r15, r15
    16f4:	00 1f       	adc	r16, r16
    16f6:	11 1f       	adc	r17, r17
    16f8:	0a 94       	dec	r0
    16fa:	d2 f7       	brpl	.-12     	; 0x16f0 <__stack+0x5f1>
    16fc:	ed 8e       	std	Y+29, r14	; 0x1d
    16fe:	fe 8e       	std	Y+30, r15	; 0x1e
    1700:	0f 8f       	std	Y+31, r16	; 0x1f
    1702:	18 a3       	std	Y+32, r17	; 0x20
    1704:	49 a5       	ldd	r20, Y+41	; 0x29
    1706:	5a a5       	ldd	r21, Y+42	; 0x2a
    1708:	6b a5       	ldd	r22, Y+43	; 0x2b
    170a:	7c a5       	ldd	r23, Y+44	; 0x2c
    170c:	3b 01       	movw	r6, r22
    170e:	88 24       	eor	r8, r8
    1710:	99 24       	eor	r9, r9
    1712:	60 70       	andi	r22, 0x00	; 0
    1714:	70 70       	andi	r23, 0x00	; 0
    1716:	2d 96       	adiw	r28, 0x0d	; 13
    1718:	4c af       	std	Y+60, r20	; 0x3c
    171a:	5d af       	std	Y+61, r21	; 0x3d
    171c:	6e af       	std	Y+62, r22	; 0x3e
    171e:	7f af       	std	Y+63, r23	; 0x3f
    1720:	2d 97       	sbiw	r28, 0x0d	; 13
    1722:	c6 01       	movw	r24, r12
    1724:	b5 01       	movw	r22, r10
    1726:	a4 01       	movw	r20, r8
    1728:	93 01       	movw	r18, r6
    172a:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    172e:	7b 01       	movw	r14, r22
    1730:	8c 01       	movw	r16, r24
    1732:	c6 01       	movw	r24, r12
    1734:	b5 01       	movw	r22, r10
    1736:	a4 01       	movw	r20, r8
    1738:	93 01       	movw	r18, r6
    173a:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    173e:	c9 01       	movw	r24, r18
    1740:	da 01       	movw	r26, r20
    1742:	1c 01       	movw	r2, r24
    1744:	2d 01       	movw	r4, r26
    1746:	c2 01       	movw	r24, r4
    1748:	b1 01       	movw	r22, r2
    174a:	2d 96       	adiw	r28, 0x0d	; 13
    174c:	2c ad       	ldd	r18, Y+60	; 0x3c
    174e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1750:	4e ad       	ldd	r20, Y+62	; 0x3e
    1752:	5f ad       	ldd	r21, Y+63	; 0x3f
    1754:	2d 97       	sbiw	r28, 0x0d	; 13
    1756:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
    175a:	9b 01       	movw	r18, r22
    175c:	ac 01       	movw	r20, r24
    175e:	87 01       	movw	r16, r14
    1760:	ff 24       	eor	r15, r15
    1762:	ee 24       	eor	r14, r14
    1764:	a9 a0       	ldd	r10, Y+33	; 0x21
    1766:	ba a0       	ldd	r11, Y+34	; 0x22
    1768:	cb a0       	ldd	r12, Y+35	; 0x23
    176a:	dc a0       	ldd	r13, Y+36	; 0x24
    176c:	c6 01       	movw	r24, r12
    176e:	aa 27       	eor	r26, r26
    1770:	bb 27       	eor	r27, r27
    1772:	57 01       	movw	r10, r14
    1774:	68 01       	movw	r12, r16
    1776:	a8 2a       	or	r10, r24
    1778:	b9 2a       	or	r11, r25
    177a:	ca 2a       	or	r12, r26
    177c:	db 2a       	or	r13, r27
    177e:	a2 16       	cp	r10, r18
    1780:	b3 06       	cpc	r11, r19
    1782:	c4 06       	cpc	r12, r20
    1784:	d5 06       	cpc	r13, r21
    1786:	00 f5       	brcc	.+64     	; 0x17c8 <__stack+0x6c9>
    1788:	08 94       	sec
    178a:	21 08       	sbc	r2, r1
    178c:	31 08       	sbc	r3, r1
    178e:	41 08       	sbc	r4, r1
    1790:	51 08       	sbc	r5, r1
    1792:	e9 a4       	ldd	r14, Y+41	; 0x29
    1794:	fa a4       	ldd	r15, Y+42	; 0x2a
    1796:	0b a5       	ldd	r16, Y+43	; 0x2b
    1798:	1c a5       	ldd	r17, Y+44	; 0x2c
    179a:	ae 0c       	add	r10, r14
    179c:	bf 1c       	adc	r11, r15
    179e:	c0 1e       	adc	r12, r16
    17a0:	d1 1e       	adc	r13, r17
    17a2:	ae 14       	cp	r10, r14
    17a4:	bf 04       	cpc	r11, r15
    17a6:	c0 06       	cpc	r12, r16
    17a8:	d1 06       	cpc	r13, r17
    17aa:	70 f0       	brcs	.+28     	; 0x17c8 <__stack+0x6c9>
    17ac:	a2 16       	cp	r10, r18
    17ae:	b3 06       	cpc	r11, r19
    17b0:	c4 06       	cpc	r12, r20
    17b2:	d5 06       	cpc	r13, r21
    17b4:	48 f4       	brcc	.+18     	; 0x17c8 <__stack+0x6c9>
    17b6:	08 94       	sec
    17b8:	21 08       	sbc	r2, r1
    17ba:	31 08       	sbc	r3, r1
    17bc:	41 08       	sbc	r4, r1
    17be:	51 08       	sbc	r5, r1
    17c0:	ae 0c       	add	r10, r14
    17c2:	bf 1c       	adc	r11, r15
    17c4:	c0 1e       	adc	r12, r16
    17c6:	d1 1e       	adc	r13, r17
    17c8:	a2 1a       	sub	r10, r18
    17ca:	b3 0a       	sbc	r11, r19
    17cc:	c4 0a       	sbc	r12, r20
    17ce:	d5 0a       	sbc	r13, r21
    17d0:	c6 01       	movw	r24, r12
    17d2:	b5 01       	movw	r22, r10
    17d4:	a4 01       	movw	r20, r8
    17d6:	93 01       	movw	r18, r6
    17d8:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    17dc:	7b 01       	movw	r14, r22
    17de:	8c 01       	movw	r16, r24
    17e0:	c6 01       	movw	r24, r12
    17e2:	b5 01       	movw	r22, r10
    17e4:	a4 01       	movw	r20, r8
    17e6:	93 01       	movw	r18, r6
    17e8:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    17ec:	c9 01       	movw	r24, r18
    17ee:	da 01       	movw	r26, r20
    17f0:	3c 01       	movw	r6, r24
    17f2:	4d 01       	movw	r8, r26
    17f4:	c4 01       	movw	r24, r8
    17f6:	b3 01       	movw	r22, r6
    17f8:	2d 96       	adiw	r28, 0x0d	; 13
    17fa:	2c ad       	ldd	r18, Y+60	; 0x3c
    17fc:	3d ad       	ldd	r19, Y+61	; 0x3d
    17fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1800:	5f ad       	ldd	r21, Y+63	; 0x3f
    1802:	2d 97       	sbiw	r28, 0x0d	; 13
    1804:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
    1808:	9b 01       	movw	r18, r22
    180a:	ac 01       	movw	r20, r24
    180c:	87 01       	movw	r16, r14
    180e:	ff 24       	eor	r15, r15
    1810:	ee 24       	eor	r14, r14
    1812:	89 a1       	ldd	r24, Y+33	; 0x21
    1814:	9a a1       	ldd	r25, Y+34	; 0x22
    1816:	ab a1       	ldd	r26, Y+35	; 0x23
    1818:	bc a1       	ldd	r27, Y+36	; 0x24
    181a:	a0 70       	andi	r26, 0x00	; 0
    181c:	b0 70       	andi	r27, 0x00	; 0
    181e:	57 01       	movw	r10, r14
    1820:	68 01       	movw	r12, r16
    1822:	a8 2a       	or	r10, r24
    1824:	b9 2a       	or	r11, r25
    1826:	ca 2a       	or	r12, r26
    1828:	db 2a       	or	r13, r27
    182a:	a2 16       	cp	r10, r18
    182c:	b3 06       	cpc	r11, r19
    182e:	c4 06       	cpc	r12, r20
    1830:	d5 06       	cpc	r13, r21
    1832:	00 f5       	brcc	.+64     	; 0x1874 <__stack+0x775>
    1834:	08 94       	sec
    1836:	61 08       	sbc	r6, r1
    1838:	71 08       	sbc	r7, r1
    183a:	81 08       	sbc	r8, r1
    183c:	91 08       	sbc	r9, r1
    183e:	69 a5       	ldd	r22, Y+41	; 0x29
    1840:	7a a5       	ldd	r23, Y+42	; 0x2a
    1842:	8b a5       	ldd	r24, Y+43	; 0x2b
    1844:	9c a5       	ldd	r25, Y+44	; 0x2c
    1846:	a6 0e       	add	r10, r22
    1848:	b7 1e       	adc	r11, r23
    184a:	c8 1e       	adc	r12, r24
    184c:	d9 1e       	adc	r13, r25
    184e:	a6 16       	cp	r10, r22
    1850:	b7 06       	cpc	r11, r23
    1852:	c8 06       	cpc	r12, r24
    1854:	d9 06       	cpc	r13, r25
    1856:	70 f0       	brcs	.+28     	; 0x1874 <__stack+0x775>
    1858:	a2 16       	cp	r10, r18
    185a:	b3 06       	cpc	r11, r19
    185c:	c4 06       	cpc	r12, r20
    185e:	d5 06       	cpc	r13, r21
    1860:	48 f4       	brcc	.+18     	; 0x1874 <__stack+0x775>
    1862:	08 94       	sec
    1864:	61 08       	sbc	r6, r1
    1866:	71 08       	sbc	r7, r1
    1868:	81 08       	sbc	r8, r1
    186a:	91 08       	sbc	r9, r1
    186c:	a6 0e       	add	r10, r22
    186e:	b7 1e       	adc	r11, r23
    1870:	c8 1e       	adc	r12, r24
    1872:	d9 1e       	adc	r13, r25
    1874:	d6 01       	movw	r26, r12
    1876:	c5 01       	movw	r24, r10
    1878:	82 1b       	sub	r24, r18
    187a:	93 0b       	sbc	r25, r19
    187c:	a4 0b       	sbc	r26, r20
    187e:	b5 0b       	sbc	r27, r21
    1880:	89 8f       	std	Y+25, r24	; 0x19
    1882:	9a 8f       	std	Y+26, r25	; 0x1a
    1884:	ab 8f       	std	Y+27, r26	; 0x1b
    1886:	bc 8f       	std	Y+28, r27	; 0x1c
    1888:	d1 01       	movw	r26, r2
    188a:	99 27       	eor	r25, r25
    188c:	88 27       	eor	r24, r24
    188e:	84 01       	movw	r16, r8
    1890:	73 01       	movw	r14, r6
    1892:	e8 2a       	or	r14, r24
    1894:	f9 2a       	or	r15, r25
    1896:	0a 2b       	or	r16, r26
    1898:	1b 2b       	or	r17, r27
    189a:	4f ef       	ldi	r20, 0xFF	; 255
    189c:	a4 2e       	mov	r10, r20
    189e:	4f ef       	ldi	r20, 0xFF	; 255
    18a0:	b4 2e       	mov	r11, r20
    18a2:	c1 2c       	mov	r12, r1
    18a4:	d1 2c       	mov	r13, r1
    18a6:	ae 20       	and	r10, r14
    18a8:	bf 20       	and	r11, r15
    18aa:	c0 22       	and	r12, r16
    18ac:	d1 22       	and	r13, r17
    18ae:	78 01       	movw	r14, r16
    18b0:	00 27       	eor	r16, r16
    18b2:	11 27       	eor	r17, r17
    18b4:	6d a0       	ldd	r6, Y+37	; 0x25
    18b6:	7e a0       	ldd	r7, Y+38	; 0x26
    18b8:	8f a0       	ldd	r8, Y+39	; 0x27
    18ba:	98 a4       	ldd	r9, Y+40	; 0x28
    18bc:	4f ef       	ldi	r20, 0xFF	; 255
    18be:	5f ef       	ldi	r21, 0xFF	; 255
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	64 22       	and	r6, r20
    18c6:	75 22       	and	r7, r21
    18c8:	86 22       	and	r8, r22
    18ca:	97 22       	and	r9, r23
    18cc:	8d a1       	ldd	r24, Y+37	; 0x25
    18ce:	9e a1       	ldd	r25, Y+38	; 0x26
    18d0:	af a1       	ldd	r26, Y+39	; 0x27
    18d2:	b8 a5       	ldd	r27, Y+40	; 0x28
    18d4:	bd 01       	movw	r22, r26
    18d6:	88 27       	eor	r24, r24
    18d8:	99 27       	eor	r25, r25
    18da:	65 96       	adiw	r28, 0x15	; 21
    18dc:	6c af       	std	Y+60, r22	; 0x3c
    18de:	7d af       	std	Y+61, r23	; 0x3d
    18e0:	8e af       	std	Y+62, r24	; 0x3e
    18e2:	9f af       	std	Y+63, r25	; 0x3f
    18e4:	65 97       	sbiw	r28, 0x15	; 21
    18e6:	c6 01       	movw	r24, r12
    18e8:	b5 01       	movw	r22, r10
    18ea:	a4 01       	movw	r20, r8
    18ec:	93 01       	movw	r18, r6
    18ee:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
    18f2:	61 96       	adiw	r28, 0x11	; 17
    18f4:	6c af       	std	Y+60, r22	; 0x3c
    18f6:	7d af       	std	Y+61, r23	; 0x3d
    18f8:	8e af       	std	Y+62, r24	; 0x3e
    18fa:	9f af       	std	Y+63, r25	; 0x3f
    18fc:	61 97       	sbiw	r28, 0x11	; 17
    18fe:	c6 01       	movw	r24, r12
    1900:	b5 01       	movw	r22, r10
    1902:	65 96       	adiw	r28, 0x15	; 21
    1904:	2c ad       	ldd	r18, Y+60	; 0x3c
    1906:	3d ad       	ldd	r19, Y+61	; 0x3d
    1908:	4e ad       	ldd	r20, Y+62	; 0x3e
    190a:	5f ad       	ldd	r21, Y+63	; 0x3f
    190c:	65 97       	sbiw	r28, 0x15	; 21
    190e:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
    1912:	1b 01       	movw	r2, r22
    1914:	2c 01       	movw	r4, r24
    1916:	c8 01       	movw	r24, r16
    1918:	b7 01       	movw	r22, r14
    191a:	a4 01       	movw	r20, r8
    191c:	93 01       	movw	r18, r6
    191e:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
    1922:	5b 01       	movw	r10, r22
    1924:	6c 01       	movw	r12, r24
    1926:	c8 01       	movw	r24, r16
    1928:	b7 01       	movw	r22, r14
    192a:	65 96       	adiw	r28, 0x15	; 21
    192c:	2c ad       	ldd	r18, Y+60	; 0x3c
    192e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1930:	4e ad       	ldd	r20, Y+62	; 0x3e
    1932:	5f ad       	ldd	r21, Y+63	; 0x3f
    1934:	65 97       	sbiw	r28, 0x15	; 21
    1936:	0e 94 4b 49 	call	0x9296	; 0x9296 <__mulsi3>
    193a:	7b 01       	movw	r14, r22
    193c:	8c 01       	movw	r16, r24
    193e:	a6 01       	movw	r20, r12
    1940:	95 01       	movw	r18, r10
    1942:	22 0d       	add	r18, r2
    1944:	33 1d       	adc	r19, r3
    1946:	44 1d       	adc	r20, r4
    1948:	55 1d       	adc	r21, r5
    194a:	61 96       	adiw	r28, 0x11	; 17
    194c:	6c ac       	ldd	r6, Y+60	; 0x3c
    194e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1950:	8e ac       	ldd	r8, Y+62	; 0x3e
    1952:	9f ac       	ldd	r9, Y+63	; 0x3f
    1954:	61 97       	sbiw	r28, 0x11	; 17
    1956:	c4 01       	movw	r24, r8
    1958:	aa 27       	eor	r26, r26
    195a:	bb 27       	eor	r27, r27
    195c:	28 0f       	add	r18, r24
    195e:	39 1f       	adc	r19, r25
    1960:	4a 1f       	adc	r20, r26
    1962:	5b 1f       	adc	r21, r27
    1964:	2a 15       	cp	r18, r10
    1966:	3b 05       	cpc	r19, r11
    1968:	4c 05       	cpc	r20, r12
    196a:	5d 05       	cpc	r21, r13
    196c:	48 f4       	brcc	.+18     	; 0x1980 <__stack+0x881>
    196e:	81 2c       	mov	r8, r1
    1970:	91 2c       	mov	r9, r1
    1972:	e1 e0       	ldi	r30, 0x01	; 1
    1974:	ae 2e       	mov	r10, r30
    1976:	b1 2c       	mov	r11, r1
    1978:	e8 0c       	add	r14, r8
    197a:	f9 1c       	adc	r15, r9
    197c:	0a 1d       	adc	r16, r10
    197e:	1b 1d       	adc	r17, r11
    1980:	ca 01       	movw	r24, r20
    1982:	aa 27       	eor	r26, r26
    1984:	bb 27       	eor	r27, r27
    1986:	57 01       	movw	r10, r14
    1988:	68 01       	movw	r12, r16
    198a:	a8 0e       	add	r10, r24
    198c:	b9 1e       	adc	r11, r25
    198e:	ca 1e       	adc	r12, r26
    1990:	db 1e       	adc	r13, r27
    1992:	a9 01       	movw	r20, r18
    1994:	33 27       	eor	r19, r19
    1996:	22 27       	eor	r18, r18
    1998:	61 96       	adiw	r28, 0x11	; 17
    199a:	8c ad       	ldd	r24, Y+60	; 0x3c
    199c:	9d ad       	ldd	r25, Y+61	; 0x3d
    199e:	ae ad       	ldd	r26, Y+62	; 0x3e
    19a0:	bf ad       	ldd	r27, Y+63	; 0x3f
    19a2:	61 97       	sbiw	r28, 0x11	; 17
    19a4:	a0 70       	andi	r26, 0x00	; 0
    19a6:	b0 70       	andi	r27, 0x00	; 0
    19a8:	28 0f       	add	r18, r24
    19aa:	39 1f       	adc	r19, r25
    19ac:	4a 1f       	adc	r20, r26
    19ae:	5b 1f       	adc	r21, r27
    19b0:	e9 8c       	ldd	r14, Y+25	; 0x19
    19b2:	fa 8c       	ldd	r15, Y+26	; 0x1a
    19b4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    19b6:	1c 8d       	ldd	r17, Y+28	; 0x1c
    19b8:	ea 14       	cp	r14, r10
    19ba:	fb 04       	cpc	r15, r11
    19bc:	0c 05       	cpc	r16, r12
    19be:	1d 05       	cpc	r17, r13
    19c0:	70 f0       	brcs	.+28     	; 0x19de <__stack+0x8df>
    19c2:	ae 14       	cp	r10, r14
    19c4:	bf 04       	cpc	r11, r15
    19c6:	c0 06       	cpc	r12, r16
    19c8:	d1 06       	cpc	r13, r17
    19ca:	69 f5       	brne	.+90     	; 0x1a26 <__stack+0x927>
    19cc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    19ce:	7e 8d       	ldd	r23, Y+30	; 0x1e
    19d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19d2:	98 a1       	ldd	r25, Y+32	; 0x20
    19d4:	62 17       	cp	r22, r18
    19d6:	73 07       	cpc	r23, r19
    19d8:	84 07       	cpc	r24, r20
    19da:	95 07       	cpc	r25, r21
    19dc:	20 f5       	brcc	.+72     	; 0x1a26 <__stack+0x927>
    19de:	da 01       	movw	r26, r20
    19e0:	c9 01       	movw	r24, r18
    19e2:	6d a0       	ldd	r6, Y+37	; 0x25
    19e4:	7e a0       	ldd	r7, Y+38	; 0x26
    19e6:	8f a0       	ldd	r8, Y+39	; 0x27
    19e8:	98 a4       	ldd	r9, Y+40	; 0x28
    19ea:	86 19       	sub	r24, r6
    19ec:	97 09       	sbc	r25, r7
    19ee:	a8 09       	sbc	r26, r8
    19f0:	b9 09       	sbc	r27, r9
    19f2:	e9 a4       	ldd	r14, Y+41	; 0x29
    19f4:	fa a4       	ldd	r15, Y+42	; 0x2a
    19f6:	0b a5       	ldd	r16, Y+43	; 0x2b
    19f8:	1c a5       	ldd	r17, Y+44	; 0x2c
    19fa:	ae 18       	sub	r10, r14
    19fc:	bf 08       	sbc	r11, r15
    19fe:	c0 0a       	sbc	r12, r16
    1a00:	d1 0a       	sbc	r13, r17
    1a02:	ee 24       	eor	r14, r14
    1a04:	ff 24       	eor	r15, r15
    1a06:	87 01       	movw	r16, r14
    1a08:	28 17       	cp	r18, r24
    1a0a:	39 07       	cpc	r19, r25
    1a0c:	4a 07       	cpc	r20, r26
    1a0e:	5b 07       	cpc	r21, r27
    1a10:	28 f4       	brcc	.+10     	; 0x1a1c <__stack+0x91d>
    1a12:	21 e0       	ldi	r18, 0x01	; 1
    1a14:	e2 2e       	mov	r14, r18
    1a16:	f1 2c       	mov	r15, r1
    1a18:	01 2d       	mov	r16, r1
    1a1a:	11 2d       	mov	r17, r1
    1a1c:	ae 18       	sub	r10, r14
    1a1e:	bf 08       	sbc	r11, r15
    1a20:	c0 0a       	sbc	r12, r16
    1a22:	d1 0a       	sbc	r13, r17
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <__stack+0x92b>
    1a26:	da 01       	movw	r26, r20
    1a28:	c9 01       	movw	r24, r18
    1a2a:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1a2c:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1a2e:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1a30:	98 a0       	ldd	r9, Y+32	; 0x20
    1a32:	68 1a       	sub	r6, r24
    1a34:	79 0a       	sbc	r7, r25
    1a36:	8a 0a       	sbc	r8, r26
    1a38:	9b 0a       	sbc	r9, r27
    1a3a:	49 8d       	ldd	r20, Y+25	; 0x19
    1a3c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1a3e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1a40:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1a42:	4a 19       	sub	r20, r10
    1a44:	5b 09       	sbc	r21, r11
    1a46:	6c 09       	sbc	r22, r12
    1a48:	7d 09       	sbc	r23, r13
    1a4a:	5a 01       	movw	r10, r20
    1a4c:	6b 01       	movw	r12, r22
    1a4e:	22 24       	eor	r2, r2
    1a50:	33 24       	eor	r3, r3
    1a52:	21 01       	movw	r4, r2
    1a54:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a56:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a5a:	98 a1       	ldd	r25, Y+32	; 0x20
    1a5c:	66 15       	cp	r22, r6
    1a5e:	77 05       	cpc	r23, r7
    1a60:	88 05       	cpc	r24, r8
    1a62:	99 05       	cpc	r25, r9
    1a64:	28 f4       	brcc	.+10     	; 0x1a70 <__stack+0x971>
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	28 2e       	mov	r2, r24
    1a6a:	31 2c       	mov	r3, r1
    1a6c:	41 2c       	mov	r4, r1
    1a6e:	51 2c       	mov	r5, r1
    1a70:	86 01       	movw	r16, r12
    1a72:	75 01       	movw	r14, r10
    1a74:	e2 18       	sub	r14, r2
    1a76:	f3 08       	sbc	r15, r3
    1a78:	04 09       	sbc	r16, r4
    1a7a:	15 09       	sbc	r17, r5
    1a7c:	a8 01       	movw	r20, r16
    1a7e:	97 01       	movw	r18, r14
    1a80:	66 96       	adiw	r28, 0x16	; 22
    1a82:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a84:	66 97       	sbiw	r28, 0x16	; 22
    1a86:	04 c0       	rjmp	.+8      	; 0x1a90 <__stack+0x991>
    1a88:	22 0f       	add	r18, r18
    1a8a:	33 1f       	adc	r19, r19
    1a8c:	44 1f       	adc	r20, r20
    1a8e:	55 1f       	adc	r21, r21
    1a90:	0a 94       	dec	r0
    1a92:	d2 f7       	brpl	.-12     	; 0x1a88 <__stack+0x989>
    1a94:	d4 01       	movw	r26, r8
    1a96:	c3 01       	movw	r24, r6
    1a98:	67 96       	adiw	r28, 0x17	; 23
    1a9a:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a9c:	67 97       	sbiw	r28, 0x17	; 23
    1a9e:	04 c0       	rjmp	.+8      	; 0x1aa8 <__stack+0x9a9>
    1aa0:	b6 95       	lsr	r27
    1aa2:	a7 95       	ror	r26
    1aa4:	97 95       	ror	r25
    1aa6:	87 95       	ror	r24
    1aa8:	0a 94       	dec	r0
    1aaa:	d2 f7       	brpl	.-12     	; 0x1aa0 <__stack+0x9a1>
    1aac:	28 2b       	or	r18, r24
    1aae:	39 2b       	or	r19, r25
    1ab0:	4a 2b       	or	r20, r26
    1ab2:	5b 2b       	or	r21, r27
    1ab4:	29 8b       	std	Y+17, r18	; 0x11
    1ab6:	3a 8b       	std	Y+18, r19	; 0x12
    1ab8:	4b 8b       	std	Y+19, r20	; 0x13
    1aba:	5c 8b       	std	Y+20, r21	; 0x14
    1abc:	67 96       	adiw	r28, 0x17	; 23
    1abe:	0f ac       	ldd	r0, Y+63	; 0x3f
    1ac0:	67 97       	sbiw	r28, 0x17	; 23
    1ac2:	04 c0       	rjmp	.+8      	; 0x1acc <__stack+0x9cd>
    1ac4:	16 95       	lsr	r17
    1ac6:	07 95       	ror	r16
    1ac8:	f7 94       	ror	r15
    1aca:	e7 94       	ror	r14
    1acc:	0a 94       	dec	r0
    1ace:	d2 f7       	brpl	.-12     	; 0x1ac4 <__stack+0x9c5>
    1ad0:	ed 8a       	std	Y+21, r14	; 0x15
    1ad2:	fe 8a       	std	Y+22, r15	; 0x16
    1ad4:	0f 8b       	std	Y+23, r16	; 0x17
    1ad6:	18 8f       	std	Y+24, r17	; 0x18
    1ad8:	3a 89       	ldd	r19, Y+18	; 0x12
    1ada:	4b 89       	ldd	r20, Y+19	; 0x13
    1adc:	5c 89       	ldd	r21, Y+20	; 0x14
    1ade:	6e 2d       	mov	r22, r14
    1ae0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae6:	c5 5a       	subi	r28, 0xA5	; 165
    1ae8:	df 4f       	sbci	r29, 0xFF	; 255
    1aea:	e2 e1       	ldi	r30, 0x12	; 18
    1aec:	0c 94 86 49 	jmp	0x930c	; 0x930c <__epilogue_restores__>

00001af0 <_fpadd_parts>:
    1af0:	a0 e0       	ldi	r26, 0x00	; 0
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	ee e7       	ldi	r30, 0x7E	; 126
    1af6:	fd e0       	ldi	r31, 0x0D	; 13
    1af8:	0c 94 6a 49 	jmp	0x92d4	; 0x92d4 <__prologue_saves__>
    1afc:	dc 01       	movw	r26, r24
    1afe:	2b 01       	movw	r4, r22
    1b00:	fa 01       	movw	r30, r20
    1b02:	9c 91       	ld	r25, X
    1b04:	92 30       	cpi	r25, 0x02	; 2
    1b06:	08 f4       	brcc	.+2      	; 0x1b0a <_fpadd_parts+0x1a>
    1b08:	39 c1       	rjmp	.+626    	; 0x1d7c <_fpadd_parts+0x28c>
    1b0a:	eb 01       	movw	r28, r22
    1b0c:	88 81       	ld	r24, Y
    1b0e:	82 30       	cpi	r24, 0x02	; 2
    1b10:	08 f4       	brcc	.+2      	; 0x1b14 <_fpadd_parts+0x24>
    1b12:	33 c1       	rjmp	.+614    	; 0x1d7a <_fpadd_parts+0x28a>
    1b14:	94 30       	cpi	r25, 0x04	; 4
    1b16:	69 f4       	brne	.+26     	; 0x1b32 <_fpadd_parts+0x42>
    1b18:	84 30       	cpi	r24, 0x04	; 4
    1b1a:	09 f0       	breq	.+2      	; 0x1b1e <_fpadd_parts+0x2e>
    1b1c:	2f c1       	rjmp	.+606    	; 0x1d7c <_fpadd_parts+0x28c>
    1b1e:	11 96       	adiw	r26, 0x01	; 1
    1b20:	9c 91       	ld	r25, X
    1b22:	11 97       	sbiw	r26, 0x01	; 1
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	98 17       	cp	r25, r24
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <_fpadd_parts+0x3c>
    1b2a:	28 c1       	rjmp	.+592    	; 0x1d7c <_fpadd_parts+0x28c>
    1b2c:	a8 ec       	ldi	r26, 0xC8	; 200
    1b2e:	b1 e0       	ldi	r27, 0x01	; 1
    1b30:	25 c1       	rjmp	.+586    	; 0x1d7c <_fpadd_parts+0x28c>
    1b32:	84 30       	cpi	r24, 0x04	; 4
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <_fpadd_parts+0x48>
    1b36:	21 c1       	rjmp	.+578    	; 0x1d7a <_fpadd_parts+0x28a>
    1b38:	82 30       	cpi	r24, 0x02	; 2
    1b3a:	a9 f4       	brne	.+42     	; 0x1b66 <_fpadd_parts+0x76>
    1b3c:	92 30       	cpi	r25, 0x02	; 2
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <_fpadd_parts+0x52>
    1b40:	1d c1       	rjmp	.+570    	; 0x1d7c <_fpadd_parts+0x28c>
    1b42:	9a 01       	movw	r18, r20
    1b44:	ad 01       	movw	r20, r26
    1b46:	88 e0       	ldi	r24, 0x08	; 8
    1b48:	ea 01       	movw	r28, r20
    1b4a:	09 90       	ld	r0, Y+
    1b4c:	ae 01       	movw	r20, r28
    1b4e:	e9 01       	movw	r28, r18
    1b50:	09 92       	st	Y+, r0
    1b52:	9e 01       	movw	r18, r28
    1b54:	81 50       	subi	r24, 0x01	; 1
    1b56:	c1 f7       	brne	.-16     	; 0x1b48 <_fpadd_parts+0x58>
    1b58:	e2 01       	movw	r28, r4
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	11 96       	adiw	r26, 0x01	; 1
    1b5e:	9c 91       	ld	r25, X
    1b60:	89 23       	and	r24, r25
    1b62:	81 83       	std	Z+1, r24	; 0x01
    1b64:	08 c1       	rjmp	.+528    	; 0x1d76 <_fpadd_parts+0x286>
    1b66:	92 30       	cpi	r25, 0x02	; 2
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <_fpadd_parts+0x7c>
    1b6a:	07 c1       	rjmp	.+526    	; 0x1d7a <_fpadd_parts+0x28a>
    1b6c:	12 96       	adiw	r26, 0x02	; 2
    1b6e:	2d 90       	ld	r2, X+
    1b70:	3c 90       	ld	r3, X
    1b72:	13 97       	sbiw	r26, 0x03	; 3
    1b74:	eb 01       	movw	r28, r22
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7a:	14 96       	adiw	r26, 0x04	; 4
    1b7c:	ad 90       	ld	r10, X+
    1b7e:	bd 90       	ld	r11, X+
    1b80:	cd 90       	ld	r12, X+
    1b82:	dc 90       	ld	r13, X
    1b84:	17 97       	sbiw	r26, 0x07	; 7
    1b86:	ec 80       	ldd	r14, Y+4	; 0x04
    1b88:	fd 80       	ldd	r15, Y+5	; 0x05
    1b8a:	0e 81       	ldd	r16, Y+6	; 0x06
    1b8c:	1f 81       	ldd	r17, Y+7	; 0x07
    1b8e:	91 01       	movw	r18, r2
    1b90:	28 1b       	sub	r18, r24
    1b92:	39 0b       	sbc	r19, r25
    1b94:	b9 01       	movw	r22, r18
    1b96:	37 ff       	sbrs	r19, 7
    1b98:	04 c0       	rjmp	.+8      	; 0x1ba2 <_fpadd_parts+0xb2>
    1b9a:	66 27       	eor	r22, r22
    1b9c:	77 27       	eor	r23, r23
    1b9e:	62 1b       	sub	r22, r18
    1ba0:	73 0b       	sbc	r23, r19
    1ba2:	60 32       	cpi	r22, 0x20	; 32
    1ba4:	71 05       	cpc	r23, r1
    1ba6:	0c f0       	brlt	.+2      	; 0x1baa <_fpadd_parts+0xba>
    1ba8:	61 c0       	rjmp	.+194    	; 0x1c6c <_fpadd_parts+0x17c>
    1baa:	12 16       	cp	r1, r18
    1bac:	13 06       	cpc	r1, r19
    1bae:	6c f5       	brge	.+90     	; 0x1c0a <_fpadd_parts+0x11a>
    1bb0:	37 01       	movw	r6, r14
    1bb2:	48 01       	movw	r8, r16
    1bb4:	06 2e       	mov	r0, r22
    1bb6:	04 c0       	rjmp	.+8      	; 0x1bc0 <_fpadd_parts+0xd0>
    1bb8:	96 94       	lsr	r9
    1bba:	87 94       	ror	r8
    1bbc:	77 94       	ror	r7
    1bbe:	67 94       	ror	r6
    1bc0:	0a 94       	dec	r0
    1bc2:	d2 f7       	brpl	.-12     	; 0x1bb8 <_fpadd_parts+0xc8>
    1bc4:	21 e0       	ldi	r18, 0x01	; 1
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	50 e0       	ldi	r21, 0x00	; 0
    1bcc:	04 c0       	rjmp	.+8      	; 0x1bd6 <_fpadd_parts+0xe6>
    1bce:	22 0f       	add	r18, r18
    1bd0:	33 1f       	adc	r19, r19
    1bd2:	44 1f       	adc	r20, r20
    1bd4:	55 1f       	adc	r21, r21
    1bd6:	6a 95       	dec	r22
    1bd8:	d2 f7       	brpl	.-12     	; 0x1bce <_fpadd_parts+0xde>
    1bda:	21 50       	subi	r18, 0x01	; 1
    1bdc:	30 40       	sbci	r19, 0x00	; 0
    1bde:	40 40       	sbci	r20, 0x00	; 0
    1be0:	50 40       	sbci	r21, 0x00	; 0
    1be2:	2e 21       	and	r18, r14
    1be4:	3f 21       	and	r19, r15
    1be6:	40 23       	and	r20, r16
    1be8:	51 23       	and	r21, r17
    1bea:	21 15       	cp	r18, r1
    1bec:	31 05       	cpc	r19, r1
    1bee:	41 05       	cpc	r20, r1
    1bf0:	51 05       	cpc	r21, r1
    1bf2:	21 f0       	breq	.+8      	; 0x1bfc <_fpadd_parts+0x10c>
    1bf4:	21 e0       	ldi	r18, 0x01	; 1
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	50 e0       	ldi	r21, 0x00	; 0
    1bfc:	79 01       	movw	r14, r18
    1bfe:	8a 01       	movw	r16, r20
    1c00:	e6 28       	or	r14, r6
    1c02:	f7 28       	or	r15, r7
    1c04:	08 29       	or	r16, r8
    1c06:	19 29       	or	r17, r9
    1c08:	3c c0       	rjmp	.+120    	; 0x1c82 <_fpadd_parts+0x192>
    1c0a:	23 2b       	or	r18, r19
    1c0c:	d1 f1       	breq	.+116    	; 0x1c82 <_fpadd_parts+0x192>
    1c0e:	26 0e       	add	r2, r22
    1c10:	37 1e       	adc	r3, r23
    1c12:	35 01       	movw	r6, r10
    1c14:	46 01       	movw	r8, r12
    1c16:	06 2e       	mov	r0, r22
    1c18:	04 c0       	rjmp	.+8      	; 0x1c22 <_fpadd_parts+0x132>
    1c1a:	96 94       	lsr	r9
    1c1c:	87 94       	ror	r8
    1c1e:	77 94       	ror	r7
    1c20:	67 94       	ror	r6
    1c22:	0a 94       	dec	r0
    1c24:	d2 f7       	brpl	.-12     	; 0x1c1a <_fpadd_parts+0x12a>
    1c26:	21 e0       	ldi	r18, 0x01	; 1
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e0       	ldi	r20, 0x00	; 0
    1c2c:	50 e0       	ldi	r21, 0x00	; 0
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <_fpadd_parts+0x148>
    1c30:	22 0f       	add	r18, r18
    1c32:	33 1f       	adc	r19, r19
    1c34:	44 1f       	adc	r20, r20
    1c36:	55 1f       	adc	r21, r21
    1c38:	6a 95       	dec	r22
    1c3a:	d2 f7       	brpl	.-12     	; 0x1c30 <_fpadd_parts+0x140>
    1c3c:	21 50       	subi	r18, 0x01	; 1
    1c3e:	30 40       	sbci	r19, 0x00	; 0
    1c40:	40 40       	sbci	r20, 0x00	; 0
    1c42:	50 40       	sbci	r21, 0x00	; 0
    1c44:	2a 21       	and	r18, r10
    1c46:	3b 21       	and	r19, r11
    1c48:	4c 21       	and	r20, r12
    1c4a:	5d 21       	and	r21, r13
    1c4c:	21 15       	cp	r18, r1
    1c4e:	31 05       	cpc	r19, r1
    1c50:	41 05       	cpc	r20, r1
    1c52:	51 05       	cpc	r21, r1
    1c54:	21 f0       	breq	.+8      	; 0x1c5e <_fpadd_parts+0x16e>
    1c56:	21 e0       	ldi	r18, 0x01	; 1
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	59 01       	movw	r10, r18
    1c60:	6a 01       	movw	r12, r20
    1c62:	a6 28       	or	r10, r6
    1c64:	b7 28       	or	r11, r7
    1c66:	c8 28       	or	r12, r8
    1c68:	d9 28       	or	r13, r9
    1c6a:	0b c0       	rjmp	.+22     	; 0x1c82 <_fpadd_parts+0x192>
    1c6c:	82 15       	cp	r24, r2
    1c6e:	93 05       	cpc	r25, r3
    1c70:	2c f0       	brlt	.+10     	; 0x1c7c <_fpadd_parts+0x18c>
    1c72:	1c 01       	movw	r2, r24
    1c74:	aa 24       	eor	r10, r10
    1c76:	bb 24       	eor	r11, r11
    1c78:	65 01       	movw	r12, r10
    1c7a:	03 c0       	rjmp	.+6      	; 0x1c82 <_fpadd_parts+0x192>
    1c7c:	ee 24       	eor	r14, r14
    1c7e:	ff 24       	eor	r15, r15
    1c80:	87 01       	movw	r16, r14
    1c82:	11 96       	adiw	r26, 0x01	; 1
    1c84:	9c 91       	ld	r25, X
    1c86:	d2 01       	movw	r26, r4
    1c88:	11 96       	adiw	r26, 0x01	; 1
    1c8a:	8c 91       	ld	r24, X
    1c8c:	98 17       	cp	r25, r24
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <_fpadd_parts+0x1a2>
    1c90:	45 c0       	rjmp	.+138    	; 0x1d1c <_fpadd_parts+0x22c>
    1c92:	99 23       	and	r25, r25
    1c94:	39 f0       	breq	.+14     	; 0x1ca4 <_fpadd_parts+0x1b4>
    1c96:	a8 01       	movw	r20, r16
    1c98:	97 01       	movw	r18, r14
    1c9a:	2a 19       	sub	r18, r10
    1c9c:	3b 09       	sbc	r19, r11
    1c9e:	4c 09       	sbc	r20, r12
    1ca0:	5d 09       	sbc	r21, r13
    1ca2:	06 c0       	rjmp	.+12     	; 0x1cb0 <_fpadd_parts+0x1c0>
    1ca4:	a6 01       	movw	r20, r12
    1ca6:	95 01       	movw	r18, r10
    1ca8:	2e 19       	sub	r18, r14
    1caa:	3f 09       	sbc	r19, r15
    1cac:	40 0b       	sbc	r20, r16
    1cae:	51 0b       	sbc	r21, r17
    1cb0:	57 fd       	sbrc	r21, 7
    1cb2:	08 c0       	rjmp	.+16     	; 0x1cc4 <_fpadd_parts+0x1d4>
    1cb4:	11 82       	std	Z+1, r1	; 0x01
    1cb6:	33 82       	std	Z+3, r3	; 0x03
    1cb8:	22 82       	std	Z+2, r2	; 0x02
    1cba:	24 83       	std	Z+4, r18	; 0x04
    1cbc:	35 83       	std	Z+5, r19	; 0x05
    1cbe:	46 83       	std	Z+6, r20	; 0x06
    1cc0:	57 83       	std	Z+7, r21	; 0x07
    1cc2:	1d c0       	rjmp	.+58     	; 0x1cfe <_fpadd_parts+0x20e>
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	81 83       	std	Z+1, r24	; 0x01
    1cc8:	33 82       	std	Z+3, r3	; 0x03
    1cca:	22 82       	std	Z+2, r2	; 0x02
    1ccc:	88 27       	eor	r24, r24
    1cce:	99 27       	eor	r25, r25
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	82 1b       	sub	r24, r18
    1cd4:	93 0b       	sbc	r25, r19
    1cd6:	a4 0b       	sbc	r26, r20
    1cd8:	b5 0b       	sbc	r27, r21
    1cda:	84 83       	std	Z+4, r24	; 0x04
    1cdc:	95 83       	std	Z+5, r25	; 0x05
    1cde:	a6 83       	std	Z+6, r26	; 0x06
    1ce0:	b7 83       	std	Z+7, r27	; 0x07
    1ce2:	0d c0       	rjmp	.+26     	; 0x1cfe <_fpadd_parts+0x20e>
    1ce4:	22 0f       	add	r18, r18
    1ce6:	33 1f       	adc	r19, r19
    1ce8:	44 1f       	adc	r20, r20
    1cea:	55 1f       	adc	r21, r21
    1cec:	24 83       	std	Z+4, r18	; 0x04
    1cee:	35 83       	std	Z+5, r19	; 0x05
    1cf0:	46 83       	std	Z+6, r20	; 0x06
    1cf2:	57 83       	std	Z+7, r21	; 0x07
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	93 83       	std	Z+3, r25	; 0x03
    1cfc:	82 83       	std	Z+2, r24	; 0x02
    1cfe:	24 81       	ldd	r18, Z+4	; 0x04
    1d00:	35 81       	ldd	r19, Z+5	; 0x05
    1d02:	46 81       	ldd	r20, Z+6	; 0x06
    1d04:	57 81       	ldd	r21, Z+7	; 0x07
    1d06:	da 01       	movw	r26, r20
    1d08:	c9 01       	movw	r24, r18
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	a1 09       	sbc	r26, r1
    1d0e:	b1 09       	sbc	r27, r1
    1d10:	8f 5f       	subi	r24, 0xFF	; 255
    1d12:	9f 4f       	sbci	r25, 0xFF	; 255
    1d14:	af 4f       	sbci	r26, 0xFF	; 255
    1d16:	bf 43       	sbci	r27, 0x3F	; 63
    1d18:	28 f3       	brcs	.-54     	; 0x1ce4 <_fpadd_parts+0x1f4>
    1d1a:	0b c0       	rjmp	.+22     	; 0x1d32 <_fpadd_parts+0x242>
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	33 82       	std	Z+3, r3	; 0x03
    1d20:	22 82       	std	Z+2, r2	; 0x02
    1d22:	ea 0c       	add	r14, r10
    1d24:	fb 1c       	adc	r15, r11
    1d26:	0c 1d       	adc	r16, r12
    1d28:	1d 1d       	adc	r17, r13
    1d2a:	e4 82       	std	Z+4, r14	; 0x04
    1d2c:	f5 82       	std	Z+5, r15	; 0x05
    1d2e:	06 83       	std	Z+6, r16	; 0x06
    1d30:	17 83       	std	Z+7, r17	; 0x07
    1d32:	83 e0       	ldi	r24, 0x03	; 3
    1d34:	80 83       	st	Z, r24
    1d36:	24 81       	ldd	r18, Z+4	; 0x04
    1d38:	35 81       	ldd	r19, Z+5	; 0x05
    1d3a:	46 81       	ldd	r20, Z+6	; 0x06
    1d3c:	57 81       	ldd	r21, Z+7	; 0x07
    1d3e:	57 ff       	sbrs	r21, 7
    1d40:	1a c0       	rjmp	.+52     	; 0x1d76 <_fpadd_parts+0x286>
    1d42:	c9 01       	movw	r24, r18
    1d44:	aa 27       	eor	r26, r26
    1d46:	97 fd       	sbrc	r25, 7
    1d48:	a0 95       	com	r26
    1d4a:	ba 2f       	mov	r27, r26
    1d4c:	81 70       	andi	r24, 0x01	; 1
    1d4e:	90 70       	andi	r25, 0x00	; 0
    1d50:	a0 70       	andi	r26, 0x00	; 0
    1d52:	b0 70       	andi	r27, 0x00	; 0
    1d54:	56 95       	lsr	r21
    1d56:	47 95       	ror	r20
    1d58:	37 95       	ror	r19
    1d5a:	27 95       	ror	r18
    1d5c:	82 2b       	or	r24, r18
    1d5e:	93 2b       	or	r25, r19
    1d60:	a4 2b       	or	r26, r20
    1d62:	b5 2b       	or	r27, r21
    1d64:	84 83       	std	Z+4, r24	; 0x04
    1d66:	95 83       	std	Z+5, r25	; 0x05
    1d68:	a6 83       	std	Z+6, r26	; 0x06
    1d6a:	b7 83       	std	Z+7, r27	; 0x07
    1d6c:	82 81       	ldd	r24, Z+2	; 0x02
    1d6e:	93 81       	ldd	r25, Z+3	; 0x03
    1d70:	01 96       	adiw	r24, 0x01	; 1
    1d72:	93 83       	std	Z+3, r25	; 0x03
    1d74:	82 83       	std	Z+2, r24	; 0x02
    1d76:	df 01       	movw	r26, r30
    1d78:	01 c0       	rjmp	.+2      	; 0x1d7c <_fpadd_parts+0x28c>
    1d7a:	d2 01       	movw	r26, r4
    1d7c:	cd 01       	movw	r24, r26
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	e2 e1       	ldi	r30, 0x12	; 18
    1d84:	0c 94 86 49 	jmp	0x930c	; 0x930c <__epilogue_restores__>

00001d88 <__subsf3>:
    1d88:	a0 e2       	ldi	r26, 0x20	; 32
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	ea ec       	ldi	r30, 0xCA	; 202
    1d8e:	fe e0       	ldi	r31, 0x0E	; 14
    1d90:	0c 94 76 49 	jmp	0x92ec	; 0x92ec <__prologue_saves__+0x18>
    1d94:	69 83       	std	Y+1, r22	; 0x01
    1d96:	7a 83       	std	Y+2, r23	; 0x02
    1d98:	8b 83       	std	Y+3, r24	; 0x03
    1d9a:	9c 83       	std	Y+4, r25	; 0x04
    1d9c:	2d 83       	std	Y+5, r18	; 0x05
    1d9e:	3e 83       	std	Y+6, r19	; 0x06
    1da0:	4f 83       	std	Y+7, r20	; 0x07
    1da2:	58 87       	std	Y+8, r21	; 0x08
    1da4:	e9 e0       	ldi	r30, 0x09	; 9
    1da6:	ee 2e       	mov	r14, r30
    1da8:	f1 2c       	mov	r15, r1
    1daa:	ec 0e       	add	r14, r28
    1dac:	fd 1e       	adc	r15, r29
    1dae:	ce 01       	movw	r24, r28
    1db0:	01 96       	adiw	r24, 0x01	; 1
    1db2:	b7 01       	movw	r22, r14
    1db4:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    1db8:	8e 01       	movw	r16, r28
    1dba:	0f 5e       	subi	r16, 0xEF	; 239
    1dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	05 96       	adiw	r24, 0x05	; 5
    1dc2:	b8 01       	movw	r22, r16
    1dc4:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    1dc8:	8a 89       	ldd	r24, Y+18	; 0x12
    1dca:	91 e0       	ldi	r25, 0x01	; 1
    1dcc:	89 27       	eor	r24, r25
    1dce:	8a 8b       	std	Y+18, r24	; 0x12
    1dd0:	c7 01       	movw	r24, r14
    1dd2:	b8 01       	movw	r22, r16
    1dd4:	ae 01       	movw	r20, r28
    1dd6:	47 5e       	subi	r20, 0xE7	; 231
    1dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dda:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_fpadd_parts>
    1dde:	0e 94 ac 11 	call	0x2358	; 0x2358 <__pack_f>
    1de2:	a0 96       	adiw	r28, 0x20	; 32
    1de4:	e6 e0       	ldi	r30, 0x06	; 6
    1de6:	0c 94 92 49 	jmp	0x9324	; 0x9324 <__epilogue_restores__+0x18>

00001dea <__addsf3>:
    1dea:	a0 e2       	ldi	r26, 0x20	; 32
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	eb ef       	ldi	r30, 0xFB	; 251
    1df0:	fe e0       	ldi	r31, 0x0E	; 14
    1df2:	0c 94 76 49 	jmp	0x92ec	; 0x92ec <__prologue_saves__+0x18>
    1df6:	69 83       	std	Y+1, r22	; 0x01
    1df8:	7a 83       	std	Y+2, r23	; 0x02
    1dfa:	8b 83       	std	Y+3, r24	; 0x03
    1dfc:	9c 83       	std	Y+4, r25	; 0x04
    1dfe:	2d 83       	std	Y+5, r18	; 0x05
    1e00:	3e 83       	std	Y+6, r19	; 0x06
    1e02:	4f 83       	std	Y+7, r20	; 0x07
    1e04:	58 87       	std	Y+8, r21	; 0x08
    1e06:	f9 e0       	ldi	r31, 0x09	; 9
    1e08:	ef 2e       	mov	r14, r31
    1e0a:	f1 2c       	mov	r15, r1
    1e0c:	ec 0e       	add	r14, r28
    1e0e:	fd 1e       	adc	r15, r29
    1e10:	ce 01       	movw	r24, r28
    1e12:	01 96       	adiw	r24, 0x01	; 1
    1e14:	b7 01       	movw	r22, r14
    1e16:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    1e1a:	8e 01       	movw	r16, r28
    1e1c:	0f 5e       	subi	r16, 0xEF	; 239
    1e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e20:	ce 01       	movw	r24, r28
    1e22:	05 96       	adiw	r24, 0x05	; 5
    1e24:	b8 01       	movw	r22, r16
    1e26:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    1e2a:	c7 01       	movw	r24, r14
    1e2c:	b8 01       	movw	r22, r16
    1e2e:	ae 01       	movw	r20, r28
    1e30:	47 5e       	subi	r20, 0xE7	; 231
    1e32:	5f 4f       	sbci	r21, 0xFF	; 255
    1e34:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_fpadd_parts>
    1e38:	0e 94 ac 11 	call	0x2358	; 0x2358 <__pack_f>
    1e3c:	a0 96       	adiw	r28, 0x20	; 32
    1e3e:	e6 e0       	ldi	r30, 0x06	; 6
    1e40:	0c 94 92 49 	jmp	0x9324	; 0x9324 <__epilogue_restores__+0x18>

00001e44 <__mulsf3>:
    1e44:	a0 e2       	ldi	r26, 0x20	; 32
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e8 e2       	ldi	r30, 0x28	; 40
    1e4a:	ff e0       	ldi	r31, 0x0F	; 15
    1e4c:	0c 94 6a 49 	jmp	0x92d4	; 0x92d4 <__prologue_saves__>
    1e50:	69 83       	std	Y+1, r22	; 0x01
    1e52:	7a 83       	std	Y+2, r23	; 0x02
    1e54:	8b 83       	std	Y+3, r24	; 0x03
    1e56:	9c 83       	std	Y+4, r25	; 0x04
    1e58:	2d 83       	std	Y+5, r18	; 0x05
    1e5a:	3e 83       	std	Y+6, r19	; 0x06
    1e5c:	4f 83       	std	Y+7, r20	; 0x07
    1e5e:	58 87       	std	Y+8, r21	; 0x08
    1e60:	ce 01       	movw	r24, r28
    1e62:	01 96       	adiw	r24, 0x01	; 1
    1e64:	be 01       	movw	r22, r28
    1e66:	67 5f       	subi	r22, 0xF7	; 247
    1e68:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6a:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    1e6e:	ce 01       	movw	r24, r28
    1e70:	05 96       	adiw	r24, 0x05	; 5
    1e72:	be 01       	movw	r22, r28
    1e74:	6f 5e       	subi	r22, 0xEF	; 239
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    1e7c:	99 85       	ldd	r25, Y+9	; 0x09
    1e7e:	92 30       	cpi	r25, 0x02	; 2
    1e80:	88 f0       	brcs	.+34     	; 0x1ea4 <__mulsf3+0x60>
    1e82:	89 89       	ldd	r24, Y+17	; 0x11
    1e84:	82 30       	cpi	r24, 0x02	; 2
    1e86:	c8 f0       	brcs	.+50     	; 0x1eba <__mulsf3+0x76>
    1e88:	94 30       	cpi	r25, 0x04	; 4
    1e8a:	19 f4       	brne	.+6      	; 0x1e92 <__mulsf3+0x4e>
    1e8c:	82 30       	cpi	r24, 0x02	; 2
    1e8e:	51 f4       	brne	.+20     	; 0x1ea4 <__mulsf3+0x60>
    1e90:	04 c0       	rjmp	.+8      	; 0x1e9a <__mulsf3+0x56>
    1e92:	84 30       	cpi	r24, 0x04	; 4
    1e94:	29 f4       	brne	.+10     	; 0x1ea0 <__mulsf3+0x5c>
    1e96:	92 30       	cpi	r25, 0x02	; 2
    1e98:	81 f4       	brne	.+32     	; 0x1eba <__mulsf3+0x76>
    1e9a:	88 ec       	ldi	r24, 0xC8	; 200
    1e9c:	91 e0       	ldi	r25, 0x01	; 1
    1e9e:	c6 c0       	rjmp	.+396    	; 0x202c <__mulsf3+0x1e8>
    1ea0:	92 30       	cpi	r25, 0x02	; 2
    1ea2:	49 f4       	brne	.+18     	; 0x1eb6 <__mulsf3+0x72>
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea8:	8a 89       	ldd	r24, Y+18	; 0x12
    1eaa:	98 13       	cpse	r25, r24
    1eac:	21 e0       	ldi	r18, 0x01	; 1
    1eae:	2a 87       	std	Y+10, r18	; 0x0a
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	09 96       	adiw	r24, 0x09	; 9
    1eb4:	bb c0       	rjmp	.+374    	; 0x202c <__mulsf3+0x1e8>
    1eb6:	82 30       	cpi	r24, 0x02	; 2
    1eb8:	49 f4       	brne	.+18     	; 0x1ecc <__mulsf3+0x88>
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebe:	8a 89       	ldd	r24, Y+18	; 0x12
    1ec0:	98 13       	cpse	r25, r24
    1ec2:	21 e0       	ldi	r18, 0x01	; 1
    1ec4:	2a 8b       	std	Y+18, r18	; 0x12
    1ec6:	ce 01       	movw	r24, r28
    1ec8:	41 96       	adiw	r24, 0x11	; 17
    1eca:	b0 c0       	rjmp	.+352    	; 0x202c <__mulsf3+0x1e8>
    1ecc:	2d 84       	ldd	r2, Y+13	; 0x0d
    1ece:	3e 84       	ldd	r3, Y+14	; 0x0e
    1ed0:	4f 84       	ldd	r4, Y+15	; 0x0f
    1ed2:	58 88       	ldd	r5, Y+16	; 0x10
    1ed4:	6d 88       	ldd	r6, Y+21	; 0x15
    1ed6:	7e 88       	ldd	r7, Y+22	; 0x16
    1ed8:	8f 88       	ldd	r8, Y+23	; 0x17
    1eda:	98 8c       	ldd	r9, Y+24	; 0x18
    1edc:	ee 24       	eor	r14, r14
    1ede:	ff 24       	eor	r15, r15
    1ee0:	87 01       	movw	r16, r14
    1ee2:	aa 24       	eor	r10, r10
    1ee4:	bb 24       	eor	r11, r11
    1ee6:	65 01       	movw	r12, r10
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	50 e0       	ldi	r21, 0x00	; 0
    1eec:	60 e0       	ldi	r22, 0x00	; 0
    1eee:	70 e0       	ldi	r23, 0x00	; 0
    1ef0:	e0 e0       	ldi	r30, 0x00	; 0
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	c1 01       	movw	r24, r2
    1ef6:	81 70       	andi	r24, 0x01	; 1
    1ef8:	90 70       	andi	r25, 0x00	; 0
    1efa:	89 2b       	or	r24, r25
    1efc:	e9 f0       	breq	.+58     	; 0x1f38 <__mulsf3+0xf4>
    1efe:	e6 0c       	add	r14, r6
    1f00:	f7 1c       	adc	r15, r7
    1f02:	08 1d       	adc	r16, r8
    1f04:	19 1d       	adc	r17, r9
    1f06:	9a 01       	movw	r18, r20
    1f08:	ab 01       	movw	r20, r22
    1f0a:	2a 0d       	add	r18, r10
    1f0c:	3b 1d       	adc	r19, r11
    1f0e:	4c 1d       	adc	r20, r12
    1f10:	5d 1d       	adc	r21, r13
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	a0 e0       	ldi	r26, 0x00	; 0
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e6 14       	cp	r14, r6
    1f1c:	f7 04       	cpc	r15, r7
    1f1e:	08 05       	cpc	r16, r8
    1f20:	19 05       	cpc	r17, r9
    1f22:	20 f4       	brcc	.+8      	; 0x1f2c <__mulsf3+0xe8>
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	a0 e0       	ldi	r26, 0x00	; 0
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	ba 01       	movw	r22, r20
    1f2e:	a9 01       	movw	r20, r18
    1f30:	48 0f       	add	r20, r24
    1f32:	59 1f       	adc	r21, r25
    1f34:	6a 1f       	adc	r22, r26
    1f36:	7b 1f       	adc	r23, r27
    1f38:	aa 0c       	add	r10, r10
    1f3a:	bb 1c       	adc	r11, r11
    1f3c:	cc 1c       	adc	r12, r12
    1f3e:	dd 1c       	adc	r13, r13
    1f40:	97 fe       	sbrs	r9, 7
    1f42:	08 c0       	rjmp	.+16     	; 0x1f54 <__mulsf3+0x110>
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a0 e0       	ldi	r26, 0x00	; 0
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	a8 2a       	or	r10, r24
    1f4e:	b9 2a       	or	r11, r25
    1f50:	ca 2a       	or	r12, r26
    1f52:	db 2a       	or	r13, r27
    1f54:	31 96       	adiw	r30, 0x01	; 1
    1f56:	e0 32       	cpi	r30, 0x20	; 32
    1f58:	f1 05       	cpc	r31, r1
    1f5a:	49 f0       	breq	.+18     	; 0x1f6e <__mulsf3+0x12a>
    1f5c:	66 0c       	add	r6, r6
    1f5e:	77 1c       	adc	r7, r7
    1f60:	88 1c       	adc	r8, r8
    1f62:	99 1c       	adc	r9, r9
    1f64:	56 94       	lsr	r5
    1f66:	47 94       	ror	r4
    1f68:	37 94       	ror	r3
    1f6a:	27 94       	ror	r2
    1f6c:	c3 cf       	rjmp	.-122    	; 0x1ef4 <__mulsf3+0xb0>
    1f6e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f70:	ea 89       	ldd	r30, Y+18	; 0x12
    1f72:	2b 89       	ldd	r18, Y+19	; 0x13
    1f74:	3c 89       	ldd	r19, Y+20	; 0x14
    1f76:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f78:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f7a:	28 0f       	add	r18, r24
    1f7c:	39 1f       	adc	r19, r25
    1f7e:	2e 5f       	subi	r18, 0xFE	; 254
    1f80:	3f 4f       	sbci	r19, 0xFF	; 255
    1f82:	17 c0       	rjmp	.+46     	; 0x1fb2 <__mulsf3+0x16e>
    1f84:	ca 01       	movw	r24, r20
    1f86:	81 70       	andi	r24, 0x01	; 1
    1f88:	90 70       	andi	r25, 0x00	; 0
    1f8a:	89 2b       	or	r24, r25
    1f8c:	61 f0       	breq	.+24     	; 0x1fa6 <__mulsf3+0x162>
    1f8e:	16 95       	lsr	r17
    1f90:	07 95       	ror	r16
    1f92:	f7 94       	ror	r15
    1f94:	e7 94       	ror	r14
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a0 e0       	ldi	r26, 0x00	; 0
    1f9c:	b0 e8       	ldi	r27, 0x80	; 128
    1f9e:	e8 2a       	or	r14, r24
    1fa0:	f9 2a       	or	r15, r25
    1fa2:	0a 2b       	or	r16, r26
    1fa4:	1b 2b       	or	r17, r27
    1fa6:	76 95       	lsr	r23
    1fa8:	67 95       	ror	r22
    1faa:	57 95       	ror	r21
    1fac:	47 95       	ror	r20
    1fae:	2f 5f       	subi	r18, 0xFF	; 255
    1fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb2:	77 fd       	sbrc	r23, 7
    1fb4:	e7 cf       	rjmp	.-50     	; 0x1f84 <__mulsf3+0x140>
    1fb6:	0c c0       	rjmp	.+24     	; 0x1fd0 <__mulsf3+0x18c>
    1fb8:	44 0f       	add	r20, r20
    1fba:	55 1f       	adc	r21, r21
    1fbc:	66 1f       	adc	r22, r22
    1fbe:	77 1f       	adc	r23, r23
    1fc0:	17 fd       	sbrc	r17, 7
    1fc2:	41 60       	ori	r20, 0x01	; 1
    1fc4:	ee 0c       	add	r14, r14
    1fc6:	ff 1c       	adc	r15, r15
    1fc8:	00 1f       	adc	r16, r16
    1fca:	11 1f       	adc	r17, r17
    1fcc:	21 50       	subi	r18, 0x01	; 1
    1fce:	30 40       	sbci	r19, 0x00	; 0
    1fd0:	40 30       	cpi	r20, 0x00	; 0
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	59 07       	cpc	r21, r25
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	69 07       	cpc	r22, r25
    1fda:	90 e4       	ldi	r25, 0x40	; 64
    1fdc:	79 07       	cpc	r23, r25
    1fde:	60 f3       	brcs	.-40     	; 0x1fb8 <__mulsf3+0x174>
    1fe0:	2b 8f       	std	Y+27, r18	; 0x1b
    1fe2:	3c 8f       	std	Y+28, r19	; 0x1c
    1fe4:	db 01       	movw	r26, r22
    1fe6:	ca 01       	movw	r24, r20
    1fe8:	8f 77       	andi	r24, 0x7F	; 127
    1fea:	90 70       	andi	r25, 0x00	; 0
    1fec:	a0 70       	andi	r26, 0x00	; 0
    1fee:	b0 70       	andi	r27, 0x00	; 0
    1ff0:	80 34       	cpi	r24, 0x40	; 64
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	a1 05       	cpc	r26, r1
    1ff6:	b1 05       	cpc	r27, r1
    1ff8:	61 f4       	brne	.+24     	; 0x2012 <__mulsf3+0x1ce>
    1ffa:	47 fd       	sbrc	r20, 7
    1ffc:	0a c0       	rjmp	.+20     	; 0x2012 <__mulsf3+0x1ce>
    1ffe:	e1 14       	cp	r14, r1
    2000:	f1 04       	cpc	r15, r1
    2002:	01 05       	cpc	r16, r1
    2004:	11 05       	cpc	r17, r1
    2006:	29 f0       	breq	.+10     	; 0x2012 <__mulsf3+0x1ce>
    2008:	40 5c       	subi	r20, 0xC0	; 192
    200a:	5f 4f       	sbci	r21, 0xFF	; 255
    200c:	6f 4f       	sbci	r22, 0xFF	; 255
    200e:	7f 4f       	sbci	r23, 0xFF	; 255
    2010:	40 78       	andi	r20, 0x80	; 128
    2012:	1a 8e       	std	Y+26, r1	; 0x1a
    2014:	fe 17       	cp	r31, r30
    2016:	11 f0       	breq	.+4      	; 0x201c <__mulsf3+0x1d8>
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	8a 8f       	std	Y+26, r24	; 0x1a
    201c:	4d 8f       	std	Y+29, r20	; 0x1d
    201e:	5e 8f       	std	Y+30, r21	; 0x1e
    2020:	6f 8f       	std	Y+31, r22	; 0x1f
    2022:	78 a3       	std	Y+32, r23	; 0x20
    2024:	83 e0       	ldi	r24, 0x03	; 3
    2026:	89 8f       	std	Y+25, r24	; 0x19
    2028:	ce 01       	movw	r24, r28
    202a:	49 96       	adiw	r24, 0x19	; 25
    202c:	0e 94 ac 11 	call	0x2358	; 0x2358 <__pack_f>
    2030:	a0 96       	adiw	r28, 0x20	; 32
    2032:	e2 e1       	ldi	r30, 0x12	; 18
    2034:	0c 94 86 49 	jmp	0x930c	; 0x930c <__epilogue_restores__>

00002038 <__divsf3>:
    2038:	a8 e1       	ldi	r26, 0x18	; 24
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e2 e2       	ldi	r30, 0x22	; 34
    203e:	f0 e1       	ldi	r31, 0x10	; 16
    2040:	0c 94 72 49 	jmp	0x92e4	; 0x92e4 <__prologue_saves__+0x10>
    2044:	69 83       	std	Y+1, r22	; 0x01
    2046:	7a 83       	std	Y+2, r23	; 0x02
    2048:	8b 83       	std	Y+3, r24	; 0x03
    204a:	9c 83       	std	Y+4, r25	; 0x04
    204c:	2d 83       	std	Y+5, r18	; 0x05
    204e:	3e 83       	std	Y+6, r19	; 0x06
    2050:	4f 83       	std	Y+7, r20	; 0x07
    2052:	58 87       	std	Y+8, r21	; 0x08
    2054:	b9 e0       	ldi	r27, 0x09	; 9
    2056:	eb 2e       	mov	r14, r27
    2058:	f1 2c       	mov	r15, r1
    205a:	ec 0e       	add	r14, r28
    205c:	fd 1e       	adc	r15, r29
    205e:	ce 01       	movw	r24, r28
    2060:	01 96       	adiw	r24, 0x01	; 1
    2062:	b7 01       	movw	r22, r14
    2064:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    2068:	8e 01       	movw	r16, r28
    206a:	0f 5e       	subi	r16, 0xEF	; 239
    206c:	1f 4f       	sbci	r17, 0xFF	; 255
    206e:	ce 01       	movw	r24, r28
    2070:	05 96       	adiw	r24, 0x05	; 5
    2072:	b8 01       	movw	r22, r16
    2074:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    2078:	29 85       	ldd	r18, Y+9	; 0x09
    207a:	22 30       	cpi	r18, 0x02	; 2
    207c:	08 f4       	brcc	.+2      	; 0x2080 <__divsf3+0x48>
    207e:	7e c0       	rjmp	.+252    	; 0x217c <__divsf3+0x144>
    2080:	39 89       	ldd	r19, Y+17	; 0x11
    2082:	32 30       	cpi	r19, 0x02	; 2
    2084:	10 f4       	brcc	.+4      	; 0x208a <__divsf3+0x52>
    2086:	b8 01       	movw	r22, r16
    2088:	7c c0       	rjmp	.+248    	; 0x2182 <__divsf3+0x14a>
    208a:	8a 85       	ldd	r24, Y+10	; 0x0a
    208c:	9a 89       	ldd	r25, Y+18	; 0x12
    208e:	89 27       	eor	r24, r25
    2090:	8a 87       	std	Y+10, r24	; 0x0a
    2092:	24 30       	cpi	r18, 0x04	; 4
    2094:	11 f0       	breq	.+4      	; 0x209a <__divsf3+0x62>
    2096:	22 30       	cpi	r18, 0x02	; 2
    2098:	31 f4       	brne	.+12     	; 0x20a6 <__divsf3+0x6e>
    209a:	23 17       	cp	r18, r19
    209c:	09 f0       	breq	.+2      	; 0x20a0 <__divsf3+0x68>
    209e:	6e c0       	rjmp	.+220    	; 0x217c <__divsf3+0x144>
    20a0:	68 ec       	ldi	r22, 0xC8	; 200
    20a2:	71 e0       	ldi	r23, 0x01	; 1
    20a4:	6e c0       	rjmp	.+220    	; 0x2182 <__divsf3+0x14a>
    20a6:	34 30       	cpi	r19, 0x04	; 4
    20a8:	39 f4       	brne	.+14     	; 0x20b8 <__divsf3+0x80>
    20aa:	1d 86       	std	Y+13, r1	; 0x0d
    20ac:	1e 86       	std	Y+14, r1	; 0x0e
    20ae:	1f 86       	std	Y+15, r1	; 0x0f
    20b0:	18 8a       	std	Y+16, r1	; 0x10
    20b2:	1c 86       	std	Y+12, r1	; 0x0c
    20b4:	1b 86       	std	Y+11, r1	; 0x0b
    20b6:	04 c0       	rjmp	.+8      	; 0x20c0 <__divsf3+0x88>
    20b8:	32 30       	cpi	r19, 0x02	; 2
    20ba:	21 f4       	brne	.+8      	; 0x20c4 <__divsf3+0x8c>
    20bc:	84 e0       	ldi	r24, 0x04	; 4
    20be:	89 87       	std	Y+9, r24	; 0x09
    20c0:	b7 01       	movw	r22, r14
    20c2:	5f c0       	rjmp	.+190    	; 0x2182 <__divsf3+0x14a>
    20c4:	2b 85       	ldd	r18, Y+11	; 0x0b
    20c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    20c8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ca:	9c 89       	ldd	r25, Y+20	; 0x14
    20cc:	28 1b       	sub	r18, r24
    20ce:	39 0b       	sbc	r19, r25
    20d0:	3c 87       	std	Y+12, r19	; 0x0c
    20d2:	2b 87       	std	Y+11, r18	; 0x0b
    20d4:	ed 84       	ldd	r14, Y+13	; 0x0d
    20d6:	fe 84       	ldd	r15, Y+14	; 0x0e
    20d8:	0f 85       	ldd	r16, Y+15	; 0x0f
    20da:	18 89       	ldd	r17, Y+16	; 0x10
    20dc:	ad 88       	ldd	r10, Y+21	; 0x15
    20de:	be 88       	ldd	r11, Y+22	; 0x16
    20e0:	cf 88       	ldd	r12, Y+23	; 0x17
    20e2:	d8 8c       	ldd	r13, Y+24	; 0x18
    20e4:	ea 14       	cp	r14, r10
    20e6:	fb 04       	cpc	r15, r11
    20e8:	0c 05       	cpc	r16, r12
    20ea:	1d 05       	cpc	r17, r13
    20ec:	40 f4       	brcc	.+16     	; 0x20fe <__divsf3+0xc6>
    20ee:	ee 0c       	add	r14, r14
    20f0:	ff 1c       	adc	r15, r15
    20f2:	00 1f       	adc	r16, r16
    20f4:	11 1f       	adc	r17, r17
    20f6:	21 50       	subi	r18, 0x01	; 1
    20f8:	30 40       	sbci	r19, 0x00	; 0
    20fa:	3c 87       	std	Y+12, r19	; 0x0c
    20fc:	2b 87       	std	Y+11, r18	; 0x0b
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e0       	ldi	r20, 0x00	; 0
    2104:	50 e0       	ldi	r21, 0x00	; 0
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a0 e0       	ldi	r26, 0x00	; 0
    210c:	b0 e4       	ldi	r27, 0x40	; 64
    210e:	60 e0       	ldi	r22, 0x00	; 0
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	ea 14       	cp	r14, r10
    2114:	fb 04       	cpc	r15, r11
    2116:	0c 05       	cpc	r16, r12
    2118:	1d 05       	cpc	r17, r13
    211a:	40 f0       	brcs	.+16     	; 0x212c <__divsf3+0xf4>
    211c:	28 2b       	or	r18, r24
    211e:	39 2b       	or	r19, r25
    2120:	4a 2b       	or	r20, r26
    2122:	5b 2b       	or	r21, r27
    2124:	ea 18       	sub	r14, r10
    2126:	fb 08       	sbc	r15, r11
    2128:	0c 09       	sbc	r16, r12
    212a:	1d 09       	sbc	r17, r13
    212c:	b6 95       	lsr	r27
    212e:	a7 95       	ror	r26
    2130:	97 95       	ror	r25
    2132:	87 95       	ror	r24
    2134:	ee 0c       	add	r14, r14
    2136:	ff 1c       	adc	r15, r15
    2138:	00 1f       	adc	r16, r16
    213a:	11 1f       	adc	r17, r17
    213c:	6f 5f       	subi	r22, 0xFF	; 255
    213e:	7f 4f       	sbci	r23, 0xFF	; 255
    2140:	6f 31       	cpi	r22, 0x1F	; 31
    2142:	71 05       	cpc	r23, r1
    2144:	31 f7       	brne	.-52     	; 0x2112 <__divsf3+0xda>
    2146:	da 01       	movw	r26, r20
    2148:	c9 01       	movw	r24, r18
    214a:	8f 77       	andi	r24, 0x7F	; 127
    214c:	90 70       	andi	r25, 0x00	; 0
    214e:	a0 70       	andi	r26, 0x00	; 0
    2150:	b0 70       	andi	r27, 0x00	; 0
    2152:	80 34       	cpi	r24, 0x40	; 64
    2154:	91 05       	cpc	r25, r1
    2156:	a1 05       	cpc	r26, r1
    2158:	b1 05       	cpc	r27, r1
    215a:	61 f4       	brne	.+24     	; 0x2174 <__divsf3+0x13c>
    215c:	27 fd       	sbrc	r18, 7
    215e:	0a c0       	rjmp	.+20     	; 0x2174 <__divsf3+0x13c>
    2160:	e1 14       	cp	r14, r1
    2162:	f1 04       	cpc	r15, r1
    2164:	01 05       	cpc	r16, r1
    2166:	11 05       	cpc	r17, r1
    2168:	29 f0       	breq	.+10     	; 0x2174 <__divsf3+0x13c>
    216a:	20 5c       	subi	r18, 0xC0	; 192
    216c:	3f 4f       	sbci	r19, 0xFF	; 255
    216e:	4f 4f       	sbci	r20, 0xFF	; 255
    2170:	5f 4f       	sbci	r21, 0xFF	; 255
    2172:	20 78       	andi	r18, 0x80	; 128
    2174:	2d 87       	std	Y+13, r18	; 0x0d
    2176:	3e 87       	std	Y+14, r19	; 0x0e
    2178:	4f 87       	std	Y+15, r20	; 0x0f
    217a:	58 8b       	std	Y+16, r21	; 0x10
    217c:	be 01       	movw	r22, r28
    217e:	67 5f       	subi	r22, 0xF7	; 247
    2180:	7f 4f       	sbci	r23, 0xFF	; 255
    2182:	cb 01       	movw	r24, r22
    2184:	0e 94 ac 11 	call	0x2358	; 0x2358 <__pack_f>
    2188:	68 96       	adiw	r28, 0x18	; 24
    218a:	ea e0       	ldi	r30, 0x0A	; 10
    218c:	0c 94 8e 49 	jmp	0x931c	; 0x931c <__epilogue_restores__+0x10>

00002190 <__gtsf2>:
    2190:	a8 e1       	ldi	r26, 0x18	; 24
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	ee ec       	ldi	r30, 0xCE	; 206
    2196:	f0 e1       	ldi	r31, 0x10	; 16
    2198:	0c 94 76 49 	jmp	0x92ec	; 0x92ec <__prologue_saves__+0x18>
    219c:	69 83       	std	Y+1, r22	; 0x01
    219e:	7a 83       	std	Y+2, r23	; 0x02
    21a0:	8b 83       	std	Y+3, r24	; 0x03
    21a2:	9c 83       	std	Y+4, r25	; 0x04
    21a4:	2d 83       	std	Y+5, r18	; 0x05
    21a6:	3e 83       	std	Y+6, r19	; 0x06
    21a8:	4f 83       	std	Y+7, r20	; 0x07
    21aa:	58 87       	std	Y+8, r21	; 0x08
    21ac:	89 e0       	ldi	r24, 0x09	; 9
    21ae:	e8 2e       	mov	r14, r24
    21b0:	f1 2c       	mov	r15, r1
    21b2:	ec 0e       	add	r14, r28
    21b4:	fd 1e       	adc	r15, r29
    21b6:	ce 01       	movw	r24, r28
    21b8:	01 96       	adiw	r24, 0x01	; 1
    21ba:	b7 01       	movw	r22, r14
    21bc:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    21c0:	8e 01       	movw	r16, r28
    21c2:	0f 5e       	subi	r16, 0xEF	; 239
    21c4:	1f 4f       	sbci	r17, 0xFF	; 255
    21c6:	ce 01       	movw	r24, r28
    21c8:	05 96       	adiw	r24, 0x05	; 5
    21ca:	b8 01       	movw	r22, r16
    21cc:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    21d0:	89 85       	ldd	r24, Y+9	; 0x09
    21d2:	82 30       	cpi	r24, 0x02	; 2
    21d4:	40 f0       	brcs	.+16     	; 0x21e6 <__gtsf2+0x56>
    21d6:	89 89       	ldd	r24, Y+17	; 0x11
    21d8:	82 30       	cpi	r24, 0x02	; 2
    21da:	28 f0       	brcs	.+10     	; 0x21e6 <__gtsf2+0x56>
    21dc:	c7 01       	movw	r24, r14
    21de:	b8 01       	movw	r22, r16
    21e0:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__fpcmp_parts_f>
    21e4:	01 c0       	rjmp	.+2      	; 0x21e8 <__gtsf2+0x58>
    21e6:	8f ef       	ldi	r24, 0xFF	; 255
    21e8:	68 96       	adiw	r28, 0x18	; 24
    21ea:	e6 e0       	ldi	r30, 0x06	; 6
    21ec:	0c 94 92 49 	jmp	0x9324	; 0x9324 <__epilogue_restores__+0x18>

000021f0 <__gesf2>:
    21f0:	a8 e1       	ldi	r26, 0x18	; 24
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	ee ef       	ldi	r30, 0xFE	; 254
    21f6:	f0 e1       	ldi	r31, 0x10	; 16
    21f8:	0c 94 76 49 	jmp	0x92ec	; 0x92ec <__prologue_saves__+0x18>
    21fc:	69 83       	std	Y+1, r22	; 0x01
    21fe:	7a 83       	std	Y+2, r23	; 0x02
    2200:	8b 83       	std	Y+3, r24	; 0x03
    2202:	9c 83       	std	Y+4, r25	; 0x04
    2204:	2d 83       	std	Y+5, r18	; 0x05
    2206:	3e 83       	std	Y+6, r19	; 0x06
    2208:	4f 83       	std	Y+7, r20	; 0x07
    220a:	58 87       	std	Y+8, r21	; 0x08
    220c:	89 e0       	ldi	r24, 0x09	; 9
    220e:	e8 2e       	mov	r14, r24
    2210:	f1 2c       	mov	r15, r1
    2212:	ec 0e       	add	r14, r28
    2214:	fd 1e       	adc	r15, r29
    2216:	ce 01       	movw	r24, r28
    2218:	01 96       	adiw	r24, 0x01	; 1
    221a:	b7 01       	movw	r22, r14
    221c:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    2220:	8e 01       	movw	r16, r28
    2222:	0f 5e       	subi	r16, 0xEF	; 239
    2224:	1f 4f       	sbci	r17, 0xFF	; 255
    2226:	ce 01       	movw	r24, r28
    2228:	05 96       	adiw	r24, 0x05	; 5
    222a:	b8 01       	movw	r22, r16
    222c:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    2230:	89 85       	ldd	r24, Y+9	; 0x09
    2232:	82 30       	cpi	r24, 0x02	; 2
    2234:	40 f0       	brcs	.+16     	; 0x2246 <__gesf2+0x56>
    2236:	89 89       	ldd	r24, Y+17	; 0x11
    2238:	82 30       	cpi	r24, 0x02	; 2
    223a:	28 f0       	brcs	.+10     	; 0x2246 <__gesf2+0x56>
    223c:	c7 01       	movw	r24, r14
    223e:	b8 01       	movw	r22, r16
    2240:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__fpcmp_parts_f>
    2244:	01 c0       	rjmp	.+2      	; 0x2248 <__gesf2+0x58>
    2246:	8f ef       	ldi	r24, 0xFF	; 255
    2248:	68 96       	adiw	r28, 0x18	; 24
    224a:	e6 e0       	ldi	r30, 0x06	; 6
    224c:	0c 94 92 49 	jmp	0x9324	; 0x9324 <__epilogue_restores__+0x18>

00002250 <__ltsf2>:
    2250:	a8 e1       	ldi	r26, 0x18	; 24
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	ee e2       	ldi	r30, 0x2E	; 46
    2256:	f1 e1       	ldi	r31, 0x11	; 17
    2258:	0c 94 76 49 	jmp	0x92ec	; 0x92ec <__prologue_saves__+0x18>
    225c:	69 83       	std	Y+1, r22	; 0x01
    225e:	7a 83       	std	Y+2, r23	; 0x02
    2260:	8b 83       	std	Y+3, r24	; 0x03
    2262:	9c 83       	std	Y+4, r25	; 0x04
    2264:	2d 83       	std	Y+5, r18	; 0x05
    2266:	3e 83       	std	Y+6, r19	; 0x06
    2268:	4f 83       	std	Y+7, r20	; 0x07
    226a:	58 87       	std	Y+8, r21	; 0x08
    226c:	89 e0       	ldi	r24, 0x09	; 9
    226e:	e8 2e       	mov	r14, r24
    2270:	f1 2c       	mov	r15, r1
    2272:	ec 0e       	add	r14, r28
    2274:	fd 1e       	adc	r15, r29
    2276:	ce 01       	movw	r24, r28
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	b7 01       	movw	r22, r14
    227c:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    2280:	8e 01       	movw	r16, r28
    2282:	0f 5e       	subi	r16, 0xEF	; 239
    2284:	1f 4f       	sbci	r17, 0xFF	; 255
    2286:	ce 01       	movw	r24, r28
    2288:	05 96       	adiw	r24, 0x05	; 5
    228a:	b8 01       	movw	r22, r16
    228c:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    2290:	89 85       	ldd	r24, Y+9	; 0x09
    2292:	82 30       	cpi	r24, 0x02	; 2
    2294:	40 f0       	brcs	.+16     	; 0x22a6 <__ltsf2+0x56>
    2296:	89 89       	ldd	r24, Y+17	; 0x11
    2298:	82 30       	cpi	r24, 0x02	; 2
    229a:	28 f0       	brcs	.+10     	; 0x22a6 <__ltsf2+0x56>
    229c:	c7 01       	movw	r24, r14
    229e:	b8 01       	movw	r22, r16
    22a0:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__fpcmp_parts_f>
    22a4:	01 c0       	rjmp	.+2      	; 0x22a8 <__ltsf2+0x58>
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	68 96       	adiw	r28, 0x18	; 24
    22aa:	e6 e0       	ldi	r30, 0x06	; 6
    22ac:	0c 94 92 49 	jmp	0x9324	; 0x9324 <__epilogue_restores__+0x18>

000022b0 <__fixsfsi>:
    22b0:	ac e0       	ldi	r26, 0x0C	; 12
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	ee e5       	ldi	r30, 0x5E	; 94
    22b6:	f1 e1       	ldi	r31, 0x11	; 17
    22b8:	0c 94 7a 49 	jmp	0x92f4	; 0x92f4 <__prologue_saves__+0x20>
    22bc:	69 83       	std	Y+1, r22	; 0x01
    22be:	7a 83       	std	Y+2, r23	; 0x02
    22c0:	8b 83       	std	Y+3, r24	; 0x03
    22c2:	9c 83       	std	Y+4, r25	; 0x04
    22c4:	ce 01       	movw	r24, r28
    22c6:	01 96       	adiw	r24, 0x01	; 1
    22c8:	be 01       	movw	r22, r28
    22ca:	6b 5f       	subi	r22, 0xFB	; 251
    22cc:	7f 4f       	sbci	r23, 0xFF	; 255
    22ce:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    22d2:	8d 81       	ldd	r24, Y+5	; 0x05
    22d4:	82 30       	cpi	r24, 0x02	; 2
    22d6:	61 f1       	breq	.+88     	; 0x2330 <__fixsfsi+0x80>
    22d8:	82 30       	cpi	r24, 0x02	; 2
    22da:	50 f1       	brcs	.+84     	; 0x2330 <__fixsfsi+0x80>
    22dc:	84 30       	cpi	r24, 0x04	; 4
    22de:	21 f4       	brne	.+8      	; 0x22e8 <__fixsfsi+0x38>
    22e0:	8e 81       	ldd	r24, Y+6	; 0x06
    22e2:	88 23       	and	r24, r24
    22e4:	51 f1       	breq	.+84     	; 0x233a <__fixsfsi+0x8a>
    22e6:	2e c0       	rjmp	.+92     	; 0x2344 <__fixsfsi+0x94>
    22e8:	2f 81       	ldd	r18, Y+7	; 0x07
    22ea:	38 85       	ldd	r19, Y+8	; 0x08
    22ec:	37 fd       	sbrc	r19, 7
    22ee:	20 c0       	rjmp	.+64     	; 0x2330 <__fixsfsi+0x80>
    22f0:	6e 81       	ldd	r22, Y+6	; 0x06
    22f2:	2f 31       	cpi	r18, 0x1F	; 31
    22f4:	31 05       	cpc	r19, r1
    22f6:	1c f0       	brlt	.+6      	; 0x22fe <__fixsfsi+0x4e>
    22f8:	66 23       	and	r22, r22
    22fa:	f9 f0       	breq	.+62     	; 0x233a <__fixsfsi+0x8a>
    22fc:	23 c0       	rjmp	.+70     	; 0x2344 <__fixsfsi+0x94>
    22fe:	8e e1       	ldi	r24, 0x1E	; 30
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	82 1b       	sub	r24, r18
    2304:	93 0b       	sbc	r25, r19
    2306:	29 85       	ldd	r18, Y+9	; 0x09
    2308:	3a 85       	ldd	r19, Y+10	; 0x0a
    230a:	4b 85       	ldd	r20, Y+11	; 0x0b
    230c:	5c 85       	ldd	r21, Y+12	; 0x0c
    230e:	04 c0       	rjmp	.+8      	; 0x2318 <__fixsfsi+0x68>
    2310:	56 95       	lsr	r21
    2312:	47 95       	ror	r20
    2314:	37 95       	ror	r19
    2316:	27 95       	ror	r18
    2318:	8a 95       	dec	r24
    231a:	d2 f7       	brpl	.-12     	; 0x2310 <__fixsfsi+0x60>
    231c:	66 23       	and	r22, r22
    231e:	b1 f0       	breq	.+44     	; 0x234c <__fixsfsi+0x9c>
    2320:	50 95       	com	r21
    2322:	40 95       	com	r20
    2324:	30 95       	com	r19
    2326:	21 95       	neg	r18
    2328:	3f 4f       	sbci	r19, 0xFF	; 255
    232a:	4f 4f       	sbci	r20, 0xFF	; 255
    232c:	5f 4f       	sbci	r21, 0xFF	; 255
    232e:	0e c0       	rjmp	.+28     	; 0x234c <__fixsfsi+0x9c>
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e0       	ldi	r20, 0x00	; 0
    2336:	50 e0       	ldi	r21, 0x00	; 0
    2338:	09 c0       	rjmp	.+18     	; 0x234c <__fixsfsi+0x9c>
    233a:	2f ef       	ldi	r18, 0xFF	; 255
    233c:	3f ef       	ldi	r19, 0xFF	; 255
    233e:	4f ef       	ldi	r20, 0xFF	; 255
    2340:	5f e7       	ldi	r21, 0x7F	; 127
    2342:	04 c0       	rjmp	.+8      	; 0x234c <__fixsfsi+0x9c>
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e0       	ldi	r20, 0x00	; 0
    234a:	50 e8       	ldi	r21, 0x80	; 128
    234c:	b9 01       	movw	r22, r18
    234e:	ca 01       	movw	r24, r20
    2350:	2c 96       	adiw	r28, 0x0c	; 12
    2352:	e2 e0       	ldi	r30, 0x02	; 2
    2354:	0c 94 96 49 	jmp	0x932c	; 0x932c <__epilogue_restores__+0x20>

00002358 <__pack_f>:
    2358:	df 92       	push	r13
    235a:	ef 92       	push	r14
    235c:	ff 92       	push	r15
    235e:	0f 93       	push	r16
    2360:	1f 93       	push	r17
    2362:	fc 01       	movw	r30, r24
    2364:	e4 80       	ldd	r14, Z+4	; 0x04
    2366:	f5 80       	ldd	r15, Z+5	; 0x05
    2368:	06 81       	ldd	r16, Z+6	; 0x06
    236a:	17 81       	ldd	r17, Z+7	; 0x07
    236c:	d1 80       	ldd	r13, Z+1	; 0x01
    236e:	80 81       	ld	r24, Z
    2370:	82 30       	cpi	r24, 0x02	; 2
    2372:	48 f4       	brcc	.+18     	; 0x2386 <__pack_f+0x2e>
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	a0 e1       	ldi	r26, 0x10	; 16
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	e8 2a       	or	r14, r24
    237e:	f9 2a       	or	r15, r25
    2380:	0a 2b       	or	r16, r26
    2382:	1b 2b       	or	r17, r27
    2384:	a5 c0       	rjmp	.+330    	; 0x24d0 <__pack_f+0x178>
    2386:	84 30       	cpi	r24, 0x04	; 4
    2388:	09 f4       	brne	.+2      	; 0x238c <__pack_f+0x34>
    238a:	9f c0       	rjmp	.+318    	; 0x24ca <__pack_f+0x172>
    238c:	82 30       	cpi	r24, 0x02	; 2
    238e:	21 f4       	brne	.+8      	; 0x2398 <__pack_f+0x40>
    2390:	ee 24       	eor	r14, r14
    2392:	ff 24       	eor	r15, r15
    2394:	87 01       	movw	r16, r14
    2396:	05 c0       	rjmp	.+10     	; 0x23a2 <__pack_f+0x4a>
    2398:	e1 14       	cp	r14, r1
    239a:	f1 04       	cpc	r15, r1
    239c:	01 05       	cpc	r16, r1
    239e:	11 05       	cpc	r17, r1
    23a0:	19 f4       	brne	.+6      	; 0x23a8 <__pack_f+0x50>
    23a2:	e0 e0       	ldi	r30, 0x00	; 0
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	96 c0       	rjmp	.+300    	; 0x24d4 <__pack_f+0x17c>
    23a8:	62 81       	ldd	r22, Z+2	; 0x02
    23aa:	73 81       	ldd	r23, Z+3	; 0x03
    23ac:	9f ef       	ldi	r25, 0xFF	; 255
    23ae:	62 38       	cpi	r22, 0x82	; 130
    23b0:	79 07       	cpc	r23, r25
    23b2:	0c f0       	brlt	.+2      	; 0x23b6 <__pack_f+0x5e>
    23b4:	5b c0       	rjmp	.+182    	; 0x246c <__pack_f+0x114>
    23b6:	22 e8       	ldi	r18, 0x82	; 130
    23b8:	3f ef       	ldi	r19, 0xFF	; 255
    23ba:	26 1b       	sub	r18, r22
    23bc:	37 0b       	sbc	r19, r23
    23be:	2a 31       	cpi	r18, 0x1A	; 26
    23c0:	31 05       	cpc	r19, r1
    23c2:	2c f0       	brlt	.+10     	; 0x23ce <__pack_f+0x76>
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	50 e0       	ldi	r21, 0x00	; 0
    23cc:	2a c0       	rjmp	.+84     	; 0x2422 <__pack_f+0xca>
    23ce:	b8 01       	movw	r22, r16
    23d0:	a7 01       	movw	r20, r14
    23d2:	02 2e       	mov	r0, r18
    23d4:	04 c0       	rjmp	.+8      	; 0x23de <__pack_f+0x86>
    23d6:	76 95       	lsr	r23
    23d8:	67 95       	ror	r22
    23da:	57 95       	ror	r21
    23dc:	47 95       	ror	r20
    23de:	0a 94       	dec	r0
    23e0:	d2 f7       	brpl	.-12     	; 0x23d6 <__pack_f+0x7e>
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	a0 e0       	ldi	r26, 0x00	; 0
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	04 c0       	rjmp	.+8      	; 0x23f4 <__pack_f+0x9c>
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	aa 1f       	adc	r26, r26
    23f2:	bb 1f       	adc	r27, r27
    23f4:	2a 95       	dec	r18
    23f6:	d2 f7       	brpl	.-12     	; 0x23ec <__pack_f+0x94>
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	a1 09       	sbc	r26, r1
    23fc:	b1 09       	sbc	r27, r1
    23fe:	8e 21       	and	r24, r14
    2400:	9f 21       	and	r25, r15
    2402:	a0 23       	and	r26, r16
    2404:	b1 23       	and	r27, r17
    2406:	00 97       	sbiw	r24, 0x00	; 0
    2408:	a1 05       	cpc	r26, r1
    240a:	b1 05       	cpc	r27, r1
    240c:	21 f0       	breq	.+8      	; 0x2416 <__pack_f+0xbe>
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	a0 e0       	ldi	r26, 0x00	; 0
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	9a 01       	movw	r18, r20
    2418:	ab 01       	movw	r20, r22
    241a:	28 2b       	or	r18, r24
    241c:	39 2b       	or	r19, r25
    241e:	4a 2b       	or	r20, r26
    2420:	5b 2b       	or	r21, r27
    2422:	da 01       	movw	r26, r20
    2424:	c9 01       	movw	r24, r18
    2426:	8f 77       	andi	r24, 0x7F	; 127
    2428:	90 70       	andi	r25, 0x00	; 0
    242a:	a0 70       	andi	r26, 0x00	; 0
    242c:	b0 70       	andi	r27, 0x00	; 0
    242e:	80 34       	cpi	r24, 0x40	; 64
    2430:	91 05       	cpc	r25, r1
    2432:	a1 05       	cpc	r26, r1
    2434:	b1 05       	cpc	r27, r1
    2436:	39 f4       	brne	.+14     	; 0x2446 <__pack_f+0xee>
    2438:	27 ff       	sbrs	r18, 7
    243a:	09 c0       	rjmp	.+18     	; 0x244e <__pack_f+0xf6>
    243c:	20 5c       	subi	r18, 0xC0	; 192
    243e:	3f 4f       	sbci	r19, 0xFF	; 255
    2440:	4f 4f       	sbci	r20, 0xFF	; 255
    2442:	5f 4f       	sbci	r21, 0xFF	; 255
    2444:	04 c0       	rjmp	.+8      	; 0x244e <__pack_f+0xf6>
    2446:	21 5c       	subi	r18, 0xC1	; 193
    2448:	3f 4f       	sbci	r19, 0xFF	; 255
    244a:	4f 4f       	sbci	r20, 0xFF	; 255
    244c:	5f 4f       	sbci	r21, 0xFF	; 255
    244e:	e0 e0       	ldi	r30, 0x00	; 0
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	20 30       	cpi	r18, 0x00	; 0
    2454:	a0 e0       	ldi	r26, 0x00	; 0
    2456:	3a 07       	cpc	r19, r26
    2458:	a0 e0       	ldi	r26, 0x00	; 0
    245a:	4a 07       	cpc	r20, r26
    245c:	a0 e4       	ldi	r26, 0x40	; 64
    245e:	5a 07       	cpc	r21, r26
    2460:	10 f0       	brcs	.+4      	; 0x2466 <__pack_f+0x10e>
    2462:	e1 e0       	ldi	r30, 0x01	; 1
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	79 01       	movw	r14, r18
    2468:	8a 01       	movw	r16, r20
    246a:	27 c0       	rjmp	.+78     	; 0x24ba <__pack_f+0x162>
    246c:	60 38       	cpi	r22, 0x80	; 128
    246e:	71 05       	cpc	r23, r1
    2470:	64 f5       	brge	.+88     	; 0x24ca <__pack_f+0x172>
    2472:	fb 01       	movw	r30, r22
    2474:	e1 58       	subi	r30, 0x81	; 129
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	d8 01       	movw	r26, r16
    247a:	c7 01       	movw	r24, r14
    247c:	8f 77       	andi	r24, 0x7F	; 127
    247e:	90 70       	andi	r25, 0x00	; 0
    2480:	a0 70       	andi	r26, 0x00	; 0
    2482:	b0 70       	andi	r27, 0x00	; 0
    2484:	80 34       	cpi	r24, 0x40	; 64
    2486:	91 05       	cpc	r25, r1
    2488:	a1 05       	cpc	r26, r1
    248a:	b1 05       	cpc	r27, r1
    248c:	39 f4       	brne	.+14     	; 0x249c <__pack_f+0x144>
    248e:	e7 fe       	sbrs	r14, 7
    2490:	0d c0       	rjmp	.+26     	; 0x24ac <__pack_f+0x154>
    2492:	80 e4       	ldi	r24, 0x40	; 64
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	a0 e0       	ldi	r26, 0x00	; 0
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	04 c0       	rjmp	.+8      	; 0x24a4 <__pack_f+0x14c>
    249c:	8f e3       	ldi	r24, 0x3F	; 63
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	a0 e0       	ldi	r26, 0x00	; 0
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	e8 0e       	add	r14, r24
    24a6:	f9 1e       	adc	r15, r25
    24a8:	0a 1f       	adc	r16, r26
    24aa:	1b 1f       	adc	r17, r27
    24ac:	17 ff       	sbrs	r17, 7
    24ae:	05 c0       	rjmp	.+10     	; 0x24ba <__pack_f+0x162>
    24b0:	16 95       	lsr	r17
    24b2:	07 95       	ror	r16
    24b4:	f7 94       	ror	r15
    24b6:	e7 94       	ror	r14
    24b8:	31 96       	adiw	r30, 0x01	; 1
    24ba:	87 e0       	ldi	r24, 0x07	; 7
    24bc:	16 95       	lsr	r17
    24be:	07 95       	ror	r16
    24c0:	f7 94       	ror	r15
    24c2:	e7 94       	ror	r14
    24c4:	8a 95       	dec	r24
    24c6:	d1 f7       	brne	.-12     	; 0x24bc <__pack_f+0x164>
    24c8:	05 c0       	rjmp	.+10     	; 0x24d4 <__pack_f+0x17c>
    24ca:	ee 24       	eor	r14, r14
    24cc:	ff 24       	eor	r15, r15
    24ce:	87 01       	movw	r16, r14
    24d0:	ef ef       	ldi	r30, 0xFF	; 255
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	6e 2f       	mov	r22, r30
    24d6:	67 95       	ror	r22
    24d8:	66 27       	eor	r22, r22
    24da:	67 95       	ror	r22
    24dc:	90 2f       	mov	r25, r16
    24de:	9f 77       	andi	r25, 0x7F	; 127
    24e0:	d7 94       	ror	r13
    24e2:	dd 24       	eor	r13, r13
    24e4:	d7 94       	ror	r13
    24e6:	8e 2f       	mov	r24, r30
    24e8:	86 95       	lsr	r24
    24ea:	49 2f       	mov	r20, r25
    24ec:	46 2b       	or	r20, r22
    24ee:	58 2f       	mov	r21, r24
    24f0:	5d 29       	or	r21, r13
    24f2:	b7 01       	movw	r22, r14
    24f4:	ca 01       	movw	r24, r20
    24f6:	1f 91       	pop	r17
    24f8:	0f 91       	pop	r16
    24fa:	ff 90       	pop	r15
    24fc:	ef 90       	pop	r14
    24fe:	df 90       	pop	r13
    2500:	08 95       	ret

00002502 <__unpack_f>:
    2502:	fc 01       	movw	r30, r24
    2504:	db 01       	movw	r26, r22
    2506:	40 81       	ld	r20, Z
    2508:	51 81       	ldd	r21, Z+1	; 0x01
    250a:	22 81       	ldd	r18, Z+2	; 0x02
    250c:	62 2f       	mov	r22, r18
    250e:	6f 77       	andi	r22, 0x7F	; 127
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	22 1f       	adc	r18, r18
    2514:	22 27       	eor	r18, r18
    2516:	22 1f       	adc	r18, r18
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	89 2f       	mov	r24, r25
    251c:	88 0f       	add	r24, r24
    251e:	82 2b       	or	r24, r18
    2520:	28 2f       	mov	r18, r24
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	99 1f       	adc	r25, r25
    2526:	99 27       	eor	r25, r25
    2528:	99 1f       	adc	r25, r25
    252a:	11 96       	adiw	r26, 0x01	; 1
    252c:	9c 93       	st	X, r25
    252e:	11 97       	sbiw	r26, 0x01	; 1
    2530:	21 15       	cp	r18, r1
    2532:	31 05       	cpc	r19, r1
    2534:	a9 f5       	brne	.+106    	; 0x25a0 <__unpack_f+0x9e>
    2536:	41 15       	cp	r20, r1
    2538:	51 05       	cpc	r21, r1
    253a:	61 05       	cpc	r22, r1
    253c:	71 05       	cpc	r23, r1
    253e:	11 f4       	brne	.+4      	; 0x2544 <__unpack_f+0x42>
    2540:	82 e0       	ldi	r24, 0x02	; 2
    2542:	37 c0       	rjmp	.+110    	; 0x25b2 <__unpack_f+0xb0>
    2544:	82 e8       	ldi	r24, 0x82	; 130
    2546:	9f ef       	ldi	r25, 0xFF	; 255
    2548:	13 96       	adiw	r26, 0x03	; 3
    254a:	9c 93       	st	X, r25
    254c:	8e 93       	st	-X, r24
    254e:	12 97       	sbiw	r26, 0x02	; 2
    2550:	9a 01       	movw	r18, r20
    2552:	ab 01       	movw	r20, r22
    2554:	67 e0       	ldi	r22, 0x07	; 7
    2556:	22 0f       	add	r18, r18
    2558:	33 1f       	adc	r19, r19
    255a:	44 1f       	adc	r20, r20
    255c:	55 1f       	adc	r21, r21
    255e:	6a 95       	dec	r22
    2560:	d1 f7       	brne	.-12     	; 0x2556 <__unpack_f+0x54>
    2562:	83 e0       	ldi	r24, 0x03	; 3
    2564:	8c 93       	st	X, r24
    2566:	0d c0       	rjmp	.+26     	; 0x2582 <__unpack_f+0x80>
    2568:	22 0f       	add	r18, r18
    256a:	33 1f       	adc	r19, r19
    256c:	44 1f       	adc	r20, r20
    256e:	55 1f       	adc	r21, r21
    2570:	12 96       	adiw	r26, 0x02	; 2
    2572:	8d 91       	ld	r24, X+
    2574:	9c 91       	ld	r25, X
    2576:	13 97       	sbiw	r26, 0x03	; 3
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	13 96       	adiw	r26, 0x03	; 3
    257c:	9c 93       	st	X, r25
    257e:	8e 93       	st	-X, r24
    2580:	12 97       	sbiw	r26, 0x02	; 2
    2582:	20 30       	cpi	r18, 0x00	; 0
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	38 07       	cpc	r19, r24
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	48 07       	cpc	r20, r24
    258c:	80 e4       	ldi	r24, 0x40	; 64
    258e:	58 07       	cpc	r21, r24
    2590:	58 f3       	brcs	.-42     	; 0x2568 <__unpack_f+0x66>
    2592:	14 96       	adiw	r26, 0x04	; 4
    2594:	2d 93       	st	X+, r18
    2596:	3d 93       	st	X+, r19
    2598:	4d 93       	st	X+, r20
    259a:	5c 93       	st	X, r21
    259c:	17 97       	sbiw	r26, 0x07	; 7
    259e:	08 95       	ret
    25a0:	2f 3f       	cpi	r18, 0xFF	; 255
    25a2:	31 05       	cpc	r19, r1
    25a4:	79 f4       	brne	.+30     	; 0x25c4 <__unpack_f+0xc2>
    25a6:	41 15       	cp	r20, r1
    25a8:	51 05       	cpc	r21, r1
    25aa:	61 05       	cpc	r22, r1
    25ac:	71 05       	cpc	r23, r1
    25ae:	19 f4       	brne	.+6      	; 0x25b6 <__unpack_f+0xb4>
    25b0:	84 e0       	ldi	r24, 0x04	; 4
    25b2:	8c 93       	st	X, r24
    25b4:	08 95       	ret
    25b6:	64 ff       	sbrs	r22, 4
    25b8:	03 c0       	rjmp	.+6      	; 0x25c0 <__unpack_f+0xbe>
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	8c 93       	st	X, r24
    25be:	12 c0       	rjmp	.+36     	; 0x25e4 <__unpack_f+0xe2>
    25c0:	1c 92       	st	X, r1
    25c2:	10 c0       	rjmp	.+32     	; 0x25e4 <__unpack_f+0xe2>
    25c4:	2f 57       	subi	r18, 0x7F	; 127
    25c6:	30 40       	sbci	r19, 0x00	; 0
    25c8:	13 96       	adiw	r26, 0x03	; 3
    25ca:	3c 93       	st	X, r19
    25cc:	2e 93       	st	-X, r18
    25ce:	12 97       	sbiw	r26, 0x02	; 2
    25d0:	83 e0       	ldi	r24, 0x03	; 3
    25d2:	8c 93       	st	X, r24
    25d4:	87 e0       	ldi	r24, 0x07	; 7
    25d6:	44 0f       	add	r20, r20
    25d8:	55 1f       	adc	r21, r21
    25da:	66 1f       	adc	r22, r22
    25dc:	77 1f       	adc	r23, r23
    25de:	8a 95       	dec	r24
    25e0:	d1 f7       	brne	.-12     	; 0x25d6 <__unpack_f+0xd4>
    25e2:	70 64       	ori	r23, 0x40	; 64
    25e4:	14 96       	adiw	r26, 0x04	; 4
    25e6:	4d 93       	st	X+, r20
    25e8:	5d 93       	st	X+, r21
    25ea:	6d 93       	st	X+, r22
    25ec:	7c 93       	st	X, r23
    25ee:	17 97       	sbiw	r26, 0x07	; 7
    25f0:	08 95       	ret

000025f2 <__fpcmp_parts_f>:
    25f2:	1f 93       	push	r17
    25f4:	dc 01       	movw	r26, r24
    25f6:	fb 01       	movw	r30, r22
    25f8:	9c 91       	ld	r25, X
    25fa:	92 30       	cpi	r25, 0x02	; 2
    25fc:	08 f4       	brcc	.+2      	; 0x2600 <__fpcmp_parts_f+0xe>
    25fe:	47 c0       	rjmp	.+142    	; 0x268e <__fpcmp_parts_f+0x9c>
    2600:	80 81       	ld	r24, Z
    2602:	82 30       	cpi	r24, 0x02	; 2
    2604:	08 f4       	brcc	.+2      	; 0x2608 <__fpcmp_parts_f+0x16>
    2606:	43 c0       	rjmp	.+134    	; 0x268e <__fpcmp_parts_f+0x9c>
    2608:	94 30       	cpi	r25, 0x04	; 4
    260a:	51 f4       	brne	.+20     	; 0x2620 <__fpcmp_parts_f+0x2e>
    260c:	11 96       	adiw	r26, 0x01	; 1
    260e:	1c 91       	ld	r17, X
    2610:	84 30       	cpi	r24, 0x04	; 4
    2612:	99 f5       	brne	.+102    	; 0x267a <__fpcmp_parts_f+0x88>
    2614:	81 81       	ldd	r24, Z+1	; 0x01
    2616:	68 2f       	mov	r22, r24
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	61 1b       	sub	r22, r17
    261c:	71 09       	sbc	r23, r1
    261e:	3f c0       	rjmp	.+126    	; 0x269e <__fpcmp_parts_f+0xac>
    2620:	84 30       	cpi	r24, 0x04	; 4
    2622:	21 f0       	breq	.+8      	; 0x262c <__fpcmp_parts_f+0x3a>
    2624:	92 30       	cpi	r25, 0x02	; 2
    2626:	31 f4       	brne	.+12     	; 0x2634 <__fpcmp_parts_f+0x42>
    2628:	82 30       	cpi	r24, 0x02	; 2
    262a:	b9 f1       	breq	.+110    	; 0x269a <__fpcmp_parts_f+0xa8>
    262c:	81 81       	ldd	r24, Z+1	; 0x01
    262e:	88 23       	and	r24, r24
    2630:	89 f1       	breq	.+98     	; 0x2694 <__fpcmp_parts_f+0xa2>
    2632:	2d c0       	rjmp	.+90     	; 0x268e <__fpcmp_parts_f+0x9c>
    2634:	11 96       	adiw	r26, 0x01	; 1
    2636:	1c 91       	ld	r17, X
    2638:	11 97       	sbiw	r26, 0x01	; 1
    263a:	82 30       	cpi	r24, 0x02	; 2
    263c:	f1 f0       	breq	.+60     	; 0x267a <__fpcmp_parts_f+0x88>
    263e:	81 81       	ldd	r24, Z+1	; 0x01
    2640:	18 17       	cp	r17, r24
    2642:	d9 f4       	brne	.+54     	; 0x267a <__fpcmp_parts_f+0x88>
    2644:	12 96       	adiw	r26, 0x02	; 2
    2646:	2d 91       	ld	r18, X+
    2648:	3c 91       	ld	r19, X
    264a:	13 97       	sbiw	r26, 0x03	; 3
    264c:	82 81       	ldd	r24, Z+2	; 0x02
    264e:	93 81       	ldd	r25, Z+3	; 0x03
    2650:	82 17       	cp	r24, r18
    2652:	93 07       	cpc	r25, r19
    2654:	94 f0       	brlt	.+36     	; 0x267a <__fpcmp_parts_f+0x88>
    2656:	28 17       	cp	r18, r24
    2658:	39 07       	cpc	r19, r25
    265a:	bc f0       	brlt	.+46     	; 0x268a <__fpcmp_parts_f+0x98>
    265c:	14 96       	adiw	r26, 0x04	; 4
    265e:	8d 91       	ld	r24, X+
    2660:	9d 91       	ld	r25, X+
    2662:	0d 90       	ld	r0, X+
    2664:	bc 91       	ld	r27, X
    2666:	a0 2d       	mov	r26, r0
    2668:	24 81       	ldd	r18, Z+4	; 0x04
    266a:	35 81       	ldd	r19, Z+5	; 0x05
    266c:	46 81       	ldd	r20, Z+6	; 0x06
    266e:	57 81       	ldd	r21, Z+7	; 0x07
    2670:	28 17       	cp	r18, r24
    2672:	39 07       	cpc	r19, r25
    2674:	4a 07       	cpc	r20, r26
    2676:	5b 07       	cpc	r21, r27
    2678:	18 f4       	brcc	.+6      	; 0x2680 <__fpcmp_parts_f+0x8e>
    267a:	11 23       	and	r17, r17
    267c:	41 f0       	breq	.+16     	; 0x268e <__fpcmp_parts_f+0x9c>
    267e:	0a c0       	rjmp	.+20     	; 0x2694 <__fpcmp_parts_f+0xa2>
    2680:	82 17       	cp	r24, r18
    2682:	93 07       	cpc	r25, r19
    2684:	a4 07       	cpc	r26, r20
    2686:	b5 07       	cpc	r27, r21
    2688:	40 f4       	brcc	.+16     	; 0x269a <__fpcmp_parts_f+0xa8>
    268a:	11 23       	and	r17, r17
    268c:	19 f0       	breq	.+6      	; 0x2694 <__fpcmp_parts_f+0xa2>
    268e:	61 e0       	ldi	r22, 0x01	; 1
    2690:	70 e0       	ldi	r23, 0x00	; 0
    2692:	05 c0       	rjmp	.+10     	; 0x269e <__fpcmp_parts_f+0xac>
    2694:	6f ef       	ldi	r22, 0xFF	; 255
    2696:	7f ef       	ldi	r23, 0xFF	; 255
    2698:	02 c0       	rjmp	.+4      	; 0x269e <__fpcmp_parts_f+0xac>
    269a:	60 e0       	ldi	r22, 0x00	; 0
    269c:	70 e0       	ldi	r23, 0x00	; 0
    269e:	cb 01       	movw	r24, r22
    26a0:	1f 91       	pop	r17
    26a2:	08 95       	ret

000026a4 <Uart_Init>:
static void (*Ptr_To_Trans_Int) (void);
static void (*Ptr_To_Rece_Int) (void);

/*****************initialization **********************************/
void Uart_Init(BITS_config_T datlength,Parity_config_T paritytype,Stop_config_T stopnumber)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <Uart_Init+0x6>
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <Uart_Init+0x8>
    26ac:	0f 92       	push	r0
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	8b 83       	std	Y+3, r24	; 0x03
    26b4:	6c 83       	std	Y+4, r22	; 0x04
    26b6:	4d 83       	std	Y+5, r20	; 0x05
	uint16 baud;
	//TO WORK IN DOUBLE SPEED DIVIDE BY 8
	baud = F_CPU /((uint32)Baud_rate * division_factor_for_speed);
    26b8:	88 e6       	ldi	r24, 0x68	; 104
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	9a 83       	std	Y+2, r25	; 0x02
    26be:	89 83       	std	Y+1, r24	; 0x01
#if( UART_UNIT==UART_UNIT0)
	{
	//PUT THE BAUD RATE IN UBRR REGISTER
	UBRR0L = (uint8) baud;
    26c0:	e9 e2       	ldi	r30, 0x29	; 41
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	80 83       	st	Z, r24
	UBRR0H = (uint8) (baud >> 8);
    26c8:	e0 e9       	ldi	r30, 0x90	; 144
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	89 2f       	mov	r24, r25
    26d2:	99 27       	eor	r25, r25
    26d4:	80 83       	st	Z, r24
	//...............................
	//parity&&MASK FIRST
	UCSR0C&=(~(3<<4));
    26d6:	a5 e9       	ldi	r26, 0x95	; 149
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	e5 e9       	ldi	r30, 0x95	; 149
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	8f 7c       	andi	r24, 0xCF	; 207
    26e2:	8c 93       	st	X, r24
	UCSR0C|=(paritytype<<4);
    26e4:	a5 e9       	ldi	r26, 0x95	; 149
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	e5 e9       	ldi	r30, 0x95	; 149
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	28 2f       	mov	r18, r24
    26f0:	8c 81       	ldd	r24, Y+4	; 0x04
    26f2:	88 2f       	mov	r24, r24
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	82 95       	swap	r24
    26f8:	92 95       	swap	r25
    26fa:	90 7f       	andi	r25, 0xF0	; 240
    26fc:	98 27       	eor	r25, r24
    26fe:	80 7f       	andi	r24, 0xF0	; 240
    2700:	98 27       	eor	r25, r24
    2702:	82 2b       	or	r24, r18
    2704:	8c 93       	st	X, r24
	//...............................
	//STOP BIT
	UCSR0C&=(~(1<<3));
    2706:	a5 e9       	ldi	r26, 0x95	; 149
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	e5 e9       	ldi	r30, 0x95	; 149
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	87 7f       	andi	r24, 0xF7	; 247
    2712:	8c 93       	st	X, r24
	UCSR0C|=(stopnumber<<3);
    2714:	a5 e9       	ldi	r26, 0x95	; 149
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	e5 e9       	ldi	r30, 0x95	; 149
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	28 2f       	mov	r18, r24
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	88 2f       	mov	r24, r24
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	88 0f       	add	r24, r24
    272c:	99 1f       	adc	r25, r25
    272e:	88 0f       	add	r24, r24
    2730:	99 1f       	adc	r25, r25
    2732:	82 2b       	or	r24, r18
    2734:	8c 93       	st	X, r24
	//..................................
	//DATA SIZE
	if(datlength==7)
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	87 30       	cpi	r24, 0x07	; 7
    273a:	51 f4       	brne	.+20     	; 0x2750 <Uart_Init+0xac>
	{
		UCSR0B|=(datlength&4);
    273c:	aa e2       	ldi	r26, 0x2A	; 42
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	ea e2       	ldi	r30, 0x2A	; 42
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	98 2f       	mov	r25, r24
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	84 70       	andi	r24, 0x04	; 4
    274c:	89 2b       	or	r24, r25
    274e:	8c 93       	st	X, r24
	}
	UCSR0C|=((datlength&3)<<1);
    2750:	a5 e9       	ldi	r26, 0x95	; 149
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	e5 e9       	ldi	r30, 0x95	; 149
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	28 2f       	mov	r18, r24
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	88 2f       	mov	r24, r24
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	83 70       	andi	r24, 0x03	; 3
    2764:	90 70       	andi	r25, 0x00	; 0
    2766:	88 0f       	add	r24, r24
    2768:	99 1f       	adc	r25, r25
    276a:	82 2b       	or	r24, r18
    276c:	8c 93       	st	X, r24
#if UART_MODE==TX_ONLY
		UCSR0B|=(1<<3);
#elif UART_MODE==RX_ONLY
		UCSR0B|=(1<<4);
#elif UART_MODE== TX_RX
		UCSR0B|=((1<<4)|(1<<3));
    276e:	aa e2       	ldi	r26, 0x2A	; 42
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	ea e2       	ldi	r30, 0x2A	; 42
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	88 61       	ori	r24, 0x18	; 24
    277a:	8c 93       	st	X, r24
#if division_factor_for_speed==normal
	//normal SPEED
     UCSR0A&=(~(1<<1));
#elif division_factor_for_speed==double_speed
     //DOUBLESPEED
       UCSR0A|=(1<<1);
    277c:	ab e2       	ldi	r26, 0x2B	; 43
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	eb e2       	ldi	r30, 0x2B	; 43
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	82 60       	ori	r24, 0x02	; 2
    2788:	8c 93       	st	X, r24

	}
#endif


}
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <UART_Receiver_Int_Enable>:

/**************Interrupt functions***********************************/


void UART_Receiver_Int_Enable(void)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
#if UART_UNIT==UART_UNIT0
	SET_BIT(UCSR0B,RXCIE);
    27a2:	aa e2       	ldi	r26, 0x2A	; 42
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	ea e2       	ldi	r30, 0x2A	; 42
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	80 68       	ori	r24, 0x80	; 128
    27ae:	8c 93       	st	X, r24
#elif UART_UNIT==UART_UNIT1
	SET_BIT(UCSR1B,RXCIE);
#endif
}
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <UART_Receiver_Int_Disable>:

 void UART_Receiver_Int_Disable(void)
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
#if UART_UNIT==UART_UNIT0
	CLR_BIT(UCSR0B,RXCIE);
    27be:	aa e2       	ldi	r26, 0x2A	; 42
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	ea e2       	ldi	r30, 0x2A	; 42
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	8f 77       	andi	r24, 0x7F	; 127
    27ca:	8c 93       	st	X, r24
#elif UART_UNIT==UART_UNIT1
	CLR_BIT(UCSR1B,RXCIE);
#endif
}
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	08 95       	ret

000027d2 <UART_Transmit_Int_Enable>:

 void UART_Transmit_Int_Enable(void)
{
    27d2:	df 93       	push	r29
    27d4:	cf 93       	push	r28
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
#if UART_UNIT==UART_UNIT0
	SET_BIT(UCSR0B,TXCIE);
    27da:	aa e2       	ldi	r26, 0x2A	; 42
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	ea e2       	ldi	r30, 0x2A	; 42
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	80 64       	ori	r24, 0x40	; 64
    27e6:	8c 93       	st	X, r24
#elif UART_UNIT==UART_UNIT1
	SET_BIT(UCSR1B,TXCIE);
#endif
}
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	08 95       	ret

000027ee <UART_Transmit_Int_Disable>:

 void UART_Transmit_Int_Disable(void)
{
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
#if UART_UNIT==UART_UNIT0
	CLR_BIT(UCSR0B,TXCIE);
    27f6:	aa e2       	ldi	r26, 0x2A	; 42
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	ea e2       	ldi	r30, 0x2A	; 42
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	8f 7b       	andi	r24, 0xBF	; 191
    2802:	8c 93       	st	X, r24
#elif UART_UNIT==UART_UNIT1
	CLR_BIT(UCSR1B,TXCIE);
#endif
}
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <UART_callback_Rece_Int>:

 void UART_callback_Rece_Int(void (*Ptr_to_Func)(void))
{
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	00 d0       	rcall	.+0      	; 0x2810 <UART_callback_Rece_Int+0x6>
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
    2814:	9a 83       	std	Y+2, r25	; 0x02
    2816:	89 83       	std	Y+1, r24	; 0x01
	Ptr_To_Rece_Int = Ptr_to_Func;
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	9a 81       	ldd	r25, Y+2	; 0x02
    281c:	90 93 d5 02 	sts	0x02D5, r25
    2820:	80 93 d4 02 	sts	0x02D4, r24
}
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <UART_callback_Trans_Int>:

 void UART_callback_Trans_Int(void (*Ptr_to_Func)(void))
{
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	00 d0       	rcall	.+0      	; 0x2834 <UART_callback_Trans_Int+0x6>
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	9a 83       	std	Y+2, r25	; 0x02
    283a:	89 83       	std	Y+1, r24	; 0x01
	Ptr_To_Trans_Int = Ptr_to_Func;
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	9a 81       	ldd	r25, Y+2	; 0x02
    2840:	90 93 d3 02 	sts	0x02D3, r25
    2844:	80 93 d2 02 	sts	0x02D2, r24
}
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <USART_RX0C_vect>:

#if UART_UNIT==UART_UNIT0
ISR(USART_RX0C_vect)
{
    2852:	1f 92       	push	r1
    2854:	0f 92       	push	r0
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	0f 92       	push	r0
    285a:	00 90 5b 00 	lds	r0, 0x005B
    285e:	0f 92       	push	r0
    2860:	11 24       	eor	r1, r1
    2862:	2f 93       	push	r18
    2864:	3f 93       	push	r19
    2866:	4f 93       	push	r20
    2868:	5f 93       	push	r21
    286a:	6f 93       	push	r22
    286c:	7f 93       	push	r23
    286e:	8f 93       	push	r24
    2870:	9f 93       	push	r25
    2872:	af 93       	push	r26
    2874:	bf 93       	push	r27
    2876:	ef 93       	push	r30
    2878:	ff 93       	push	r31
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62

	(*Ptr_To_Rece_Int)();
    2882:	e0 91 d4 02 	lds	r30, 0x02D4
    2886:	f0 91 d5 02 	lds	r31, 0x02D5
    288a:	09 95       	icall
}
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	ff 91       	pop	r31
    2892:	ef 91       	pop	r30
    2894:	bf 91       	pop	r27
    2896:	af 91       	pop	r26
    2898:	9f 91       	pop	r25
    289a:	8f 91       	pop	r24
    289c:	7f 91       	pop	r23
    289e:	6f 91       	pop	r22
    28a0:	5f 91       	pop	r21
    28a2:	4f 91       	pop	r20
    28a4:	3f 91       	pop	r19
    28a6:	2f 91       	pop	r18
    28a8:	0f 90       	pop	r0
    28aa:	00 92 5b 00 	sts	0x005B, r0
    28ae:	0f 90       	pop	r0
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	0f 90       	pop	r0
    28b4:	1f 90       	pop	r1
    28b6:	18 95       	reti

000028b8 <USART_TX0C_vect>:
	(*Ptr_To_Rece_Int)();
}
#endif
#if UART_UNIT==UART_UNIT0
ISR(USART_TX0C_vect)
{
    28b8:	1f 92       	push	r1
    28ba:	0f 92       	push	r0
    28bc:	0f b6       	in	r0, 0x3f	; 63
    28be:	0f 92       	push	r0
    28c0:	00 90 5b 00 	lds	r0, 0x005B
    28c4:	0f 92       	push	r0
    28c6:	11 24       	eor	r1, r1
    28c8:	2f 93       	push	r18
    28ca:	3f 93       	push	r19
    28cc:	4f 93       	push	r20
    28ce:	5f 93       	push	r21
    28d0:	6f 93       	push	r22
    28d2:	7f 93       	push	r23
    28d4:	8f 93       	push	r24
    28d6:	9f 93       	push	r25
    28d8:	af 93       	push	r26
    28da:	bf 93       	push	r27
    28dc:	ef 93       	push	r30
    28de:	ff 93       	push	r31
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62

	(*Ptr_To_Trans_Int)();
    28e8:	e0 91 d2 02 	lds	r30, 0x02D2
    28ec:	f0 91 d3 02 	lds	r31, 0x02D3
    28f0:	09 95       	icall
}
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	ff 91       	pop	r31
    28f8:	ef 91       	pop	r30
    28fa:	bf 91       	pop	r27
    28fc:	af 91       	pop	r26
    28fe:	9f 91       	pop	r25
    2900:	8f 91       	pop	r24
    2902:	7f 91       	pop	r23
    2904:	6f 91       	pop	r22
    2906:	5f 91       	pop	r21
    2908:	4f 91       	pop	r20
    290a:	3f 91       	pop	r19
    290c:	2f 91       	pop	r18
    290e:	0f 90       	pop	r0
    2910:	00 92 5b 00 	sts	0x005B, r0
    2914:	0f 90       	pop	r0
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	0f 90       	pop	r0
    291a:	1f 90       	pop	r1
    291c:	18 95       	reti

0000291e <UART_SendByte>:
#endif

/****************************************Send and receive functions with no ckecking********************************/

void UART_SendByte(const uint8 data)
{
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	0f 92       	push	r0
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	89 83       	std	Y+1, r24	; 0x01

#if UART_UNIT==UART_UNIT0
	UDR0 = data;
    292a:	ec e2       	ldi	r30, 0x2C	; 44
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	80 83       	st	Z, r24
#elif UART_UNIT==UART_UNIT1
	UDR1 = data;
#endif

}
    2932:	0f 90       	pop	r0
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	08 95       	ret

0000293a <UART_RecieveByte>:

uint8 UART_RecieveByte(void)
{
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	0f 92       	push	r0
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
	uint8 ret=0;
    2944:	19 82       	std	Y+1, r1	; 0x01
#if UART_UNIT==UART_UNIT0
	ret=UDR0;
    2946:	ec e2       	ldi	r30, 0x2C	; 44
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	89 83       	std	Y+1, r24	; 0x01
#elif UART_UNIT==UART_UNIT1
	ret=UDR1;
#endif
    return ret;
    294e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2950:	0f 90       	pop	r0
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	08 95       	ret

00002958 <UART_SendData>:
/****************************************Send and receive functions with polling     ********************************/
void UART_SendData(const uint8 data)
{
    2958:	df 93       	push	r29
    295a:	cf 93       	push	r28
    295c:	0f 92       	push	r0
    295e:	cd b7       	in	r28, 0x3d	; 61
    2960:	de b7       	in	r29, 0x3e	; 62
    2962:	89 83       	std	Y+1, r24	; 0x01
#if UART_UNIT==UART_UNIT0
 while(!(GET_BIT(UCSR0A,UDRE)));  //UDRE flag is set when the buffer is empty and ready for transmitting a new byte so wait until this flag is set to one.
    2964:	eb e2       	ldi	r30, 0x2B	; 43
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	82 95       	swap	r24
    296c:	86 95       	lsr	r24
    296e:	87 70       	andi	r24, 0x07	; 7
    2970:	88 2f       	mov	r24, r24
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	81 70       	andi	r24, 0x01	; 1
    2976:	90 70       	andi	r25, 0x00	; 0
    2978:	00 97       	sbiw	r24, 0x00	; 0
    297a:	a1 f3       	breq	.-24     	; 0x2964 <UART_SendData+0xc>
		UDR0 = data;
    297c:	ec e2       	ldi	r30, 0x2C	; 44
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	80 83       	st	Z, r24
#elif UART_UNIT==UART_UNIT1
 while(!(GET_BIT(UCSR0A,UDRE)));  //UDRE flag is set when the buffer is empty and ready for transmitting a new byte so wait until this flag is set to one.
		UDR1 = data;
#endif

}
    2984:	0f 90       	pop	r0
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	08 95       	ret

0000298c <UART_RecieveData>:

uint8 UART_RecieveData(void)
{
    298c:	df 93       	push	r29
    298e:	cf 93       	push	r28
    2990:	0f 92       	push	r0
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
	uint8 ret=0;
    2996:	19 82       	std	Y+1, r1	; 0x01
	#if UART_UNIT==UART_UNIT0
	while(!(GET_BIT(UCSR0A,RXC)));  //RXC flag is set when the UART receive data so until this flag is set to one
    2998:	eb e2       	ldi	r30, 0x2B	; 43
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	88 23       	and	r24, r24
    29a0:	dc f7       	brge	.-10     	; 0x2998 <UART_RecieveData+0xc>
	 ret=UDR0;
    29a2:	ec e2       	ldi	r30, 0x2C	; 44
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	89 83       	std	Y+1, r24	; 0x01
    #elif UART_UNIT==UART_UNIT1
	 while(!(GET_BIT(UCSR1A,RXC)));  //RXC flag is set when the UART receive data so until this flag is set to one
	 	 ret=UDR1;
#endif
	 	 return ret;
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    29ac:	0f 90       	pop	r0
    29ae:	cf 91       	pop	r28
    29b0:	df 91       	pop	r29
    29b2:	08 95       	ret

000029b4 <UART_RecieveData_NoBlock>:


//hyfedny b eh el statue
uint8 UART_RecieveData_NoBlock(uint8*pdata)
{
    29b4:	df 93       	push	r29
    29b6:	cf 93       	push	r28
    29b8:	00 d0       	rcall	.+0      	; 0x29ba <UART_RecieveData_NoBlock+0x6>
    29ba:	0f 92       	push	r0
    29bc:	cd b7       	in	r28, 0x3d	; 61
    29be:	de b7       	in	r29, 0x3e	; 62
    29c0:	9b 83       	std	Y+3, r25	; 0x03
    29c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 statue=0;
    29c4:	19 82       	std	Y+1, r1	; 0x01
#if UART_UNIT==UART_UNIT0
	if(GET_BIT(UCSR0A,RXC))
    29c6:	eb e2       	ldi	r30, 0x2B	; 43
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	88 23       	and	r24, r24
    29ce:	4c f4       	brge	.+18     	; 0x29e2 <UART_RecieveData_NoBlock+0x2e>
	{
		*pdata=UDR0;
    29d0:	ec e2       	ldi	r30, 0x2C	; 44
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	ea 81       	ldd	r30, Y+2	; 0x02
    29d8:	fb 81       	ldd	r31, Y+3	; 0x03
    29da:	80 83       	st	Z, r24

		statue=1;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	01 c0       	rjmp	.+2      	; 0x29e4 <UART_RecieveData_NoBlock+0x30>

	}
	else
	{	statue=0;
    29e2:	19 82       	std	Y+1, r1	; 0x01
		}
		else
		{	statue=0;
		}
#endif
return statue;
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <Timer3_Init>:
#include"Timer3.h"
void Timer3_Init(timer3_mode_type timer_mode,prescaler3_type scaler,OC3_mode_type oc3_mode,OC3_ch_type channel_t)
{
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	2c 97       	sbiw	r28, 0x0c	; 12
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	f8 94       	cli
    2a00:	de bf       	out	0x3e, r29	; 62
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	cd bf       	out	0x3d, r28	; 61
    2a06:	89 83       	std	Y+1, r24	; 0x01
    2a08:	6a 83       	std	Y+2, r22	; 0x02
    2a0a:	4b 83       	std	Y+3, r20	; 0x03
    2a0c:	2c 83       	std	Y+4, r18	; 0x04
switch (timer_mode)
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	28 2f       	mov	r18, r24
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	3c 87       	std	Y+12, r19	; 0x0c
    2a16:	2b 87       	std	Y+11, r18	; 0x0b
    2a18:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a1c:	87 30       	cpi	r24, 0x07	; 7
    2a1e:	91 05       	cpc	r25, r1
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <Timer3_Init+0x32>
    2a22:	24 c1       	rjmp	.+584    	; 0x2c6c <Timer3_Init+0x27a>
    2a24:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a26:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a28:	28 30       	cpi	r18, 0x08	; 8
    2a2a:	31 05       	cpc	r19, r1
    2a2c:	4c f5       	brge	.+82     	; 0x2a80 <Timer3_Init+0x8e>
    2a2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a30:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a32:	83 30       	cpi	r24, 0x03	; 3
    2a34:	91 05       	cpc	r25, r1
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <Timer3_Init+0x48>
    2a38:	a5 c0       	rjmp	.+330    	; 0x2b84 <Timer3_Init+0x192>
    2a3a:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a3c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a3e:	24 30       	cpi	r18, 0x04	; 4
    2a40:	31 05       	cpc	r19, r1
    2a42:	8c f4       	brge	.+34     	; 0x2a66 <Timer3_Init+0x74>
    2a44:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a46:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a48:	81 30       	cpi	r24, 0x01	; 1
    2a4a:	91 05       	cpc	r25, r1
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <Timer3_Init+0x5e>
    2a4e:	60 c0       	rjmp	.+192    	; 0x2b10 <Timer3_Init+0x11e>
    2a50:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a52:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a54:	22 30       	cpi	r18, 0x02	; 2
    2a56:	31 05       	cpc	r19, r1
    2a58:	0c f0       	brlt	.+2      	; 0x2a5c <Timer3_Init+0x6a>
    2a5a:	77 c0       	rjmp	.+238    	; 0x2b4a <Timer3_Init+0x158>
    2a5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	c9 f1       	breq	.+114    	; 0x2ad6 <Timer3_Init+0xe4>
    2a64:	ea c1       	rjmp	.+980    	; 0x2e3a <Timer3_Init+0x448>
    2a66:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a68:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a6a:	25 30       	cpi	r18, 0x05	; 5
    2a6c:	31 05       	cpc	r19, r1
    2a6e:	09 f4       	brne	.+2      	; 0x2a72 <Timer3_Init+0x80>
    2a70:	c3 c0       	rjmp	.+390    	; 0x2bf8 <Timer3_Init+0x206>
    2a72:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a74:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a76:	86 30       	cpi	r24, 0x06	; 6
    2a78:	91 05       	cpc	r25, r1
    2a7a:	0c f0       	brlt	.+2      	; 0x2a7e <Timer3_Init+0x8c>
    2a7c:	da c0       	rjmp	.+436    	; 0x2c32 <Timer3_Init+0x240>
    2a7e:	9f c0       	rjmp	.+318    	; 0x2bbe <Timer3_Init+0x1cc>
    2a80:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a82:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a84:	2b 30       	cpi	r18, 0x0B	; 11
    2a86:	31 05       	cpc	r19, r1
    2a88:	09 f4       	brne	.+2      	; 0x2a8c <Timer3_Init+0x9a>
    2a8a:	64 c1       	rjmp	.+712    	; 0x2d54 <Timer3_Init+0x362>
    2a8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a90:	8c 30       	cpi	r24, 0x0C	; 12
    2a92:	91 05       	cpc	r25, r1
    2a94:	6c f4       	brge	.+26     	; 0x2ab0 <Timer3_Init+0xbe>
    2a96:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a98:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a9a:	29 30       	cpi	r18, 0x09	; 9
    2a9c:	31 05       	cpc	r19, r1
    2a9e:	09 f4       	brne	.+2      	; 0x2aa2 <Timer3_Init+0xb0>
    2aa0:	1f c1       	rjmp	.+574    	; 0x2ce0 <Timer3_Init+0x2ee>
    2aa2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2aa4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2aa6:	8a 30       	cpi	r24, 0x0A	; 10
    2aa8:	91 05       	cpc	r25, r1
    2aaa:	0c f0       	brlt	.+2      	; 0x2aae <Timer3_Init+0xbc>
    2aac:	36 c1       	rjmp	.+620    	; 0x2d1a <Timer3_Init+0x328>
    2aae:	fb c0       	rjmp	.+502    	; 0x2ca6 <Timer3_Init+0x2b4>
    2ab0:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ab2:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ab4:	2d 30       	cpi	r18, 0x0D	; 13
    2ab6:	31 05       	cpc	r19, r1
    2ab8:	09 f4       	brne	.+2      	; 0x2abc <Timer3_Init+0xca>
    2aba:	86 c1       	rjmp	.+780    	; 0x2dc8 <Timer3_Init+0x3d6>
    2abc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2abe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ac0:	8d 30       	cpi	r24, 0x0D	; 13
    2ac2:	91 05       	cpc	r25, r1
    2ac4:	0c f4       	brge	.+2      	; 0x2ac8 <Timer3_Init+0xd6>
    2ac6:	63 c1       	rjmp	.+710    	; 0x2d8e <Timer3_Init+0x39c>
    2ac8:	2b 85       	ldd	r18, Y+11	; 0x0b
    2aca:	3c 85       	ldd	r19, Y+12	; 0x0c
    2acc:	2e 30       	cpi	r18, 0x0E	; 14
    2ace:	31 05       	cpc	r19, r1
    2ad0:	09 f4       	brne	.+2      	; 0x2ad4 <Timer3_Init+0xe2>
    2ad2:	97 c1       	rjmp	.+814    	; 0x2e02 <Timer3_Init+0x410>
    2ad4:	b2 c1       	rjmp	.+868    	; 0x2e3a <Timer3_Init+0x448>
 {

case timer3_Normal_mode:                          CLR_BIT(TCCR3A,WGM30);
    2ad6:	ab e8       	ldi	r26, 0x8B	; 139
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	eb e8       	ldi	r30, 0x8B	; 139
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	8e 7f       	andi	r24, 0xFE	; 254
    2ae2:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR3A,WGM31);
    2ae4:	ab e8       	ldi	r26, 0x8B	; 139
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	eb e8       	ldi	r30, 0x8B	; 139
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	8d 7f       	andi	r24, 0xFD	; 253
    2af0:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR3B,WGM32);
    2af2:	aa e8       	ldi	r26, 0x8A	; 138
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	ea e8       	ldi	r30, 0x8A	; 138
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
    2afc:	87 7f       	andi	r24, 0xF7	; 247
    2afe:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR3B,WGM33);
    2b00:	aa e8       	ldi	r26, 0x8A	; 138
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	ea e8       	ldi	r30, 0x8A	; 138
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	8f 7e       	andi	r24, 0xEF	; 239
    2b0c:	8c 93       	st	X, r24
    2b0e:	95 c1       	rjmp	.+810    	; 0x2e3a <Timer3_Init+0x448>
                                                  break;
case timer3_PWM_Phase_Correct_8bit:               SET_BIT(TCCR3A,WGM30);
    2b10:	ab e8       	ldi	r26, 0x8B	; 139
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	eb e8       	ldi	r30, 0x8B	; 139
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	81 60       	ori	r24, 0x01	; 1
    2b1c:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    2b1e:	ab e8       	ldi	r26, 0x8B	; 139
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	eb e8       	ldi	r30, 0x8B	; 139
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	80 81       	ld	r24, Z
    2b28:	8d 7f       	andi	r24, 0xFD	; 253
    2b2a:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2b2c:	aa e8       	ldi	r26, 0x8A	; 138
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	ea e8       	ldi	r30, 0x8A	; 138
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	80 81       	ld	r24, Z
    2b36:	87 7f       	andi	r24, 0xF7	; 247
    2b38:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    2b3a:	aa e8       	ldi	r26, 0x8A	; 138
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	ea e8       	ldi	r30, 0x8A	; 138
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	8f 7e       	andi	r24, 0xEF	; 239
    2b46:	8c 93       	st	X, r24
    2b48:	78 c1       	rjmp	.+752    	; 0x2e3a <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_Correct_9bit:               CLR_BIT(TCCR3A,WGM30);
    2b4a:	ab e8       	ldi	r26, 0x8B	; 139
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	eb e8       	ldi	r30, 0x8B	; 139
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	8e 7f       	andi	r24, 0xFE	; 254
    2b56:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2b58:	ab e8       	ldi	r26, 0x8B	; 139
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	eb e8       	ldi	r30, 0x8B	; 139
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	82 60       	ori	r24, 0x02	; 2
    2b64:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2b66:	aa e8       	ldi	r26, 0x8A	; 138
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	ea e8       	ldi	r30, 0x8A	; 138
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	87 7f       	andi	r24, 0xF7	; 247
    2b72:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    2b74:	aa e8       	ldi	r26, 0x8A	; 138
    2b76:	b0 e0       	ldi	r27, 0x00	; 0
    2b78:	ea e8       	ldi	r30, 0x8A	; 138
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	8f 7e       	andi	r24, 0xEF	; 239
    2b80:	8c 93       	st	X, r24
    2b82:	5b c1       	rjmp	.+694    	; 0x2e3a <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_Correct_10bit:              SET_BIT(TCCR3A,WGM30);
    2b84:	ab e8       	ldi	r26, 0x8B	; 139
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	eb e8       	ldi	r30, 0x8B	; 139
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	81 60       	ori	r24, 0x01	; 1
    2b90:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2b92:	ab e8       	ldi	r26, 0x8B	; 139
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	eb e8       	ldi	r30, 0x8B	; 139
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	82 60       	ori	r24, 0x02	; 2
    2b9e:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2ba0:	aa e8       	ldi	r26, 0x8A	; 138
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	ea e8       	ldi	r30, 0x8A	; 138
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	87 7f       	andi	r24, 0xF7	; 247
    2bac:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    2bae:	aa e8       	ldi	r26, 0x8A	; 138
    2bb0:	b0 e0       	ldi	r27, 0x00	; 0
    2bb2:	ea e8       	ldi	r30, 0x8A	; 138
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
    2bb8:	8f 7e       	andi	r24, 0xEF	; 239
    2bba:	8c 93       	st	X, r24
    2bbc:	3e c1       	rjmp	.+636    	; 0x2e3a <Timer3_Init+0x448>
	                                              break;
case timer3_CTC_mode_ocr_top:                     CLR_BIT(TCCR3A,WGM30);
    2bbe:	ab e8       	ldi	r26, 0x8B	; 139
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	eb e8       	ldi	r30, 0x8B	; 139
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	8e 7f       	andi	r24, 0xFE	; 254
    2bca:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    2bcc:	ab e8       	ldi	r26, 0x8B	; 139
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	eb e8       	ldi	r30, 0x8B	; 139
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	8d 7f       	andi	r24, 0xFD	; 253
    2bd8:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2bda:	aa e8       	ldi	r26, 0x8A	; 138
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	ea e8       	ldi	r30, 0x8A	; 138
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	88 60       	ori	r24, 0x08	; 8
    2be6:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    2be8:	aa e8       	ldi	r26, 0x8A	; 138
    2bea:	b0 e0       	ldi	r27, 0x00	; 0
    2bec:	ea e8       	ldi	r30, 0x8A	; 138
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	8f 7e       	andi	r24, 0xEF	; 239
    2bf4:	8c 93       	st	X, r24
    2bf6:	21 c1       	rjmp	.+578    	; 0x2e3a <Timer3_Init+0x448>
	                                              break;
case timer3_Fast_PWM_8_bit:                       SET_BIT(TCCR3A,WGM30);
    2bf8:	ab e8       	ldi	r26, 0x8B	; 139
    2bfa:	b0 e0       	ldi	r27, 0x00	; 0
    2bfc:	eb e8       	ldi	r30, 0x8B	; 139
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	81 60       	ori	r24, 0x01	; 1
    2c04:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    2c06:	ab e8       	ldi	r26, 0x8B	; 139
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	eb e8       	ldi	r30, 0x8B	; 139
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	8d 7f       	andi	r24, 0xFD	; 253
    2c12:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2c14:	aa e8       	ldi	r26, 0x8A	; 138
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	ea e8       	ldi	r30, 0x8A	; 138
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	88 60       	ori	r24, 0x08	; 8
    2c20:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    2c22:	aa e8       	ldi	r26, 0x8A	; 138
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	ea e8       	ldi	r30, 0x8A	; 138
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	8f 7e       	andi	r24, 0xEF	; 239
    2c2e:	8c 93       	st	X, r24
    2c30:	04 c1       	rjmp	.+520    	; 0x2e3a <Timer3_Init+0x448>
	                                              break;
case timer3_Fast_PWM_9_bit:                       CLR_BIT(TCCR3A,WGM30);
    2c32:	ab e8       	ldi	r26, 0x8B	; 139
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	eb e8       	ldi	r30, 0x8B	; 139
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	8e 7f       	andi	r24, 0xFE	; 254
    2c3e:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2c40:	ab e8       	ldi	r26, 0x8B	; 139
    2c42:	b0 e0       	ldi	r27, 0x00	; 0
    2c44:	eb e8       	ldi	r30, 0x8B	; 139
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	80 81       	ld	r24, Z
    2c4a:	82 60       	ori	r24, 0x02	; 2
    2c4c:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2c4e:	aa e8       	ldi	r26, 0x8A	; 138
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	ea e8       	ldi	r30, 0x8A	; 138
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	80 81       	ld	r24, Z
    2c58:	88 60       	ori	r24, 0x08	; 8
    2c5a:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    2c5c:	aa e8       	ldi	r26, 0x8A	; 138
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	ea e8       	ldi	r30, 0x8A	; 138
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	8f 7e       	andi	r24, 0xEF	; 239
    2c68:	8c 93       	st	X, r24
    2c6a:	e7 c0       	rjmp	.+462    	; 0x2e3a <Timer3_Init+0x448>
	                                              break;
case timer3_Fast_PWM_10_bit:                      SET_BIT(TCCR3A,WGM30);
    2c6c:	ab e8       	ldi	r26, 0x8B	; 139
    2c6e:	b0 e0       	ldi	r27, 0x00	; 0
    2c70:	eb e8       	ldi	r30, 0x8B	; 139
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
    2c76:	81 60       	ori	r24, 0x01	; 1
    2c78:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2c7a:	ab e8       	ldi	r26, 0x8B	; 139
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	eb e8       	ldi	r30, 0x8B	; 139
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 81       	ld	r24, Z
    2c84:	82 60       	ori	r24, 0x02	; 2
    2c86:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2c88:	aa e8       	ldi	r26, 0x8A	; 138
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	ea e8       	ldi	r30, 0x8A	; 138
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	88 60       	ori	r24, 0x08	; 8
    2c94:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    2c96:	aa e8       	ldi	r26, 0x8A	; 138
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	ea e8       	ldi	r30, 0x8A	; 138
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	8f 7e       	andi	r24, 0xEF	; 239
    2ca2:	8c 93       	st	X, r24
    2ca4:	ca c0       	rjmp	.+404    	; 0x2e3a <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_and_Freq_Correct_icr_top:   CLR_BIT(TCCR3A,WGM30);
    2ca6:	ab e8       	ldi	r26, 0x8B	; 139
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	eb e8       	ldi	r30, 0x8B	; 139
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	80 81       	ld	r24, Z
    2cb0:	8e 7f       	andi	r24, 0xFE	; 254
    2cb2:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    2cb4:	ab e8       	ldi	r26, 0x8B	; 139
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	eb e8       	ldi	r30, 0x8B	; 139
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	8d 7f       	andi	r24, 0xFD	; 253
    2cc0:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2cc2:	aa e8       	ldi	r26, 0x8A	; 138
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	ea e8       	ldi	r30, 0x8A	; 138
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	87 7f       	andi	r24, 0xF7	; 247
    2cce:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2cd0:	aa e8       	ldi	r26, 0x8A	; 138
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	ea e8       	ldi	r30, 0x8A	; 138
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	80 61       	ori	r24, 0x10	; 16
    2cdc:	8c 93       	st	X, r24
    2cde:	ad c0       	rjmp	.+346    	; 0x2e3a <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_and_Freq_Correct_ocr_top:   SET_BIT(TCCR3A,WGM30);
    2ce0:	ab e8       	ldi	r26, 0x8B	; 139
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	eb e8       	ldi	r30, 0x8B	; 139
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	80 81       	ld	r24, Z
    2cea:	81 60       	ori	r24, 0x01	; 1
    2cec:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    2cee:	ab e8       	ldi	r26, 0x8B	; 139
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	eb e8       	ldi	r30, 0x8B	; 139
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	8d 7f       	andi	r24, 0xFD	; 253
    2cfa:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2cfc:	aa e8       	ldi	r26, 0x8A	; 138
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	ea e8       	ldi	r30, 0x8A	; 138
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	87 7f       	andi	r24, 0xF7	; 247
    2d08:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2d0a:	aa e8       	ldi	r26, 0x8A	; 138
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	ea e8       	ldi	r30, 0x8A	; 138
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	80 61       	ori	r24, 0x10	; 16
    2d16:	8c 93       	st	X, r24
    2d18:	90 c0       	rjmp	.+288    	; 0x2e3a <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_Correct_icr_top:            CLR_BIT(TCCR3A,WGM30);
    2d1a:	ab e8       	ldi	r26, 0x8B	; 139
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	eb e8       	ldi	r30, 0x8B	; 139
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	8e 7f       	andi	r24, 0xFE	; 254
    2d26:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2d28:	ab e8       	ldi	r26, 0x8B	; 139
    2d2a:	b0 e0       	ldi	r27, 0x00	; 0
    2d2c:	eb e8       	ldi	r30, 0x8B	; 139
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	82 60       	ori	r24, 0x02	; 2
    2d34:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2d36:	aa e8       	ldi	r26, 0x8A	; 138
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	ea e8       	ldi	r30, 0x8A	; 138
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	87 7f       	andi	r24, 0xF7	; 247
    2d42:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2d44:	aa e8       	ldi	r26, 0x8A	; 138
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	ea e8       	ldi	r30, 0x8A	; 138
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	80 81       	ld	r24, Z
    2d4e:	80 61       	ori	r24, 0x10	; 16
    2d50:	8c 93       	st	X, r24
    2d52:	73 c0       	rjmp	.+230    	; 0x2e3a <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_Correct_ocr_top:            SET_BIT(TCCR3A,WGM30);
    2d54:	ab e8       	ldi	r26, 0x8B	; 139
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	eb e8       	ldi	r30, 0x8B	; 139
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	80 81       	ld	r24, Z
    2d5e:	81 60       	ori	r24, 0x01	; 1
    2d60:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2d62:	ab e8       	ldi	r26, 0x8B	; 139
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
    2d66:	eb e8       	ldi	r30, 0x8B	; 139
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	82 60       	ori	r24, 0x02	; 2
    2d6e:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2d70:	aa e8       	ldi	r26, 0x8A	; 138
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	ea e8       	ldi	r30, 0x8A	; 138
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 81       	ld	r24, Z
    2d7a:	87 7f       	andi	r24, 0xF7	; 247
    2d7c:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2d7e:	aa e8       	ldi	r26, 0x8A	; 138
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	ea e8       	ldi	r30, 0x8A	; 138
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	80 61       	ori	r24, 0x10	; 16
    2d8a:	8c 93       	st	X, r24
    2d8c:	56 c0       	rjmp	.+172    	; 0x2e3a <Timer3_Init+0x448>
	                                              break;
case timer3_CTC_mode_icr_top:                     CLR_BIT(TCCR3A,WGM30);
    2d8e:	ab e8       	ldi	r26, 0x8B	; 139
    2d90:	b0 e0       	ldi	r27, 0x00	; 0
    2d92:	eb e8       	ldi	r30, 0x8B	; 139
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	80 81       	ld	r24, Z
    2d98:	8e 7f       	andi	r24, 0xFE	; 254
    2d9a:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    2d9c:	ab e8       	ldi	r26, 0x8B	; 139
    2d9e:	b0 e0       	ldi	r27, 0x00	; 0
    2da0:	eb e8       	ldi	r30, 0x8B	; 139
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	8d 7f       	andi	r24, 0xFD	; 253
    2da8:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2daa:	aa e8       	ldi	r26, 0x8A	; 138
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	ea e8       	ldi	r30, 0x8A	; 138
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	88 60       	ori	r24, 0x08	; 8
    2db6:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2db8:	aa e8       	ldi	r26, 0x8A	; 138
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	ea e8       	ldi	r30, 0x8A	; 138
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	80 61       	ori	r24, 0x10	; 16
    2dc4:	8c 93       	st	X, r24
    2dc6:	39 c0       	rjmp	.+114    	; 0x2e3a <Timer3_Init+0x448>
	                                              break;
case timer3_Fast_PWM_icr_top:                     CLR_BIT(TCCR3A,WGM30);
    2dc8:	ab e8       	ldi	r26, 0x8B	; 139
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	eb e8       	ldi	r30, 0x8B	; 139
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	8e 7f       	andi	r24, 0xFE	; 254
    2dd4:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2dd6:	ab e8       	ldi	r26, 0x8B	; 139
    2dd8:	b0 e0       	ldi	r27, 0x00	; 0
    2dda:	eb e8       	ldi	r30, 0x8B	; 139
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	80 81       	ld	r24, Z
    2de0:	82 60       	ori	r24, 0x02	; 2
    2de2:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2de4:	aa e8       	ldi	r26, 0x8A	; 138
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	ea e8       	ldi	r30, 0x8A	; 138
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	88 60       	ori	r24, 0x08	; 8
    2df0:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2df2:	aa e8       	ldi	r26, 0x8A	; 138
    2df4:	b0 e0       	ldi	r27, 0x00	; 0
    2df6:	ea e8       	ldi	r30, 0x8A	; 138
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	80 81       	ld	r24, Z
    2dfc:	80 61       	ori	r24, 0x10	; 16
    2dfe:	8c 93       	st	X, r24
    2e00:	1c c0       	rjmp	.+56     	; 0x2e3a <Timer3_Init+0x448>
	                                              break;
case timer3_Fast_PWM_ocr_top:                     SET_BIT(TCCR3A,WGM30);
    2e02:	ab e8       	ldi	r26, 0x8B	; 139
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	eb e8       	ldi	r30, 0x8B	; 139
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	81 60       	ori	r24, 0x01	; 1
    2e0e:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2e10:	ab e8       	ldi	r26, 0x8B	; 139
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	eb e8       	ldi	r30, 0x8B	; 139
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	82 60       	ori	r24, 0x02	; 2
    2e1c:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2e1e:	aa e8       	ldi	r26, 0x8A	; 138
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	ea e8       	ldi	r30, 0x8A	; 138
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	88 60       	ori	r24, 0x08	; 8
    2e2a:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2e2c:	aa e8       	ldi	r26, 0x8A	; 138
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	ea e8       	ldi	r30, 0x8A	; 138
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	80 81       	ld	r24, Z
    2e36:	80 61       	ori	r24, 0x10	; 16
    2e38:	8c 93       	st	X, r24

						break;
}
#elif oc_3==fastpwm_3

switch (oc3_mode)
    2e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3c:	28 2f       	mov	r18, r24
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	3a 87       	std	Y+10, r19	; 0x0a
    2e42:	29 87       	std	Y+9, r18	; 0x09
    2e44:	89 85       	ldd	r24, Y+9	; 0x09
    2e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e48:	81 30       	cpi	r24, 0x01	; 1
    2e4a:	91 05       	cpc	r25, r1
    2e4c:	09 f4       	brne	.+2      	; 0x2e50 <Timer3_Init+0x45e>
    2e4e:	cf c0       	rjmp	.+414    	; 0x2fee <Timer3_Init+0x5fc>
    2e50:	29 85       	ldd	r18, Y+9	; 0x09
    2e52:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e54:	22 30       	cpi	r18, 0x02	; 2
    2e56:	31 05       	cpc	r19, r1
    2e58:	2c f4       	brge	.+10     	; 0x2e64 <Timer3_Init+0x472>
    2e5a:	89 85       	ldd	r24, Y+9	; 0x09
    2e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5e:	00 97       	sbiw	r24, 0x00	; 0
    2e60:	69 f0       	breq	.+26     	; 0x2e7c <Timer3_Init+0x48a>
    2e62:	c5 c0       	rjmp	.+394    	; 0x2fee <Timer3_Init+0x5fc>
    2e64:	29 85       	ldd	r18, Y+9	; 0x09
    2e66:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e68:	22 30       	cpi	r18, 0x02	; 2
    2e6a:	31 05       	cpc	r19, r1
    2e6c:	91 f1       	breq	.+100    	; 0x2ed2 <Timer3_Init+0x4e0>
    2e6e:	89 85       	ldd	r24, Y+9	; 0x09
    2e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e72:	83 30       	cpi	r24, 0x03	; 3
    2e74:	91 05       	cpc	r25, r1
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <Timer3_Init+0x488>
    2e78:	74 c0       	rjmp	.+232    	; 0x2f62 <Timer3_Init+0x570>
    2e7a:	b9 c0       	rjmp	.+370    	; 0x2fee <Timer3_Init+0x5fc>
{
case disconnected_3:CLR_BIT(TCCR3A,COM3A0);
    2e7c:	ab e8       	ldi	r26, 0x8B	; 139
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	eb e8       	ldi	r30, 0x8B	; 139
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	80 81       	ld	r24, Z
    2e86:	8f 7b       	andi	r24, 0xBF	; 191
    2e88:	8c 93       	st	X, r24
                    CLR_BIT(TCCR3A,COM3A1);
    2e8a:	ab e8       	ldi	r26, 0x8B	; 139
    2e8c:	b0 e0       	ldi	r27, 0x00	; 0
    2e8e:	eb e8       	ldi	r30, 0x8B	; 139
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	8f 77       	andi	r24, 0x7F	; 127
    2e96:	8c 93       	st	X, r24

                    CLR_BIT(TCCR3A,COM3B0);
    2e98:	ab e8       	ldi	r26, 0x8B	; 139
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	eb e8       	ldi	r30, 0x8B	; 139
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	8f 7e       	andi	r24, 0xEF	; 239
    2ea4:	8c 93       	st	X, r24
                    CLR_BIT(TCCR3A,COM3B1);
    2ea6:	ab e8       	ldi	r26, 0x8B	; 139
    2ea8:	b0 e0       	ldi	r27, 0x00	; 0
    2eaa:	eb e8       	ldi	r30, 0x8B	; 139
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	80 81       	ld	r24, Z
    2eb0:	8f 7d       	andi	r24, 0xDF	; 223
    2eb2:	8c 93       	st	X, r24

                    CLR_BIT(TCCR3A,COM3C0);
    2eb4:	ab e8       	ldi	r26, 0x8B	; 139
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	eb e8       	ldi	r30, 0x8B	; 139
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	8b 7f       	andi	r24, 0xFB	; 251
    2ec0:	8c 93       	st	X, r24
                    CLR_BIT(TCCR3A,COM3C1);
    2ec2:	ab e8       	ldi	r26, 0x8B	; 139
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	eb e8       	ldi	r30, 0x8B	; 139
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	87 7f       	andi	r24, 0xF7	; 247
    2ece:	8c 93       	st	X, r24
    2ed0:	8e c0       	rjmp	.+284    	; 0x2fee <Timer3_Init+0x5fc>
				    break;
case toggle_3:break;
case Non_inverting_clr_oc0_oncompare_set_on_bottom_3:
	switch(channel_t)
    2ed2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed4:	28 2f       	mov	r18, r24
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	38 87       	std	Y+8, r19	; 0x08
    2eda:	2f 83       	std	Y+7, r18	; 0x07
    2edc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ede:	98 85       	ldd	r25, Y+8	; 0x08
    2ee0:	81 30       	cpi	r24, 0x01	; 1
    2ee2:	91 05       	cpc	r25, r1
    2ee4:	89 f0       	breq	.+34     	; 0x2f08 <Timer3_Init+0x516>
    2ee6:	2f 81       	ldd	r18, Y+7	; 0x07
    2ee8:	38 85       	ldd	r19, Y+8	; 0x08
    2eea:	22 30       	cpi	r18, 0x02	; 2
    2eec:	31 05       	cpc	r19, r1
    2eee:	0c f4       	brge	.+2      	; 0x2ef2 <Timer3_Init+0x500>
    2ef0:	7e c0       	rjmp	.+252    	; 0x2fee <Timer3_Init+0x5fc>
    2ef2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ef4:	98 85       	ldd	r25, Y+8	; 0x08
    2ef6:	82 30       	cpi	r24, 0x02	; 2
    2ef8:	91 05       	cpc	r25, r1
    2efa:	a9 f0       	breq	.+42     	; 0x2f26 <Timer3_Init+0x534>
    2efc:	2f 81       	ldd	r18, Y+7	; 0x07
    2efe:	38 85       	ldd	r19, Y+8	; 0x08
    2f00:	23 30       	cpi	r18, 0x03	; 3
    2f02:	31 05       	cpc	r19, r1
    2f04:	f9 f0       	breq	.+62     	; 0x2f44 <Timer3_Init+0x552>
    2f06:	73 c0       	rjmp	.+230    	; 0x2fee <Timer3_Init+0x5fc>
	   {
	case disconnected_channel_3:break;
	     case A_Channel_3:CLR_BIT(TCCR3A,COM3A0);
    2f08:	ab e8       	ldi	r26, 0x8B	; 139
    2f0a:	b0 e0       	ldi	r27, 0x00	; 0
    2f0c:	eb e8       	ldi	r30, 0x8B	; 139
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	80 81       	ld	r24, Z
    2f12:	8f 7b       	andi	r24, 0xBF	; 191
    2f14:	8c 93       	st	X, r24
					    SET_BIT(TCCR3A,COM3A1);
    2f16:	ab e8       	ldi	r26, 0x8B	; 139
    2f18:	b0 e0       	ldi	r27, 0x00	; 0
    2f1a:	eb e8       	ldi	r30, 0x8B	; 139
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 81       	ld	r24, Z
    2f20:	80 68       	ori	r24, 0x80	; 128
    2f22:	8c 93       	st	X, r24
    2f24:	64 c0       	rjmp	.+200    	; 0x2fee <Timer3_Init+0x5fc>
						break;
	    case B_Channel_3:CLR_BIT(TCCR3A,COM3B0);
    2f26:	ab e8       	ldi	r26, 0x8B	; 139
    2f28:	b0 e0       	ldi	r27, 0x00	; 0
    2f2a:	eb e8       	ldi	r30, 0x8B	; 139
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	8f 7e       	andi	r24, 0xEF	; 239
    2f32:	8c 93       	st	X, r24
	                   SET_BIT(TCCR3A,COM3B1);
    2f34:	ab e8       	ldi	r26, 0x8B	; 139
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	eb e8       	ldi	r30, 0x8B	; 139
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	80 62       	ori	r24, 0x20	; 32
    2f40:	8c 93       	st	X, r24
    2f42:	55 c0       	rjmp	.+170    	; 0x2fee <Timer3_Init+0x5fc>
	                   break;
	   case C_Channel_3:CLR_BIT(TCCR3A,COM3C0);
    2f44:	ab e8       	ldi	r26, 0x8B	; 139
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	eb e8       	ldi	r30, 0x8B	; 139
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	80 81       	ld	r24, Z
    2f4e:	8b 7f       	andi	r24, 0xFB	; 251
    2f50:	8c 93       	st	X, r24
	                  SET_BIT(TCCR3A,COM3C1);
    2f52:	ab e8       	ldi	r26, 0x8B	; 139
    2f54:	b0 e0       	ldi	r27, 0x00	; 0
    2f56:	eb e8       	ldi	r30, 0x8B	; 139
    2f58:	f0 e0       	ldi	r31, 0x00	; 0
    2f5a:	80 81       	ld	r24, Z
    2f5c:	88 60       	ori	r24, 0x08	; 8
    2f5e:	8c 93       	st	X, r24
    2f60:	46 c0       	rjmp	.+140    	; 0x2fee <Timer3_Init+0x5fc>
	                  break;
	   }
        break;
case Inverting_set_oc0_oncompare_clr_on_bottom_3:
	switch(channel_t)
    2f62:	8c 81       	ldd	r24, Y+4	; 0x04
    2f64:	28 2f       	mov	r18, r24
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	3e 83       	std	Y+6, r19	; 0x06
    2f6a:	2d 83       	std	Y+5, r18	; 0x05
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f70:	81 30       	cpi	r24, 0x01	; 1
    2f72:	91 05       	cpc	r25, r1
    2f74:	81 f0       	breq	.+32     	; 0x2f96 <Timer3_Init+0x5a4>
    2f76:	2d 81       	ldd	r18, Y+5	; 0x05
    2f78:	3e 81       	ldd	r19, Y+6	; 0x06
    2f7a:	22 30       	cpi	r18, 0x02	; 2
    2f7c:	31 05       	cpc	r19, r1
    2f7e:	bc f1       	brlt	.+110    	; 0x2fee <Timer3_Init+0x5fc>
    2f80:	8d 81       	ldd	r24, Y+5	; 0x05
    2f82:	9e 81       	ldd	r25, Y+6	; 0x06
    2f84:	82 30       	cpi	r24, 0x02	; 2
    2f86:	91 05       	cpc	r25, r1
    2f88:	a9 f0       	breq	.+42     	; 0x2fb4 <Timer3_Init+0x5c2>
    2f8a:	2d 81       	ldd	r18, Y+5	; 0x05
    2f8c:	3e 81       	ldd	r19, Y+6	; 0x06
    2f8e:	23 30       	cpi	r18, 0x03	; 3
    2f90:	31 05       	cpc	r19, r1
    2f92:	f9 f0       	breq	.+62     	; 0x2fd2 <Timer3_Init+0x5e0>
    2f94:	2c c0       	rjmp	.+88     	; 0x2fee <Timer3_Init+0x5fc>
	   {
	case disconnected_channel_3:break;
	      case A_Channel_3:SET_BIT(TCCR3A,COM3A0);
    2f96:	ab e8       	ldi	r26, 0x8B	; 139
    2f98:	b0 e0       	ldi	r27, 0x00	; 0
    2f9a:	eb e8       	ldi	r30, 0x8B	; 139
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	80 64       	ori	r24, 0x40	; 64
    2fa2:	8c 93       	st	X, r24
	                     SET_BIT(TCCR3A,COM3A1);
    2fa4:	ab e8       	ldi	r26, 0x8B	; 139
    2fa6:	b0 e0       	ldi	r27, 0x00	; 0
    2fa8:	eb e8       	ldi	r30, 0x8B	; 139
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	80 81       	ld	r24, Z
    2fae:	80 68       	ori	r24, 0x80	; 128
    2fb0:	8c 93       	st	X, r24
    2fb2:	1d c0       	rjmp	.+58     	; 0x2fee <Timer3_Init+0x5fc>
	                     break;
	      case B_Channel_3:SET_BIT(TCCR3A,COM3B0);
    2fb4:	ab e8       	ldi	r26, 0x8B	; 139
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	eb e8       	ldi	r30, 0x8B	; 139
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	80 61       	ori	r24, 0x10	; 16
    2fc0:	8c 93       	st	X, r24
	  				     SET_BIT(TCCR3A,COM3B1);
    2fc2:	ab e8       	ldi	r26, 0x8B	; 139
    2fc4:	b0 e0       	ldi	r27, 0x00	; 0
    2fc6:	eb e8       	ldi	r30, 0x8B	; 139
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	80 81       	ld	r24, Z
    2fcc:	80 62       	ori	r24, 0x20	; 32
    2fce:	8c 93       	st	X, r24
    2fd0:	0e c0       	rjmp	.+28     	; 0x2fee <Timer3_Init+0x5fc>
	  			         break;
	      case C_Channel_3:SET_BIT(TCCR3A,COM3C0);
    2fd2:	ab e8       	ldi	r26, 0x8B	; 139
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	eb e8       	ldi	r30, 0x8B	; 139
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	84 60       	ori	r24, 0x04	; 4
    2fde:	8c 93       	st	X, r24
	  				     SET_BIT(TCCR3A,COM3C1);
    2fe0:	ab e8       	ldi	r26, 0x8B	; 139
    2fe2:	b0 e0       	ldi	r27, 0x00	; 0
    2fe4:	eb e8       	ldi	r30, 0x8B	; 139
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	80 81       	ld	r24, Z
    2fea:	88 60       	ori	r24, 0x08	; 8
    2fec:	8c 93       	st	X, r24
							break;

}

#endif
	TCCR3B&=0XF8;
    2fee:	aa e8       	ldi	r26, 0x8A	; 138
    2ff0:	b0 e0       	ldi	r27, 0x00	; 0
    2ff2:	ea e8       	ldi	r30, 0x8A	; 138
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	80 81       	ld	r24, Z
    2ff8:	88 7f       	andi	r24, 0xF8	; 248
    2ffa:	8c 93       	st	X, r24
	TCCR3B|=scaler;
    2ffc:	aa e8       	ldi	r26, 0x8A	; 138
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	ea e8       	ldi	r30, 0x8A	; 138
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	90 81       	ld	r25, Z
    3006:	8a 81       	ldd	r24, Y+2	; 0x02
    3008:	89 2b       	or	r24, r25
    300a:	8c 93       	st	X, r24

}
    300c:	2c 96       	adiw	r28, 0x0c	; 12
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	cf 91       	pop	r28
    301a:	df 91       	pop	r29
    301c:	08 95       	ret

0000301e <Timer3_InputCaptureEdge>:

void Timer3_InputCaptureEdge(Edge3_type edge)
{
    301e:	df 93       	push	r29
    3020:	cf 93       	push	r28
    3022:	0f 92       	push	r0
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	89 83       	std	Y+1, r24	; 0x01
	if(edge==Rising_3)
    302a:	89 81       	ldd	r24, Y+1	; 0x01
    302c:	81 30       	cpi	r24, 0x01	; 1
    302e:	41 f4       	brne	.+16     	; 0x3040 <Timer3_InputCaptureEdge+0x22>
		SET_BIT(TCCR3B,ICES3);
    3030:	aa e8       	ldi	r26, 0x8A	; 138
    3032:	b0 e0       	ldi	r27, 0x00	; 0
    3034:	ea e8       	ldi	r30, 0x8A	; 138
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
    303a:	80 64       	ori	r24, 0x40	; 64
    303c:	8c 93       	st	X, r24
    303e:	0a c0       	rjmp	.+20     	; 0x3054 <Timer3_InputCaptureEdge+0x36>


	else if(edge==Falling_3)
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	88 23       	and	r24, r24
    3044:	39 f4       	brne	.+14     	; 0x3054 <Timer3_InputCaptureEdge+0x36>
		CLR_BIT(TCCR3B,ICES3);
    3046:	aa e8       	ldi	r26, 0x8A	; 138
    3048:	b0 e0       	ldi	r27, 0x00	; 0
    304a:	ea e8       	ldi	r30, 0x8A	; 138
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	80 81       	ld	r24, Z
    3050:	8f 7b       	andi	r24, 0xBF	; 191
    3052:	8c 93       	st	X, r24

}
    3054:	0f 90       	pop	r0
    3056:	cf 91       	pop	r28
    3058:	df 91       	pop	r29
    305a:	08 95       	ret

0000305c <Timer3_ICU_InterruptEnable>:

void Timer3_ICU_InterruptEnable(void)
{
    305c:	df 93       	push	r29
    305e:	cf 93       	push	r28
    3060:	cd b7       	in	r28, 0x3d	; 61
    3062:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,TICIE3);
    3064:	ad e7       	ldi	r26, 0x7D	; 125
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	ed e7       	ldi	r30, 0x7D	; 125
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
    306e:	80 62       	ori	r24, 0x20	; 32
    3070:	8c 93       	st	X, r24
}
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <Timer3_ICU_InterruptDisable>:
void Timer3_ICU_InterruptDisable(void)
{
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,TICIE3);
    3080:	ad e7       	ldi	r26, 0x7D	; 125
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	ed e7       	ldi	r30, 0x7D	; 125
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	8f 7d       	andi	r24, 0xDF	; 223
    308c:	8c 93       	st	X, r24
}
    308e:	cf 91       	pop	r28
    3090:	df 91       	pop	r29
    3092:	08 95       	ret

00003094 <Timer3_OV_InterruptEnable>:
void Timer3_OV_InterruptEnable(void)
{
    3094:	df 93       	push	r29
    3096:	cf 93       	push	r28
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,TOIE3);
    309c:	ad e7       	ldi	r26, 0x7D	; 125
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	ed e7       	ldi	r30, 0x7D	; 125
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	80 81       	ld	r24, Z
    30a6:	84 60       	ori	r24, 0x04	; 4
    30a8:	8c 93       	st	X, r24
}
    30aa:	cf 91       	pop	r28
    30ac:	df 91       	pop	r29
    30ae:	08 95       	ret

000030b0 <Timer3_OV_InterruptDisable>:
void Timer3_OV_InterruptDisable(void)
{
    30b0:	df 93       	push	r29
    30b2:	cf 93       	push	r28
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,TOIE3);
    30b8:	ad e7       	ldi	r26, 0x7D	; 125
    30ba:	b0 e0       	ldi	r27, 0x00	; 0
    30bc:	ed e7       	ldi	r30, 0x7D	; 125
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	80 81       	ld	r24, Z
    30c2:	8b 7f       	andi	r24, 0xFB	; 251
    30c4:	8c 93       	st	X, r24
}
    30c6:	cf 91       	pop	r28
    30c8:	df 91       	pop	r29
    30ca:	08 95       	ret

000030cc <Timer3_OCA_InterruptEnable>:
void Timer3_OCA_InterruptEnable(void)
{
    30cc:	df 93       	push	r29
    30ce:	cf 93       	push	r28
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,OCIE3A);
    30d4:	ad e7       	ldi	r26, 0x7D	; 125
    30d6:	b0 e0       	ldi	r27, 0x00	; 0
    30d8:	ed e7       	ldi	r30, 0x7D	; 125
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	80 81       	ld	r24, Z
    30de:	80 61       	ori	r24, 0x10	; 16
    30e0:	8c 93       	st	X, r24
}
    30e2:	cf 91       	pop	r28
    30e4:	df 91       	pop	r29
    30e6:	08 95       	ret

000030e8 <Timer3_OCA_InterruptDisable>:
void Timer3_OCA_InterruptDisable(void)
{
    30e8:	df 93       	push	r29
    30ea:	cf 93       	push	r28
    30ec:	cd b7       	in	r28, 0x3d	; 61
    30ee:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,OCIE3A);
    30f0:	ad e7       	ldi	r26, 0x7D	; 125
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	ed e7       	ldi	r30, 0x7D	; 125
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	80 81       	ld	r24, Z
    30fa:	8f 7e       	andi	r24, 0xEF	; 239
    30fc:	8c 93       	st	X, r24
}
    30fe:	cf 91       	pop	r28
    3100:	df 91       	pop	r29
    3102:	08 95       	ret

00003104 <Timer3_OCB_InterruptEnable>:
void Timer3_OCB_InterruptEnable(void)
{
    3104:	df 93       	push	r29
    3106:	cf 93       	push	r28
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,OCIE3B);
    310c:	ad e7       	ldi	r26, 0x7D	; 125
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	ed e7       	ldi	r30, 0x7D	; 125
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	88 60       	ori	r24, 0x08	; 8
    3118:	8c 93       	st	X, r24
}
    311a:	cf 91       	pop	r28
    311c:	df 91       	pop	r29
    311e:	08 95       	ret

00003120 <Timer3_OCB_InterruptDisable>:
void Timer3_OCB_InterruptDisable(void)
{
    3120:	df 93       	push	r29
    3122:	cf 93       	push	r28
    3124:	cd b7       	in	r28, 0x3d	; 61
    3126:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,OCIE3B);
    3128:	ad e7       	ldi	r26, 0x7D	; 125
    312a:	b0 e0       	ldi	r27, 0x00	; 0
    312c:	ed e7       	ldi	r30, 0x7D	; 125
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	80 81       	ld	r24, Z
    3132:	87 7f       	andi	r24, 0xF7	; 247
    3134:	8c 93       	st	X, r24
}
    3136:	cf 91       	pop	r28
    3138:	df 91       	pop	r29
    313a:	08 95       	ret

0000313c <Timer3_OCC_InterruptEnable>:

void Timer3_OCC_InterruptEnable(void)
{
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,OCIE3C);
    3144:	ad e7       	ldi	r26, 0x7D	; 125
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	ed e7       	ldi	r30, 0x7D	; 125
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	80 81       	ld	r24, Z
    314e:	82 60       	ori	r24, 0x02	; 2
    3150:	8c 93       	st	X, r24
}
    3152:	cf 91       	pop	r28
    3154:	df 91       	pop	r29
    3156:	08 95       	ret

00003158 <Timer3_OCC_InterruptDisable>:
void Timer3_OCC_InterruptDisable(void)
{
    3158:	df 93       	push	r29
    315a:	cf 93       	push	r28
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,OCIE3C);
    3160:	ad e7       	ldi	r26, 0x7D	; 125
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	ed e7       	ldi	r30, 0x7D	; 125
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	80 81       	ld	r24, Z
    316a:	8d 7f       	andi	r24, 0xFD	; 253
    316c:	8c 93       	st	X, r24
}
    316e:	cf 91       	pop	r28
    3170:	df 91       	pop	r29
    3172:	08 95       	ret

00003174 <TMR3_uint16_GetICUValue>:


uint16  TMR3_uint16_GetICUValue(void)
{
    3174:	df 93       	push	r29
    3176:	cf 93       	push	r28
    3178:	00 d0       	rcall	.+0      	; 0x317a <TMR3_uint16_GetICUValue+0x6>
    317a:	cd b7       	in	r28, 0x3d	; 61
    317c:	de b7       	in	r29, 0x3e	; 62
	uint16 ret_val;
		ret_val=ICR3L|(ICR3H<<8);
    317e:	e0 e8       	ldi	r30, 0x80	; 128
    3180:	f0 e0       	ldi	r31, 0x00	; 0
    3182:	80 81       	ld	r24, Z
    3184:	28 2f       	mov	r18, r24
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	e1 e8       	ldi	r30, 0x81	; 129
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	88 2f       	mov	r24, r24
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	98 2f       	mov	r25, r24
    3194:	88 27       	eor	r24, r24
    3196:	82 2b       	or	r24, r18
    3198:	93 2b       	or	r25, r19
    319a:	9a 83       	std	Y+2, r25	; 0x02
    319c:	89 83       	std	Y+1, r24	; 0x01
		return ret_val;
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	cf 91       	pop	r28
    31a8:	df 91       	pop	r29
    31aa:	08 95       	ret

000031ac <TMR3_uint16_GetTimerValue>:

uint16  TMR3_uint16_GetTimerValue(void)
{
    31ac:	df 93       	push	r29
    31ae:	cf 93       	push	r28
    31b0:	00 d0       	rcall	.+0      	; 0x31b2 <TMR3_uint16_GetTimerValue+0x6>
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62

	uint16 ret_val;
	ret_val=TCNT3L|(TCNT3H<<8);
    31b6:	e8 e8       	ldi	r30, 0x88	; 136
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	28 2f       	mov	r18, r24
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	e9 e8       	ldi	r30, 0x89	; 137
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	80 81       	ld	r24, Z
    31c6:	88 2f       	mov	r24, r24
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	98 2f       	mov	r25, r24
    31cc:	88 27       	eor	r24, r24
    31ce:	82 2b       	or	r24, r18
    31d0:	93 2b       	or	r25, r19
    31d2:	9a 83       	std	Y+2, r25	; 0x02
    31d4:	89 83       	std	Y+1, r24	; 0x01
	return ret_val;
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	cf 91       	pop	r28
    31e0:	df 91       	pop	r29
    31e2:	08 95       	ret

000031e4 <TMR3_void_SetTimerValue>:


void  TMR3_void_SetTimerValue(uint16 tmr_val)
{
    31e4:	df 93       	push	r29
    31e6:	cf 93       	push	r28
    31e8:	00 d0       	rcall	.+0      	; 0x31ea <TMR3_void_SetTimerValue+0x6>
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
    31ee:	9a 83       	std	Y+2, r25	; 0x02
    31f0:	89 83       	std	Y+1, r24	; 0x01
TCNT3L=(uint8)tmr_val;
    31f2:	e8 e8       	ldi	r30, 0x88	; 136
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	80 83       	st	Z, r24
TCNT3H=(uint8)(tmr_val>>8);
    31fa:	e9 e8       	ldi	r30, 0x89	; 137
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	9a 81       	ldd	r25, Y+2	; 0x02
    3202:	89 2f       	mov	r24, r25
    3204:	99 27       	eor	r25, r25
    3206:	80 83       	st	Z, r24
}
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	cf 91       	pop	r28
    320e:	df 91       	pop	r29
    3210:	08 95       	ret

00003212 <TMR3_void_Set_OCR_TimerValue>:

void  TMR3_void_Set_OCR_TimerValue(uint16 oc_val,OC3_ch_type ch)
{
    3212:	df 93       	push	r29
    3214:	cf 93       	push	r28
    3216:	00 d0       	rcall	.+0      	; 0x3218 <TMR3_void_Set_OCR_TimerValue+0x6>
    3218:	00 d0       	rcall	.+0      	; 0x321a <TMR3_void_Set_OCR_TimerValue+0x8>
    321a:	0f 92       	push	r0
    321c:	cd b7       	in	r28, 0x3d	; 61
    321e:	de b7       	in	r29, 0x3e	; 62
    3220:	9a 83       	std	Y+2, r25	; 0x02
    3222:	89 83       	std	Y+1, r24	; 0x01
    3224:	6b 83       	std	Y+3, r22	; 0x03
	switch(ch){
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	28 2f       	mov	r18, r24
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	3d 83       	std	Y+5, r19	; 0x05
    322e:	2c 83       	std	Y+4, r18	; 0x04
    3230:	8c 81       	ldd	r24, Y+4	; 0x04
    3232:	9d 81       	ldd	r25, Y+5	; 0x05
    3234:	81 30       	cpi	r24, 0x01	; 1
    3236:	91 05       	cpc	r25, r1
    3238:	81 f0       	breq	.+32     	; 0x325a <TMR3_void_Set_OCR_TimerValue+0x48>
    323a:	2c 81       	ldd	r18, Y+4	; 0x04
    323c:	3d 81       	ldd	r19, Y+5	; 0x05
    323e:	22 30       	cpi	r18, 0x02	; 2
    3240:	31 05       	cpc	r19, r1
    3242:	74 f1       	brlt	.+92     	; 0x32a0 <TMR3_void_Set_OCR_TimerValue+0x8e>
    3244:	8c 81       	ldd	r24, Y+4	; 0x04
    3246:	9d 81       	ldd	r25, Y+5	; 0x05
    3248:	82 30       	cpi	r24, 0x02	; 2
    324a:	91 05       	cpc	r25, r1
    324c:	91 f0       	breq	.+36     	; 0x3272 <TMR3_void_Set_OCR_TimerValue+0x60>
    324e:	2c 81       	ldd	r18, Y+4	; 0x04
    3250:	3d 81       	ldd	r19, Y+5	; 0x05
    3252:	23 30       	cpi	r18, 0x03	; 3
    3254:	31 05       	cpc	r19, r1
    3256:	c9 f0       	breq	.+50     	; 0x328a <TMR3_void_Set_OCR_TimerValue+0x78>
    3258:	23 c0       	rjmp	.+70     	; 0x32a0 <TMR3_void_Set_OCR_TimerValue+0x8e>
	case disconnected_channel_3:break;
	case A_Channel_3:OCR3AL=(uint8)oc_val;
    325a:	e6 e8       	ldi	r30, 0x86	; 134
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	89 81       	ldd	r24, Y+1	; 0x01
    3260:	80 83       	st	Z, r24
	               OCR3AH=(uint8)(oc_val>>8);
    3262:	e7 e8       	ldi	r30, 0x87	; 135
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	89 81       	ldd	r24, Y+1	; 0x01
    3268:	9a 81       	ldd	r25, Y+2	; 0x02
    326a:	89 2f       	mov	r24, r25
    326c:	99 27       	eor	r25, r25
    326e:	80 83       	st	Z, r24
    3270:	17 c0       	rjmp	.+46     	; 0x32a0 <TMR3_void_Set_OCR_TimerValue+0x8e>
	               break;
	case B_Channel_3:OCR3BL=(uint8)oc_val;
    3272:	e4 e8       	ldi	r30, 0x84	; 132
    3274:	f0 e0       	ldi	r31, 0x00	; 0
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	80 83       	st	Z, r24
		           OCR3BH=(uint8)(oc_val>>8);
    327a:	e5 e8       	ldi	r30, 0x85	; 133
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	89 81       	ldd	r24, Y+1	; 0x01
    3280:	9a 81       	ldd	r25, Y+2	; 0x02
    3282:	89 2f       	mov	r24, r25
    3284:	99 27       	eor	r25, r25
    3286:	80 83       	st	Z, r24
    3288:	0b c0       	rjmp	.+22     	; 0x32a0 <TMR3_void_Set_OCR_TimerValue+0x8e>
		           break;
	case C_Channel_3:OCR3CL=(uint8)oc_val;
    328a:	e2 e8       	ldi	r30, 0x82	; 130
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	80 83       	st	Z, r24
		           OCR3CH=(uint8)(oc_val>>8);
    3292:	e3 e8       	ldi	r30, 0x83	; 131
    3294:	f0 e0       	ldi	r31, 0x00	; 0
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	9a 81       	ldd	r25, Y+2	; 0x02
    329a:	89 2f       	mov	r24, r25
    329c:	99 27       	eor	r25, r25
    329e:	80 83       	st	Z, r24
		           break;
	}

}
    32a0:	0f 90       	pop	r0
    32a2:	0f 90       	pop	r0
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <Timer1_Init>:
#include"Timer1.h"
void Timer1_Init(timer1_mode_type timer_mode,prescaler1_type scaler,OC1_mode_type oc1_mode,OC1_ch_type channel_t)
{
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
    32b8:	2e 97       	sbiw	r28, 0x0e	; 14
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	89 83       	std	Y+1, r24	; 0x01
    32c6:	6a 83       	std	Y+2, r22	; 0x02
    32c8:	4b 83       	std	Y+3, r20	; 0x03
    32ca:	2c 83       	std	Y+4, r18	; 0x04
switch (timer_mode)
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	28 2f       	mov	r18, r24
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	3e 87       	std	Y+14, r19	; 0x0e
    32d4:	2d 87       	std	Y+13, r18	; 0x0d
    32d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    32da:	87 30       	cpi	r24, 0x07	; 7
    32dc:	91 05       	cpc	r25, r1
    32de:	09 f4       	brne	.+2      	; 0x32e2 <Timer1_Init+0x32>
    32e0:	24 c1       	rjmp	.+584    	; 0x352a <Timer1_Init+0x27a>
    32e2:	2d 85       	ldd	r18, Y+13	; 0x0d
    32e4:	3e 85       	ldd	r19, Y+14	; 0x0e
    32e6:	28 30       	cpi	r18, 0x08	; 8
    32e8:	31 05       	cpc	r19, r1
    32ea:	4c f5       	brge	.+82     	; 0x333e <Timer1_Init+0x8e>
    32ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    32f0:	83 30       	cpi	r24, 0x03	; 3
    32f2:	91 05       	cpc	r25, r1
    32f4:	09 f4       	brne	.+2      	; 0x32f8 <Timer1_Init+0x48>
    32f6:	a5 c0       	rjmp	.+330    	; 0x3442 <Timer1_Init+0x192>
    32f8:	2d 85       	ldd	r18, Y+13	; 0x0d
    32fa:	3e 85       	ldd	r19, Y+14	; 0x0e
    32fc:	24 30       	cpi	r18, 0x04	; 4
    32fe:	31 05       	cpc	r19, r1
    3300:	8c f4       	brge	.+34     	; 0x3324 <Timer1_Init+0x74>
    3302:	8d 85       	ldd	r24, Y+13	; 0x0d
    3304:	9e 85       	ldd	r25, Y+14	; 0x0e
    3306:	81 30       	cpi	r24, 0x01	; 1
    3308:	91 05       	cpc	r25, r1
    330a:	09 f4       	brne	.+2      	; 0x330e <Timer1_Init+0x5e>
    330c:	60 c0       	rjmp	.+192    	; 0x33ce <Timer1_Init+0x11e>
    330e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3310:	3e 85       	ldd	r19, Y+14	; 0x0e
    3312:	22 30       	cpi	r18, 0x02	; 2
    3314:	31 05       	cpc	r19, r1
    3316:	0c f0       	brlt	.+2      	; 0x331a <Timer1_Init+0x6a>
    3318:	77 c0       	rjmp	.+238    	; 0x3408 <Timer1_Init+0x158>
    331a:	8d 85       	ldd	r24, Y+13	; 0x0d
    331c:	9e 85       	ldd	r25, Y+14	; 0x0e
    331e:	00 97       	sbiw	r24, 0x00	; 0
    3320:	c9 f1       	breq	.+114    	; 0x3394 <Timer1_Init+0xe4>
    3322:	ea c1       	rjmp	.+980    	; 0x36f8 <Timer1_Init+0x448>
    3324:	2d 85       	ldd	r18, Y+13	; 0x0d
    3326:	3e 85       	ldd	r19, Y+14	; 0x0e
    3328:	25 30       	cpi	r18, 0x05	; 5
    332a:	31 05       	cpc	r19, r1
    332c:	09 f4       	brne	.+2      	; 0x3330 <Timer1_Init+0x80>
    332e:	c3 c0       	rjmp	.+390    	; 0x34b6 <Timer1_Init+0x206>
    3330:	8d 85       	ldd	r24, Y+13	; 0x0d
    3332:	9e 85       	ldd	r25, Y+14	; 0x0e
    3334:	86 30       	cpi	r24, 0x06	; 6
    3336:	91 05       	cpc	r25, r1
    3338:	0c f0       	brlt	.+2      	; 0x333c <Timer1_Init+0x8c>
    333a:	da c0       	rjmp	.+436    	; 0x34f0 <Timer1_Init+0x240>
    333c:	9f c0       	rjmp	.+318    	; 0x347c <Timer1_Init+0x1cc>
    333e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3340:	3e 85       	ldd	r19, Y+14	; 0x0e
    3342:	2b 30       	cpi	r18, 0x0B	; 11
    3344:	31 05       	cpc	r19, r1
    3346:	09 f4       	brne	.+2      	; 0x334a <Timer1_Init+0x9a>
    3348:	64 c1       	rjmp	.+712    	; 0x3612 <Timer1_Init+0x362>
    334a:	8d 85       	ldd	r24, Y+13	; 0x0d
    334c:	9e 85       	ldd	r25, Y+14	; 0x0e
    334e:	8c 30       	cpi	r24, 0x0C	; 12
    3350:	91 05       	cpc	r25, r1
    3352:	6c f4       	brge	.+26     	; 0x336e <Timer1_Init+0xbe>
    3354:	2d 85       	ldd	r18, Y+13	; 0x0d
    3356:	3e 85       	ldd	r19, Y+14	; 0x0e
    3358:	29 30       	cpi	r18, 0x09	; 9
    335a:	31 05       	cpc	r19, r1
    335c:	09 f4       	brne	.+2      	; 0x3360 <Timer1_Init+0xb0>
    335e:	1f c1       	rjmp	.+574    	; 0x359e <Timer1_Init+0x2ee>
    3360:	8d 85       	ldd	r24, Y+13	; 0x0d
    3362:	9e 85       	ldd	r25, Y+14	; 0x0e
    3364:	8a 30       	cpi	r24, 0x0A	; 10
    3366:	91 05       	cpc	r25, r1
    3368:	0c f0       	brlt	.+2      	; 0x336c <Timer1_Init+0xbc>
    336a:	36 c1       	rjmp	.+620    	; 0x35d8 <Timer1_Init+0x328>
    336c:	fb c0       	rjmp	.+502    	; 0x3564 <Timer1_Init+0x2b4>
    336e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3370:	3e 85       	ldd	r19, Y+14	; 0x0e
    3372:	2d 30       	cpi	r18, 0x0D	; 13
    3374:	31 05       	cpc	r19, r1
    3376:	09 f4       	brne	.+2      	; 0x337a <Timer1_Init+0xca>
    3378:	86 c1       	rjmp	.+780    	; 0x3686 <Timer1_Init+0x3d6>
    337a:	8d 85       	ldd	r24, Y+13	; 0x0d
    337c:	9e 85       	ldd	r25, Y+14	; 0x0e
    337e:	8d 30       	cpi	r24, 0x0D	; 13
    3380:	91 05       	cpc	r25, r1
    3382:	0c f4       	brge	.+2      	; 0x3386 <Timer1_Init+0xd6>
    3384:	63 c1       	rjmp	.+710    	; 0x364c <Timer1_Init+0x39c>
    3386:	2d 85       	ldd	r18, Y+13	; 0x0d
    3388:	3e 85       	ldd	r19, Y+14	; 0x0e
    338a:	2e 30       	cpi	r18, 0x0E	; 14
    338c:	31 05       	cpc	r19, r1
    338e:	09 f4       	brne	.+2      	; 0x3392 <Timer1_Init+0xe2>
    3390:	97 c1       	rjmp	.+814    	; 0x36c0 <Timer1_Init+0x410>
    3392:	b2 c1       	rjmp	.+868    	; 0x36f8 <Timer1_Init+0x448>
 {

case timer1_Normal_mode:                          CLR_BIT(TCCR1A,WGM10);
    3394:	af e4       	ldi	r26, 0x4F	; 79
    3396:	b0 e0       	ldi	r27, 0x00	; 0
    3398:	ef e4       	ldi	r30, 0x4F	; 79
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	80 81       	ld	r24, Z
    339e:	8e 7f       	andi	r24, 0xFE	; 254
    33a0:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR1A,WGM11);
    33a2:	af e4       	ldi	r26, 0x4F	; 79
    33a4:	b0 e0       	ldi	r27, 0x00	; 0
    33a6:	ef e4       	ldi	r30, 0x4F	; 79
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	80 81       	ld	r24, Z
    33ac:	8d 7f       	andi	r24, 0xFD	; 253
    33ae:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR1B,WGM12);
    33b0:	ae e4       	ldi	r26, 0x4E	; 78
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	ee e4       	ldi	r30, 0x4E	; 78
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	87 7f       	andi	r24, 0xF7	; 247
    33bc:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR1B,WGM13);
    33be:	ae e4       	ldi	r26, 0x4E	; 78
    33c0:	b0 e0       	ldi	r27, 0x00	; 0
    33c2:	ee e4       	ldi	r30, 0x4E	; 78
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	80 81       	ld	r24, Z
    33c8:	8f 7e       	andi	r24, 0xEF	; 239
    33ca:	8c 93       	st	X, r24
    33cc:	95 c1       	rjmp	.+810    	; 0x36f8 <Timer1_Init+0x448>
                                                  break;
case timer1_PWM_Phase_Correct_8bit:               SET_BIT(TCCR1A,WGM10);
    33ce:	af e4       	ldi	r26, 0x4F	; 79
    33d0:	b0 e0       	ldi	r27, 0x00	; 0
    33d2:	ef e4       	ldi	r30, 0x4F	; 79
    33d4:	f0 e0       	ldi	r31, 0x00	; 0
    33d6:	80 81       	ld	r24, Z
    33d8:	81 60       	ori	r24, 0x01	; 1
    33da:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    33dc:	af e4       	ldi	r26, 0x4F	; 79
    33de:	b0 e0       	ldi	r27, 0x00	; 0
    33e0:	ef e4       	ldi	r30, 0x4F	; 79
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	80 81       	ld	r24, Z
    33e6:	8d 7f       	andi	r24, 0xFD	; 253
    33e8:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    33ea:	ae e4       	ldi	r26, 0x4E	; 78
    33ec:	b0 e0       	ldi	r27, 0x00	; 0
    33ee:	ee e4       	ldi	r30, 0x4E	; 78
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	80 81       	ld	r24, Z
    33f4:	87 7f       	andi	r24, 0xF7	; 247
    33f6:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    33f8:	ae e4       	ldi	r26, 0x4E	; 78
    33fa:	b0 e0       	ldi	r27, 0x00	; 0
    33fc:	ee e4       	ldi	r30, 0x4E	; 78
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	80 81       	ld	r24, Z
    3402:	8f 7e       	andi	r24, 0xEF	; 239
    3404:	8c 93       	st	X, r24
    3406:	78 c1       	rjmp	.+752    	; 0x36f8 <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_Correct_9bit:               CLR_BIT(TCCR1A,WGM10);
    3408:	af e4       	ldi	r26, 0x4F	; 79
    340a:	b0 e0       	ldi	r27, 0x00	; 0
    340c:	ef e4       	ldi	r30, 0x4F	; 79
    340e:	f0 e0       	ldi	r31, 0x00	; 0
    3410:	80 81       	ld	r24, Z
    3412:	8e 7f       	andi	r24, 0xFE	; 254
    3414:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    3416:	af e4       	ldi	r26, 0x4F	; 79
    3418:	b0 e0       	ldi	r27, 0x00	; 0
    341a:	ef e4       	ldi	r30, 0x4F	; 79
    341c:	f0 e0       	ldi	r31, 0x00	; 0
    341e:	80 81       	ld	r24, Z
    3420:	82 60       	ori	r24, 0x02	; 2
    3422:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    3424:	ae e4       	ldi	r26, 0x4E	; 78
    3426:	b0 e0       	ldi	r27, 0x00	; 0
    3428:	ee e4       	ldi	r30, 0x4E	; 78
    342a:	f0 e0       	ldi	r31, 0x00	; 0
    342c:	80 81       	ld	r24, Z
    342e:	87 7f       	andi	r24, 0xF7	; 247
    3430:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    3432:	ae e4       	ldi	r26, 0x4E	; 78
    3434:	b0 e0       	ldi	r27, 0x00	; 0
    3436:	ee e4       	ldi	r30, 0x4E	; 78
    3438:	f0 e0       	ldi	r31, 0x00	; 0
    343a:	80 81       	ld	r24, Z
    343c:	8f 7e       	andi	r24, 0xEF	; 239
    343e:	8c 93       	st	X, r24
    3440:	5b c1       	rjmp	.+694    	; 0x36f8 <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_Correct_10bit:              SET_BIT(TCCR1A,WGM10);
    3442:	af e4       	ldi	r26, 0x4F	; 79
    3444:	b0 e0       	ldi	r27, 0x00	; 0
    3446:	ef e4       	ldi	r30, 0x4F	; 79
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	80 81       	ld	r24, Z
    344c:	81 60       	ori	r24, 0x01	; 1
    344e:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    3450:	af e4       	ldi	r26, 0x4F	; 79
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	ef e4       	ldi	r30, 0x4F	; 79
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	80 81       	ld	r24, Z
    345a:	82 60       	ori	r24, 0x02	; 2
    345c:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    345e:	ae e4       	ldi	r26, 0x4E	; 78
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	ee e4       	ldi	r30, 0x4E	; 78
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	87 7f       	andi	r24, 0xF7	; 247
    346a:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    346c:	ae e4       	ldi	r26, 0x4E	; 78
    346e:	b0 e0       	ldi	r27, 0x00	; 0
    3470:	ee e4       	ldi	r30, 0x4E	; 78
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	80 81       	ld	r24, Z
    3476:	8f 7e       	andi	r24, 0xEF	; 239
    3478:	8c 93       	st	X, r24
    347a:	3e c1       	rjmp	.+636    	; 0x36f8 <Timer1_Init+0x448>
	                                              break;
case timer1_CTC_mode_ocr_top:                     CLR_BIT(TCCR1A,WGM10);
    347c:	af e4       	ldi	r26, 0x4F	; 79
    347e:	b0 e0       	ldi	r27, 0x00	; 0
    3480:	ef e4       	ldi	r30, 0x4F	; 79
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	80 81       	ld	r24, Z
    3486:	8e 7f       	andi	r24, 0xFE	; 254
    3488:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    348a:	af e4       	ldi	r26, 0x4F	; 79
    348c:	b0 e0       	ldi	r27, 0x00	; 0
    348e:	ef e4       	ldi	r30, 0x4F	; 79
    3490:	f0 e0       	ldi	r31, 0x00	; 0
    3492:	80 81       	ld	r24, Z
    3494:	8d 7f       	andi	r24, 0xFD	; 253
    3496:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    3498:	ae e4       	ldi	r26, 0x4E	; 78
    349a:	b0 e0       	ldi	r27, 0x00	; 0
    349c:	ee e4       	ldi	r30, 0x4E	; 78
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	80 81       	ld	r24, Z
    34a2:	88 60       	ori	r24, 0x08	; 8
    34a4:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    34a6:	ae e4       	ldi	r26, 0x4E	; 78
    34a8:	b0 e0       	ldi	r27, 0x00	; 0
    34aa:	ee e4       	ldi	r30, 0x4E	; 78
    34ac:	f0 e0       	ldi	r31, 0x00	; 0
    34ae:	80 81       	ld	r24, Z
    34b0:	8f 7e       	andi	r24, 0xEF	; 239
    34b2:	8c 93       	st	X, r24
    34b4:	21 c1       	rjmp	.+578    	; 0x36f8 <Timer1_Init+0x448>
	                                              break;
case timer1_Fast_PWM_8_bit:                       SET_BIT(TCCR1A,WGM10);
    34b6:	af e4       	ldi	r26, 0x4F	; 79
    34b8:	b0 e0       	ldi	r27, 0x00	; 0
    34ba:	ef e4       	ldi	r30, 0x4F	; 79
    34bc:	f0 e0       	ldi	r31, 0x00	; 0
    34be:	80 81       	ld	r24, Z
    34c0:	81 60       	ori	r24, 0x01	; 1
    34c2:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    34c4:	af e4       	ldi	r26, 0x4F	; 79
    34c6:	b0 e0       	ldi	r27, 0x00	; 0
    34c8:	ef e4       	ldi	r30, 0x4F	; 79
    34ca:	f0 e0       	ldi	r31, 0x00	; 0
    34cc:	80 81       	ld	r24, Z
    34ce:	8d 7f       	andi	r24, 0xFD	; 253
    34d0:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    34d2:	ae e4       	ldi	r26, 0x4E	; 78
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
    34d6:	ee e4       	ldi	r30, 0x4E	; 78
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	80 81       	ld	r24, Z
    34dc:	88 60       	ori	r24, 0x08	; 8
    34de:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    34e0:	ae e4       	ldi	r26, 0x4E	; 78
    34e2:	b0 e0       	ldi	r27, 0x00	; 0
    34e4:	ee e4       	ldi	r30, 0x4E	; 78
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	80 81       	ld	r24, Z
    34ea:	8f 7e       	andi	r24, 0xEF	; 239
    34ec:	8c 93       	st	X, r24
    34ee:	04 c1       	rjmp	.+520    	; 0x36f8 <Timer1_Init+0x448>
	                                              break;
case timer1_Fast_PWM_9_bit:                       CLR_BIT(TCCR1A,WGM10);
    34f0:	af e4       	ldi	r26, 0x4F	; 79
    34f2:	b0 e0       	ldi	r27, 0x00	; 0
    34f4:	ef e4       	ldi	r30, 0x4F	; 79
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	80 81       	ld	r24, Z
    34fa:	8e 7f       	andi	r24, 0xFE	; 254
    34fc:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    34fe:	af e4       	ldi	r26, 0x4F	; 79
    3500:	b0 e0       	ldi	r27, 0x00	; 0
    3502:	ef e4       	ldi	r30, 0x4F	; 79
    3504:	f0 e0       	ldi	r31, 0x00	; 0
    3506:	80 81       	ld	r24, Z
    3508:	82 60       	ori	r24, 0x02	; 2
    350a:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    350c:	ae e4       	ldi	r26, 0x4E	; 78
    350e:	b0 e0       	ldi	r27, 0x00	; 0
    3510:	ee e4       	ldi	r30, 0x4E	; 78
    3512:	f0 e0       	ldi	r31, 0x00	; 0
    3514:	80 81       	ld	r24, Z
    3516:	88 60       	ori	r24, 0x08	; 8
    3518:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    351a:	ae e4       	ldi	r26, 0x4E	; 78
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	ee e4       	ldi	r30, 0x4E	; 78
    3520:	f0 e0       	ldi	r31, 0x00	; 0
    3522:	80 81       	ld	r24, Z
    3524:	8f 7e       	andi	r24, 0xEF	; 239
    3526:	8c 93       	st	X, r24
    3528:	e7 c0       	rjmp	.+462    	; 0x36f8 <Timer1_Init+0x448>
	                                              break;
case timer1_Fast_PWM_10_bit:                      SET_BIT(TCCR1A,WGM10);
    352a:	af e4       	ldi	r26, 0x4F	; 79
    352c:	b0 e0       	ldi	r27, 0x00	; 0
    352e:	ef e4       	ldi	r30, 0x4F	; 79
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	80 81       	ld	r24, Z
    3534:	81 60       	ori	r24, 0x01	; 1
    3536:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    3538:	af e4       	ldi	r26, 0x4F	; 79
    353a:	b0 e0       	ldi	r27, 0x00	; 0
    353c:	ef e4       	ldi	r30, 0x4F	; 79
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	80 81       	ld	r24, Z
    3542:	82 60       	ori	r24, 0x02	; 2
    3544:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    3546:	ae e4       	ldi	r26, 0x4E	; 78
    3548:	b0 e0       	ldi	r27, 0x00	; 0
    354a:	ee e4       	ldi	r30, 0x4E	; 78
    354c:	f0 e0       	ldi	r31, 0x00	; 0
    354e:	80 81       	ld	r24, Z
    3550:	88 60       	ori	r24, 0x08	; 8
    3552:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    3554:	ae e4       	ldi	r26, 0x4E	; 78
    3556:	b0 e0       	ldi	r27, 0x00	; 0
    3558:	ee e4       	ldi	r30, 0x4E	; 78
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	80 81       	ld	r24, Z
    355e:	8f 7e       	andi	r24, 0xEF	; 239
    3560:	8c 93       	st	X, r24
    3562:	ca c0       	rjmp	.+404    	; 0x36f8 <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_and_Freq_Correct_icr_top:   CLR_BIT(TCCR1A,WGM10);
    3564:	af e4       	ldi	r26, 0x4F	; 79
    3566:	b0 e0       	ldi	r27, 0x00	; 0
    3568:	ef e4       	ldi	r30, 0x4F	; 79
    356a:	f0 e0       	ldi	r31, 0x00	; 0
    356c:	80 81       	ld	r24, Z
    356e:	8e 7f       	andi	r24, 0xFE	; 254
    3570:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    3572:	af e4       	ldi	r26, 0x4F	; 79
    3574:	b0 e0       	ldi	r27, 0x00	; 0
    3576:	ef e4       	ldi	r30, 0x4F	; 79
    3578:	f0 e0       	ldi	r31, 0x00	; 0
    357a:	80 81       	ld	r24, Z
    357c:	8d 7f       	andi	r24, 0xFD	; 253
    357e:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    3580:	ae e4       	ldi	r26, 0x4E	; 78
    3582:	b0 e0       	ldi	r27, 0x00	; 0
    3584:	ee e4       	ldi	r30, 0x4E	; 78
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	80 81       	ld	r24, Z
    358a:	87 7f       	andi	r24, 0xF7	; 247
    358c:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    358e:	ae e4       	ldi	r26, 0x4E	; 78
    3590:	b0 e0       	ldi	r27, 0x00	; 0
    3592:	ee e4       	ldi	r30, 0x4E	; 78
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	80 81       	ld	r24, Z
    3598:	80 61       	ori	r24, 0x10	; 16
    359a:	8c 93       	st	X, r24
    359c:	ad c0       	rjmp	.+346    	; 0x36f8 <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_and_Freq_Correct_ocr_top:   SET_BIT(TCCR1A,WGM10);
    359e:	af e4       	ldi	r26, 0x4F	; 79
    35a0:	b0 e0       	ldi	r27, 0x00	; 0
    35a2:	ef e4       	ldi	r30, 0x4F	; 79
    35a4:	f0 e0       	ldi	r31, 0x00	; 0
    35a6:	80 81       	ld	r24, Z
    35a8:	81 60       	ori	r24, 0x01	; 1
    35aa:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    35ac:	af e4       	ldi	r26, 0x4F	; 79
    35ae:	b0 e0       	ldi	r27, 0x00	; 0
    35b0:	ef e4       	ldi	r30, 0x4F	; 79
    35b2:	f0 e0       	ldi	r31, 0x00	; 0
    35b4:	80 81       	ld	r24, Z
    35b6:	8d 7f       	andi	r24, 0xFD	; 253
    35b8:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    35ba:	ae e4       	ldi	r26, 0x4E	; 78
    35bc:	b0 e0       	ldi	r27, 0x00	; 0
    35be:	ee e4       	ldi	r30, 0x4E	; 78
    35c0:	f0 e0       	ldi	r31, 0x00	; 0
    35c2:	80 81       	ld	r24, Z
    35c4:	87 7f       	andi	r24, 0xF7	; 247
    35c6:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    35c8:	ae e4       	ldi	r26, 0x4E	; 78
    35ca:	b0 e0       	ldi	r27, 0x00	; 0
    35cc:	ee e4       	ldi	r30, 0x4E	; 78
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	80 81       	ld	r24, Z
    35d2:	80 61       	ori	r24, 0x10	; 16
    35d4:	8c 93       	st	X, r24
    35d6:	90 c0       	rjmp	.+288    	; 0x36f8 <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_Correct_icr_top:            CLR_BIT(TCCR1A,WGM10);
    35d8:	af e4       	ldi	r26, 0x4F	; 79
    35da:	b0 e0       	ldi	r27, 0x00	; 0
    35dc:	ef e4       	ldi	r30, 0x4F	; 79
    35de:	f0 e0       	ldi	r31, 0x00	; 0
    35e0:	80 81       	ld	r24, Z
    35e2:	8e 7f       	andi	r24, 0xFE	; 254
    35e4:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    35e6:	af e4       	ldi	r26, 0x4F	; 79
    35e8:	b0 e0       	ldi	r27, 0x00	; 0
    35ea:	ef e4       	ldi	r30, 0x4F	; 79
    35ec:	f0 e0       	ldi	r31, 0x00	; 0
    35ee:	80 81       	ld	r24, Z
    35f0:	82 60       	ori	r24, 0x02	; 2
    35f2:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    35f4:	ae e4       	ldi	r26, 0x4E	; 78
    35f6:	b0 e0       	ldi	r27, 0x00	; 0
    35f8:	ee e4       	ldi	r30, 0x4E	; 78
    35fa:	f0 e0       	ldi	r31, 0x00	; 0
    35fc:	80 81       	ld	r24, Z
    35fe:	87 7f       	andi	r24, 0xF7	; 247
    3600:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    3602:	ae e4       	ldi	r26, 0x4E	; 78
    3604:	b0 e0       	ldi	r27, 0x00	; 0
    3606:	ee e4       	ldi	r30, 0x4E	; 78
    3608:	f0 e0       	ldi	r31, 0x00	; 0
    360a:	80 81       	ld	r24, Z
    360c:	80 61       	ori	r24, 0x10	; 16
    360e:	8c 93       	st	X, r24
    3610:	73 c0       	rjmp	.+230    	; 0x36f8 <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_Correct_ocr_top:            SET_BIT(TCCR1A,WGM10);
    3612:	af e4       	ldi	r26, 0x4F	; 79
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	ef e4       	ldi	r30, 0x4F	; 79
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	81 60       	ori	r24, 0x01	; 1
    361e:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    3620:	af e4       	ldi	r26, 0x4F	; 79
    3622:	b0 e0       	ldi	r27, 0x00	; 0
    3624:	ef e4       	ldi	r30, 0x4F	; 79
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	80 81       	ld	r24, Z
    362a:	82 60       	ori	r24, 0x02	; 2
    362c:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    362e:	ae e4       	ldi	r26, 0x4E	; 78
    3630:	b0 e0       	ldi	r27, 0x00	; 0
    3632:	ee e4       	ldi	r30, 0x4E	; 78
    3634:	f0 e0       	ldi	r31, 0x00	; 0
    3636:	80 81       	ld	r24, Z
    3638:	87 7f       	andi	r24, 0xF7	; 247
    363a:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    363c:	ae e4       	ldi	r26, 0x4E	; 78
    363e:	b0 e0       	ldi	r27, 0x00	; 0
    3640:	ee e4       	ldi	r30, 0x4E	; 78
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	80 81       	ld	r24, Z
    3646:	80 61       	ori	r24, 0x10	; 16
    3648:	8c 93       	st	X, r24
    364a:	56 c0       	rjmp	.+172    	; 0x36f8 <Timer1_Init+0x448>
	                                              break;
case timer1_CTC_mode_icr_top:                     CLR_BIT(TCCR1A,WGM10);
    364c:	af e4       	ldi	r26, 0x4F	; 79
    364e:	b0 e0       	ldi	r27, 0x00	; 0
    3650:	ef e4       	ldi	r30, 0x4F	; 79
    3652:	f0 e0       	ldi	r31, 0x00	; 0
    3654:	80 81       	ld	r24, Z
    3656:	8e 7f       	andi	r24, 0xFE	; 254
    3658:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    365a:	af e4       	ldi	r26, 0x4F	; 79
    365c:	b0 e0       	ldi	r27, 0x00	; 0
    365e:	ef e4       	ldi	r30, 0x4F	; 79
    3660:	f0 e0       	ldi	r31, 0x00	; 0
    3662:	80 81       	ld	r24, Z
    3664:	8d 7f       	andi	r24, 0xFD	; 253
    3666:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    3668:	ae e4       	ldi	r26, 0x4E	; 78
    366a:	b0 e0       	ldi	r27, 0x00	; 0
    366c:	ee e4       	ldi	r30, 0x4E	; 78
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	80 81       	ld	r24, Z
    3672:	88 60       	ori	r24, 0x08	; 8
    3674:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    3676:	ae e4       	ldi	r26, 0x4E	; 78
    3678:	b0 e0       	ldi	r27, 0x00	; 0
    367a:	ee e4       	ldi	r30, 0x4E	; 78
    367c:	f0 e0       	ldi	r31, 0x00	; 0
    367e:	80 81       	ld	r24, Z
    3680:	80 61       	ori	r24, 0x10	; 16
    3682:	8c 93       	st	X, r24
    3684:	39 c0       	rjmp	.+114    	; 0x36f8 <Timer1_Init+0x448>
	                                              break;
case timer1_Fast_PWM_icr_top:                     CLR_BIT(TCCR1A,WGM10);
    3686:	af e4       	ldi	r26, 0x4F	; 79
    3688:	b0 e0       	ldi	r27, 0x00	; 0
    368a:	ef e4       	ldi	r30, 0x4F	; 79
    368c:	f0 e0       	ldi	r31, 0x00	; 0
    368e:	80 81       	ld	r24, Z
    3690:	8e 7f       	andi	r24, 0xFE	; 254
    3692:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    3694:	af e4       	ldi	r26, 0x4F	; 79
    3696:	b0 e0       	ldi	r27, 0x00	; 0
    3698:	ef e4       	ldi	r30, 0x4F	; 79
    369a:	f0 e0       	ldi	r31, 0x00	; 0
    369c:	80 81       	ld	r24, Z
    369e:	82 60       	ori	r24, 0x02	; 2
    36a0:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    36a2:	ae e4       	ldi	r26, 0x4E	; 78
    36a4:	b0 e0       	ldi	r27, 0x00	; 0
    36a6:	ee e4       	ldi	r30, 0x4E	; 78
    36a8:	f0 e0       	ldi	r31, 0x00	; 0
    36aa:	80 81       	ld	r24, Z
    36ac:	88 60       	ori	r24, 0x08	; 8
    36ae:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    36b0:	ae e4       	ldi	r26, 0x4E	; 78
    36b2:	b0 e0       	ldi	r27, 0x00	; 0
    36b4:	ee e4       	ldi	r30, 0x4E	; 78
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	80 81       	ld	r24, Z
    36ba:	80 61       	ori	r24, 0x10	; 16
    36bc:	8c 93       	st	X, r24
    36be:	1c c0       	rjmp	.+56     	; 0x36f8 <Timer1_Init+0x448>
	                                              break;
case timer1_Fast_PWM_ocr_top:                     SET_BIT(TCCR1A,WGM10);
    36c0:	af e4       	ldi	r26, 0x4F	; 79
    36c2:	b0 e0       	ldi	r27, 0x00	; 0
    36c4:	ef e4       	ldi	r30, 0x4F	; 79
    36c6:	f0 e0       	ldi	r31, 0x00	; 0
    36c8:	80 81       	ld	r24, Z
    36ca:	81 60       	ori	r24, 0x01	; 1
    36cc:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    36ce:	af e4       	ldi	r26, 0x4F	; 79
    36d0:	b0 e0       	ldi	r27, 0x00	; 0
    36d2:	ef e4       	ldi	r30, 0x4F	; 79
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	80 81       	ld	r24, Z
    36d8:	82 60       	ori	r24, 0x02	; 2
    36da:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    36dc:	ae e4       	ldi	r26, 0x4E	; 78
    36de:	b0 e0       	ldi	r27, 0x00	; 0
    36e0:	ee e4       	ldi	r30, 0x4E	; 78
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	80 81       	ld	r24, Z
    36e6:	88 60       	ori	r24, 0x08	; 8
    36e8:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    36ea:	ae e4       	ldi	r26, 0x4E	; 78
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	ee e4       	ldi	r30, 0x4E	; 78
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	80 61       	ori	r24, 0x10	; 16
    36f6:	8c 93       	st	X, r24
	                                              break;
}


#if  oc_1==normal_1
switch (oc1_mode)
    36f8:	8b 81       	ldd	r24, Y+3	; 0x03
    36fa:	28 2f       	mov	r18, r24
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	3c 87       	std	Y+12, r19	; 0x0c
    3700:	2b 87       	std	Y+11, r18	; 0x0b
    3702:	8b 85       	ldd	r24, Y+11	; 0x0b
    3704:	9c 85       	ldd	r25, Y+12	; 0x0c
    3706:	81 30       	cpi	r24, 0x01	; 1
    3708:	91 05       	cpc	r25, r1
    370a:	09 f4       	brne	.+2      	; 0x370e <Timer1_Init+0x45e>
    370c:	42 c0       	rjmp	.+132    	; 0x3792 <Timer1_Init+0x4e2>
    370e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3710:	3c 85       	ldd	r19, Y+12	; 0x0c
    3712:	22 30       	cpi	r18, 0x02	; 2
    3714:	31 05       	cpc	r19, r1
    3716:	2c f4       	brge	.+10     	; 0x3722 <Timer1_Init+0x472>
    3718:	8b 85       	ldd	r24, Y+11	; 0x0b
    371a:	9c 85       	ldd	r25, Y+12	; 0x0c
    371c:	00 97       	sbiw	r24, 0x00	; 0
    371e:	71 f0       	breq	.+28     	; 0x373c <Timer1_Init+0x48c>
    3720:	0e c1       	rjmp	.+540    	; 0x393e <Timer1_Init+0x68e>
    3722:	2b 85       	ldd	r18, Y+11	; 0x0b
    3724:	3c 85       	ldd	r19, Y+12	; 0x0c
    3726:	22 30       	cpi	r18, 0x02	; 2
    3728:	31 05       	cpc	r19, r1
    372a:	09 f4       	brne	.+2      	; 0x372e <Timer1_Init+0x47e>
    372c:	7a c0       	rjmp	.+244    	; 0x3822 <Timer1_Init+0x572>
    372e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3730:	9c 85       	ldd	r25, Y+12	; 0x0c
    3732:	83 30       	cpi	r24, 0x03	; 3
    3734:	91 05       	cpc	r25, r1
    3736:	09 f4       	brne	.+2      	; 0x373a <Timer1_Init+0x48a>
    3738:	bc c0       	rjmp	.+376    	; 0x38b2 <Timer1_Init+0x602>
    373a:	01 c1       	rjmp	.+514    	; 0x393e <Timer1_Init+0x68e>
{
case disconnected_1:
						CLR_BIT(TCCR1A,COM1A0);
    373c:	af e4       	ldi	r26, 0x4F	; 79
    373e:	b0 e0       	ldi	r27, 0x00	; 0
    3740:	ef e4       	ldi	r30, 0x4F	; 79
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	80 81       	ld	r24, Z
    3746:	8f 7b       	andi	r24, 0xBF	; 191
    3748:	8c 93       	st	X, r24
						CLR_BIT(TCCR1A,COM1A1);
    374a:	af e4       	ldi	r26, 0x4F	; 79
    374c:	b0 e0       	ldi	r27, 0x00	; 0
    374e:	ef e4       	ldi	r30, 0x4F	; 79
    3750:	f0 e0       	ldi	r31, 0x00	; 0
    3752:	80 81       	ld	r24, Z
    3754:	8f 77       	andi	r24, 0x7F	; 127
    3756:	8c 93       	st	X, r24

						CLR_BIT(TCCR1A,COM1B0);
    3758:	af e4       	ldi	r26, 0x4F	; 79
    375a:	b0 e0       	ldi	r27, 0x00	; 0
    375c:	ef e4       	ldi	r30, 0x4F	; 79
    375e:	f0 e0       	ldi	r31, 0x00	; 0
    3760:	80 81       	ld	r24, Z
    3762:	8f 7e       	andi	r24, 0xEF	; 239
    3764:	8c 93       	st	X, r24
						CLR_BIT(TCCR1A,COM1B1);
    3766:	af e4       	ldi	r26, 0x4F	; 79
    3768:	b0 e0       	ldi	r27, 0x00	; 0
    376a:	ef e4       	ldi	r30, 0x4F	; 79
    376c:	f0 e0       	ldi	r31, 0x00	; 0
    376e:	80 81       	ld	r24, Z
    3770:	8f 7d       	andi	r24, 0xDF	; 223
    3772:	8c 93       	st	X, r24

						CLR_BIT(TCCR1A,COM1C0);
    3774:	af e4       	ldi	r26, 0x4F	; 79
    3776:	b0 e0       	ldi	r27, 0x00	; 0
    3778:	ef e4       	ldi	r30, 0x4F	; 79
    377a:	f0 e0       	ldi	r31, 0x00	; 0
    377c:	80 81       	ld	r24, Z
    377e:	8b 7f       	andi	r24, 0xFB	; 251
    3780:	8c 93       	st	X, r24
						CLR_BIT(TCCR1A,COM1C1);
    3782:	af e4       	ldi	r26, 0x4F	; 79
    3784:	b0 e0       	ldi	r27, 0x00	; 0
    3786:	ef e4       	ldi	r30, 0x4F	; 79
    3788:	f0 e0       	ldi	r31, 0x00	; 0
    378a:	80 81       	ld	r24, Z
    378c:	87 7f       	andi	r24, 0xF7	; 247
    378e:	8c 93       	st	X, r24
    3790:	d6 c0       	rjmp	.+428    	; 0x393e <Timer1_Init+0x68e>
						break;
case Toggle_1:switch(channel_t)
    3792:	8c 81       	ldd	r24, Y+4	; 0x04
    3794:	28 2f       	mov	r18, r24
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	3a 87       	std	Y+10, r19	; 0x0a
    379a:	29 87       	std	Y+9, r18	; 0x09
    379c:	89 85       	ldd	r24, Y+9	; 0x09
    379e:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a0:	81 30       	cpi	r24, 0x01	; 1
    37a2:	91 05       	cpc	r25, r1
    37a4:	89 f0       	breq	.+34     	; 0x37c8 <Timer1_Init+0x518>
    37a6:	29 85       	ldd	r18, Y+9	; 0x09
    37a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    37aa:	22 30       	cpi	r18, 0x02	; 2
    37ac:	31 05       	cpc	r19, r1
    37ae:	0c f4       	brge	.+2      	; 0x37b2 <Timer1_Init+0x502>
    37b0:	c6 c0       	rjmp	.+396    	; 0x393e <Timer1_Init+0x68e>
    37b2:	89 85       	ldd	r24, Y+9	; 0x09
    37b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b6:	82 30       	cpi	r24, 0x02	; 2
    37b8:	91 05       	cpc	r25, r1
    37ba:	a9 f0       	breq	.+42     	; 0x37e6 <Timer1_Init+0x536>
    37bc:	29 85       	ldd	r18, Y+9	; 0x09
    37be:	3a 85       	ldd	r19, Y+10	; 0x0a
    37c0:	23 30       	cpi	r18, 0x03	; 3
    37c2:	31 05       	cpc	r19, r1
    37c4:	f9 f0       	breq	.+62     	; 0x3804 <Timer1_Init+0x554>
    37c6:	bb c0       	rjmp	.+374    	; 0x393e <Timer1_Init+0x68e>
                  {
                      case disconnected_channel:break;
                      case A_Channel:SET_BIT(TCCR1A,COM1A0);
    37c8:	af e4       	ldi	r26, 0x4F	; 79
    37ca:	b0 e0       	ldi	r27, 0x00	; 0
    37cc:	ef e4       	ldi	r30, 0x4F	; 79
    37ce:	f0 e0       	ldi	r31, 0x00	; 0
    37d0:	80 81       	ld	r24, Z
    37d2:	80 64       	ori	r24, 0x40	; 64
    37d4:	8c 93       	st	X, r24
						             CLR_BIT(TCCR1A,COM1A1);
    37d6:	af e4       	ldi	r26, 0x4F	; 79
    37d8:	b0 e0       	ldi	r27, 0x00	; 0
    37da:	ef e4       	ldi	r30, 0x4F	; 79
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	80 81       	ld	r24, Z
    37e0:	8f 77       	andi	r24, 0x7F	; 127
    37e2:	8c 93       	st	X, r24
    37e4:	ac c0       	rjmp	.+344    	; 0x393e <Timer1_Init+0x68e>
						             break;
                      case B_Channel:SET_BIT(TCCR1A,COM1B0);
    37e6:	af e4       	ldi	r26, 0x4F	; 79
    37e8:	b0 e0       	ldi	r27, 0x00	; 0
    37ea:	ef e4       	ldi	r30, 0x4F	; 79
    37ec:	f0 e0       	ldi	r31, 0x00	; 0
    37ee:	80 81       	ld	r24, Z
    37f0:	80 61       	ori	r24, 0x10	; 16
    37f2:	8c 93       	st	X, r24
                      				 CLR_BIT(TCCR1A,COM1B1);
    37f4:	af e4       	ldi	r26, 0x4F	; 79
    37f6:	b0 e0       	ldi	r27, 0x00	; 0
    37f8:	ef e4       	ldi	r30, 0x4F	; 79
    37fa:	f0 e0       	ldi	r31, 0x00	; 0
    37fc:	80 81       	ld	r24, Z
    37fe:	8f 7d       	andi	r24, 0xDF	; 223
    3800:	8c 93       	st	X, r24
    3802:	9d c0       	rjmp	.+314    	; 0x393e <Timer1_Init+0x68e>
                      		         break;
                      case C_Channel:SET_BIT(TCCR1A,COM1C0);
    3804:	af e4       	ldi	r26, 0x4F	; 79
    3806:	b0 e0       	ldi	r27, 0x00	; 0
    3808:	ef e4       	ldi	r30, 0x4F	; 79
    380a:	f0 e0       	ldi	r31, 0x00	; 0
    380c:	80 81       	ld	r24, Z
    380e:	84 60       	ori	r24, 0x04	; 4
    3810:	8c 93       	st	X, r24
                      			     CLR_BIT(TCCR1A,COM1C1);
    3812:	af e4       	ldi	r26, 0x4F	; 79
    3814:	b0 e0       	ldi	r27, 0x00	; 0
    3816:	ef e4       	ldi	r30, 0x4F	; 79
    3818:	f0 e0       	ldi	r31, 0x00	; 0
    381a:	80 81       	ld	r24, Z
    381c:	87 7f       	andi	r24, 0xF7	; 247
    381e:	8c 93       	st	X, r24
    3820:	8e c0       	rjmp	.+284    	; 0x393e <Timer1_Init+0x68e>
                      				 break;
                    }
						break;
case Non_inverting_1:switch(channel_t)
    3822:	8c 81       	ldd	r24, Y+4	; 0x04
    3824:	28 2f       	mov	r18, r24
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	38 87       	std	Y+8, r19	; 0x08
    382a:	2f 83       	std	Y+7, r18	; 0x07
    382c:	8f 81       	ldd	r24, Y+7	; 0x07
    382e:	98 85       	ldd	r25, Y+8	; 0x08
    3830:	81 30       	cpi	r24, 0x01	; 1
    3832:	91 05       	cpc	r25, r1
    3834:	89 f0       	breq	.+34     	; 0x3858 <Timer1_Init+0x5a8>
    3836:	2f 81       	ldd	r18, Y+7	; 0x07
    3838:	38 85       	ldd	r19, Y+8	; 0x08
    383a:	22 30       	cpi	r18, 0x02	; 2
    383c:	31 05       	cpc	r19, r1
    383e:	0c f4       	brge	.+2      	; 0x3842 <Timer1_Init+0x592>
    3840:	7e c0       	rjmp	.+252    	; 0x393e <Timer1_Init+0x68e>
    3842:	8f 81       	ldd	r24, Y+7	; 0x07
    3844:	98 85       	ldd	r25, Y+8	; 0x08
    3846:	82 30       	cpi	r24, 0x02	; 2
    3848:	91 05       	cpc	r25, r1
    384a:	a9 f0       	breq	.+42     	; 0x3876 <Timer1_Init+0x5c6>
    384c:	2f 81       	ldd	r18, Y+7	; 0x07
    384e:	38 85       	ldd	r19, Y+8	; 0x08
    3850:	23 30       	cpi	r18, 0x03	; 3
    3852:	31 05       	cpc	r19, r1
    3854:	f9 f0       	breq	.+62     	; 0x3894 <Timer1_Init+0x5e4>
    3856:	73 c0       	rjmp	.+230    	; 0x393e <Timer1_Init+0x68e>
                        {
                          case disconnected_channel:break;
                          case A_Channel:CLR_BIT(TCCR1A,COM1A0);
    3858:	af e4       	ldi	r26, 0x4F	; 79
    385a:	b0 e0       	ldi	r27, 0x00	; 0
    385c:	ef e4       	ldi	r30, 0x4F	; 79
    385e:	f0 e0       	ldi	r31, 0x00	; 0
    3860:	80 81       	ld	r24, Z
    3862:	8f 7b       	andi	r24, 0xBF	; 191
    3864:	8c 93       	st	X, r24
						                 SET_BIT(TCCR1A,COM1A1);
    3866:	af e4       	ldi	r26, 0x4F	; 79
    3868:	b0 e0       	ldi	r27, 0x00	; 0
    386a:	ef e4       	ldi	r30, 0x4F	; 79
    386c:	f0 e0       	ldi	r31, 0x00	; 0
    386e:	80 81       	ld	r24, Z
    3870:	80 68       	ori	r24, 0x80	; 128
    3872:	8c 93       	st	X, r24
    3874:	64 c0       	rjmp	.+200    	; 0x393e <Timer1_Init+0x68e>
						                 break;
                          case B_Channel:CLR_BIT(TCCR1A,COM1B0);
    3876:	af e4       	ldi	r26, 0x4F	; 79
    3878:	b0 e0       	ldi	r27, 0x00	; 0
    387a:	ef e4       	ldi	r30, 0x4F	; 79
    387c:	f0 e0       	ldi	r31, 0x00	; 0
    387e:	80 81       	ld	r24, Z
    3880:	8f 7e       	andi	r24, 0xEF	; 239
    3882:	8c 93       	st	X, r24
                          				 SET_BIT(TCCR1A,COM1B1);
    3884:	af e4       	ldi	r26, 0x4F	; 79
    3886:	b0 e0       	ldi	r27, 0x00	; 0
    3888:	ef e4       	ldi	r30, 0x4F	; 79
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	80 81       	ld	r24, Z
    388e:	80 62       	ori	r24, 0x20	; 32
    3890:	8c 93       	st	X, r24
    3892:	55 c0       	rjmp	.+170    	; 0x393e <Timer1_Init+0x68e>
                          				 break;
                          case C_Channel:CLR_BIT(TCCR1A,COM1C0);
    3894:	af e4       	ldi	r26, 0x4F	; 79
    3896:	b0 e0       	ldi	r27, 0x00	; 0
    3898:	ef e4       	ldi	r30, 0x4F	; 79
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	80 81       	ld	r24, Z
    389e:	8b 7f       	andi	r24, 0xFB	; 251
    38a0:	8c 93       	st	X, r24
                          				 SET_BIT(TCCR1A,COM1C1);
    38a2:	af e4       	ldi	r26, 0x4F	; 79
    38a4:	b0 e0       	ldi	r27, 0x00	; 0
    38a6:	ef e4       	ldi	r30, 0x4F	; 79
    38a8:	f0 e0       	ldi	r31, 0x00	; 0
    38aa:	80 81       	ld	r24, Z
    38ac:	88 60       	ori	r24, 0x08	; 8
    38ae:	8c 93       	st	X, r24
    38b0:	46 c0       	rjmp	.+140    	; 0x393e <Timer1_Init+0x68e>
                          				 break;
                         }
						break;
case Inverting_1:switch(channel_t)
    38b2:	8c 81       	ldd	r24, Y+4	; 0x04
    38b4:	28 2f       	mov	r18, r24
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	3e 83       	std	Y+6, r19	; 0x06
    38ba:	2d 83       	std	Y+5, r18	; 0x05
    38bc:	8d 81       	ldd	r24, Y+5	; 0x05
    38be:	9e 81       	ldd	r25, Y+6	; 0x06
    38c0:	81 30       	cpi	r24, 0x01	; 1
    38c2:	91 05       	cpc	r25, r1
    38c4:	81 f0       	breq	.+32     	; 0x38e6 <Timer1_Init+0x636>
    38c6:	2d 81       	ldd	r18, Y+5	; 0x05
    38c8:	3e 81       	ldd	r19, Y+6	; 0x06
    38ca:	22 30       	cpi	r18, 0x02	; 2
    38cc:	31 05       	cpc	r19, r1
    38ce:	bc f1       	brlt	.+110    	; 0x393e <Timer1_Init+0x68e>
    38d0:	8d 81       	ldd	r24, Y+5	; 0x05
    38d2:	9e 81       	ldd	r25, Y+6	; 0x06
    38d4:	82 30       	cpi	r24, 0x02	; 2
    38d6:	91 05       	cpc	r25, r1
    38d8:	a9 f0       	breq	.+42     	; 0x3904 <Timer1_Init+0x654>
    38da:	2d 81       	ldd	r18, Y+5	; 0x05
    38dc:	3e 81       	ldd	r19, Y+6	; 0x06
    38de:	23 30       	cpi	r18, 0x03	; 3
    38e0:	31 05       	cpc	r19, r1
    38e2:	f9 f0       	breq	.+62     	; 0x3922 <Timer1_Init+0x672>
    38e4:	2c c0       	rjmp	.+88     	; 0x393e <Timer1_Init+0x68e>
                     {

                       case disconnected_channel:break;
                       case A_Channel:SET_BIT(TCCR1A,COM1A0);
    38e6:	af e4       	ldi	r26, 0x4F	; 79
    38e8:	b0 e0       	ldi	r27, 0x00	; 0
    38ea:	ef e4       	ldi	r30, 0x4F	; 79
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	80 81       	ld	r24, Z
    38f0:	80 64       	ori	r24, 0x40	; 64
    38f2:	8c 93       	st	X, r24
                                      SET_BIT(TCCR1A,COM1A1);
    38f4:	af e4       	ldi	r26, 0x4F	; 79
    38f6:	b0 e0       	ldi	r27, 0x00	; 0
    38f8:	ef e4       	ldi	r30, 0x4F	; 79
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	80 81       	ld	r24, Z
    38fe:	80 68       	ori	r24, 0x80	; 128
    3900:	8c 93       	st	X, r24
    3902:	1d c0       	rjmp	.+58     	; 0x393e <Timer1_Init+0x68e>
                                      break;
                       case B_Channel:SET_BIT(TCCR1A,COM1B0);
    3904:	af e4       	ldi	r26, 0x4F	; 79
    3906:	b0 e0       	ldi	r27, 0x00	; 0
    3908:	ef e4       	ldi	r30, 0x4F	; 79
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	80 81       	ld	r24, Z
    390e:	80 61       	ori	r24, 0x10	; 16
    3910:	8c 93       	st	X, r24
  				                      SET_BIT(TCCR1A,COM1B1);
    3912:	af e4       	ldi	r26, 0x4F	; 79
    3914:	b0 e0       	ldi	r27, 0x00	; 0
    3916:	ef e4       	ldi	r30, 0x4F	; 79
    3918:	f0 e0       	ldi	r31, 0x00	; 0
    391a:	80 81       	ld	r24, Z
    391c:	80 62       	ori	r24, 0x20	; 32
    391e:	8c 93       	st	X, r24
    3920:	0e c0       	rjmp	.+28     	; 0x393e <Timer1_Init+0x68e>
  			                       	  break;
                       case C_Channel:SET_BIT(TCCR1A,COM1C0);
    3922:	af e4       	ldi	r26, 0x4F	; 79
    3924:	b0 e0       	ldi	r27, 0x00	; 0
    3926:	ef e4       	ldi	r30, 0x4F	; 79
    3928:	f0 e0       	ldi	r31, 0x00	; 0
    392a:	80 81       	ld	r24, Z
    392c:	84 60       	ori	r24, 0x04	; 4
    392e:	8c 93       	st	X, r24
  				                      SET_BIT(TCCR1A,COM1C1);
    3930:	af e4       	ldi	r26, 0x4F	; 79
    3932:	b0 e0       	ldi	r27, 0x00	; 0
    3934:	ef e4       	ldi	r30, 0x4F	; 79
    3936:	f0 e0       	ldi	r31, 0x00	; 0
    3938:	80 81       	ld	r24, Z
    393a:	88 60       	ori	r24, 0x08	; 8
    393c:	8c 93       	st	X, r24
							break;

}

#endif
	TCCR1B&=0XF8;
    393e:	ae e4       	ldi	r26, 0x4E	; 78
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	ee e4       	ldi	r30, 0x4E	; 78
    3944:	f0 e0       	ldi	r31, 0x00	; 0
    3946:	80 81       	ld	r24, Z
    3948:	88 7f       	andi	r24, 0xF8	; 248
    394a:	8c 93       	st	X, r24
	TCCR1B|=scaler;
    394c:	ae e4       	ldi	r26, 0x4E	; 78
    394e:	b0 e0       	ldi	r27, 0x00	; 0
    3950:	ee e4       	ldi	r30, 0x4E	; 78
    3952:	f0 e0       	ldi	r31, 0x00	; 0
    3954:	90 81       	ld	r25, Z
    3956:	8a 81       	ldd	r24, Y+2	; 0x02
    3958:	89 2b       	or	r24, r25
    395a:	8c 93       	st	X, r24

}
    395c:	2e 96       	adiw	r28, 0x0e	; 14
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	f8 94       	cli
    3962:	de bf       	out	0x3e, r29	; 62
    3964:	0f be       	out	0x3f, r0	; 63
    3966:	cd bf       	out	0x3d, r28	; 61
    3968:	cf 91       	pop	r28
    396a:	df 91       	pop	r29
    396c:	08 95       	ret

0000396e <Timer1_InputCaptureEdge>:

void Timer1_InputCaptureEdge(Edge_type edge)
{
    396e:	df 93       	push	r29
    3970:	cf 93       	push	r28
    3972:	0f 92       	push	r0
    3974:	cd b7       	in	r28, 0x3d	; 61
    3976:	de b7       	in	r29, 0x3e	; 62
    3978:	89 83       	std	Y+1, r24	; 0x01
	if(edge==Rising)
    397a:	89 81       	ldd	r24, Y+1	; 0x01
    397c:	81 30       	cpi	r24, 0x01	; 1
    397e:	41 f4       	brne	.+16     	; 0x3990 <Timer1_InputCaptureEdge+0x22>
		SET_BIT(TCCR1B,ICES1);
    3980:	ae e4       	ldi	r26, 0x4E	; 78
    3982:	b0 e0       	ldi	r27, 0x00	; 0
    3984:	ee e4       	ldi	r30, 0x4E	; 78
    3986:	f0 e0       	ldi	r31, 0x00	; 0
    3988:	80 81       	ld	r24, Z
    398a:	80 64       	ori	r24, 0x40	; 64
    398c:	8c 93       	st	X, r24
    398e:	0a c0       	rjmp	.+20     	; 0x39a4 <Timer1_InputCaptureEdge+0x36>


	else if(edge==Falling)
    3990:	89 81       	ldd	r24, Y+1	; 0x01
    3992:	88 23       	and	r24, r24
    3994:	39 f4       	brne	.+14     	; 0x39a4 <Timer1_InputCaptureEdge+0x36>
		CLR_BIT(TCCR1B,ICES1);
    3996:	ae e4       	ldi	r26, 0x4E	; 78
    3998:	b0 e0       	ldi	r27, 0x00	; 0
    399a:	ee e4       	ldi	r30, 0x4E	; 78
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	80 81       	ld	r24, Z
    39a0:	8f 7b       	andi	r24, 0xBF	; 191
    39a2:	8c 93       	st	X, r24

}
    39a4:	0f 90       	pop	r0
    39a6:	cf 91       	pop	r28
    39a8:	df 91       	pop	r29
    39aa:	08 95       	ret

000039ac <Timer1_ICU_InterruptEnable>:

void Timer1_ICU_InterruptEnable(void)
{
    39ac:	df 93       	push	r29
    39ae:	cf 93       	push	r28
    39b0:	cd b7       	in	r28, 0x3d	; 61
    39b2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    39b4:	a7 e5       	ldi	r26, 0x57	; 87
    39b6:	b0 e0       	ldi	r27, 0x00	; 0
    39b8:	e7 e5       	ldi	r30, 0x57	; 87
    39ba:	f0 e0       	ldi	r31, 0x00	; 0
    39bc:	80 81       	ld	r24, Z
    39be:	80 62       	ori	r24, 0x20	; 32
    39c0:	8c 93       	st	X, r24
}
    39c2:	cf 91       	pop	r28
    39c4:	df 91       	pop	r29
    39c6:	08 95       	ret

000039c8 <Timer1_ICU_InterruptDisable>:
void Timer1_ICU_InterruptDisable(void)
{
    39c8:	df 93       	push	r29
    39ca:	cf 93       	push	r28
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TICIE1);
    39d0:	a7 e5       	ldi	r26, 0x57	; 87
    39d2:	b0 e0       	ldi	r27, 0x00	; 0
    39d4:	e7 e5       	ldi	r30, 0x57	; 87
    39d6:	f0 e0       	ldi	r31, 0x00	; 0
    39d8:	80 81       	ld	r24, Z
    39da:	8f 7d       	andi	r24, 0xDF	; 223
    39dc:	8c 93       	st	X, r24
}
    39de:	cf 91       	pop	r28
    39e0:	df 91       	pop	r29
    39e2:	08 95       	ret

000039e4 <Timer1_OV_InterruptEnable>:
void Timer1_OV_InterruptEnable(void)
{
    39e4:	df 93       	push	r29
    39e6:	cf 93       	push	r28
    39e8:	cd b7       	in	r28, 0x3d	; 61
    39ea:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE1);
    39ec:	a7 e5       	ldi	r26, 0x57	; 87
    39ee:	b0 e0       	ldi	r27, 0x00	; 0
    39f0:	e7 e5       	ldi	r30, 0x57	; 87
    39f2:	f0 e0       	ldi	r31, 0x00	; 0
    39f4:	80 81       	ld	r24, Z
    39f6:	84 60       	ori	r24, 0x04	; 4
    39f8:	8c 93       	st	X, r24
}
    39fa:	cf 91       	pop	r28
    39fc:	df 91       	pop	r29
    39fe:	08 95       	ret

00003a00 <Timer1_OV_InterruptDisable>:
void Timer1_OV_InterruptDisable(void)
{
    3a00:	df 93       	push	r29
    3a02:	cf 93       	push	r28
    3a04:	cd b7       	in	r28, 0x3d	; 61
    3a06:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE1);
    3a08:	a7 e5       	ldi	r26, 0x57	; 87
    3a0a:	b0 e0       	ldi	r27, 0x00	; 0
    3a0c:	e7 e5       	ldi	r30, 0x57	; 87
    3a0e:	f0 e0       	ldi	r31, 0x00	; 0
    3a10:	80 81       	ld	r24, Z
    3a12:	8b 7f       	andi	r24, 0xFB	; 251
    3a14:	8c 93       	st	X, r24
}
    3a16:	cf 91       	pop	r28
    3a18:	df 91       	pop	r29
    3a1a:	08 95       	ret

00003a1c <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
    3a1c:	df 93       	push	r29
    3a1e:	cf 93       	push	r28
    3a20:	cd b7       	in	r28, 0x3d	; 61
    3a22:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1A);
    3a24:	a7 e5       	ldi	r26, 0x57	; 87
    3a26:	b0 e0       	ldi	r27, 0x00	; 0
    3a28:	e7 e5       	ldi	r30, 0x57	; 87
    3a2a:	f0 e0       	ldi	r31, 0x00	; 0
    3a2c:	80 81       	ld	r24, Z
    3a2e:	80 61       	ori	r24, 0x10	; 16
    3a30:	8c 93       	st	X, r24
}
    3a32:	cf 91       	pop	r28
    3a34:	df 91       	pop	r29
    3a36:	08 95       	ret

00003a38 <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
    3a38:	df 93       	push	r29
    3a3a:	cf 93       	push	r28
    3a3c:	cd b7       	in	r28, 0x3d	; 61
    3a3e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE1A);
    3a40:	a7 e5       	ldi	r26, 0x57	; 87
    3a42:	b0 e0       	ldi	r27, 0x00	; 0
    3a44:	e7 e5       	ldi	r30, 0x57	; 87
    3a46:	f0 e0       	ldi	r31, 0x00	; 0
    3a48:	80 81       	ld	r24, Z
    3a4a:	8f 7e       	andi	r24, 0xEF	; 239
    3a4c:	8c 93       	st	X, r24
}
    3a4e:	cf 91       	pop	r28
    3a50:	df 91       	pop	r29
    3a52:	08 95       	ret

00003a54 <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
    3a54:	df 93       	push	r29
    3a56:	cf 93       	push	r28
    3a58:	cd b7       	in	r28, 0x3d	; 61
    3a5a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1B);
    3a5c:	a7 e5       	ldi	r26, 0x57	; 87
    3a5e:	b0 e0       	ldi	r27, 0x00	; 0
    3a60:	e7 e5       	ldi	r30, 0x57	; 87
    3a62:	f0 e0       	ldi	r31, 0x00	; 0
    3a64:	80 81       	ld	r24, Z
    3a66:	88 60       	ori	r24, 0x08	; 8
    3a68:	8c 93       	st	X, r24
}
    3a6a:	cf 91       	pop	r28
    3a6c:	df 91       	pop	r29
    3a6e:	08 95       	ret

00003a70 <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
    3a70:	df 93       	push	r29
    3a72:	cf 93       	push	r28
    3a74:	cd b7       	in	r28, 0x3d	; 61
    3a76:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE1B);
    3a78:	a7 e5       	ldi	r26, 0x57	; 87
    3a7a:	b0 e0       	ldi	r27, 0x00	; 0
    3a7c:	e7 e5       	ldi	r30, 0x57	; 87
    3a7e:	f0 e0       	ldi	r31, 0x00	; 0
    3a80:	80 81       	ld	r24, Z
    3a82:	87 7f       	andi	r24, 0xF7	; 247
    3a84:	8c 93       	st	X, r24
}
    3a86:	cf 91       	pop	r28
    3a88:	df 91       	pop	r29
    3a8a:	08 95       	ret

00003a8c <Timer1_OCC_InterruptEnable>:

void Timer1_OCC_InterruptEnable(void)
{
    3a8c:	df 93       	push	r29
    3a8e:	cf 93       	push	r28
    3a90:	cd b7       	in	r28, 0x3d	; 61
    3a92:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,OCIE1C);
    3a94:	ad e7       	ldi	r26, 0x7D	; 125
    3a96:	b0 e0       	ldi	r27, 0x00	; 0
    3a98:	ed e7       	ldi	r30, 0x7D	; 125
    3a9a:	f0 e0       	ldi	r31, 0x00	; 0
    3a9c:	80 81       	ld	r24, Z
    3a9e:	81 60       	ori	r24, 0x01	; 1
    3aa0:	8c 93       	st	X, r24
}
    3aa2:	cf 91       	pop	r28
    3aa4:	df 91       	pop	r29
    3aa6:	08 95       	ret

00003aa8 <Timer1_OCC_InterruptDisable>:
void Timer1_OCC_InterruptDisable(void)
{
    3aa8:	df 93       	push	r29
    3aaa:	cf 93       	push	r28
    3aac:	cd b7       	in	r28, 0x3d	; 61
    3aae:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,OCIE1C);
    3ab0:	ad e7       	ldi	r26, 0x7D	; 125
    3ab2:	b0 e0       	ldi	r27, 0x00	; 0
    3ab4:	ed e7       	ldi	r30, 0x7D	; 125
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	80 81       	ld	r24, Z
    3aba:	8e 7f       	andi	r24, 0xFE	; 254
    3abc:	8c 93       	st	X, r24
}
    3abe:	cf 91       	pop	r28
    3ac0:	df 91       	pop	r29
    3ac2:	08 95       	ret

00003ac4 <TMR1_uint16_GetICUValue>:


uint16  TMR1_uint16_GetICUValue(void)
{
    3ac4:	df 93       	push	r29
    3ac6:	cf 93       	push	r28
    3ac8:	00 d0       	rcall	.+0      	; 0x3aca <TMR1_uint16_GetICUValue+0x6>
    3aca:	cd b7       	in	r28, 0x3d	; 61
    3acc:	de b7       	in	r29, 0x3e	; 62
	uint16 ret_val;
		ret_val=ICR1L|(ICR1H<<8);
    3ace:	e6 e4       	ldi	r30, 0x46	; 70
    3ad0:	f0 e0       	ldi	r31, 0x00	; 0
    3ad2:	80 81       	ld	r24, Z
    3ad4:	28 2f       	mov	r18, r24
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	e7 e4       	ldi	r30, 0x47	; 71
    3ada:	f0 e0       	ldi	r31, 0x00	; 0
    3adc:	80 81       	ld	r24, Z
    3ade:	88 2f       	mov	r24, r24
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	98 2f       	mov	r25, r24
    3ae4:	88 27       	eor	r24, r24
    3ae6:	82 2b       	or	r24, r18
    3ae8:	93 2b       	or	r25, r19
    3aea:	9a 83       	std	Y+2, r25	; 0x02
    3aec:	89 83       	std	Y+1, r24	; 0x01
		return ret_val;
    3aee:	89 81       	ldd	r24, Y+1	; 0x01
    3af0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3af2:	0f 90       	pop	r0
    3af4:	0f 90       	pop	r0
    3af6:	cf 91       	pop	r28
    3af8:	df 91       	pop	r29
    3afa:	08 95       	ret

00003afc <TMR1_uint16_GetTimerValue>:

uint16  TMR1_uint16_GetTimerValue(void)
{
    3afc:	df 93       	push	r29
    3afe:	cf 93       	push	r28
    3b00:	00 d0       	rcall	.+0      	; 0x3b02 <TMR1_uint16_GetTimerValue+0x6>
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62

	uint16 ret_val;
	ret_val=TCNT1L|(TCNT1H<<8);
    3b06:	ec e4       	ldi	r30, 0x4C	; 76
    3b08:	f0 e0       	ldi	r31, 0x00	; 0
    3b0a:	80 81       	ld	r24, Z
    3b0c:	28 2f       	mov	r18, r24
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	ed e4       	ldi	r30, 0x4D	; 77
    3b12:	f0 e0       	ldi	r31, 0x00	; 0
    3b14:	80 81       	ld	r24, Z
    3b16:	88 2f       	mov	r24, r24
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	98 2f       	mov	r25, r24
    3b1c:	88 27       	eor	r24, r24
    3b1e:	82 2b       	or	r24, r18
    3b20:	93 2b       	or	r25, r19
    3b22:	9a 83       	std	Y+2, r25	; 0x02
    3b24:	89 83       	std	Y+1, r24	; 0x01
	return ret_val;
    3b26:	89 81       	ldd	r24, Y+1	; 0x01
    3b28:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3b2a:	0f 90       	pop	r0
    3b2c:	0f 90       	pop	r0
    3b2e:	cf 91       	pop	r28
    3b30:	df 91       	pop	r29
    3b32:	08 95       	ret

00003b34 <TMR1_void_SetTimerValue>:


void  TMR1_void_SetTimerValue(uint16 tmr_val)
{
    3b34:	df 93       	push	r29
    3b36:	cf 93       	push	r28
    3b38:	00 d0       	rcall	.+0      	; 0x3b3a <TMR1_void_SetTimerValue+0x6>
    3b3a:	cd b7       	in	r28, 0x3d	; 61
    3b3c:	de b7       	in	r29, 0x3e	; 62
    3b3e:	9a 83       	std	Y+2, r25	; 0x02
    3b40:	89 83       	std	Y+1, r24	; 0x01
TCNT1L=(uint8)tmr_val;
    3b42:	ec e4       	ldi	r30, 0x4C	; 76
    3b44:	f0 e0       	ldi	r31, 0x00	; 0
    3b46:	89 81       	ldd	r24, Y+1	; 0x01
    3b48:	80 83       	st	Z, r24
TCNT1H=(uint8)(tmr_val>>8);
    3b4a:	ed e4       	ldi	r30, 0x4D	; 77
    3b4c:	f0 e0       	ldi	r31, 0x00	; 0
    3b4e:	89 81       	ldd	r24, Y+1	; 0x01
    3b50:	9a 81       	ldd	r25, Y+2	; 0x02
    3b52:	89 2f       	mov	r24, r25
    3b54:	99 27       	eor	r25, r25
    3b56:	80 83       	st	Z, r24
}
    3b58:	0f 90       	pop	r0
    3b5a:	0f 90       	pop	r0
    3b5c:	cf 91       	pop	r28
    3b5e:	df 91       	pop	r29
    3b60:	08 95       	ret

00003b62 <TMR1_void_Set_OCR_TimerValue>:

void  TMR1_void_Set_OCR_TimerValue(uint16 oc_val,OC1_ch_type ch)
{
    3b62:	df 93       	push	r29
    3b64:	cf 93       	push	r28
    3b66:	00 d0       	rcall	.+0      	; 0x3b68 <TMR1_void_Set_OCR_TimerValue+0x6>
    3b68:	00 d0       	rcall	.+0      	; 0x3b6a <TMR1_void_Set_OCR_TimerValue+0x8>
    3b6a:	0f 92       	push	r0
    3b6c:	cd b7       	in	r28, 0x3d	; 61
    3b6e:	de b7       	in	r29, 0x3e	; 62
    3b70:	9a 83       	std	Y+2, r25	; 0x02
    3b72:	89 83       	std	Y+1, r24	; 0x01
    3b74:	6b 83       	std	Y+3, r22	; 0x03
	switch(ch){
    3b76:	8b 81       	ldd	r24, Y+3	; 0x03
    3b78:	28 2f       	mov	r18, r24
    3b7a:	30 e0       	ldi	r19, 0x00	; 0
    3b7c:	3d 83       	std	Y+5, r19	; 0x05
    3b7e:	2c 83       	std	Y+4, r18	; 0x04
    3b80:	8c 81       	ldd	r24, Y+4	; 0x04
    3b82:	9d 81       	ldd	r25, Y+5	; 0x05
    3b84:	81 30       	cpi	r24, 0x01	; 1
    3b86:	91 05       	cpc	r25, r1
    3b88:	81 f0       	breq	.+32     	; 0x3baa <TMR1_void_Set_OCR_TimerValue+0x48>
    3b8a:	2c 81       	ldd	r18, Y+4	; 0x04
    3b8c:	3d 81       	ldd	r19, Y+5	; 0x05
    3b8e:	22 30       	cpi	r18, 0x02	; 2
    3b90:	31 05       	cpc	r19, r1
    3b92:	74 f1       	brlt	.+92     	; 0x3bf0 <TMR1_void_Set_OCR_TimerValue+0x8e>
    3b94:	8c 81       	ldd	r24, Y+4	; 0x04
    3b96:	9d 81       	ldd	r25, Y+5	; 0x05
    3b98:	82 30       	cpi	r24, 0x02	; 2
    3b9a:	91 05       	cpc	r25, r1
    3b9c:	91 f0       	breq	.+36     	; 0x3bc2 <TMR1_void_Set_OCR_TimerValue+0x60>
    3b9e:	2c 81       	ldd	r18, Y+4	; 0x04
    3ba0:	3d 81       	ldd	r19, Y+5	; 0x05
    3ba2:	23 30       	cpi	r18, 0x03	; 3
    3ba4:	31 05       	cpc	r19, r1
    3ba6:	c9 f0       	breq	.+50     	; 0x3bda <TMR1_void_Set_OCR_TimerValue+0x78>
    3ba8:	23 c0       	rjmp	.+70     	; 0x3bf0 <TMR1_void_Set_OCR_TimerValue+0x8e>
	case disconnected_channel:break;
	case A_Channel:OCR1AL=(uint8)oc_val;
    3baa:	ea e4       	ldi	r30, 0x4A	; 74
    3bac:	f0 e0       	ldi	r31, 0x00	; 0
    3bae:	89 81       	ldd	r24, Y+1	; 0x01
    3bb0:	80 83       	st	Z, r24
	               OCR1AH=(uint8)(oc_val>>8);
    3bb2:	eb e4       	ldi	r30, 0x4B	; 75
    3bb4:	f0 e0       	ldi	r31, 0x00	; 0
    3bb6:	89 81       	ldd	r24, Y+1	; 0x01
    3bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bba:	89 2f       	mov	r24, r25
    3bbc:	99 27       	eor	r25, r25
    3bbe:	80 83       	st	Z, r24
    3bc0:	17 c0       	rjmp	.+46     	; 0x3bf0 <TMR1_void_Set_OCR_TimerValue+0x8e>
	               break;
	case B_Channel:OCR1BL=(uint8)oc_val;
    3bc2:	e8 e4       	ldi	r30, 0x48	; 72
    3bc4:	f0 e0       	ldi	r31, 0x00	; 0
    3bc6:	89 81       	ldd	r24, Y+1	; 0x01
    3bc8:	80 83       	st	Z, r24
		           OCR1BH=(uint8)(oc_val>>8);
    3bca:	e9 e4       	ldi	r30, 0x49	; 73
    3bcc:	f0 e0       	ldi	r31, 0x00	; 0
    3bce:	89 81       	ldd	r24, Y+1	; 0x01
    3bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd2:	89 2f       	mov	r24, r25
    3bd4:	99 27       	eor	r25, r25
    3bd6:	80 83       	st	Z, r24
    3bd8:	0b c0       	rjmp	.+22     	; 0x3bf0 <TMR1_void_Set_OCR_TimerValue+0x8e>
		           break;
	case C_Channel:OCR1CL=(uint8)oc_val;
    3bda:	e8 e7       	ldi	r30, 0x78	; 120
    3bdc:	f0 e0       	ldi	r31, 0x00	; 0
    3bde:	89 81       	ldd	r24, Y+1	; 0x01
    3be0:	80 83       	st	Z, r24
		           OCR1CH=(uint8)(oc_val>>8);
    3be2:	e9 e7       	ldi	r30, 0x79	; 121
    3be4:	f0 e0       	ldi	r31, 0x00	; 0
    3be6:	89 81       	ldd	r24, Y+1	; 0x01
    3be8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bea:	89 2f       	mov	r24, r25
    3bec:	99 27       	eor	r25, r25
    3bee:	80 83       	st	Z, r24
		           break;
	}

}
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	cf 91       	pop	r28
    3bfc:	df 91       	pop	r29
    3bfe:	08 95       	ret

00003c00 <Timer0_Init>:
#include"Timer0.h"
void Timer0_Init(timer0_mode_type mode,prescaler0_type scaler,OC0_mode_type oc_mode)
{
    3c00:	df 93       	push	r29
    3c02:	cf 93       	push	r28
    3c04:	cd b7       	in	r28, 0x3d	; 61
    3c06:	de b7       	in	r29, 0x3e	; 62
    3c08:	27 97       	sbiw	r28, 0x07	; 7
    3c0a:	0f b6       	in	r0, 0x3f	; 63
    3c0c:	f8 94       	cli
    3c0e:	de bf       	out	0x3e, r29	; 62
    3c10:	0f be       	out	0x3f, r0	; 63
    3c12:	cd bf       	out	0x3d, r28	; 61
    3c14:	89 83       	std	Y+1, r24	; 0x01
    3c16:	6a 83       	std	Y+2, r22	; 0x02
    3c18:	4b 83       	std	Y+3, r20	; 0x03
	switch (mode)
    3c1a:	89 81       	ldd	r24, Y+1	; 0x01
    3c1c:	28 2f       	mov	r18, r24
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	3f 83       	std	Y+7, r19	; 0x07
    3c22:	2e 83       	std	Y+6, r18	; 0x06
    3c24:	8e 81       	ldd	r24, Y+6	; 0x06
    3c26:	9f 81       	ldd	r25, Y+7	; 0x07
    3c28:	81 30       	cpi	r24, 0x01	; 1
    3c2a:	91 05       	cpc	r25, r1
    3c2c:	21 f1       	breq	.+72     	; 0x3c76 <Timer0_Init+0x76>
    3c2e:	2e 81       	ldd	r18, Y+6	; 0x06
    3c30:	3f 81       	ldd	r19, Y+7	; 0x07
    3c32:	22 30       	cpi	r18, 0x02	; 2
    3c34:	31 05       	cpc	r19, r1
    3c36:	2c f4       	brge	.+10     	; 0x3c42 <Timer0_Init+0x42>
    3c38:	8e 81       	ldd	r24, Y+6	; 0x06
    3c3a:	9f 81       	ldd	r25, Y+7	; 0x07
    3c3c:	00 97       	sbiw	r24, 0x00	; 0
    3c3e:	61 f0       	breq	.+24     	; 0x3c58 <Timer0_Init+0x58>
    3c40:	46 c0       	rjmp	.+140    	; 0x3cce <Timer0_Init+0xce>
    3c42:	2e 81       	ldd	r18, Y+6	; 0x06
    3c44:	3f 81       	ldd	r19, Y+7	; 0x07
    3c46:	22 30       	cpi	r18, 0x02	; 2
    3c48:	31 05       	cpc	r19, r1
    3c4a:	21 f1       	breq	.+72     	; 0x3c94 <Timer0_Init+0x94>
    3c4c:	8e 81       	ldd	r24, Y+6	; 0x06
    3c4e:	9f 81       	ldd	r25, Y+7	; 0x07
    3c50:	83 30       	cpi	r24, 0x03	; 3
    3c52:	91 05       	cpc	r25, r1
    3c54:	71 f1       	breq	.+92     	; 0x3cb2 <Timer0_Init+0xb2>
    3c56:	3b c0       	rjmp	.+118    	; 0x3cce <Timer0_Init+0xce>
				{
					case Normal_mode:
						CLR_BIT(TCCR0,WGM00);
    3c58:	a3 e5       	ldi	r26, 0x53	; 83
    3c5a:	b0 e0       	ldi	r27, 0x00	; 0
    3c5c:	e3 e5       	ldi	r30, 0x53	; 83
    3c5e:	f0 e0       	ldi	r31, 0x00	; 0
    3c60:	80 81       	ld	r24, Z
    3c62:	8f 7b       	andi	r24, 0xBF	; 191
    3c64:	8c 93       	st	X, r24
						CLR_BIT(TCCR0,WGM01);
    3c66:	a3 e5       	ldi	r26, 0x53	; 83
    3c68:	b0 e0       	ldi	r27, 0x00	; 0
    3c6a:	e3 e5       	ldi	r30, 0x53	; 83
    3c6c:	f0 e0       	ldi	r31, 0x00	; 0
    3c6e:	80 81       	ld	r24, Z
    3c70:	87 7f       	andi	r24, 0xF7	; 247
    3c72:	8c 93       	st	X, r24
    3c74:	2c c0       	rjmp	.+88     	; 0x3cce <Timer0_Init+0xce>

					break;
					case Phasecorrect_mode:
						SET_BIT(TCCR0,WGM00);
    3c76:	a3 e5       	ldi	r26, 0x53	; 83
    3c78:	b0 e0       	ldi	r27, 0x00	; 0
    3c7a:	e3 e5       	ldi	r30, 0x53	; 83
    3c7c:	f0 e0       	ldi	r31, 0x00	; 0
    3c7e:	80 81       	ld	r24, Z
    3c80:	80 64       	ori	r24, 0x40	; 64
    3c82:	8c 93       	st	X, r24
						CLR_BIT(TCCR0,WGM01);
    3c84:	a3 e5       	ldi	r26, 0x53	; 83
    3c86:	b0 e0       	ldi	r27, 0x00	; 0
    3c88:	e3 e5       	ldi	r30, 0x53	; 83
    3c8a:	f0 e0       	ldi	r31, 0x00	; 0
    3c8c:	80 81       	ld	r24, Z
    3c8e:	87 7f       	andi	r24, 0xF7	; 247
    3c90:	8c 93       	st	X, r24
    3c92:	1d c0       	rjmp	.+58     	; 0x3cce <Timer0_Init+0xce>
					break;
					case CTC_mode:
						CLR_BIT(TCCR0,WGM00);
    3c94:	a3 e5       	ldi	r26, 0x53	; 83
    3c96:	b0 e0       	ldi	r27, 0x00	; 0
    3c98:	e3 e5       	ldi	r30, 0x53	; 83
    3c9a:	f0 e0       	ldi	r31, 0x00	; 0
    3c9c:	80 81       	ld	r24, Z
    3c9e:	8f 7b       	andi	r24, 0xBF	; 191
    3ca0:	8c 93       	st	X, r24
						SET_BIT(TCCR0,WGM01);
    3ca2:	a3 e5       	ldi	r26, 0x53	; 83
    3ca4:	b0 e0       	ldi	r27, 0x00	; 0
    3ca6:	e3 e5       	ldi	r30, 0x53	; 83
    3ca8:	f0 e0       	ldi	r31, 0x00	; 0
    3caa:	80 81       	ld	r24, Z
    3cac:	88 60       	ori	r24, 0x08	; 8
    3cae:	8c 93       	st	X, r24
    3cb0:	0e c0       	rjmp	.+28     	; 0x3cce <Timer0_Init+0xce>

					break;
					case FastPWM_mode:
						SET_BIT(TCCR0,WGM00);
    3cb2:	a3 e5       	ldi	r26, 0x53	; 83
    3cb4:	b0 e0       	ldi	r27, 0x00	; 0
    3cb6:	e3 e5       	ldi	r30, 0x53	; 83
    3cb8:	f0 e0       	ldi	r31, 0x00	; 0
    3cba:	80 81       	ld	r24, Z
    3cbc:	80 64       	ori	r24, 0x40	; 64
    3cbe:	8c 93       	st	X, r24
						SET_BIT(TCCR0,WGM01);
    3cc0:	a3 e5       	ldi	r26, 0x53	; 83
    3cc2:	b0 e0       	ldi	r27, 0x00	; 0
    3cc4:	e3 e5       	ldi	r30, 0x53	; 83
    3cc6:	f0 e0       	ldi	r31, 0x00	; 0
    3cc8:	80 81       	ld	r24, Z
    3cca:	88 60       	ori	r24, 0x08	; 8
    3ccc:	8c 93       	st	X, r24
					break;
				}
#if  oc==normal
	switch (oc_mode)
    3cce:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd0:	28 2f       	mov	r18, r24
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	3d 83       	std	Y+5, r19	; 0x05
    3cd6:	2c 83       	std	Y+4, r18	; 0x04
    3cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    3cda:	9d 81       	ldd	r25, Y+5	; 0x05
    3cdc:	81 30       	cpi	r24, 0x01	; 1
    3cde:	91 05       	cpc	r25, r1
    3ce0:	21 f1       	breq	.+72     	; 0x3d2a <Timer0_Init+0x12a>
    3ce2:	2c 81       	ldd	r18, Y+4	; 0x04
    3ce4:	3d 81       	ldd	r19, Y+5	; 0x05
    3ce6:	22 30       	cpi	r18, 0x02	; 2
    3ce8:	31 05       	cpc	r19, r1
    3cea:	2c f4       	brge	.+10     	; 0x3cf6 <Timer0_Init+0xf6>
    3cec:	8c 81       	ldd	r24, Y+4	; 0x04
    3cee:	9d 81       	ldd	r25, Y+5	; 0x05
    3cf0:	00 97       	sbiw	r24, 0x00	; 0
    3cf2:	61 f0       	breq	.+24     	; 0x3d0c <Timer0_Init+0x10c>
    3cf4:	46 c0       	rjmp	.+140    	; 0x3d82 <Timer0_Init+0x182>
    3cf6:	2c 81       	ldd	r18, Y+4	; 0x04
    3cf8:	3d 81       	ldd	r19, Y+5	; 0x05
    3cfa:	22 30       	cpi	r18, 0x02	; 2
    3cfc:	31 05       	cpc	r19, r1
    3cfe:	21 f1       	breq	.+72     	; 0x3d48 <Timer0_Init+0x148>
    3d00:	8c 81       	ldd	r24, Y+4	; 0x04
    3d02:	9d 81       	ldd	r25, Y+5	; 0x05
    3d04:	83 30       	cpi	r24, 0x03	; 3
    3d06:	91 05       	cpc	r25, r1
    3d08:	71 f1       	breq	.+92     	; 0x3d66 <Timer0_Init+0x166>
    3d0a:	3b c0       	rjmp	.+118    	; 0x3d82 <Timer0_Init+0x182>
				{
					case disconnected:
						CLR_BIT(TCCR0,COM00);
    3d0c:	a3 e5       	ldi	r26, 0x53	; 83
    3d0e:	b0 e0       	ldi	r27, 0x00	; 0
    3d10:	e3 e5       	ldi	r30, 0x53	; 83
    3d12:	f0 e0       	ldi	r31, 0x00	; 0
    3d14:	80 81       	ld	r24, Z
    3d16:	8f 7e       	andi	r24, 0xEF	; 239
    3d18:	8c 93       	st	X, r24
						CLR_BIT(TCCR0,COM01);
    3d1a:	a3 e5       	ldi	r26, 0x53	; 83
    3d1c:	b0 e0       	ldi	r27, 0x00	; 0
    3d1e:	e3 e5       	ldi	r30, 0x53	; 83
    3d20:	f0 e0       	ldi	r31, 0x00	; 0
    3d22:	80 81       	ld	r24, Z
    3d24:	8f 7d       	andi	r24, 0xDF	; 223
    3d26:	8c 93       	st	X, r24
    3d28:	2c c0       	rjmp	.+88     	; 0x3d82 <Timer0_Init+0x182>
						break;
					case Toggle:
						SET_BIT(TCCR0,COM00);
    3d2a:	a3 e5       	ldi	r26, 0x53	; 83
    3d2c:	b0 e0       	ldi	r27, 0x00	; 0
    3d2e:	e3 e5       	ldi	r30, 0x53	; 83
    3d30:	f0 e0       	ldi	r31, 0x00	; 0
    3d32:	80 81       	ld	r24, Z
    3d34:	80 61       	ori	r24, 0x10	; 16
    3d36:	8c 93       	st	X, r24
						CLR_BIT(TCCR0,COM01);
    3d38:	a3 e5       	ldi	r26, 0x53	; 83
    3d3a:	b0 e0       	ldi	r27, 0x00	; 0
    3d3c:	e3 e5       	ldi	r30, 0x53	; 83
    3d3e:	f0 e0       	ldi	r31, 0x00	; 0
    3d40:	80 81       	ld	r24, Z
    3d42:	8f 7d       	andi	r24, 0xDF	; 223
    3d44:	8c 93       	st	X, r24
    3d46:	1d c0       	rjmp	.+58     	; 0x3d82 <Timer0_Init+0x182>
						break;
					case Nin_inverting:
						CLR_BIT(TCCR0,COM00);
    3d48:	a3 e5       	ldi	r26, 0x53	; 83
    3d4a:	b0 e0       	ldi	r27, 0x00	; 0
    3d4c:	e3 e5       	ldi	r30, 0x53	; 83
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	80 81       	ld	r24, Z
    3d52:	8f 7e       	andi	r24, 0xEF	; 239
    3d54:	8c 93       	st	X, r24
						SET_BIT(TCCR0,COM01);
    3d56:	a3 e5       	ldi	r26, 0x53	; 83
    3d58:	b0 e0       	ldi	r27, 0x00	; 0
    3d5a:	e3 e5       	ldi	r30, 0x53	; 83
    3d5c:	f0 e0       	ldi	r31, 0x00	; 0
    3d5e:	80 81       	ld	r24, Z
    3d60:	80 62       	ori	r24, 0x20	; 32
    3d62:	8c 93       	st	X, r24
    3d64:	0e c0       	rjmp	.+28     	; 0x3d82 <Timer0_Init+0x182>
						break;
					case Inverting:
						SET_BIT(TCCR0,COM00);
    3d66:	a3 e5       	ldi	r26, 0x53	; 83
    3d68:	b0 e0       	ldi	r27, 0x00	; 0
    3d6a:	e3 e5       	ldi	r30, 0x53	; 83
    3d6c:	f0 e0       	ldi	r31, 0x00	; 0
    3d6e:	80 81       	ld	r24, Z
    3d70:	80 61       	ori	r24, 0x10	; 16
    3d72:	8c 93       	st	X, r24
						SET_BIT(TCCR0,COM01);
    3d74:	a3 e5       	ldi	r26, 0x53	; 83
    3d76:	b0 e0       	ldi	r27, 0x00	; 0
    3d78:	e3 e5       	ldi	r30, 0x53	; 83
    3d7a:	f0 e0       	ldi	r31, 0x00	; 0
    3d7c:	80 81       	ld	r24, Z
    3d7e:	80 62       	ori	r24, 0x20	; 32
    3d80:	8c 93       	st	X, r24
								break;
							}

#endif
	//MASK FOR SCALLER THE FIRST 3 BITS
	TCCR0&=0XF8;
    3d82:	a3 e5       	ldi	r26, 0x53	; 83
    3d84:	b0 e0       	ldi	r27, 0x00	; 0
    3d86:	e3 e5       	ldi	r30, 0x53	; 83
    3d88:	f0 e0       	ldi	r31, 0x00	; 0
    3d8a:	80 81       	ld	r24, Z
    3d8c:	88 7f       	andi	r24, 0xF8	; 248
    3d8e:	8c 93       	st	X, r24
	//PUT THE SCALLER
	TCCR0|=scaler;
    3d90:	a3 e5       	ldi	r26, 0x53	; 83
    3d92:	b0 e0       	ldi	r27, 0x00	; 0
    3d94:	e3 e5       	ldi	r30, 0x53	; 83
    3d96:	f0 e0       	ldi	r31, 0x00	; 0
    3d98:	90 81       	ld	r25, Z
    3d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d9c:	89 2b       	or	r24, r25
    3d9e:	8c 93       	st	X, r24

}
    3da0:	27 96       	adiw	r28, 0x07	; 7
    3da2:	0f b6       	in	r0, 0x3f	; 63
    3da4:	f8 94       	cli
    3da6:	de bf       	out	0x3e, r29	; 62
    3da8:	0f be       	out	0x3f, r0	; 63
    3daa:	cd bf       	out	0x3d, r28	; 61
    3dac:	cf 91       	pop	r28
    3dae:	df 91       	pop	r29
    3db0:	08 95       	ret

00003db2 <Timer0_OVInterrupt_Enable>:

void Timer0_OVInterrupt_Enable(void)
{
    3db2:	df 93       	push	r29
    3db4:	cf 93       	push	r28
    3db6:	cd b7       	in	r28, 0x3d	; 61
    3db8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
    3dba:	a7 e5       	ldi	r26, 0x57	; 87
    3dbc:	b0 e0       	ldi	r27, 0x00	; 0
    3dbe:	e7 e5       	ldi	r30, 0x57	; 87
    3dc0:	f0 e0       	ldi	r31, 0x00	; 0
    3dc2:	80 81       	ld	r24, Z
    3dc4:	81 60       	ori	r24, 0x01	; 1
    3dc6:	8c 93       	st	X, r24
}
    3dc8:	cf 91       	pop	r28
    3dca:	df 91       	pop	r29
    3dcc:	08 95       	ret

00003dce <Timer0_OVInterrupt_Disable>:
void Timer0_OVInterrupt_Disable(void)
{
    3dce:	df 93       	push	r29
    3dd0:	cf 93       	push	r28
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
    3dd6:	a7 e5       	ldi	r26, 0x57	; 87
    3dd8:	b0 e0       	ldi	r27, 0x00	; 0
    3dda:	e7 e5       	ldi	r30, 0x57	; 87
    3ddc:	f0 e0       	ldi	r31, 0x00	; 0
    3dde:	80 81       	ld	r24, Z
    3de0:	8e 7f       	andi	r24, 0xFE	; 254
    3de2:	8c 93       	st	X, r24
}
    3de4:	cf 91       	pop	r28
    3de6:	df 91       	pop	r29
    3de8:	08 95       	ret

00003dea <Timer0_OCInterrupt_Enable>:
void Timer0_OCInterrupt_Enable(void)
{
    3dea:	df 93       	push	r29
    3dec:	cf 93       	push	r28
    3dee:	cd b7       	in	r28, 0x3d	; 61
    3df0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE0);
    3df2:	a7 e5       	ldi	r26, 0x57	; 87
    3df4:	b0 e0       	ldi	r27, 0x00	; 0
    3df6:	e7 e5       	ldi	r30, 0x57	; 87
    3df8:	f0 e0       	ldi	r31, 0x00	; 0
    3dfa:	80 81       	ld	r24, Z
    3dfc:	82 60       	ori	r24, 0x02	; 2
    3dfe:	8c 93       	st	X, r24
}
    3e00:	cf 91       	pop	r28
    3e02:	df 91       	pop	r29
    3e04:	08 95       	ret

00003e06 <Timer0_OCInterrupt_Disable>:

void Timer0_OCInterrupt_Disable(void)
{
    3e06:	df 93       	push	r29
    3e08:	cf 93       	push	r28
    3e0a:	cd b7       	in	r28, 0x3d	; 61
    3e0c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE0);
    3e0e:	a7 e5       	ldi	r26, 0x57	; 87
    3e10:	b0 e0       	ldi	r27, 0x00	; 0
    3e12:	e7 e5       	ldi	r30, 0x57	; 87
    3e14:	f0 e0       	ldi	r31, 0x00	; 0
    3e16:	80 81       	ld	r24, Z
    3e18:	8d 7f       	andi	r24, 0xFD	; 253
    3e1a:	8c 93       	st	X, r24
}
    3e1c:	cf 91       	pop	r28
    3e1e:	df 91       	pop	r29
    3e20:	08 95       	ret

00003e22 <Timer0_OCI_Set_Value>:

void Timer0_OCI_Set_Value(uint8 oc_value)
{
    3e22:	df 93       	push	r29
    3e24:	cf 93       	push	r28
    3e26:	0f 92       	push	r0
    3e28:	cd b7       	in	r28, 0x3d	; 61
    3e2a:	de b7       	in	r29, 0x3e	; 62
    3e2c:	89 83       	std	Y+1, r24	; 0x01
	OCR0= oc_value;
    3e2e:	e1 e5       	ldi	r30, 0x51	; 81
    3e30:	f0 e0       	ldi	r31, 0x00	; 0
    3e32:	89 81       	ldd	r24, Y+1	; 0x01
    3e34:	80 83       	st	Z, r24
}
    3e36:	0f 90       	pop	r0
    3e38:	cf 91       	pop	r28
    3e3a:	df 91       	pop	r29
    3e3c:	08 95       	ret

00003e3e <Timer0_TCNT_Set_Value>:
void Timer0_TCNT_Set_Value(uint8 TCNT_value)
{
    3e3e:	df 93       	push	r29
    3e40:	cf 93       	push	r28
    3e42:	0f 92       	push	r0
    3e44:	cd b7       	in	r28, 0x3d	; 61
    3e46:	de b7       	in	r29, 0x3e	; 62
    3e48:	89 83       	std	Y+1, r24	; 0x01
	TCNT0= TCNT_value;
    3e4a:	e2 e5       	ldi	r30, 0x52	; 82
    3e4c:	f0 e0       	ldi	r31, 0x00	; 0
    3e4e:	89 81       	ldd	r24, Y+1	; 0x01
    3e50:	80 83       	st	Z, r24
}
    3e52:	0f 90       	pop	r0
    3e54:	cf 91       	pop	r28
    3e56:	df 91       	pop	r29
    3e58:	08 95       	ret

00003e5a <Timer0_Get_Value>:
uint8 Timer0_Get_Value(void)
{
    3e5a:	df 93       	push	r29
    3e5c:	cf 93       	push	r28
    3e5e:	cd b7       	in	r28, 0x3d	; 61
    3e60:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    3e62:	e2 e5       	ldi	r30, 0x52	; 82
    3e64:	f0 e0       	ldi	r31, 0x00	; 0
    3e66:	80 81       	ld	r24, Z
}
    3e68:	cf 91       	pop	r28
    3e6a:	df 91       	pop	r29
    3e6c:	08 95       	ret

00003e6e <DIO_void_Set_Pin_Dirction>:
#include "DIO.h"
#include "utils.h"
#include"memmap128.h"

void DIO_void_Set_Pin_Dirction(port_no_type port_no, bit_no_type bit_no, direction_type direction)
{
    3e6e:	df 93       	push	r29
    3e70:	cf 93       	push	r28
    3e72:	cd b7       	in	r28, 0x3d	; 61
    3e74:	de b7       	in	r29, 0x3e	; 62
    3e76:	27 97       	sbiw	r28, 0x07	; 7
    3e78:	0f b6       	in	r0, 0x3f	; 63
    3e7a:	f8 94       	cli
    3e7c:	de bf       	out	0x3e, r29	; 62
    3e7e:	0f be       	out	0x3f, r0	; 63
    3e80:	cd bf       	out	0x3d, r28	; 61
    3e82:	89 83       	std	Y+1, r24	; 0x01
    3e84:	6a 83       	std	Y+2, r22	; 0x02
    3e86:	4b 83       	std	Y+3, r20	; 0x03
	if(direction == INPUT)
    3e88:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8a:	88 23       	and	r24, r24
    3e8c:	09 f0       	breq	.+2      	; 0x3e90 <DIO_void_Set_Pin_Dirction+0x22>
    3e8e:	c6 c0       	rjmp	.+396    	; 0x401c <DIO_void_Set_Pin_Dirction+0x1ae>
	{
		switch(port_no)
    3e90:	89 81       	ldd	r24, Y+1	; 0x01
    3e92:	28 2f       	mov	r18, r24
    3e94:	30 e0       	ldi	r19, 0x00	; 0
    3e96:	3f 83       	std	Y+7, r19	; 0x07
    3e98:	2e 83       	std	Y+6, r18	; 0x06
    3e9a:	8e 81       	ldd	r24, Y+6	; 0x06
    3e9c:	9f 81       	ldd	r25, Y+7	; 0x07
    3e9e:	83 30       	cpi	r24, 0x03	; 3
    3ea0:	91 05       	cpc	r25, r1
    3ea2:	09 f4       	brne	.+2      	; 0x3ea6 <DIO_void_Set_Pin_Dirction+0x38>
    3ea4:	67 c0       	rjmp	.+206    	; 0x3f74 <DIO_void_Set_Pin_Dirction+0x106>
    3ea6:	2e 81       	ldd	r18, Y+6	; 0x06
    3ea8:	3f 81       	ldd	r19, Y+7	; 0x07
    3eaa:	24 30       	cpi	r18, 0x04	; 4
    3eac:	31 05       	cpc	r19, r1
    3eae:	84 f4       	brge	.+32     	; 0x3ed0 <DIO_void_Set_Pin_Dirction+0x62>
    3eb0:	8e 81       	ldd	r24, Y+6	; 0x06
    3eb2:	9f 81       	ldd	r25, Y+7	; 0x07
    3eb4:	81 30       	cpi	r24, 0x01	; 1
    3eb6:	91 05       	cpc	r25, r1
    3eb8:	99 f1       	breq	.+102    	; 0x3f20 <DIO_void_Set_Pin_Dirction+0xb2>
    3eba:	2e 81       	ldd	r18, Y+6	; 0x06
    3ebc:	3f 81       	ldd	r19, Y+7	; 0x07
    3ebe:	22 30       	cpi	r18, 0x02	; 2
    3ec0:	31 05       	cpc	r19, r1
    3ec2:	0c f0       	brlt	.+2      	; 0x3ec6 <DIO_void_Set_Pin_Dirction+0x58>
    3ec4:	42 c0       	rjmp	.+132    	; 0x3f4a <DIO_void_Set_Pin_Dirction+0xdc>
    3ec6:	8e 81       	ldd	r24, Y+6	; 0x06
    3ec8:	9f 81       	ldd	r25, Y+7	; 0x07
    3eca:	00 97       	sbiw	r24, 0x00	; 0
    3ecc:	a1 f0       	breq	.+40     	; 0x3ef6 <DIO_void_Set_Pin_Dirction+0x88>
    3ece:	68 c1       	rjmp	.+720    	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>
    3ed0:	2e 81       	ldd	r18, Y+6	; 0x06
    3ed2:	3f 81       	ldd	r19, Y+7	; 0x07
    3ed4:	25 30       	cpi	r18, 0x05	; 5
    3ed6:	31 05       	cpc	r19, r1
    3ed8:	09 f4       	brne	.+2      	; 0x3edc <DIO_void_Set_Pin_Dirction+0x6e>
    3eda:	76 c0       	rjmp	.+236    	; 0x3fc8 <DIO_void_Set_Pin_Dirction+0x15a>
    3edc:	8e 81       	ldd	r24, Y+6	; 0x06
    3ede:	9f 81       	ldd	r25, Y+7	; 0x07
    3ee0:	85 30       	cpi	r24, 0x05	; 5
    3ee2:	91 05       	cpc	r25, r1
    3ee4:	0c f4       	brge	.+2      	; 0x3ee8 <DIO_void_Set_Pin_Dirction+0x7a>
    3ee6:	5b c0       	rjmp	.+182    	; 0x3f9e <DIO_void_Set_Pin_Dirction+0x130>
    3ee8:	2e 81       	ldd	r18, Y+6	; 0x06
    3eea:	3f 81       	ldd	r19, Y+7	; 0x07
    3eec:	26 30       	cpi	r18, 0x06	; 6
    3eee:	31 05       	cpc	r19, r1
    3ef0:	09 f4       	brne	.+2      	; 0x3ef4 <DIO_void_Set_Pin_Dirction+0x86>
    3ef2:	7f c0       	rjmp	.+254    	; 0x3ff2 <DIO_void_Set_Pin_Dirction+0x184>
    3ef4:	55 c1       	rjmp	.+682    	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>
		{
		case PORTA_ID:CLR_BIT(DDRA,bit_no);break;
    3ef6:	aa e3       	ldi	r26, 0x3A	; 58
    3ef8:	b0 e0       	ldi	r27, 0x00	; 0
    3efa:	ea e3       	ldi	r30, 0x3A	; 58
    3efc:	f0 e0       	ldi	r31, 0x00	; 0
    3efe:	80 81       	ld	r24, Z
    3f00:	48 2f       	mov	r20, r24
    3f02:	8a 81       	ldd	r24, Y+2	; 0x02
    3f04:	28 2f       	mov	r18, r24
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	02 2e       	mov	r0, r18
    3f0e:	02 c0       	rjmp	.+4      	; 0x3f14 <DIO_void_Set_Pin_Dirction+0xa6>
    3f10:	88 0f       	add	r24, r24
    3f12:	99 1f       	adc	r25, r25
    3f14:	0a 94       	dec	r0
    3f16:	e2 f7       	brpl	.-8      	; 0x3f10 <DIO_void_Set_Pin_Dirction+0xa2>
    3f18:	80 95       	com	r24
    3f1a:	84 23       	and	r24, r20
    3f1c:	8c 93       	st	X, r24
    3f1e:	40 c1       	rjmp	.+640    	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTB_ID:CLR_BIT(DDRB,bit_no);break;
    3f20:	a7 e3       	ldi	r26, 0x37	; 55
    3f22:	b0 e0       	ldi	r27, 0x00	; 0
    3f24:	e7 e3       	ldi	r30, 0x37	; 55
    3f26:	f0 e0       	ldi	r31, 0x00	; 0
    3f28:	80 81       	ld	r24, Z
    3f2a:	48 2f       	mov	r20, r24
    3f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f2e:	28 2f       	mov	r18, r24
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	81 e0       	ldi	r24, 0x01	; 1
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	02 2e       	mov	r0, r18
    3f38:	02 c0       	rjmp	.+4      	; 0x3f3e <DIO_void_Set_Pin_Dirction+0xd0>
    3f3a:	88 0f       	add	r24, r24
    3f3c:	99 1f       	adc	r25, r25
    3f3e:	0a 94       	dec	r0
    3f40:	e2 f7       	brpl	.-8      	; 0x3f3a <DIO_void_Set_Pin_Dirction+0xcc>
    3f42:	80 95       	com	r24
    3f44:	84 23       	and	r24, r20
    3f46:	8c 93       	st	X, r24
    3f48:	2b c1       	rjmp	.+598    	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTC_ID:CLR_BIT(DDRC,bit_no);break;
    3f4a:	a4 e3       	ldi	r26, 0x34	; 52
    3f4c:	b0 e0       	ldi	r27, 0x00	; 0
    3f4e:	e4 e3       	ldi	r30, 0x34	; 52
    3f50:	f0 e0       	ldi	r31, 0x00	; 0
    3f52:	80 81       	ld	r24, Z
    3f54:	48 2f       	mov	r20, r24
    3f56:	8a 81       	ldd	r24, Y+2	; 0x02
    3f58:	28 2f       	mov	r18, r24
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	02 2e       	mov	r0, r18
    3f62:	02 c0       	rjmp	.+4      	; 0x3f68 <DIO_void_Set_Pin_Dirction+0xfa>
    3f64:	88 0f       	add	r24, r24
    3f66:	99 1f       	adc	r25, r25
    3f68:	0a 94       	dec	r0
    3f6a:	e2 f7       	brpl	.-8      	; 0x3f64 <DIO_void_Set_Pin_Dirction+0xf6>
    3f6c:	80 95       	com	r24
    3f6e:	84 23       	and	r24, r20
    3f70:	8c 93       	st	X, r24
    3f72:	16 c1       	rjmp	.+556    	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTD_ID:CLR_BIT(DDRD,bit_no);break;
    3f74:	a1 e3       	ldi	r26, 0x31	; 49
    3f76:	b0 e0       	ldi	r27, 0x00	; 0
    3f78:	e1 e3       	ldi	r30, 0x31	; 49
    3f7a:	f0 e0       	ldi	r31, 0x00	; 0
    3f7c:	80 81       	ld	r24, Z
    3f7e:	48 2f       	mov	r20, r24
    3f80:	8a 81       	ldd	r24, Y+2	; 0x02
    3f82:	28 2f       	mov	r18, r24
    3f84:	30 e0       	ldi	r19, 0x00	; 0
    3f86:	81 e0       	ldi	r24, 0x01	; 1
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	02 2e       	mov	r0, r18
    3f8c:	02 c0       	rjmp	.+4      	; 0x3f92 <DIO_void_Set_Pin_Dirction+0x124>
    3f8e:	88 0f       	add	r24, r24
    3f90:	99 1f       	adc	r25, r25
    3f92:	0a 94       	dec	r0
    3f94:	e2 f7       	brpl	.-8      	; 0x3f8e <DIO_void_Set_Pin_Dirction+0x120>
    3f96:	80 95       	com	r24
    3f98:	84 23       	and	r24, r20
    3f9a:	8c 93       	st	X, r24
    3f9c:	01 c1       	rjmp	.+514    	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTE_ID:CLR_BIT(DDRE,bit_no);break;
    3f9e:	a2 e2       	ldi	r26, 0x22	; 34
    3fa0:	b0 e0       	ldi	r27, 0x00	; 0
    3fa2:	e2 e2       	ldi	r30, 0x22	; 34
    3fa4:	f0 e0       	ldi	r31, 0x00	; 0
    3fa6:	80 81       	ld	r24, Z
    3fa8:	48 2f       	mov	r20, r24
    3faa:	8a 81       	ldd	r24, Y+2	; 0x02
    3fac:	28 2f       	mov	r18, r24
    3fae:	30 e0       	ldi	r19, 0x00	; 0
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	02 2e       	mov	r0, r18
    3fb6:	02 c0       	rjmp	.+4      	; 0x3fbc <DIO_void_Set_Pin_Dirction+0x14e>
    3fb8:	88 0f       	add	r24, r24
    3fba:	99 1f       	adc	r25, r25
    3fbc:	0a 94       	dec	r0
    3fbe:	e2 f7       	brpl	.-8      	; 0x3fb8 <DIO_void_Set_Pin_Dirction+0x14a>
    3fc0:	80 95       	com	r24
    3fc2:	84 23       	and	r24, r20
    3fc4:	8c 93       	st	X, r24
    3fc6:	ec c0       	rjmp	.+472    	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTF_ID:CLR_BIT(DDRF,bit_no);break;
    3fc8:	a1 e6       	ldi	r26, 0x61	; 97
    3fca:	b0 e0       	ldi	r27, 0x00	; 0
    3fcc:	e1 e6       	ldi	r30, 0x61	; 97
    3fce:	f0 e0       	ldi	r31, 0x00	; 0
    3fd0:	80 81       	ld	r24, Z
    3fd2:	48 2f       	mov	r20, r24
    3fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd6:	28 2f       	mov	r18, r24
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	81 e0       	ldi	r24, 0x01	; 1
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	02 2e       	mov	r0, r18
    3fe0:	02 c0       	rjmp	.+4      	; 0x3fe6 <DIO_void_Set_Pin_Dirction+0x178>
    3fe2:	88 0f       	add	r24, r24
    3fe4:	99 1f       	adc	r25, r25
    3fe6:	0a 94       	dec	r0
    3fe8:	e2 f7       	brpl	.-8      	; 0x3fe2 <DIO_void_Set_Pin_Dirction+0x174>
    3fea:	80 95       	com	r24
    3fec:	84 23       	and	r24, r20
    3fee:	8c 93       	st	X, r24
    3ff0:	d7 c0       	rjmp	.+430    	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>
	    case PORTG_ID:CLR_BIT(DDRG,bit_no);break;
    3ff2:	a4 e6       	ldi	r26, 0x64	; 100
    3ff4:	b0 e0       	ldi	r27, 0x00	; 0
    3ff6:	e4 e6       	ldi	r30, 0x64	; 100
    3ff8:	f0 e0       	ldi	r31, 0x00	; 0
    3ffa:	80 81       	ld	r24, Z
    3ffc:	48 2f       	mov	r20, r24
    3ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    4000:	28 2f       	mov	r18, r24
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	81 e0       	ldi	r24, 0x01	; 1
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	02 2e       	mov	r0, r18
    400a:	02 c0       	rjmp	.+4      	; 0x4010 <DIO_void_Set_Pin_Dirction+0x1a2>
    400c:	88 0f       	add	r24, r24
    400e:	99 1f       	adc	r25, r25
    4010:	0a 94       	dec	r0
    4012:	e2 f7       	brpl	.-8      	; 0x400c <DIO_void_Set_Pin_Dirction+0x19e>
    4014:	80 95       	com	r24
    4016:	84 23       	and	r24, r20
    4018:	8c 93       	st	X, r24
    401a:	c2 c0       	rjmp	.+388    	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>

		}
	}
	else if(direction == OUTPUT)
    401c:	8b 81       	ldd	r24, Y+3	; 0x03
    401e:	81 30       	cpi	r24, 0x01	; 1
    4020:	09 f0       	breq	.+2      	; 0x4024 <DIO_void_Set_Pin_Dirction+0x1b6>
    4022:	be c0       	rjmp	.+380    	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>
	{
		switch(port_no)
    4024:	89 81       	ldd	r24, Y+1	; 0x01
    4026:	28 2f       	mov	r18, r24
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	3d 83       	std	Y+5, r19	; 0x05
    402c:	2c 83       	std	Y+4, r18	; 0x04
    402e:	8c 81       	ldd	r24, Y+4	; 0x04
    4030:	9d 81       	ldd	r25, Y+5	; 0x05
    4032:	83 30       	cpi	r24, 0x03	; 3
    4034:	91 05       	cpc	r25, r1
    4036:	09 f4       	brne	.+2      	; 0x403a <DIO_void_Set_Pin_Dirction+0x1cc>
    4038:	64 c0       	rjmp	.+200    	; 0x4102 <DIO_void_Set_Pin_Dirction+0x294>
    403a:	2c 81       	ldd	r18, Y+4	; 0x04
    403c:	3d 81       	ldd	r19, Y+5	; 0x05
    403e:	24 30       	cpi	r18, 0x04	; 4
    4040:	31 05       	cpc	r19, r1
    4042:	84 f4       	brge	.+32     	; 0x4064 <DIO_void_Set_Pin_Dirction+0x1f6>
    4044:	8c 81       	ldd	r24, Y+4	; 0x04
    4046:	9d 81       	ldd	r25, Y+5	; 0x05
    4048:	81 30       	cpi	r24, 0x01	; 1
    404a:	91 05       	cpc	r25, r1
    404c:	91 f1       	breq	.+100    	; 0x40b2 <DIO_void_Set_Pin_Dirction+0x244>
    404e:	2c 81       	ldd	r18, Y+4	; 0x04
    4050:	3d 81       	ldd	r19, Y+5	; 0x05
    4052:	22 30       	cpi	r18, 0x02	; 2
    4054:	31 05       	cpc	r19, r1
    4056:	0c f0       	brlt	.+2      	; 0x405a <DIO_void_Set_Pin_Dirction+0x1ec>
    4058:	40 c0       	rjmp	.+128    	; 0x40da <DIO_void_Set_Pin_Dirction+0x26c>
    405a:	8c 81       	ldd	r24, Y+4	; 0x04
    405c:	9d 81       	ldd	r25, Y+5	; 0x05
    405e:	00 97       	sbiw	r24, 0x00	; 0
    4060:	a1 f0       	breq	.+40     	; 0x408a <DIO_void_Set_Pin_Dirction+0x21c>
    4062:	9e c0       	rjmp	.+316    	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>
    4064:	2c 81       	ldd	r18, Y+4	; 0x04
    4066:	3d 81       	ldd	r19, Y+5	; 0x05
    4068:	25 30       	cpi	r18, 0x05	; 5
    406a:	31 05       	cpc	r19, r1
    406c:	09 f4       	brne	.+2      	; 0x4070 <DIO_void_Set_Pin_Dirction+0x202>
    406e:	71 c0       	rjmp	.+226    	; 0x4152 <DIO_void_Set_Pin_Dirction+0x2e4>
    4070:	8c 81       	ldd	r24, Y+4	; 0x04
    4072:	9d 81       	ldd	r25, Y+5	; 0x05
    4074:	85 30       	cpi	r24, 0x05	; 5
    4076:	91 05       	cpc	r25, r1
    4078:	0c f4       	brge	.+2      	; 0x407c <DIO_void_Set_Pin_Dirction+0x20e>
    407a:	57 c0       	rjmp	.+174    	; 0x412a <DIO_void_Set_Pin_Dirction+0x2bc>
    407c:	2c 81       	ldd	r18, Y+4	; 0x04
    407e:	3d 81       	ldd	r19, Y+5	; 0x05
    4080:	26 30       	cpi	r18, 0x06	; 6
    4082:	31 05       	cpc	r19, r1
    4084:	09 f4       	brne	.+2      	; 0x4088 <DIO_void_Set_Pin_Dirction+0x21a>
    4086:	79 c0       	rjmp	.+242    	; 0x417a <DIO_void_Set_Pin_Dirction+0x30c>
    4088:	8b c0       	rjmp	.+278    	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>
		{
		case PORTA_ID:SET_BIT(DDRA,bit_no);break;
    408a:	aa e3       	ldi	r26, 0x3A	; 58
    408c:	b0 e0       	ldi	r27, 0x00	; 0
    408e:	ea e3       	ldi	r30, 0x3A	; 58
    4090:	f0 e0       	ldi	r31, 0x00	; 0
    4092:	80 81       	ld	r24, Z
    4094:	48 2f       	mov	r20, r24
    4096:	8a 81       	ldd	r24, Y+2	; 0x02
    4098:	28 2f       	mov	r18, r24
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	81 e0       	ldi	r24, 0x01	; 1
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	02 2e       	mov	r0, r18
    40a2:	02 c0       	rjmp	.+4      	; 0x40a8 <DIO_void_Set_Pin_Dirction+0x23a>
    40a4:	88 0f       	add	r24, r24
    40a6:	99 1f       	adc	r25, r25
    40a8:	0a 94       	dec	r0
    40aa:	e2 f7       	brpl	.-8      	; 0x40a4 <DIO_void_Set_Pin_Dirction+0x236>
    40ac:	84 2b       	or	r24, r20
    40ae:	8c 93       	st	X, r24
    40b0:	77 c0       	rjmp	.+238    	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTB_ID:SET_BIT(DDRB,bit_no);break;
    40b2:	a7 e3       	ldi	r26, 0x37	; 55
    40b4:	b0 e0       	ldi	r27, 0x00	; 0
    40b6:	e7 e3       	ldi	r30, 0x37	; 55
    40b8:	f0 e0       	ldi	r31, 0x00	; 0
    40ba:	80 81       	ld	r24, Z
    40bc:	48 2f       	mov	r20, r24
    40be:	8a 81       	ldd	r24, Y+2	; 0x02
    40c0:	28 2f       	mov	r18, r24
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	81 e0       	ldi	r24, 0x01	; 1
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	02 2e       	mov	r0, r18
    40ca:	02 c0       	rjmp	.+4      	; 0x40d0 <DIO_void_Set_Pin_Dirction+0x262>
    40cc:	88 0f       	add	r24, r24
    40ce:	99 1f       	adc	r25, r25
    40d0:	0a 94       	dec	r0
    40d2:	e2 f7       	brpl	.-8      	; 0x40cc <DIO_void_Set_Pin_Dirction+0x25e>
    40d4:	84 2b       	or	r24, r20
    40d6:	8c 93       	st	X, r24
    40d8:	63 c0       	rjmp	.+198    	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTC_ID:SET_BIT(DDRC,bit_no);break;
    40da:	a4 e3       	ldi	r26, 0x34	; 52
    40dc:	b0 e0       	ldi	r27, 0x00	; 0
    40de:	e4 e3       	ldi	r30, 0x34	; 52
    40e0:	f0 e0       	ldi	r31, 0x00	; 0
    40e2:	80 81       	ld	r24, Z
    40e4:	48 2f       	mov	r20, r24
    40e6:	8a 81       	ldd	r24, Y+2	; 0x02
    40e8:	28 2f       	mov	r18, r24
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	81 e0       	ldi	r24, 0x01	; 1
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	02 2e       	mov	r0, r18
    40f2:	02 c0       	rjmp	.+4      	; 0x40f8 <DIO_void_Set_Pin_Dirction+0x28a>
    40f4:	88 0f       	add	r24, r24
    40f6:	99 1f       	adc	r25, r25
    40f8:	0a 94       	dec	r0
    40fa:	e2 f7       	brpl	.-8      	; 0x40f4 <DIO_void_Set_Pin_Dirction+0x286>
    40fc:	84 2b       	or	r24, r20
    40fe:	8c 93       	st	X, r24
    4100:	4f c0       	rjmp	.+158    	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTD_ID:SET_BIT(DDRD,bit_no);break;
    4102:	a1 e3       	ldi	r26, 0x31	; 49
    4104:	b0 e0       	ldi	r27, 0x00	; 0
    4106:	e1 e3       	ldi	r30, 0x31	; 49
    4108:	f0 e0       	ldi	r31, 0x00	; 0
    410a:	80 81       	ld	r24, Z
    410c:	48 2f       	mov	r20, r24
    410e:	8a 81       	ldd	r24, Y+2	; 0x02
    4110:	28 2f       	mov	r18, r24
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	81 e0       	ldi	r24, 0x01	; 1
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	02 2e       	mov	r0, r18
    411a:	02 c0       	rjmp	.+4      	; 0x4120 <DIO_void_Set_Pin_Dirction+0x2b2>
    411c:	88 0f       	add	r24, r24
    411e:	99 1f       	adc	r25, r25
    4120:	0a 94       	dec	r0
    4122:	e2 f7       	brpl	.-8      	; 0x411c <DIO_void_Set_Pin_Dirction+0x2ae>
    4124:	84 2b       	or	r24, r20
    4126:	8c 93       	st	X, r24
    4128:	3b c0       	rjmp	.+118    	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTE_ID:SET_BIT(DDRE,bit_no);break;
    412a:	a2 e2       	ldi	r26, 0x22	; 34
    412c:	b0 e0       	ldi	r27, 0x00	; 0
    412e:	e2 e2       	ldi	r30, 0x22	; 34
    4130:	f0 e0       	ldi	r31, 0x00	; 0
    4132:	80 81       	ld	r24, Z
    4134:	48 2f       	mov	r20, r24
    4136:	8a 81       	ldd	r24, Y+2	; 0x02
    4138:	28 2f       	mov	r18, r24
    413a:	30 e0       	ldi	r19, 0x00	; 0
    413c:	81 e0       	ldi	r24, 0x01	; 1
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	02 2e       	mov	r0, r18
    4142:	02 c0       	rjmp	.+4      	; 0x4148 <DIO_void_Set_Pin_Dirction+0x2da>
    4144:	88 0f       	add	r24, r24
    4146:	99 1f       	adc	r25, r25
    4148:	0a 94       	dec	r0
    414a:	e2 f7       	brpl	.-8      	; 0x4144 <DIO_void_Set_Pin_Dirction+0x2d6>
    414c:	84 2b       	or	r24, r20
    414e:	8c 93       	st	X, r24
    4150:	27 c0       	rjmp	.+78     	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTF_ID:SET_BIT(DDRF,bit_no);break;
    4152:	a1 e6       	ldi	r26, 0x61	; 97
    4154:	b0 e0       	ldi	r27, 0x00	; 0
    4156:	e1 e6       	ldi	r30, 0x61	; 97
    4158:	f0 e0       	ldi	r31, 0x00	; 0
    415a:	80 81       	ld	r24, Z
    415c:	48 2f       	mov	r20, r24
    415e:	8a 81       	ldd	r24, Y+2	; 0x02
    4160:	28 2f       	mov	r18, r24
    4162:	30 e0       	ldi	r19, 0x00	; 0
    4164:	81 e0       	ldi	r24, 0x01	; 1
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	02 2e       	mov	r0, r18
    416a:	02 c0       	rjmp	.+4      	; 0x4170 <DIO_void_Set_Pin_Dirction+0x302>
    416c:	88 0f       	add	r24, r24
    416e:	99 1f       	adc	r25, r25
    4170:	0a 94       	dec	r0
    4172:	e2 f7       	brpl	.-8      	; 0x416c <DIO_void_Set_Pin_Dirction+0x2fe>
    4174:	84 2b       	or	r24, r20
    4176:	8c 93       	st	X, r24
    4178:	13 c0       	rjmp	.+38     	; 0x41a0 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTG_ID:SET_BIT(DDRG,bit_no);break;
    417a:	a4 e6       	ldi	r26, 0x64	; 100
    417c:	b0 e0       	ldi	r27, 0x00	; 0
    417e:	e4 e6       	ldi	r30, 0x64	; 100
    4180:	f0 e0       	ldi	r31, 0x00	; 0
    4182:	80 81       	ld	r24, Z
    4184:	48 2f       	mov	r20, r24
    4186:	8a 81       	ldd	r24, Y+2	; 0x02
    4188:	28 2f       	mov	r18, r24
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	81 e0       	ldi	r24, 0x01	; 1
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	02 2e       	mov	r0, r18
    4192:	02 c0       	rjmp	.+4      	; 0x4198 <DIO_void_Set_Pin_Dirction+0x32a>
    4194:	88 0f       	add	r24, r24
    4196:	99 1f       	adc	r25, r25
    4198:	0a 94       	dec	r0
    419a:	e2 f7       	brpl	.-8      	; 0x4194 <DIO_void_Set_Pin_Dirction+0x326>
    419c:	84 2b       	or	r24, r20
    419e:	8c 93       	st	X, r24
		}
	}
}
    41a0:	27 96       	adiw	r28, 0x07	; 7
    41a2:	0f b6       	in	r0, 0x3f	; 63
    41a4:	f8 94       	cli
    41a6:	de bf       	out	0x3e, r29	; 62
    41a8:	0f be       	out	0x3f, r0	; 63
    41aa:	cd bf       	out	0x3d, r28	; 61
    41ac:	cf 91       	pop	r28
    41ae:	df 91       	pop	r29
    41b0:	08 95       	ret

000041b2 <DIO_void_Set_Pin_Value>:

void DIO_void_Set_Pin_Value(port_no_type port_no, bit_no_type bit_no, value_type value)
{
    41b2:	df 93       	push	r29
    41b4:	cf 93       	push	r28
    41b6:	cd b7       	in	r28, 0x3d	; 61
    41b8:	de b7       	in	r29, 0x3e	; 62
    41ba:	27 97       	sbiw	r28, 0x07	; 7
    41bc:	0f b6       	in	r0, 0x3f	; 63
    41be:	f8 94       	cli
    41c0:	de bf       	out	0x3e, r29	; 62
    41c2:	0f be       	out	0x3f, r0	; 63
    41c4:	cd bf       	out	0x3d, r28	; 61
    41c6:	89 83       	std	Y+1, r24	; 0x01
    41c8:	6a 83       	std	Y+2, r22	; 0x02
    41ca:	4b 83       	std	Y+3, r20	; 0x03
	if(value == LOW)
    41cc:	8b 81       	ldd	r24, Y+3	; 0x03
    41ce:	88 23       	and	r24, r24
    41d0:	09 f0       	breq	.+2      	; 0x41d4 <DIO_void_Set_Pin_Value+0x22>
    41d2:	c6 c0       	rjmp	.+396    	; 0x4360 <DIO_void_Set_Pin_Value+0x1ae>
	{
		switch(port_no)
    41d4:	89 81       	ldd	r24, Y+1	; 0x01
    41d6:	28 2f       	mov	r18, r24
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	3f 83       	std	Y+7, r19	; 0x07
    41dc:	2e 83       	std	Y+6, r18	; 0x06
    41de:	8e 81       	ldd	r24, Y+6	; 0x06
    41e0:	9f 81       	ldd	r25, Y+7	; 0x07
    41e2:	83 30       	cpi	r24, 0x03	; 3
    41e4:	91 05       	cpc	r25, r1
    41e6:	09 f4       	brne	.+2      	; 0x41ea <DIO_void_Set_Pin_Value+0x38>
    41e8:	67 c0       	rjmp	.+206    	; 0x42b8 <DIO_void_Set_Pin_Value+0x106>
    41ea:	2e 81       	ldd	r18, Y+6	; 0x06
    41ec:	3f 81       	ldd	r19, Y+7	; 0x07
    41ee:	24 30       	cpi	r18, 0x04	; 4
    41f0:	31 05       	cpc	r19, r1
    41f2:	84 f4       	brge	.+32     	; 0x4214 <DIO_void_Set_Pin_Value+0x62>
    41f4:	8e 81       	ldd	r24, Y+6	; 0x06
    41f6:	9f 81       	ldd	r25, Y+7	; 0x07
    41f8:	81 30       	cpi	r24, 0x01	; 1
    41fa:	91 05       	cpc	r25, r1
    41fc:	99 f1       	breq	.+102    	; 0x4264 <DIO_void_Set_Pin_Value+0xb2>
    41fe:	2e 81       	ldd	r18, Y+6	; 0x06
    4200:	3f 81       	ldd	r19, Y+7	; 0x07
    4202:	22 30       	cpi	r18, 0x02	; 2
    4204:	31 05       	cpc	r19, r1
    4206:	0c f0       	brlt	.+2      	; 0x420a <DIO_void_Set_Pin_Value+0x58>
    4208:	42 c0       	rjmp	.+132    	; 0x428e <DIO_void_Set_Pin_Value+0xdc>
    420a:	8e 81       	ldd	r24, Y+6	; 0x06
    420c:	9f 81       	ldd	r25, Y+7	; 0x07
    420e:	00 97       	sbiw	r24, 0x00	; 0
    4210:	a1 f0       	breq	.+40     	; 0x423a <DIO_void_Set_Pin_Value+0x88>
    4212:	68 c1       	rjmp	.+720    	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
    4214:	2e 81       	ldd	r18, Y+6	; 0x06
    4216:	3f 81       	ldd	r19, Y+7	; 0x07
    4218:	25 30       	cpi	r18, 0x05	; 5
    421a:	31 05       	cpc	r19, r1
    421c:	09 f4       	brne	.+2      	; 0x4220 <DIO_void_Set_Pin_Value+0x6e>
    421e:	76 c0       	rjmp	.+236    	; 0x430c <DIO_void_Set_Pin_Value+0x15a>
    4220:	8e 81       	ldd	r24, Y+6	; 0x06
    4222:	9f 81       	ldd	r25, Y+7	; 0x07
    4224:	85 30       	cpi	r24, 0x05	; 5
    4226:	91 05       	cpc	r25, r1
    4228:	0c f4       	brge	.+2      	; 0x422c <DIO_void_Set_Pin_Value+0x7a>
    422a:	5b c0       	rjmp	.+182    	; 0x42e2 <DIO_void_Set_Pin_Value+0x130>
    422c:	2e 81       	ldd	r18, Y+6	; 0x06
    422e:	3f 81       	ldd	r19, Y+7	; 0x07
    4230:	26 30       	cpi	r18, 0x06	; 6
    4232:	31 05       	cpc	r19, r1
    4234:	09 f4       	brne	.+2      	; 0x4238 <DIO_void_Set_Pin_Value+0x86>
    4236:	7f c0       	rjmp	.+254    	; 0x4336 <DIO_void_Set_Pin_Value+0x184>
    4238:	55 c1       	rjmp	.+682    	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
		{
		case PORTA_ID:CLR_BIT(PORTA,bit_no);break;
    423a:	ab e3       	ldi	r26, 0x3B	; 59
    423c:	b0 e0       	ldi	r27, 0x00	; 0
    423e:	eb e3       	ldi	r30, 0x3B	; 59
    4240:	f0 e0       	ldi	r31, 0x00	; 0
    4242:	80 81       	ld	r24, Z
    4244:	48 2f       	mov	r20, r24
    4246:	8a 81       	ldd	r24, Y+2	; 0x02
    4248:	28 2f       	mov	r18, r24
    424a:	30 e0       	ldi	r19, 0x00	; 0
    424c:	81 e0       	ldi	r24, 0x01	; 1
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	02 2e       	mov	r0, r18
    4252:	02 c0       	rjmp	.+4      	; 0x4258 <DIO_void_Set_Pin_Value+0xa6>
    4254:	88 0f       	add	r24, r24
    4256:	99 1f       	adc	r25, r25
    4258:	0a 94       	dec	r0
    425a:	e2 f7       	brpl	.-8      	; 0x4254 <DIO_void_Set_Pin_Value+0xa2>
    425c:	80 95       	com	r24
    425e:	84 23       	and	r24, r20
    4260:	8c 93       	st	X, r24
    4262:	40 c1       	rjmp	.+640    	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
		case PORTB_ID:CLR_BIT(PORTB,bit_no);break;
    4264:	a8 e3       	ldi	r26, 0x38	; 56
    4266:	b0 e0       	ldi	r27, 0x00	; 0
    4268:	e8 e3       	ldi	r30, 0x38	; 56
    426a:	f0 e0       	ldi	r31, 0x00	; 0
    426c:	80 81       	ld	r24, Z
    426e:	48 2f       	mov	r20, r24
    4270:	8a 81       	ldd	r24, Y+2	; 0x02
    4272:	28 2f       	mov	r18, r24
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	81 e0       	ldi	r24, 0x01	; 1
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	02 2e       	mov	r0, r18
    427c:	02 c0       	rjmp	.+4      	; 0x4282 <DIO_void_Set_Pin_Value+0xd0>
    427e:	88 0f       	add	r24, r24
    4280:	99 1f       	adc	r25, r25
    4282:	0a 94       	dec	r0
    4284:	e2 f7       	brpl	.-8      	; 0x427e <DIO_void_Set_Pin_Value+0xcc>
    4286:	80 95       	com	r24
    4288:	84 23       	and	r24, r20
    428a:	8c 93       	st	X, r24
    428c:	2b c1       	rjmp	.+598    	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
		case PORTC_ID:CLR_BIT(PORTC,bit_no);break;
    428e:	a5 e3       	ldi	r26, 0x35	; 53
    4290:	b0 e0       	ldi	r27, 0x00	; 0
    4292:	e5 e3       	ldi	r30, 0x35	; 53
    4294:	f0 e0       	ldi	r31, 0x00	; 0
    4296:	80 81       	ld	r24, Z
    4298:	48 2f       	mov	r20, r24
    429a:	8a 81       	ldd	r24, Y+2	; 0x02
    429c:	28 2f       	mov	r18, r24
    429e:	30 e0       	ldi	r19, 0x00	; 0
    42a0:	81 e0       	ldi	r24, 0x01	; 1
    42a2:	90 e0       	ldi	r25, 0x00	; 0
    42a4:	02 2e       	mov	r0, r18
    42a6:	02 c0       	rjmp	.+4      	; 0x42ac <DIO_void_Set_Pin_Value+0xfa>
    42a8:	88 0f       	add	r24, r24
    42aa:	99 1f       	adc	r25, r25
    42ac:	0a 94       	dec	r0
    42ae:	e2 f7       	brpl	.-8      	; 0x42a8 <DIO_void_Set_Pin_Value+0xf6>
    42b0:	80 95       	com	r24
    42b2:	84 23       	and	r24, r20
    42b4:	8c 93       	st	X, r24
    42b6:	16 c1       	rjmp	.+556    	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
		case PORTD_ID:CLR_BIT(PORTD,bit_no);break;
    42b8:	a2 e3       	ldi	r26, 0x32	; 50
    42ba:	b0 e0       	ldi	r27, 0x00	; 0
    42bc:	e2 e3       	ldi	r30, 0x32	; 50
    42be:	f0 e0       	ldi	r31, 0x00	; 0
    42c0:	80 81       	ld	r24, Z
    42c2:	48 2f       	mov	r20, r24
    42c4:	8a 81       	ldd	r24, Y+2	; 0x02
    42c6:	28 2f       	mov	r18, r24
    42c8:	30 e0       	ldi	r19, 0x00	; 0
    42ca:	81 e0       	ldi	r24, 0x01	; 1
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	02 2e       	mov	r0, r18
    42d0:	02 c0       	rjmp	.+4      	; 0x42d6 <DIO_void_Set_Pin_Value+0x124>
    42d2:	88 0f       	add	r24, r24
    42d4:	99 1f       	adc	r25, r25
    42d6:	0a 94       	dec	r0
    42d8:	e2 f7       	brpl	.-8      	; 0x42d2 <DIO_void_Set_Pin_Value+0x120>
    42da:	80 95       	com	r24
    42dc:	84 23       	and	r24, r20
    42de:	8c 93       	st	X, r24
    42e0:	01 c1       	rjmp	.+514    	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
		case PORTE_ID:CLR_BIT(PORTE,bit_no);break;
    42e2:	a3 e2       	ldi	r26, 0x23	; 35
    42e4:	b0 e0       	ldi	r27, 0x00	; 0
    42e6:	e3 e2       	ldi	r30, 0x23	; 35
    42e8:	f0 e0       	ldi	r31, 0x00	; 0
    42ea:	80 81       	ld	r24, Z
    42ec:	48 2f       	mov	r20, r24
    42ee:	8a 81       	ldd	r24, Y+2	; 0x02
    42f0:	28 2f       	mov	r18, r24
    42f2:	30 e0       	ldi	r19, 0x00	; 0
    42f4:	81 e0       	ldi	r24, 0x01	; 1
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	02 2e       	mov	r0, r18
    42fa:	02 c0       	rjmp	.+4      	; 0x4300 <DIO_void_Set_Pin_Value+0x14e>
    42fc:	88 0f       	add	r24, r24
    42fe:	99 1f       	adc	r25, r25
    4300:	0a 94       	dec	r0
    4302:	e2 f7       	brpl	.-8      	; 0x42fc <DIO_void_Set_Pin_Value+0x14a>
    4304:	80 95       	com	r24
    4306:	84 23       	and	r24, r20
    4308:	8c 93       	st	X, r24
    430a:	ec c0       	rjmp	.+472    	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
		case PORTF_ID:CLR_BIT(PORTF,bit_no);break;
    430c:	a2 e6       	ldi	r26, 0x62	; 98
    430e:	b0 e0       	ldi	r27, 0x00	; 0
    4310:	e2 e6       	ldi	r30, 0x62	; 98
    4312:	f0 e0       	ldi	r31, 0x00	; 0
    4314:	80 81       	ld	r24, Z
    4316:	48 2f       	mov	r20, r24
    4318:	8a 81       	ldd	r24, Y+2	; 0x02
    431a:	28 2f       	mov	r18, r24
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	81 e0       	ldi	r24, 0x01	; 1
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	02 2e       	mov	r0, r18
    4324:	02 c0       	rjmp	.+4      	; 0x432a <DIO_void_Set_Pin_Value+0x178>
    4326:	88 0f       	add	r24, r24
    4328:	99 1f       	adc	r25, r25
    432a:	0a 94       	dec	r0
    432c:	e2 f7       	brpl	.-8      	; 0x4326 <DIO_void_Set_Pin_Value+0x174>
    432e:	80 95       	com	r24
    4330:	84 23       	and	r24, r20
    4332:	8c 93       	st	X, r24
    4334:	d7 c0       	rjmp	.+430    	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
		case PORTG_ID:CLR_BIT(PORTG,bit_no);break;
    4336:	a5 e6       	ldi	r26, 0x65	; 101
    4338:	b0 e0       	ldi	r27, 0x00	; 0
    433a:	e5 e6       	ldi	r30, 0x65	; 101
    433c:	f0 e0       	ldi	r31, 0x00	; 0
    433e:	80 81       	ld	r24, Z
    4340:	48 2f       	mov	r20, r24
    4342:	8a 81       	ldd	r24, Y+2	; 0x02
    4344:	28 2f       	mov	r18, r24
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	81 e0       	ldi	r24, 0x01	; 1
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	02 2e       	mov	r0, r18
    434e:	02 c0       	rjmp	.+4      	; 0x4354 <DIO_void_Set_Pin_Value+0x1a2>
    4350:	88 0f       	add	r24, r24
    4352:	99 1f       	adc	r25, r25
    4354:	0a 94       	dec	r0
    4356:	e2 f7       	brpl	.-8      	; 0x4350 <DIO_void_Set_Pin_Value+0x19e>
    4358:	80 95       	com	r24
    435a:	84 23       	and	r24, r20
    435c:	8c 93       	st	X, r24
    435e:	c2 c0       	rjmp	.+388    	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
		}
	}
	else if(value == HIGH)
    4360:	8b 81       	ldd	r24, Y+3	; 0x03
    4362:	81 30       	cpi	r24, 0x01	; 1
    4364:	09 f0       	breq	.+2      	; 0x4368 <DIO_void_Set_Pin_Value+0x1b6>
    4366:	be c0       	rjmp	.+380    	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
	{
		switch(port_no)
    4368:	89 81       	ldd	r24, Y+1	; 0x01
    436a:	28 2f       	mov	r18, r24
    436c:	30 e0       	ldi	r19, 0x00	; 0
    436e:	3d 83       	std	Y+5, r19	; 0x05
    4370:	2c 83       	std	Y+4, r18	; 0x04
    4372:	8c 81       	ldd	r24, Y+4	; 0x04
    4374:	9d 81       	ldd	r25, Y+5	; 0x05
    4376:	83 30       	cpi	r24, 0x03	; 3
    4378:	91 05       	cpc	r25, r1
    437a:	09 f4       	brne	.+2      	; 0x437e <DIO_void_Set_Pin_Value+0x1cc>
    437c:	64 c0       	rjmp	.+200    	; 0x4446 <DIO_void_Set_Pin_Value+0x294>
    437e:	2c 81       	ldd	r18, Y+4	; 0x04
    4380:	3d 81       	ldd	r19, Y+5	; 0x05
    4382:	24 30       	cpi	r18, 0x04	; 4
    4384:	31 05       	cpc	r19, r1
    4386:	84 f4       	brge	.+32     	; 0x43a8 <DIO_void_Set_Pin_Value+0x1f6>
    4388:	8c 81       	ldd	r24, Y+4	; 0x04
    438a:	9d 81       	ldd	r25, Y+5	; 0x05
    438c:	81 30       	cpi	r24, 0x01	; 1
    438e:	91 05       	cpc	r25, r1
    4390:	91 f1       	breq	.+100    	; 0x43f6 <DIO_void_Set_Pin_Value+0x244>
    4392:	2c 81       	ldd	r18, Y+4	; 0x04
    4394:	3d 81       	ldd	r19, Y+5	; 0x05
    4396:	22 30       	cpi	r18, 0x02	; 2
    4398:	31 05       	cpc	r19, r1
    439a:	0c f0       	brlt	.+2      	; 0x439e <DIO_void_Set_Pin_Value+0x1ec>
    439c:	40 c0       	rjmp	.+128    	; 0x441e <DIO_void_Set_Pin_Value+0x26c>
    439e:	8c 81       	ldd	r24, Y+4	; 0x04
    43a0:	9d 81       	ldd	r25, Y+5	; 0x05
    43a2:	00 97       	sbiw	r24, 0x00	; 0
    43a4:	a1 f0       	breq	.+40     	; 0x43ce <DIO_void_Set_Pin_Value+0x21c>
    43a6:	9e c0       	rjmp	.+316    	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
    43a8:	2c 81       	ldd	r18, Y+4	; 0x04
    43aa:	3d 81       	ldd	r19, Y+5	; 0x05
    43ac:	25 30       	cpi	r18, 0x05	; 5
    43ae:	31 05       	cpc	r19, r1
    43b0:	09 f4       	brne	.+2      	; 0x43b4 <DIO_void_Set_Pin_Value+0x202>
    43b2:	71 c0       	rjmp	.+226    	; 0x4496 <DIO_void_Set_Pin_Value+0x2e4>
    43b4:	8c 81       	ldd	r24, Y+4	; 0x04
    43b6:	9d 81       	ldd	r25, Y+5	; 0x05
    43b8:	85 30       	cpi	r24, 0x05	; 5
    43ba:	91 05       	cpc	r25, r1
    43bc:	0c f4       	brge	.+2      	; 0x43c0 <DIO_void_Set_Pin_Value+0x20e>
    43be:	57 c0       	rjmp	.+174    	; 0x446e <DIO_void_Set_Pin_Value+0x2bc>
    43c0:	2c 81       	ldd	r18, Y+4	; 0x04
    43c2:	3d 81       	ldd	r19, Y+5	; 0x05
    43c4:	26 30       	cpi	r18, 0x06	; 6
    43c6:	31 05       	cpc	r19, r1
    43c8:	09 f4       	brne	.+2      	; 0x43cc <DIO_void_Set_Pin_Value+0x21a>
    43ca:	79 c0       	rjmp	.+242    	; 0x44be <DIO_void_Set_Pin_Value+0x30c>
    43cc:	8b c0       	rjmp	.+278    	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
		{
		case PORTA_ID:SET_BIT(PORTA,bit_no);break;
    43ce:	ab e3       	ldi	r26, 0x3B	; 59
    43d0:	b0 e0       	ldi	r27, 0x00	; 0
    43d2:	eb e3       	ldi	r30, 0x3B	; 59
    43d4:	f0 e0       	ldi	r31, 0x00	; 0
    43d6:	80 81       	ld	r24, Z
    43d8:	48 2f       	mov	r20, r24
    43da:	8a 81       	ldd	r24, Y+2	; 0x02
    43dc:	28 2f       	mov	r18, r24
    43de:	30 e0       	ldi	r19, 0x00	; 0
    43e0:	81 e0       	ldi	r24, 0x01	; 1
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	02 2e       	mov	r0, r18
    43e6:	02 c0       	rjmp	.+4      	; 0x43ec <DIO_void_Set_Pin_Value+0x23a>
    43e8:	88 0f       	add	r24, r24
    43ea:	99 1f       	adc	r25, r25
    43ec:	0a 94       	dec	r0
    43ee:	e2 f7       	brpl	.-8      	; 0x43e8 <DIO_void_Set_Pin_Value+0x236>
    43f0:	84 2b       	or	r24, r20
    43f2:	8c 93       	st	X, r24
    43f4:	77 c0       	rjmp	.+238    	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
		case PORTB_ID:SET_BIT(PORTB,bit_no);break;
    43f6:	a8 e3       	ldi	r26, 0x38	; 56
    43f8:	b0 e0       	ldi	r27, 0x00	; 0
    43fa:	e8 e3       	ldi	r30, 0x38	; 56
    43fc:	f0 e0       	ldi	r31, 0x00	; 0
    43fe:	80 81       	ld	r24, Z
    4400:	48 2f       	mov	r20, r24
    4402:	8a 81       	ldd	r24, Y+2	; 0x02
    4404:	28 2f       	mov	r18, r24
    4406:	30 e0       	ldi	r19, 0x00	; 0
    4408:	81 e0       	ldi	r24, 0x01	; 1
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	02 2e       	mov	r0, r18
    440e:	02 c0       	rjmp	.+4      	; 0x4414 <DIO_void_Set_Pin_Value+0x262>
    4410:	88 0f       	add	r24, r24
    4412:	99 1f       	adc	r25, r25
    4414:	0a 94       	dec	r0
    4416:	e2 f7       	brpl	.-8      	; 0x4410 <DIO_void_Set_Pin_Value+0x25e>
    4418:	84 2b       	or	r24, r20
    441a:	8c 93       	st	X, r24
    441c:	63 c0       	rjmp	.+198    	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
		case PORTC_ID:SET_BIT(PORTC,bit_no);break;
    441e:	a5 e3       	ldi	r26, 0x35	; 53
    4420:	b0 e0       	ldi	r27, 0x00	; 0
    4422:	e5 e3       	ldi	r30, 0x35	; 53
    4424:	f0 e0       	ldi	r31, 0x00	; 0
    4426:	80 81       	ld	r24, Z
    4428:	48 2f       	mov	r20, r24
    442a:	8a 81       	ldd	r24, Y+2	; 0x02
    442c:	28 2f       	mov	r18, r24
    442e:	30 e0       	ldi	r19, 0x00	; 0
    4430:	81 e0       	ldi	r24, 0x01	; 1
    4432:	90 e0       	ldi	r25, 0x00	; 0
    4434:	02 2e       	mov	r0, r18
    4436:	02 c0       	rjmp	.+4      	; 0x443c <DIO_void_Set_Pin_Value+0x28a>
    4438:	88 0f       	add	r24, r24
    443a:	99 1f       	adc	r25, r25
    443c:	0a 94       	dec	r0
    443e:	e2 f7       	brpl	.-8      	; 0x4438 <DIO_void_Set_Pin_Value+0x286>
    4440:	84 2b       	or	r24, r20
    4442:	8c 93       	st	X, r24
    4444:	4f c0       	rjmp	.+158    	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
		case PORTD_ID:SET_BIT(PORTD,bit_no);break;
    4446:	a2 e3       	ldi	r26, 0x32	; 50
    4448:	b0 e0       	ldi	r27, 0x00	; 0
    444a:	e2 e3       	ldi	r30, 0x32	; 50
    444c:	f0 e0       	ldi	r31, 0x00	; 0
    444e:	80 81       	ld	r24, Z
    4450:	48 2f       	mov	r20, r24
    4452:	8a 81       	ldd	r24, Y+2	; 0x02
    4454:	28 2f       	mov	r18, r24
    4456:	30 e0       	ldi	r19, 0x00	; 0
    4458:	81 e0       	ldi	r24, 0x01	; 1
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	02 2e       	mov	r0, r18
    445e:	02 c0       	rjmp	.+4      	; 0x4464 <DIO_void_Set_Pin_Value+0x2b2>
    4460:	88 0f       	add	r24, r24
    4462:	99 1f       	adc	r25, r25
    4464:	0a 94       	dec	r0
    4466:	e2 f7       	brpl	.-8      	; 0x4460 <DIO_void_Set_Pin_Value+0x2ae>
    4468:	84 2b       	or	r24, r20
    446a:	8c 93       	st	X, r24
    446c:	3b c0       	rjmp	.+118    	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
		case PORTE_ID:SET_BIT(PORTE,bit_no);break;
    446e:	a3 e2       	ldi	r26, 0x23	; 35
    4470:	b0 e0       	ldi	r27, 0x00	; 0
    4472:	e3 e2       	ldi	r30, 0x23	; 35
    4474:	f0 e0       	ldi	r31, 0x00	; 0
    4476:	80 81       	ld	r24, Z
    4478:	48 2f       	mov	r20, r24
    447a:	8a 81       	ldd	r24, Y+2	; 0x02
    447c:	28 2f       	mov	r18, r24
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	81 e0       	ldi	r24, 0x01	; 1
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	02 2e       	mov	r0, r18
    4486:	02 c0       	rjmp	.+4      	; 0x448c <DIO_void_Set_Pin_Value+0x2da>
    4488:	88 0f       	add	r24, r24
    448a:	99 1f       	adc	r25, r25
    448c:	0a 94       	dec	r0
    448e:	e2 f7       	brpl	.-8      	; 0x4488 <DIO_void_Set_Pin_Value+0x2d6>
    4490:	84 2b       	or	r24, r20
    4492:	8c 93       	st	X, r24
    4494:	27 c0       	rjmp	.+78     	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
		case PORTF_ID:SET_BIT(PORTF,bit_no);break;
    4496:	a2 e6       	ldi	r26, 0x62	; 98
    4498:	b0 e0       	ldi	r27, 0x00	; 0
    449a:	e2 e6       	ldi	r30, 0x62	; 98
    449c:	f0 e0       	ldi	r31, 0x00	; 0
    449e:	80 81       	ld	r24, Z
    44a0:	48 2f       	mov	r20, r24
    44a2:	8a 81       	ldd	r24, Y+2	; 0x02
    44a4:	28 2f       	mov	r18, r24
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	81 e0       	ldi	r24, 0x01	; 1
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	02 2e       	mov	r0, r18
    44ae:	02 c0       	rjmp	.+4      	; 0x44b4 <DIO_void_Set_Pin_Value+0x302>
    44b0:	88 0f       	add	r24, r24
    44b2:	99 1f       	adc	r25, r25
    44b4:	0a 94       	dec	r0
    44b6:	e2 f7       	brpl	.-8      	; 0x44b0 <DIO_void_Set_Pin_Value+0x2fe>
    44b8:	84 2b       	or	r24, r20
    44ba:	8c 93       	st	X, r24
    44bc:	13 c0       	rjmp	.+38     	; 0x44e4 <DIO_void_Set_Pin_Value+0x332>
		case PORTG_ID:SET_BIT(PORTG,bit_no);break;
    44be:	a5 e6       	ldi	r26, 0x65	; 101
    44c0:	b0 e0       	ldi	r27, 0x00	; 0
    44c2:	e5 e6       	ldi	r30, 0x65	; 101
    44c4:	f0 e0       	ldi	r31, 0x00	; 0
    44c6:	80 81       	ld	r24, Z
    44c8:	48 2f       	mov	r20, r24
    44ca:	8a 81       	ldd	r24, Y+2	; 0x02
    44cc:	28 2f       	mov	r18, r24
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	81 e0       	ldi	r24, 0x01	; 1
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	02 2e       	mov	r0, r18
    44d6:	02 c0       	rjmp	.+4      	; 0x44dc <DIO_void_Set_Pin_Value+0x32a>
    44d8:	88 0f       	add	r24, r24
    44da:	99 1f       	adc	r25, r25
    44dc:	0a 94       	dec	r0
    44de:	e2 f7       	brpl	.-8      	; 0x44d8 <DIO_void_Set_Pin_Value+0x326>
    44e0:	84 2b       	or	r24, r20
    44e2:	8c 93       	st	X, r24
		}
	}
}
    44e4:	27 96       	adiw	r28, 0x07	; 7
    44e6:	0f b6       	in	r0, 0x3f	; 63
    44e8:	f8 94       	cli
    44ea:	de bf       	out	0x3e, r29	; 62
    44ec:	0f be       	out	0x3f, r0	; 63
    44ee:	cd bf       	out	0x3d, r28	; 61
    44f0:	cf 91       	pop	r28
    44f2:	df 91       	pop	r29
    44f4:	08 95       	ret

000044f6 <DIO_value_type_Get_Pin_Value>:

value_type DIO_value_type_Get_Pin_Value(port_no_type port_no, bit_no_type bit_no)
{
    44f6:	df 93       	push	r29
    44f8:	cf 93       	push	r28
    44fa:	00 d0       	rcall	.+0      	; 0x44fc <DIO_value_type_Get_Pin_Value+0x6>
    44fc:	00 d0       	rcall	.+0      	; 0x44fe <DIO_value_type_Get_Pin_Value+0x8>
    44fe:	0f 92       	push	r0
    4500:	cd b7       	in	r28, 0x3d	; 61
    4502:	de b7       	in	r29, 0x3e	; 62
    4504:	8a 83       	std	Y+2, r24	; 0x02
    4506:	6b 83       	std	Y+3, r22	; 0x03
	value_type return_value;
	switch(port_no)
    4508:	8a 81       	ldd	r24, Y+2	; 0x02
    450a:	28 2f       	mov	r18, r24
    450c:	30 e0       	ldi	r19, 0x00	; 0
    450e:	3d 83       	std	Y+5, r19	; 0x05
    4510:	2c 83       	std	Y+4, r18	; 0x04
    4512:	4c 81       	ldd	r20, Y+4	; 0x04
    4514:	5d 81       	ldd	r21, Y+5	; 0x05
    4516:	43 30       	cpi	r20, 0x03	; 3
    4518:	51 05       	cpc	r21, r1
    451a:	09 f4       	brne	.+2      	; 0x451e <DIO_value_type_Get_Pin_Value+0x28>
    451c:	5e c0       	rjmp	.+188    	; 0x45da <DIO_value_type_Get_Pin_Value+0xe4>
    451e:	8c 81       	ldd	r24, Y+4	; 0x04
    4520:	9d 81       	ldd	r25, Y+5	; 0x05
    4522:	84 30       	cpi	r24, 0x04	; 4
    4524:	91 05       	cpc	r25, r1
    4526:	84 f4       	brge	.+32     	; 0x4548 <DIO_value_type_Get_Pin_Value+0x52>
    4528:	2c 81       	ldd	r18, Y+4	; 0x04
    452a:	3d 81       	ldd	r19, Y+5	; 0x05
    452c:	21 30       	cpi	r18, 0x01	; 1
    452e:	31 05       	cpc	r19, r1
    4530:	81 f1       	breq	.+96     	; 0x4592 <DIO_value_type_Get_Pin_Value+0x9c>
    4532:	4c 81       	ldd	r20, Y+4	; 0x04
    4534:	5d 81       	ldd	r21, Y+5	; 0x05
    4536:	42 30       	cpi	r20, 0x02	; 2
    4538:	51 05       	cpc	r21, r1
    453a:	0c f0       	brlt	.+2      	; 0x453e <DIO_value_type_Get_Pin_Value+0x48>
    453c:	3c c0       	rjmp	.+120    	; 0x45b6 <DIO_value_type_Get_Pin_Value+0xc0>
    453e:	8c 81       	ldd	r24, Y+4	; 0x04
    4540:	9d 81       	ldd	r25, Y+5	; 0x05
    4542:	00 97       	sbiw	r24, 0x00	; 0
    4544:	a1 f0       	breq	.+40     	; 0x456e <DIO_value_type_Get_Pin_Value+0x78>
    4546:	90 c0       	rjmp	.+288    	; 0x4668 <DIO_value_type_Get_Pin_Value+0x172>
    4548:	2c 81       	ldd	r18, Y+4	; 0x04
    454a:	3d 81       	ldd	r19, Y+5	; 0x05
    454c:	25 30       	cpi	r18, 0x05	; 5
    454e:	31 05       	cpc	r19, r1
    4550:	09 f4       	brne	.+2      	; 0x4554 <DIO_value_type_Get_Pin_Value+0x5e>
    4552:	67 c0       	rjmp	.+206    	; 0x4622 <DIO_value_type_Get_Pin_Value+0x12c>
    4554:	4c 81       	ldd	r20, Y+4	; 0x04
    4556:	5d 81       	ldd	r21, Y+5	; 0x05
    4558:	45 30       	cpi	r20, 0x05	; 5
    455a:	51 05       	cpc	r21, r1
    455c:	0c f4       	brge	.+2      	; 0x4560 <DIO_value_type_Get_Pin_Value+0x6a>
    455e:	4f c0       	rjmp	.+158    	; 0x45fe <DIO_value_type_Get_Pin_Value+0x108>
    4560:	8c 81       	ldd	r24, Y+4	; 0x04
    4562:	9d 81       	ldd	r25, Y+5	; 0x05
    4564:	86 30       	cpi	r24, 0x06	; 6
    4566:	91 05       	cpc	r25, r1
    4568:	09 f4       	brne	.+2      	; 0x456c <DIO_value_type_Get_Pin_Value+0x76>
    456a:	6d c0       	rjmp	.+218    	; 0x4646 <DIO_value_type_Get_Pin_Value+0x150>
    456c:	7d c0       	rjmp	.+250    	; 0x4668 <DIO_value_type_Get_Pin_Value+0x172>
	{
	case PORTA_ID:return_value = GET_BIT(PINA,bit_no);break;
    456e:	e9 e3       	ldi	r30, 0x39	; 57
    4570:	f0 e0       	ldi	r31, 0x00	; 0
    4572:	80 81       	ld	r24, Z
    4574:	28 2f       	mov	r18, r24
    4576:	30 e0       	ldi	r19, 0x00	; 0
    4578:	8b 81       	ldd	r24, Y+3	; 0x03
    457a:	88 2f       	mov	r24, r24
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	a9 01       	movw	r20, r18
    4580:	02 c0       	rjmp	.+4      	; 0x4586 <DIO_value_type_Get_Pin_Value+0x90>
    4582:	55 95       	asr	r21
    4584:	47 95       	ror	r20
    4586:	8a 95       	dec	r24
    4588:	e2 f7       	brpl	.-8      	; 0x4582 <DIO_value_type_Get_Pin_Value+0x8c>
    458a:	ca 01       	movw	r24, r20
    458c:	81 70       	andi	r24, 0x01	; 1
    458e:	89 83       	std	Y+1, r24	; 0x01
    4590:	6b c0       	rjmp	.+214    	; 0x4668 <DIO_value_type_Get_Pin_Value+0x172>
	case PORTB_ID:return_value = GET_BIT(PINB,bit_no);break;
    4592:	e6 e3       	ldi	r30, 0x36	; 54
    4594:	f0 e0       	ldi	r31, 0x00	; 0
    4596:	80 81       	ld	r24, Z
    4598:	28 2f       	mov	r18, r24
    459a:	30 e0       	ldi	r19, 0x00	; 0
    459c:	8b 81       	ldd	r24, Y+3	; 0x03
    459e:	88 2f       	mov	r24, r24
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	a9 01       	movw	r20, r18
    45a4:	02 c0       	rjmp	.+4      	; 0x45aa <DIO_value_type_Get_Pin_Value+0xb4>
    45a6:	55 95       	asr	r21
    45a8:	47 95       	ror	r20
    45aa:	8a 95       	dec	r24
    45ac:	e2 f7       	brpl	.-8      	; 0x45a6 <DIO_value_type_Get_Pin_Value+0xb0>
    45ae:	ca 01       	movw	r24, r20
    45b0:	81 70       	andi	r24, 0x01	; 1
    45b2:	89 83       	std	Y+1, r24	; 0x01
    45b4:	59 c0       	rjmp	.+178    	; 0x4668 <DIO_value_type_Get_Pin_Value+0x172>
	case PORTC_ID:return_value = GET_BIT(PINC,bit_no);break;
    45b6:	e3 e3       	ldi	r30, 0x33	; 51
    45b8:	f0 e0       	ldi	r31, 0x00	; 0
    45ba:	80 81       	ld	r24, Z
    45bc:	28 2f       	mov	r18, r24
    45be:	30 e0       	ldi	r19, 0x00	; 0
    45c0:	8b 81       	ldd	r24, Y+3	; 0x03
    45c2:	88 2f       	mov	r24, r24
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	a9 01       	movw	r20, r18
    45c8:	02 c0       	rjmp	.+4      	; 0x45ce <DIO_value_type_Get_Pin_Value+0xd8>
    45ca:	55 95       	asr	r21
    45cc:	47 95       	ror	r20
    45ce:	8a 95       	dec	r24
    45d0:	e2 f7       	brpl	.-8      	; 0x45ca <DIO_value_type_Get_Pin_Value+0xd4>
    45d2:	ca 01       	movw	r24, r20
    45d4:	81 70       	andi	r24, 0x01	; 1
    45d6:	89 83       	std	Y+1, r24	; 0x01
    45d8:	47 c0       	rjmp	.+142    	; 0x4668 <DIO_value_type_Get_Pin_Value+0x172>
	case PORTD_ID:return_value = GET_BIT(PIND,bit_no);break;
    45da:	e0 e3       	ldi	r30, 0x30	; 48
    45dc:	f0 e0       	ldi	r31, 0x00	; 0
    45de:	80 81       	ld	r24, Z
    45e0:	28 2f       	mov	r18, r24
    45e2:	30 e0       	ldi	r19, 0x00	; 0
    45e4:	8b 81       	ldd	r24, Y+3	; 0x03
    45e6:	88 2f       	mov	r24, r24
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	a9 01       	movw	r20, r18
    45ec:	02 c0       	rjmp	.+4      	; 0x45f2 <DIO_value_type_Get_Pin_Value+0xfc>
    45ee:	55 95       	asr	r21
    45f0:	47 95       	ror	r20
    45f2:	8a 95       	dec	r24
    45f4:	e2 f7       	brpl	.-8      	; 0x45ee <DIO_value_type_Get_Pin_Value+0xf8>
    45f6:	ca 01       	movw	r24, r20
    45f8:	81 70       	andi	r24, 0x01	; 1
    45fa:	89 83       	std	Y+1, r24	; 0x01
    45fc:	35 c0       	rjmp	.+106    	; 0x4668 <DIO_value_type_Get_Pin_Value+0x172>
	case PORTE_ID:return_value = GET_BIT(PINE,bit_no);break;
    45fe:	e1 e2       	ldi	r30, 0x21	; 33
    4600:	f0 e0       	ldi	r31, 0x00	; 0
    4602:	80 81       	ld	r24, Z
    4604:	28 2f       	mov	r18, r24
    4606:	30 e0       	ldi	r19, 0x00	; 0
    4608:	8b 81       	ldd	r24, Y+3	; 0x03
    460a:	88 2f       	mov	r24, r24
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	a9 01       	movw	r20, r18
    4610:	02 c0       	rjmp	.+4      	; 0x4616 <DIO_value_type_Get_Pin_Value+0x120>
    4612:	55 95       	asr	r21
    4614:	47 95       	ror	r20
    4616:	8a 95       	dec	r24
    4618:	e2 f7       	brpl	.-8      	; 0x4612 <DIO_value_type_Get_Pin_Value+0x11c>
    461a:	ca 01       	movw	r24, r20
    461c:	81 70       	andi	r24, 0x01	; 1
    461e:	89 83       	std	Y+1, r24	; 0x01
    4620:	23 c0       	rjmp	.+70     	; 0x4668 <DIO_value_type_Get_Pin_Value+0x172>
	case PORTF_ID:return_value = GET_BIT(PINF,bit_no);break;
    4622:	e0 e2       	ldi	r30, 0x20	; 32
    4624:	f0 e0       	ldi	r31, 0x00	; 0
    4626:	80 81       	ld	r24, Z
    4628:	28 2f       	mov	r18, r24
    462a:	30 e0       	ldi	r19, 0x00	; 0
    462c:	8b 81       	ldd	r24, Y+3	; 0x03
    462e:	88 2f       	mov	r24, r24
    4630:	90 e0       	ldi	r25, 0x00	; 0
    4632:	a9 01       	movw	r20, r18
    4634:	02 c0       	rjmp	.+4      	; 0x463a <DIO_value_type_Get_Pin_Value+0x144>
    4636:	55 95       	asr	r21
    4638:	47 95       	ror	r20
    463a:	8a 95       	dec	r24
    463c:	e2 f7       	brpl	.-8      	; 0x4636 <DIO_value_type_Get_Pin_Value+0x140>
    463e:	ca 01       	movw	r24, r20
    4640:	81 70       	andi	r24, 0x01	; 1
    4642:	89 83       	std	Y+1, r24	; 0x01
    4644:	11 c0       	rjmp	.+34     	; 0x4668 <DIO_value_type_Get_Pin_Value+0x172>
	case PORTG_ID:return_value = GET_BIT(PING,bit_no);break;
    4646:	e3 e6       	ldi	r30, 0x63	; 99
    4648:	f0 e0       	ldi	r31, 0x00	; 0
    464a:	80 81       	ld	r24, Z
    464c:	28 2f       	mov	r18, r24
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	8b 81       	ldd	r24, Y+3	; 0x03
    4652:	88 2f       	mov	r24, r24
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	a9 01       	movw	r20, r18
    4658:	02 c0       	rjmp	.+4      	; 0x465e <DIO_value_type_Get_Pin_Value+0x168>
    465a:	55 95       	asr	r21
    465c:	47 95       	ror	r20
    465e:	8a 95       	dec	r24
    4660:	e2 f7       	brpl	.-8      	; 0x465a <DIO_value_type_Get_Pin_Value+0x164>
    4662:	ca 01       	movw	r24, r20
    4664:	81 70       	andi	r24, 0x01	; 1
    4666:	89 83       	std	Y+1, r24	; 0x01
	}

	return return_value;
    4668:	89 81       	ldd	r24, Y+1	; 0x01
}
    466a:	0f 90       	pop	r0
    466c:	0f 90       	pop	r0
    466e:	0f 90       	pop	r0
    4670:	0f 90       	pop	r0
    4672:	0f 90       	pop	r0
    4674:	cf 91       	pop	r28
    4676:	df 91       	pop	r29
    4678:	08 95       	ret

0000467a <DIO_void_Set_Port_Dirction>:

void DIO_void_Set_Port_Dirction(port_no_type port_no, uint8 direction)
{
    467a:	df 93       	push	r29
    467c:	cf 93       	push	r28
    467e:	00 d0       	rcall	.+0      	; 0x4680 <DIO_void_Set_Port_Dirction+0x6>
    4680:	00 d0       	rcall	.+0      	; 0x4682 <DIO_void_Set_Port_Dirction+0x8>
    4682:	cd b7       	in	r28, 0x3d	; 61
    4684:	de b7       	in	r29, 0x3e	; 62
    4686:	89 83       	std	Y+1, r24	; 0x01
    4688:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_no)
    468a:	89 81       	ldd	r24, Y+1	; 0x01
    468c:	28 2f       	mov	r18, r24
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	3c 83       	std	Y+4, r19	; 0x04
    4692:	2b 83       	std	Y+3, r18	; 0x03
    4694:	8b 81       	ldd	r24, Y+3	; 0x03
    4696:	9c 81       	ldd	r25, Y+4	; 0x04
    4698:	83 30       	cpi	r24, 0x03	; 3
    469a:	91 05       	cpc	r25, r1
    469c:	99 f1       	breq	.+102    	; 0x4704 <DIO_void_Set_Port_Dirction+0x8a>
    469e:	2b 81       	ldd	r18, Y+3	; 0x03
    46a0:	3c 81       	ldd	r19, Y+4	; 0x04
    46a2:	24 30       	cpi	r18, 0x04	; 4
    46a4:	31 05       	cpc	r19, r1
    46a6:	7c f4       	brge	.+30     	; 0x46c6 <DIO_void_Set_Port_Dirction+0x4c>
    46a8:	8b 81       	ldd	r24, Y+3	; 0x03
    46aa:	9c 81       	ldd	r25, Y+4	; 0x04
    46ac:	81 30       	cpi	r24, 0x01	; 1
    46ae:	91 05       	cpc	r25, r1
    46b0:	f9 f0       	breq	.+62     	; 0x46f0 <DIO_void_Set_Port_Dirction+0x76>
    46b2:	2b 81       	ldd	r18, Y+3	; 0x03
    46b4:	3c 81       	ldd	r19, Y+4	; 0x04
    46b6:	22 30       	cpi	r18, 0x02	; 2
    46b8:	31 05       	cpc	r19, r1
    46ba:	fc f4       	brge	.+62     	; 0x46fa <DIO_void_Set_Port_Dirction+0x80>
    46bc:	8b 81       	ldd	r24, Y+3	; 0x03
    46be:	9c 81       	ldd	r25, Y+4	; 0x04
    46c0:	00 97       	sbiw	r24, 0x00	; 0
    46c2:	89 f0       	breq	.+34     	; 0x46e6 <DIO_void_Set_Port_Dirction+0x6c>
    46c4:	32 c0       	rjmp	.+100    	; 0x472a <DIO_void_Set_Port_Dirction+0xb0>
    46c6:	2b 81       	ldd	r18, Y+3	; 0x03
    46c8:	3c 81       	ldd	r19, Y+4	; 0x04
    46ca:	25 30       	cpi	r18, 0x05	; 5
    46cc:	31 05       	cpc	r19, r1
    46ce:	21 f1       	breq	.+72     	; 0x4718 <DIO_void_Set_Port_Dirction+0x9e>
    46d0:	8b 81       	ldd	r24, Y+3	; 0x03
    46d2:	9c 81       	ldd	r25, Y+4	; 0x04
    46d4:	85 30       	cpi	r24, 0x05	; 5
    46d6:	91 05       	cpc	r25, r1
    46d8:	d4 f0       	brlt	.+52     	; 0x470e <DIO_void_Set_Port_Dirction+0x94>
    46da:	2b 81       	ldd	r18, Y+3	; 0x03
    46dc:	3c 81       	ldd	r19, Y+4	; 0x04
    46de:	26 30       	cpi	r18, 0x06	; 6
    46e0:	31 05       	cpc	r19, r1
    46e2:	f9 f0       	breq	.+62     	; 0x4722 <DIO_void_Set_Port_Dirction+0xa8>
    46e4:	22 c0       	rjmp	.+68     	; 0x472a <DIO_void_Set_Port_Dirction+0xb0>
	{
	case PORTA_ID: DDRA = direction; break;
    46e6:	ea e3       	ldi	r30, 0x3A	; 58
    46e8:	f0 e0       	ldi	r31, 0x00	; 0
    46ea:	8a 81       	ldd	r24, Y+2	; 0x02
    46ec:	80 83       	st	Z, r24
    46ee:	1d c0       	rjmp	.+58     	; 0x472a <DIO_void_Set_Port_Dirction+0xb0>
	case PORTB_ID: DDRB = direction; break;
    46f0:	e7 e3       	ldi	r30, 0x37	; 55
    46f2:	f0 e0       	ldi	r31, 0x00	; 0
    46f4:	8a 81       	ldd	r24, Y+2	; 0x02
    46f6:	80 83       	st	Z, r24
    46f8:	18 c0       	rjmp	.+48     	; 0x472a <DIO_void_Set_Port_Dirction+0xb0>
	case PORTC_ID: DDRC = direction; break;
    46fa:	e4 e3       	ldi	r30, 0x34	; 52
    46fc:	f0 e0       	ldi	r31, 0x00	; 0
    46fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4700:	80 83       	st	Z, r24
    4702:	13 c0       	rjmp	.+38     	; 0x472a <DIO_void_Set_Port_Dirction+0xb0>
	case PORTD_ID: DDRD = direction; break;
    4704:	e1 e3       	ldi	r30, 0x31	; 49
    4706:	f0 e0       	ldi	r31, 0x00	; 0
    4708:	8a 81       	ldd	r24, Y+2	; 0x02
    470a:	80 83       	st	Z, r24
    470c:	0e c0       	rjmp	.+28     	; 0x472a <DIO_void_Set_Port_Dirction+0xb0>
	case PORTE_ID: DDRE = direction; break;
    470e:	e2 e2       	ldi	r30, 0x22	; 34
    4710:	f0 e0       	ldi	r31, 0x00	; 0
    4712:	8a 81       	ldd	r24, Y+2	; 0x02
    4714:	80 83       	st	Z, r24
    4716:	09 c0       	rjmp	.+18     	; 0x472a <DIO_void_Set_Port_Dirction+0xb0>
	case PORTF_ID: DDRF = direction; break;
    4718:	e1 e6       	ldi	r30, 0x61	; 97
    471a:	f0 e0       	ldi	r31, 0x00	; 0
    471c:	8a 81       	ldd	r24, Y+2	; 0x02
    471e:	80 83       	st	Z, r24
    4720:	04 c0       	rjmp	.+8      	; 0x472a <DIO_void_Set_Port_Dirction+0xb0>
	case PORTG_ID: DDRG = direction; break;
    4722:	e4 e6       	ldi	r30, 0x64	; 100
    4724:	f0 e0       	ldi	r31, 0x00	; 0
    4726:	8a 81       	ldd	r24, Y+2	; 0x02
    4728:	80 83       	st	Z, r24
	}
}
    472a:	0f 90       	pop	r0
    472c:	0f 90       	pop	r0
    472e:	0f 90       	pop	r0
    4730:	0f 90       	pop	r0
    4732:	cf 91       	pop	r28
    4734:	df 91       	pop	r29
    4736:	08 95       	ret

00004738 <DIO_void_Set_Port_Value>:

void DIO_void_Set_Port_Value(port_no_type port_no, uint8 value)
{
    4738:	df 93       	push	r29
    473a:	cf 93       	push	r28
    473c:	00 d0       	rcall	.+0      	; 0x473e <DIO_void_Set_Port_Value+0x6>
    473e:	00 d0       	rcall	.+0      	; 0x4740 <DIO_void_Set_Port_Value+0x8>
    4740:	cd b7       	in	r28, 0x3d	; 61
    4742:	de b7       	in	r29, 0x3e	; 62
    4744:	89 83       	std	Y+1, r24	; 0x01
    4746:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_no)
    4748:	89 81       	ldd	r24, Y+1	; 0x01
    474a:	28 2f       	mov	r18, r24
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	3c 83       	std	Y+4, r19	; 0x04
    4750:	2b 83       	std	Y+3, r18	; 0x03
    4752:	8b 81       	ldd	r24, Y+3	; 0x03
    4754:	9c 81       	ldd	r25, Y+4	; 0x04
    4756:	83 30       	cpi	r24, 0x03	; 3
    4758:	91 05       	cpc	r25, r1
    475a:	99 f1       	breq	.+102    	; 0x47c2 <DIO_void_Set_Port_Value+0x8a>
    475c:	2b 81       	ldd	r18, Y+3	; 0x03
    475e:	3c 81       	ldd	r19, Y+4	; 0x04
    4760:	24 30       	cpi	r18, 0x04	; 4
    4762:	31 05       	cpc	r19, r1
    4764:	7c f4       	brge	.+30     	; 0x4784 <DIO_void_Set_Port_Value+0x4c>
    4766:	8b 81       	ldd	r24, Y+3	; 0x03
    4768:	9c 81       	ldd	r25, Y+4	; 0x04
    476a:	81 30       	cpi	r24, 0x01	; 1
    476c:	91 05       	cpc	r25, r1
    476e:	f9 f0       	breq	.+62     	; 0x47ae <DIO_void_Set_Port_Value+0x76>
    4770:	2b 81       	ldd	r18, Y+3	; 0x03
    4772:	3c 81       	ldd	r19, Y+4	; 0x04
    4774:	22 30       	cpi	r18, 0x02	; 2
    4776:	31 05       	cpc	r19, r1
    4778:	fc f4       	brge	.+62     	; 0x47b8 <DIO_void_Set_Port_Value+0x80>
    477a:	8b 81       	ldd	r24, Y+3	; 0x03
    477c:	9c 81       	ldd	r25, Y+4	; 0x04
    477e:	00 97       	sbiw	r24, 0x00	; 0
    4780:	89 f0       	breq	.+34     	; 0x47a4 <DIO_void_Set_Port_Value+0x6c>
    4782:	32 c0       	rjmp	.+100    	; 0x47e8 <DIO_void_Set_Port_Value+0xb0>
    4784:	2b 81       	ldd	r18, Y+3	; 0x03
    4786:	3c 81       	ldd	r19, Y+4	; 0x04
    4788:	25 30       	cpi	r18, 0x05	; 5
    478a:	31 05       	cpc	r19, r1
    478c:	21 f1       	breq	.+72     	; 0x47d6 <DIO_void_Set_Port_Value+0x9e>
    478e:	8b 81       	ldd	r24, Y+3	; 0x03
    4790:	9c 81       	ldd	r25, Y+4	; 0x04
    4792:	85 30       	cpi	r24, 0x05	; 5
    4794:	91 05       	cpc	r25, r1
    4796:	d4 f0       	brlt	.+52     	; 0x47cc <DIO_void_Set_Port_Value+0x94>
    4798:	2b 81       	ldd	r18, Y+3	; 0x03
    479a:	3c 81       	ldd	r19, Y+4	; 0x04
    479c:	26 30       	cpi	r18, 0x06	; 6
    479e:	31 05       	cpc	r19, r1
    47a0:	f9 f0       	breq	.+62     	; 0x47e0 <DIO_void_Set_Port_Value+0xa8>
    47a2:	22 c0       	rjmp	.+68     	; 0x47e8 <DIO_void_Set_Port_Value+0xb0>
	{
	case PORTA_ID: PORTA = value; break;
    47a4:	eb e3       	ldi	r30, 0x3B	; 59
    47a6:	f0 e0       	ldi	r31, 0x00	; 0
    47a8:	8a 81       	ldd	r24, Y+2	; 0x02
    47aa:	80 83       	st	Z, r24
    47ac:	1d c0       	rjmp	.+58     	; 0x47e8 <DIO_void_Set_Port_Value+0xb0>
	case PORTB_ID: PORTB = value; break;
    47ae:	e8 e3       	ldi	r30, 0x38	; 56
    47b0:	f0 e0       	ldi	r31, 0x00	; 0
    47b2:	8a 81       	ldd	r24, Y+2	; 0x02
    47b4:	80 83       	st	Z, r24
    47b6:	18 c0       	rjmp	.+48     	; 0x47e8 <DIO_void_Set_Port_Value+0xb0>
	case PORTC_ID: PORTC = value; break;
    47b8:	e5 e3       	ldi	r30, 0x35	; 53
    47ba:	f0 e0       	ldi	r31, 0x00	; 0
    47bc:	8a 81       	ldd	r24, Y+2	; 0x02
    47be:	80 83       	st	Z, r24
    47c0:	13 c0       	rjmp	.+38     	; 0x47e8 <DIO_void_Set_Port_Value+0xb0>
	case PORTD_ID: PORTD = value; break;
    47c2:	e2 e3       	ldi	r30, 0x32	; 50
    47c4:	f0 e0       	ldi	r31, 0x00	; 0
    47c6:	8a 81       	ldd	r24, Y+2	; 0x02
    47c8:	80 83       	st	Z, r24
    47ca:	0e c0       	rjmp	.+28     	; 0x47e8 <DIO_void_Set_Port_Value+0xb0>
	case PORTE_ID: PORTE = value; break;
    47cc:	e3 e2       	ldi	r30, 0x23	; 35
    47ce:	f0 e0       	ldi	r31, 0x00	; 0
    47d0:	8a 81       	ldd	r24, Y+2	; 0x02
    47d2:	80 83       	st	Z, r24
    47d4:	09 c0       	rjmp	.+18     	; 0x47e8 <DIO_void_Set_Port_Value+0xb0>
	case PORTF_ID: PORTF = value; break;
    47d6:	e2 e6       	ldi	r30, 0x62	; 98
    47d8:	f0 e0       	ldi	r31, 0x00	; 0
    47da:	8a 81       	ldd	r24, Y+2	; 0x02
    47dc:	80 83       	st	Z, r24
    47de:	04 c0       	rjmp	.+8      	; 0x47e8 <DIO_void_Set_Port_Value+0xb0>
	case PORTG_ID: PORTG = value; break;
    47e0:	e5 e6       	ldi	r30, 0x65	; 101
    47e2:	f0 e0       	ldi	r31, 0x00	; 0
    47e4:	8a 81       	ldd	r24, Y+2	; 0x02
    47e6:	80 83       	st	Z, r24
	}
}
    47e8:	0f 90       	pop	r0
    47ea:	0f 90       	pop	r0
    47ec:	0f 90       	pop	r0
    47ee:	0f 90       	pop	r0
    47f0:	cf 91       	pop	r28
    47f2:	df 91       	pop	r29
    47f4:	08 95       	ret

000047f6 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L>:

void DIO_void_Set_Port_ValueNIPPLE_H_OR_L(port_no_type port_no, uint8 value,NIPPLE_H_OR_L_type nipple)
{
    47f6:	df 93       	push	r29
    47f8:	cf 93       	push	r28
    47fa:	cd b7       	in	r28, 0x3d	; 61
    47fc:	de b7       	in	r29, 0x3e	; 62
    47fe:	27 97       	sbiw	r28, 0x07	; 7
    4800:	0f b6       	in	r0, 0x3f	; 63
    4802:	f8 94       	cli
    4804:	de bf       	out	0x3e, r29	; 62
    4806:	0f be       	out	0x3f, r0	; 63
    4808:	cd bf       	out	0x3d, r28	; 61
    480a:	89 83       	std	Y+1, r24	; 0x01
    480c:	6a 83       	std	Y+2, r22	; 0x02
    480e:	4b 83       	std	Y+3, r20	; 0x03
	if(nipple==NIPPLEL)
    4810:	8b 81       	ldd	r24, Y+3	; 0x03
    4812:	88 23       	and	r24, r24
    4814:	09 f0       	breq	.+2      	; 0x4818 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x22>
    4816:	85 c0       	rjmp	.+266    	; 0x4922 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x12c>
	{
		switch(port_no)
    4818:	89 81       	ldd	r24, Y+1	; 0x01
    481a:	28 2f       	mov	r18, r24
    481c:	30 e0       	ldi	r19, 0x00	; 0
    481e:	3f 83       	std	Y+7, r19	; 0x07
    4820:	2e 83       	std	Y+6, r18	; 0x06
    4822:	8e 81       	ldd	r24, Y+6	; 0x06
    4824:	9f 81       	ldd	r25, Y+7	; 0x07
    4826:	83 30       	cpi	r24, 0x03	; 3
    4828:	91 05       	cpc	r25, r1
    482a:	09 f4       	brne	.+2      	; 0x482e <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x38>
    482c:	4a c0       	rjmp	.+148    	; 0x48c2 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0xcc>
    482e:	2e 81       	ldd	r18, Y+6	; 0x06
    4830:	3f 81       	ldd	r19, Y+7	; 0x07
    4832:	24 30       	cpi	r18, 0x04	; 4
    4834:	31 05       	cpc	r19, r1
    4836:	7c f4       	brge	.+30     	; 0x4856 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x60>
    4838:	8e 81       	ldd	r24, Y+6	; 0x06
    483a:	9f 81       	ldd	r25, Y+7	; 0x07
    483c:	81 30       	cpi	r24, 0x01	; 1
    483e:	91 05       	cpc	r25, r1
    4840:	41 f1       	breq	.+80     	; 0x4892 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x9c>
    4842:	2e 81       	ldd	r18, Y+6	; 0x06
    4844:	3f 81       	ldd	r19, Y+7	; 0x07
    4846:	22 30       	cpi	r18, 0x02	; 2
    4848:	31 05       	cpc	r19, r1
    484a:	7c f5       	brge	.+94     	; 0x48aa <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0xb4>
    484c:	8e 81       	ldd	r24, Y+6	; 0x06
    484e:	9f 81       	ldd	r25, Y+7	; 0x07
    4850:	00 97       	sbiw	r24, 0x00	; 0
    4852:	99 f0       	breq	.+38     	; 0x487a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x84>
    4854:	da c0       	rjmp	.+436    	; 0x4a0a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
    4856:	2e 81       	ldd	r18, Y+6	; 0x06
    4858:	3f 81       	ldd	r19, Y+7	; 0x07
    485a:	25 30       	cpi	r18, 0x05	; 5
    485c:	31 05       	cpc	r19, r1
    485e:	09 f4       	brne	.+2      	; 0x4862 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x6c>
    4860:	48 c0       	rjmp	.+144    	; 0x48f2 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0xfc>
    4862:	8e 81       	ldd	r24, Y+6	; 0x06
    4864:	9f 81       	ldd	r25, Y+7	; 0x07
    4866:	85 30       	cpi	r24, 0x05	; 5
    4868:	91 05       	cpc	r25, r1
    486a:	bc f1       	brlt	.+110    	; 0x48da <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0xe4>
    486c:	2e 81       	ldd	r18, Y+6	; 0x06
    486e:	3f 81       	ldd	r19, Y+7	; 0x07
    4870:	26 30       	cpi	r18, 0x06	; 6
    4872:	31 05       	cpc	r19, r1
    4874:	09 f4       	brne	.+2      	; 0x4878 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x82>
    4876:	49 c0       	rjmp	.+146    	; 0x490a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x114>
    4878:	c8 c0       	rjmp	.+400    	; 0x4a0a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			{
			case PORTA_ID: ASSIGN_NippleL(PORTA,value); break;
    487a:	ab e3       	ldi	r26, 0x3B	; 59
    487c:	b0 e0       	ldi	r27, 0x00	; 0
    487e:	eb e3       	ldi	r30, 0x3B	; 59
    4880:	f0 e0       	ldi	r31, 0x00	; 0
    4882:	80 81       	ld	r24, Z
    4884:	98 2f       	mov	r25, r24
    4886:	90 7f       	andi	r25, 0xF0	; 240
    4888:	8a 81       	ldd	r24, Y+2	; 0x02
    488a:	8f 70       	andi	r24, 0x0F	; 15
    488c:	89 2b       	or	r24, r25
    488e:	8c 93       	st	X, r24
    4890:	bc c0       	rjmp	.+376    	; 0x4a0a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTB_ID: ASSIGN_NippleL(PORTB,value);break;
    4892:	a8 e3       	ldi	r26, 0x38	; 56
    4894:	b0 e0       	ldi	r27, 0x00	; 0
    4896:	e8 e3       	ldi	r30, 0x38	; 56
    4898:	f0 e0       	ldi	r31, 0x00	; 0
    489a:	80 81       	ld	r24, Z
    489c:	98 2f       	mov	r25, r24
    489e:	90 7f       	andi	r25, 0xF0	; 240
    48a0:	8a 81       	ldd	r24, Y+2	; 0x02
    48a2:	8f 70       	andi	r24, 0x0F	; 15
    48a4:	89 2b       	or	r24, r25
    48a6:	8c 93       	st	X, r24
    48a8:	b0 c0       	rjmp	.+352    	; 0x4a0a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTC_ID: ASSIGN_NippleL(PORTC,value); break;
    48aa:	a5 e3       	ldi	r26, 0x35	; 53
    48ac:	b0 e0       	ldi	r27, 0x00	; 0
    48ae:	e5 e3       	ldi	r30, 0x35	; 53
    48b0:	f0 e0       	ldi	r31, 0x00	; 0
    48b2:	80 81       	ld	r24, Z
    48b4:	98 2f       	mov	r25, r24
    48b6:	90 7f       	andi	r25, 0xF0	; 240
    48b8:	8a 81       	ldd	r24, Y+2	; 0x02
    48ba:	8f 70       	andi	r24, 0x0F	; 15
    48bc:	89 2b       	or	r24, r25
    48be:	8c 93       	st	X, r24
    48c0:	a4 c0       	rjmp	.+328    	; 0x4a0a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTD_ID: ASSIGN_NippleL(PORTD,value); break;
    48c2:	a2 e3       	ldi	r26, 0x32	; 50
    48c4:	b0 e0       	ldi	r27, 0x00	; 0
    48c6:	e2 e3       	ldi	r30, 0x32	; 50
    48c8:	f0 e0       	ldi	r31, 0x00	; 0
    48ca:	80 81       	ld	r24, Z
    48cc:	98 2f       	mov	r25, r24
    48ce:	90 7f       	andi	r25, 0xF0	; 240
    48d0:	8a 81       	ldd	r24, Y+2	; 0x02
    48d2:	8f 70       	andi	r24, 0x0F	; 15
    48d4:	89 2b       	or	r24, r25
    48d6:	8c 93       	st	X, r24
    48d8:	98 c0       	rjmp	.+304    	; 0x4a0a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTE_ID: ASSIGN_NippleL(PORTE,value); break;
    48da:	a3 e2       	ldi	r26, 0x23	; 35
    48dc:	b0 e0       	ldi	r27, 0x00	; 0
    48de:	e3 e2       	ldi	r30, 0x23	; 35
    48e0:	f0 e0       	ldi	r31, 0x00	; 0
    48e2:	80 81       	ld	r24, Z
    48e4:	98 2f       	mov	r25, r24
    48e6:	90 7f       	andi	r25, 0xF0	; 240
    48e8:	8a 81       	ldd	r24, Y+2	; 0x02
    48ea:	8f 70       	andi	r24, 0x0F	; 15
    48ec:	89 2b       	or	r24, r25
    48ee:	8c 93       	st	X, r24
    48f0:	8c c0       	rjmp	.+280    	; 0x4a0a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTF_ID: ASSIGN_NippleL(PORTF,value); break;
    48f2:	a2 e6       	ldi	r26, 0x62	; 98
    48f4:	b0 e0       	ldi	r27, 0x00	; 0
    48f6:	e2 e6       	ldi	r30, 0x62	; 98
    48f8:	f0 e0       	ldi	r31, 0x00	; 0
    48fa:	80 81       	ld	r24, Z
    48fc:	98 2f       	mov	r25, r24
    48fe:	90 7f       	andi	r25, 0xF0	; 240
    4900:	8a 81       	ldd	r24, Y+2	; 0x02
    4902:	8f 70       	andi	r24, 0x0F	; 15
    4904:	89 2b       	or	r24, r25
    4906:	8c 93       	st	X, r24
    4908:	80 c0       	rjmp	.+256    	; 0x4a0a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTG_ID: ASSIGN_NippleL(PORTG,value); break;
    490a:	a5 e6       	ldi	r26, 0x65	; 101
    490c:	b0 e0       	ldi	r27, 0x00	; 0
    490e:	e5 e6       	ldi	r30, 0x65	; 101
    4910:	f0 e0       	ldi	r31, 0x00	; 0
    4912:	80 81       	ld	r24, Z
    4914:	98 2f       	mov	r25, r24
    4916:	90 7f       	andi	r25, 0xF0	; 240
    4918:	8a 81       	ldd	r24, Y+2	; 0x02
    491a:	8f 70       	andi	r24, 0x0F	; 15
    491c:	89 2b       	or	r24, r25
    491e:	8c 93       	st	X, r24
    4920:	74 c0       	rjmp	.+232    	; 0x4a0a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			}
	}
	else if(nipple==NIPPLEH)
    4922:	8b 81       	ldd	r24, Y+3	; 0x03
    4924:	81 30       	cpi	r24, 0x01	; 1
    4926:	09 f0       	breq	.+2      	; 0x492a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x134>
    4928:	70 c0       	rjmp	.+224    	; 0x4a0a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
	{
		switch(port_no)
    492a:	89 81       	ldd	r24, Y+1	; 0x01
    492c:	28 2f       	mov	r18, r24
    492e:	30 e0       	ldi	r19, 0x00	; 0
    4930:	3d 83       	std	Y+5, r19	; 0x05
    4932:	2c 83       	std	Y+4, r18	; 0x04
    4934:	8c 81       	ldd	r24, Y+4	; 0x04
    4936:	9d 81       	ldd	r25, Y+5	; 0x05
    4938:	82 30       	cpi	r24, 0x02	; 2
    493a:	91 05       	cpc	r25, r1
    493c:	b9 f1       	breq	.+110    	; 0x49ac <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x1b6>
    493e:	2c 81       	ldd	r18, Y+4	; 0x04
    4940:	3d 81       	ldd	r19, Y+5	; 0x05
    4942:	23 30       	cpi	r18, 0x03	; 3
    4944:	31 05       	cpc	r19, r1
    4946:	54 f4       	brge	.+20     	; 0x495c <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x166>
    4948:	8c 81       	ldd	r24, Y+4	; 0x04
    494a:	9d 81       	ldd	r25, Y+5	; 0x05
    494c:	00 97       	sbiw	r24, 0x00	; 0
    494e:	b1 f0       	breq	.+44     	; 0x497c <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x186>
    4950:	2c 81       	ldd	r18, Y+4	; 0x04
    4952:	3d 81       	ldd	r19, Y+5	; 0x05
    4954:	21 30       	cpi	r18, 0x01	; 1
    4956:	31 05       	cpc	r19, r1
    4958:	e9 f0       	breq	.+58     	; 0x4994 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x19e>
    495a:	57 c0       	rjmp	.+174    	; 0x4a0a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
    495c:	8c 81       	ldd	r24, Y+4	; 0x04
    495e:	9d 81       	ldd	r25, Y+5	; 0x05
    4960:	84 30       	cpi	r24, 0x04	; 4
    4962:	91 05       	cpc	r25, r1
    4964:	d9 f1       	breq	.+118    	; 0x49dc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x1e6>
    4966:	2c 81       	ldd	r18, Y+4	; 0x04
    4968:	3d 81       	ldd	r19, Y+5	; 0x05
    496a:	24 30       	cpi	r18, 0x04	; 4
    496c:	31 05       	cpc	r19, r1
    496e:	54 f1       	brlt	.+84     	; 0x49c4 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x1ce>
    4970:	8c 81       	ldd	r24, Y+4	; 0x04
    4972:	9d 81       	ldd	r25, Y+5	; 0x05
    4974:	85 30       	cpi	r24, 0x05	; 5
    4976:	91 05       	cpc	r25, r1
    4978:	e9 f1       	breq	.+122    	; 0x49f4 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x1fe>
    497a:	47 c0       	rjmp	.+142    	; 0x4a0a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					{
					case PORTA_ID: ASSIGN_NippleH(PORTA,value); break;
    497c:	ab e3       	ldi	r26, 0x3B	; 59
    497e:	b0 e0       	ldi	r27, 0x00	; 0
    4980:	eb e3       	ldi	r30, 0x3B	; 59
    4982:	f0 e0       	ldi	r31, 0x00	; 0
    4984:	80 81       	ld	r24, Z
    4986:	98 2f       	mov	r25, r24
    4988:	9f 70       	andi	r25, 0x0F	; 15
    498a:	8a 81       	ldd	r24, Y+2	; 0x02
    498c:	80 7f       	andi	r24, 0xF0	; 240
    498e:	89 2b       	or	r24, r25
    4990:	8c 93       	st	X, r24
    4992:	3b c0       	rjmp	.+118    	; 0x4a0a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					case PORTB_ID: ASSIGN_NippleH(PORTB,value);break;
    4994:	a8 e3       	ldi	r26, 0x38	; 56
    4996:	b0 e0       	ldi	r27, 0x00	; 0
    4998:	e8 e3       	ldi	r30, 0x38	; 56
    499a:	f0 e0       	ldi	r31, 0x00	; 0
    499c:	80 81       	ld	r24, Z
    499e:	98 2f       	mov	r25, r24
    49a0:	9f 70       	andi	r25, 0x0F	; 15
    49a2:	8a 81       	ldd	r24, Y+2	; 0x02
    49a4:	80 7f       	andi	r24, 0xF0	; 240
    49a6:	89 2b       	or	r24, r25
    49a8:	8c 93       	st	X, r24
    49aa:	2f c0       	rjmp	.+94     	; 0x4a0a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					case PORTC_ID: ASSIGN_NippleH(PORTC,value); break;
    49ac:	a5 e3       	ldi	r26, 0x35	; 53
    49ae:	b0 e0       	ldi	r27, 0x00	; 0
    49b0:	e5 e3       	ldi	r30, 0x35	; 53
    49b2:	f0 e0       	ldi	r31, 0x00	; 0
    49b4:	80 81       	ld	r24, Z
    49b6:	98 2f       	mov	r25, r24
    49b8:	9f 70       	andi	r25, 0x0F	; 15
    49ba:	8a 81       	ldd	r24, Y+2	; 0x02
    49bc:	80 7f       	andi	r24, 0xF0	; 240
    49be:	89 2b       	or	r24, r25
    49c0:	8c 93       	st	X, r24
    49c2:	23 c0       	rjmp	.+70     	; 0x4a0a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					case PORTD_ID: ASSIGN_NippleH(PORTD,value); break;
    49c4:	a2 e3       	ldi	r26, 0x32	; 50
    49c6:	b0 e0       	ldi	r27, 0x00	; 0
    49c8:	e2 e3       	ldi	r30, 0x32	; 50
    49ca:	f0 e0       	ldi	r31, 0x00	; 0
    49cc:	80 81       	ld	r24, Z
    49ce:	98 2f       	mov	r25, r24
    49d0:	9f 70       	andi	r25, 0x0F	; 15
    49d2:	8a 81       	ldd	r24, Y+2	; 0x02
    49d4:	80 7f       	andi	r24, 0xF0	; 240
    49d6:	89 2b       	or	r24, r25
    49d8:	8c 93       	st	X, r24
    49da:	17 c0       	rjmp	.+46     	; 0x4a0a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					case PORTE_ID: ASSIGN_NippleH(PORTE,value); break;
    49dc:	a3 e2       	ldi	r26, 0x23	; 35
    49de:	b0 e0       	ldi	r27, 0x00	; 0
    49e0:	e3 e2       	ldi	r30, 0x23	; 35
    49e2:	f0 e0       	ldi	r31, 0x00	; 0
    49e4:	80 81       	ld	r24, Z
    49e6:	98 2f       	mov	r25, r24
    49e8:	9f 70       	andi	r25, 0x0F	; 15
    49ea:	8a 81       	ldd	r24, Y+2	; 0x02
    49ec:	80 7f       	andi	r24, 0xF0	; 240
    49ee:	89 2b       	or	r24, r25
    49f0:	8c 93       	st	X, r24
    49f2:	0b c0       	rjmp	.+22     	; 0x4a0a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					case PORTF_ID: ASSIGN_NippleH(PORTF,value); break;
    49f4:	a2 e6       	ldi	r26, 0x62	; 98
    49f6:	b0 e0       	ldi	r27, 0x00	; 0
    49f8:	e2 e6       	ldi	r30, 0x62	; 98
    49fa:	f0 e0       	ldi	r31, 0x00	; 0
    49fc:	80 81       	ld	r24, Z
    49fe:	98 2f       	mov	r25, r24
    4a00:	9f 70       	andi	r25, 0x0F	; 15
    4a02:	8a 81       	ldd	r24, Y+2	; 0x02
    4a04:	80 7f       	andi	r24, 0xF0	; 240
    4a06:	89 2b       	or	r24, r25
    4a08:	8c 93       	st	X, r24
					case PORTG_ID:break;
					}
	}
}
    4a0a:	27 96       	adiw	r28, 0x07	; 7
    4a0c:	0f b6       	in	r0, 0x3f	; 63
    4a0e:	f8 94       	cli
    4a10:	de bf       	out	0x3e, r29	; 62
    4a12:	0f be       	out	0x3f, r0	; 63
    4a14:	cd bf       	out	0x3d, r28	; 61
    4a16:	cf 91       	pop	r28
    4a18:	df 91       	pop	r29
    4a1a:	08 95       	ret

00004a1c <DIO_uint8_Get_Port_Value>:
uint8 DIO_uint8_Get_Port_Value(port_no_type port_no)
{
    4a1c:	df 93       	push	r29
    4a1e:	cf 93       	push	r28
    4a20:	00 d0       	rcall	.+0      	; 0x4a22 <DIO_uint8_Get_Port_Value+0x6>
    4a22:	00 d0       	rcall	.+0      	; 0x4a24 <DIO_uint8_Get_Port_Value+0x8>
    4a24:	cd b7       	in	r28, 0x3d	; 61
    4a26:	de b7       	in	r29, 0x3e	; 62
    4a28:	8a 83       	std	Y+2, r24	; 0x02
	uint8 return_value=0;
    4a2a:	19 82       	std	Y+1, r1	; 0x01
	switch(port_no)
    4a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a2e:	28 2f       	mov	r18, r24
    4a30:	30 e0       	ldi	r19, 0x00	; 0
    4a32:	3c 83       	std	Y+4, r19	; 0x04
    4a34:	2b 83       	std	Y+3, r18	; 0x03
    4a36:	8b 81       	ldd	r24, Y+3	; 0x03
    4a38:	9c 81       	ldd	r25, Y+4	; 0x04
    4a3a:	83 30       	cpi	r24, 0x03	; 3
    4a3c:	91 05       	cpc	r25, r1
    4a3e:	99 f1       	breq	.+102    	; 0x4aa6 <DIO_uint8_Get_Port_Value+0x8a>
    4a40:	2b 81       	ldd	r18, Y+3	; 0x03
    4a42:	3c 81       	ldd	r19, Y+4	; 0x04
    4a44:	24 30       	cpi	r18, 0x04	; 4
    4a46:	31 05       	cpc	r19, r1
    4a48:	7c f4       	brge	.+30     	; 0x4a68 <DIO_uint8_Get_Port_Value+0x4c>
    4a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    4a4e:	81 30       	cpi	r24, 0x01	; 1
    4a50:	91 05       	cpc	r25, r1
    4a52:	f9 f0       	breq	.+62     	; 0x4a92 <DIO_uint8_Get_Port_Value+0x76>
    4a54:	2b 81       	ldd	r18, Y+3	; 0x03
    4a56:	3c 81       	ldd	r19, Y+4	; 0x04
    4a58:	22 30       	cpi	r18, 0x02	; 2
    4a5a:	31 05       	cpc	r19, r1
    4a5c:	fc f4       	brge	.+62     	; 0x4a9c <DIO_uint8_Get_Port_Value+0x80>
    4a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a60:	9c 81       	ldd	r25, Y+4	; 0x04
    4a62:	00 97       	sbiw	r24, 0x00	; 0
    4a64:	89 f0       	breq	.+34     	; 0x4a88 <DIO_uint8_Get_Port_Value+0x6c>
    4a66:	32 c0       	rjmp	.+100    	; 0x4acc <DIO_uint8_Get_Port_Value+0xb0>
    4a68:	2b 81       	ldd	r18, Y+3	; 0x03
    4a6a:	3c 81       	ldd	r19, Y+4	; 0x04
    4a6c:	25 30       	cpi	r18, 0x05	; 5
    4a6e:	31 05       	cpc	r19, r1
    4a70:	21 f1       	breq	.+72     	; 0x4aba <DIO_uint8_Get_Port_Value+0x9e>
    4a72:	8b 81       	ldd	r24, Y+3	; 0x03
    4a74:	9c 81       	ldd	r25, Y+4	; 0x04
    4a76:	85 30       	cpi	r24, 0x05	; 5
    4a78:	91 05       	cpc	r25, r1
    4a7a:	d4 f0       	brlt	.+52     	; 0x4ab0 <DIO_uint8_Get_Port_Value+0x94>
    4a7c:	2b 81       	ldd	r18, Y+3	; 0x03
    4a7e:	3c 81       	ldd	r19, Y+4	; 0x04
    4a80:	26 30       	cpi	r18, 0x06	; 6
    4a82:	31 05       	cpc	r19, r1
    4a84:	f9 f0       	breq	.+62     	; 0x4ac4 <DIO_uint8_Get_Port_Value+0xa8>
    4a86:	22 c0       	rjmp	.+68     	; 0x4acc <DIO_uint8_Get_Port_Value+0xb0>
	{
	case PORTA_ID:return_value =PINA;break;
    4a88:	e9 e3       	ldi	r30, 0x39	; 57
    4a8a:	f0 e0       	ldi	r31, 0x00	; 0
    4a8c:	80 81       	ld	r24, Z
    4a8e:	89 83       	std	Y+1, r24	; 0x01
    4a90:	1d c0       	rjmp	.+58     	; 0x4acc <DIO_uint8_Get_Port_Value+0xb0>
	case PORTB_ID:return_value =PINB;break;
    4a92:	e6 e3       	ldi	r30, 0x36	; 54
    4a94:	f0 e0       	ldi	r31, 0x00	; 0
    4a96:	80 81       	ld	r24, Z
    4a98:	89 83       	std	Y+1, r24	; 0x01
    4a9a:	18 c0       	rjmp	.+48     	; 0x4acc <DIO_uint8_Get_Port_Value+0xb0>
	case PORTC_ID:return_value =PINC;break;
    4a9c:	e3 e3       	ldi	r30, 0x33	; 51
    4a9e:	f0 e0       	ldi	r31, 0x00	; 0
    4aa0:	80 81       	ld	r24, Z
    4aa2:	89 83       	std	Y+1, r24	; 0x01
    4aa4:	13 c0       	rjmp	.+38     	; 0x4acc <DIO_uint8_Get_Port_Value+0xb0>
	case PORTD_ID:return_value =PIND;break;
    4aa6:	e0 e3       	ldi	r30, 0x30	; 48
    4aa8:	f0 e0       	ldi	r31, 0x00	; 0
    4aaa:	80 81       	ld	r24, Z
    4aac:	89 83       	std	Y+1, r24	; 0x01
    4aae:	0e c0       	rjmp	.+28     	; 0x4acc <DIO_uint8_Get_Port_Value+0xb0>
	case PORTE_ID:return_value =PINE;break;
    4ab0:	e1 e2       	ldi	r30, 0x21	; 33
    4ab2:	f0 e0       	ldi	r31, 0x00	; 0
    4ab4:	80 81       	ld	r24, Z
    4ab6:	89 83       	std	Y+1, r24	; 0x01
    4ab8:	09 c0       	rjmp	.+18     	; 0x4acc <DIO_uint8_Get_Port_Value+0xb0>
	case PORTF_ID:return_value =PINF;break;
    4aba:	e0 e2       	ldi	r30, 0x20	; 32
    4abc:	f0 e0       	ldi	r31, 0x00	; 0
    4abe:	80 81       	ld	r24, Z
    4ac0:	89 83       	std	Y+1, r24	; 0x01
    4ac2:	04 c0       	rjmp	.+8      	; 0x4acc <DIO_uint8_Get_Port_Value+0xb0>
	case PORTG_ID:return_value =PING;break;
    4ac4:	e3 e6       	ldi	r30, 0x63	; 99
    4ac6:	f0 e0       	ldi	r31, 0x00	; 0
    4ac8:	80 81       	ld	r24, Z
    4aca:	89 83       	std	Y+1, r24	; 0x01
	}

	return return_value;
    4acc:	89 81       	ldd	r24, Y+1	; 0x01
}
    4ace:	0f 90       	pop	r0
    4ad0:	0f 90       	pop	r0
    4ad2:	0f 90       	pop	r0
    4ad4:	0f 90       	pop	r0
    4ad6:	cf 91       	pop	r28
    4ad8:	df 91       	pop	r29
    4ada:	08 95       	ret

00004adc <Ultrasonic_init>:
#include"ULTRASONIC.h"
volatile uint8 f=0,c=0;
volatile uint16 t1=0,t2=0;

void Ultrasonic_init(void)
{
    4adc:	df 93       	push	r29
    4ade:	cf 93       	push	r28
    4ae0:	cd b7       	in	r28, 0x3d	; 61
    4ae2:	de b7       	in	r29, 0x3e	; 62
	DIO_void_Set_Pin_Dirction(trig_port,trig0,OUTPUT);
    4ae4:	80 e0       	ldi	r24, 0x00	; 0
    4ae6:	60 e0       	ldi	r22, 0x00	; 0
    4ae8:	41 e0       	ldi	r20, 0x01	; 1
    4aea:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>
	DIO_void_Set_Pin_Dirction(trig_port,trig1,OUTPUT);
    4aee:	80 e0       	ldi	r24, 0x00	; 0
    4af0:	61 e0       	ldi	r22, 0x01	; 1
    4af2:	41 e0       	ldi	r20, 0x01	; 1
    4af4:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>
	DIO_void_Set_Pin_Dirction(trig_port,trig2,OUTPUT);
    4af8:	80 e0       	ldi	r24, 0x00	; 0
    4afa:	62 e0       	ldi	r22, 0x02	; 2
    4afc:	41 e0       	ldi	r20, 0x01	; 1
    4afe:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>
	DIO_void_Set_Pin_Dirction(trig_port,trig3,OUTPUT);
    4b02:	80 e0       	ldi	r24, 0x00	; 0
    4b04:	63 e0       	ldi	r22, 0x03	; 3
    4b06:	41 e0       	ldi	r20, 0x01	; 1
    4b08:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>
	//TRY TO PUT ICU PIN INPUT
	Timer1_Init(timer1_Normal_mode,timer_scale_8,disconnected_1,disconnected_channel);
    4b0c:	80 e0       	ldi	r24, 0x00	; 0
    4b0e:	62 e0       	ldi	r22, 0x02	; 2
    4b10:	40 e0       	ldi	r20, 0x00	; 0
    4b12:	20 e0       	ldi	r18, 0x00	; 0
    4b14:	0e 94 58 19 	call	0x32b0	; 0x32b0 <Timer1_Init>
	Timer1_OV_InterruptEnable();
    4b18:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <Timer1_OV_InterruptEnable>
}
    4b1c:	cf 91       	pop	r28
    4b1e:	df 91       	pop	r29
    4b20:	08 95       	ret

00004b22 <Ultrasonic_front_Get_Distance>:
uint32 Ultrasonic_front_Get_Distance(void)
{
    4b22:	df 93       	push	r29
    4b24:	cf 93       	push	r28
    4b26:	cd b7       	in	r28, 0x3d	; 61
    4b28:	de b7       	in	r29, 0x3e	; 62
    4b2a:	a0 97       	sbiw	r28, 0x20	; 32
    4b2c:	0f b6       	in	r0, 0x3f	; 63
    4b2e:	f8 94       	cli
    4b30:	de bf       	out	0x3e, r29	; 62
    4b32:	0f be       	out	0x3f, r0	; 63
    4b34:	cd bf       	out	0x3d, r28	; 61
	uint32 time=0,distance=0;
    4b36:	1d 8e       	std	Y+29, r1	; 0x1d
    4b38:	1e 8e       	std	Y+30, r1	; 0x1e
    4b3a:	1f 8e       	std	Y+31, r1	; 0x1f
    4b3c:	18 a2       	std	Y+32, r1	; 0x20
    4b3e:	19 8e       	std	Y+25, r1	; 0x19
    4b40:	1a 8e       	std	Y+26, r1	; 0x1a
    4b42:	1b 8e       	std	Y+27, r1	; 0x1b
    4b44:	1c 8e       	std	Y+28, r1	; 0x1c
		c = 0;
    4b46:	10 92 d7 02 	sts	0x02D7, r1
		TCNT1 = 0;
    4b4a:	ec e4       	ldi	r30, 0x4C	; 76
    4b4c:	f0 e0       	ldi	r31, 0x00	; 0
    4b4e:	11 82       	std	Z+1, r1	; 0x01
    4b50:	10 82       	st	Z, r1
		f = 0;
    4b52:	10 92 d6 02 	sts	0x02D6, r1

		DIO_void_Set_Pin_Value(PORTA_ID,trig0,HIGH);
    4b56:	80 e0       	ldi	r24, 0x00	; 0
    4b58:	60 e0       	ldi	r22, 0x00	; 0
    4b5a:	41 e0       	ldi	r20, 0x01	; 1
    4b5c:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    4b60:	80 e0       	ldi	r24, 0x00	; 0
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	a0 e2       	ldi	r26, 0x20	; 32
    4b66:	b1 e4       	ldi	r27, 0x41	; 65
    4b68:	8d 8b       	std	Y+21, r24	; 0x15
    4b6a:	9e 8b       	std	Y+22, r25	; 0x16
    4b6c:	af 8b       	std	Y+23, r26	; 0x17
    4b6e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4b70:	6d 89       	ldd	r22, Y+21	; 0x15
    4b72:	7e 89       	ldd	r23, Y+22	; 0x16
    4b74:	8f 89       	ldd	r24, Y+23	; 0x17
    4b76:	98 8d       	ldd	r25, Y+24	; 0x18
    4b78:	2b ea       	ldi	r18, 0xAB	; 171
    4b7a:	3a ea       	ldi	r19, 0xAA	; 170
    4b7c:	4a e2       	ldi	r20, 0x2A	; 42
    4b7e:	50 e4       	ldi	r21, 0x40	; 64
    4b80:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    4b84:	dc 01       	movw	r26, r24
    4b86:	cb 01       	movw	r24, r22
    4b88:	89 8b       	std	Y+17, r24	; 0x11
    4b8a:	9a 8b       	std	Y+18, r25	; 0x12
    4b8c:	ab 8b       	std	Y+19, r26	; 0x13
    4b8e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4b90:	69 89       	ldd	r22, Y+17	; 0x11
    4b92:	7a 89       	ldd	r23, Y+18	; 0x12
    4b94:	8b 89       	ldd	r24, Y+19	; 0x13
    4b96:	9c 89       	ldd	r25, Y+20	; 0x14
    4b98:	20 e0       	ldi	r18, 0x00	; 0
    4b9a:	30 e0       	ldi	r19, 0x00	; 0
    4b9c:	40 e8       	ldi	r20, 0x80	; 128
    4b9e:	5f e3       	ldi	r21, 0x3F	; 63
    4ba0:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    4ba4:	88 23       	and	r24, r24
    4ba6:	1c f4       	brge	.+6      	; 0x4bae <Ultrasonic_front_Get_Distance+0x8c>
		__ticks = 1;
    4ba8:	81 e0       	ldi	r24, 0x01	; 1
    4baa:	88 8b       	std	Y+16, r24	; 0x10
    4bac:	91 c0       	rjmp	.+290    	; 0x4cd0 <Ultrasonic_front_Get_Distance+0x1ae>
	else if (__tmp > 255)
    4bae:	69 89       	ldd	r22, Y+17	; 0x11
    4bb0:	7a 89       	ldd	r23, Y+18	; 0x12
    4bb2:	8b 89       	ldd	r24, Y+19	; 0x13
    4bb4:	9c 89       	ldd	r25, Y+20	; 0x14
    4bb6:	20 e0       	ldi	r18, 0x00	; 0
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	4f e7       	ldi	r20, 0x7F	; 127
    4bbc:	53 e4       	ldi	r21, 0x43	; 67
    4bbe:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    4bc2:	18 16       	cp	r1, r24
    4bc4:	0c f0       	brlt	.+2      	; 0x4bc8 <Ultrasonic_front_Get_Distance+0xa6>
    4bc6:	7b c0       	rjmp	.+246    	; 0x4cbe <Ultrasonic_front_Get_Distance+0x19c>
	{
		_delay_ms(__us / 1000.0);
    4bc8:	6d 89       	ldd	r22, Y+21	; 0x15
    4bca:	7e 89       	ldd	r23, Y+22	; 0x16
    4bcc:	8f 89       	ldd	r24, Y+23	; 0x17
    4bce:	98 8d       	ldd	r25, Y+24	; 0x18
    4bd0:	20 e0       	ldi	r18, 0x00	; 0
    4bd2:	30 e0       	ldi	r19, 0x00	; 0
    4bd4:	4a e7       	ldi	r20, 0x7A	; 122
    4bd6:	54 e4       	ldi	r21, 0x44	; 68
    4bd8:	0e 94 1c 10 	call	0x2038	; 0x2038 <__divsf3>
    4bdc:	dc 01       	movw	r26, r24
    4bde:	cb 01       	movw	r24, r22
    4be0:	8c 87       	std	Y+12, r24	; 0x0c
    4be2:	9d 87       	std	Y+13, r25	; 0x0d
    4be4:	ae 87       	std	Y+14, r26	; 0x0e
    4be6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4be8:	6c 85       	ldd	r22, Y+12	; 0x0c
    4bea:	7d 85       	ldd	r23, Y+13	; 0x0d
    4bec:	8e 85       	ldd	r24, Y+14	; 0x0e
    4bee:	9f 85       	ldd	r25, Y+15	; 0x0f
    4bf0:	20 e0       	ldi	r18, 0x00	; 0
    4bf2:	30 e0       	ldi	r19, 0x00	; 0
    4bf4:	4a ef       	ldi	r20, 0xFA	; 250
    4bf6:	54 e4       	ldi	r21, 0x44	; 68
    4bf8:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    4bfc:	dc 01       	movw	r26, r24
    4bfe:	cb 01       	movw	r24, r22
    4c00:	88 87       	std	Y+8, r24	; 0x08
    4c02:	99 87       	std	Y+9, r25	; 0x09
    4c04:	aa 87       	std	Y+10, r26	; 0x0a
    4c06:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4c08:	68 85       	ldd	r22, Y+8	; 0x08
    4c0a:	79 85       	ldd	r23, Y+9	; 0x09
    4c0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c10:	20 e0       	ldi	r18, 0x00	; 0
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	40 e8       	ldi	r20, 0x80	; 128
    4c16:	5f e3       	ldi	r21, 0x3F	; 63
    4c18:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    4c1c:	88 23       	and	r24, r24
    4c1e:	2c f4       	brge	.+10     	; 0x4c2a <Ultrasonic_front_Get_Distance+0x108>
		__ticks = 1;
    4c20:	81 e0       	ldi	r24, 0x01	; 1
    4c22:	90 e0       	ldi	r25, 0x00	; 0
    4c24:	9f 83       	std	Y+7, r25	; 0x07
    4c26:	8e 83       	std	Y+6, r24	; 0x06
    4c28:	3f c0       	rjmp	.+126    	; 0x4ca8 <Ultrasonic_front_Get_Distance+0x186>
	else if (__tmp > 65535)
    4c2a:	68 85       	ldd	r22, Y+8	; 0x08
    4c2c:	79 85       	ldd	r23, Y+9	; 0x09
    4c2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c30:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c32:	20 e0       	ldi	r18, 0x00	; 0
    4c34:	3f ef       	ldi	r19, 0xFF	; 255
    4c36:	4f e7       	ldi	r20, 0x7F	; 127
    4c38:	57 e4       	ldi	r21, 0x47	; 71
    4c3a:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    4c3e:	18 16       	cp	r1, r24
    4c40:	4c f5       	brge	.+82     	; 0x4c94 <Ultrasonic_front_Get_Distance+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c42:	6c 85       	ldd	r22, Y+12	; 0x0c
    4c44:	7d 85       	ldd	r23, Y+13	; 0x0d
    4c46:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c48:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c4a:	20 e0       	ldi	r18, 0x00	; 0
    4c4c:	30 e0       	ldi	r19, 0x00	; 0
    4c4e:	40 e2       	ldi	r20, 0x20	; 32
    4c50:	51 e4       	ldi	r21, 0x41	; 65
    4c52:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    4c56:	dc 01       	movw	r26, r24
    4c58:	cb 01       	movw	r24, r22
    4c5a:	bc 01       	movw	r22, r24
    4c5c:	cd 01       	movw	r24, r26
    4c5e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    4c62:	dc 01       	movw	r26, r24
    4c64:	cb 01       	movw	r24, r22
    4c66:	9f 83       	std	Y+7, r25	; 0x07
    4c68:	8e 83       	std	Y+6, r24	; 0x06
    4c6a:	0f c0       	rjmp	.+30     	; 0x4c8a <Ultrasonic_front_Get_Distance+0x168>
    4c6c:	88 ec       	ldi	r24, 0xC8	; 200
    4c6e:	90 e0       	ldi	r25, 0x00	; 0
    4c70:	9d 83       	std	Y+5, r25	; 0x05
    4c72:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4c74:	8c 81       	ldd	r24, Y+4	; 0x04
    4c76:	9d 81       	ldd	r25, Y+5	; 0x05
    4c78:	01 97       	sbiw	r24, 0x01	; 1
    4c7a:	f1 f7       	brne	.-4      	; 0x4c78 <Ultrasonic_front_Get_Distance+0x156>
    4c7c:	9d 83       	std	Y+5, r25	; 0x05
    4c7e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c80:	8e 81       	ldd	r24, Y+6	; 0x06
    4c82:	9f 81       	ldd	r25, Y+7	; 0x07
    4c84:	01 97       	sbiw	r24, 0x01	; 1
    4c86:	9f 83       	std	Y+7, r25	; 0x07
    4c88:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c8a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c8c:	9f 81       	ldd	r25, Y+7	; 0x07
    4c8e:	00 97       	sbiw	r24, 0x00	; 0
    4c90:	69 f7       	brne	.-38     	; 0x4c6c <Ultrasonic_front_Get_Distance+0x14a>
    4c92:	24 c0       	rjmp	.+72     	; 0x4cdc <Ultrasonic_front_Get_Distance+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c94:	68 85       	ldd	r22, Y+8	; 0x08
    4c96:	79 85       	ldd	r23, Y+9	; 0x09
    4c98:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c9c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    4ca0:	dc 01       	movw	r26, r24
    4ca2:	cb 01       	movw	r24, r22
    4ca4:	9f 83       	std	Y+7, r25	; 0x07
    4ca6:	8e 83       	std	Y+6, r24	; 0x06
    4ca8:	8e 81       	ldd	r24, Y+6	; 0x06
    4caa:	9f 81       	ldd	r25, Y+7	; 0x07
    4cac:	9b 83       	std	Y+3, r25	; 0x03
    4cae:	8a 83       	std	Y+2, r24	; 0x02
    4cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    4cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    4cb4:	01 97       	sbiw	r24, 0x01	; 1
    4cb6:	f1 f7       	brne	.-4      	; 0x4cb4 <Ultrasonic_front_Get_Distance+0x192>
    4cb8:	9b 83       	std	Y+3, r25	; 0x03
    4cba:	8a 83       	std	Y+2, r24	; 0x02
    4cbc:	0f c0       	rjmp	.+30     	; 0x4cdc <Ultrasonic_front_Get_Distance+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4cbe:	69 89       	ldd	r22, Y+17	; 0x11
    4cc0:	7a 89       	ldd	r23, Y+18	; 0x12
    4cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    4cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    4cc6:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    4cca:	dc 01       	movw	r26, r24
    4ccc:	cb 01       	movw	r24, r22
    4cce:	88 8b       	std	Y+16, r24	; 0x10
    4cd0:	88 89       	ldd	r24, Y+16	; 0x10
    4cd2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4cd4:	89 81       	ldd	r24, Y+1	; 0x01
    4cd6:	8a 95       	dec	r24
    4cd8:	f1 f7       	brne	.-4      	; 0x4cd6 <Ultrasonic_front_Get_Distance+0x1b4>
    4cda:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(10);
		DIO_void_Set_Pin_Value(PORTA_ID,trig0,LOW);
    4cdc:	80 e0       	ldi	r24, 0x00	; 0
    4cde:	60 e0       	ldi	r22, 0x00	; 0
    4ce0:	40 e0       	ldi	r20, 0x00	; 0
    4ce2:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>

		 Timer1_InputCaptureEdge(Rising);
    4ce6:	81 e0       	ldi	r24, 0x01	; 1
    4ce8:	0e 94 b7 1c 	call	0x396e	; 0x396e <Timer1_InputCaptureEdge>
         Timer1_ICU_InterruptEnable();
    4cec:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <Timer1_ICU_InterruptEnable>
		 while(f<2);
    4cf0:	80 91 d6 02 	lds	r24, 0x02D6
    4cf4:	82 30       	cpi	r24, 0x02	; 2
    4cf6:	e0 f3       	brcs	.-8      	; 0x4cf0 <Ultrasonic_front_Get_Distance+0x1ce>
		 time = (t2-t1);
    4cf8:	20 91 da 02 	lds	r18, 0x02DA
    4cfc:	30 91 db 02 	lds	r19, 0x02DB
    4d00:	80 91 d8 02 	lds	r24, 0x02D8
    4d04:	90 91 d9 02 	lds	r25, 0x02D9
    4d08:	a9 01       	movw	r20, r18
    4d0a:	48 1b       	sub	r20, r24
    4d0c:	59 0b       	sbc	r21, r25
    4d0e:	ca 01       	movw	r24, r20
    4d10:	cc 01       	movw	r24, r24
    4d12:	a0 e0       	ldi	r26, 0x00	; 0
    4d14:	b0 e0       	ldi	r27, 0x00	; 0
    4d16:	8d 8f       	std	Y+29, r24	; 0x1d
    4d18:	9e 8f       	std	Y+30, r25	; 0x1e
    4d1a:	af 8f       	std	Y+31, r26	; 0x1f
    4d1c:	b8 a3       	std	Y+32, r27	; 0x20
		 distance = time /58;
    4d1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4d22:	af 8d       	ldd	r26, Y+31	; 0x1f
    4d24:	b8 a1       	ldd	r27, Y+32	; 0x20
    4d26:	2a e3       	ldi	r18, 0x3A	; 58
    4d28:	30 e0       	ldi	r19, 0x00	; 0
    4d2a:	40 e0       	ldi	r20, 0x00	; 0
    4d2c:	50 e0       	ldi	r21, 0x00	; 0
    4d2e:	bc 01       	movw	r22, r24
    4d30:	cd 01       	movw	r24, r26
    4d32:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    4d36:	da 01       	movw	r26, r20
    4d38:	c9 01       	movw	r24, r18
    4d3a:	89 8f       	std	Y+25, r24	; 0x19
    4d3c:	9a 8f       	std	Y+26, r25	; 0x1a
    4d3e:	ab 8f       	std	Y+27, r26	; 0x1b
    4d40:	bc 8f       	std	Y+28, r27	; 0x1c
		 Timer1_ICU_InterruptDisable();
    4d42:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <Timer1_ICU_InterruptDisable>


		 return distance;
    4d46:	89 8d       	ldd	r24, Y+25	; 0x19
    4d48:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4d4a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4d4c:	bc 8d       	ldd	r27, Y+28	; 0x1c
}
    4d4e:	bc 01       	movw	r22, r24
    4d50:	cd 01       	movw	r24, r26
    4d52:	a0 96       	adiw	r28, 0x20	; 32
    4d54:	0f b6       	in	r0, 0x3f	; 63
    4d56:	f8 94       	cli
    4d58:	de bf       	out	0x3e, r29	; 62
    4d5a:	0f be       	out	0x3f, r0	; 63
    4d5c:	cd bf       	out	0x3d, r28	; 61
    4d5e:	cf 91       	pop	r28
    4d60:	df 91       	pop	r29
    4d62:	08 95       	ret

00004d64 <Ultrasonic_right_front_Get_Distance>:

uint32 Ultrasonic_right_front_Get_Distance(void)
{
    4d64:	df 93       	push	r29
    4d66:	cf 93       	push	r28
    4d68:	cd b7       	in	r28, 0x3d	; 61
    4d6a:	de b7       	in	r29, 0x3e	; 62
    4d6c:	a0 97       	sbiw	r28, 0x20	; 32
    4d6e:	0f b6       	in	r0, 0x3f	; 63
    4d70:	f8 94       	cli
    4d72:	de bf       	out	0x3e, r29	; 62
    4d74:	0f be       	out	0x3f, r0	; 63
    4d76:	cd bf       	out	0x3d, r28	; 61
	uint32 time=0,distance=0;
    4d78:	1d 8e       	std	Y+29, r1	; 0x1d
    4d7a:	1e 8e       	std	Y+30, r1	; 0x1e
    4d7c:	1f 8e       	std	Y+31, r1	; 0x1f
    4d7e:	18 a2       	std	Y+32, r1	; 0x20
    4d80:	19 8e       	std	Y+25, r1	; 0x19
    4d82:	1a 8e       	std	Y+26, r1	; 0x1a
    4d84:	1b 8e       	std	Y+27, r1	; 0x1b
    4d86:	1c 8e       	std	Y+28, r1	; 0x1c
			c = 0;
    4d88:	10 92 d7 02 	sts	0x02D7, r1
			TCNT1 = 0;
    4d8c:	ec e4       	ldi	r30, 0x4C	; 76
    4d8e:	f0 e0       	ldi	r31, 0x00	; 0
    4d90:	11 82       	std	Z+1, r1	; 0x01
    4d92:	10 82       	st	Z, r1
			f = 0;
    4d94:	10 92 d6 02 	sts	0x02D6, r1

			DIO_void_Set_Pin_Value(PORTA_ID,trig1,HIGH);
    4d98:	80 e0       	ldi	r24, 0x00	; 0
    4d9a:	61 e0       	ldi	r22, 0x01	; 1
    4d9c:	41 e0       	ldi	r20, 0x01	; 1
    4d9e:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    4da2:	80 e0       	ldi	r24, 0x00	; 0
    4da4:	90 e0       	ldi	r25, 0x00	; 0
    4da6:	a0 e2       	ldi	r26, 0x20	; 32
    4da8:	b1 e4       	ldi	r27, 0x41	; 65
    4daa:	8d 8b       	std	Y+21, r24	; 0x15
    4dac:	9e 8b       	std	Y+22, r25	; 0x16
    4dae:	af 8b       	std	Y+23, r26	; 0x17
    4db0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4db2:	6d 89       	ldd	r22, Y+21	; 0x15
    4db4:	7e 89       	ldd	r23, Y+22	; 0x16
    4db6:	8f 89       	ldd	r24, Y+23	; 0x17
    4db8:	98 8d       	ldd	r25, Y+24	; 0x18
    4dba:	2b ea       	ldi	r18, 0xAB	; 171
    4dbc:	3a ea       	ldi	r19, 0xAA	; 170
    4dbe:	4a e2       	ldi	r20, 0x2A	; 42
    4dc0:	50 e4       	ldi	r21, 0x40	; 64
    4dc2:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    4dc6:	dc 01       	movw	r26, r24
    4dc8:	cb 01       	movw	r24, r22
    4dca:	89 8b       	std	Y+17, r24	; 0x11
    4dcc:	9a 8b       	std	Y+18, r25	; 0x12
    4dce:	ab 8b       	std	Y+19, r26	; 0x13
    4dd0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4dd2:	69 89       	ldd	r22, Y+17	; 0x11
    4dd4:	7a 89       	ldd	r23, Y+18	; 0x12
    4dd6:	8b 89       	ldd	r24, Y+19	; 0x13
    4dd8:	9c 89       	ldd	r25, Y+20	; 0x14
    4dda:	20 e0       	ldi	r18, 0x00	; 0
    4ddc:	30 e0       	ldi	r19, 0x00	; 0
    4dde:	40 e8       	ldi	r20, 0x80	; 128
    4de0:	5f e3       	ldi	r21, 0x3F	; 63
    4de2:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    4de6:	88 23       	and	r24, r24
    4de8:	1c f4       	brge	.+6      	; 0x4df0 <Ultrasonic_right_front_Get_Distance+0x8c>
		__ticks = 1;
    4dea:	81 e0       	ldi	r24, 0x01	; 1
    4dec:	88 8b       	std	Y+16, r24	; 0x10
    4dee:	91 c0       	rjmp	.+290    	; 0x4f12 <Ultrasonic_right_front_Get_Distance+0x1ae>
	else if (__tmp > 255)
    4df0:	69 89       	ldd	r22, Y+17	; 0x11
    4df2:	7a 89       	ldd	r23, Y+18	; 0x12
    4df4:	8b 89       	ldd	r24, Y+19	; 0x13
    4df6:	9c 89       	ldd	r25, Y+20	; 0x14
    4df8:	20 e0       	ldi	r18, 0x00	; 0
    4dfa:	30 e0       	ldi	r19, 0x00	; 0
    4dfc:	4f e7       	ldi	r20, 0x7F	; 127
    4dfe:	53 e4       	ldi	r21, 0x43	; 67
    4e00:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    4e04:	18 16       	cp	r1, r24
    4e06:	0c f0       	brlt	.+2      	; 0x4e0a <Ultrasonic_right_front_Get_Distance+0xa6>
    4e08:	7b c0       	rjmp	.+246    	; 0x4f00 <Ultrasonic_right_front_Get_Distance+0x19c>
	{
		_delay_ms(__us / 1000.0);
    4e0a:	6d 89       	ldd	r22, Y+21	; 0x15
    4e0c:	7e 89       	ldd	r23, Y+22	; 0x16
    4e0e:	8f 89       	ldd	r24, Y+23	; 0x17
    4e10:	98 8d       	ldd	r25, Y+24	; 0x18
    4e12:	20 e0       	ldi	r18, 0x00	; 0
    4e14:	30 e0       	ldi	r19, 0x00	; 0
    4e16:	4a e7       	ldi	r20, 0x7A	; 122
    4e18:	54 e4       	ldi	r21, 0x44	; 68
    4e1a:	0e 94 1c 10 	call	0x2038	; 0x2038 <__divsf3>
    4e1e:	dc 01       	movw	r26, r24
    4e20:	cb 01       	movw	r24, r22
    4e22:	8c 87       	std	Y+12, r24	; 0x0c
    4e24:	9d 87       	std	Y+13, r25	; 0x0d
    4e26:	ae 87       	std	Y+14, r26	; 0x0e
    4e28:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e2a:	6c 85       	ldd	r22, Y+12	; 0x0c
    4e2c:	7d 85       	ldd	r23, Y+13	; 0x0d
    4e2e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e30:	9f 85       	ldd	r25, Y+15	; 0x0f
    4e32:	20 e0       	ldi	r18, 0x00	; 0
    4e34:	30 e0       	ldi	r19, 0x00	; 0
    4e36:	4a ef       	ldi	r20, 0xFA	; 250
    4e38:	54 e4       	ldi	r21, 0x44	; 68
    4e3a:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    4e3e:	dc 01       	movw	r26, r24
    4e40:	cb 01       	movw	r24, r22
    4e42:	88 87       	std	Y+8, r24	; 0x08
    4e44:	99 87       	std	Y+9, r25	; 0x09
    4e46:	aa 87       	std	Y+10, r26	; 0x0a
    4e48:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4e4a:	68 85       	ldd	r22, Y+8	; 0x08
    4e4c:	79 85       	ldd	r23, Y+9	; 0x09
    4e4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e50:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e52:	20 e0       	ldi	r18, 0x00	; 0
    4e54:	30 e0       	ldi	r19, 0x00	; 0
    4e56:	40 e8       	ldi	r20, 0x80	; 128
    4e58:	5f e3       	ldi	r21, 0x3F	; 63
    4e5a:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    4e5e:	88 23       	and	r24, r24
    4e60:	2c f4       	brge	.+10     	; 0x4e6c <Ultrasonic_right_front_Get_Distance+0x108>
		__ticks = 1;
    4e62:	81 e0       	ldi	r24, 0x01	; 1
    4e64:	90 e0       	ldi	r25, 0x00	; 0
    4e66:	9f 83       	std	Y+7, r25	; 0x07
    4e68:	8e 83       	std	Y+6, r24	; 0x06
    4e6a:	3f c0       	rjmp	.+126    	; 0x4eea <Ultrasonic_right_front_Get_Distance+0x186>
	else if (__tmp > 65535)
    4e6c:	68 85       	ldd	r22, Y+8	; 0x08
    4e6e:	79 85       	ldd	r23, Y+9	; 0x09
    4e70:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e72:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e74:	20 e0       	ldi	r18, 0x00	; 0
    4e76:	3f ef       	ldi	r19, 0xFF	; 255
    4e78:	4f e7       	ldi	r20, 0x7F	; 127
    4e7a:	57 e4       	ldi	r21, 0x47	; 71
    4e7c:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    4e80:	18 16       	cp	r1, r24
    4e82:	4c f5       	brge	.+82     	; 0x4ed6 <Ultrasonic_right_front_Get_Distance+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e84:	6c 85       	ldd	r22, Y+12	; 0x0c
    4e86:	7d 85       	ldd	r23, Y+13	; 0x0d
    4e88:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    4e8c:	20 e0       	ldi	r18, 0x00	; 0
    4e8e:	30 e0       	ldi	r19, 0x00	; 0
    4e90:	40 e2       	ldi	r20, 0x20	; 32
    4e92:	51 e4       	ldi	r21, 0x41	; 65
    4e94:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    4e98:	dc 01       	movw	r26, r24
    4e9a:	cb 01       	movw	r24, r22
    4e9c:	bc 01       	movw	r22, r24
    4e9e:	cd 01       	movw	r24, r26
    4ea0:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    4ea4:	dc 01       	movw	r26, r24
    4ea6:	cb 01       	movw	r24, r22
    4ea8:	9f 83       	std	Y+7, r25	; 0x07
    4eaa:	8e 83       	std	Y+6, r24	; 0x06
    4eac:	0f c0       	rjmp	.+30     	; 0x4ecc <Ultrasonic_right_front_Get_Distance+0x168>
    4eae:	88 ec       	ldi	r24, 0xC8	; 200
    4eb0:	90 e0       	ldi	r25, 0x00	; 0
    4eb2:	9d 83       	std	Y+5, r25	; 0x05
    4eb4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    4eb8:	9d 81       	ldd	r25, Y+5	; 0x05
    4eba:	01 97       	sbiw	r24, 0x01	; 1
    4ebc:	f1 f7       	brne	.-4      	; 0x4eba <Ultrasonic_right_front_Get_Distance+0x156>
    4ebe:	9d 83       	std	Y+5, r25	; 0x05
    4ec0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ec2:	8e 81       	ldd	r24, Y+6	; 0x06
    4ec4:	9f 81       	ldd	r25, Y+7	; 0x07
    4ec6:	01 97       	sbiw	r24, 0x01	; 1
    4ec8:	9f 83       	std	Y+7, r25	; 0x07
    4eca:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ecc:	8e 81       	ldd	r24, Y+6	; 0x06
    4ece:	9f 81       	ldd	r25, Y+7	; 0x07
    4ed0:	00 97       	sbiw	r24, 0x00	; 0
    4ed2:	69 f7       	brne	.-38     	; 0x4eae <Ultrasonic_right_front_Get_Distance+0x14a>
    4ed4:	24 c0       	rjmp	.+72     	; 0x4f1e <Ultrasonic_right_front_Get_Distance+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ed6:	68 85       	ldd	r22, Y+8	; 0x08
    4ed8:	79 85       	ldd	r23, Y+9	; 0x09
    4eda:	8a 85       	ldd	r24, Y+10	; 0x0a
    4edc:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ede:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    4ee2:	dc 01       	movw	r26, r24
    4ee4:	cb 01       	movw	r24, r22
    4ee6:	9f 83       	std	Y+7, r25	; 0x07
    4ee8:	8e 83       	std	Y+6, r24	; 0x06
    4eea:	8e 81       	ldd	r24, Y+6	; 0x06
    4eec:	9f 81       	ldd	r25, Y+7	; 0x07
    4eee:	9b 83       	std	Y+3, r25	; 0x03
    4ef0:	8a 83       	std	Y+2, r24	; 0x02
    4ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ef4:	9b 81       	ldd	r25, Y+3	; 0x03
    4ef6:	01 97       	sbiw	r24, 0x01	; 1
    4ef8:	f1 f7       	brne	.-4      	; 0x4ef6 <Ultrasonic_right_front_Get_Distance+0x192>
    4efa:	9b 83       	std	Y+3, r25	; 0x03
    4efc:	8a 83       	std	Y+2, r24	; 0x02
    4efe:	0f c0       	rjmp	.+30     	; 0x4f1e <Ultrasonic_right_front_Get_Distance+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4f00:	69 89       	ldd	r22, Y+17	; 0x11
    4f02:	7a 89       	ldd	r23, Y+18	; 0x12
    4f04:	8b 89       	ldd	r24, Y+19	; 0x13
    4f06:	9c 89       	ldd	r25, Y+20	; 0x14
    4f08:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    4f0c:	dc 01       	movw	r26, r24
    4f0e:	cb 01       	movw	r24, r22
    4f10:	88 8b       	std	Y+16, r24	; 0x10
    4f12:	88 89       	ldd	r24, Y+16	; 0x10
    4f14:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4f16:	89 81       	ldd	r24, Y+1	; 0x01
    4f18:	8a 95       	dec	r24
    4f1a:	f1 f7       	brne	.-4      	; 0x4f18 <Ultrasonic_right_front_Get_Distance+0x1b4>
    4f1c:	89 83       	std	Y+1, r24	; 0x01
			_delay_us(10);
			DIO_void_Set_Pin_Value(PORTA_ID,trig1,LOW);
    4f1e:	80 e0       	ldi	r24, 0x00	; 0
    4f20:	61 e0       	ldi	r22, 0x01	; 1
    4f22:	40 e0       	ldi	r20, 0x00	; 0
    4f24:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>

			 Timer1_InputCaptureEdge(Rising);
    4f28:	81 e0       	ldi	r24, 0x01	; 1
    4f2a:	0e 94 b7 1c 	call	0x396e	; 0x396e <Timer1_InputCaptureEdge>
	         Timer1_ICU_InterruptEnable();
    4f2e:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <Timer1_ICU_InterruptEnable>
			 while(f<2);
    4f32:	80 91 d6 02 	lds	r24, 0x02D6
    4f36:	82 30       	cpi	r24, 0x02	; 2
    4f38:	e0 f3       	brcs	.-8      	; 0x4f32 <Ultrasonic_right_front_Get_Distance+0x1ce>
			 time = (t2-t1);
    4f3a:	20 91 da 02 	lds	r18, 0x02DA
    4f3e:	30 91 db 02 	lds	r19, 0x02DB
    4f42:	80 91 d8 02 	lds	r24, 0x02D8
    4f46:	90 91 d9 02 	lds	r25, 0x02D9
    4f4a:	a9 01       	movw	r20, r18
    4f4c:	48 1b       	sub	r20, r24
    4f4e:	59 0b       	sbc	r21, r25
    4f50:	ca 01       	movw	r24, r20
    4f52:	cc 01       	movw	r24, r24
    4f54:	a0 e0       	ldi	r26, 0x00	; 0
    4f56:	b0 e0       	ldi	r27, 0x00	; 0
    4f58:	8d 8f       	std	Y+29, r24	; 0x1d
    4f5a:	9e 8f       	std	Y+30, r25	; 0x1e
    4f5c:	af 8f       	std	Y+31, r26	; 0x1f
    4f5e:	b8 a3       	std	Y+32, r27	; 0x20
			 distance = time /58;
    4f60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f64:	af 8d       	ldd	r26, Y+31	; 0x1f
    4f66:	b8 a1       	ldd	r27, Y+32	; 0x20
    4f68:	2a e3       	ldi	r18, 0x3A	; 58
    4f6a:	30 e0       	ldi	r19, 0x00	; 0
    4f6c:	40 e0       	ldi	r20, 0x00	; 0
    4f6e:	50 e0       	ldi	r21, 0x00	; 0
    4f70:	bc 01       	movw	r22, r24
    4f72:	cd 01       	movw	r24, r26
    4f74:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    4f78:	da 01       	movw	r26, r20
    4f7a:	c9 01       	movw	r24, r18
    4f7c:	89 8f       	std	Y+25, r24	; 0x19
    4f7e:	9a 8f       	std	Y+26, r25	; 0x1a
    4f80:	ab 8f       	std	Y+27, r26	; 0x1b
    4f82:	bc 8f       	std	Y+28, r27	; 0x1c
			 Timer1_ICU_InterruptDisable();
    4f84:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <Timer1_ICU_InterruptDisable>


			 return distance;
    4f88:	89 8d       	ldd	r24, Y+25	; 0x19
    4f8a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4f8c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4f8e:	bc 8d       	ldd	r27, Y+28	; 0x1c
}
    4f90:	bc 01       	movw	r22, r24
    4f92:	cd 01       	movw	r24, r26
    4f94:	a0 96       	adiw	r28, 0x20	; 32
    4f96:	0f b6       	in	r0, 0x3f	; 63
    4f98:	f8 94       	cli
    4f9a:	de bf       	out	0x3e, r29	; 62
    4f9c:	0f be       	out	0x3f, r0	; 63
    4f9e:	cd bf       	out	0x3d, r28	; 61
    4fa0:	cf 91       	pop	r28
    4fa2:	df 91       	pop	r29
    4fa4:	08 95       	ret

00004fa6 <Ultrasonic_right_back_Get_Distance>:
uint32 Ultrasonic_right_back_Get_Distance(void)
{
    4fa6:	df 93       	push	r29
    4fa8:	cf 93       	push	r28
    4faa:	cd b7       	in	r28, 0x3d	; 61
    4fac:	de b7       	in	r29, 0x3e	; 62
    4fae:	a0 97       	sbiw	r28, 0x20	; 32
    4fb0:	0f b6       	in	r0, 0x3f	; 63
    4fb2:	f8 94       	cli
    4fb4:	de bf       	out	0x3e, r29	; 62
    4fb6:	0f be       	out	0x3f, r0	; 63
    4fb8:	cd bf       	out	0x3d, r28	; 61
	uint32 time=0,distance=0;
    4fba:	1d 8e       	std	Y+29, r1	; 0x1d
    4fbc:	1e 8e       	std	Y+30, r1	; 0x1e
    4fbe:	1f 8e       	std	Y+31, r1	; 0x1f
    4fc0:	18 a2       	std	Y+32, r1	; 0x20
    4fc2:	19 8e       	std	Y+25, r1	; 0x19
    4fc4:	1a 8e       	std	Y+26, r1	; 0x1a
    4fc6:	1b 8e       	std	Y+27, r1	; 0x1b
    4fc8:	1c 8e       	std	Y+28, r1	; 0x1c
			c = 0;
    4fca:	10 92 d7 02 	sts	0x02D7, r1
			TCNT1 = 0;
    4fce:	ec e4       	ldi	r30, 0x4C	; 76
    4fd0:	f0 e0       	ldi	r31, 0x00	; 0
    4fd2:	11 82       	std	Z+1, r1	; 0x01
    4fd4:	10 82       	st	Z, r1
			f = 0;
    4fd6:	10 92 d6 02 	sts	0x02D6, r1

			DIO_void_Set_Pin_Value(PORTA_ID,trig2,HIGH);
    4fda:	80 e0       	ldi	r24, 0x00	; 0
    4fdc:	62 e0       	ldi	r22, 0x02	; 2
    4fde:	41 e0       	ldi	r20, 0x01	; 1
    4fe0:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    4fe4:	80 e0       	ldi	r24, 0x00	; 0
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	a0 e2       	ldi	r26, 0x20	; 32
    4fea:	b1 e4       	ldi	r27, 0x41	; 65
    4fec:	8d 8b       	std	Y+21, r24	; 0x15
    4fee:	9e 8b       	std	Y+22, r25	; 0x16
    4ff0:	af 8b       	std	Y+23, r26	; 0x17
    4ff2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4ff4:	6d 89       	ldd	r22, Y+21	; 0x15
    4ff6:	7e 89       	ldd	r23, Y+22	; 0x16
    4ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    4ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    4ffc:	2b ea       	ldi	r18, 0xAB	; 171
    4ffe:	3a ea       	ldi	r19, 0xAA	; 170
    5000:	4a e2       	ldi	r20, 0x2A	; 42
    5002:	50 e4       	ldi	r21, 0x40	; 64
    5004:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5008:	dc 01       	movw	r26, r24
    500a:	cb 01       	movw	r24, r22
    500c:	89 8b       	std	Y+17, r24	; 0x11
    500e:	9a 8b       	std	Y+18, r25	; 0x12
    5010:	ab 8b       	std	Y+19, r26	; 0x13
    5012:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5014:	69 89       	ldd	r22, Y+17	; 0x11
    5016:	7a 89       	ldd	r23, Y+18	; 0x12
    5018:	8b 89       	ldd	r24, Y+19	; 0x13
    501a:	9c 89       	ldd	r25, Y+20	; 0x14
    501c:	20 e0       	ldi	r18, 0x00	; 0
    501e:	30 e0       	ldi	r19, 0x00	; 0
    5020:	40 e8       	ldi	r20, 0x80	; 128
    5022:	5f e3       	ldi	r21, 0x3F	; 63
    5024:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    5028:	88 23       	and	r24, r24
    502a:	1c f4       	brge	.+6      	; 0x5032 <Ultrasonic_right_back_Get_Distance+0x8c>
		__ticks = 1;
    502c:	81 e0       	ldi	r24, 0x01	; 1
    502e:	88 8b       	std	Y+16, r24	; 0x10
    5030:	91 c0       	rjmp	.+290    	; 0x5154 <Ultrasonic_right_back_Get_Distance+0x1ae>
	else if (__tmp > 255)
    5032:	69 89       	ldd	r22, Y+17	; 0x11
    5034:	7a 89       	ldd	r23, Y+18	; 0x12
    5036:	8b 89       	ldd	r24, Y+19	; 0x13
    5038:	9c 89       	ldd	r25, Y+20	; 0x14
    503a:	20 e0       	ldi	r18, 0x00	; 0
    503c:	30 e0       	ldi	r19, 0x00	; 0
    503e:	4f e7       	ldi	r20, 0x7F	; 127
    5040:	53 e4       	ldi	r21, 0x43	; 67
    5042:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    5046:	18 16       	cp	r1, r24
    5048:	0c f0       	brlt	.+2      	; 0x504c <Ultrasonic_right_back_Get_Distance+0xa6>
    504a:	7b c0       	rjmp	.+246    	; 0x5142 <Ultrasonic_right_back_Get_Distance+0x19c>
	{
		_delay_ms(__us / 1000.0);
    504c:	6d 89       	ldd	r22, Y+21	; 0x15
    504e:	7e 89       	ldd	r23, Y+22	; 0x16
    5050:	8f 89       	ldd	r24, Y+23	; 0x17
    5052:	98 8d       	ldd	r25, Y+24	; 0x18
    5054:	20 e0       	ldi	r18, 0x00	; 0
    5056:	30 e0       	ldi	r19, 0x00	; 0
    5058:	4a e7       	ldi	r20, 0x7A	; 122
    505a:	54 e4       	ldi	r21, 0x44	; 68
    505c:	0e 94 1c 10 	call	0x2038	; 0x2038 <__divsf3>
    5060:	dc 01       	movw	r26, r24
    5062:	cb 01       	movw	r24, r22
    5064:	8c 87       	std	Y+12, r24	; 0x0c
    5066:	9d 87       	std	Y+13, r25	; 0x0d
    5068:	ae 87       	std	Y+14, r26	; 0x0e
    506a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    506c:	6c 85       	ldd	r22, Y+12	; 0x0c
    506e:	7d 85       	ldd	r23, Y+13	; 0x0d
    5070:	8e 85       	ldd	r24, Y+14	; 0x0e
    5072:	9f 85       	ldd	r25, Y+15	; 0x0f
    5074:	20 e0       	ldi	r18, 0x00	; 0
    5076:	30 e0       	ldi	r19, 0x00	; 0
    5078:	4a ef       	ldi	r20, 0xFA	; 250
    507a:	54 e4       	ldi	r21, 0x44	; 68
    507c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5080:	dc 01       	movw	r26, r24
    5082:	cb 01       	movw	r24, r22
    5084:	88 87       	std	Y+8, r24	; 0x08
    5086:	99 87       	std	Y+9, r25	; 0x09
    5088:	aa 87       	std	Y+10, r26	; 0x0a
    508a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    508c:	68 85       	ldd	r22, Y+8	; 0x08
    508e:	79 85       	ldd	r23, Y+9	; 0x09
    5090:	8a 85       	ldd	r24, Y+10	; 0x0a
    5092:	9b 85       	ldd	r25, Y+11	; 0x0b
    5094:	20 e0       	ldi	r18, 0x00	; 0
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	40 e8       	ldi	r20, 0x80	; 128
    509a:	5f e3       	ldi	r21, 0x3F	; 63
    509c:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    50a0:	88 23       	and	r24, r24
    50a2:	2c f4       	brge	.+10     	; 0x50ae <Ultrasonic_right_back_Get_Distance+0x108>
		__ticks = 1;
    50a4:	81 e0       	ldi	r24, 0x01	; 1
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	9f 83       	std	Y+7, r25	; 0x07
    50aa:	8e 83       	std	Y+6, r24	; 0x06
    50ac:	3f c0       	rjmp	.+126    	; 0x512c <Ultrasonic_right_back_Get_Distance+0x186>
	else if (__tmp > 65535)
    50ae:	68 85       	ldd	r22, Y+8	; 0x08
    50b0:	79 85       	ldd	r23, Y+9	; 0x09
    50b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    50b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    50b6:	20 e0       	ldi	r18, 0x00	; 0
    50b8:	3f ef       	ldi	r19, 0xFF	; 255
    50ba:	4f e7       	ldi	r20, 0x7F	; 127
    50bc:	57 e4       	ldi	r21, 0x47	; 71
    50be:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    50c2:	18 16       	cp	r1, r24
    50c4:	4c f5       	brge	.+82     	; 0x5118 <Ultrasonic_right_back_Get_Distance+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50c6:	6c 85       	ldd	r22, Y+12	; 0x0c
    50c8:	7d 85       	ldd	r23, Y+13	; 0x0d
    50ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    50cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    50ce:	20 e0       	ldi	r18, 0x00	; 0
    50d0:	30 e0       	ldi	r19, 0x00	; 0
    50d2:	40 e2       	ldi	r20, 0x20	; 32
    50d4:	51 e4       	ldi	r21, 0x41	; 65
    50d6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    50da:	dc 01       	movw	r26, r24
    50dc:	cb 01       	movw	r24, r22
    50de:	bc 01       	movw	r22, r24
    50e0:	cd 01       	movw	r24, r26
    50e2:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    50e6:	dc 01       	movw	r26, r24
    50e8:	cb 01       	movw	r24, r22
    50ea:	9f 83       	std	Y+7, r25	; 0x07
    50ec:	8e 83       	std	Y+6, r24	; 0x06
    50ee:	0f c0       	rjmp	.+30     	; 0x510e <Ultrasonic_right_back_Get_Distance+0x168>
    50f0:	88 ec       	ldi	r24, 0xC8	; 200
    50f2:	90 e0       	ldi	r25, 0x00	; 0
    50f4:	9d 83       	std	Y+5, r25	; 0x05
    50f6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    50f8:	8c 81       	ldd	r24, Y+4	; 0x04
    50fa:	9d 81       	ldd	r25, Y+5	; 0x05
    50fc:	01 97       	sbiw	r24, 0x01	; 1
    50fe:	f1 f7       	brne	.-4      	; 0x50fc <Ultrasonic_right_back_Get_Distance+0x156>
    5100:	9d 83       	std	Y+5, r25	; 0x05
    5102:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5104:	8e 81       	ldd	r24, Y+6	; 0x06
    5106:	9f 81       	ldd	r25, Y+7	; 0x07
    5108:	01 97       	sbiw	r24, 0x01	; 1
    510a:	9f 83       	std	Y+7, r25	; 0x07
    510c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    510e:	8e 81       	ldd	r24, Y+6	; 0x06
    5110:	9f 81       	ldd	r25, Y+7	; 0x07
    5112:	00 97       	sbiw	r24, 0x00	; 0
    5114:	69 f7       	brne	.-38     	; 0x50f0 <Ultrasonic_right_back_Get_Distance+0x14a>
    5116:	24 c0       	rjmp	.+72     	; 0x5160 <Ultrasonic_right_back_Get_Distance+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5118:	68 85       	ldd	r22, Y+8	; 0x08
    511a:	79 85       	ldd	r23, Y+9	; 0x09
    511c:	8a 85       	ldd	r24, Y+10	; 0x0a
    511e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5120:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5124:	dc 01       	movw	r26, r24
    5126:	cb 01       	movw	r24, r22
    5128:	9f 83       	std	Y+7, r25	; 0x07
    512a:	8e 83       	std	Y+6, r24	; 0x06
    512c:	8e 81       	ldd	r24, Y+6	; 0x06
    512e:	9f 81       	ldd	r25, Y+7	; 0x07
    5130:	9b 83       	std	Y+3, r25	; 0x03
    5132:	8a 83       	std	Y+2, r24	; 0x02
    5134:	8a 81       	ldd	r24, Y+2	; 0x02
    5136:	9b 81       	ldd	r25, Y+3	; 0x03
    5138:	01 97       	sbiw	r24, 0x01	; 1
    513a:	f1 f7       	brne	.-4      	; 0x5138 <Ultrasonic_right_back_Get_Distance+0x192>
    513c:	9b 83       	std	Y+3, r25	; 0x03
    513e:	8a 83       	std	Y+2, r24	; 0x02
    5140:	0f c0       	rjmp	.+30     	; 0x5160 <Ultrasonic_right_back_Get_Distance+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5142:	69 89       	ldd	r22, Y+17	; 0x11
    5144:	7a 89       	ldd	r23, Y+18	; 0x12
    5146:	8b 89       	ldd	r24, Y+19	; 0x13
    5148:	9c 89       	ldd	r25, Y+20	; 0x14
    514a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    514e:	dc 01       	movw	r26, r24
    5150:	cb 01       	movw	r24, r22
    5152:	88 8b       	std	Y+16, r24	; 0x10
    5154:	88 89       	ldd	r24, Y+16	; 0x10
    5156:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5158:	89 81       	ldd	r24, Y+1	; 0x01
    515a:	8a 95       	dec	r24
    515c:	f1 f7       	brne	.-4      	; 0x515a <Ultrasonic_right_back_Get_Distance+0x1b4>
    515e:	89 83       	std	Y+1, r24	; 0x01
			_delay_us(10);
			DIO_void_Set_Pin_Value(PORTA_ID,trig2,LOW);
    5160:	80 e0       	ldi	r24, 0x00	; 0
    5162:	62 e0       	ldi	r22, 0x02	; 2
    5164:	40 e0       	ldi	r20, 0x00	; 0
    5166:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>

			 Timer1_InputCaptureEdge(Rising);
    516a:	81 e0       	ldi	r24, 0x01	; 1
    516c:	0e 94 b7 1c 	call	0x396e	; 0x396e <Timer1_InputCaptureEdge>
	         Timer1_ICU_InterruptEnable();
    5170:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <Timer1_ICU_InterruptEnable>
			 while(f<2);
    5174:	80 91 d6 02 	lds	r24, 0x02D6
    5178:	82 30       	cpi	r24, 0x02	; 2
    517a:	e0 f3       	brcs	.-8      	; 0x5174 <Ultrasonic_right_back_Get_Distance+0x1ce>
			 time = (t2-t1);
    517c:	20 91 da 02 	lds	r18, 0x02DA
    5180:	30 91 db 02 	lds	r19, 0x02DB
    5184:	80 91 d8 02 	lds	r24, 0x02D8
    5188:	90 91 d9 02 	lds	r25, 0x02D9
    518c:	a9 01       	movw	r20, r18
    518e:	48 1b       	sub	r20, r24
    5190:	59 0b       	sbc	r21, r25
    5192:	ca 01       	movw	r24, r20
    5194:	cc 01       	movw	r24, r24
    5196:	a0 e0       	ldi	r26, 0x00	; 0
    5198:	b0 e0       	ldi	r27, 0x00	; 0
    519a:	8d 8f       	std	Y+29, r24	; 0x1d
    519c:	9e 8f       	std	Y+30, r25	; 0x1e
    519e:	af 8f       	std	Y+31, r26	; 0x1f
    51a0:	b8 a3       	std	Y+32, r27	; 0x20
			 distance = time /58;
    51a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51a6:	af 8d       	ldd	r26, Y+31	; 0x1f
    51a8:	b8 a1       	ldd	r27, Y+32	; 0x20
    51aa:	2a e3       	ldi	r18, 0x3A	; 58
    51ac:	30 e0       	ldi	r19, 0x00	; 0
    51ae:	40 e0       	ldi	r20, 0x00	; 0
    51b0:	50 e0       	ldi	r21, 0x00	; 0
    51b2:	bc 01       	movw	r22, r24
    51b4:	cd 01       	movw	r24, r26
    51b6:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    51ba:	da 01       	movw	r26, r20
    51bc:	c9 01       	movw	r24, r18
    51be:	89 8f       	std	Y+25, r24	; 0x19
    51c0:	9a 8f       	std	Y+26, r25	; 0x1a
    51c2:	ab 8f       	std	Y+27, r26	; 0x1b
    51c4:	bc 8f       	std	Y+28, r27	; 0x1c
			 Timer1_ICU_InterruptDisable();
    51c6:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <Timer1_ICU_InterruptDisable>


			 return distance;
    51ca:	89 8d       	ldd	r24, Y+25	; 0x19
    51cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    51ce:	ab 8d       	ldd	r26, Y+27	; 0x1b
    51d0:	bc 8d       	ldd	r27, Y+28	; 0x1c
}
    51d2:	bc 01       	movw	r22, r24
    51d4:	cd 01       	movw	r24, r26
    51d6:	a0 96       	adiw	r28, 0x20	; 32
    51d8:	0f b6       	in	r0, 0x3f	; 63
    51da:	f8 94       	cli
    51dc:	de bf       	out	0x3e, r29	; 62
    51de:	0f be       	out	0x3f, r0	; 63
    51e0:	cd bf       	out	0x3d, r28	; 61
    51e2:	cf 91       	pop	r28
    51e4:	df 91       	pop	r29
    51e6:	08 95       	ret

000051e8 <Ultrasonic_back_Get_Distance>:
uint32 Ultrasonic_back_Get_Distance(void)
{
    51e8:	df 93       	push	r29
    51ea:	cf 93       	push	r28
    51ec:	cd b7       	in	r28, 0x3d	; 61
    51ee:	de b7       	in	r29, 0x3e	; 62
    51f0:	a0 97       	sbiw	r28, 0x20	; 32
    51f2:	0f b6       	in	r0, 0x3f	; 63
    51f4:	f8 94       	cli
    51f6:	de bf       	out	0x3e, r29	; 62
    51f8:	0f be       	out	0x3f, r0	; 63
    51fa:	cd bf       	out	0x3d, r28	; 61
	uint32 time=0,distance=0;
    51fc:	1d 8e       	std	Y+29, r1	; 0x1d
    51fe:	1e 8e       	std	Y+30, r1	; 0x1e
    5200:	1f 8e       	std	Y+31, r1	; 0x1f
    5202:	18 a2       	std	Y+32, r1	; 0x20
    5204:	19 8e       	std	Y+25, r1	; 0x19
    5206:	1a 8e       	std	Y+26, r1	; 0x1a
    5208:	1b 8e       	std	Y+27, r1	; 0x1b
    520a:	1c 8e       	std	Y+28, r1	; 0x1c
			c = 0;
    520c:	10 92 d7 02 	sts	0x02D7, r1
			TCNT1 = 0;
    5210:	ec e4       	ldi	r30, 0x4C	; 76
    5212:	f0 e0       	ldi	r31, 0x00	; 0
    5214:	11 82       	std	Z+1, r1	; 0x01
    5216:	10 82       	st	Z, r1
			f = 0;
    5218:	10 92 d6 02 	sts	0x02D6, r1

			DIO_void_Set_Pin_Value(PORTA_ID,trig3,HIGH);
    521c:	80 e0       	ldi	r24, 0x00	; 0
    521e:	63 e0       	ldi	r22, 0x03	; 3
    5220:	41 e0       	ldi	r20, 0x01	; 1
    5222:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    5226:	80 e0       	ldi	r24, 0x00	; 0
    5228:	90 e0       	ldi	r25, 0x00	; 0
    522a:	a0 e2       	ldi	r26, 0x20	; 32
    522c:	b1 e4       	ldi	r27, 0x41	; 65
    522e:	8d 8b       	std	Y+21, r24	; 0x15
    5230:	9e 8b       	std	Y+22, r25	; 0x16
    5232:	af 8b       	std	Y+23, r26	; 0x17
    5234:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5236:	6d 89       	ldd	r22, Y+21	; 0x15
    5238:	7e 89       	ldd	r23, Y+22	; 0x16
    523a:	8f 89       	ldd	r24, Y+23	; 0x17
    523c:	98 8d       	ldd	r25, Y+24	; 0x18
    523e:	2b ea       	ldi	r18, 0xAB	; 171
    5240:	3a ea       	ldi	r19, 0xAA	; 170
    5242:	4a e2       	ldi	r20, 0x2A	; 42
    5244:	50 e4       	ldi	r21, 0x40	; 64
    5246:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    524a:	dc 01       	movw	r26, r24
    524c:	cb 01       	movw	r24, r22
    524e:	89 8b       	std	Y+17, r24	; 0x11
    5250:	9a 8b       	std	Y+18, r25	; 0x12
    5252:	ab 8b       	std	Y+19, r26	; 0x13
    5254:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5256:	69 89       	ldd	r22, Y+17	; 0x11
    5258:	7a 89       	ldd	r23, Y+18	; 0x12
    525a:	8b 89       	ldd	r24, Y+19	; 0x13
    525c:	9c 89       	ldd	r25, Y+20	; 0x14
    525e:	20 e0       	ldi	r18, 0x00	; 0
    5260:	30 e0       	ldi	r19, 0x00	; 0
    5262:	40 e8       	ldi	r20, 0x80	; 128
    5264:	5f e3       	ldi	r21, 0x3F	; 63
    5266:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    526a:	88 23       	and	r24, r24
    526c:	1c f4       	brge	.+6      	; 0x5274 <Ultrasonic_back_Get_Distance+0x8c>
		__ticks = 1;
    526e:	81 e0       	ldi	r24, 0x01	; 1
    5270:	88 8b       	std	Y+16, r24	; 0x10
    5272:	91 c0       	rjmp	.+290    	; 0x5396 <Ultrasonic_back_Get_Distance+0x1ae>
	else if (__tmp > 255)
    5274:	69 89       	ldd	r22, Y+17	; 0x11
    5276:	7a 89       	ldd	r23, Y+18	; 0x12
    5278:	8b 89       	ldd	r24, Y+19	; 0x13
    527a:	9c 89       	ldd	r25, Y+20	; 0x14
    527c:	20 e0       	ldi	r18, 0x00	; 0
    527e:	30 e0       	ldi	r19, 0x00	; 0
    5280:	4f e7       	ldi	r20, 0x7F	; 127
    5282:	53 e4       	ldi	r21, 0x43	; 67
    5284:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    5288:	18 16       	cp	r1, r24
    528a:	0c f0       	brlt	.+2      	; 0x528e <Ultrasonic_back_Get_Distance+0xa6>
    528c:	7b c0       	rjmp	.+246    	; 0x5384 <Ultrasonic_back_Get_Distance+0x19c>
	{
		_delay_ms(__us / 1000.0);
    528e:	6d 89       	ldd	r22, Y+21	; 0x15
    5290:	7e 89       	ldd	r23, Y+22	; 0x16
    5292:	8f 89       	ldd	r24, Y+23	; 0x17
    5294:	98 8d       	ldd	r25, Y+24	; 0x18
    5296:	20 e0       	ldi	r18, 0x00	; 0
    5298:	30 e0       	ldi	r19, 0x00	; 0
    529a:	4a e7       	ldi	r20, 0x7A	; 122
    529c:	54 e4       	ldi	r21, 0x44	; 68
    529e:	0e 94 1c 10 	call	0x2038	; 0x2038 <__divsf3>
    52a2:	dc 01       	movw	r26, r24
    52a4:	cb 01       	movw	r24, r22
    52a6:	8c 87       	std	Y+12, r24	; 0x0c
    52a8:	9d 87       	std	Y+13, r25	; 0x0d
    52aa:	ae 87       	std	Y+14, r26	; 0x0e
    52ac:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    52b0:	7d 85       	ldd	r23, Y+13	; 0x0d
    52b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    52b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    52b6:	20 e0       	ldi	r18, 0x00	; 0
    52b8:	30 e0       	ldi	r19, 0x00	; 0
    52ba:	4a ef       	ldi	r20, 0xFA	; 250
    52bc:	54 e4       	ldi	r21, 0x44	; 68
    52be:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    52c2:	dc 01       	movw	r26, r24
    52c4:	cb 01       	movw	r24, r22
    52c6:	88 87       	std	Y+8, r24	; 0x08
    52c8:	99 87       	std	Y+9, r25	; 0x09
    52ca:	aa 87       	std	Y+10, r26	; 0x0a
    52cc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    52ce:	68 85       	ldd	r22, Y+8	; 0x08
    52d0:	79 85       	ldd	r23, Y+9	; 0x09
    52d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    52d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    52d6:	20 e0       	ldi	r18, 0x00	; 0
    52d8:	30 e0       	ldi	r19, 0x00	; 0
    52da:	40 e8       	ldi	r20, 0x80	; 128
    52dc:	5f e3       	ldi	r21, 0x3F	; 63
    52de:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    52e2:	88 23       	and	r24, r24
    52e4:	2c f4       	brge	.+10     	; 0x52f0 <Ultrasonic_back_Get_Distance+0x108>
		__ticks = 1;
    52e6:	81 e0       	ldi	r24, 0x01	; 1
    52e8:	90 e0       	ldi	r25, 0x00	; 0
    52ea:	9f 83       	std	Y+7, r25	; 0x07
    52ec:	8e 83       	std	Y+6, r24	; 0x06
    52ee:	3f c0       	rjmp	.+126    	; 0x536e <Ultrasonic_back_Get_Distance+0x186>
	else if (__tmp > 65535)
    52f0:	68 85       	ldd	r22, Y+8	; 0x08
    52f2:	79 85       	ldd	r23, Y+9	; 0x09
    52f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    52f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    52f8:	20 e0       	ldi	r18, 0x00	; 0
    52fa:	3f ef       	ldi	r19, 0xFF	; 255
    52fc:	4f e7       	ldi	r20, 0x7F	; 127
    52fe:	57 e4       	ldi	r21, 0x47	; 71
    5300:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    5304:	18 16       	cp	r1, r24
    5306:	4c f5       	brge	.+82     	; 0x535a <Ultrasonic_back_Get_Distance+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5308:	6c 85       	ldd	r22, Y+12	; 0x0c
    530a:	7d 85       	ldd	r23, Y+13	; 0x0d
    530c:	8e 85       	ldd	r24, Y+14	; 0x0e
    530e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5310:	20 e0       	ldi	r18, 0x00	; 0
    5312:	30 e0       	ldi	r19, 0x00	; 0
    5314:	40 e2       	ldi	r20, 0x20	; 32
    5316:	51 e4       	ldi	r21, 0x41	; 65
    5318:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    531c:	dc 01       	movw	r26, r24
    531e:	cb 01       	movw	r24, r22
    5320:	bc 01       	movw	r22, r24
    5322:	cd 01       	movw	r24, r26
    5324:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5328:	dc 01       	movw	r26, r24
    532a:	cb 01       	movw	r24, r22
    532c:	9f 83       	std	Y+7, r25	; 0x07
    532e:	8e 83       	std	Y+6, r24	; 0x06
    5330:	0f c0       	rjmp	.+30     	; 0x5350 <Ultrasonic_back_Get_Distance+0x168>
    5332:	88 ec       	ldi	r24, 0xC8	; 200
    5334:	90 e0       	ldi	r25, 0x00	; 0
    5336:	9d 83       	std	Y+5, r25	; 0x05
    5338:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    533a:	8c 81       	ldd	r24, Y+4	; 0x04
    533c:	9d 81       	ldd	r25, Y+5	; 0x05
    533e:	01 97       	sbiw	r24, 0x01	; 1
    5340:	f1 f7       	brne	.-4      	; 0x533e <Ultrasonic_back_Get_Distance+0x156>
    5342:	9d 83       	std	Y+5, r25	; 0x05
    5344:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5346:	8e 81       	ldd	r24, Y+6	; 0x06
    5348:	9f 81       	ldd	r25, Y+7	; 0x07
    534a:	01 97       	sbiw	r24, 0x01	; 1
    534c:	9f 83       	std	Y+7, r25	; 0x07
    534e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5350:	8e 81       	ldd	r24, Y+6	; 0x06
    5352:	9f 81       	ldd	r25, Y+7	; 0x07
    5354:	00 97       	sbiw	r24, 0x00	; 0
    5356:	69 f7       	brne	.-38     	; 0x5332 <Ultrasonic_back_Get_Distance+0x14a>
    5358:	24 c0       	rjmp	.+72     	; 0x53a2 <Ultrasonic_back_Get_Distance+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    535a:	68 85       	ldd	r22, Y+8	; 0x08
    535c:	79 85       	ldd	r23, Y+9	; 0x09
    535e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5360:	9b 85       	ldd	r25, Y+11	; 0x0b
    5362:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5366:	dc 01       	movw	r26, r24
    5368:	cb 01       	movw	r24, r22
    536a:	9f 83       	std	Y+7, r25	; 0x07
    536c:	8e 83       	std	Y+6, r24	; 0x06
    536e:	8e 81       	ldd	r24, Y+6	; 0x06
    5370:	9f 81       	ldd	r25, Y+7	; 0x07
    5372:	9b 83       	std	Y+3, r25	; 0x03
    5374:	8a 83       	std	Y+2, r24	; 0x02
    5376:	8a 81       	ldd	r24, Y+2	; 0x02
    5378:	9b 81       	ldd	r25, Y+3	; 0x03
    537a:	01 97       	sbiw	r24, 0x01	; 1
    537c:	f1 f7       	brne	.-4      	; 0x537a <Ultrasonic_back_Get_Distance+0x192>
    537e:	9b 83       	std	Y+3, r25	; 0x03
    5380:	8a 83       	std	Y+2, r24	; 0x02
    5382:	0f c0       	rjmp	.+30     	; 0x53a2 <Ultrasonic_back_Get_Distance+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5384:	69 89       	ldd	r22, Y+17	; 0x11
    5386:	7a 89       	ldd	r23, Y+18	; 0x12
    5388:	8b 89       	ldd	r24, Y+19	; 0x13
    538a:	9c 89       	ldd	r25, Y+20	; 0x14
    538c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5390:	dc 01       	movw	r26, r24
    5392:	cb 01       	movw	r24, r22
    5394:	88 8b       	std	Y+16, r24	; 0x10
    5396:	88 89       	ldd	r24, Y+16	; 0x10
    5398:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    539a:	89 81       	ldd	r24, Y+1	; 0x01
    539c:	8a 95       	dec	r24
    539e:	f1 f7       	brne	.-4      	; 0x539c <Ultrasonic_back_Get_Distance+0x1b4>
    53a0:	89 83       	std	Y+1, r24	; 0x01
			_delay_us(10);
			DIO_void_Set_Pin_Value(PORTA_ID,trig3,LOW);
    53a2:	80 e0       	ldi	r24, 0x00	; 0
    53a4:	63 e0       	ldi	r22, 0x03	; 3
    53a6:	40 e0       	ldi	r20, 0x00	; 0
    53a8:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>

			 Timer1_InputCaptureEdge(Rising);
    53ac:	81 e0       	ldi	r24, 0x01	; 1
    53ae:	0e 94 b7 1c 	call	0x396e	; 0x396e <Timer1_InputCaptureEdge>
	         Timer1_ICU_InterruptEnable();
    53b2:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <Timer1_ICU_InterruptEnable>
			 while(f<2);
    53b6:	80 91 d6 02 	lds	r24, 0x02D6
    53ba:	82 30       	cpi	r24, 0x02	; 2
    53bc:	e0 f3       	brcs	.-8      	; 0x53b6 <Ultrasonic_back_Get_Distance+0x1ce>
			 time = (t2-t1);
    53be:	20 91 da 02 	lds	r18, 0x02DA
    53c2:	30 91 db 02 	lds	r19, 0x02DB
    53c6:	80 91 d8 02 	lds	r24, 0x02D8
    53ca:	90 91 d9 02 	lds	r25, 0x02D9
    53ce:	a9 01       	movw	r20, r18
    53d0:	48 1b       	sub	r20, r24
    53d2:	59 0b       	sbc	r21, r25
    53d4:	ca 01       	movw	r24, r20
    53d6:	cc 01       	movw	r24, r24
    53d8:	a0 e0       	ldi	r26, 0x00	; 0
    53da:	b0 e0       	ldi	r27, 0x00	; 0
    53dc:	8d 8f       	std	Y+29, r24	; 0x1d
    53de:	9e 8f       	std	Y+30, r25	; 0x1e
    53e0:	af 8f       	std	Y+31, r26	; 0x1f
    53e2:	b8 a3       	std	Y+32, r27	; 0x20
			 distance = time /58;
    53e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    53e8:	af 8d       	ldd	r26, Y+31	; 0x1f
    53ea:	b8 a1       	ldd	r27, Y+32	; 0x20
    53ec:	2a e3       	ldi	r18, 0x3A	; 58
    53ee:	30 e0       	ldi	r19, 0x00	; 0
    53f0:	40 e0       	ldi	r20, 0x00	; 0
    53f2:	50 e0       	ldi	r21, 0x00	; 0
    53f4:	bc 01       	movw	r22, r24
    53f6:	cd 01       	movw	r24, r26
    53f8:	0e 94 29 49 	call	0x9252	; 0x9252 <__udivmodsi4>
    53fc:	da 01       	movw	r26, r20
    53fe:	c9 01       	movw	r24, r18
    5400:	89 8f       	std	Y+25, r24	; 0x19
    5402:	9a 8f       	std	Y+26, r25	; 0x1a
    5404:	ab 8f       	std	Y+27, r26	; 0x1b
    5406:	bc 8f       	std	Y+28, r27	; 0x1c
			 Timer1_ICU_InterruptDisable();
    5408:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <Timer1_ICU_InterruptDisable>


			 return distance;
    540c:	89 8d       	ldd	r24, Y+25	; 0x19
    540e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5410:	ab 8d       	ldd	r26, Y+27	; 0x1b
    5412:	bc 8d       	ldd	r27, Y+28	; 0x1c
}
    5414:	bc 01       	movw	r22, r24
    5416:	cd 01       	movw	r24, r26
    5418:	a0 96       	adiw	r28, 0x20	; 32
    541a:	0f b6       	in	r0, 0x3f	; 63
    541c:	f8 94       	cli
    541e:	de bf       	out	0x3e, r29	; 62
    5420:	0f be       	out	0x3f, r0	; 63
    5422:	cd bf       	out	0x3d, r28	; 61
    5424:	cf 91       	pop	r28
    5426:	df 91       	pop	r29
    5428:	08 95       	ret

0000542a <__vector_11>:
ISR(TIMER1_CAPT_vect)
{
    542a:	1f 92       	push	r1
    542c:	0f 92       	push	r0
    542e:	0f b6       	in	r0, 0x3f	; 63
    5430:	0f 92       	push	r0
    5432:	00 90 5b 00 	lds	r0, 0x005B
    5436:	0f 92       	push	r0
    5438:	11 24       	eor	r1, r1
    543a:	2f 93       	push	r18
    543c:	3f 93       	push	r19
    543e:	4f 93       	push	r20
    5440:	5f 93       	push	r21
    5442:	6f 93       	push	r22
    5444:	7f 93       	push	r23
    5446:	8f 93       	push	r24
    5448:	9f 93       	push	r25
    544a:	af 93       	push	r26
    544c:	bf 93       	push	r27
    544e:	ef 93       	push	r30
    5450:	ff 93       	push	r31
    5452:	df 93       	push	r29
    5454:	cf 93       	push	r28
    5456:	cd b7       	in	r28, 0x3d	; 61
    5458:	de b7       	in	r29, 0x3e	; 62
if(f==0)
    545a:	80 91 d6 02 	lds	r24, 0x02D6
    545e:	88 23       	and	r24, r24
    5460:	79 f4       	brne	.+30     	; 0x5480 <__vector_11+0x56>
{
	t1=ICR1;
    5462:	e6 e4       	ldi	r30, 0x46	; 70
    5464:	f0 e0       	ldi	r31, 0x00	; 0
    5466:	80 81       	ld	r24, Z
    5468:	91 81       	ldd	r25, Z+1	; 0x01
    546a:	90 93 d9 02 	sts	0x02D9, r25
    546e:	80 93 d8 02 	sts	0x02D8, r24
	f=1;
    5472:	81 e0       	ldi	r24, 0x01	; 1
    5474:	80 93 d6 02 	sts	0x02D6, r24

Timer1_InputCaptureEdge(Falling);
    5478:	80 e0       	ldi	r24, 0x00	; 0
    547a:	0e 94 b7 1c 	call	0x396e	; 0x396e <Timer1_InputCaptureEdge>
    547e:	0f c0       	rjmp	.+30     	; 0x549e <__vector_11+0x74>
}

else if(f==1)
    5480:	80 91 d6 02 	lds	r24, 0x02D6
    5484:	81 30       	cpi	r24, 0x01	; 1
    5486:	59 f4       	brne	.+22     	; 0x549e <__vector_11+0x74>
{
	t2=ICR1;
    5488:	e6 e4       	ldi	r30, 0x46	; 70
    548a:	f0 e0       	ldi	r31, 0x00	; 0
    548c:	80 81       	ld	r24, Z
    548e:	91 81       	ldd	r25, Z+1	; 0x01
    5490:	90 93 db 02 	sts	0x02DB, r25
    5494:	80 93 da 02 	sts	0x02DA, r24
	f=2;
    5498:	82 e0       	ldi	r24, 0x02	; 2
    549a:	80 93 d6 02 	sts	0x02D6, r24

}
}
    549e:	cf 91       	pop	r28
    54a0:	df 91       	pop	r29
    54a2:	ff 91       	pop	r31
    54a4:	ef 91       	pop	r30
    54a6:	bf 91       	pop	r27
    54a8:	af 91       	pop	r26
    54aa:	9f 91       	pop	r25
    54ac:	8f 91       	pop	r24
    54ae:	7f 91       	pop	r23
    54b0:	6f 91       	pop	r22
    54b2:	5f 91       	pop	r21
    54b4:	4f 91       	pop	r20
    54b6:	3f 91       	pop	r19
    54b8:	2f 91       	pop	r18
    54ba:	0f 90       	pop	r0
    54bc:	00 92 5b 00 	sts	0x005B, r0
    54c0:	0f 90       	pop	r0
    54c2:	0f be       	out	0x3f, r0	; 63
    54c4:	0f 90       	pop	r0
    54c6:	1f 90       	pop	r1
    54c8:	18 95       	reti

000054ca <__vector_14>:


ISR(TIMER1_OVF_vect)
{
    54ca:	1f 92       	push	r1
    54cc:	0f 92       	push	r0
    54ce:	0f b6       	in	r0, 0x3f	; 63
    54d0:	0f 92       	push	r0
    54d2:	11 24       	eor	r1, r1
    54d4:	8f 93       	push	r24
    54d6:	df 93       	push	r29
    54d8:	cf 93       	push	r28
    54da:	cd b7       	in	r28, 0x3d	; 61
    54dc:	de b7       	in	r29, 0x3e	; 62
		c++;
    54de:	80 91 d7 02 	lds	r24, 0x02D7
    54e2:	8f 5f       	subi	r24, 0xFF	; 255
    54e4:	80 93 d7 02 	sts	0x02D7, r24
}
    54e8:	cf 91       	pop	r28
    54ea:	df 91       	pop	r29
    54ec:	8f 91       	pop	r24
    54ee:	0f 90       	pop	r0
    54f0:	0f be       	out	0x3f, r0	; 63
    54f2:	0f 90       	pop	r0
    54f4:	1f 90       	pop	r1
    54f6:	18 95       	reti

000054f8 <UART_SendString>:

/***********************Send Functions*******************************/
//send string using polling function

void UART_SendString(uint8 *Str)
{
    54f8:	df 93       	push	r29
    54fa:	cf 93       	push	r28
    54fc:	00 d0       	rcall	.+0      	; 0x54fe <UART_SendString+0x6>
    54fe:	0f 92       	push	r0
    5500:	cd b7       	in	r28, 0x3d	; 61
    5502:	de b7       	in	r29, 0x3e	; 62
    5504:	9b 83       	std	Y+3, r25	; 0x03
    5506:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    5508:	19 82       	std	Y+1, r1	; 0x01
    550a:	0e c0       	rjmp	.+28     	; 0x5528 <UART_SendString+0x30>
	while(Str[i] != '\0'){
		UART_SendData(Str[i]);
    550c:	89 81       	ldd	r24, Y+1	; 0x01
    550e:	28 2f       	mov	r18, r24
    5510:	30 e0       	ldi	r19, 0x00	; 0
    5512:	8a 81       	ldd	r24, Y+2	; 0x02
    5514:	9b 81       	ldd	r25, Y+3	; 0x03
    5516:	fc 01       	movw	r30, r24
    5518:	e2 0f       	add	r30, r18
    551a:	f3 1f       	adc	r31, r19
    551c:	80 81       	ld	r24, Z
    551e:	0e 94 ac 14 	call	0x2958	; 0x2958 <UART_SendData>
		i++;
    5522:	89 81       	ldd	r24, Y+1	; 0x01
    5524:	8f 5f       	subi	r24, 0xFF	; 255
    5526:	89 83       	std	Y+1, r24	; 0x01
//send string using polling function

void UART_SendString(uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0'){
    5528:	89 81       	ldd	r24, Y+1	; 0x01
    552a:	28 2f       	mov	r18, r24
    552c:	30 e0       	ldi	r19, 0x00	; 0
    552e:	8a 81       	ldd	r24, Y+2	; 0x02
    5530:	9b 81       	ldd	r25, Y+3	; 0x03
    5532:	fc 01       	movw	r30, r24
    5534:	e2 0f       	add	r30, r18
    5536:	f3 1f       	adc	r31, r19
    5538:	80 81       	ld	r24, Z
    553a:	88 23       	and	r24, r24
    553c:	39 f7       	brne	.-50     	; 0x550c <UART_SendString+0x14>
		UART_SendData(Str[i]);
		i++;

	}
	UART_SendData('\0');
    553e:	80 e0       	ldi	r24, 0x00	; 0
    5540:	0e 94 ac 14 	call	0x2958	; 0x2958 <UART_SendData>
}
    5544:	0f 90       	pop	r0
    5546:	0f 90       	pop	r0
    5548:	0f 90       	pop	r0
    554a:	cf 91       	pop	r28
    554c:	df 91       	pop	r29
    554e:	08 95       	ret

00005550 <UART_SendString_Asynch>:
								////////////////////////////////////

void UART_SendString_Asynch(uint8 *Str)
{
    5550:	df 93       	push	r29
    5552:	cf 93       	push	r28
    5554:	00 d0       	rcall	.+0      	; 0x5556 <UART_SendString_Asynch+0x6>
    5556:	cd b7       	in	r28, 0x3d	; 61
    5558:	de b7       	in	r29, 0x3e	; 62
    555a:	9a 83       	std	Y+2, r25	; 0x02
    555c:	89 83       	std	Y+1, r24	; 0x01
	Asynch_Send_Str=Str;
    555e:	89 81       	ldd	r24, Y+1	; 0x01
    5560:	9a 81       	ldd	r25, Y+2	; 0x02
    5562:	90 93 df 02 	sts	0x02DF, r25
    5566:	80 93 de 02 	sts	0x02DE, r24
	UART_SendByte(Str[0]);
    556a:	e9 81       	ldd	r30, Y+1	; 0x01
    556c:	fa 81       	ldd	r31, Y+2	; 0x02
    556e:	80 81       	ld	r24, Z
    5570:	0e 94 8f 14 	call	0x291e	; 0x291e <UART_SendByte>

	UART_callback_Trans_Int(Send_Int_Function);
    5574:	85 ec       	ldi	r24, 0xC5	; 197
    5576:	9a e2       	ldi	r25, 0x2A	; 42
    5578:	0e 94 17 14 	call	0x282e	; 0x282e <UART_callback_Trans_Int>
	UART_Transmit_Int_Enable();
    557c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <UART_Transmit_Int_Enable>

}
    5580:	0f 90       	pop	r0
    5582:	0f 90       	pop	r0
    5584:	cf 91       	pop	r28
    5586:	df 91       	pop	r29
    5588:	08 95       	ret

0000558a <Send_Int_Function>:

static void Send_Int_Function(void)
{
    558a:	df 93       	push	r29
    558c:	cf 93       	push	r28
    558e:	cd b7       	in	r28, 0x3d	; 61
    5590:	de b7       	in	r29, 0x3e	; 62
static uint8 i=1;
	if(Asynch_Send_Str[i] !='\0')
    5592:	20 91 de 02 	lds	r18, 0x02DE
    5596:	30 91 df 02 	lds	r19, 0x02DF
    559a:	80 91 d1 02 	lds	r24, 0x02D1
    559e:	88 2f       	mov	r24, r24
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	f9 01       	movw	r30, r18
    55a4:	e8 0f       	add	r30, r24
    55a6:	f9 1f       	adc	r31, r25
    55a8:	80 81       	ld	r24, Z
    55aa:	88 23       	and	r24, r24
    55ac:	a1 f0       	breq	.+40     	; 0x55d6 <Send_Int_Function+0x4c>
	{
		UART_SendByte(Asynch_Send_Str[i]);
    55ae:	20 91 de 02 	lds	r18, 0x02DE
    55b2:	30 91 df 02 	lds	r19, 0x02DF
    55b6:	80 91 d1 02 	lds	r24, 0x02D1
    55ba:	88 2f       	mov	r24, r24
    55bc:	90 e0       	ldi	r25, 0x00	; 0
    55be:	f9 01       	movw	r30, r18
    55c0:	e8 0f       	add	r30, r24
    55c2:	f9 1f       	adc	r31, r25
    55c4:	80 81       	ld	r24, Z
    55c6:	0e 94 8f 14 	call	0x291e	; 0x291e <UART_SendByte>
		i++;
    55ca:	80 91 d1 02 	lds	r24, 0x02D1
    55ce:	8f 5f       	subi	r24, 0xFF	; 255
    55d0:	80 93 d1 02 	sts	0x02D1, r24
    55d4:	05 c0       	rjmp	.+10     	; 0x55e0 <Send_Int_Function+0x56>
	}
	else
		{
		i=1;
    55d6:	81 e0       	ldi	r24, 0x01	; 1
    55d8:	80 93 d1 02 	sts	0x02D1, r24
		UART_Transmit_Int_Disable();
    55dc:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_Transmit_Int_Disable>
		}
}
    55e0:	cf 91       	pop	r28
    55e2:	df 91       	pop	r29
    55e4:	08 95       	ret

000055e6 <UART_SendString_Asynch_NocodeInInt>:
								////////////////////////////////////


void UART_SendString_Asynch_NocodeInInt(uint8 *Str)
{
    55e6:	df 93       	push	r29
    55e8:	cf 93       	push	r28
    55ea:	00 d0       	rcall	.+0      	; 0x55ec <UART_SendString_Asynch_NocodeInInt+0x6>
    55ec:	cd b7       	in	r28, 0x3d	; 61
    55ee:	de b7       	in	r29, 0x3e	; 62
    55f0:	9a 83       	std	Y+2, r25	; 0x02
    55f2:	89 83       	std	Y+1, r24	; 0x01
	//feh 7aga henna lazm ykon el flag udre
//lesa msh mafhoma
	UART_callback_Trans_Int(Send_Int_Function2);
    55f4:	88 e2       	ldi	r24, 0x28	; 40
    55f6:	9b e2       	ldi	r25, 0x2B	; 43
    55f8:	0e 94 17 14 	call	0x282e	; 0x282e <UART_callback_Trans_Int>
    UART_Transmit_Int_Enable();
    55fc:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <UART_Transmit_Int_Enable>
	static	uint8 i=0;
	if(flag)
    5600:	80 91 d0 02 	lds	r24, 0x02D0
    5604:	88 23       	and	r24, r24
    5606:	f9 f0       	breq	.+62     	; 0x5646 <UART_SendString_Asynch_NocodeInInt+0x60>
		{
		if(Str[i])
    5608:	80 91 dc 02 	lds	r24, 0x02DC
    560c:	28 2f       	mov	r18, r24
    560e:	30 e0       	ldi	r19, 0x00	; 0
    5610:	89 81       	ldd	r24, Y+1	; 0x01
    5612:	9a 81       	ldd	r25, Y+2	; 0x02
    5614:	fc 01       	movw	r30, r24
    5616:	e2 0f       	add	r30, r18
    5618:	f3 1f       	adc	r31, r19
    561a:	80 81       	ld	r24, Z
    561c:	88 23       	and	r24, r24
    561e:	99 f0       	breq	.+38     	; 0x5646 <UART_SendString_Asynch_NocodeInInt+0x60>
			{
			UART_SendByte(Str[i]);
    5620:	80 91 dc 02 	lds	r24, 0x02DC
    5624:	28 2f       	mov	r18, r24
    5626:	30 e0       	ldi	r19, 0x00	; 0
    5628:	89 81       	ldd	r24, Y+1	; 0x01
    562a:	9a 81       	ldd	r25, Y+2	; 0x02
    562c:	fc 01       	movw	r30, r24
    562e:	e2 0f       	add	r30, r18
    5630:	f3 1f       	adc	r31, r19
    5632:	80 81       	ld	r24, Z
    5634:	0e 94 8f 14 	call	0x291e	; 0x291e <UART_SendByte>
			i++;
    5638:	80 91 dc 02 	lds	r24, 0x02DC
    563c:	8f 5f       	subi	r24, 0xFF	; 255
    563e:	80 93 dc 02 	sts	0x02DC, r24
			flag=0;
    5642:	10 92 d0 02 	sts	0x02D0, r1
			}

		}

}
    5646:	0f 90       	pop	r0
    5648:	0f 90       	pop	r0
    564a:	cf 91       	pop	r28
    564c:	df 91       	pop	r29
    564e:	08 95       	ret

00005650 <Send_Int_Function2>:
static void Send_Int_Function2(void)
{
    5650:	df 93       	push	r29
    5652:	cf 93       	push	r28
    5654:	cd b7       	in	r28, 0x3d	; 61
    5656:	de b7       	in	r29, 0x3e	; 62
	flag=1;
    5658:	81 e0       	ldi	r24, 0x01	; 1
    565a:	80 93 d0 02 	sts	0x02D0, r24
}
    565e:	cf 91       	pop	r28
    5660:	df 91       	pop	r29
    5662:	08 95       	ret

00005664 <UART_ReceiveString>:


/***************************Receive Functions*****************************/

void UART_ReceiveString(uint8 *Str)       //receive entil  '\0'
{
    5664:	0f 93       	push	r16
    5666:	1f 93       	push	r17
    5668:	df 93       	push	r29
    566a:	cf 93       	push	r28
    566c:	00 d0       	rcall	.+0      	; 0x566e <UART_ReceiveString+0xa>
    566e:	0f 92       	push	r0
    5670:	cd b7       	in	r28, 0x3d	; 61
    5672:	de b7       	in	r29, 0x3e	; 62
    5674:	9b 83       	std	Y+3, r25	; 0x03
    5676:	8a 83       	std	Y+2, r24	; 0x02
	//hena hwa ba3t el array ezay mn elmain mesh elmafrod yb3at elsize ???
	uint8 i = 0;
    5678:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_RecieveData();
    567a:	89 81       	ldd	r24, Y+1	; 0x01
    567c:	28 2f       	mov	r18, r24
    567e:	30 e0       	ldi	r19, 0x00	; 0
    5680:	8a 81       	ldd	r24, Y+2	; 0x02
    5682:	9b 81       	ldd	r25, Y+3	; 0x03
    5684:	8c 01       	movw	r16, r24
    5686:	02 0f       	add	r16, r18
    5688:	13 1f       	adc	r17, r19
    568a:	0e 94 c6 14 	call	0x298c	; 0x298c <UART_RecieveData>
    568e:	f8 01       	movw	r30, r16
    5690:	80 83       	st	Z, r24
    5692:	0f c0       	rjmp	.+30     	; 0x56b2 <UART_ReceiveString+0x4e>
	while(Str[i] != '\0')
	{
		i++;
    5694:	89 81       	ldd	r24, Y+1	; 0x01
    5696:	8f 5f       	subi	r24, 0xFF	; 255
    5698:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_RecieveData();
    569a:	89 81       	ldd	r24, Y+1	; 0x01
    569c:	28 2f       	mov	r18, r24
    569e:	30 e0       	ldi	r19, 0x00	; 0
    56a0:	8a 81       	ldd	r24, Y+2	; 0x02
    56a2:	9b 81       	ldd	r25, Y+3	; 0x03
    56a4:	8c 01       	movw	r16, r24
    56a6:	02 0f       	add	r16, r18
    56a8:	13 1f       	adc	r17, r19
    56aa:	0e 94 c6 14 	call	0x298c	; 0x298c <UART_RecieveData>
    56ae:	f8 01       	movw	r30, r16
    56b0:	80 83       	st	Z, r24
void UART_ReceiveString(uint8 *Str)       //receive entil  '\0'
{
	//hena hwa ba3t el array ezay mn elmain mesh elmafrod yb3at elsize ???
	uint8 i = 0;
	Str[i] = UART_RecieveData();
	while(Str[i] != '\0')
    56b2:	89 81       	ldd	r24, Y+1	; 0x01
    56b4:	28 2f       	mov	r18, r24
    56b6:	30 e0       	ldi	r19, 0x00	; 0
    56b8:	8a 81       	ldd	r24, Y+2	; 0x02
    56ba:	9b 81       	ldd	r25, Y+3	; 0x03
    56bc:	fc 01       	movw	r30, r24
    56be:	e2 0f       	add	r30, r18
    56c0:	f3 1f       	adc	r31, r19
    56c2:	80 81       	ld	r24, Z
    56c4:	88 23       	and	r24, r24
    56c6:	31 f7       	brne	.-52     	; 0x5694 <UART_ReceiveString+0x30>
	{
		i++;
		Str[i] = UART_RecieveData();
	}
	Str[i] = '\0';
    56c8:	89 81       	ldd	r24, Y+1	; 0x01
    56ca:	28 2f       	mov	r18, r24
    56cc:	30 e0       	ldi	r19, 0x00	; 0
    56ce:	8a 81       	ldd	r24, Y+2	; 0x02
    56d0:	9b 81       	ldd	r25, Y+3	; 0x03
    56d2:	fc 01       	movw	r30, r24
    56d4:	e2 0f       	add	r30, r18
    56d6:	f3 1f       	adc	r31, r19
    56d8:	10 82       	st	Z, r1
}
    56da:	0f 90       	pop	r0
    56dc:	0f 90       	pop	r0
    56de:	0f 90       	pop	r0
    56e0:	cf 91       	pop	r28
    56e2:	df 91       	pop	r29
    56e4:	1f 91       	pop	r17
    56e6:	0f 91       	pop	r16
    56e8:	08 95       	ret

000056ea <UART_ReceiveString_NoBlock>:
								////////////////////////////////////
////////////////////////////////////
// this function block cpu it's just to try "UART_RecieveData_NoBlock"  receive entil  '\0'
void UART_ReceiveString_NoBlock(uint8 *Str)
{
    56ea:	df 93       	push	r29
    56ec:	cf 93       	push	r28
    56ee:	00 d0       	rcall	.+0      	; 0x56f0 <UART_ReceiveString_NoBlock+0x6>
    56f0:	00 d0       	rcall	.+0      	; 0x56f2 <UART_ReceiveString_NoBlock+0x8>
    56f2:	0f 92       	push	r0
    56f4:	cd b7       	in	r28, 0x3d	; 61
    56f6:	de b7       	in	r29, 0x3e	; 62
    56f8:	9d 83       	std	Y+5, r25	; 0x05
    56fa:	8c 83       	std	Y+4, r24	; 0x04
uint8 i=0,data,statue;
    56fc:	1a 82       	std	Y+2, r1	; 0x02
do
{
//law hwa estlm f3alen el status hatkon = 1
statue=UART_RecieveData_NoBlock(&data);
    56fe:	ce 01       	movw	r24, r28
    5700:	03 96       	adiw	r24, 0x03	; 3
    5702:	0e 94 da 14 	call	0x29b4	; 0x29b4 <UART_RecieveData_NoBlock>
    5706:	89 83       	std	Y+1, r24	; 0x01
if(statue)
    5708:	89 81       	ldd	r24, Y+1	; 0x01
    570a:	88 23       	and	r24, r24
    570c:	69 f0       	breq	.+26     	; 0x5728 <UART_ReceiveString_NoBlock+0x3e>
{
//we s3atha hakhod eldata a7otha fe str
Str[i]=data;
    570e:	8a 81       	ldd	r24, Y+2	; 0x02
    5710:	28 2f       	mov	r18, r24
    5712:	30 e0       	ldi	r19, 0x00	; 0
    5714:	8c 81       	ldd	r24, Y+4	; 0x04
    5716:	9d 81       	ldd	r25, Y+5	; 0x05
    5718:	fc 01       	movw	r30, r24
    571a:	e2 0f       	add	r30, r18
    571c:	f3 1f       	adc	r31, r19
    571e:	8b 81       	ldd	r24, Y+3	; 0x03
    5720:	80 83       	st	Z, r24
i++;
    5722:	8a 81       	ldd	r24, Y+2	; 0x02
    5724:	8f 5f       	subi	r24, 0xFF	; 255
    5726:	8a 83       	std	Y+2, r24	; 0x02
}
}while(Str[i-1]!='\0');
    5728:	8a 81       	ldd	r24, Y+2	; 0x02
    572a:	88 2f       	mov	r24, r24
    572c:	90 e0       	ldi	r25, 0x00	; 0
    572e:	9c 01       	movw	r18, r24
    5730:	21 50       	subi	r18, 0x01	; 1
    5732:	30 40       	sbci	r19, 0x00	; 0
    5734:	8c 81       	ldd	r24, Y+4	; 0x04
    5736:	9d 81       	ldd	r25, Y+5	; 0x05
    5738:	fc 01       	movw	r30, r24
    573a:	e2 0f       	add	r30, r18
    573c:	f3 1f       	adc	r31, r19
    573e:	80 81       	ld	r24, Z
    5740:	88 23       	and	r24, r24
    5742:	e9 f6       	brne	.-70     	; 0x56fe <UART_ReceiveString_NoBlock+0x14>
Str[i-1]='\0';
    5744:	8a 81       	ldd	r24, Y+2	; 0x02
    5746:	88 2f       	mov	r24, r24
    5748:	90 e0       	ldi	r25, 0x00	; 0
    574a:	9c 01       	movw	r18, r24
    574c:	21 50       	subi	r18, 0x01	; 1
    574e:	30 40       	sbci	r19, 0x00	; 0
    5750:	8c 81       	ldd	r24, Y+4	; 0x04
    5752:	9d 81       	ldd	r25, Y+5	; 0x05
    5754:	fc 01       	movw	r30, r24
    5756:	e2 0f       	add	r30, r18
    5758:	f3 1f       	adc	r31, r19
    575a:	10 82       	st	Z, r1
}
    575c:	0f 90       	pop	r0
    575e:	0f 90       	pop	r0
    5760:	0f 90       	pop	r0
    5762:	0f 90       	pop	r0
    5764:	0f 90       	pop	r0
    5766:	cf 91       	pop	r28
    5768:	df 91       	pop	r29
    576a:	08 95       	ret

0000576c <UART_ReceiveString_Asynch>:


////////////////////////////////////

void UART_ReceiveString_Asynch(uint8 *Str)
{
    576c:	df 93       	push	r29
    576e:	cf 93       	push	r28
    5770:	00 d0       	rcall	.+0      	; 0x5772 <UART_ReceiveString_Asynch+0x6>
    5772:	cd b7       	in	r28, 0x3d	; 61
    5774:	de b7       	in	r29, 0x3e	; 62
    5776:	9a 83       	std	Y+2, r25	; 0x02
    5778:	89 83       	std	Y+1, r24	; 0x01
Asynch_receive_str=Str;
    577a:	89 81       	ldd	r24, Y+1	; 0x01
    577c:	9a 81       	ldd	r25, Y+2	; 0x02
    577e:	90 93 e1 02 	sts	0x02E1, r25
    5782:	80 93 e0 02 	sts	0x02E0, r24
UART_Receiver_Int_Enable();
    5786:	0e 94 cd 13 	call	0x279a	; 0x279a <UART_Receiver_Int_Enable>
UART_callback_Rece_Int(Receive_Int_Function);
    578a:	8e ec       	ldi	r24, 0xCE	; 206
    578c:	9b e2       	ldi	r25, 0x2B	; 43
    578e:	0e 94 05 14 	call	0x280a	; 0x280a <UART_callback_Rece_Int>

}
    5792:	0f 90       	pop	r0
    5794:	0f 90       	pop	r0
    5796:	cf 91       	pop	r28
    5798:	df 91       	pop	r29
    579a:	08 95       	ret

0000579c <Receive_Int_Function>:

static void Receive_Int_Function(void)
{
    579c:	0f 93       	push	r16
    579e:	1f 93       	push	r17
    57a0:	df 93       	push	r29
    57a2:	cf 93       	push	r28
    57a4:	cd b7       	in	r28, 0x3d	; 61
    57a6:	de b7       	in	r29, 0x3e	; 62
static uint8 i=0;
Asynch_receive_str[i]=UART_RecieveByte();
    57a8:	20 91 e0 02 	lds	r18, 0x02E0
    57ac:	30 91 e1 02 	lds	r19, 0x02E1
    57b0:	80 91 dd 02 	lds	r24, 0x02DD
    57b4:	88 2f       	mov	r24, r24
    57b6:	90 e0       	ldi	r25, 0x00	; 0
    57b8:	89 01       	movw	r16, r18
    57ba:	08 0f       	add	r16, r24
    57bc:	19 1f       	adc	r17, r25
    57be:	0e 94 9d 14 	call	0x293a	; 0x293a <UART_RecieveByte>
    57c2:	f8 01       	movw	r30, r16
    57c4:	80 83       	st	Z, r24
i++;
    57c6:	80 91 dd 02 	lds	r24, 0x02DD
    57ca:	8f 5f       	subi	r24, 0xFF	; 255
    57cc:	80 93 dd 02 	sts	0x02DD, r24

}
    57d0:	cf 91       	pop	r28
    57d2:	df 91       	pop	r29
    57d4:	1f 91       	pop	r17
    57d6:	0f 91       	pop	r16
    57d8:	08 95       	ret

000057da <SendString_MYProtocol>:



void SendString_MYProtocol(uint8*str)
{
    57da:	df 93       	push	r29
    57dc:	cf 93       	push	r28
    57de:	00 d0       	rcall	.+0      	; 0x57e0 <SendString_MYProtocol+0x6>
    57e0:	00 d0       	rcall	.+0      	; 0x57e2 <SendString_MYProtocol+0x8>
    57e2:	00 d0       	rcall	.+0      	; 0x57e4 <SendString_MYProtocol+0xa>
    57e4:	cd b7       	in	r28, 0x3d	; 61
    57e6:	de b7       	in	r29, 0x3e	; 62
    57e8:	9e 83       	std	Y+6, r25	; 0x06
    57ea:	8d 83       	std	Y+5, r24	; 0x05
uint8 i=0,l=0;
    57ec:	1c 82       	std	Y+4, r1	; 0x04
    57ee:	1b 82       	std	Y+3, r1	; 0x03
uint16 sum=0;
    57f0:	1a 82       	std	Y+2, r1	; 0x02
    57f2:	19 82       	std	Y+1, r1	; 0x01
    57f4:	14 c0       	rjmp	.+40     	; 0x581e <SendString_MYProtocol+0x44>
while(str[l])
{

sum+=str[l];
    57f6:	8b 81       	ldd	r24, Y+3	; 0x03
    57f8:	28 2f       	mov	r18, r24
    57fa:	30 e0       	ldi	r19, 0x00	; 0
    57fc:	8d 81       	ldd	r24, Y+5	; 0x05
    57fe:	9e 81       	ldd	r25, Y+6	; 0x06
    5800:	fc 01       	movw	r30, r24
    5802:	e2 0f       	add	r30, r18
    5804:	f3 1f       	adc	r31, r19
    5806:	80 81       	ld	r24, Z
    5808:	28 2f       	mov	r18, r24
    580a:	30 e0       	ldi	r19, 0x00	; 0
    580c:	89 81       	ldd	r24, Y+1	; 0x01
    580e:	9a 81       	ldd	r25, Y+2	; 0x02
    5810:	82 0f       	add	r24, r18
    5812:	93 1f       	adc	r25, r19
    5814:	9a 83       	std	Y+2, r25	; 0x02
    5816:	89 83       	std	Y+1, r24	; 0x01

l++;
    5818:	8b 81       	ldd	r24, Y+3	; 0x03
    581a:	8f 5f       	subi	r24, 0xFF	; 255
    581c:	8b 83       	std	Y+3, r24	; 0x03

void SendString_MYProtocol(uint8*str)
{
uint8 i=0,l=0;
uint16 sum=0;
while(str[l])
    581e:	8b 81       	ldd	r24, Y+3	; 0x03
    5820:	28 2f       	mov	r18, r24
    5822:	30 e0       	ldi	r19, 0x00	; 0
    5824:	8d 81       	ldd	r24, Y+5	; 0x05
    5826:	9e 81       	ldd	r25, Y+6	; 0x06
    5828:	fc 01       	movw	r30, r24
    582a:	e2 0f       	add	r30, r18
    582c:	f3 1f       	adc	r31, r19
    582e:	80 81       	ld	r24, Z
    5830:	88 23       	and	r24, r24
    5832:	09 f7       	brne	.-62     	; 0x57f6 <SendString_MYProtocol+0x1c>

sum+=str[l];

l++;
}
UART_SendData(l);
    5834:	8b 81       	ldd	r24, Y+3	; 0x03
    5836:	0e 94 ac 14 	call	0x2958	; 0x2958 <UART_SendData>
for(i=0;i<l;i++)
    583a:	1c 82       	std	Y+4, r1	; 0x04
    583c:	0e c0       	rjmp	.+28     	; 0x585a <SendString_MYProtocol+0x80>
{
UART_SendData(str[i]);
    583e:	8c 81       	ldd	r24, Y+4	; 0x04
    5840:	28 2f       	mov	r18, r24
    5842:	30 e0       	ldi	r19, 0x00	; 0
    5844:	8d 81       	ldd	r24, Y+5	; 0x05
    5846:	9e 81       	ldd	r25, Y+6	; 0x06
    5848:	fc 01       	movw	r30, r24
    584a:	e2 0f       	add	r30, r18
    584c:	f3 1f       	adc	r31, r19
    584e:	80 81       	ld	r24, Z
    5850:	0e 94 ac 14 	call	0x2958	; 0x2958 <UART_SendData>
sum+=str[l];

l++;
}
UART_SendData(l);
for(i=0;i<l;i++)
    5854:	8c 81       	ldd	r24, Y+4	; 0x04
    5856:	8f 5f       	subi	r24, 0xFF	; 255
    5858:	8c 83       	std	Y+4, r24	; 0x04
    585a:	9c 81       	ldd	r25, Y+4	; 0x04
    585c:	8b 81       	ldd	r24, Y+3	; 0x03
    585e:	98 17       	cp	r25, r24
    5860:	70 f3       	brcs	.-36     	; 0x583e <SendString_MYProtocol+0x64>
{
UART_SendData(str[i]);
}
UART_SendData((uint8)sum);
    5862:	89 81       	ldd	r24, Y+1	; 0x01
    5864:	0e 94 ac 14 	call	0x2958	; 0x2958 <UART_SendData>
UART_SendData((uint8)(sum>>8));
    5868:	89 81       	ldd	r24, Y+1	; 0x01
    586a:	9a 81       	ldd	r25, Y+2	; 0x02
    586c:	89 2f       	mov	r24, r25
    586e:	99 27       	eor	r25, r25
    5870:	0e 94 ac 14 	call	0x2958	; 0x2958 <UART_SendData>


}
    5874:	26 96       	adiw	r28, 0x06	; 6
    5876:	0f b6       	in	r0, 0x3f	; 63
    5878:	f8 94       	cli
    587a:	de bf       	out	0x3e, r29	; 62
    587c:	0f be       	out	0x3f, r0	; 63
    587e:	cd bf       	out	0x3d, r28	; 61
    5880:	cf 91       	pop	r28
    5882:	df 91       	pop	r29
    5884:	08 95       	ret

00005886 <ReceiveString_MyProtocol>:
uint8 ReceiveString_MyProtocol(uint8*str)
{
    5886:	af 92       	push	r10
    5888:	bf 92       	push	r11
    588a:	cf 92       	push	r12
    588c:	df 92       	push	r13
    588e:	ef 92       	push	r14
    5890:	ff 92       	push	r15
    5892:	0f 93       	push	r16
    5894:	1f 93       	push	r17
    5896:	df 93       	push	r29
    5898:	cf 93       	push	r28
    589a:	cd b7       	in	r28, 0x3d	; 61
    589c:	de b7       	in	r29, 0x3e	; 62
    589e:	2b 97       	sbiw	r28, 0x0b	; 11
    58a0:	0f b6       	in	r0, 0x3f	; 63
    58a2:	f8 94       	cli
    58a4:	de bf       	out	0x3e, r29	; 62
    58a6:	0f be       	out	0x3f, r0	; 63
    58a8:	cd bf       	out	0x3d, r28	; 61
    58aa:	9a 87       	std	Y+10, r25	; 0x0a
    58ac:	89 87       	std	Y+9, r24	; 0x09
uint8 i=0,l=0,firstbyte=0,secondbyte=0;
    58ae:	18 86       	std	Y+8, r1	; 0x08
    58b0:	1f 82       	std	Y+7, r1	; 0x07
    58b2:	1e 82       	std	Y+6, r1	; 0x06
    58b4:	1d 82       	std	Y+5, r1	; 0x05
//uint8 str[10];
uint16 sum_send=0,sum_calc=0;
    58b6:	1c 82       	std	Y+4, r1	; 0x04
    58b8:	1b 82       	std	Y+3, r1	; 0x03
    58ba:	1a 82       	std	Y+2, r1	; 0x02
    58bc:	19 82       	std	Y+1, r1	; 0x01
l=UART_RecieveData();
    58be:	0e 94 c6 14 	call	0x298c	; 0x298c <UART_RecieveData>
    58c2:	8f 83       	std	Y+7, r24	; 0x07
for(i=0;i<l;i++)
    58c4:	18 86       	std	Y+8, r1	; 0x08
    58c6:	20 c0       	rjmp	.+64     	; 0x5908 <ReceiveString_MyProtocol+0x82>
{
str[i]=UART_RecieveData();
    58c8:	88 85       	ldd	r24, Y+8	; 0x08
    58ca:	28 2f       	mov	r18, r24
    58cc:	30 e0       	ldi	r19, 0x00	; 0
    58ce:	89 85       	ldd	r24, Y+9	; 0x09
    58d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    58d2:	8c 01       	movw	r16, r24
    58d4:	02 0f       	add	r16, r18
    58d6:	13 1f       	adc	r17, r19
    58d8:	0e 94 c6 14 	call	0x298c	; 0x298c <UART_RecieveData>
    58dc:	f8 01       	movw	r30, r16
    58de:	80 83       	st	Z, r24
sum_calc+=str[i];
    58e0:	88 85       	ldd	r24, Y+8	; 0x08
    58e2:	28 2f       	mov	r18, r24
    58e4:	30 e0       	ldi	r19, 0x00	; 0
    58e6:	89 85       	ldd	r24, Y+9	; 0x09
    58e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    58ea:	fc 01       	movw	r30, r24
    58ec:	e2 0f       	add	r30, r18
    58ee:	f3 1f       	adc	r31, r19
    58f0:	80 81       	ld	r24, Z
    58f2:	28 2f       	mov	r18, r24
    58f4:	30 e0       	ldi	r19, 0x00	; 0
    58f6:	89 81       	ldd	r24, Y+1	; 0x01
    58f8:	9a 81       	ldd	r25, Y+2	; 0x02
    58fa:	82 0f       	add	r24, r18
    58fc:	93 1f       	adc	r25, r19
    58fe:	9a 83       	std	Y+2, r25	; 0x02
    5900:	89 83       	std	Y+1, r24	; 0x01
{
uint8 i=0,l=0,firstbyte=0,secondbyte=0;
//uint8 str[10];
uint16 sum_send=0,sum_calc=0;
l=UART_RecieveData();
for(i=0;i<l;i++)
    5902:	88 85       	ldd	r24, Y+8	; 0x08
    5904:	8f 5f       	subi	r24, 0xFF	; 255
    5906:	88 87       	std	Y+8, r24	; 0x08
    5908:	98 85       	ldd	r25, Y+8	; 0x08
    590a:	8f 81       	ldd	r24, Y+7	; 0x07
    590c:	98 17       	cp	r25, r24
    590e:	e0 f2       	brcs	.-72     	; 0x58c8 <ReceiveString_MyProtocol+0x42>
{
str[i]=UART_RecieveData();
sum_calc+=str[i];
}
firstbyte=UART_RecieveData();
    5910:	0e 94 c6 14 	call	0x298c	; 0x298c <UART_RecieveData>
    5914:	8e 83       	std	Y+6, r24	; 0x06
secondbyte=UART_RecieveData();
    5916:	0e 94 c6 14 	call	0x298c	; 0x298c <UART_RecieveData>
    591a:	8d 83       	std	Y+5, r24	; 0x05
sum_send=firstbyte|(secondbyte<<8);
    591c:	8e 81       	ldd	r24, Y+6	; 0x06
    591e:	28 2f       	mov	r18, r24
    5920:	30 e0       	ldi	r19, 0x00	; 0
    5922:	8d 81       	ldd	r24, Y+5	; 0x05
    5924:	88 2f       	mov	r24, r24
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	98 2f       	mov	r25, r24
    592a:	88 27       	eor	r24, r24
    592c:	82 2b       	or	r24, r18
    592e:	93 2b       	or	r25, r19
    5930:	9c 83       	std	Y+4, r25	; 0x04
    5932:	8b 83       	std	Y+3, r24	; 0x03

LCD_vidWriteUnSignedInteger((uint64)l);
    5934:	8f 81       	ldd	r24, Y+7	; 0x07
    5936:	a8 2e       	mov	r10, r24
    5938:	bb 24       	eor	r11, r11
    593a:	cc 24       	eor	r12, r12
    593c:	dd 24       	eor	r13, r13
    593e:	ee 24       	eor	r14, r14
    5940:	ff 24       	eor	r15, r15
    5942:	87 01       	movw	r16, r14
    5944:	2a 2d       	mov	r18, r10
    5946:	3b 2d       	mov	r19, r11
    5948:	4c 2d       	mov	r20, r12
    594a:	5d 2d       	mov	r21, r13
    594c:	6e 2d       	mov	r22, r14
    594e:	7f 2d       	mov	r23, r15
    5950:	80 2f       	mov	r24, r16
    5952:	91 2f       	mov	r25, r17
    5954:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <LCD_vidWriteUnSignedInteger>
LCD_vidWriteCharacter('-');
    5958:	8d e2       	ldi	r24, 0x2D	; 45
    595a:	0e 94 ac 30 	call	0x6158	; 0x6158 <LCD_vidWriteCharacter>
LCD_vidWriteUnSignedInteger((uint64)sum_send);
    595e:	8b 81       	ldd	r24, Y+3	; 0x03
    5960:	9c 81       	ldd	r25, Y+4	; 0x04
    5962:	5c 01       	movw	r10, r24
    5964:	cc 24       	eor	r12, r12
    5966:	dd 24       	eor	r13, r13
    5968:	ee 24       	eor	r14, r14
    596a:	ff 24       	eor	r15, r15
    596c:	87 01       	movw	r16, r14
    596e:	2a 2d       	mov	r18, r10
    5970:	3b 2d       	mov	r19, r11
    5972:	4c 2d       	mov	r20, r12
    5974:	5d 2d       	mov	r21, r13
    5976:	6e 2d       	mov	r22, r14
    5978:	7f 2d       	mov	r23, r15
    597a:	80 2f       	mov	r24, r16
    597c:	91 2f       	mov	r25, r17
    597e:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <LCD_vidWriteUnSignedInteger>
LCD_vidWriteCharacter('-');
    5982:	8d e2       	ldi	r24, 0x2D	; 45
    5984:	0e 94 ac 30 	call	0x6158	; 0x6158 <LCD_vidWriteCharacter>

if(sum_calc==sum_send)
    5988:	29 81       	ldd	r18, Y+1	; 0x01
    598a:	3a 81       	ldd	r19, Y+2	; 0x02
    598c:	8b 81       	ldd	r24, Y+3	; 0x03
    598e:	9c 81       	ldd	r25, Y+4	; 0x04
    5990:	28 17       	cp	r18, r24
    5992:	39 07       	cpc	r19, r25
    5994:	19 f4       	brne	.+6      	; 0x599c <ReceiveString_MyProtocol+0x116>
{
return 1;
    5996:	f1 e0       	ldi	r31, 0x01	; 1
    5998:	fb 87       	std	Y+11, r31	; 0x0b
    599a:	01 c0       	rjmp	.+2      	; 0x599e <ReceiveString_MyProtocol+0x118>
}
else
{
return 0;
    599c:	1b 86       	std	Y+11, r1	; 0x0b
    599e:	8b 85       	ldd	r24, Y+11	; 0x0b
}

}
    59a0:	2b 96       	adiw	r28, 0x0b	; 11
    59a2:	0f b6       	in	r0, 0x3f	; 63
    59a4:	f8 94       	cli
    59a6:	de bf       	out	0x3e, r29	; 62
    59a8:	0f be       	out	0x3f, r0	; 63
    59aa:	cd bf       	out	0x3d, r28	; 61
    59ac:	cf 91       	pop	r28
    59ae:	df 91       	pop	r29
    59b0:	1f 91       	pop	r17
    59b2:	0f 91       	pop	r16
    59b4:	ff 90       	pop	r15
    59b6:	ef 90       	pop	r14
    59b8:	df 90       	pop	r13
    59ba:	cf 90       	pop	r12
    59bc:	bf 90       	pop	r11
    59be:	af 90       	pop	r10
    59c0:	08 95       	ret

000059c2 <LCD_vidDirections>:
#include"LCD_V2.h"
void LCD_vidDirections(void)
{
    59c2:	df 93       	push	r29
    59c4:	cf 93       	push	r28
    59c6:	cd b7       	in	r28, 0x3d	; 61
    59c8:	de b7       	in	r29, 0x3e	; 62
//SET LCD_PORT AS OUTPUT FOR DATA OF LCD
DIO_void_Set_Port_Dirction(LCD_PORT,0XFF);
    59ca:	82 e0       	ldi	r24, 0x02	; 2
    59cc:	6f ef       	ldi	r22, 0xFF	; 255
    59ce:	0e 94 3d 23 	call	0x467a	; 0x467a <DIO_void_Set_Port_Dirction>

//SET  AS O/P FOR RS AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,RS,OUTPUT);
    59d2:	81 e0       	ldi	r24, 0x01	; 1
    59d4:	65 e0       	ldi	r22, 0x05	; 5
    59d6:	41 e0       	ldi	r20, 0x01	; 1
    59d8:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>

//SET  AS O/P FOR R/W AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,RW,OUTPUT);
    59dc:	81 e0       	ldi	r24, 0x01	; 1
    59de:	66 e0       	ldi	r22, 0x06	; 6
    59e0:	41 e0       	ldi	r20, 0x01	; 1
    59e2:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>

//SET AS O/P FOR E AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,E,OUTPUT);
    59e6:	81 e0       	ldi	r24, 0x01	; 1
    59e8:	67 e0       	ldi	r22, 0x07	; 7
    59ea:	41 e0       	ldi	r20, 0x01	; 1
    59ec:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>
}
    59f0:	cf 91       	pop	r28
    59f2:	df 91       	pop	r29
    59f4:	08 95       	ret

000059f6 <LCD_vidDirections4>:
//..................................................................................

void LCD_vidDirections4(void)
{
    59f6:	df 93       	push	r29
    59f8:	cf 93       	push	r28
    59fa:	cd b7       	in	r28, 0x3d	; 61
    59fc:	de b7       	in	r29, 0x3e	; 62
//SET PORTD 4,5,6,7 AS OUTPUT FOR DATA OF LCD
DIO_void_Set_Pin_Dirction( LCD_PORT, Fourbit_4,OUTPUT);
    59fe:	82 e0       	ldi	r24, 0x02	; 2
    5a00:	64 e0       	ldi	r22, 0x04	; 4
    5a02:	41 e0       	ldi	r20, 0x01	; 1
    5a04:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>
DIO_void_Set_Pin_Dirction( LCD_PORT, Fourbit_5,OUTPUT);
    5a08:	82 e0       	ldi	r24, 0x02	; 2
    5a0a:	65 e0       	ldi	r22, 0x05	; 5
    5a0c:	41 e0       	ldi	r20, 0x01	; 1
    5a0e:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>
DIO_void_Set_Pin_Dirction( LCD_PORT, Fourbit_6,OUTPUT);
    5a12:	82 e0       	ldi	r24, 0x02	; 2
    5a14:	66 e0       	ldi	r22, 0x06	; 6
    5a16:	41 e0       	ldi	r20, 0x01	; 1
    5a18:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>
DIO_void_Set_Pin_Dirction( LCD_PORT, Fourbit_7,OUTPUT);
    5a1c:	82 e0       	ldi	r24, 0x02	; 2
    5a1e:	67 e0       	ldi	r22, 0x07	; 7
    5a20:	41 e0       	ldi	r20, 0x01	; 1
    5a22:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>
//SET PIN 0 AS O/P FOR RS AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,RS,OUTPUT);
    5a26:	81 e0       	ldi	r24, 0x01	; 1
    5a28:	65 e0       	ldi	r22, 0x05	; 5
    5a2a:	41 e0       	ldi	r20, 0x01	; 1
    5a2c:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>
//SET PIN 1 AS O/P FOR R/W AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,RW,OUTPUT);
    5a30:	81 e0       	ldi	r24, 0x01	; 1
    5a32:	66 e0       	ldi	r22, 0x06	; 6
    5a34:	41 e0       	ldi	r20, 0x01	; 1
    5a36:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>

//SET PIN 2 AS O/P FOR E AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,E,OUTPUT);
    5a3a:	81 e0       	ldi	r24, 0x01	; 1
    5a3c:	67 e0       	ldi	r22, 0x07	; 7
    5a3e:	41 e0       	ldi	r20, 0x01	; 1
    5a40:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>
}
    5a44:	cf 91       	pop	r28
    5a46:	df 91       	pop	r29
    5a48:	08 95       	ret

00005a4a <LCD_vidInit>:
//..............................................................
void LCD_vidInit(void)
{
    5a4a:	0f 93       	push	r16
    5a4c:	1f 93       	push	r17
    5a4e:	df 93       	push	r29
    5a50:	cf 93       	push	r28
    5a52:	cd b7       	in	r28, 0x3d	; 61
    5a54:	de b7       	in	r29, 0x3e	; 62
    5a56:	c6 54       	subi	r28, 0x46	; 70
    5a58:	d0 40       	sbci	r29, 0x00	; 0
    5a5a:	0f b6       	in	r0, 0x3f	; 63
    5a5c:	f8 94       	cli
    5a5e:	de bf       	out	0x3e, r29	; 62
    5a60:	0f be       	out	0x3f, r0	; 63
    5a62:	cd bf       	out	0x3d, r28	; 61
    5a64:	fe 01       	movw	r30, r28
    5a66:	ed 5b       	subi	r30, 0xBD	; 189
    5a68:	ff 4f       	sbci	r31, 0xFF	; 255
    5a6a:	80 e0       	ldi	r24, 0x00	; 0
    5a6c:	90 e0       	ldi	r25, 0x00	; 0
    5a6e:	a8 e4       	ldi	r26, 0x48	; 72
    5a70:	b2 e4       	ldi	r27, 0x42	; 66
    5a72:	80 83       	st	Z, r24
    5a74:	91 83       	std	Z+1, r25	; 0x01
    5a76:	a2 83       	std	Z+2, r26	; 0x02
    5a78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a7a:	8e 01       	movw	r16, r28
    5a7c:	01 5c       	subi	r16, 0xC1	; 193
    5a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    5a80:	fe 01       	movw	r30, r28
    5a82:	ed 5b       	subi	r30, 0xBD	; 189
    5a84:	ff 4f       	sbci	r31, 0xFF	; 255
    5a86:	60 81       	ld	r22, Z
    5a88:	71 81       	ldd	r23, Z+1	; 0x01
    5a8a:	82 81       	ldd	r24, Z+2	; 0x02
    5a8c:	93 81       	ldd	r25, Z+3	; 0x03
    5a8e:	20 e0       	ldi	r18, 0x00	; 0
    5a90:	30 e0       	ldi	r19, 0x00	; 0
    5a92:	4a ef       	ldi	r20, 0xFA	; 250
    5a94:	54 e4       	ldi	r21, 0x44	; 68
    5a96:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5a9a:	dc 01       	movw	r26, r24
    5a9c:	cb 01       	movw	r24, r22
    5a9e:	f8 01       	movw	r30, r16
    5aa0:	80 83       	st	Z, r24
    5aa2:	91 83       	std	Z+1, r25	; 0x01
    5aa4:	a2 83       	std	Z+2, r26	; 0x02
    5aa6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5aa8:	fe 01       	movw	r30, r28
    5aaa:	ff 96       	adiw	r30, 0x3f	; 63
    5aac:	60 81       	ld	r22, Z
    5aae:	71 81       	ldd	r23, Z+1	; 0x01
    5ab0:	82 81       	ldd	r24, Z+2	; 0x02
    5ab2:	93 81       	ldd	r25, Z+3	; 0x03
    5ab4:	20 e0       	ldi	r18, 0x00	; 0
    5ab6:	30 e0       	ldi	r19, 0x00	; 0
    5ab8:	40 e8       	ldi	r20, 0x80	; 128
    5aba:	5f e3       	ldi	r21, 0x3F	; 63
    5abc:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    5ac0:	88 23       	and	r24, r24
    5ac2:	2c f4       	brge	.+10     	; 0x5ace <LCD_vidInit+0x84>
		__ticks = 1;
    5ac4:	81 e0       	ldi	r24, 0x01	; 1
    5ac6:	90 e0       	ldi	r25, 0x00	; 0
    5ac8:	9e af       	std	Y+62, r25	; 0x3e
    5aca:	8d af       	std	Y+61, r24	; 0x3d
    5acc:	46 c0       	rjmp	.+140    	; 0x5b5a <LCD_vidInit+0x110>
	else if (__tmp > 65535)
    5ace:	fe 01       	movw	r30, r28
    5ad0:	ff 96       	adiw	r30, 0x3f	; 63
    5ad2:	60 81       	ld	r22, Z
    5ad4:	71 81       	ldd	r23, Z+1	; 0x01
    5ad6:	82 81       	ldd	r24, Z+2	; 0x02
    5ad8:	93 81       	ldd	r25, Z+3	; 0x03
    5ada:	20 e0       	ldi	r18, 0x00	; 0
    5adc:	3f ef       	ldi	r19, 0xFF	; 255
    5ade:	4f e7       	ldi	r20, 0x7F	; 127
    5ae0:	57 e4       	ldi	r21, 0x47	; 71
    5ae2:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    5ae6:	18 16       	cp	r1, r24
    5ae8:	64 f5       	brge	.+88     	; 0x5b42 <LCD_vidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5aea:	fe 01       	movw	r30, r28
    5aec:	ed 5b       	subi	r30, 0xBD	; 189
    5aee:	ff 4f       	sbci	r31, 0xFF	; 255
    5af0:	60 81       	ld	r22, Z
    5af2:	71 81       	ldd	r23, Z+1	; 0x01
    5af4:	82 81       	ldd	r24, Z+2	; 0x02
    5af6:	93 81       	ldd	r25, Z+3	; 0x03
    5af8:	20 e0       	ldi	r18, 0x00	; 0
    5afa:	30 e0       	ldi	r19, 0x00	; 0
    5afc:	40 e2       	ldi	r20, 0x20	; 32
    5afe:	51 e4       	ldi	r21, 0x41	; 65
    5b00:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5b04:	dc 01       	movw	r26, r24
    5b06:	cb 01       	movw	r24, r22
    5b08:	bc 01       	movw	r22, r24
    5b0a:	cd 01       	movw	r24, r26
    5b0c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5b10:	dc 01       	movw	r26, r24
    5b12:	cb 01       	movw	r24, r22
    5b14:	9e af       	std	Y+62, r25	; 0x3e
    5b16:	8d af       	std	Y+61, r24	; 0x3d
    5b18:	0f c0       	rjmp	.+30     	; 0x5b38 <LCD_vidInit+0xee>
    5b1a:	88 ec       	ldi	r24, 0xC8	; 200
    5b1c:	90 e0       	ldi	r25, 0x00	; 0
    5b1e:	9c af       	std	Y+60, r25	; 0x3c
    5b20:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5b22:	8b ad       	ldd	r24, Y+59	; 0x3b
    5b24:	9c ad       	ldd	r25, Y+60	; 0x3c
    5b26:	01 97       	sbiw	r24, 0x01	; 1
    5b28:	f1 f7       	brne	.-4      	; 0x5b26 <LCD_vidInit+0xdc>
    5b2a:	9c af       	std	Y+60, r25	; 0x3c
    5b2c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b30:	9e ad       	ldd	r25, Y+62	; 0x3e
    5b32:	01 97       	sbiw	r24, 0x01	; 1
    5b34:	9e af       	std	Y+62, r25	; 0x3e
    5b36:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b38:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    5b3c:	00 97       	sbiw	r24, 0x00	; 0
    5b3e:	69 f7       	brne	.-38     	; 0x5b1a <LCD_vidInit+0xd0>
    5b40:	16 c0       	rjmp	.+44     	; 0x5b6e <LCD_vidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b42:	fe 01       	movw	r30, r28
    5b44:	ff 96       	adiw	r30, 0x3f	; 63
    5b46:	60 81       	ld	r22, Z
    5b48:	71 81       	ldd	r23, Z+1	; 0x01
    5b4a:	82 81       	ldd	r24, Z+2	; 0x02
    5b4c:	93 81       	ldd	r25, Z+3	; 0x03
    5b4e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5b52:	dc 01       	movw	r26, r24
    5b54:	cb 01       	movw	r24, r22
    5b56:	9e af       	std	Y+62, r25	; 0x3e
    5b58:	8d af       	std	Y+61, r24	; 0x3d
    5b5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    5b5e:	9a af       	std	Y+58, r25	; 0x3a
    5b60:	89 af       	std	Y+57, r24	; 0x39
    5b62:	89 ad       	ldd	r24, Y+57	; 0x39
    5b64:	9a ad       	ldd	r25, Y+58	; 0x3a
    5b66:	01 97       	sbiw	r24, 0x01	; 1
    5b68:	f1 f7       	brne	.-4      	; 0x5b66 <LCD_vidInit+0x11c>
    5b6a:	9a af       	std	Y+58, r25	; 0x3a
    5b6c:	89 af       	std	Y+57, r24	; 0x39
	//wait for a time
   _delay_ms(50);
   //function  set
   LCD_vidSendCommand(0b00111000);
    5b6e:	88 e3       	ldi	r24, 0x38	; 56
    5b70:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
    5b74:	80 e0       	ldi	r24, 0x00	; 0
    5b76:	90 e0       	ldi	r25, 0x00	; 0
    5b78:	a0 ea       	ldi	r26, 0xA0	; 160
    5b7a:	b1 e4       	ldi	r27, 0x41	; 65
    5b7c:	8d ab       	std	Y+53, r24	; 0x35
    5b7e:	9e ab       	std	Y+54, r25	; 0x36
    5b80:	af ab       	std	Y+55, r26	; 0x37
    5b82:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b84:	6d a9       	ldd	r22, Y+53	; 0x35
    5b86:	7e a9       	ldd	r23, Y+54	; 0x36
    5b88:	8f a9       	ldd	r24, Y+55	; 0x37
    5b8a:	98 ad       	ldd	r25, Y+56	; 0x38
    5b8c:	20 e0       	ldi	r18, 0x00	; 0
    5b8e:	30 e0       	ldi	r19, 0x00	; 0
    5b90:	4a ef       	ldi	r20, 0xFA	; 250
    5b92:	54 e4       	ldi	r21, 0x44	; 68
    5b94:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5b98:	dc 01       	movw	r26, r24
    5b9a:	cb 01       	movw	r24, r22
    5b9c:	89 ab       	std	Y+49, r24	; 0x31
    5b9e:	9a ab       	std	Y+50, r25	; 0x32
    5ba0:	ab ab       	std	Y+51, r26	; 0x33
    5ba2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5ba4:	69 a9       	ldd	r22, Y+49	; 0x31
    5ba6:	7a a9       	ldd	r23, Y+50	; 0x32
    5ba8:	8b a9       	ldd	r24, Y+51	; 0x33
    5baa:	9c a9       	ldd	r25, Y+52	; 0x34
    5bac:	20 e0       	ldi	r18, 0x00	; 0
    5bae:	30 e0       	ldi	r19, 0x00	; 0
    5bb0:	40 e8       	ldi	r20, 0x80	; 128
    5bb2:	5f e3       	ldi	r21, 0x3F	; 63
    5bb4:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    5bb8:	88 23       	and	r24, r24
    5bba:	2c f4       	brge	.+10     	; 0x5bc6 <LCD_vidInit+0x17c>
		__ticks = 1;
    5bbc:	81 e0       	ldi	r24, 0x01	; 1
    5bbe:	90 e0       	ldi	r25, 0x00	; 0
    5bc0:	98 ab       	std	Y+48, r25	; 0x30
    5bc2:	8f a7       	std	Y+47, r24	; 0x2f
    5bc4:	3f c0       	rjmp	.+126    	; 0x5c44 <LCD_vidInit+0x1fa>
	else if (__tmp > 65535)
    5bc6:	69 a9       	ldd	r22, Y+49	; 0x31
    5bc8:	7a a9       	ldd	r23, Y+50	; 0x32
    5bca:	8b a9       	ldd	r24, Y+51	; 0x33
    5bcc:	9c a9       	ldd	r25, Y+52	; 0x34
    5bce:	20 e0       	ldi	r18, 0x00	; 0
    5bd0:	3f ef       	ldi	r19, 0xFF	; 255
    5bd2:	4f e7       	ldi	r20, 0x7F	; 127
    5bd4:	57 e4       	ldi	r21, 0x47	; 71
    5bd6:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    5bda:	18 16       	cp	r1, r24
    5bdc:	4c f5       	brge	.+82     	; 0x5c30 <LCD_vidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bde:	6d a9       	ldd	r22, Y+53	; 0x35
    5be0:	7e a9       	ldd	r23, Y+54	; 0x36
    5be2:	8f a9       	ldd	r24, Y+55	; 0x37
    5be4:	98 ad       	ldd	r25, Y+56	; 0x38
    5be6:	20 e0       	ldi	r18, 0x00	; 0
    5be8:	30 e0       	ldi	r19, 0x00	; 0
    5bea:	40 e2       	ldi	r20, 0x20	; 32
    5bec:	51 e4       	ldi	r21, 0x41	; 65
    5bee:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5bf2:	dc 01       	movw	r26, r24
    5bf4:	cb 01       	movw	r24, r22
    5bf6:	bc 01       	movw	r22, r24
    5bf8:	cd 01       	movw	r24, r26
    5bfa:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5bfe:	dc 01       	movw	r26, r24
    5c00:	cb 01       	movw	r24, r22
    5c02:	98 ab       	std	Y+48, r25	; 0x30
    5c04:	8f a7       	std	Y+47, r24	; 0x2f
    5c06:	0f c0       	rjmp	.+30     	; 0x5c26 <LCD_vidInit+0x1dc>
    5c08:	88 ec       	ldi	r24, 0xC8	; 200
    5c0a:	90 e0       	ldi	r25, 0x00	; 0
    5c0c:	9e a7       	std	Y+46, r25	; 0x2e
    5c0e:	8d a7       	std	Y+45, r24	; 0x2d
    5c10:	8d a5       	ldd	r24, Y+45	; 0x2d
    5c12:	9e a5       	ldd	r25, Y+46	; 0x2e
    5c14:	01 97       	sbiw	r24, 0x01	; 1
    5c16:	f1 f7       	brne	.-4      	; 0x5c14 <LCD_vidInit+0x1ca>
    5c18:	9e a7       	std	Y+46, r25	; 0x2e
    5c1a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c1e:	98 a9       	ldd	r25, Y+48	; 0x30
    5c20:	01 97       	sbiw	r24, 0x01	; 1
    5c22:	98 ab       	std	Y+48, r25	; 0x30
    5c24:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c26:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c28:	98 a9       	ldd	r25, Y+48	; 0x30
    5c2a:	00 97       	sbiw	r24, 0x00	; 0
    5c2c:	69 f7       	brne	.-38     	; 0x5c08 <LCD_vidInit+0x1be>
    5c2e:	14 c0       	rjmp	.+40     	; 0x5c58 <LCD_vidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c30:	69 a9       	ldd	r22, Y+49	; 0x31
    5c32:	7a a9       	ldd	r23, Y+50	; 0x32
    5c34:	8b a9       	ldd	r24, Y+51	; 0x33
    5c36:	9c a9       	ldd	r25, Y+52	; 0x34
    5c38:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5c3c:	dc 01       	movw	r26, r24
    5c3e:	cb 01       	movw	r24, r22
    5c40:	98 ab       	std	Y+48, r25	; 0x30
    5c42:	8f a7       	std	Y+47, r24	; 0x2f
    5c44:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c46:	98 a9       	ldd	r25, Y+48	; 0x30
    5c48:	9c a7       	std	Y+44, r25	; 0x2c
    5c4a:	8b a7       	std	Y+43, r24	; 0x2b
    5c4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    5c4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5c50:	01 97       	sbiw	r24, 0x01	; 1
    5c52:	f1 f7       	brne	.-4      	; 0x5c50 <LCD_vidInit+0x206>
    5c54:	9c a7       	std	Y+44, r25	; 0x2c
    5c56:	8b a7       	std	Y+43, r24	; 0x2b
   //wait for a time
   _delay_ms(20);
   //display on off
   LCD_vidSendCommand(0b00001100);
    5c58:	8c e0       	ldi	r24, 0x0C	; 12
    5c5a:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
    5c5e:	80 e0       	ldi	r24, 0x00	; 0
    5c60:	90 e0       	ldi	r25, 0x00	; 0
    5c62:	a0 ea       	ldi	r26, 0xA0	; 160
    5c64:	b1 e4       	ldi	r27, 0x41	; 65
    5c66:	8f a3       	std	Y+39, r24	; 0x27
    5c68:	98 a7       	std	Y+40, r25	; 0x28
    5c6a:	a9 a7       	std	Y+41, r26	; 0x29
    5c6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c6e:	6f a1       	ldd	r22, Y+39	; 0x27
    5c70:	78 a5       	ldd	r23, Y+40	; 0x28
    5c72:	89 a5       	ldd	r24, Y+41	; 0x29
    5c74:	9a a5       	ldd	r25, Y+42	; 0x2a
    5c76:	20 e0       	ldi	r18, 0x00	; 0
    5c78:	30 e0       	ldi	r19, 0x00	; 0
    5c7a:	4a ef       	ldi	r20, 0xFA	; 250
    5c7c:	54 e4       	ldi	r21, 0x44	; 68
    5c7e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5c82:	dc 01       	movw	r26, r24
    5c84:	cb 01       	movw	r24, r22
    5c86:	8b a3       	std	Y+35, r24	; 0x23
    5c88:	9c a3       	std	Y+36, r25	; 0x24
    5c8a:	ad a3       	std	Y+37, r26	; 0x25
    5c8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5c8e:	6b a1       	ldd	r22, Y+35	; 0x23
    5c90:	7c a1       	ldd	r23, Y+36	; 0x24
    5c92:	8d a1       	ldd	r24, Y+37	; 0x25
    5c94:	9e a1       	ldd	r25, Y+38	; 0x26
    5c96:	20 e0       	ldi	r18, 0x00	; 0
    5c98:	30 e0       	ldi	r19, 0x00	; 0
    5c9a:	40 e8       	ldi	r20, 0x80	; 128
    5c9c:	5f e3       	ldi	r21, 0x3F	; 63
    5c9e:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    5ca2:	88 23       	and	r24, r24
    5ca4:	2c f4       	brge	.+10     	; 0x5cb0 <LCD_vidInit+0x266>
		__ticks = 1;
    5ca6:	81 e0       	ldi	r24, 0x01	; 1
    5ca8:	90 e0       	ldi	r25, 0x00	; 0
    5caa:	9a a3       	std	Y+34, r25	; 0x22
    5cac:	89 a3       	std	Y+33, r24	; 0x21
    5cae:	3f c0       	rjmp	.+126    	; 0x5d2e <LCD_vidInit+0x2e4>
	else if (__tmp > 65535)
    5cb0:	6b a1       	ldd	r22, Y+35	; 0x23
    5cb2:	7c a1       	ldd	r23, Y+36	; 0x24
    5cb4:	8d a1       	ldd	r24, Y+37	; 0x25
    5cb6:	9e a1       	ldd	r25, Y+38	; 0x26
    5cb8:	20 e0       	ldi	r18, 0x00	; 0
    5cba:	3f ef       	ldi	r19, 0xFF	; 255
    5cbc:	4f e7       	ldi	r20, 0x7F	; 127
    5cbe:	57 e4       	ldi	r21, 0x47	; 71
    5cc0:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    5cc4:	18 16       	cp	r1, r24
    5cc6:	4c f5       	brge	.+82     	; 0x5d1a <LCD_vidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cc8:	6f a1       	ldd	r22, Y+39	; 0x27
    5cca:	78 a5       	ldd	r23, Y+40	; 0x28
    5ccc:	89 a5       	ldd	r24, Y+41	; 0x29
    5cce:	9a a5       	ldd	r25, Y+42	; 0x2a
    5cd0:	20 e0       	ldi	r18, 0x00	; 0
    5cd2:	30 e0       	ldi	r19, 0x00	; 0
    5cd4:	40 e2       	ldi	r20, 0x20	; 32
    5cd6:	51 e4       	ldi	r21, 0x41	; 65
    5cd8:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5cdc:	dc 01       	movw	r26, r24
    5cde:	cb 01       	movw	r24, r22
    5ce0:	bc 01       	movw	r22, r24
    5ce2:	cd 01       	movw	r24, r26
    5ce4:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5ce8:	dc 01       	movw	r26, r24
    5cea:	cb 01       	movw	r24, r22
    5cec:	9a a3       	std	Y+34, r25	; 0x22
    5cee:	89 a3       	std	Y+33, r24	; 0x21
    5cf0:	0f c0       	rjmp	.+30     	; 0x5d10 <LCD_vidInit+0x2c6>
    5cf2:	88 ec       	ldi	r24, 0xC8	; 200
    5cf4:	90 e0       	ldi	r25, 0x00	; 0
    5cf6:	98 a3       	std	Y+32, r25	; 0x20
    5cf8:	8f 8f       	std	Y+31, r24	; 0x1f
    5cfa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5cfc:	98 a1       	ldd	r25, Y+32	; 0x20
    5cfe:	01 97       	sbiw	r24, 0x01	; 1
    5d00:	f1 f7       	brne	.-4      	; 0x5cfe <LCD_vidInit+0x2b4>
    5d02:	98 a3       	std	Y+32, r25	; 0x20
    5d04:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d06:	89 a1       	ldd	r24, Y+33	; 0x21
    5d08:	9a a1       	ldd	r25, Y+34	; 0x22
    5d0a:	01 97       	sbiw	r24, 0x01	; 1
    5d0c:	9a a3       	std	Y+34, r25	; 0x22
    5d0e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d10:	89 a1       	ldd	r24, Y+33	; 0x21
    5d12:	9a a1       	ldd	r25, Y+34	; 0x22
    5d14:	00 97       	sbiw	r24, 0x00	; 0
    5d16:	69 f7       	brne	.-38     	; 0x5cf2 <LCD_vidInit+0x2a8>
    5d18:	14 c0       	rjmp	.+40     	; 0x5d42 <LCD_vidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d1a:	6b a1       	ldd	r22, Y+35	; 0x23
    5d1c:	7c a1       	ldd	r23, Y+36	; 0x24
    5d1e:	8d a1       	ldd	r24, Y+37	; 0x25
    5d20:	9e a1       	ldd	r25, Y+38	; 0x26
    5d22:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5d26:	dc 01       	movw	r26, r24
    5d28:	cb 01       	movw	r24, r22
    5d2a:	9a a3       	std	Y+34, r25	; 0x22
    5d2c:	89 a3       	std	Y+33, r24	; 0x21
    5d2e:	89 a1       	ldd	r24, Y+33	; 0x21
    5d30:	9a a1       	ldd	r25, Y+34	; 0x22
    5d32:	9e 8f       	std	Y+30, r25	; 0x1e
    5d34:	8d 8f       	std	Y+29, r24	; 0x1d
    5d36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5d3a:	01 97       	sbiw	r24, 0x01	; 1
    5d3c:	f1 f7       	brne	.-4      	; 0x5d3a <LCD_vidInit+0x2f0>
    5d3e:	9e 8f       	std	Y+30, r25	; 0x1e
    5d40:	8d 8f       	std	Y+29, r24	; 0x1d
   //wait for a time
    _delay_ms(20);
   //display clear
   LCD_vidSendCommand(0b00000001);
    5d42:	81 e0       	ldi	r24, 0x01	; 1
    5d44:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
    5d48:	80 e0       	ldi	r24, 0x00	; 0
    5d4a:	90 e0       	ldi	r25, 0x00	; 0
    5d4c:	a0 ea       	ldi	r26, 0xA0	; 160
    5d4e:	b1 e4       	ldi	r27, 0x41	; 65
    5d50:	89 8f       	std	Y+25, r24	; 0x19
    5d52:	9a 8f       	std	Y+26, r25	; 0x1a
    5d54:	ab 8f       	std	Y+27, r26	; 0x1b
    5d56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d58:	69 8d       	ldd	r22, Y+25	; 0x19
    5d5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5d5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5d5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5d60:	20 e0       	ldi	r18, 0x00	; 0
    5d62:	30 e0       	ldi	r19, 0x00	; 0
    5d64:	4a ef       	ldi	r20, 0xFA	; 250
    5d66:	54 e4       	ldi	r21, 0x44	; 68
    5d68:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5d6c:	dc 01       	movw	r26, r24
    5d6e:	cb 01       	movw	r24, r22
    5d70:	8d 8b       	std	Y+21, r24	; 0x15
    5d72:	9e 8b       	std	Y+22, r25	; 0x16
    5d74:	af 8b       	std	Y+23, r26	; 0x17
    5d76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5d78:	6d 89       	ldd	r22, Y+21	; 0x15
    5d7a:	7e 89       	ldd	r23, Y+22	; 0x16
    5d7c:	8f 89       	ldd	r24, Y+23	; 0x17
    5d7e:	98 8d       	ldd	r25, Y+24	; 0x18
    5d80:	20 e0       	ldi	r18, 0x00	; 0
    5d82:	30 e0       	ldi	r19, 0x00	; 0
    5d84:	40 e8       	ldi	r20, 0x80	; 128
    5d86:	5f e3       	ldi	r21, 0x3F	; 63
    5d88:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    5d8c:	88 23       	and	r24, r24
    5d8e:	2c f4       	brge	.+10     	; 0x5d9a <LCD_vidInit+0x350>
		__ticks = 1;
    5d90:	81 e0       	ldi	r24, 0x01	; 1
    5d92:	90 e0       	ldi	r25, 0x00	; 0
    5d94:	9c 8b       	std	Y+20, r25	; 0x14
    5d96:	8b 8b       	std	Y+19, r24	; 0x13
    5d98:	3f c0       	rjmp	.+126    	; 0x5e18 <LCD_vidInit+0x3ce>
	else if (__tmp > 65535)
    5d9a:	6d 89       	ldd	r22, Y+21	; 0x15
    5d9c:	7e 89       	ldd	r23, Y+22	; 0x16
    5d9e:	8f 89       	ldd	r24, Y+23	; 0x17
    5da0:	98 8d       	ldd	r25, Y+24	; 0x18
    5da2:	20 e0       	ldi	r18, 0x00	; 0
    5da4:	3f ef       	ldi	r19, 0xFF	; 255
    5da6:	4f e7       	ldi	r20, 0x7F	; 127
    5da8:	57 e4       	ldi	r21, 0x47	; 71
    5daa:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    5dae:	18 16       	cp	r1, r24
    5db0:	4c f5       	brge	.+82     	; 0x5e04 <LCD_vidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5db2:	69 8d       	ldd	r22, Y+25	; 0x19
    5db4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5db6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5db8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5dba:	20 e0       	ldi	r18, 0x00	; 0
    5dbc:	30 e0       	ldi	r19, 0x00	; 0
    5dbe:	40 e2       	ldi	r20, 0x20	; 32
    5dc0:	51 e4       	ldi	r21, 0x41	; 65
    5dc2:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5dc6:	dc 01       	movw	r26, r24
    5dc8:	cb 01       	movw	r24, r22
    5dca:	bc 01       	movw	r22, r24
    5dcc:	cd 01       	movw	r24, r26
    5dce:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5dd2:	dc 01       	movw	r26, r24
    5dd4:	cb 01       	movw	r24, r22
    5dd6:	9c 8b       	std	Y+20, r25	; 0x14
    5dd8:	8b 8b       	std	Y+19, r24	; 0x13
    5dda:	0f c0       	rjmp	.+30     	; 0x5dfa <LCD_vidInit+0x3b0>
    5ddc:	88 ec       	ldi	r24, 0xC8	; 200
    5dde:	90 e0       	ldi	r25, 0x00	; 0
    5de0:	9a 8b       	std	Y+18, r25	; 0x12
    5de2:	89 8b       	std	Y+17, r24	; 0x11
    5de4:	89 89       	ldd	r24, Y+17	; 0x11
    5de6:	9a 89       	ldd	r25, Y+18	; 0x12
    5de8:	01 97       	sbiw	r24, 0x01	; 1
    5dea:	f1 f7       	brne	.-4      	; 0x5de8 <LCD_vidInit+0x39e>
    5dec:	9a 8b       	std	Y+18, r25	; 0x12
    5dee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5df0:	8b 89       	ldd	r24, Y+19	; 0x13
    5df2:	9c 89       	ldd	r25, Y+20	; 0x14
    5df4:	01 97       	sbiw	r24, 0x01	; 1
    5df6:	9c 8b       	std	Y+20, r25	; 0x14
    5df8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dfa:	8b 89       	ldd	r24, Y+19	; 0x13
    5dfc:	9c 89       	ldd	r25, Y+20	; 0x14
    5dfe:	00 97       	sbiw	r24, 0x00	; 0
    5e00:	69 f7       	brne	.-38     	; 0x5ddc <LCD_vidInit+0x392>
    5e02:	14 c0       	rjmp	.+40     	; 0x5e2c <LCD_vidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e04:	6d 89       	ldd	r22, Y+21	; 0x15
    5e06:	7e 89       	ldd	r23, Y+22	; 0x16
    5e08:	8f 89       	ldd	r24, Y+23	; 0x17
    5e0a:	98 8d       	ldd	r25, Y+24	; 0x18
    5e0c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5e10:	dc 01       	movw	r26, r24
    5e12:	cb 01       	movw	r24, r22
    5e14:	9c 8b       	std	Y+20, r25	; 0x14
    5e16:	8b 8b       	std	Y+19, r24	; 0x13
    5e18:	8b 89       	ldd	r24, Y+19	; 0x13
    5e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    5e1c:	98 8b       	std	Y+16, r25	; 0x10
    5e1e:	8f 87       	std	Y+15, r24	; 0x0f
    5e20:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e22:	98 89       	ldd	r25, Y+16	; 0x10
    5e24:	01 97       	sbiw	r24, 0x01	; 1
    5e26:	f1 f7       	brne	.-4      	; 0x5e24 <LCD_vidInit+0x3da>
    5e28:	98 8b       	std	Y+16, r25	; 0x10
    5e2a:	8f 87       	std	Y+15, r24	; 0x0f
   //wait for a time
    _delay_ms(20);
    //entry mode set
    LCD_vidSendCommand(0b00000110);
    5e2c:	86 e0       	ldi	r24, 0x06	; 6
    5e2e:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
    5e32:	80 e0       	ldi	r24, 0x00	; 0
    5e34:	90 e0       	ldi	r25, 0x00	; 0
    5e36:	a0 ea       	ldi	r26, 0xA0	; 160
    5e38:	b1 e4       	ldi	r27, 0x41	; 65
    5e3a:	8b 87       	std	Y+11, r24	; 0x0b
    5e3c:	9c 87       	std	Y+12, r25	; 0x0c
    5e3e:	ad 87       	std	Y+13, r26	; 0x0d
    5e40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e42:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e44:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e46:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e48:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e4a:	20 e0       	ldi	r18, 0x00	; 0
    5e4c:	30 e0       	ldi	r19, 0x00	; 0
    5e4e:	4a ef       	ldi	r20, 0xFA	; 250
    5e50:	54 e4       	ldi	r21, 0x44	; 68
    5e52:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5e56:	dc 01       	movw	r26, r24
    5e58:	cb 01       	movw	r24, r22
    5e5a:	8f 83       	std	Y+7, r24	; 0x07
    5e5c:	98 87       	std	Y+8, r25	; 0x08
    5e5e:	a9 87       	std	Y+9, r26	; 0x09
    5e60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5e62:	6f 81       	ldd	r22, Y+7	; 0x07
    5e64:	78 85       	ldd	r23, Y+8	; 0x08
    5e66:	89 85       	ldd	r24, Y+9	; 0x09
    5e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e6a:	20 e0       	ldi	r18, 0x00	; 0
    5e6c:	30 e0       	ldi	r19, 0x00	; 0
    5e6e:	40 e8       	ldi	r20, 0x80	; 128
    5e70:	5f e3       	ldi	r21, 0x3F	; 63
    5e72:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    5e76:	88 23       	and	r24, r24
    5e78:	2c f4       	brge	.+10     	; 0x5e84 <LCD_vidInit+0x43a>
		__ticks = 1;
    5e7a:	81 e0       	ldi	r24, 0x01	; 1
    5e7c:	90 e0       	ldi	r25, 0x00	; 0
    5e7e:	9e 83       	std	Y+6, r25	; 0x06
    5e80:	8d 83       	std	Y+5, r24	; 0x05
    5e82:	3f c0       	rjmp	.+126    	; 0x5f02 <LCD_vidInit+0x4b8>
	else if (__tmp > 65535)
    5e84:	6f 81       	ldd	r22, Y+7	; 0x07
    5e86:	78 85       	ldd	r23, Y+8	; 0x08
    5e88:	89 85       	ldd	r24, Y+9	; 0x09
    5e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e8c:	20 e0       	ldi	r18, 0x00	; 0
    5e8e:	3f ef       	ldi	r19, 0xFF	; 255
    5e90:	4f e7       	ldi	r20, 0x7F	; 127
    5e92:	57 e4       	ldi	r21, 0x47	; 71
    5e94:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    5e98:	18 16       	cp	r1, r24
    5e9a:	4c f5       	brge	.+82     	; 0x5eee <LCD_vidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ea4:	20 e0       	ldi	r18, 0x00	; 0
    5ea6:	30 e0       	ldi	r19, 0x00	; 0
    5ea8:	40 e2       	ldi	r20, 0x20	; 32
    5eaa:	51 e4       	ldi	r21, 0x41	; 65
    5eac:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5eb0:	dc 01       	movw	r26, r24
    5eb2:	cb 01       	movw	r24, r22
    5eb4:	bc 01       	movw	r22, r24
    5eb6:	cd 01       	movw	r24, r26
    5eb8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5ebc:	dc 01       	movw	r26, r24
    5ebe:	cb 01       	movw	r24, r22
    5ec0:	9e 83       	std	Y+6, r25	; 0x06
    5ec2:	8d 83       	std	Y+5, r24	; 0x05
    5ec4:	0f c0       	rjmp	.+30     	; 0x5ee4 <LCD_vidInit+0x49a>
    5ec6:	88 ec       	ldi	r24, 0xC8	; 200
    5ec8:	90 e0       	ldi	r25, 0x00	; 0
    5eca:	9c 83       	std	Y+4, r25	; 0x04
    5ecc:	8b 83       	std	Y+3, r24	; 0x03
    5ece:	8b 81       	ldd	r24, Y+3	; 0x03
    5ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    5ed2:	01 97       	sbiw	r24, 0x01	; 1
    5ed4:	f1 f7       	brne	.-4      	; 0x5ed2 <LCD_vidInit+0x488>
    5ed6:	9c 83       	std	Y+4, r25	; 0x04
    5ed8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5eda:	8d 81       	ldd	r24, Y+5	; 0x05
    5edc:	9e 81       	ldd	r25, Y+6	; 0x06
    5ede:	01 97       	sbiw	r24, 0x01	; 1
    5ee0:	9e 83       	std	Y+6, r25	; 0x06
    5ee2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    5ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    5ee8:	00 97       	sbiw	r24, 0x00	; 0
    5eea:	69 f7       	brne	.-38     	; 0x5ec6 <LCD_vidInit+0x47c>
    5eec:	14 c0       	rjmp	.+40     	; 0x5f16 <LCD_vidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5eee:	6f 81       	ldd	r22, Y+7	; 0x07
    5ef0:	78 85       	ldd	r23, Y+8	; 0x08
    5ef2:	89 85       	ldd	r24, Y+9	; 0x09
    5ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ef6:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5efa:	dc 01       	movw	r26, r24
    5efc:	cb 01       	movw	r24, r22
    5efe:	9e 83       	std	Y+6, r25	; 0x06
    5f00:	8d 83       	std	Y+5, r24	; 0x05
    5f02:	8d 81       	ldd	r24, Y+5	; 0x05
    5f04:	9e 81       	ldd	r25, Y+6	; 0x06
    5f06:	9a 83       	std	Y+2, r25	; 0x02
    5f08:	89 83       	std	Y+1, r24	; 0x01
    5f0a:	89 81       	ldd	r24, Y+1	; 0x01
    5f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    5f0e:	01 97       	sbiw	r24, 0x01	; 1
    5f10:	f1 f7       	brne	.-4      	; 0x5f0e <LCD_vidInit+0x4c4>
    5f12:	9a 83       	std	Y+2, r25	; 0x02
    5f14:	89 83       	std	Y+1, r24	; 0x01
    //wait for a time
     _delay_ms(20);
}
    5f16:	ca 5b       	subi	r28, 0xBA	; 186
    5f18:	df 4f       	sbci	r29, 0xFF	; 255
    5f1a:	0f b6       	in	r0, 0x3f	; 63
    5f1c:	f8 94       	cli
    5f1e:	de bf       	out	0x3e, r29	; 62
    5f20:	0f be       	out	0x3f, r0	; 63
    5f22:	cd bf       	out	0x3d, r28	; 61
    5f24:	cf 91       	pop	r28
    5f26:	df 91       	pop	r29
    5f28:	1f 91       	pop	r17
    5f2a:	0f 91       	pop	r16
    5f2c:	08 95       	ret

00005f2e <LCD_vidSendCommand>:
//.........................................................................................
void LCD_vidSendCommand(uint8 u8CommandCpy)
{
    5f2e:	df 93       	push	r29
    5f30:	cf 93       	push	r28
    5f32:	cd b7       	in	r28, 0x3d	; 61
    5f34:	de b7       	in	r29, 0x3e	; 62
    5f36:	6d 97       	sbiw	r28, 0x1d	; 29
    5f38:	0f b6       	in	r0, 0x3f	; 63
    5f3a:	f8 94       	cli
    5f3c:	de bf       	out	0x3e, r29	; 62
    5f3e:	0f be       	out	0x3f, r0	; 63
    5f40:	cd bf       	out	0x3d, r28	; 61
    5f42:	8d 8f       	std	Y+29, r24	; 0x1d
	//put RS TO LOW TO WRITE OPERATION
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,RS,LOW);
    5f44:	81 e0       	ldi	r24, 0x01	; 1
    5f46:	65 e0       	ldi	r22, 0x05	; 5
    5f48:	40 e0       	ldi	r20, 0x00	; 0
    5f4a:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
	//PUT R/W TO LOW TO WRITE OPERATION
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,RW,LOW);
    5f4e:	81 e0       	ldi	r24, 0x01	; 1
    5f50:	66 e0       	ldi	r22, 0x06	; 6
    5f52:	40 e0       	ldi	r20, 0x00	; 0
    5f54:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
	//PUT E TO HIGH TO ENABLE
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,HIGH);
    5f58:	81 e0       	ldi	r24, 0x01	; 1
    5f5a:	67 e0       	ldi	r22, 0x07	; 7
    5f5c:	41 e0       	ldi	r20, 0x01	; 1
    5f5e:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>

	DIO_void_Set_Port_Value(LCD_PORT,u8CommandCpy);
    5f62:	82 e0       	ldi	r24, 0x02	; 2
    5f64:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5f66:	0e 94 9c 23 	call	0x4738	; 0x4738 <DIO_void_Set_Port_Value>

	//PUT E TO LOW TO COMPLETE SEND THE COMMAND
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,LOW);
    5f6a:	81 e0       	ldi	r24, 0x01	; 1
    5f6c:	67 e0       	ldi	r22, 0x07	; 7
    5f6e:	40 e0       	ldi	r20, 0x00	; 0
    5f70:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    5f74:	80 e0       	ldi	r24, 0x00	; 0
    5f76:	90 e0       	ldi	r25, 0x00	; 0
    5f78:	a0 e8       	ldi	r26, 0x80	; 128
    5f7a:	bf e3       	ldi	r27, 0x3F	; 63
    5f7c:	89 8f       	std	Y+25, r24	; 0x19
    5f7e:	9a 8f       	std	Y+26, r25	; 0x1a
    5f80:	ab 8f       	std	Y+27, r26	; 0x1b
    5f82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f84:	69 8d       	ldd	r22, Y+25	; 0x19
    5f86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5f88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5f8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5f8c:	20 e0       	ldi	r18, 0x00	; 0
    5f8e:	30 e0       	ldi	r19, 0x00	; 0
    5f90:	4a ef       	ldi	r20, 0xFA	; 250
    5f92:	54 e4       	ldi	r21, 0x44	; 68
    5f94:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5f98:	dc 01       	movw	r26, r24
    5f9a:	cb 01       	movw	r24, r22
    5f9c:	8d 8b       	std	Y+21, r24	; 0x15
    5f9e:	9e 8b       	std	Y+22, r25	; 0x16
    5fa0:	af 8b       	std	Y+23, r26	; 0x17
    5fa2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5fa4:	6d 89       	ldd	r22, Y+21	; 0x15
    5fa6:	7e 89       	ldd	r23, Y+22	; 0x16
    5fa8:	8f 89       	ldd	r24, Y+23	; 0x17
    5faa:	98 8d       	ldd	r25, Y+24	; 0x18
    5fac:	20 e0       	ldi	r18, 0x00	; 0
    5fae:	30 e0       	ldi	r19, 0x00	; 0
    5fb0:	40 e8       	ldi	r20, 0x80	; 128
    5fb2:	5f e3       	ldi	r21, 0x3F	; 63
    5fb4:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    5fb8:	88 23       	and	r24, r24
    5fba:	2c f4       	brge	.+10     	; 0x5fc6 <LCD_vidSendCommand+0x98>
		__ticks = 1;
    5fbc:	81 e0       	ldi	r24, 0x01	; 1
    5fbe:	90 e0       	ldi	r25, 0x00	; 0
    5fc0:	9c 8b       	std	Y+20, r25	; 0x14
    5fc2:	8b 8b       	std	Y+19, r24	; 0x13
    5fc4:	3f c0       	rjmp	.+126    	; 0x6044 <LCD_vidSendCommand+0x116>
	else if (__tmp > 65535)
    5fc6:	6d 89       	ldd	r22, Y+21	; 0x15
    5fc8:	7e 89       	ldd	r23, Y+22	; 0x16
    5fca:	8f 89       	ldd	r24, Y+23	; 0x17
    5fcc:	98 8d       	ldd	r25, Y+24	; 0x18
    5fce:	20 e0       	ldi	r18, 0x00	; 0
    5fd0:	3f ef       	ldi	r19, 0xFF	; 255
    5fd2:	4f e7       	ldi	r20, 0x7F	; 127
    5fd4:	57 e4       	ldi	r21, 0x47	; 71
    5fd6:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    5fda:	18 16       	cp	r1, r24
    5fdc:	4c f5       	brge	.+82     	; 0x6030 <LCD_vidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fde:	69 8d       	ldd	r22, Y+25	; 0x19
    5fe0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5fe2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5fe4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5fe6:	20 e0       	ldi	r18, 0x00	; 0
    5fe8:	30 e0       	ldi	r19, 0x00	; 0
    5fea:	40 e2       	ldi	r20, 0x20	; 32
    5fec:	51 e4       	ldi	r21, 0x41	; 65
    5fee:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5ff2:	dc 01       	movw	r26, r24
    5ff4:	cb 01       	movw	r24, r22
    5ff6:	bc 01       	movw	r22, r24
    5ff8:	cd 01       	movw	r24, r26
    5ffa:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5ffe:	dc 01       	movw	r26, r24
    6000:	cb 01       	movw	r24, r22
    6002:	9c 8b       	std	Y+20, r25	; 0x14
    6004:	8b 8b       	std	Y+19, r24	; 0x13
    6006:	0f c0       	rjmp	.+30     	; 0x6026 <LCD_vidSendCommand+0xf8>
    6008:	88 ec       	ldi	r24, 0xC8	; 200
    600a:	90 e0       	ldi	r25, 0x00	; 0
    600c:	9a 8b       	std	Y+18, r25	; 0x12
    600e:	89 8b       	std	Y+17, r24	; 0x11
    6010:	89 89       	ldd	r24, Y+17	; 0x11
    6012:	9a 89       	ldd	r25, Y+18	; 0x12
    6014:	01 97       	sbiw	r24, 0x01	; 1
    6016:	f1 f7       	brne	.-4      	; 0x6014 <LCD_vidSendCommand+0xe6>
    6018:	9a 8b       	std	Y+18, r25	; 0x12
    601a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    601c:	8b 89       	ldd	r24, Y+19	; 0x13
    601e:	9c 89       	ldd	r25, Y+20	; 0x14
    6020:	01 97       	sbiw	r24, 0x01	; 1
    6022:	9c 8b       	std	Y+20, r25	; 0x14
    6024:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6026:	8b 89       	ldd	r24, Y+19	; 0x13
    6028:	9c 89       	ldd	r25, Y+20	; 0x14
    602a:	00 97       	sbiw	r24, 0x00	; 0
    602c:	69 f7       	brne	.-38     	; 0x6008 <LCD_vidSendCommand+0xda>
    602e:	14 c0       	rjmp	.+40     	; 0x6058 <LCD_vidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6030:	6d 89       	ldd	r22, Y+21	; 0x15
    6032:	7e 89       	ldd	r23, Y+22	; 0x16
    6034:	8f 89       	ldd	r24, Y+23	; 0x17
    6036:	98 8d       	ldd	r25, Y+24	; 0x18
    6038:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    603c:	dc 01       	movw	r26, r24
    603e:	cb 01       	movw	r24, r22
    6040:	9c 8b       	std	Y+20, r25	; 0x14
    6042:	8b 8b       	std	Y+19, r24	; 0x13
    6044:	8b 89       	ldd	r24, Y+19	; 0x13
    6046:	9c 89       	ldd	r25, Y+20	; 0x14
    6048:	98 8b       	std	Y+16, r25	; 0x10
    604a:	8f 87       	std	Y+15, r24	; 0x0f
    604c:	8f 85       	ldd	r24, Y+15	; 0x0f
    604e:	98 89       	ldd	r25, Y+16	; 0x10
    6050:	01 97       	sbiw	r24, 0x01	; 1
    6052:	f1 f7       	brne	.-4      	; 0x6050 <LCD_vidSendCommand+0x122>
    6054:	98 8b       	std	Y+16, r25	; 0x10
    6056:	8f 87       	std	Y+15, r24	; 0x0f
	//wait tc time
	_delay_ms(1);
	//put Eto high
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,HIGH);
    6058:	81 e0       	ldi	r24, 0x01	; 1
    605a:	67 e0       	ldi	r22, 0x07	; 7
    605c:	41 e0       	ldi	r20, 0x01	; 1
    605e:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    6062:	80 e0       	ldi	r24, 0x00	; 0
    6064:	90 e0       	ldi	r25, 0x00	; 0
    6066:	a0 e4       	ldi	r26, 0x40	; 64
    6068:	b0 e4       	ldi	r27, 0x40	; 64
    606a:	8b 87       	std	Y+11, r24	; 0x0b
    606c:	9c 87       	std	Y+12, r25	; 0x0c
    606e:	ad 87       	std	Y+13, r26	; 0x0d
    6070:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6072:	6b 85       	ldd	r22, Y+11	; 0x0b
    6074:	7c 85       	ldd	r23, Y+12	; 0x0c
    6076:	8d 85       	ldd	r24, Y+13	; 0x0d
    6078:	9e 85       	ldd	r25, Y+14	; 0x0e
    607a:	20 e0       	ldi	r18, 0x00	; 0
    607c:	30 e0       	ldi	r19, 0x00	; 0
    607e:	4a ef       	ldi	r20, 0xFA	; 250
    6080:	54 e4       	ldi	r21, 0x44	; 68
    6082:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    6086:	dc 01       	movw	r26, r24
    6088:	cb 01       	movw	r24, r22
    608a:	8f 83       	std	Y+7, r24	; 0x07
    608c:	98 87       	std	Y+8, r25	; 0x08
    608e:	a9 87       	std	Y+9, r26	; 0x09
    6090:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6092:	6f 81       	ldd	r22, Y+7	; 0x07
    6094:	78 85       	ldd	r23, Y+8	; 0x08
    6096:	89 85       	ldd	r24, Y+9	; 0x09
    6098:	9a 85       	ldd	r25, Y+10	; 0x0a
    609a:	20 e0       	ldi	r18, 0x00	; 0
    609c:	30 e0       	ldi	r19, 0x00	; 0
    609e:	40 e8       	ldi	r20, 0x80	; 128
    60a0:	5f e3       	ldi	r21, 0x3F	; 63
    60a2:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    60a6:	88 23       	and	r24, r24
    60a8:	2c f4       	brge	.+10     	; 0x60b4 <LCD_vidSendCommand+0x186>
		__ticks = 1;
    60aa:	81 e0       	ldi	r24, 0x01	; 1
    60ac:	90 e0       	ldi	r25, 0x00	; 0
    60ae:	9e 83       	std	Y+6, r25	; 0x06
    60b0:	8d 83       	std	Y+5, r24	; 0x05
    60b2:	3f c0       	rjmp	.+126    	; 0x6132 <LCD_vidSendCommand+0x204>
	else if (__tmp > 65535)
    60b4:	6f 81       	ldd	r22, Y+7	; 0x07
    60b6:	78 85       	ldd	r23, Y+8	; 0x08
    60b8:	89 85       	ldd	r24, Y+9	; 0x09
    60ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    60bc:	20 e0       	ldi	r18, 0x00	; 0
    60be:	3f ef       	ldi	r19, 0xFF	; 255
    60c0:	4f e7       	ldi	r20, 0x7F	; 127
    60c2:	57 e4       	ldi	r21, 0x47	; 71
    60c4:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    60c8:	18 16       	cp	r1, r24
    60ca:	4c f5       	brge	.+82     	; 0x611e <LCD_vidSendCommand+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    60ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    60d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    60d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    60d4:	20 e0       	ldi	r18, 0x00	; 0
    60d6:	30 e0       	ldi	r19, 0x00	; 0
    60d8:	40 e2       	ldi	r20, 0x20	; 32
    60da:	51 e4       	ldi	r21, 0x41	; 65
    60dc:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    60e0:	dc 01       	movw	r26, r24
    60e2:	cb 01       	movw	r24, r22
    60e4:	bc 01       	movw	r22, r24
    60e6:	cd 01       	movw	r24, r26
    60e8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    60ec:	dc 01       	movw	r26, r24
    60ee:	cb 01       	movw	r24, r22
    60f0:	9e 83       	std	Y+6, r25	; 0x06
    60f2:	8d 83       	std	Y+5, r24	; 0x05
    60f4:	0f c0       	rjmp	.+30     	; 0x6114 <LCD_vidSendCommand+0x1e6>
    60f6:	88 ec       	ldi	r24, 0xC8	; 200
    60f8:	90 e0       	ldi	r25, 0x00	; 0
    60fa:	9c 83       	std	Y+4, r25	; 0x04
    60fc:	8b 83       	std	Y+3, r24	; 0x03
    60fe:	8b 81       	ldd	r24, Y+3	; 0x03
    6100:	9c 81       	ldd	r25, Y+4	; 0x04
    6102:	01 97       	sbiw	r24, 0x01	; 1
    6104:	f1 f7       	brne	.-4      	; 0x6102 <LCD_vidSendCommand+0x1d4>
    6106:	9c 83       	std	Y+4, r25	; 0x04
    6108:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    610a:	8d 81       	ldd	r24, Y+5	; 0x05
    610c:	9e 81       	ldd	r25, Y+6	; 0x06
    610e:	01 97       	sbiw	r24, 0x01	; 1
    6110:	9e 83       	std	Y+6, r25	; 0x06
    6112:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6114:	8d 81       	ldd	r24, Y+5	; 0x05
    6116:	9e 81       	ldd	r25, Y+6	; 0x06
    6118:	00 97       	sbiw	r24, 0x00	; 0
    611a:	69 f7       	brne	.-38     	; 0x60f6 <LCD_vidSendCommand+0x1c8>
    611c:	14 c0       	rjmp	.+40     	; 0x6146 <LCD_vidSendCommand+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    611e:	6f 81       	ldd	r22, Y+7	; 0x07
    6120:	78 85       	ldd	r23, Y+8	; 0x08
    6122:	89 85       	ldd	r24, Y+9	; 0x09
    6124:	9a 85       	ldd	r25, Y+10	; 0x0a
    6126:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    612a:	dc 01       	movw	r26, r24
    612c:	cb 01       	movw	r24, r22
    612e:	9e 83       	std	Y+6, r25	; 0x06
    6130:	8d 83       	std	Y+5, r24	; 0x05
    6132:	8d 81       	ldd	r24, Y+5	; 0x05
    6134:	9e 81       	ldd	r25, Y+6	; 0x06
    6136:	9a 83       	std	Y+2, r25	; 0x02
    6138:	89 83       	std	Y+1, r24	; 0x01
    613a:	89 81       	ldd	r24, Y+1	; 0x01
    613c:	9a 81       	ldd	r25, Y+2	; 0x02
    613e:	01 97       	sbiw	r24, 0x01	; 1
    6140:	f1 f7       	brne	.-4      	; 0x613e <LCD_vidSendCommand+0x210>
    6142:	9a 83       	std	Y+2, r25	; 0x02
    6144:	89 83       	std	Y+1, r24	; 0x01
	//wait to let lcd excute the command
	_delay_ms(3);
}
    6146:	6d 96       	adiw	r28, 0x1d	; 29
    6148:	0f b6       	in	r0, 0x3f	; 63
    614a:	f8 94       	cli
    614c:	de bf       	out	0x3e, r29	; 62
    614e:	0f be       	out	0x3f, r0	; 63
    6150:	cd bf       	out	0x3d, r28	; 61
    6152:	cf 91       	pop	r28
    6154:	df 91       	pop	r29
    6156:	08 95       	ret

00006158 <LCD_vidWriteCharacter>:
//....................................................................
void LCD_vidWriteCharacter(uint8 u8DataCpy)
{
    6158:	df 93       	push	r29
    615a:	cf 93       	push	r28
    615c:	cd b7       	in	r28, 0x3d	; 61
    615e:	de b7       	in	r29, 0x3e	; 62
    6160:	6d 97       	sbiw	r28, 0x1d	; 29
    6162:	0f b6       	in	r0, 0x3f	; 63
    6164:	f8 94       	cli
    6166:	de bf       	out	0x3e, r29	; 62
    6168:	0f be       	out	0x3f, r0	; 63
    616a:	cd bf       	out	0x3d, r28	; 61
    616c:	8d 8f       	std	Y+29, r24	; 0x1d
	//put RS TO LOW TO WRITE OPERATION
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,RS,HIGH);
    616e:	81 e0       	ldi	r24, 0x01	; 1
    6170:	65 e0       	ldi	r22, 0x05	; 5
    6172:	41 e0       	ldi	r20, 0x01	; 1
    6174:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    //PUT R/W TO LOW TO WRITE OPERATION
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,RW,LOW);
    6178:	81 e0       	ldi	r24, 0x01	; 1
    617a:	66 e0       	ldi	r22, 0x06	; 6
    617c:	40 e0       	ldi	r20, 0x00	; 0
    617e:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
	//PUT E TO HIGH TO ENABLE
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,HIGH);
    6182:	81 e0       	ldi	r24, 0x01	; 1
    6184:	67 e0       	ldi	r22, 0x07	; 7
    6186:	41 e0       	ldi	r20, 0x01	; 1
    6188:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>

	DIO_void_Set_Port_Value(LCD_PORT,u8DataCpy);
    618c:	82 e0       	ldi	r24, 0x02	; 2
    618e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    6190:	0e 94 9c 23 	call	0x4738	; 0x4738 <DIO_void_Set_Port_Value>

	//PUT E TO LOW TO COMPLETE SEND THE COMMAND
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,LOW);
    6194:	81 e0       	ldi	r24, 0x01	; 1
    6196:	67 e0       	ldi	r22, 0x07	; 7
    6198:	40 e0       	ldi	r20, 0x00	; 0
    619a:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    619e:	80 e0       	ldi	r24, 0x00	; 0
    61a0:	90 e0       	ldi	r25, 0x00	; 0
    61a2:	a0 e8       	ldi	r26, 0x80	; 128
    61a4:	bf e3       	ldi	r27, 0x3F	; 63
    61a6:	89 8f       	std	Y+25, r24	; 0x19
    61a8:	9a 8f       	std	Y+26, r25	; 0x1a
    61aa:	ab 8f       	std	Y+27, r26	; 0x1b
    61ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    61ae:	69 8d       	ldd	r22, Y+25	; 0x19
    61b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    61b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    61b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    61b6:	20 e0       	ldi	r18, 0x00	; 0
    61b8:	30 e0       	ldi	r19, 0x00	; 0
    61ba:	4a ef       	ldi	r20, 0xFA	; 250
    61bc:	54 e4       	ldi	r21, 0x44	; 68
    61be:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    61c2:	dc 01       	movw	r26, r24
    61c4:	cb 01       	movw	r24, r22
    61c6:	8d 8b       	std	Y+21, r24	; 0x15
    61c8:	9e 8b       	std	Y+22, r25	; 0x16
    61ca:	af 8b       	std	Y+23, r26	; 0x17
    61cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    61ce:	6d 89       	ldd	r22, Y+21	; 0x15
    61d0:	7e 89       	ldd	r23, Y+22	; 0x16
    61d2:	8f 89       	ldd	r24, Y+23	; 0x17
    61d4:	98 8d       	ldd	r25, Y+24	; 0x18
    61d6:	20 e0       	ldi	r18, 0x00	; 0
    61d8:	30 e0       	ldi	r19, 0x00	; 0
    61da:	40 e8       	ldi	r20, 0x80	; 128
    61dc:	5f e3       	ldi	r21, 0x3F	; 63
    61de:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    61e2:	88 23       	and	r24, r24
    61e4:	2c f4       	brge	.+10     	; 0x61f0 <LCD_vidWriteCharacter+0x98>
		__ticks = 1;
    61e6:	81 e0       	ldi	r24, 0x01	; 1
    61e8:	90 e0       	ldi	r25, 0x00	; 0
    61ea:	9c 8b       	std	Y+20, r25	; 0x14
    61ec:	8b 8b       	std	Y+19, r24	; 0x13
    61ee:	3f c0       	rjmp	.+126    	; 0x626e <LCD_vidWriteCharacter+0x116>
	else if (__tmp > 65535)
    61f0:	6d 89       	ldd	r22, Y+21	; 0x15
    61f2:	7e 89       	ldd	r23, Y+22	; 0x16
    61f4:	8f 89       	ldd	r24, Y+23	; 0x17
    61f6:	98 8d       	ldd	r25, Y+24	; 0x18
    61f8:	20 e0       	ldi	r18, 0x00	; 0
    61fa:	3f ef       	ldi	r19, 0xFF	; 255
    61fc:	4f e7       	ldi	r20, 0x7F	; 127
    61fe:	57 e4       	ldi	r21, 0x47	; 71
    6200:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    6204:	18 16       	cp	r1, r24
    6206:	4c f5       	brge	.+82     	; 0x625a <LCD_vidWriteCharacter+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6208:	69 8d       	ldd	r22, Y+25	; 0x19
    620a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    620c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    620e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6210:	20 e0       	ldi	r18, 0x00	; 0
    6212:	30 e0       	ldi	r19, 0x00	; 0
    6214:	40 e2       	ldi	r20, 0x20	; 32
    6216:	51 e4       	ldi	r21, 0x41	; 65
    6218:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    621c:	dc 01       	movw	r26, r24
    621e:	cb 01       	movw	r24, r22
    6220:	bc 01       	movw	r22, r24
    6222:	cd 01       	movw	r24, r26
    6224:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    6228:	dc 01       	movw	r26, r24
    622a:	cb 01       	movw	r24, r22
    622c:	9c 8b       	std	Y+20, r25	; 0x14
    622e:	8b 8b       	std	Y+19, r24	; 0x13
    6230:	0f c0       	rjmp	.+30     	; 0x6250 <LCD_vidWriteCharacter+0xf8>
    6232:	88 ec       	ldi	r24, 0xC8	; 200
    6234:	90 e0       	ldi	r25, 0x00	; 0
    6236:	9a 8b       	std	Y+18, r25	; 0x12
    6238:	89 8b       	std	Y+17, r24	; 0x11
    623a:	89 89       	ldd	r24, Y+17	; 0x11
    623c:	9a 89       	ldd	r25, Y+18	; 0x12
    623e:	01 97       	sbiw	r24, 0x01	; 1
    6240:	f1 f7       	brne	.-4      	; 0x623e <LCD_vidWriteCharacter+0xe6>
    6242:	9a 8b       	std	Y+18, r25	; 0x12
    6244:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6246:	8b 89       	ldd	r24, Y+19	; 0x13
    6248:	9c 89       	ldd	r25, Y+20	; 0x14
    624a:	01 97       	sbiw	r24, 0x01	; 1
    624c:	9c 8b       	std	Y+20, r25	; 0x14
    624e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6250:	8b 89       	ldd	r24, Y+19	; 0x13
    6252:	9c 89       	ldd	r25, Y+20	; 0x14
    6254:	00 97       	sbiw	r24, 0x00	; 0
    6256:	69 f7       	brne	.-38     	; 0x6232 <LCD_vidWriteCharacter+0xda>
    6258:	14 c0       	rjmp	.+40     	; 0x6282 <LCD_vidWriteCharacter+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    625a:	6d 89       	ldd	r22, Y+21	; 0x15
    625c:	7e 89       	ldd	r23, Y+22	; 0x16
    625e:	8f 89       	ldd	r24, Y+23	; 0x17
    6260:	98 8d       	ldd	r25, Y+24	; 0x18
    6262:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    6266:	dc 01       	movw	r26, r24
    6268:	cb 01       	movw	r24, r22
    626a:	9c 8b       	std	Y+20, r25	; 0x14
    626c:	8b 8b       	std	Y+19, r24	; 0x13
    626e:	8b 89       	ldd	r24, Y+19	; 0x13
    6270:	9c 89       	ldd	r25, Y+20	; 0x14
    6272:	98 8b       	std	Y+16, r25	; 0x10
    6274:	8f 87       	std	Y+15, r24	; 0x0f
    6276:	8f 85       	ldd	r24, Y+15	; 0x0f
    6278:	98 89       	ldd	r25, Y+16	; 0x10
    627a:	01 97       	sbiw	r24, 0x01	; 1
    627c:	f1 f7       	brne	.-4      	; 0x627a <LCD_vidWriteCharacter+0x122>
    627e:	98 8b       	std	Y+16, r25	; 0x10
    6280:	8f 87       	std	Y+15, r24	; 0x0f
	//wait tc time
	_delay_ms(1);
	//put E to high
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,HIGH);
    6282:	81 e0       	ldi	r24, 0x01	; 1
    6284:	67 e0       	ldi	r22, 0x07	; 7
    6286:	41 e0       	ldi	r20, 0x01	; 1
    6288:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    628c:	80 e0       	ldi	r24, 0x00	; 0
    628e:	90 e0       	ldi	r25, 0x00	; 0
    6290:	a0 e4       	ldi	r26, 0x40	; 64
    6292:	b0 e4       	ldi	r27, 0x40	; 64
    6294:	8b 87       	std	Y+11, r24	; 0x0b
    6296:	9c 87       	std	Y+12, r25	; 0x0c
    6298:	ad 87       	std	Y+13, r26	; 0x0d
    629a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    629c:	6b 85       	ldd	r22, Y+11	; 0x0b
    629e:	7c 85       	ldd	r23, Y+12	; 0x0c
    62a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    62a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    62a4:	20 e0       	ldi	r18, 0x00	; 0
    62a6:	30 e0       	ldi	r19, 0x00	; 0
    62a8:	4a ef       	ldi	r20, 0xFA	; 250
    62aa:	54 e4       	ldi	r21, 0x44	; 68
    62ac:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    62b0:	dc 01       	movw	r26, r24
    62b2:	cb 01       	movw	r24, r22
    62b4:	8f 83       	std	Y+7, r24	; 0x07
    62b6:	98 87       	std	Y+8, r25	; 0x08
    62b8:	a9 87       	std	Y+9, r26	; 0x09
    62ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    62bc:	6f 81       	ldd	r22, Y+7	; 0x07
    62be:	78 85       	ldd	r23, Y+8	; 0x08
    62c0:	89 85       	ldd	r24, Y+9	; 0x09
    62c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    62c4:	20 e0       	ldi	r18, 0x00	; 0
    62c6:	30 e0       	ldi	r19, 0x00	; 0
    62c8:	40 e8       	ldi	r20, 0x80	; 128
    62ca:	5f e3       	ldi	r21, 0x3F	; 63
    62cc:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    62d0:	88 23       	and	r24, r24
    62d2:	2c f4       	brge	.+10     	; 0x62de <LCD_vidWriteCharacter+0x186>
		__ticks = 1;
    62d4:	81 e0       	ldi	r24, 0x01	; 1
    62d6:	90 e0       	ldi	r25, 0x00	; 0
    62d8:	9e 83       	std	Y+6, r25	; 0x06
    62da:	8d 83       	std	Y+5, r24	; 0x05
    62dc:	3f c0       	rjmp	.+126    	; 0x635c <LCD_vidWriteCharacter+0x204>
	else if (__tmp > 65535)
    62de:	6f 81       	ldd	r22, Y+7	; 0x07
    62e0:	78 85       	ldd	r23, Y+8	; 0x08
    62e2:	89 85       	ldd	r24, Y+9	; 0x09
    62e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    62e6:	20 e0       	ldi	r18, 0x00	; 0
    62e8:	3f ef       	ldi	r19, 0xFF	; 255
    62ea:	4f e7       	ldi	r20, 0x7F	; 127
    62ec:	57 e4       	ldi	r21, 0x47	; 71
    62ee:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    62f2:	18 16       	cp	r1, r24
    62f4:	4c f5       	brge	.+82     	; 0x6348 <LCD_vidWriteCharacter+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    62f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    62fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    62fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    62fe:	20 e0       	ldi	r18, 0x00	; 0
    6300:	30 e0       	ldi	r19, 0x00	; 0
    6302:	40 e2       	ldi	r20, 0x20	; 32
    6304:	51 e4       	ldi	r21, 0x41	; 65
    6306:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    630a:	dc 01       	movw	r26, r24
    630c:	cb 01       	movw	r24, r22
    630e:	bc 01       	movw	r22, r24
    6310:	cd 01       	movw	r24, r26
    6312:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    6316:	dc 01       	movw	r26, r24
    6318:	cb 01       	movw	r24, r22
    631a:	9e 83       	std	Y+6, r25	; 0x06
    631c:	8d 83       	std	Y+5, r24	; 0x05
    631e:	0f c0       	rjmp	.+30     	; 0x633e <LCD_vidWriteCharacter+0x1e6>
    6320:	88 ec       	ldi	r24, 0xC8	; 200
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	9c 83       	std	Y+4, r25	; 0x04
    6326:	8b 83       	std	Y+3, r24	; 0x03
    6328:	8b 81       	ldd	r24, Y+3	; 0x03
    632a:	9c 81       	ldd	r25, Y+4	; 0x04
    632c:	01 97       	sbiw	r24, 0x01	; 1
    632e:	f1 f7       	brne	.-4      	; 0x632c <LCD_vidWriteCharacter+0x1d4>
    6330:	9c 83       	std	Y+4, r25	; 0x04
    6332:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6334:	8d 81       	ldd	r24, Y+5	; 0x05
    6336:	9e 81       	ldd	r25, Y+6	; 0x06
    6338:	01 97       	sbiw	r24, 0x01	; 1
    633a:	9e 83       	std	Y+6, r25	; 0x06
    633c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    633e:	8d 81       	ldd	r24, Y+5	; 0x05
    6340:	9e 81       	ldd	r25, Y+6	; 0x06
    6342:	00 97       	sbiw	r24, 0x00	; 0
    6344:	69 f7       	brne	.-38     	; 0x6320 <LCD_vidWriteCharacter+0x1c8>
    6346:	14 c0       	rjmp	.+40     	; 0x6370 <LCD_vidWriteCharacter+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6348:	6f 81       	ldd	r22, Y+7	; 0x07
    634a:	78 85       	ldd	r23, Y+8	; 0x08
    634c:	89 85       	ldd	r24, Y+9	; 0x09
    634e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6350:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    6354:	dc 01       	movw	r26, r24
    6356:	cb 01       	movw	r24, r22
    6358:	9e 83       	std	Y+6, r25	; 0x06
    635a:	8d 83       	std	Y+5, r24	; 0x05
    635c:	8d 81       	ldd	r24, Y+5	; 0x05
    635e:	9e 81       	ldd	r25, Y+6	; 0x06
    6360:	9a 83       	std	Y+2, r25	; 0x02
    6362:	89 83       	std	Y+1, r24	; 0x01
    6364:	89 81       	ldd	r24, Y+1	; 0x01
    6366:	9a 81       	ldd	r25, Y+2	; 0x02
    6368:	01 97       	sbiw	r24, 0x01	; 1
    636a:	f1 f7       	brne	.-4      	; 0x6368 <LCD_vidWriteCharacter+0x210>
    636c:	9a 83       	std	Y+2, r25	; 0x02
    636e:	89 83       	std	Y+1, r24	; 0x01
	//wait to let lcd excute the command
	_delay_ms(3);
}
    6370:	6d 96       	adiw	r28, 0x1d	; 29
    6372:	0f b6       	in	r0, 0x3f	; 63
    6374:	f8 94       	cli
    6376:	de bf       	out	0x3e, r29	; 62
    6378:	0f be       	out	0x3f, r0	; 63
    637a:	cd bf       	out	0x3d, r28	; 61
    637c:	cf 91       	pop	r28
    637e:	df 91       	pop	r29
    6380:	08 95       	ret

00006382 <LCD_vidSendCommand4>:

//....................................................................

void LCD_vidSendCommand4(uint8 u8CommandCpy)
{
    6382:	df 93       	push	r29
    6384:	cf 93       	push	r28
    6386:	0f 92       	push	r0
    6388:	cd b7       	in	r28, 0x3d	; 61
    638a:	de b7       	in	r29, 0x3e	; 62
    638c:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidSendCommand( ( GET_NippleH(u8CommandCpy))<<4 );
    638e:	89 81       	ldd	r24, Y+1	; 0x01
    6390:	80 7f       	andi	r24, 0xF0	; 240
    6392:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
	LCD_vidSendCommand(  (GET_NippleL(u8CommandCpy))<<4 );
    6396:	89 81       	ldd	r24, Y+1	; 0x01
    6398:	88 2f       	mov	r24, r24
    639a:	90 e0       	ldi	r25, 0x00	; 0
    639c:	82 95       	swap	r24
    639e:	92 95       	swap	r25
    63a0:	90 7f       	andi	r25, 0xF0	; 240
    63a2:	98 27       	eor	r25, r24
    63a4:	80 7f       	andi	r24, 0xF0	; 240
    63a6:	98 27       	eor	r25, r24
    63a8:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
}
    63ac:	0f 90       	pop	r0
    63ae:	cf 91       	pop	r28
    63b0:	df 91       	pop	r29
    63b2:	08 95       	ret

000063b4 <LCD_vidInit4>:
//........................................................................................
\
void LCD_vidInit4(void)
{
    63b4:	0f 93       	push	r16
    63b6:	1f 93       	push	r17
    63b8:	df 93       	push	r29
    63ba:	cf 93       	push	r28
    63bc:	cd b7       	in	r28, 0x3d	; 61
    63be:	de b7       	in	r29, 0x3e	; 62
    63c0:	c6 54       	subi	r28, 0x46	; 70
    63c2:	d0 40       	sbci	r29, 0x00	; 0
    63c4:	0f b6       	in	r0, 0x3f	; 63
    63c6:	f8 94       	cli
    63c8:	de bf       	out	0x3e, r29	; 62
    63ca:	0f be       	out	0x3f, r0	; 63
    63cc:	cd bf       	out	0x3d, r28	; 61
    63ce:	fe 01       	movw	r30, r28
    63d0:	ed 5b       	subi	r30, 0xBD	; 189
    63d2:	ff 4f       	sbci	r31, 0xFF	; 255
    63d4:	80 e0       	ldi	r24, 0x00	; 0
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	a8 e4       	ldi	r26, 0x48	; 72
    63da:	b2 e4       	ldi	r27, 0x42	; 66
    63dc:	80 83       	st	Z, r24
    63de:	91 83       	std	Z+1, r25	; 0x01
    63e0:	a2 83       	std	Z+2, r26	; 0x02
    63e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63e4:	8e 01       	movw	r16, r28
    63e6:	01 5c       	subi	r16, 0xC1	; 193
    63e8:	1f 4f       	sbci	r17, 0xFF	; 255
    63ea:	fe 01       	movw	r30, r28
    63ec:	ed 5b       	subi	r30, 0xBD	; 189
    63ee:	ff 4f       	sbci	r31, 0xFF	; 255
    63f0:	60 81       	ld	r22, Z
    63f2:	71 81       	ldd	r23, Z+1	; 0x01
    63f4:	82 81       	ldd	r24, Z+2	; 0x02
    63f6:	93 81       	ldd	r25, Z+3	; 0x03
    63f8:	20 e0       	ldi	r18, 0x00	; 0
    63fa:	30 e0       	ldi	r19, 0x00	; 0
    63fc:	4a ef       	ldi	r20, 0xFA	; 250
    63fe:	54 e4       	ldi	r21, 0x44	; 68
    6400:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    6404:	dc 01       	movw	r26, r24
    6406:	cb 01       	movw	r24, r22
    6408:	f8 01       	movw	r30, r16
    640a:	80 83       	st	Z, r24
    640c:	91 83       	std	Z+1, r25	; 0x01
    640e:	a2 83       	std	Z+2, r26	; 0x02
    6410:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6412:	fe 01       	movw	r30, r28
    6414:	ff 96       	adiw	r30, 0x3f	; 63
    6416:	60 81       	ld	r22, Z
    6418:	71 81       	ldd	r23, Z+1	; 0x01
    641a:	82 81       	ldd	r24, Z+2	; 0x02
    641c:	93 81       	ldd	r25, Z+3	; 0x03
    641e:	20 e0       	ldi	r18, 0x00	; 0
    6420:	30 e0       	ldi	r19, 0x00	; 0
    6422:	40 e8       	ldi	r20, 0x80	; 128
    6424:	5f e3       	ldi	r21, 0x3F	; 63
    6426:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    642a:	88 23       	and	r24, r24
    642c:	2c f4       	brge	.+10     	; 0x6438 <LCD_vidInit4+0x84>
		__ticks = 1;
    642e:	81 e0       	ldi	r24, 0x01	; 1
    6430:	90 e0       	ldi	r25, 0x00	; 0
    6432:	9e af       	std	Y+62, r25	; 0x3e
    6434:	8d af       	std	Y+61, r24	; 0x3d
    6436:	46 c0       	rjmp	.+140    	; 0x64c4 <LCD_vidInit4+0x110>
	else if (__tmp > 65535)
    6438:	fe 01       	movw	r30, r28
    643a:	ff 96       	adiw	r30, 0x3f	; 63
    643c:	60 81       	ld	r22, Z
    643e:	71 81       	ldd	r23, Z+1	; 0x01
    6440:	82 81       	ldd	r24, Z+2	; 0x02
    6442:	93 81       	ldd	r25, Z+3	; 0x03
    6444:	20 e0       	ldi	r18, 0x00	; 0
    6446:	3f ef       	ldi	r19, 0xFF	; 255
    6448:	4f e7       	ldi	r20, 0x7F	; 127
    644a:	57 e4       	ldi	r21, 0x47	; 71
    644c:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    6450:	18 16       	cp	r1, r24
    6452:	64 f5       	brge	.+88     	; 0x64ac <LCD_vidInit4+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6454:	fe 01       	movw	r30, r28
    6456:	ed 5b       	subi	r30, 0xBD	; 189
    6458:	ff 4f       	sbci	r31, 0xFF	; 255
    645a:	60 81       	ld	r22, Z
    645c:	71 81       	ldd	r23, Z+1	; 0x01
    645e:	82 81       	ldd	r24, Z+2	; 0x02
    6460:	93 81       	ldd	r25, Z+3	; 0x03
    6462:	20 e0       	ldi	r18, 0x00	; 0
    6464:	30 e0       	ldi	r19, 0x00	; 0
    6466:	40 e2       	ldi	r20, 0x20	; 32
    6468:	51 e4       	ldi	r21, 0x41	; 65
    646a:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    646e:	dc 01       	movw	r26, r24
    6470:	cb 01       	movw	r24, r22
    6472:	bc 01       	movw	r22, r24
    6474:	cd 01       	movw	r24, r26
    6476:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    647a:	dc 01       	movw	r26, r24
    647c:	cb 01       	movw	r24, r22
    647e:	9e af       	std	Y+62, r25	; 0x3e
    6480:	8d af       	std	Y+61, r24	; 0x3d
    6482:	0f c0       	rjmp	.+30     	; 0x64a2 <LCD_vidInit4+0xee>
    6484:	88 ec       	ldi	r24, 0xC8	; 200
    6486:	90 e0       	ldi	r25, 0x00	; 0
    6488:	9c af       	std	Y+60, r25	; 0x3c
    648a:	8b af       	std	Y+59, r24	; 0x3b
    648c:	8b ad       	ldd	r24, Y+59	; 0x3b
    648e:	9c ad       	ldd	r25, Y+60	; 0x3c
    6490:	01 97       	sbiw	r24, 0x01	; 1
    6492:	f1 f7       	brne	.-4      	; 0x6490 <LCD_vidInit4+0xdc>
    6494:	9c af       	std	Y+60, r25	; 0x3c
    6496:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6498:	8d ad       	ldd	r24, Y+61	; 0x3d
    649a:	9e ad       	ldd	r25, Y+62	; 0x3e
    649c:	01 97       	sbiw	r24, 0x01	; 1
    649e:	9e af       	std	Y+62, r25	; 0x3e
    64a0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    64a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    64a6:	00 97       	sbiw	r24, 0x00	; 0
    64a8:	69 f7       	brne	.-38     	; 0x6484 <LCD_vidInit4+0xd0>
    64aa:	16 c0       	rjmp	.+44     	; 0x64d8 <LCD_vidInit4+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64ac:	fe 01       	movw	r30, r28
    64ae:	ff 96       	adiw	r30, 0x3f	; 63
    64b0:	60 81       	ld	r22, Z
    64b2:	71 81       	ldd	r23, Z+1	; 0x01
    64b4:	82 81       	ldd	r24, Z+2	; 0x02
    64b6:	93 81       	ldd	r25, Z+3	; 0x03
    64b8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    64bc:	dc 01       	movw	r26, r24
    64be:	cb 01       	movw	r24, r22
    64c0:	9e af       	std	Y+62, r25	; 0x3e
    64c2:	8d af       	std	Y+61, r24	; 0x3d
    64c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    64c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    64c8:	9a af       	std	Y+58, r25	; 0x3a
    64ca:	89 af       	std	Y+57, r24	; 0x39
    64cc:	89 ad       	ldd	r24, Y+57	; 0x39
    64ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    64d0:	01 97       	sbiw	r24, 0x01	; 1
    64d2:	f1 f7       	brne	.-4      	; 0x64d0 <LCD_vidInit4+0x11c>
    64d4:	9a af       	std	Y+58, r25	; 0x3a
    64d6:	89 af       	std	Y+57, r24	; 0x39
	 //wait for a time
	  _delay_ms(50);

	  //function  set
	  LCD_vidSendCommand(0b00100000);
    64d8:	80 e2       	ldi	r24, 0x20	; 32
    64da:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
	  LCD_vidSendCommand(0b00100000);
    64de:	80 e2       	ldi	r24, 0x20	; 32
    64e0:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
	  LCD_vidSendCommand(0b11000000);
    64e4:	80 ec       	ldi	r24, 0xC0	; 192
    64e6:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
    64ea:	80 e0       	ldi	r24, 0x00	; 0
    64ec:	90 e0       	ldi	r25, 0x00	; 0
    64ee:	a8 e4       	ldi	r26, 0x48	; 72
    64f0:	b2 e4       	ldi	r27, 0x42	; 66
    64f2:	8d ab       	std	Y+53, r24	; 0x35
    64f4:	9e ab       	std	Y+54, r25	; 0x36
    64f6:	af ab       	std	Y+55, r26	; 0x37
    64f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64fa:	6d a9       	ldd	r22, Y+53	; 0x35
    64fc:	7e a9       	ldd	r23, Y+54	; 0x36
    64fe:	8f a9       	ldd	r24, Y+55	; 0x37
    6500:	98 ad       	ldd	r25, Y+56	; 0x38
    6502:	20 e0       	ldi	r18, 0x00	; 0
    6504:	30 e0       	ldi	r19, 0x00	; 0
    6506:	4a ef       	ldi	r20, 0xFA	; 250
    6508:	54 e4       	ldi	r21, 0x44	; 68
    650a:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    650e:	dc 01       	movw	r26, r24
    6510:	cb 01       	movw	r24, r22
    6512:	89 ab       	std	Y+49, r24	; 0x31
    6514:	9a ab       	std	Y+50, r25	; 0x32
    6516:	ab ab       	std	Y+51, r26	; 0x33
    6518:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    651a:	69 a9       	ldd	r22, Y+49	; 0x31
    651c:	7a a9       	ldd	r23, Y+50	; 0x32
    651e:	8b a9       	ldd	r24, Y+51	; 0x33
    6520:	9c a9       	ldd	r25, Y+52	; 0x34
    6522:	20 e0       	ldi	r18, 0x00	; 0
    6524:	30 e0       	ldi	r19, 0x00	; 0
    6526:	40 e8       	ldi	r20, 0x80	; 128
    6528:	5f e3       	ldi	r21, 0x3F	; 63
    652a:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    652e:	88 23       	and	r24, r24
    6530:	2c f4       	brge	.+10     	; 0x653c <LCD_vidInit4+0x188>
		__ticks = 1;
    6532:	81 e0       	ldi	r24, 0x01	; 1
    6534:	90 e0       	ldi	r25, 0x00	; 0
    6536:	98 ab       	std	Y+48, r25	; 0x30
    6538:	8f a7       	std	Y+47, r24	; 0x2f
    653a:	3f c0       	rjmp	.+126    	; 0x65ba <LCD_vidInit4+0x206>
	else if (__tmp > 65535)
    653c:	69 a9       	ldd	r22, Y+49	; 0x31
    653e:	7a a9       	ldd	r23, Y+50	; 0x32
    6540:	8b a9       	ldd	r24, Y+51	; 0x33
    6542:	9c a9       	ldd	r25, Y+52	; 0x34
    6544:	20 e0       	ldi	r18, 0x00	; 0
    6546:	3f ef       	ldi	r19, 0xFF	; 255
    6548:	4f e7       	ldi	r20, 0x7F	; 127
    654a:	57 e4       	ldi	r21, 0x47	; 71
    654c:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    6550:	18 16       	cp	r1, r24
    6552:	4c f5       	brge	.+82     	; 0x65a6 <LCD_vidInit4+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6554:	6d a9       	ldd	r22, Y+53	; 0x35
    6556:	7e a9       	ldd	r23, Y+54	; 0x36
    6558:	8f a9       	ldd	r24, Y+55	; 0x37
    655a:	98 ad       	ldd	r25, Y+56	; 0x38
    655c:	20 e0       	ldi	r18, 0x00	; 0
    655e:	30 e0       	ldi	r19, 0x00	; 0
    6560:	40 e2       	ldi	r20, 0x20	; 32
    6562:	51 e4       	ldi	r21, 0x41	; 65
    6564:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    6568:	dc 01       	movw	r26, r24
    656a:	cb 01       	movw	r24, r22
    656c:	bc 01       	movw	r22, r24
    656e:	cd 01       	movw	r24, r26
    6570:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    6574:	dc 01       	movw	r26, r24
    6576:	cb 01       	movw	r24, r22
    6578:	98 ab       	std	Y+48, r25	; 0x30
    657a:	8f a7       	std	Y+47, r24	; 0x2f
    657c:	0f c0       	rjmp	.+30     	; 0x659c <LCD_vidInit4+0x1e8>
    657e:	88 ec       	ldi	r24, 0xC8	; 200
    6580:	90 e0       	ldi	r25, 0x00	; 0
    6582:	9e a7       	std	Y+46, r25	; 0x2e
    6584:	8d a7       	std	Y+45, r24	; 0x2d
    6586:	8d a5       	ldd	r24, Y+45	; 0x2d
    6588:	9e a5       	ldd	r25, Y+46	; 0x2e
    658a:	01 97       	sbiw	r24, 0x01	; 1
    658c:	f1 f7       	brne	.-4      	; 0x658a <LCD_vidInit4+0x1d6>
    658e:	9e a7       	std	Y+46, r25	; 0x2e
    6590:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6592:	8f a5       	ldd	r24, Y+47	; 0x2f
    6594:	98 a9       	ldd	r25, Y+48	; 0x30
    6596:	01 97       	sbiw	r24, 0x01	; 1
    6598:	98 ab       	std	Y+48, r25	; 0x30
    659a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    659c:	8f a5       	ldd	r24, Y+47	; 0x2f
    659e:	98 a9       	ldd	r25, Y+48	; 0x30
    65a0:	00 97       	sbiw	r24, 0x00	; 0
    65a2:	69 f7       	brne	.-38     	; 0x657e <LCD_vidInit4+0x1ca>
    65a4:	14 c0       	rjmp	.+40     	; 0x65ce <LCD_vidInit4+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65a6:	69 a9       	ldd	r22, Y+49	; 0x31
    65a8:	7a a9       	ldd	r23, Y+50	; 0x32
    65aa:	8b a9       	ldd	r24, Y+51	; 0x33
    65ac:	9c a9       	ldd	r25, Y+52	; 0x34
    65ae:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    65b2:	dc 01       	movw	r26, r24
    65b4:	cb 01       	movw	r24, r22
    65b6:	98 ab       	std	Y+48, r25	; 0x30
    65b8:	8f a7       	std	Y+47, r24	; 0x2f
    65ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    65bc:	98 a9       	ldd	r25, Y+48	; 0x30
    65be:	9c a7       	std	Y+44, r25	; 0x2c
    65c0:	8b a7       	std	Y+43, r24	; 0x2b
    65c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    65c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    65c6:	01 97       	sbiw	r24, 0x01	; 1
    65c8:	f1 f7       	brne	.-4      	; 0x65c6 <LCD_vidInit4+0x212>
    65ca:	9c a7       	std	Y+44, r25	; 0x2c
    65cc:	8b a7       	std	Y+43, r24	; 0x2b

	  //wait for a time
	  _delay_ms(50);

	  //display on off
	  LCD_vidSendCommand(0b00000000);
    65ce:	80 e0       	ldi	r24, 0x00	; 0
    65d0:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
	  LCD_vidSendCommand(0b11100000);
    65d4:	80 ee       	ldi	r24, 0xE0	; 224
    65d6:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
    65da:	80 e0       	ldi	r24, 0x00	; 0
    65dc:	90 e0       	ldi	r25, 0x00	; 0
    65de:	a0 ef       	ldi	r26, 0xF0	; 240
    65e0:	b1 e4       	ldi	r27, 0x41	; 65
    65e2:	8f a3       	std	Y+39, r24	; 0x27
    65e4:	98 a7       	std	Y+40, r25	; 0x28
    65e6:	a9 a7       	std	Y+41, r26	; 0x29
    65e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65ea:	6f a1       	ldd	r22, Y+39	; 0x27
    65ec:	78 a5       	ldd	r23, Y+40	; 0x28
    65ee:	89 a5       	ldd	r24, Y+41	; 0x29
    65f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    65f2:	20 e0       	ldi	r18, 0x00	; 0
    65f4:	30 e0       	ldi	r19, 0x00	; 0
    65f6:	4a ef       	ldi	r20, 0xFA	; 250
    65f8:	54 e4       	ldi	r21, 0x44	; 68
    65fa:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    65fe:	dc 01       	movw	r26, r24
    6600:	cb 01       	movw	r24, r22
    6602:	8b a3       	std	Y+35, r24	; 0x23
    6604:	9c a3       	std	Y+36, r25	; 0x24
    6606:	ad a3       	std	Y+37, r26	; 0x25
    6608:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    660a:	6b a1       	ldd	r22, Y+35	; 0x23
    660c:	7c a1       	ldd	r23, Y+36	; 0x24
    660e:	8d a1       	ldd	r24, Y+37	; 0x25
    6610:	9e a1       	ldd	r25, Y+38	; 0x26
    6612:	20 e0       	ldi	r18, 0x00	; 0
    6614:	30 e0       	ldi	r19, 0x00	; 0
    6616:	40 e8       	ldi	r20, 0x80	; 128
    6618:	5f e3       	ldi	r21, 0x3F	; 63
    661a:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    661e:	88 23       	and	r24, r24
    6620:	2c f4       	brge	.+10     	; 0x662c <LCD_vidInit4+0x278>
		__ticks = 1;
    6622:	81 e0       	ldi	r24, 0x01	; 1
    6624:	90 e0       	ldi	r25, 0x00	; 0
    6626:	9a a3       	std	Y+34, r25	; 0x22
    6628:	89 a3       	std	Y+33, r24	; 0x21
    662a:	3f c0       	rjmp	.+126    	; 0x66aa <LCD_vidInit4+0x2f6>
	else if (__tmp > 65535)
    662c:	6b a1       	ldd	r22, Y+35	; 0x23
    662e:	7c a1       	ldd	r23, Y+36	; 0x24
    6630:	8d a1       	ldd	r24, Y+37	; 0x25
    6632:	9e a1       	ldd	r25, Y+38	; 0x26
    6634:	20 e0       	ldi	r18, 0x00	; 0
    6636:	3f ef       	ldi	r19, 0xFF	; 255
    6638:	4f e7       	ldi	r20, 0x7F	; 127
    663a:	57 e4       	ldi	r21, 0x47	; 71
    663c:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    6640:	18 16       	cp	r1, r24
    6642:	4c f5       	brge	.+82     	; 0x6696 <LCD_vidInit4+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6644:	6f a1       	ldd	r22, Y+39	; 0x27
    6646:	78 a5       	ldd	r23, Y+40	; 0x28
    6648:	89 a5       	ldd	r24, Y+41	; 0x29
    664a:	9a a5       	ldd	r25, Y+42	; 0x2a
    664c:	20 e0       	ldi	r18, 0x00	; 0
    664e:	30 e0       	ldi	r19, 0x00	; 0
    6650:	40 e2       	ldi	r20, 0x20	; 32
    6652:	51 e4       	ldi	r21, 0x41	; 65
    6654:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    6658:	dc 01       	movw	r26, r24
    665a:	cb 01       	movw	r24, r22
    665c:	bc 01       	movw	r22, r24
    665e:	cd 01       	movw	r24, r26
    6660:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    6664:	dc 01       	movw	r26, r24
    6666:	cb 01       	movw	r24, r22
    6668:	9a a3       	std	Y+34, r25	; 0x22
    666a:	89 a3       	std	Y+33, r24	; 0x21
    666c:	0f c0       	rjmp	.+30     	; 0x668c <LCD_vidInit4+0x2d8>
    666e:	88 ec       	ldi	r24, 0xC8	; 200
    6670:	90 e0       	ldi	r25, 0x00	; 0
    6672:	98 a3       	std	Y+32, r25	; 0x20
    6674:	8f 8f       	std	Y+31, r24	; 0x1f
    6676:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6678:	98 a1       	ldd	r25, Y+32	; 0x20
    667a:	01 97       	sbiw	r24, 0x01	; 1
    667c:	f1 f7       	brne	.-4      	; 0x667a <LCD_vidInit4+0x2c6>
    667e:	98 a3       	std	Y+32, r25	; 0x20
    6680:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6682:	89 a1       	ldd	r24, Y+33	; 0x21
    6684:	9a a1       	ldd	r25, Y+34	; 0x22
    6686:	01 97       	sbiw	r24, 0x01	; 1
    6688:	9a a3       	std	Y+34, r25	; 0x22
    668a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    668c:	89 a1       	ldd	r24, Y+33	; 0x21
    668e:	9a a1       	ldd	r25, Y+34	; 0x22
    6690:	00 97       	sbiw	r24, 0x00	; 0
    6692:	69 f7       	brne	.-38     	; 0x666e <LCD_vidInit4+0x2ba>
    6694:	14 c0       	rjmp	.+40     	; 0x66be <LCD_vidInit4+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6696:	6b a1       	ldd	r22, Y+35	; 0x23
    6698:	7c a1       	ldd	r23, Y+36	; 0x24
    669a:	8d a1       	ldd	r24, Y+37	; 0x25
    669c:	9e a1       	ldd	r25, Y+38	; 0x26
    669e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    66a2:	dc 01       	movw	r26, r24
    66a4:	cb 01       	movw	r24, r22
    66a6:	9a a3       	std	Y+34, r25	; 0x22
    66a8:	89 a3       	std	Y+33, r24	; 0x21
    66aa:	89 a1       	ldd	r24, Y+33	; 0x21
    66ac:	9a a1       	ldd	r25, Y+34	; 0x22
    66ae:	9e 8f       	std	Y+30, r25	; 0x1e
    66b0:	8d 8f       	std	Y+29, r24	; 0x1d
    66b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    66b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    66b6:	01 97       	sbiw	r24, 0x01	; 1
    66b8:	f1 f7       	brne	.-4      	; 0x66b6 <LCD_vidInit4+0x302>
    66ba:	9e 8f       	std	Y+30, r25	; 0x1e
    66bc:	8d 8f       	std	Y+29, r24	; 0x1d

	  //wait for a time
	  _delay_ms(30);

	  //display clear
	  LCD_vidSendCommand(0b00000000);
    66be:	80 e0       	ldi	r24, 0x00	; 0
    66c0:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
	  LCD_vidSendCommand(0b00010000);
    66c4:	80 e1       	ldi	r24, 0x10	; 16
    66c6:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
    66ca:	80 e0       	ldi	r24, 0x00	; 0
    66cc:	90 e0       	ldi	r25, 0x00	; 0
    66ce:	a0 ef       	ldi	r26, 0xF0	; 240
    66d0:	b1 e4       	ldi	r27, 0x41	; 65
    66d2:	89 8f       	std	Y+25, r24	; 0x19
    66d4:	9a 8f       	std	Y+26, r25	; 0x1a
    66d6:	ab 8f       	std	Y+27, r26	; 0x1b
    66d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66da:	69 8d       	ldd	r22, Y+25	; 0x19
    66dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    66de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    66e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    66e2:	20 e0       	ldi	r18, 0x00	; 0
    66e4:	30 e0       	ldi	r19, 0x00	; 0
    66e6:	4a ef       	ldi	r20, 0xFA	; 250
    66e8:	54 e4       	ldi	r21, 0x44	; 68
    66ea:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    66ee:	dc 01       	movw	r26, r24
    66f0:	cb 01       	movw	r24, r22
    66f2:	8d 8b       	std	Y+21, r24	; 0x15
    66f4:	9e 8b       	std	Y+22, r25	; 0x16
    66f6:	af 8b       	std	Y+23, r26	; 0x17
    66f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    66fa:	6d 89       	ldd	r22, Y+21	; 0x15
    66fc:	7e 89       	ldd	r23, Y+22	; 0x16
    66fe:	8f 89       	ldd	r24, Y+23	; 0x17
    6700:	98 8d       	ldd	r25, Y+24	; 0x18
    6702:	20 e0       	ldi	r18, 0x00	; 0
    6704:	30 e0       	ldi	r19, 0x00	; 0
    6706:	40 e8       	ldi	r20, 0x80	; 128
    6708:	5f e3       	ldi	r21, 0x3F	; 63
    670a:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    670e:	88 23       	and	r24, r24
    6710:	2c f4       	brge	.+10     	; 0x671c <LCD_vidInit4+0x368>
		__ticks = 1;
    6712:	81 e0       	ldi	r24, 0x01	; 1
    6714:	90 e0       	ldi	r25, 0x00	; 0
    6716:	9c 8b       	std	Y+20, r25	; 0x14
    6718:	8b 8b       	std	Y+19, r24	; 0x13
    671a:	3f c0       	rjmp	.+126    	; 0x679a <LCD_vidInit4+0x3e6>
	else if (__tmp > 65535)
    671c:	6d 89       	ldd	r22, Y+21	; 0x15
    671e:	7e 89       	ldd	r23, Y+22	; 0x16
    6720:	8f 89       	ldd	r24, Y+23	; 0x17
    6722:	98 8d       	ldd	r25, Y+24	; 0x18
    6724:	20 e0       	ldi	r18, 0x00	; 0
    6726:	3f ef       	ldi	r19, 0xFF	; 255
    6728:	4f e7       	ldi	r20, 0x7F	; 127
    672a:	57 e4       	ldi	r21, 0x47	; 71
    672c:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    6730:	18 16       	cp	r1, r24
    6732:	4c f5       	brge	.+82     	; 0x6786 <LCD_vidInit4+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6734:	69 8d       	ldd	r22, Y+25	; 0x19
    6736:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6738:	8b 8d       	ldd	r24, Y+27	; 0x1b
    673a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    673c:	20 e0       	ldi	r18, 0x00	; 0
    673e:	30 e0       	ldi	r19, 0x00	; 0
    6740:	40 e2       	ldi	r20, 0x20	; 32
    6742:	51 e4       	ldi	r21, 0x41	; 65
    6744:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    6748:	dc 01       	movw	r26, r24
    674a:	cb 01       	movw	r24, r22
    674c:	bc 01       	movw	r22, r24
    674e:	cd 01       	movw	r24, r26
    6750:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    6754:	dc 01       	movw	r26, r24
    6756:	cb 01       	movw	r24, r22
    6758:	9c 8b       	std	Y+20, r25	; 0x14
    675a:	8b 8b       	std	Y+19, r24	; 0x13
    675c:	0f c0       	rjmp	.+30     	; 0x677c <LCD_vidInit4+0x3c8>
    675e:	88 ec       	ldi	r24, 0xC8	; 200
    6760:	90 e0       	ldi	r25, 0x00	; 0
    6762:	9a 8b       	std	Y+18, r25	; 0x12
    6764:	89 8b       	std	Y+17, r24	; 0x11
    6766:	89 89       	ldd	r24, Y+17	; 0x11
    6768:	9a 89       	ldd	r25, Y+18	; 0x12
    676a:	01 97       	sbiw	r24, 0x01	; 1
    676c:	f1 f7       	brne	.-4      	; 0x676a <LCD_vidInit4+0x3b6>
    676e:	9a 8b       	std	Y+18, r25	; 0x12
    6770:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6772:	8b 89       	ldd	r24, Y+19	; 0x13
    6774:	9c 89       	ldd	r25, Y+20	; 0x14
    6776:	01 97       	sbiw	r24, 0x01	; 1
    6778:	9c 8b       	std	Y+20, r25	; 0x14
    677a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    677c:	8b 89       	ldd	r24, Y+19	; 0x13
    677e:	9c 89       	ldd	r25, Y+20	; 0x14
    6780:	00 97       	sbiw	r24, 0x00	; 0
    6782:	69 f7       	brne	.-38     	; 0x675e <LCD_vidInit4+0x3aa>
    6784:	14 c0       	rjmp	.+40     	; 0x67ae <LCD_vidInit4+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6786:	6d 89       	ldd	r22, Y+21	; 0x15
    6788:	7e 89       	ldd	r23, Y+22	; 0x16
    678a:	8f 89       	ldd	r24, Y+23	; 0x17
    678c:	98 8d       	ldd	r25, Y+24	; 0x18
    678e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    6792:	dc 01       	movw	r26, r24
    6794:	cb 01       	movw	r24, r22
    6796:	9c 8b       	std	Y+20, r25	; 0x14
    6798:	8b 8b       	std	Y+19, r24	; 0x13
    679a:	8b 89       	ldd	r24, Y+19	; 0x13
    679c:	9c 89       	ldd	r25, Y+20	; 0x14
    679e:	98 8b       	std	Y+16, r25	; 0x10
    67a0:	8f 87       	std	Y+15, r24	; 0x0f
    67a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    67a4:	98 89       	ldd	r25, Y+16	; 0x10
    67a6:	01 97       	sbiw	r24, 0x01	; 1
    67a8:	f1 f7       	brne	.-4      	; 0x67a6 <LCD_vidInit4+0x3f2>
    67aa:	98 8b       	std	Y+16, r25	; 0x10
    67ac:	8f 87       	std	Y+15, r24	; 0x0f

	  //wait for a time
	  _delay_ms(30);

	  //entry mode set
	 LCD_vidSendCommand(0b00000000);
    67ae:	80 e0       	ldi	r24, 0x00	; 0
    67b0:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
	  LCD_vidSendCommand(0b01100000);
    67b4:	80 e6       	ldi	r24, 0x60	; 96
    67b6:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
    67ba:	80 e0       	ldi	r24, 0x00	; 0
    67bc:	90 e0       	ldi	r25, 0x00	; 0
    67be:	a0 ef       	ldi	r26, 0xF0	; 240
    67c0:	b1 e4       	ldi	r27, 0x41	; 65
    67c2:	8b 87       	std	Y+11, r24	; 0x0b
    67c4:	9c 87       	std	Y+12, r25	; 0x0c
    67c6:	ad 87       	std	Y+13, r26	; 0x0d
    67c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    67cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    67ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    67d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    67d2:	20 e0       	ldi	r18, 0x00	; 0
    67d4:	30 e0       	ldi	r19, 0x00	; 0
    67d6:	4a ef       	ldi	r20, 0xFA	; 250
    67d8:	54 e4       	ldi	r21, 0x44	; 68
    67da:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    67de:	dc 01       	movw	r26, r24
    67e0:	cb 01       	movw	r24, r22
    67e2:	8f 83       	std	Y+7, r24	; 0x07
    67e4:	98 87       	std	Y+8, r25	; 0x08
    67e6:	a9 87       	std	Y+9, r26	; 0x09
    67e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    67ea:	6f 81       	ldd	r22, Y+7	; 0x07
    67ec:	78 85       	ldd	r23, Y+8	; 0x08
    67ee:	89 85       	ldd	r24, Y+9	; 0x09
    67f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    67f2:	20 e0       	ldi	r18, 0x00	; 0
    67f4:	30 e0       	ldi	r19, 0x00	; 0
    67f6:	40 e8       	ldi	r20, 0x80	; 128
    67f8:	5f e3       	ldi	r21, 0x3F	; 63
    67fa:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    67fe:	88 23       	and	r24, r24
    6800:	2c f4       	brge	.+10     	; 0x680c <LCD_vidInit4+0x458>
		__ticks = 1;
    6802:	81 e0       	ldi	r24, 0x01	; 1
    6804:	90 e0       	ldi	r25, 0x00	; 0
    6806:	9e 83       	std	Y+6, r25	; 0x06
    6808:	8d 83       	std	Y+5, r24	; 0x05
    680a:	3f c0       	rjmp	.+126    	; 0x688a <LCD_vidInit4+0x4d6>
	else if (__tmp > 65535)
    680c:	6f 81       	ldd	r22, Y+7	; 0x07
    680e:	78 85       	ldd	r23, Y+8	; 0x08
    6810:	89 85       	ldd	r24, Y+9	; 0x09
    6812:	9a 85       	ldd	r25, Y+10	; 0x0a
    6814:	20 e0       	ldi	r18, 0x00	; 0
    6816:	3f ef       	ldi	r19, 0xFF	; 255
    6818:	4f e7       	ldi	r20, 0x7F	; 127
    681a:	57 e4       	ldi	r21, 0x47	; 71
    681c:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    6820:	18 16       	cp	r1, r24
    6822:	4c f5       	brge	.+82     	; 0x6876 <LCD_vidInit4+0x4c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6824:	6b 85       	ldd	r22, Y+11	; 0x0b
    6826:	7c 85       	ldd	r23, Y+12	; 0x0c
    6828:	8d 85       	ldd	r24, Y+13	; 0x0d
    682a:	9e 85       	ldd	r25, Y+14	; 0x0e
    682c:	20 e0       	ldi	r18, 0x00	; 0
    682e:	30 e0       	ldi	r19, 0x00	; 0
    6830:	40 e2       	ldi	r20, 0x20	; 32
    6832:	51 e4       	ldi	r21, 0x41	; 65
    6834:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    6838:	dc 01       	movw	r26, r24
    683a:	cb 01       	movw	r24, r22
    683c:	bc 01       	movw	r22, r24
    683e:	cd 01       	movw	r24, r26
    6840:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    6844:	dc 01       	movw	r26, r24
    6846:	cb 01       	movw	r24, r22
    6848:	9e 83       	std	Y+6, r25	; 0x06
    684a:	8d 83       	std	Y+5, r24	; 0x05
    684c:	0f c0       	rjmp	.+30     	; 0x686c <LCD_vidInit4+0x4b8>
    684e:	88 ec       	ldi	r24, 0xC8	; 200
    6850:	90 e0       	ldi	r25, 0x00	; 0
    6852:	9c 83       	std	Y+4, r25	; 0x04
    6854:	8b 83       	std	Y+3, r24	; 0x03
    6856:	8b 81       	ldd	r24, Y+3	; 0x03
    6858:	9c 81       	ldd	r25, Y+4	; 0x04
    685a:	01 97       	sbiw	r24, 0x01	; 1
    685c:	f1 f7       	brne	.-4      	; 0x685a <LCD_vidInit4+0x4a6>
    685e:	9c 83       	std	Y+4, r25	; 0x04
    6860:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6862:	8d 81       	ldd	r24, Y+5	; 0x05
    6864:	9e 81       	ldd	r25, Y+6	; 0x06
    6866:	01 97       	sbiw	r24, 0x01	; 1
    6868:	9e 83       	std	Y+6, r25	; 0x06
    686a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    686c:	8d 81       	ldd	r24, Y+5	; 0x05
    686e:	9e 81       	ldd	r25, Y+6	; 0x06
    6870:	00 97       	sbiw	r24, 0x00	; 0
    6872:	69 f7       	brne	.-38     	; 0x684e <LCD_vidInit4+0x49a>
    6874:	14 c0       	rjmp	.+40     	; 0x689e <LCD_vidInit4+0x4ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6876:	6f 81       	ldd	r22, Y+7	; 0x07
    6878:	78 85       	ldd	r23, Y+8	; 0x08
    687a:	89 85       	ldd	r24, Y+9	; 0x09
    687c:	9a 85       	ldd	r25, Y+10	; 0x0a
    687e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    6882:	dc 01       	movw	r26, r24
    6884:	cb 01       	movw	r24, r22
    6886:	9e 83       	std	Y+6, r25	; 0x06
    6888:	8d 83       	std	Y+5, r24	; 0x05
    688a:	8d 81       	ldd	r24, Y+5	; 0x05
    688c:	9e 81       	ldd	r25, Y+6	; 0x06
    688e:	9a 83       	std	Y+2, r25	; 0x02
    6890:	89 83       	std	Y+1, r24	; 0x01
    6892:	89 81       	ldd	r24, Y+1	; 0x01
    6894:	9a 81       	ldd	r25, Y+2	; 0x02
    6896:	01 97       	sbiw	r24, 0x01	; 1
    6898:	f1 f7       	brne	.-4      	; 0x6896 <LCD_vidInit4+0x4e2>
    689a:	9a 83       	std	Y+2, r25	; 0x02
    689c:	89 83       	std	Y+1, r24	; 0x01

	  //wait for a time
	  _delay_ms(30);
}
    689e:	ca 5b       	subi	r28, 0xBA	; 186
    68a0:	df 4f       	sbci	r29, 0xFF	; 255
    68a2:	0f b6       	in	r0, 0x3f	; 63
    68a4:	f8 94       	cli
    68a6:	de bf       	out	0x3e, r29	; 62
    68a8:	0f be       	out	0x3f, r0	; 63
    68aa:	cd bf       	out	0x3d, r28	; 61
    68ac:	cf 91       	pop	r28
    68ae:	df 91       	pop	r29
    68b0:	1f 91       	pop	r17
    68b2:	0f 91       	pop	r16
    68b4:	08 95       	ret

000068b6 <LCD_vidWriteCharacter4>:

//....................................................................

void LCD_vidWriteCharacter4(uint8 u8DataCpy)
{
    68b6:	df 93       	push	r29
    68b8:	cf 93       	push	r28
    68ba:	0f 92       	push	r0
    68bc:	cd b7       	in	r28, 0x3d	; 61
    68be:	de b7       	in	r29, 0x3e	; 62
    68c0:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidWriteCharacter((GET_NippleH(u8DataCpy))<<4);
    68c2:	89 81       	ldd	r24, Y+1	; 0x01
    68c4:	80 7f       	andi	r24, 0xF0	; 240
    68c6:	0e 94 ac 30 	call	0x6158	; 0x6158 <LCD_vidWriteCharacter>
	LCD_vidWriteCharacter((GET_NippleL(u8DataCpy))<<4);
    68ca:	89 81       	ldd	r24, Y+1	; 0x01
    68cc:	88 2f       	mov	r24, r24
    68ce:	90 e0       	ldi	r25, 0x00	; 0
    68d0:	82 95       	swap	r24
    68d2:	92 95       	swap	r25
    68d4:	90 7f       	andi	r25, 0xF0	; 240
    68d6:	98 27       	eor	r25, r24
    68d8:	80 7f       	andi	r24, 0xF0	; 240
    68da:	98 27       	eor	r25, r24
    68dc:	0e 94 ac 30 	call	0x6158	; 0x6158 <LCD_vidWriteCharacter>
}
    68e0:	0f 90       	pop	r0
    68e2:	cf 91       	pop	r28
    68e4:	df 91       	pop	r29
    68e6:	08 95       	ret

000068e8 <LCD_vidWriteString>:


void LCD_vidWriteString(uint8 *pu8StringCpy)
{
    68e8:	df 93       	push	r29
    68ea:	cf 93       	push	r28
    68ec:	cd b7       	in	r28, 0x3d	; 61
    68ee:	de b7       	in	r29, 0x3e	; 62
    68f0:	61 97       	sbiw	r28, 0x11	; 17
    68f2:	0f b6       	in	r0, 0x3f	; 63
    68f4:	f8 94       	cli
    68f6:	de bf       	out	0x3e, r29	; 62
    68f8:	0f be       	out	0x3f, r0	; 63
    68fa:	cd bf       	out	0x3d, r28	; 61
    68fc:	99 8b       	std	Y+17, r25	; 0x11
    68fe:	88 8b       	std	Y+16, r24	; 0x10
	uint8 u8_index=0;
    6900:	1f 86       	std	Y+15, r1	; 0x0f
    6902:	80 c0       	rjmp	.+256    	; 0x6a04 <LCD_vidWriteString+0x11c>

	while(pu8StringCpy[u8_index]!='\0')

	{
		LCD_vidWriteCharacter(pu8StringCpy[u8_index]);
    6904:	8f 85       	ldd	r24, Y+15	; 0x0f
    6906:	28 2f       	mov	r18, r24
    6908:	30 e0       	ldi	r19, 0x00	; 0
    690a:	88 89       	ldd	r24, Y+16	; 0x10
    690c:	99 89       	ldd	r25, Y+17	; 0x11
    690e:	fc 01       	movw	r30, r24
    6910:	e2 0f       	add	r30, r18
    6912:	f3 1f       	adc	r31, r19
    6914:	80 81       	ld	r24, Z
    6916:	0e 94 ac 30 	call	0x6158	; 0x6158 <LCD_vidWriteCharacter>
		u8_index++;
    691a:	8f 85       	ldd	r24, Y+15	; 0x0f
    691c:	8f 5f       	subi	r24, 0xFF	; 255
    691e:	8f 87       	std	Y+15, r24	; 0x0f
    6920:	80 e0       	ldi	r24, 0x00	; 0
    6922:	90 e0       	ldi	r25, 0x00	; 0
    6924:	a0 e0       	ldi	r26, 0x00	; 0
    6926:	b0 e4       	ldi	r27, 0x40	; 64
    6928:	8b 87       	std	Y+11, r24	; 0x0b
    692a:	9c 87       	std	Y+12, r25	; 0x0c
    692c:	ad 87       	std	Y+13, r26	; 0x0d
    692e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6930:	6b 85       	ldd	r22, Y+11	; 0x0b
    6932:	7c 85       	ldd	r23, Y+12	; 0x0c
    6934:	8d 85       	ldd	r24, Y+13	; 0x0d
    6936:	9e 85       	ldd	r25, Y+14	; 0x0e
    6938:	20 e0       	ldi	r18, 0x00	; 0
    693a:	30 e0       	ldi	r19, 0x00	; 0
    693c:	4a ef       	ldi	r20, 0xFA	; 250
    693e:	54 e4       	ldi	r21, 0x44	; 68
    6940:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    6944:	dc 01       	movw	r26, r24
    6946:	cb 01       	movw	r24, r22
    6948:	8f 83       	std	Y+7, r24	; 0x07
    694a:	98 87       	std	Y+8, r25	; 0x08
    694c:	a9 87       	std	Y+9, r26	; 0x09
    694e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6950:	6f 81       	ldd	r22, Y+7	; 0x07
    6952:	78 85       	ldd	r23, Y+8	; 0x08
    6954:	89 85       	ldd	r24, Y+9	; 0x09
    6956:	9a 85       	ldd	r25, Y+10	; 0x0a
    6958:	20 e0       	ldi	r18, 0x00	; 0
    695a:	30 e0       	ldi	r19, 0x00	; 0
    695c:	40 e8       	ldi	r20, 0x80	; 128
    695e:	5f e3       	ldi	r21, 0x3F	; 63
    6960:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    6964:	88 23       	and	r24, r24
    6966:	2c f4       	brge	.+10     	; 0x6972 <LCD_vidWriteString+0x8a>
		__ticks = 1;
    6968:	81 e0       	ldi	r24, 0x01	; 1
    696a:	90 e0       	ldi	r25, 0x00	; 0
    696c:	9e 83       	std	Y+6, r25	; 0x06
    696e:	8d 83       	std	Y+5, r24	; 0x05
    6970:	3f c0       	rjmp	.+126    	; 0x69f0 <LCD_vidWriteString+0x108>
	else if (__tmp > 65535)
    6972:	6f 81       	ldd	r22, Y+7	; 0x07
    6974:	78 85       	ldd	r23, Y+8	; 0x08
    6976:	89 85       	ldd	r24, Y+9	; 0x09
    6978:	9a 85       	ldd	r25, Y+10	; 0x0a
    697a:	20 e0       	ldi	r18, 0x00	; 0
    697c:	3f ef       	ldi	r19, 0xFF	; 255
    697e:	4f e7       	ldi	r20, 0x7F	; 127
    6980:	57 e4       	ldi	r21, 0x47	; 71
    6982:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    6986:	18 16       	cp	r1, r24
    6988:	4c f5       	brge	.+82     	; 0x69dc <LCD_vidWriteString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    698a:	6b 85       	ldd	r22, Y+11	; 0x0b
    698c:	7c 85       	ldd	r23, Y+12	; 0x0c
    698e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6990:	9e 85       	ldd	r25, Y+14	; 0x0e
    6992:	20 e0       	ldi	r18, 0x00	; 0
    6994:	30 e0       	ldi	r19, 0x00	; 0
    6996:	40 e2       	ldi	r20, 0x20	; 32
    6998:	51 e4       	ldi	r21, 0x41	; 65
    699a:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    699e:	dc 01       	movw	r26, r24
    69a0:	cb 01       	movw	r24, r22
    69a2:	bc 01       	movw	r22, r24
    69a4:	cd 01       	movw	r24, r26
    69a6:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    69aa:	dc 01       	movw	r26, r24
    69ac:	cb 01       	movw	r24, r22
    69ae:	9e 83       	std	Y+6, r25	; 0x06
    69b0:	8d 83       	std	Y+5, r24	; 0x05
    69b2:	0f c0       	rjmp	.+30     	; 0x69d2 <LCD_vidWriteString+0xea>
    69b4:	88 ec       	ldi	r24, 0xC8	; 200
    69b6:	90 e0       	ldi	r25, 0x00	; 0
    69b8:	9c 83       	std	Y+4, r25	; 0x04
    69ba:	8b 83       	std	Y+3, r24	; 0x03
    69bc:	8b 81       	ldd	r24, Y+3	; 0x03
    69be:	9c 81       	ldd	r25, Y+4	; 0x04
    69c0:	01 97       	sbiw	r24, 0x01	; 1
    69c2:	f1 f7       	brne	.-4      	; 0x69c0 <LCD_vidWriteString+0xd8>
    69c4:	9c 83       	std	Y+4, r25	; 0x04
    69c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    69c8:	8d 81       	ldd	r24, Y+5	; 0x05
    69ca:	9e 81       	ldd	r25, Y+6	; 0x06
    69cc:	01 97       	sbiw	r24, 0x01	; 1
    69ce:	9e 83       	std	Y+6, r25	; 0x06
    69d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69d2:	8d 81       	ldd	r24, Y+5	; 0x05
    69d4:	9e 81       	ldd	r25, Y+6	; 0x06
    69d6:	00 97       	sbiw	r24, 0x00	; 0
    69d8:	69 f7       	brne	.-38     	; 0x69b4 <LCD_vidWriteString+0xcc>
    69da:	14 c0       	rjmp	.+40     	; 0x6a04 <LCD_vidWriteString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    69dc:	6f 81       	ldd	r22, Y+7	; 0x07
    69de:	78 85       	ldd	r23, Y+8	; 0x08
    69e0:	89 85       	ldd	r24, Y+9	; 0x09
    69e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    69e4:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    69e8:	dc 01       	movw	r26, r24
    69ea:	cb 01       	movw	r24, r22
    69ec:	9e 83       	std	Y+6, r25	; 0x06
    69ee:	8d 83       	std	Y+5, r24	; 0x05
    69f0:	8d 81       	ldd	r24, Y+5	; 0x05
    69f2:	9e 81       	ldd	r25, Y+6	; 0x06
    69f4:	9a 83       	std	Y+2, r25	; 0x02
    69f6:	89 83       	std	Y+1, r24	; 0x01
    69f8:	89 81       	ldd	r24, Y+1	; 0x01
    69fa:	9a 81       	ldd	r25, Y+2	; 0x02
    69fc:	01 97       	sbiw	r24, 0x01	; 1
    69fe:	f1 f7       	brne	.-4      	; 0x69fc <LCD_vidWriteString+0x114>
    6a00:	9a 83       	std	Y+2, r25	; 0x02
    6a02:	89 83       	std	Y+1, r24	; 0x01

void LCD_vidWriteString(uint8 *pu8StringCpy)
{
	uint8 u8_index=0;

	while(pu8StringCpy[u8_index]!='\0')
    6a04:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a06:	28 2f       	mov	r18, r24
    6a08:	30 e0       	ldi	r19, 0x00	; 0
    6a0a:	88 89       	ldd	r24, Y+16	; 0x10
    6a0c:	99 89       	ldd	r25, Y+17	; 0x11
    6a0e:	fc 01       	movw	r30, r24
    6a10:	e2 0f       	add	r30, r18
    6a12:	f3 1f       	adc	r31, r19
    6a14:	80 81       	ld	r24, Z
    6a16:	88 23       	and	r24, r24
    6a18:	09 f0       	breq	.+2      	; 0x6a1c <LCD_vidWriteString+0x134>
    6a1a:	74 cf       	rjmp	.-280    	; 0x6904 <LCD_vidWriteString+0x1c>
	{
		LCD_vidWriteCharacter(pu8StringCpy[u8_index]);
		u8_index++;
		_delay_ms(2);
	}
}
    6a1c:	61 96       	adiw	r28, 0x11	; 17
    6a1e:	0f b6       	in	r0, 0x3f	; 63
    6a20:	f8 94       	cli
    6a22:	de bf       	out	0x3e, r29	; 62
    6a24:	0f be       	out	0x3f, r0	; 63
    6a26:	cd bf       	out	0x3d, r28	; 61
    6a28:	cf 91       	pop	r28
    6a2a:	df 91       	pop	r29
    6a2c:	08 95       	ret

00006a2e <LCD_vidWriteString4>:
//...................................................................................
void LCD_vidWriteString4(uint8 *pu8StringCpy)
{
    6a2e:	df 93       	push	r29
    6a30:	cf 93       	push	r28
    6a32:	cd b7       	in	r28, 0x3d	; 61
    6a34:	de b7       	in	r29, 0x3e	; 62
    6a36:	61 97       	sbiw	r28, 0x11	; 17
    6a38:	0f b6       	in	r0, 0x3f	; 63
    6a3a:	f8 94       	cli
    6a3c:	de bf       	out	0x3e, r29	; 62
    6a3e:	0f be       	out	0x3f, r0	; 63
    6a40:	cd bf       	out	0x3d, r28	; 61
    6a42:	99 8b       	std	Y+17, r25	; 0x11
    6a44:	88 8b       	std	Y+16, r24	; 0x10
	uint8 u8_index=0;
    6a46:	1f 86       	std	Y+15, r1	; 0x0f
    6a48:	80 c0       	rjmp	.+256    	; 0x6b4a <LCD_vidWriteString4+0x11c>

		while(pu8StringCpy[u8_index]!='\0')

		{
			LCD_vidWriteCharacter4(pu8StringCpy[u8_index]);
    6a4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a4c:	28 2f       	mov	r18, r24
    6a4e:	30 e0       	ldi	r19, 0x00	; 0
    6a50:	88 89       	ldd	r24, Y+16	; 0x10
    6a52:	99 89       	ldd	r25, Y+17	; 0x11
    6a54:	fc 01       	movw	r30, r24
    6a56:	e2 0f       	add	r30, r18
    6a58:	f3 1f       	adc	r31, r19
    6a5a:	80 81       	ld	r24, Z
    6a5c:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <LCD_vidWriteCharacter4>
			u8_index++;
    6a60:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a62:	8f 5f       	subi	r24, 0xFF	; 255
    6a64:	8f 87       	std	Y+15, r24	; 0x0f
    6a66:	80 e0       	ldi	r24, 0x00	; 0
    6a68:	90 e0       	ldi	r25, 0x00	; 0
    6a6a:	a0 e8       	ldi	r26, 0x80	; 128
    6a6c:	bf e3       	ldi	r27, 0x3F	; 63
    6a6e:	8b 87       	std	Y+11, r24	; 0x0b
    6a70:	9c 87       	std	Y+12, r25	; 0x0c
    6a72:	ad 87       	std	Y+13, r26	; 0x0d
    6a74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a76:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a78:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a7e:	20 e0       	ldi	r18, 0x00	; 0
    6a80:	30 e0       	ldi	r19, 0x00	; 0
    6a82:	4a ef       	ldi	r20, 0xFA	; 250
    6a84:	54 e4       	ldi	r21, 0x44	; 68
    6a86:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    6a8a:	dc 01       	movw	r26, r24
    6a8c:	cb 01       	movw	r24, r22
    6a8e:	8f 83       	std	Y+7, r24	; 0x07
    6a90:	98 87       	std	Y+8, r25	; 0x08
    6a92:	a9 87       	std	Y+9, r26	; 0x09
    6a94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6a96:	6f 81       	ldd	r22, Y+7	; 0x07
    6a98:	78 85       	ldd	r23, Y+8	; 0x08
    6a9a:	89 85       	ldd	r24, Y+9	; 0x09
    6a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a9e:	20 e0       	ldi	r18, 0x00	; 0
    6aa0:	30 e0       	ldi	r19, 0x00	; 0
    6aa2:	40 e8       	ldi	r20, 0x80	; 128
    6aa4:	5f e3       	ldi	r21, 0x3F	; 63
    6aa6:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    6aaa:	88 23       	and	r24, r24
    6aac:	2c f4       	brge	.+10     	; 0x6ab8 <LCD_vidWriteString4+0x8a>
		__ticks = 1;
    6aae:	81 e0       	ldi	r24, 0x01	; 1
    6ab0:	90 e0       	ldi	r25, 0x00	; 0
    6ab2:	9e 83       	std	Y+6, r25	; 0x06
    6ab4:	8d 83       	std	Y+5, r24	; 0x05
    6ab6:	3f c0       	rjmp	.+126    	; 0x6b36 <LCD_vidWriteString4+0x108>
	else if (__tmp > 65535)
    6ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    6aba:	78 85       	ldd	r23, Y+8	; 0x08
    6abc:	89 85       	ldd	r24, Y+9	; 0x09
    6abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ac0:	20 e0       	ldi	r18, 0x00	; 0
    6ac2:	3f ef       	ldi	r19, 0xFF	; 255
    6ac4:	4f e7       	ldi	r20, 0x7F	; 127
    6ac6:	57 e4       	ldi	r21, 0x47	; 71
    6ac8:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    6acc:	18 16       	cp	r1, r24
    6ace:	4c f5       	brge	.+82     	; 0x6b22 <LCD_vidWriteString4+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ad8:	20 e0       	ldi	r18, 0x00	; 0
    6ada:	30 e0       	ldi	r19, 0x00	; 0
    6adc:	40 e2       	ldi	r20, 0x20	; 32
    6ade:	51 e4       	ldi	r21, 0x41	; 65
    6ae0:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    6ae4:	dc 01       	movw	r26, r24
    6ae6:	cb 01       	movw	r24, r22
    6ae8:	bc 01       	movw	r22, r24
    6aea:	cd 01       	movw	r24, r26
    6aec:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    6af0:	dc 01       	movw	r26, r24
    6af2:	cb 01       	movw	r24, r22
    6af4:	9e 83       	std	Y+6, r25	; 0x06
    6af6:	8d 83       	std	Y+5, r24	; 0x05
    6af8:	0f c0       	rjmp	.+30     	; 0x6b18 <LCD_vidWriteString4+0xea>
    6afa:	88 ec       	ldi	r24, 0xC8	; 200
    6afc:	90 e0       	ldi	r25, 0x00	; 0
    6afe:	9c 83       	std	Y+4, r25	; 0x04
    6b00:	8b 83       	std	Y+3, r24	; 0x03
    6b02:	8b 81       	ldd	r24, Y+3	; 0x03
    6b04:	9c 81       	ldd	r25, Y+4	; 0x04
    6b06:	01 97       	sbiw	r24, 0x01	; 1
    6b08:	f1 f7       	brne	.-4      	; 0x6b06 <LCD_vidWriteString4+0xd8>
    6b0a:	9c 83       	std	Y+4, r25	; 0x04
    6b0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    6b10:	9e 81       	ldd	r25, Y+6	; 0x06
    6b12:	01 97       	sbiw	r24, 0x01	; 1
    6b14:	9e 83       	std	Y+6, r25	; 0x06
    6b16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b18:	8d 81       	ldd	r24, Y+5	; 0x05
    6b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    6b1c:	00 97       	sbiw	r24, 0x00	; 0
    6b1e:	69 f7       	brne	.-38     	; 0x6afa <LCD_vidWriteString4+0xcc>
    6b20:	14 c0       	rjmp	.+40     	; 0x6b4a <LCD_vidWriteString4+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b22:	6f 81       	ldd	r22, Y+7	; 0x07
    6b24:	78 85       	ldd	r23, Y+8	; 0x08
    6b26:	89 85       	ldd	r24, Y+9	; 0x09
    6b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b2a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    6b2e:	dc 01       	movw	r26, r24
    6b30:	cb 01       	movw	r24, r22
    6b32:	9e 83       	std	Y+6, r25	; 0x06
    6b34:	8d 83       	std	Y+5, r24	; 0x05
    6b36:	8d 81       	ldd	r24, Y+5	; 0x05
    6b38:	9e 81       	ldd	r25, Y+6	; 0x06
    6b3a:	9a 83       	std	Y+2, r25	; 0x02
    6b3c:	89 83       	std	Y+1, r24	; 0x01
    6b3e:	89 81       	ldd	r24, Y+1	; 0x01
    6b40:	9a 81       	ldd	r25, Y+2	; 0x02
    6b42:	01 97       	sbiw	r24, 0x01	; 1
    6b44:	f1 f7       	brne	.-4      	; 0x6b42 <LCD_vidWriteString4+0x114>
    6b46:	9a 83       	std	Y+2, r25	; 0x02
    6b48:	89 83       	std	Y+1, r24	; 0x01
//...................................................................................
void LCD_vidWriteString4(uint8 *pu8StringCpy)
{
	uint8 u8_index=0;

		while(pu8StringCpy[u8_index]!='\0')
    6b4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b4c:	28 2f       	mov	r18, r24
    6b4e:	30 e0       	ldi	r19, 0x00	; 0
    6b50:	88 89       	ldd	r24, Y+16	; 0x10
    6b52:	99 89       	ldd	r25, Y+17	; 0x11
    6b54:	fc 01       	movw	r30, r24
    6b56:	e2 0f       	add	r30, r18
    6b58:	f3 1f       	adc	r31, r19
    6b5a:	80 81       	ld	r24, Z
    6b5c:	88 23       	and	r24, r24
    6b5e:	09 f0       	breq	.+2      	; 0x6b62 <LCD_vidWriteString4+0x134>
    6b60:	74 cf       	rjmp	.-280    	; 0x6a4a <LCD_vidWriteString4+0x1c>
		{
			LCD_vidWriteCharacter4(pu8StringCpy[u8_index]);
			u8_index++;
			_delay_ms(1);
		}
}
    6b62:	61 96       	adiw	r28, 0x11	; 17
    6b64:	0f b6       	in	r0, 0x3f	; 63
    6b66:	f8 94       	cli
    6b68:	de bf       	out	0x3e, r29	; 62
    6b6a:	0f be       	out	0x3f, r0	; 63
    6b6c:	cd bf       	out	0x3d, r28	; 61
    6b6e:	cf 91       	pop	r28
    6b70:	df 91       	pop	r29
    6b72:	08 95       	ret

00006b74 <LCD_vidWriteUnSignedInteger>:
//..........................................................................................
void LCD_vidWriteUnSignedInteger(uint64 number)
{
    6b74:	8f 92       	push	r8
    6b76:	9f 92       	push	r9
    6b78:	af 92       	push	r10
    6b7a:	bf 92       	push	r11
    6b7c:	cf 92       	push	r12
    6b7e:	df 92       	push	r13
    6b80:	ef 92       	push	r14
    6b82:	ff 92       	push	r15
    6b84:	0f 93       	push	r16
    6b86:	1f 93       	push	r17
    6b88:	df 93       	push	r29
    6b8a:	cf 93       	push	r28
    6b8c:	cd b7       	in	r28, 0x3d	; 61
    6b8e:	de b7       	in	r29, 0x3e	; 62
    6b90:	6d 97       	sbiw	r28, 0x1d	; 29
    6b92:	0f b6       	in	r0, 0x3f	; 63
    6b94:	f8 94       	cli
    6b96:	de bf       	out	0x3e, r29	; 62
    6b98:	0f be       	out	0x3f, r0	; 63
    6b9a:	cd bf       	out	0x3d, r28	; 61
    6b9c:	2e 8b       	std	Y+22, r18	; 0x16
    6b9e:	3f 8b       	std	Y+23, r19	; 0x17
    6ba0:	48 8f       	std	Y+24, r20	; 0x18
    6ba2:	59 8f       	std	Y+25, r21	; 0x19
    6ba4:	6a 8f       	std	Y+26, r22	; 0x1a
    6ba6:	7b 8f       	std	Y+27, r23	; 0x1b
    6ba8:	8c 8f       	std	Y+28, r24	; 0x1c
    6baa:	9d 8f       	std	Y+29, r25	; 0x1d
	uint8 arr[20]={};
    6bac:	84 e1       	ldi	r24, 0x14	; 20
    6bae:	fe 01       	movw	r30, r28
    6bb0:	32 96       	adiw	r30, 0x02	; 2
    6bb2:	df 01       	movw	r26, r30
    6bb4:	98 2f       	mov	r25, r24
    6bb6:	1d 92       	st	X+, r1
    6bb8:	9a 95       	dec	r25
    6bba:	e9 f7       	brne	.-6      	; 0x6bb6 <LCD_vidWriteUnSignedInteger+0x42>
    uint8 i=0;
    6bbc:	19 82       	std	Y+1, r1	; 0x01

    if(number==0)
    6bbe:	8e 89       	ldd	r24, Y+22	; 0x16
    6bc0:	9f 89       	ldd	r25, Y+23	; 0x17
    6bc2:	89 2b       	or	r24, r25
    6bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    6bc6:	89 2b       	or	r24, r25
    6bc8:	99 8d       	ldd	r25, Y+25	; 0x19
    6bca:	89 2b       	or	r24, r25
    6bcc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6bce:	89 2b       	or	r24, r25
    6bd0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6bd2:	89 2b       	or	r24, r25
    6bd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6bd6:	89 2b       	or	r24, r25
    6bd8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6bda:	89 2b       	or	r24, r25
    6bdc:	88 23       	and	r24, r24
    6bde:	09 f0       	breq	.+2      	; 0x6be2 <LCD_vidWriteUnSignedInteger+0x6e>
    6be0:	6b c0       	rjmp	.+214    	; 0x6cb8 <LCD_vidWriteUnSignedInteger+0x144>
    {
    	LCD_vidWriteCharacter(number+48);
    6be2:	8e 89       	ldd	r24, Y+22	; 0x16
    6be4:	80 5d       	subi	r24, 0xD0	; 208
    6be6:	0e 94 ac 30 	call	0x6158	; 0x6158 <LCD_vidWriteCharacter>
    6bea:	8e c0       	rjmp	.+284    	; 0x6d08 <LCD_vidWriteUnSignedInteger+0x194>
    }
    else{
   while((i<20)&&(number!=0))
   {   arr[i++]=number%10;
    6bec:	89 81       	ldd	r24, Y+1	; 0x01
    6bee:	88 2e       	mov	r8, r24
    6bf0:	99 24       	eor	r9, r9
    6bf2:	ae 88       	ldd	r10, Y+22	; 0x16
    6bf4:	bf 88       	ldd	r11, Y+23	; 0x17
    6bf6:	c8 8c       	ldd	r12, Y+24	; 0x18
    6bf8:	d9 8c       	ldd	r13, Y+25	; 0x19
    6bfa:	ea 8c       	ldd	r14, Y+26	; 0x1a
    6bfc:	fb 8c       	ldd	r15, Y+27	; 0x1b
    6bfe:	0c 8d       	ldd	r16, Y+28	; 0x1c
    6c00:	1d 8d       	ldd	r17, Y+29	; 0x1d
    6c02:	2a 2d       	mov	r18, r10
    6c04:	3b 2d       	mov	r19, r11
    6c06:	4c 2d       	mov	r20, r12
    6c08:	5d 2d       	mov	r21, r13
    6c0a:	6e 2d       	mov	r22, r14
    6c0c:	7f 2d       	mov	r23, r15
    6c0e:	80 2f       	mov	r24, r16
    6c10:	91 2f       	mov	r25, r17
    6c12:	0f 2e       	mov	r0, r31
    6c14:	fa e0       	ldi	r31, 0x0A	; 10
    6c16:	af 2e       	mov	r10, r31
    6c18:	f0 2d       	mov	r31, r0
    6c1a:	bb 24       	eor	r11, r11
    6c1c:	cc 24       	eor	r12, r12
    6c1e:	dd 24       	eor	r13, r13
    6c20:	ee 24       	eor	r14, r14
    6c22:	ff 24       	eor	r15, r15
    6c24:	00 e0       	ldi	r16, 0x00	; 0
    6c26:	10 e0       	ldi	r17, 0x00	; 0
    6c28:	0e 94 08 07 	call	0xe10	; 0xe10 <__umoddi3>
    6c2c:	a2 2e       	mov	r10, r18
    6c2e:	b3 2e       	mov	r11, r19
    6c30:	c4 2e       	mov	r12, r20
    6c32:	d5 2e       	mov	r13, r21
    6c34:	e6 2e       	mov	r14, r22
    6c36:	f7 2e       	mov	r15, r23
    6c38:	08 2f       	mov	r16, r24
    6c3a:	19 2f       	mov	r17, r25
    6c3c:	2a 2d       	mov	r18, r10
    6c3e:	3b 2d       	mov	r19, r11
    6c40:	4c 2d       	mov	r20, r12
    6c42:	5d 2d       	mov	r21, r13
    6c44:	6e 2d       	mov	r22, r14
    6c46:	7f 2d       	mov	r23, r15
    6c48:	80 2f       	mov	r24, r16
    6c4a:	91 2f       	mov	r25, r17
    6c4c:	ce 01       	movw	r24, r28
    6c4e:	02 96       	adiw	r24, 0x02	; 2
    6c50:	fc 01       	movw	r30, r24
    6c52:	e8 0d       	add	r30, r8
    6c54:	f9 1d       	adc	r31, r9
    6c56:	20 83       	st	Z, r18
    6c58:	89 81       	ldd	r24, Y+1	; 0x01
    6c5a:	8f 5f       	subi	r24, 0xFF	; 255
    6c5c:	89 83       	std	Y+1, r24	; 0x01

	       number/=10;
    6c5e:	ae 88       	ldd	r10, Y+22	; 0x16
    6c60:	bf 88       	ldd	r11, Y+23	; 0x17
    6c62:	c8 8c       	ldd	r12, Y+24	; 0x18
    6c64:	d9 8c       	ldd	r13, Y+25	; 0x19
    6c66:	ea 8c       	ldd	r14, Y+26	; 0x1a
    6c68:	fb 8c       	ldd	r15, Y+27	; 0x1b
    6c6a:	0c 8d       	ldd	r16, Y+28	; 0x1c
    6c6c:	1d 8d       	ldd	r17, Y+29	; 0x1d
    6c6e:	2a 2d       	mov	r18, r10
    6c70:	3b 2d       	mov	r19, r11
    6c72:	4c 2d       	mov	r20, r12
    6c74:	5d 2d       	mov	r21, r13
    6c76:	6e 2d       	mov	r22, r14
    6c78:	7f 2d       	mov	r23, r15
    6c7a:	80 2f       	mov	r24, r16
    6c7c:	91 2f       	mov	r25, r17
    6c7e:	0f 2e       	mov	r0, r31
    6c80:	fa e0       	ldi	r31, 0x0A	; 10
    6c82:	af 2e       	mov	r10, r31
    6c84:	f0 2d       	mov	r31, r0
    6c86:	bb 24       	eor	r11, r11
    6c88:	cc 24       	eor	r12, r12
    6c8a:	dd 24       	eor	r13, r13
    6c8c:	ee 24       	eor	r14, r14
    6c8e:	ff 24       	eor	r15, r15
    6c90:	00 e0       	ldi	r16, 0x00	; 0
    6c92:	10 e0       	ldi	r17, 0x00	; 0
    6c94:	0e 94 93 00 	call	0x126	; 0x126 <__udivdi3>
    6c98:	a2 2e       	mov	r10, r18
    6c9a:	b3 2e       	mov	r11, r19
    6c9c:	c4 2e       	mov	r12, r20
    6c9e:	d5 2e       	mov	r13, r21
    6ca0:	e6 2e       	mov	r14, r22
    6ca2:	f7 2e       	mov	r15, r23
    6ca4:	08 2f       	mov	r16, r24
    6ca6:	19 2f       	mov	r17, r25
    6ca8:	ae 8a       	std	Y+22, r10	; 0x16
    6caa:	bf 8a       	std	Y+23, r11	; 0x17
    6cac:	c8 8e       	std	Y+24, r12	; 0x18
    6cae:	d9 8e       	std	Y+25, r13	; 0x19
    6cb0:	ea 8e       	std	Y+26, r14	; 0x1a
    6cb2:	fb 8e       	std	Y+27, r15	; 0x1b
    6cb4:	0c 8f       	std	Y+28, r16	; 0x1c
    6cb6:	1d 8f       	std	Y+29, r17	; 0x1d
    if(number==0)
    {
    	LCD_vidWriteCharacter(number+48);
    }
    else{
   while((i<20)&&(number!=0))
    6cb8:	89 81       	ldd	r24, Y+1	; 0x01
    6cba:	84 31       	cpi	r24, 0x14	; 20
    6cbc:	10 f5       	brcc	.+68     	; 0x6d02 <LCD_vidWriteUnSignedInteger+0x18e>
    6cbe:	8e 89       	ldd	r24, Y+22	; 0x16
    6cc0:	9f 89       	ldd	r25, Y+23	; 0x17
    6cc2:	89 2b       	or	r24, r25
    6cc4:	98 8d       	ldd	r25, Y+24	; 0x18
    6cc6:	89 2b       	or	r24, r25
    6cc8:	99 8d       	ldd	r25, Y+25	; 0x19
    6cca:	89 2b       	or	r24, r25
    6ccc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6cce:	89 2b       	or	r24, r25
    6cd0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6cd2:	89 2b       	or	r24, r25
    6cd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6cd6:	89 2b       	or	r24, r25
    6cd8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6cda:	89 2b       	or	r24, r25
    6cdc:	88 23       	and	r24, r24
    6cde:	09 f0       	breq	.+2      	; 0x6ce2 <LCD_vidWriteUnSignedInteger+0x16e>
    6ce0:	85 cf       	rjmp	.-246    	; 0x6bec <LCD_vidWriteUnSignedInteger+0x78>
    6ce2:	0f c0       	rjmp	.+30     	; 0x6d02 <LCD_vidWriteUnSignedInteger+0x18e>
	       number/=10;

   }

       while(i!=0){
    	LCD_vidWriteCharacter(arr[--i]+48);
    6ce4:	89 81       	ldd	r24, Y+1	; 0x01
    6ce6:	81 50       	subi	r24, 0x01	; 1
    6ce8:	89 83       	std	Y+1, r24	; 0x01
    6cea:	89 81       	ldd	r24, Y+1	; 0x01
    6cec:	28 2f       	mov	r18, r24
    6cee:	30 e0       	ldi	r19, 0x00	; 0
    6cf0:	ce 01       	movw	r24, r28
    6cf2:	02 96       	adiw	r24, 0x02	; 2
    6cf4:	fc 01       	movw	r30, r24
    6cf6:	e2 0f       	add	r30, r18
    6cf8:	f3 1f       	adc	r31, r19
    6cfa:	80 81       	ld	r24, Z
    6cfc:	80 5d       	subi	r24, 0xD0	; 208
    6cfe:	0e 94 ac 30 	call	0x6158	; 0x6158 <LCD_vidWriteCharacter>

	       number/=10;

   }

       while(i!=0){
    6d02:	89 81       	ldd	r24, Y+1	; 0x01
    6d04:	88 23       	and	r24, r24
    6d06:	71 f7       	brne	.-36     	; 0x6ce4 <LCD_vidWriteUnSignedInteger+0x170>
    	LCD_vidWriteCharacter(arr[--i]+48);

       }
    }
}
    6d08:	6d 96       	adiw	r28, 0x1d	; 29
    6d0a:	0f b6       	in	r0, 0x3f	; 63
    6d0c:	f8 94       	cli
    6d0e:	de bf       	out	0x3e, r29	; 62
    6d10:	0f be       	out	0x3f, r0	; 63
    6d12:	cd bf       	out	0x3d, r28	; 61
    6d14:	cf 91       	pop	r28
    6d16:	df 91       	pop	r29
    6d18:	1f 91       	pop	r17
    6d1a:	0f 91       	pop	r16
    6d1c:	ff 90       	pop	r15
    6d1e:	ef 90       	pop	r14
    6d20:	df 90       	pop	r13
    6d22:	cf 90       	pop	r12
    6d24:	bf 90       	pop	r11
    6d26:	af 90       	pop	r10
    6d28:	9f 90       	pop	r9
    6d2a:	8f 90       	pop	r8
    6d2c:	08 95       	ret

00006d2e <LCD_vidWriteUnSignedInteger4>:
//............................................................................................
void LCD_vidWriteUnSignedInteger4(uint64 number)
{
    6d2e:	8f 92       	push	r8
    6d30:	9f 92       	push	r9
    6d32:	af 92       	push	r10
    6d34:	bf 92       	push	r11
    6d36:	cf 92       	push	r12
    6d38:	df 92       	push	r13
    6d3a:	ef 92       	push	r14
    6d3c:	ff 92       	push	r15
    6d3e:	0f 93       	push	r16
    6d40:	1f 93       	push	r17
    6d42:	df 93       	push	r29
    6d44:	cf 93       	push	r28
    6d46:	cd b7       	in	r28, 0x3d	; 61
    6d48:	de b7       	in	r29, 0x3e	; 62
    6d4a:	6d 97       	sbiw	r28, 0x1d	; 29
    6d4c:	0f b6       	in	r0, 0x3f	; 63
    6d4e:	f8 94       	cli
    6d50:	de bf       	out	0x3e, r29	; 62
    6d52:	0f be       	out	0x3f, r0	; 63
    6d54:	cd bf       	out	0x3d, r28	; 61
    6d56:	2e 8b       	std	Y+22, r18	; 0x16
    6d58:	3f 8b       	std	Y+23, r19	; 0x17
    6d5a:	48 8f       	std	Y+24, r20	; 0x18
    6d5c:	59 8f       	std	Y+25, r21	; 0x19
    6d5e:	6a 8f       	std	Y+26, r22	; 0x1a
    6d60:	7b 8f       	std	Y+27, r23	; 0x1b
    6d62:	8c 8f       	std	Y+28, r24	; 0x1c
    6d64:	9d 8f       	std	Y+29, r25	; 0x1d
	uint8 arr[20]={};
    6d66:	84 e1       	ldi	r24, 0x14	; 20
    6d68:	fe 01       	movw	r30, r28
    6d6a:	32 96       	adiw	r30, 0x02	; 2
    6d6c:	df 01       	movw	r26, r30
    6d6e:	98 2f       	mov	r25, r24
    6d70:	1d 92       	st	X+, r1
    6d72:	9a 95       	dec	r25
    6d74:	e9 f7       	brne	.-6      	; 0x6d70 <LCD_vidWriteUnSignedInteger4+0x42>
    uint8 i=0;
    6d76:	19 82       	std	Y+1, r1	; 0x01

    if(number==0)
    6d78:	8e 89       	ldd	r24, Y+22	; 0x16
    6d7a:	9f 89       	ldd	r25, Y+23	; 0x17
    6d7c:	89 2b       	or	r24, r25
    6d7e:	98 8d       	ldd	r25, Y+24	; 0x18
    6d80:	89 2b       	or	r24, r25
    6d82:	99 8d       	ldd	r25, Y+25	; 0x19
    6d84:	89 2b       	or	r24, r25
    6d86:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6d88:	89 2b       	or	r24, r25
    6d8a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6d8c:	89 2b       	or	r24, r25
    6d8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6d90:	89 2b       	or	r24, r25
    6d92:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6d94:	89 2b       	or	r24, r25
    6d96:	88 23       	and	r24, r24
    6d98:	09 f0       	breq	.+2      	; 0x6d9c <LCD_vidWriteUnSignedInteger4+0x6e>
    6d9a:	6b c0       	rjmp	.+214    	; 0x6e72 <LCD_vidWriteUnSignedInteger4+0x144>
    {
    	LCD_vidWriteCharacter4(number+48);
    6d9c:	8e 89       	ldd	r24, Y+22	; 0x16
    6d9e:	80 5d       	subi	r24, 0xD0	; 208
    6da0:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <LCD_vidWriteCharacter4>
    6da4:	8e c0       	rjmp	.+284    	; 0x6ec2 <LCD_vidWriteUnSignedInteger4+0x194>
    }
    else{
   while((i<20)&&(number!=0))
   {   arr[i++]=number%10;
    6da6:	89 81       	ldd	r24, Y+1	; 0x01
    6da8:	88 2e       	mov	r8, r24
    6daa:	99 24       	eor	r9, r9
    6dac:	ae 88       	ldd	r10, Y+22	; 0x16
    6dae:	bf 88       	ldd	r11, Y+23	; 0x17
    6db0:	c8 8c       	ldd	r12, Y+24	; 0x18
    6db2:	d9 8c       	ldd	r13, Y+25	; 0x19
    6db4:	ea 8c       	ldd	r14, Y+26	; 0x1a
    6db6:	fb 8c       	ldd	r15, Y+27	; 0x1b
    6db8:	0c 8d       	ldd	r16, Y+28	; 0x1c
    6dba:	1d 8d       	ldd	r17, Y+29	; 0x1d
    6dbc:	2a 2d       	mov	r18, r10
    6dbe:	3b 2d       	mov	r19, r11
    6dc0:	4c 2d       	mov	r20, r12
    6dc2:	5d 2d       	mov	r21, r13
    6dc4:	6e 2d       	mov	r22, r14
    6dc6:	7f 2d       	mov	r23, r15
    6dc8:	80 2f       	mov	r24, r16
    6dca:	91 2f       	mov	r25, r17
    6dcc:	0f 2e       	mov	r0, r31
    6dce:	fa e0       	ldi	r31, 0x0A	; 10
    6dd0:	af 2e       	mov	r10, r31
    6dd2:	f0 2d       	mov	r31, r0
    6dd4:	bb 24       	eor	r11, r11
    6dd6:	cc 24       	eor	r12, r12
    6dd8:	dd 24       	eor	r13, r13
    6dda:	ee 24       	eor	r14, r14
    6ddc:	ff 24       	eor	r15, r15
    6dde:	00 e0       	ldi	r16, 0x00	; 0
    6de0:	10 e0       	ldi	r17, 0x00	; 0
    6de2:	0e 94 08 07 	call	0xe10	; 0xe10 <__umoddi3>
    6de6:	a2 2e       	mov	r10, r18
    6de8:	b3 2e       	mov	r11, r19
    6dea:	c4 2e       	mov	r12, r20
    6dec:	d5 2e       	mov	r13, r21
    6dee:	e6 2e       	mov	r14, r22
    6df0:	f7 2e       	mov	r15, r23
    6df2:	08 2f       	mov	r16, r24
    6df4:	19 2f       	mov	r17, r25
    6df6:	2a 2d       	mov	r18, r10
    6df8:	3b 2d       	mov	r19, r11
    6dfa:	4c 2d       	mov	r20, r12
    6dfc:	5d 2d       	mov	r21, r13
    6dfe:	6e 2d       	mov	r22, r14
    6e00:	7f 2d       	mov	r23, r15
    6e02:	80 2f       	mov	r24, r16
    6e04:	91 2f       	mov	r25, r17
    6e06:	ce 01       	movw	r24, r28
    6e08:	02 96       	adiw	r24, 0x02	; 2
    6e0a:	fc 01       	movw	r30, r24
    6e0c:	e8 0d       	add	r30, r8
    6e0e:	f9 1d       	adc	r31, r9
    6e10:	20 83       	st	Z, r18
    6e12:	89 81       	ldd	r24, Y+1	; 0x01
    6e14:	8f 5f       	subi	r24, 0xFF	; 255
    6e16:	89 83       	std	Y+1, r24	; 0x01

	       number/=10;
    6e18:	ae 88       	ldd	r10, Y+22	; 0x16
    6e1a:	bf 88       	ldd	r11, Y+23	; 0x17
    6e1c:	c8 8c       	ldd	r12, Y+24	; 0x18
    6e1e:	d9 8c       	ldd	r13, Y+25	; 0x19
    6e20:	ea 8c       	ldd	r14, Y+26	; 0x1a
    6e22:	fb 8c       	ldd	r15, Y+27	; 0x1b
    6e24:	0c 8d       	ldd	r16, Y+28	; 0x1c
    6e26:	1d 8d       	ldd	r17, Y+29	; 0x1d
    6e28:	2a 2d       	mov	r18, r10
    6e2a:	3b 2d       	mov	r19, r11
    6e2c:	4c 2d       	mov	r20, r12
    6e2e:	5d 2d       	mov	r21, r13
    6e30:	6e 2d       	mov	r22, r14
    6e32:	7f 2d       	mov	r23, r15
    6e34:	80 2f       	mov	r24, r16
    6e36:	91 2f       	mov	r25, r17
    6e38:	0f 2e       	mov	r0, r31
    6e3a:	fa e0       	ldi	r31, 0x0A	; 10
    6e3c:	af 2e       	mov	r10, r31
    6e3e:	f0 2d       	mov	r31, r0
    6e40:	bb 24       	eor	r11, r11
    6e42:	cc 24       	eor	r12, r12
    6e44:	dd 24       	eor	r13, r13
    6e46:	ee 24       	eor	r14, r14
    6e48:	ff 24       	eor	r15, r15
    6e4a:	00 e0       	ldi	r16, 0x00	; 0
    6e4c:	10 e0       	ldi	r17, 0x00	; 0
    6e4e:	0e 94 93 00 	call	0x126	; 0x126 <__udivdi3>
    6e52:	a2 2e       	mov	r10, r18
    6e54:	b3 2e       	mov	r11, r19
    6e56:	c4 2e       	mov	r12, r20
    6e58:	d5 2e       	mov	r13, r21
    6e5a:	e6 2e       	mov	r14, r22
    6e5c:	f7 2e       	mov	r15, r23
    6e5e:	08 2f       	mov	r16, r24
    6e60:	19 2f       	mov	r17, r25
    6e62:	ae 8a       	std	Y+22, r10	; 0x16
    6e64:	bf 8a       	std	Y+23, r11	; 0x17
    6e66:	c8 8e       	std	Y+24, r12	; 0x18
    6e68:	d9 8e       	std	Y+25, r13	; 0x19
    6e6a:	ea 8e       	std	Y+26, r14	; 0x1a
    6e6c:	fb 8e       	std	Y+27, r15	; 0x1b
    6e6e:	0c 8f       	std	Y+28, r16	; 0x1c
    6e70:	1d 8f       	std	Y+29, r17	; 0x1d
    if(number==0)
    {
    	LCD_vidWriteCharacter4(number+48);
    }
    else{
   while((i<20)&&(number!=0))
    6e72:	89 81       	ldd	r24, Y+1	; 0x01
    6e74:	84 31       	cpi	r24, 0x14	; 20
    6e76:	10 f5       	brcc	.+68     	; 0x6ebc <LCD_vidWriteUnSignedInteger4+0x18e>
    6e78:	8e 89       	ldd	r24, Y+22	; 0x16
    6e7a:	9f 89       	ldd	r25, Y+23	; 0x17
    6e7c:	89 2b       	or	r24, r25
    6e7e:	98 8d       	ldd	r25, Y+24	; 0x18
    6e80:	89 2b       	or	r24, r25
    6e82:	99 8d       	ldd	r25, Y+25	; 0x19
    6e84:	89 2b       	or	r24, r25
    6e86:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6e88:	89 2b       	or	r24, r25
    6e8a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6e8c:	89 2b       	or	r24, r25
    6e8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6e90:	89 2b       	or	r24, r25
    6e92:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6e94:	89 2b       	or	r24, r25
    6e96:	88 23       	and	r24, r24
    6e98:	09 f0       	breq	.+2      	; 0x6e9c <LCD_vidWriteUnSignedInteger4+0x16e>
    6e9a:	85 cf       	rjmp	.-246    	; 0x6da6 <LCD_vidWriteUnSignedInteger4+0x78>
    6e9c:	0f c0       	rjmp	.+30     	; 0x6ebc <LCD_vidWriteUnSignedInteger4+0x18e>
	       number/=10;

   }

       while(i!=0){
    	LCD_vidWriteCharacter4(arr[--i]+48);
    6e9e:	89 81       	ldd	r24, Y+1	; 0x01
    6ea0:	81 50       	subi	r24, 0x01	; 1
    6ea2:	89 83       	std	Y+1, r24	; 0x01
    6ea4:	89 81       	ldd	r24, Y+1	; 0x01
    6ea6:	28 2f       	mov	r18, r24
    6ea8:	30 e0       	ldi	r19, 0x00	; 0
    6eaa:	ce 01       	movw	r24, r28
    6eac:	02 96       	adiw	r24, 0x02	; 2
    6eae:	fc 01       	movw	r30, r24
    6eb0:	e2 0f       	add	r30, r18
    6eb2:	f3 1f       	adc	r31, r19
    6eb4:	80 81       	ld	r24, Z
    6eb6:	80 5d       	subi	r24, 0xD0	; 208
    6eb8:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <LCD_vidWriteCharacter4>

	       number/=10;

   }

       while(i!=0){
    6ebc:	89 81       	ldd	r24, Y+1	; 0x01
    6ebe:	88 23       	and	r24, r24
    6ec0:	71 f7       	brne	.-36     	; 0x6e9e <LCD_vidWriteUnSignedInteger4+0x170>
    	LCD_vidWriteCharacter4(arr[--i]+48);

       }
    }
}
    6ec2:	6d 96       	adiw	r28, 0x1d	; 29
    6ec4:	0f b6       	in	r0, 0x3f	; 63
    6ec6:	f8 94       	cli
    6ec8:	de bf       	out	0x3e, r29	; 62
    6eca:	0f be       	out	0x3f, r0	; 63
    6ecc:	cd bf       	out	0x3d, r28	; 61
    6ece:	cf 91       	pop	r28
    6ed0:	df 91       	pop	r29
    6ed2:	1f 91       	pop	r17
    6ed4:	0f 91       	pop	r16
    6ed6:	ff 90       	pop	r15
    6ed8:	ef 90       	pop	r14
    6eda:	df 90       	pop	r13
    6edc:	cf 90       	pop	r12
    6ede:	bf 90       	pop	r11
    6ee0:	af 90       	pop	r10
    6ee2:	9f 90       	pop	r9
    6ee4:	8f 90       	pop	r8
    6ee6:	08 95       	ret

00006ee8 <LCD_vidWriteSignedInteger>:
//......................................................................................
void LCD_vidWriteSignedInteger(sint64 s64SignedNumCpy)
{
    6ee8:	af 92       	push	r10
    6eea:	bf 92       	push	r11
    6eec:	cf 92       	push	r12
    6eee:	df 92       	push	r13
    6ef0:	ef 92       	push	r14
    6ef2:	ff 92       	push	r15
    6ef4:	0f 93       	push	r16
    6ef6:	1f 93       	push	r17
    6ef8:	df 93       	push	r29
    6efa:	cf 93       	push	r28
    6efc:	cd b7       	in	r28, 0x3d	; 61
    6efe:	de b7       	in	r29, 0x3e	; 62
    6f00:	ec 97       	sbiw	r28, 0x3c	; 60
    6f02:	0f b6       	in	r0, 0x3f	; 63
    6f04:	f8 94       	cli
    6f06:	de bf       	out	0x3e, r29	; 62
    6f08:	0f be       	out	0x3f, r0	; 63
    6f0a:	cd bf       	out	0x3d, r28	; 61
    6f0c:	29 87       	std	Y+9, r18	; 0x09
    6f0e:	3a 87       	std	Y+10, r19	; 0x0a
    6f10:	4b 87       	std	Y+11, r20	; 0x0b
    6f12:	5c 87       	std	Y+12, r21	; 0x0c
    6f14:	6d 87       	std	Y+13, r22	; 0x0d
    6f16:	7e 87       	std	Y+14, r23	; 0x0e
    6f18:	8f 87       	std	Y+15, r24	; 0x0f
    6f1a:	98 8b       	std	Y+16, r25	; 0x10
	uint64 u64UnsignedNumCpy=0;
    6f1c:	19 82       	std	Y+1, r1	; 0x01
    6f1e:	1a 82       	std	Y+2, r1	; 0x02
    6f20:	1b 82       	std	Y+3, r1	; 0x03
    6f22:	1c 82       	std	Y+4, r1	; 0x04
    6f24:	1d 82       	std	Y+5, r1	; 0x05
    6f26:	1e 82       	std	Y+6, r1	; 0x06
    6f28:	1f 82       	std	Y+7, r1	; 0x07
    6f2a:	18 86       	std	Y+8, r1	; 0x08
	if(s64SignedNumCpy<(sint64)0)
    6f2c:	88 89       	ldd	r24, Y+16	; 0x10
    6f2e:	88 23       	and	r24, r24
    6f30:	d4 f0       	brlt	.+52     	; 0x6f66 <LCD_vidWriteSignedInteger+0x7e>
    6f32:	88 89       	ldd	r24, Y+16	; 0x10
    6f34:	88 23       	and	r24, r24
    6f36:	09 f0       	breq	.+2      	; 0x6f3a <LCD_vidWriteSignedInteger+0x52>
    6f38:	fd c0       	rjmp	.+506    	; 0x7134 <LCD_vidWriteSignedInteger+0x24c>
    6f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f3c:	88 23       	and	r24, r24
    6f3e:	09 f0       	breq	.+2      	; 0x6f42 <LCD_vidWriteSignedInteger+0x5a>
    6f40:	f9 c0       	rjmp	.+498    	; 0x7134 <LCD_vidWriteSignedInteger+0x24c>
    6f42:	8e 85       	ldd	r24, Y+14	; 0x0e
    6f44:	88 23       	and	r24, r24
    6f46:	09 f0       	breq	.+2      	; 0x6f4a <LCD_vidWriteSignedInteger+0x62>
    6f48:	f5 c0       	rjmp	.+490    	; 0x7134 <LCD_vidWriteSignedInteger+0x24c>
    6f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f4c:	88 23       	and	r24, r24
    6f4e:	09 f0       	breq	.+2      	; 0x6f52 <LCD_vidWriteSignedInteger+0x6a>
    6f50:	f1 c0       	rjmp	.+482    	; 0x7134 <LCD_vidWriteSignedInteger+0x24c>
    6f52:	8c 85       	ldd	r24, Y+12	; 0x0c
    6f54:	88 23       	and	r24, r24
    6f56:	09 f0       	breq	.+2      	; 0x6f5a <LCD_vidWriteSignedInteger+0x72>
    6f58:	ed c0       	rjmp	.+474    	; 0x7134 <LCD_vidWriteSignedInteger+0x24c>
    6f5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    6f5c:	88 23       	and	r24, r24
    6f5e:	09 f0       	breq	.+2      	; 0x6f62 <LCD_vidWriteSignedInteger+0x7a>
    6f60:	e9 c0       	rjmp	.+466    	; 0x7134 <LCD_vidWriteSignedInteger+0x24c>
    6f62:	8a 85       	ldd	r24, Y+10	; 0x0a
    6f64:	e7 c0       	rjmp	.+462    	; 0x7134 <LCD_vidWriteSignedInteger+0x24c>
	{
		u64UnsignedNumCpy=s64SignedNumCpy*(-1);
    6f66:	1a 8a       	std	Y+18, r1	; 0x12
    6f68:	1b 8a       	std	Y+19, r1	; 0x13
    6f6a:	1c 8a       	std	Y+20, r1	; 0x14
    6f6c:	1d 8a       	std	Y+21, r1	; 0x15
    6f6e:	1e 8a       	std	Y+22, r1	; 0x16
    6f70:	1f 8a       	std	Y+23, r1	; 0x17
    6f72:	18 8e       	std	Y+24, r1	; 0x18
    6f74:	19 8e       	std	Y+25, r1	; 0x19
    6f76:	99 85       	ldd	r25, Y+9	; 0x09
    6f78:	9a 8f       	std	Y+26, r25	; 0x1a
    6f7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    6f7c:	8b 8f       	std	Y+27, r24	; 0x1b
    6f7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    6f80:	9c 8f       	std	Y+28, r25	; 0x1c
    6f82:	8c 85       	ldd	r24, Y+12	; 0x0c
    6f84:	8d 8f       	std	Y+29, r24	; 0x1d
    6f86:	9d 85       	ldd	r25, Y+13	; 0x0d
    6f88:	9e 8f       	std	Y+30, r25	; 0x1e
    6f8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    6f8c:	8f 8f       	std	Y+31, r24	; 0x1f
    6f8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6f90:	98 a3       	std	Y+32, r25	; 0x20
    6f92:	88 89       	ldd	r24, Y+16	; 0x10
    6f94:	89 a3       	std	Y+33, r24	; 0x21
    6f96:	9a 89       	ldd	r25, Y+18	; 0x12
    6f98:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6f9a:	98 1b       	sub	r25, r24
    6f9c:	9a a3       	std	Y+34, r25	; 0x22
    6f9e:	91 e0       	ldi	r25, 0x01	; 1
    6fa0:	9a a7       	std	Y+42, r25	; 0x2a
    6fa2:	8a a1       	ldd	r24, Y+34	; 0x22
    6fa4:	9a 89       	ldd	r25, Y+18	; 0x12
    6fa6:	98 17       	cp	r25, r24
    6fa8:	08 f0       	brcs	.+2      	; 0x6fac <LCD_vidWriteSignedInteger+0xc4>
    6faa:	1a a6       	std	Y+42, r1	; 0x2a
    6fac:	8b 89       	ldd	r24, Y+19	; 0x13
    6fae:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6fb0:	89 1b       	sub	r24, r25
    6fb2:	8b a3       	std	Y+35, r24	; 0x23
    6fb4:	81 e0       	ldi	r24, 0x01	; 1
    6fb6:	8b a7       	std	Y+43, r24	; 0x2b
    6fb8:	9b a1       	ldd	r25, Y+35	; 0x23
    6fba:	8b 89       	ldd	r24, Y+19	; 0x13
    6fbc:	89 17       	cp	r24, r25
    6fbe:	08 f0       	brcs	.+2      	; 0x6fc2 <LCD_vidWriteSignedInteger+0xda>
    6fc0:	1b a6       	std	Y+43, r1	; 0x2b
    6fc2:	9b a1       	ldd	r25, Y+35	; 0x23
    6fc4:	8a a5       	ldd	r24, Y+42	; 0x2a
    6fc6:	98 1b       	sub	r25, r24
    6fc8:	9c a7       	std	Y+44, r25	; 0x2c
    6fca:	91 e0       	ldi	r25, 0x01	; 1
    6fcc:	9d a7       	std	Y+45, r25	; 0x2d
    6fce:	8c a5       	ldd	r24, Y+44	; 0x2c
    6fd0:	9b a1       	ldd	r25, Y+35	; 0x23
    6fd2:	98 17       	cp	r25, r24
    6fd4:	08 f0       	brcs	.+2      	; 0x6fd8 <LCD_vidWriteSignedInteger+0xf0>
    6fd6:	1d a6       	std	Y+45, r1	; 0x2d
    6fd8:	8b a5       	ldd	r24, Y+43	; 0x2b
    6fda:	9d a5       	ldd	r25, Y+45	; 0x2d
    6fdc:	89 2b       	or	r24, r25
    6fde:	8b a7       	std	Y+43, r24	; 0x2b
    6fe0:	8c a5       	ldd	r24, Y+44	; 0x2c
    6fe2:	8b a3       	std	Y+35, r24	; 0x23
    6fe4:	9c 89       	ldd	r25, Y+20	; 0x14
    6fe6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6fe8:	98 1b       	sub	r25, r24
    6fea:	9c a3       	std	Y+36, r25	; 0x24
    6fec:	91 e0       	ldi	r25, 0x01	; 1
    6fee:	9e a7       	std	Y+46, r25	; 0x2e
    6ff0:	8c a1       	ldd	r24, Y+36	; 0x24
    6ff2:	9c 89       	ldd	r25, Y+20	; 0x14
    6ff4:	98 17       	cp	r25, r24
    6ff6:	08 f0       	brcs	.+2      	; 0x6ffa <LCD_vidWriteSignedInteger+0x112>
    6ff8:	1e a6       	std	Y+46, r1	; 0x2e
    6ffa:	8c a1       	ldd	r24, Y+36	; 0x24
    6ffc:	9b a5       	ldd	r25, Y+43	; 0x2b
    6ffe:	89 1b       	sub	r24, r25
    7000:	8f a7       	std	Y+47, r24	; 0x2f
    7002:	81 e0       	ldi	r24, 0x01	; 1
    7004:	88 ab       	std	Y+48, r24	; 0x30
    7006:	9f a5       	ldd	r25, Y+47	; 0x2f
    7008:	8c a1       	ldd	r24, Y+36	; 0x24
    700a:	89 17       	cp	r24, r25
    700c:	08 f0       	brcs	.+2      	; 0x7010 <LCD_vidWriteSignedInteger+0x128>
    700e:	18 aa       	std	Y+48, r1	; 0x30
    7010:	9e a5       	ldd	r25, Y+46	; 0x2e
    7012:	88 a9       	ldd	r24, Y+48	; 0x30
    7014:	98 2b       	or	r25, r24
    7016:	9e a7       	std	Y+46, r25	; 0x2e
    7018:	9f a5       	ldd	r25, Y+47	; 0x2f
    701a:	9c a3       	std	Y+36, r25	; 0x24
    701c:	8d 89       	ldd	r24, Y+21	; 0x15
    701e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7020:	89 1b       	sub	r24, r25
    7022:	8d a3       	std	Y+37, r24	; 0x25
    7024:	81 e0       	ldi	r24, 0x01	; 1
    7026:	89 ab       	std	Y+49, r24	; 0x31
    7028:	9d a1       	ldd	r25, Y+37	; 0x25
    702a:	8d 89       	ldd	r24, Y+21	; 0x15
    702c:	89 17       	cp	r24, r25
    702e:	08 f0       	brcs	.+2      	; 0x7032 <LCD_vidWriteSignedInteger+0x14a>
    7030:	19 aa       	std	Y+49, r1	; 0x31
    7032:	9d a1       	ldd	r25, Y+37	; 0x25
    7034:	8e a5       	ldd	r24, Y+46	; 0x2e
    7036:	98 1b       	sub	r25, r24
    7038:	9a ab       	std	Y+50, r25	; 0x32
    703a:	91 e0       	ldi	r25, 0x01	; 1
    703c:	9b ab       	std	Y+51, r25	; 0x33
    703e:	8a a9       	ldd	r24, Y+50	; 0x32
    7040:	9d a1       	ldd	r25, Y+37	; 0x25
    7042:	98 17       	cp	r25, r24
    7044:	08 f0       	brcs	.+2      	; 0x7048 <LCD_vidWriteSignedInteger+0x160>
    7046:	1b aa       	std	Y+51, r1	; 0x33
    7048:	89 a9       	ldd	r24, Y+49	; 0x31
    704a:	9b a9       	ldd	r25, Y+51	; 0x33
    704c:	89 2b       	or	r24, r25
    704e:	89 ab       	std	Y+49, r24	; 0x31
    7050:	8a a9       	ldd	r24, Y+50	; 0x32
    7052:	8d a3       	std	Y+37, r24	; 0x25
    7054:	9e 89       	ldd	r25, Y+22	; 0x16
    7056:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7058:	98 1b       	sub	r25, r24
    705a:	9e a3       	std	Y+38, r25	; 0x26
    705c:	91 e0       	ldi	r25, 0x01	; 1
    705e:	9c ab       	std	Y+52, r25	; 0x34
    7060:	8e a1       	ldd	r24, Y+38	; 0x26
    7062:	9e 89       	ldd	r25, Y+22	; 0x16
    7064:	98 17       	cp	r25, r24
    7066:	08 f0       	brcs	.+2      	; 0x706a <LCD_vidWriteSignedInteger+0x182>
    7068:	1c aa       	std	Y+52, r1	; 0x34
    706a:	8e a1       	ldd	r24, Y+38	; 0x26
    706c:	99 a9       	ldd	r25, Y+49	; 0x31
    706e:	89 1b       	sub	r24, r25
    7070:	8d ab       	std	Y+53, r24	; 0x35
    7072:	81 e0       	ldi	r24, 0x01	; 1
    7074:	8e ab       	std	Y+54, r24	; 0x36
    7076:	9d a9       	ldd	r25, Y+53	; 0x35
    7078:	8e a1       	ldd	r24, Y+38	; 0x26
    707a:	89 17       	cp	r24, r25
    707c:	08 f0       	brcs	.+2      	; 0x7080 <LCD_vidWriteSignedInteger+0x198>
    707e:	1e aa       	std	Y+54, r1	; 0x36
    7080:	9c a9       	ldd	r25, Y+52	; 0x34
    7082:	8e a9       	ldd	r24, Y+54	; 0x36
    7084:	98 2b       	or	r25, r24
    7086:	9c ab       	std	Y+52, r25	; 0x34
    7088:	9d a9       	ldd	r25, Y+53	; 0x35
    708a:	9e a3       	std	Y+38, r25	; 0x26
    708c:	8f 89       	ldd	r24, Y+23	; 0x17
    708e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7090:	89 1b       	sub	r24, r25
    7092:	8f a3       	std	Y+39, r24	; 0x27
    7094:	81 e0       	ldi	r24, 0x01	; 1
    7096:	8f ab       	std	Y+55, r24	; 0x37
    7098:	9f a1       	ldd	r25, Y+39	; 0x27
    709a:	8f 89       	ldd	r24, Y+23	; 0x17
    709c:	89 17       	cp	r24, r25
    709e:	08 f0       	brcs	.+2      	; 0x70a2 <LCD_vidWriteSignedInteger+0x1ba>
    70a0:	1f aa       	std	Y+55, r1	; 0x37
    70a2:	9f a1       	ldd	r25, Y+39	; 0x27
    70a4:	8c a9       	ldd	r24, Y+52	; 0x34
    70a6:	98 1b       	sub	r25, r24
    70a8:	98 af       	std	Y+56, r25	; 0x38
    70aa:	91 e0       	ldi	r25, 0x01	; 1
    70ac:	99 af       	std	Y+57, r25	; 0x39
    70ae:	88 ad       	ldd	r24, Y+56	; 0x38
    70b0:	9f a1       	ldd	r25, Y+39	; 0x27
    70b2:	98 17       	cp	r25, r24
    70b4:	08 f0       	brcs	.+2      	; 0x70b8 <LCD_vidWriteSignedInteger+0x1d0>
    70b6:	19 ae       	std	Y+57, r1	; 0x39
    70b8:	8f a9       	ldd	r24, Y+55	; 0x37
    70ba:	99 ad       	ldd	r25, Y+57	; 0x39
    70bc:	89 2b       	or	r24, r25
    70be:	8f ab       	std	Y+55, r24	; 0x37
    70c0:	88 ad       	ldd	r24, Y+56	; 0x38
    70c2:	8f a3       	std	Y+39, r24	; 0x27
    70c4:	98 8d       	ldd	r25, Y+24	; 0x18
    70c6:	88 a1       	ldd	r24, Y+32	; 0x20
    70c8:	98 1b       	sub	r25, r24
    70ca:	98 a7       	std	Y+40, r25	; 0x28
    70cc:	91 e0       	ldi	r25, 0x01	; 1
    70ce:	9a af       	std	Y+58, r25	; 0x3a
    70d0:	88 a5       	ldd	r24, Y+40	; 0x28
    70d2:	98 8d       	ldd	r25, Y+24	; 0x18
    70d4:	98 17       	cp	r25, r24
    70d6:	08 f0       	brcs	.+2      	; 0x70da <LCD_vidWriteSignedInteger+0x1f2>
    70d8:	1a ae       	std	Y+58, r1	; 0x3a
    70da:	88 a5       	ldd	r24, Y+40	; 0x28
    70dc:	9f a9       	ldd	r25, Y+55	; 0x37
    70de:	89 1b       	sub	r24, r25
    70e0:	8b af       	std	Y+59, r24	; 0x3b
    70e2:	81 e0       	ldi	r24, 0x01	; 1
    70e4:	8c af       	std	Y+60, r24	; 0x3c
    70e6:	9b ad       	ldd	r25, Y+59	; 0x3b
    70e8:	88 a5       	ldd	r24, Y+40	; 0x28
    70ea:	89 17       	cp	r24, r25
    70ec:	08 f0       	brcs	.+2      	; 0x70f0 <LCD_vidWriteSignedInteger+0x208>
    70ee:	1c ae       	std	Y+60, r1	; 0x3c
    70f0:	9a ad       	ldd	r25, Y+58	; 0x3a
    70f2:	8c ad       	ldd	r24, Y+60	; 0x3c
    70f4:	98 2b       	or	r25, r24
    70f6:	9a af       	std	Y+58, r25	; 0x3a
    70f8:	9b ad       	ldd	r25, Y+59	; 0x3b
    70fa:	98 a7       	std	Y+40, r25	; 0x28
    70fc:	89 8d       	ldd	r24, Y+25	; 0x19
    70fe:	99 a1       	ldd	r25, Y+33	; 0x21
    7100:	89 1b       	sub	r24, r25
    7102:	89 a7       	std	Y+41, r24	; 0x29
    7104:	89 a5       	ldd	r24, Y+41	; 0x29
    7106:	9a ad       	ldd	r25, Y+58	; 0x3a
    7108:	89 1b       	sub	r24, r25
    710a:	89 a7       	std	Y+41, r24	; 0x29
    710c:	2a a1       	ldd	r18, Y+34	; 0x22
    710e:	3b a1       	ldd	r19, Y+35	; 0x23
    7110:	4c a1       	ldd	r20, Y+36	; 0x24
    7112:	5d a1       	ldd	r21, Y+37	; 0x25
    7114:	6e a1       	ldd	r22, Y+38	; 0x26
    7116:	7f a1       	ldd	r23, Y+39	; 0x27
    7118:	88 a5       	ldd	r24, Y+40	; 0x28
    711a:	99 a5       	ldd	r25, Y+41	; 0x29
    711c:	29 83       	std	Y+1, r18	; 0x01
    711e:	3a 83       	std	Y+2, r19	; 0x02
    7120:	4b 83       	std	Y+3, r20	; 0x03
    7122:	5c 83       	std	Y+4, r21	; 0x04
    7124:	6d 83       	std	Y+5, r22	; 0x05
    7126:	7e 83       	std	Y+6, r23	; 0x06
    7128:	8f 83       	std	Y+7, r24	; 0x07
    712a:	98 87       	std	Y+8, r25	; 0x08
        LCD_vidWriteCharacter('-');
    712c:	8d e2       	ldi	r24, 0x2D	; 45
    712e:	0e 94 ac 30 	call	0x6158	; 0x6158 <LCD_vidWriteCharacter>
    7132:	10 c0       	rjmp	.+32     	; 0x7154 <LCD_vidWriteSignedInteger+0x26c>
	}
	else
	{
		u64UnsignedNumCpy=s64SignedNumCpy;
    7134:	89 85       	ldd	r24, Y+9	; 0x09
    7136:	89 83       	std	Y+1, r24	; 0x01
    7138:	8a 85       	ldd	r24, Y+10	; 0x0a
    713a:	8a 83       	std	Y+2, r24	; 0x02
    713c:	8b 85       	ldd	r24, Y+11	; 0x0b
    713e:	8b 83       	std	Y+3, r24	; 0x03
    7140:	8c 85       	ldd	r24, Y+12	; 0x0c
    7142:	8c 83       	std	Y+4, r24	; 0x04
    7144:	8d 85       	ldd	r24, Y+13	; 0x0d
    7146:	8d 83       	std	Y+5, r24	; 0x05
    7148:	8e 85       	ldd	r24, Y+14	; 0x0e
    714a:	8e 83       	std	Y+6, r24	; 0x06
    714c:	8f 85       	ldd	r24, Y+15	; 0x0f
    714e:	8f 83       	std	Y+7, r24	; 0x07
    7150:	88 89       	ldd	r24, Y+16	; 0x10
    7152:	88 87       	std	Y+8, r24	; 0x08
	}

	LCD_vidWriteUnSignedInteger(u64UnsignedNumCpy);
    7154:	a9 80       	ldd	r10, Y+1	; 0x01
    7156:	ba 80       	ldd	r11, Y+2	; 0x02
    7158:	cb 80       	ldd	r12, Y+3	; 0x03
    715a:	dc 80       	ldd	r13, Y+4	; 0x04
    715c:	ed 80       	ldd	r14, Y+5	; 0x05
    715e:	fe 80       	ldd	r15, Y+6	; 0x06
    7160:	0f 81       	ldd	r16, Y+7	; 0x07
    7162:	18 85       	ldd	r17, Y+8	; 0x08
    7164:	2a 2d       	mov	r18, r10
    7166:	3b 2d       	mov	r19, r11
    7168:	4c 2d       	mov	r20, r12
    716a:	5d 2d       	mov	r21, r13
    716c:	6e 2d       	mov	r22, r14
    716e:	7f 2d       	mov	r23, r15
    7170:	80 2f       	mov	r24, r16
    7172:	91 2f       	mov	r25, r17
    7174:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <LCD_vidWriteUnSignedInteger>


}
    7178:	ec 96       	adiw	r28, 0x3c	; 60
    717a:	0f b6       	in	r0, 0x3f	; 63
    717c:	f8 94       	cli
    717e:	de bf       	out	0x3e, r29	; 62
    7180:	0f be       	out	0x3f, r0	; 63
    7182:	cd bf       	out	0x3d, r28	; 61
    7184:	cf 91       	pop	r28
    7186:	df 91       	pop	r29
    7188:	1f 91       	pop	r17
    718a:	0f 91       	pop	r16
    718c:	ff 90       	pop	r15
    718e:	ef 90       	pop	r14
    7190:	df 90       	pop	r13
    7192:	cf 90       	pop	r12
    7194:	bf 90       	pop	r11
    7196:	af 90       	pop	r10
    7198:	08 95       	ret

0000719a <LCD_vidWriteSignedInteger4>:
//......................................................................................
void LCD_vidWriteSignedInteger4(sint64 s64SignedNumCpy)
{
    719a:	af 92       	push	r10
    719c:	bf 92       	push	r11
    719e:	cf 92       	push	r12
    71a0:	df 92       	push	r13
    71a2:	ef 92       	push	r14
    71a4:	ff 92       	push	r15
    71a6:	0f 93       	push	r16
    71a8:	1f 93       	push	r17
    71aa:	df 93       	push	r29
    71ac:	cf 93       	push	r28
    71ae:	cd b7       	in	r28, 0x3d	; 61
    71b0:	de b7       	in	r29, 0x3e	; 62
    71b2:	ec 97       	sbiw	r28, 0x3c	; 60
    71b4:	0f b6       	in	r0, 0x3f	; 63
    71b6:	f8 94       	cli
    71b8:	de bf       	out	0x3e, r29	; 62
    71ba:	0f be       	out	0x3f, r0	; 63
    71bc:	cd bf       	out	0x3d, r28	; 61
    71be:	29 87       	std	Y+9, r18	; 0x09
    71c0:	3a 87       	std	Y+10, r19	; 0x0a
    71c2:	4b 87       	std	Y+11, r20	; 0x0b
    71c4:	5c 87       	std	Y+12, r21	; 0x0c
    71c6:	6d 87       	std	Y+13, r22	; 0x0d
    71c8:	7e 87       	std	Y+14, r23	; 0x0e
    71ca:	8f 87       	std	Y+15, r24	; 0x0f
    71cc:	98 8b       	std	Y+16, r25	; 0x10
	uint64 u64UnsignedNumCpy=0;
    71ce:	19 82       	std	Y+1, r1	; 0x01
    71d0:	1a 82       	std	Y+2, r1	; 0x02
    71d2:	1b 82       	std	Y+3, r1	; 0x03
    71d4:	1c 82       	std	Y+4, r1	; 0x04
    71d6:	1d 82       	std	Y+5, r1	; 0x05
    71d8:	1e 82       	std	Y+6, r1	; 0x06
    71da:	1f 82       	std	Y+7, r1	; 0x07
    71dc:	18 86       	std	Y+8, r1	; 0x08
		if(s64SignedNumCpy<(sint64)0)
    71de:	88 89       	ldd	r24, Y+16	; 0x10
    71e0:	88 23       	and	r24, r24
    71e2:	d4 f0       	brlt	.+52     	; 0x7218 <LCD_vidWriteSignedInteger4+0x7e>
    71e4:	88 89       	ldd	r24, Y+16	; 0x10
    71e6:	88 23       	and	r24, r24
    71e8:	09 f0       	breq	.+2      	; 0x71ec <LCD_vidWriteSignedInteger4+0x52>
    71ea:	fd c0       	rjmp	.+506    	; 0x73e6 <LCD_vidWriteSignedInteger4+0x24c>
    71ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    71ee:	88 23       	and	r24, r24
    71f0:	09 f0       	breq	.+2      	; 0x71f4 <LCD_vidWriteSignedInteger4+0x5a>
    71f2:	f9 c0       	rjmp	.+498    	; 0x73e6 <LCD_vidWriteSignedInteger4+0x24c>
    71f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    71f6:	88 23       	and	r24, r24
    71f8:	09 f0       	breq	.+2      	; 0x71fc <LCD_vidWriteSignedInteger4+0x62>
    71fa:	f5 c0       	rjmp	.+490    	; 0x73e6 <LCD_vidWriteSignedInteger4+0x24c>
    71fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    71fe:	88 23       	and	r24, r24
    7200:	09 f0       	breq	.+2      	; 0x7204 <LCD_vidWriteSignedInteger4+0x6a>
    7202:	f1 c0       	rjmp	.+482    	; 0x73e6 <LCD_vidWriteSignedInteger4+0x24c>
    7204:	8c 85       	ldd	r24, Y+12	; 0x0c
    7206:	88 23       	and	r24, r24
    7208:	09 f0       	breq	.+2      	; 0x720c <LCD_vidWriteSignedInteger4+0x72>
    720a:	ed c0       	rjmp	.+474    	; 0x73e6 <LCD_vidWriteSignedInteger4+0x24c>
    720c:	8b 85       	ldd	r24, Y+11	; 0x0b
    720e:	88 23       	and	r24, r24
    7210:	09 f0       	breq	.+2      	; 0x7214 <LCD_vidWriteSignedInteger4+0x7a>
    7212:	e9 c0       	rjmp	.+466    	; 0x73e6 <LCD_vidWriteSignedInteger4+0x24c>
    7214:	8a 85       	ldd	r24, Y+10	; 0x0a
    7216:	e7 c0       	rjmp	.+462    	; 0x73e6 <LCD_vidWriteSignedInteger4+0x24c>
		{
			u64UnsignedNumCpy=s64SignedNumCpy*(-1);
    7218:	1a 8a       	std	Y+18, r1	; 0x12
    721a:	1b 8a       	std	Y+19, r1	; 0x13
    721c:	1c 8a       	std	Y+20, r1	; 0x14
    721e:	1d 8a       	std	Y+21, r1	; 0x15
    7220:	1e 8a       	std	Y+22, r1	; 0x16
    7222:	1f 8a       	std	Y+23, r1	; 0x17
    7224:	18 8e       	std	Y+24, r1	; 0x18
    7226:	19 8e       	std	Y+25, r1	; 0x19
    7228:	99 85       	ldd	r25, Y+9	; 0x09
    722a:	9a 8f       	std	Y+26, r25	; 0x1a
    722c:	8a 85       	ldd	r24, Y+10	; 0x0a
    722e:	8b 8f       	std	Y+27, r24	; 0x1b
    7230:	9b 85       	ldd	r25, Y+11	; 0x0b
    7232:	9c 8f       	std	Y+28, r25	; 0x1c
    7234:	8c 85       	ldd	r24, Y+12	; 0x0c
    7236:	8d 8f       	std	Y+29, r24	; 0x1d
    7238:	9d 85       	ldd	r25, Y+13	; 0x0d
    723a:	9e 8f       	std	Y+30, r25	; 0x1e
    723c:	8e 85       	ldd	r24, Y+14	; 0x0e
    723e:	8f 8f       	std	Y+31, r24	; 0x1f
    7240:	9f 85       	ldd	r25, Y+15	; 0x0f
    7242:	98 a3       	std	Y+32, r25	; 0x20
    7244:	88 89       	ldd	r24, Y+16	; 0x10
    7246:	89 a3       	std	Y+33, r24	; 0x21
    7248:	9a 89       	ldd	r25, Y+18	; 0x12
    724a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    724c:	98 1b       	sub	r25, r24
    724e:	9a a3       	std	Y+34, r25	; 0x22
    7250:	91 e0       	ldi	r25, 0x01	; 1
    7252:	9a a7       	std	Y+42, r25	; 0x2a
    7254:	8a a1       	ldd	r24, Y+34	; 0x22
    7256:	9a 89       	ldd	r25, Y+18	; 0x12
    7258:	98 17       	cp	r25, r24
    725a:	08 f0       	brcs	.+2      	; 0x725e <LCD_vidWriteSignedInteger4+0xc4>
    725c:	1a a6       	std	Y+42, r1	; 0x2a
    725e:	8b 89       	ldd	r24, Y+19	; 0x13
    7260:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7262:	89 1b       	sub	r24, r25
    7264:	8b a3       	std	Y+35, r24	; 0x23
    7266:	81 e0       	ldi	r24, 0x01	; 1
    7268:	8b a7       	std	Y+43, r24	; 0x2b
    726a:	9b a1       	ldd	r25, Y+35	; 0x23
    726c:	8b 89       	ldd	r24, Y+19	; 0x13
    726e:	89 17       	cp	r24, r25
    7270:	08 f0       	brcs	.+2      	; 0x7274 <LCD_vidWriteSignedInteger4+0xda>
    7272:	1b a6       	std	Y+43, r1	; 0x2b
    7274:	9b a1       	ldd	r25, Y+35	; 0x23
    7276:	8a a5       	ldd	r24, Y+42	; 0x2a
    7278:	98 1b       	sub	r25, r24
    727a:	9c a7       	std	Y+44, r25	; 0x2c
    727c:	91 e0       	ldi	r25, 0x01	; 1
    727e:	9d a7       	std	Y+45, r25	; 0x2d
    7280:	8c a5       	ldd	r24, Y+44	; 0x2c
    7282:	9b a1       	ldd	r25, Y+35	; 0x23
    7284:	98 17       	cp	r25, r24
    7286:	08 f0       	brcs	.+2      	; 0x728a <LCD_vidWriteSignedInteger4+0xf0>
    7288:	1d a6       	std	Y+45, r1	; 0x2d
    728a:	8b a5       	ldd	r24, Y+43	; 0x2b
    728c:	9d a5       	ldd	r25, Y+45	; 0x2d
    728e:	89 2b       	or	r24, r25
    7290:	8b a7       	std	Y+43, r24	; 0x2b
    7292:	8c a5       	ldd	r24, Y+44	; 0x2c
    7294:	8b a3       	std	Y+35, r24	; 0x23
    7296:	9c 89       	ldd	r25, Y+20	; 0x14
    7298:	8c 8d       	ldd	r24, Y+28	; 0x1c
    729a:	98 1b       	sub	r25, r24
    729c:	9c a3       	std	Y+36, r25	; 0x24
    729e:	91 e0       	ldi	r25, 0x01	; 1
    72a0:	9e a7       	std	Y+46, r25	; 0x2e
    72a2:	8c a1       	ldd	r24, Y+36	; 0x24
    72a4:	9c 89       	ldd	r25, Y+20	; 0x14
    72a6:	98 17       	cp	r25, r24
    72a8:	08 f0       	brcs	.+2      	; 0x72ac <LCD_vidWriteSignedInteger4+0x112>
    72aa:	1e a6       	std	Y+46, r1	; 0x2e
    72ac:	8c a1       	ldd	r24, Y+36	; 0x24
    72ae:	9b a5       	ldd	r25, Y+43	; 0x2b
    72b0:	89 1b       	sub	r24, r25
    72b2:	8f a7       	std	Y+47, r24	; 0x2f
    72b4:	81 e0       	ldi	r24, 0x01	; 1
    72b6:	88 ab       	std	Y+48, r24	; 0x30
    72b8:	9f a5       	ldd	r25, Y+47	; 0x2f
    72ba:	8c a1       	ldd	r24, Y+36	; 0x24
    72bc:	89 17       	cp	r24, r25
    72be:	08 f0       	brcs	.+2      	; 0x72c2 <LCD_vidWriteSignedInteger4+0x128>
    72c0:	18 aa       	std	Y+48, r1	; 0x30
    72c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    72c4:	88 a9       	ldd	r24, Y+48	; 0x30
    72c6:	98 2b       	or	r25, r24
    72c8:	9e a7       	std	Y+46, r25	; 0x2e
    72ca:	9f a5       	ldd	r25, Y+47	; 0x2f
    72cc:	9c a3       	std	Y+36, r25	; 0x24
    72ce:	8d 89       	ldd	r24, Y+21	; 0x15
    72d0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    72d2:	89 1b       	sub	r24, r25
    72d4:	8d a3       	std	Y+37, r24	; 0x25
    72d6:	81 e0       	ldi	r24, 0x01	; 1
    72d8:	89 ab       	std	Y+49, r24	; 0x31
    72da:	9d a1       	ldd	r25, Y+37	; 0x25
    72dc:	8d 89       	ldd	r24, Y+21	; 0x15
    72de:	89 17       	cp	r24, r25
    72e0:	08 f0       	brcs	.+2      	; 0x72e4 <LCD_vidWriteSignedInteger4+0x14a>
    72e2:	19 aa       	std	Y+49, r1	; 0x31
    72e4:	9d a1       	ldd	r25, Y+37	; 0x25
    72e6:	8e a5       	ldd	r24, Y+46	; 0x2e
    72e8:	98 1b       	sub	r25, r24
    72ea:	9a ab       	std	Y+50, r25	; 0x32
    72ec:	91 e0       	ldi	r25, 0x01	; 1
    72ee:	9b ab       	std	Y+51, r25	; 0x33
    72f0:	8a a9       	ldd	r24, Y+50	; 0x32
    72f2:	9d a1       	ldd	r25, Y+37	; 0x25
    72f4:	98 17       	cp	r25, r24
    72f6:	08 f0       	brcs	.+2      	; 0x72fa <LCD_vidWriteSignedInteger4+0x160>
    72f8:	1b aa       	std	Y+51, r1	; 0x33
    72fa:	89 a9       	ldd	r24, Y+49	; 0x31
    72fc:	9b a9       	ldd	r25, Y+51	; 0x33
    72fe:	89 2b       	or	r24, r25
    7300:	89 ab       	std	Y+49, r24	; 0x31
    7302:	8a a9       	ldd	r24, Y+50	; 0x32
    7304:	8d a3       	std	Y+37, r24	; 0x25
    7306:	9e 89       	ldd	r25, Y+22	; 0x16
    7308:	8e 8d       	ldd	r24, Y+30	; 0x1e
    730a:	98 1b       	sub	r25, r24
    730c:	9e a3       	std	Y+38, r25	; 0x26
    730e:	91 e0       	ldi	r25, 0x01	; 1
    7310:	9c ab       	std	Y+52, r25	; 0x34
    7312:	8e a1       	ldd	r24, Y+38	; 0x26
    7314:	9e 89       	ldd	r25, Y+22	; 0x16
    7316:	98 17       	cp	r25, r24
    7318:	08 f0       	brcs	.+2      	; 0x731c <LCD_vidWriteSignedInteger4+0x182>
    731a:	1c aa       	std	Y+52, r1	; 0x34
    731c:	8e a1       	ldd	r24, Y+38	; 0x26
    731e:	99 a9       	ldd	r25, Y+49	; 0x31
    7320:	89 1b       	sub	r24, r25
    7322:	8d ab       	std	Y+53, r24	; 0x35
    7324:	81 e0       	ldi	r24, 0x01	; 1
    7326:	8e ab       	std	Y+54, r24	; 0x36
    7328:	9d a9       	ldd	r25, Y+53	; 0x35
    732a:	8e a1       	ldd	r24, Y+38	; 0x26
    732c:	89 17       	cp	r24, r25
    732e:	08 f0       	brcs	.+2      	; 0x7332 <LCD_vidWriteSignedInteger4+0x198>
    7330:	1e aa       	std	Y+54, r1	; 0x36
    7332:	9c a9       	ldd	r25, Y+52	; 0x34
    7334:	8e a9       	ldd	r24, Y+54	; 0x36
    7336:	98 2b       	or	r25, r24
    7338:	9c ab       	std	Y+52, r25	; 0x34
    733a:	9d a9       	ldd	r25, Y+53	; 0x35
    733c:	9e a3       	std	Y+38, r25	; 0x26
    733e:	8f 89       	ldd	r24, Y+23	; 0x17
    7340:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7342:	89 1b       	sub	r24, r25
    7344:	8f a3       	std	Y+39, r24	; 0x27
    7346:	81 e0       	ldi	r24, 0x01	; 1
    7348:	8f ab       	std	Y+55, r24	; 0x37
    734a:	9f a1       	ldd	r25, Y+39	; 0x27
    734c:	8f 89       	ldd	r24, Y+23	; 0x17
    734e:	89 17       	cp	r24, r25
    7350:	08 f0       	brcs	.+2      	; 0x7354 <LCD_vidWriteSignedInteger4+0x1ba>
    7352:	1f aa       	std	Y+55, r1	; 0x37
    7354:	9f a1       	ldd	r25, Y+39	; 0x27
    7356:	8c a9       	ldd	r24, Y+52	; 0x34
    7358:	98 1b       	sub	r25, r24
    735a:	98 af       	std	Y+56, r25	; 0x38
    735c:	91 e0       	ldi	r25, 0x01	; 1
    735e:	99 af       	std	Y+57, r25	; 0x39
    7360:	88 ad       	ldd	r24, Y+56	; 0x38
    7362:	9f a1       	ldd	r25, Y+39	; 0x27
    7364:	98 17       	cp	r25, r24
    7366:	08 f0       	brcs	.+2      	; 0x736a <LCD_vidWriteSignedInteger4+0x1d0>
    7368:	19 ae       	std	Y+57, r1	; 0x39
    736a:	8f a9       	ldd	r24, Y+55	; 0x37
    736c:	99 ad       	ldd	r25, Y+57	; 0x39
    736e:	89 2b       	or	r24, r25
    7370:	8f ab       	std	Y+55, r24	; 0x37
    7372:	88 ad       	ldd	r24, Y+56	; 0x38
    7374:	8f a3       	std	Y+39, r24	; 0x27
    7376:	98 8d       	ldd	r25, Y+24	; 0x18
    7378:	88 a1       	ldd	r24, Y+32	; 0x20
    737a:	98 1b       	sub	r25, r24
    737c:	98 a7       	std	Y+40, r25	; 0x28
    737e:	91 e0       	ldi	r25, 0x01	; 1
    7380:	9a af       	std	Y+58, r25	; 0x3a
    7382:	88 a5       	ldd	r24, Y+40	; 0x28
    7384:	98 8d       	ldd	r25, Y+24	; 0x18
    7386:	98 17       	cp	r25, r24
    7388:	08 f0       	brcs	.+2      	; 0x738c <LCD_vidWriteSignedInteger4+0x1f2>
    738a:	1a ae       	std	Y+58, r1	; 0x3a
    738c:	88 a5       	ldd	r24, Y+40	; 0x28
    738e:	9f a9       	ldd	r25, Y+55	; 0x37
    7390:	89 1b       	sub	r24, r25
    7392:	8b af       	std	Y+59, r24	; 0x3b
    7394:	81 e0       	ldi	r24, 0x01	; 1
    7396:	8c af       	std	Y+60, r24	; 0x3c
    7398:	9b ad       	ldd	r25, Y+59	; 0x3b
    739a:	88 a5       	ldd	r24, Y+40	; 0x28
    739c:	89 17       	cp	r24, r25
    739e:	08 f0       	brcs	.+2      	; 0x73a2 <LCD_vidWriteSignedInteger4+0x208>
    73a0:	1c ae       	std	Y+60, r1	; 0x3c
    73a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    73a4:	8c ad       	ldd	r24, Y+60	; 0x3c
    73a6:	98 2b       	or	r25, r24
    73a8:	9a af       	std	Y+58, r25	; 0x3a
    73aa:	9b ad       	ldd	r25, Y+59	; 0x3b
    73ac:	98 a7       	std	Y+40, r25	; 0x28
    73ae:	89 8d       	ldd	r24, Y+25	; 0x19
    73b0:	99 a1       	ldd	r25, Y+33	; 0x21
    73b2:	89 1b       	sub	r24, r25
    73b4:	89 a7       	std	Y+41, r24	; 0x29
    73b6:	89 a5       	ldd	r24, Y+41	; 0x29
    73b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    73ba:	89 1b       	sub	r24, r25
    73bc:	89 a7       	std	Y+41, r24	; 0x29
    73be:	2a a1       	ldd	r18, Y+34	; 0x22
    73c0:	3b a1       	ldd	r19, Y+35	; 0x23
    73c2:	4c a1       	ldd	r20, Y+36	; 0x24
    73c4:	5d a1       	ldd	r21, Y+37	; 0x25
    73c6:	6e a1       	ldd	r22, Y+38	; 0x26
    73c8:	7f a1       	ldd	r23, Y+39	; 0x27
    73ca:	88 a5       	ldd	r24, Y+40	; 0x28
    73cc:	99 a5       	ldd	r25, Y+41	; 0x29
    73ce:	29 83       	std	Y+1, r18	; 0x01
    73d0:	3a 83       	std	Y+2, r19	; 0x02
    73d2:	4b 83       	std	Y+3, r20	; 0x03
    73d4:	5c 83       	std	Y+4, r21	; 0x04
    73d6:	6d 83       	std	Y+5, r22	; 0x05
    73d8:	7e 83       	std	Y+6, r23	; 0x06
    73da:	8f 83       	std	Y+7, r24	; 0x07
    73dc:	98 87       	std	Y+8, r25	; 0x08
	        LCD_vidWriteCharacter4('-');
    73de:	8d e2       	ldi	r24, 0x2D	; 45
    73e0:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <LCD_vidWriteCharacter4>
    73e4:	10 c0       	rjmp	.+32     	; 0x7406 <LCD_vidWriteSignedInteger4+0x26c>
		}
		else
		{
			u64UnsignedNumCpy=s64SignedNumCpy;
    73e6:	89 85       	ldd	r24, Y+9	; 0x09
    73e8:	89 83       	std	Y+1, r24	; 0x01
    73ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    73ec:	8a 83       	std	Y+2, r24	; 0x02
    73ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    73f0:	8b 83       	std	Y+3, r24	; 0x03
    73f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    73f4:	8c 83       	std	Y+4, r24	; 0x04
    73f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    73f8:	8d 83       	std	Y+5, r24	; 0x05
    73fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    73fc:	8e 83       	std	Y+6, r24	; 0x06
    73fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    7400:	8f 83       	std	Y+7, r24	; 0x07
    7402:	88 89       	ldd	r24, Y+16	; 0x10
    7404:	88 87       	std	Y+8, r24	; 0x08
		}

		LCD_vidWriteUnSignedInteger4(u64UnsignedNumCpy);
    7406:	a9 80       	ldd	r10, Y+1	; 0x01
    7408:	ba 80       	ldd	r11, Y+2	; 0x02
    740a:	cb 80       	ldd	r12, Y+3	; 0x03
    740c:	dc 80       	ldd	r13, Y+4	; 0x04
    740e:	ed 80       	ldd	r14, Y+5	; 0x05
    7410:	fe 80       	ldd	r15, Y+6	; 0x06
    7412:	0f 81       	ldd	r16, Y+7	; 0x07
    7414:	18 85       	ldd	r17, Y+8	; 0x08
    7416:	2a 2d       	mov	r18, r10
    7418:	3b 2d       	mov	r19, r11
    741a:	4c 2d       	mov	r20, r12
    741c:	5d 2d       	mov	r21, r13
    741e:	6e 2d       	mov	r22, r14
    7420:	7f 2d       	mov	r23, r15
    7422:	80 2f       	mov	r24, r16
    7424:	91 2f       	mov	r25, r17
    7426:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <LCD_vidWriteUnSignedInteger4>

}
    742a:	ec 96       	adiw	r28, 0x3c	; 60
    742c:	0f b6       	in	r0, 0x3f	; 63
    742e:	f8 94       	cli
    7430:	de bf       	out	0x3e, r29	; 62
    7432:	0f be       	out	0x3f, r0	; 63
    7434:	cd bf       	out	0x3d, r28	; 61
    7436:	cf 91       	pop	r28
    7438:	df 91       	pop	r29
    743a:	1f 91       	pop	r17
    743c:	0f 91       	pop	r16
    743e:	ff 90       	pop	r15
    7440:	ef 90       	pop	r14
    7442:	df 90       	pop	r13
    7444:	cf 90       	pop	r12
    7446:	bf 90       	pop	r11
    7448:	af 90       	pop	r10
    744a:	08 95       	ret

0000744c <LCD_vidGotoxy>:



//...............................................................................................
void LCD_vidGotoxy(uint8 u8Numx,uint8 u8Numy)
{
    744c:	df 93       	push	r29
    744e:	cf 93       	push	r28
    7450:	00 d0       	rcall	.+0      	; 0x7452 <LCD_vidGotoxy+0x6>
    7452:	00 d0       	rcall	.+0      	; 0x7454 <LCD_vidGotoxy+0x8>
    7454:	cd b7       	in	r28, 0x3d	; 61
    7456:	de b7       	in	r29, 0x3e	; 62
    7458:	89 83       	std	Y+1, r24	; 0x01
    745a:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8Numy)
    745c:	8a 81       	ldd	r24, Y+2	; 0x02
    745e:	28 2f       	mov	r18, r24
    7460:	30 e0       	ldi	r19, 0x00	; 0
    7462:	3c 83       	std	Y+4, r19	; 0x04
    7464:	2b 83       	std	Y+3, r18	; 0x03
    7466:	8b 81       	ldd	r24, Y+3	; 0x03
    7468:	9c 81       	ldd	r25, Y+4	; 0x04
    746a:	00 97       	sbiw	r24, 0x00	; 0
    746c:	31 f0       	breq	.+12     	; 0x747a <LCD_vidGotoxy+0x2e>
    746e:	2b 81       	ldd	r18, Y+3	; 0x03
    7470:	3c 81       	ldd	r19, Y+4	; 0x04
    7472:	21 30       	cpi	r18, 0x01	; 1
    7474:	31 05       	cpc	r19, r1
    7476:	49 f0       	breq	.+18     	; 0x748a <LCD_vidGotoxy+0x3e>
    7478:	0f c0       	rjmp	.+30     	; 0x7498 <LCD_vidGotoxy+0x4c>
	{
	case 0 : if((u8Numx<16)&&(u8Numx>=0))
    747a:	89 81       	ldd	r24, Y+1	; 0x01
    747c:	80 31       	cpi	r24, 0x10	; 16
    747e:	60 f4       	brcc	.+24     	; 0x7498 <LCD_vidGotoxy+0x4c>
		    LCD_vidSendCommand(0x80+u8Numx);
    7480:	89 81       	ldd	r24, Y+1	; 0x01
    7482:	80 58       	subi	r24, 0x80	; 128
    7484:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
    7488:	07 c0       	rjmp	.+14     	; 0x7498 <LCD_vidGotoxy+0x4c>
	        break;

	case 1:if((u8Numx<16)&&(u8Numx>=0))
    748a:	89 81       	ldd	r24, Y+1	; 0x01
    748c:	80 31       	cpi	r24, 0x10	; 16
    748e:	20 f4       	brcc	.+8      	; 0x7498 <LCD_vidGotoxy+0x4c>
	          LCD_vidSendCommand(0xc0+u8Numx);
    7490:	89 81       	ldd	r24, Y+1	; 0x01
    7492:	80 54       	subi	r24, 0x40	; 64
    7494:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
                break;
	}
}
    7498:	0f 90       	pop	r0
    749a:	0f 90       	pop	r0
    749c:	0f 90       	pop	r0
    749e:	0f 90       	pop	r0
    74a0:	cf 91       	pop	r28
    74a2:	df 91       	pop	r29
    74a4:	08 95       	ret

000074a6 <LCD_vidGotoxy4>:
//...........................................................................................
void LCD_vidGotoxy4(uint8 u8Numx,uint8 u8Numy)
{
    74a6:	df 93       	push	r29
    74a8:	cf 93       	push	r28
    74aa:	00 d0       	rcall	.+0      	; 0x74ac <LCD_vidGotoxy4+0x6>
    74ac:	00 d0       	rcall	.+0      	; 0x74ae <LCD_vidGotoxy4+0x8>
    74ae:	cd b7       	in	r28, 0x3d	; 61
    74b0:	de b7       	in	r29, 0x3e	; 62
    74b2:	89 83       	std	Y+1, r24	; 0x01
    74b4:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8Numy)
    74b6:	8a 81       	ldd	r24, Y+2	; 0x02
    74b8:	28 2f       	mov	r18, r24
    74ba:	30 e0       	ldi	r19, 0x00	; 0
    74bc:	3c 83       	std	Y+4, r19	; 0x04
    74be:	2b 83       	std	Y+3, r18	; 0x03
    74c0:	8b 81       	ldd	r24, Y+3	; 0x03
    74c2:	9c 81       	ldd	r25, Y+4	; 0x04
    74c4:	00 97       	sbiw	r24, 0x00	; 0
    74c6:	31 f0       	breq	.+12     	; 0x74d4 <LCD_vidGotoxy4+0x2e>
    74c8:	2b 81       	ldd	r18, Y+3	; 0x03
    74ca:	3c 81       	ldd	r19, Y+4	; 0x04
    74cc:	21 30       	cpi	r18, 0x01	; 1
    74ce:	31 05       	cpc	r19, r1
    74d0:	49 f0       	breq	.+18     	; 0x74e4 <LCD_vidGotoxy4+0x3e>
    74d2:	0f c0       	rjmp	.+30     	; 0x74f2 <LCD_vidGotoxy4+0x4c>
		{
		case 0 : if((u8Numx<16)&&(u8Numx>=0))
    74d4:	89 81       	ldd	r24, Y+1	; 0x01
    74d6:	80 31       	cpi	r24, 0x10	; 16
    74d8:	60 f4       	brcc	.+24     	; 0x74f2 <LCD_vidGotoxy4+0x4c>
			LCD_vidSendCommand4(0x80+u8Numx);
    74da:	89 81       	ldd	r24, Y+1	; 0x01
    74dc:	80 58       	subi	r24, 0x80	; 128
    74de:	0e 94 c1 31 	call	0x6382	; 0x6382 <LCD_vidSendCommand4>
    74e2:	07 c0       	rjmp	.+14     	; 0x74f2 <LCD_vidGotoxy4+0x4c>
		        break;

		case 1:if((u8Numx<16)&&(u8Numx>=0))
    74e4:	89 81       	ldd	r24, Y+1	; 0x01
    74e6:	80 31       	cpi	r24, 0x10	; 16
    74e8:	20 f4       	brcc	.+8      	; 0x74f2 <LCD_vidGotoxy4+0x4c>
			LCD_vidSendCommand4(0xc0+u8Numx);
    74ea:	89 81       	ldd	r24, Y+1	; 0x01
    74ec:	80 54       	subi	r24, 0x40	; 64
    74ee:	0e 94 c1 31 	call	0x6382	; 0x6382 <LCD_vidSendCommand4>
	                break;
		}


}
    74f2:	0f 90       	pop	r0
    74f4:	0f 90       	pop	r0
    74f6:	0f 90       	pop	r0
    74f8:	0f 90       	pop	r0
    74fa:	cf 91       	pop	r28
    74fc:	df 91       	pop	r29
    74fe:	08 95       	ret

00007500 <LCD_vidShiftDisplayCursor>:

//.........................................................................................
void LCD_vidShiftDisplayCursor(uint8 u8Direction,uint8 u8ShiftNumber,uint8 u8DisplayOrcursor)

{   uint8 u8CommandValue=0x10;
    7500:	df 93       	push	r29
    7502:	cf 93       	push	r28
    7504:	cd b7       	in	r28, 0x3d	; 61
    7506:	de b7       	in	r29, 0x3e	; 62
    7508:	66 97       	sbiw	r28, 0x16	; 22
    750a:	0f b6       	in	r0, 0x3f	; 63
    750c:	f8 94       	cli
    750e:	de bf       	out	0x3e, r29	; 62
    7510:	0f be       	out	0x3f, r0	; 63
    7512:	cd bf       	out	0x3d, r28	; 61
    7514:	88 8b       	std	Y+16, r24	; 0x10
    7516:	69 8b       	std	Y+17, r22	; 0x11
    7518:	4a 8b       	std	Y+18, r20	; 0x12
    751a:	80 e1       	ldi	r24, 0x10	; 16
    751c:	8f 87       	std	Y+15, r24	; 0x0f
	switch(u8Direction)
    751e:	88 89       	ldd	r24, Y+16	; 0x10
    7520:	28 2f       	mov	r18, r24
    7522:	30 e0       	ldi	r19, 0x00	; 0
    7524:	3e 8b       	std	Y+22, r19	; 0x16
    7526:	2d 8b       	std	Y+21, r18	; 0x15
    7528:	8d 89       	ldd	r24, Y+21	; 0x15
    752a:	9e 89       	ldd	r25, Y+22	; 0x16
    752c:	00 97       	sbiw	r24, 0x00	; 0
    752e:	49 f0       	breq	.+18     	; 0x7542 <LCD_vidShiftDisplayCursor+0x42>
    7530:	2d 89       	ldd	r18, Y+21	; 0x15
    7532:	3e 89       	ldd	r19, Y+22	; 0x16
    7534:	21 30       	cpi	r18, 0x01	; 1
    7536:	31 05       	cpc	r19, r1
    7538:	39 f4       	brne	.+14     	; 0x7548 <LCD_vidShiftDisplayCursor+0x48>
	{
	case Right:SET_BIT(u8CommandValue,2);
    753a:	8f 85       	ldd	r24, Y+15	; 0x0f
    753c:	84 60       	ori	r24, 0x04	; 4
    753e:	8f 87       	std	Y+15, r24	; 0x0f
    7540:	03 c0       	rjmp	.+6      	; 0x7548 <LCD_vidShiftDisplayCursor+0x48>
	            break;

	case Left:CLR_BIT(u8CommandValue,2);
    7542:	8f 85       	ldd	r24, Y+15	; 0x0f
    7544:	8b 7f       	andi	r24, 0xFB	; 251
    7546:	8f 87       	std	Y+15, r24	; 0x0f
	          break;

	}

	switch(u8DisplayOrcursor)
    7548:	8a 89       	ldd	r24, Y+18	; 0x12
    754a:	28 2f       	mov	r18, r24
    754c:	30 e0       	ldi	r19, 0x00	; 0
    754e:	3c 8b       	std	Y+20, r19	; 0x14
    7550:	2b 8b       	std	Y+19, r18	; 0x13
    7552:	8b 89       	ldd	r24, Y+19	; 0x13
    7554:	9c 89       	ldd	r25, Y+20	; 0x14
    7556:	00 97       	sbiw	r24, 0x00	; 0
    7558:	51 f0       	breq	.+20     	; 0x756e <LCD_vidShiftDisplayCursor+0x6e>
    755a:	2b 89       	ldd	r18, Y+19	; 0x13
    755c:	3c 89       	ldd	r19, Y+20	; 0x14
    755e:	21 30       	cpi	r18, 0x01	; 1
    7560:	31 05       	cpc	r19, r1
    7562:	09 f0       	breq	.+2      	; 0x7566 <LCD_vidShiftDisplayCursor+0x66>
    7564:	80 c0       	rjmp	.+256    	; 0x7666 <LCD_vidShiftDisplayCursor+0x166>
	{
	case Display:SET_BIT(u8CommandValue,3);
    7566:	8f 85       	ldd	r24, Y+15	; 0x0f
    7568:	88 60       	ori	r24, 0x08	; 8
    756a:	8f 87       	std	Y+15, r24	; 0x0f
    756c:	7c c0       	rjmp	.+248    	; 0x7666 <LCD_vidShiftDisplayCursor+0x166>
	               break;
	case Cursor:CLR_BIT(u8CommandValue,3);
    756e:	8f 85       	ldd	r24, Y+15	; 0x0f
    7570:	87 7f       	andi	r24, 0xF7	; 247
    7572:	8f 87       	std	Y+15, r24	; 0x0f
    7574:	78 c0       	rjmp	.+240    	; 0x7666 <LCD_vidShiftDisplayCursor+0x166>
                 break;
	}

	while(u8ShiftNumber!=0)
	{
		 LCD_vidSendCommand(u8CommandValue);
    7576:	8f 85       	ldd	r24, Y+15	; 0x0f
    7578:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
		 u8ShiftNumber--;
    757c:	89 89       	ldd	r24, Y+17	; 0x11
    757e:	81 50       	subi	r24, 0x01	; 1
    7580:	89 8b       	std	Y+17, r24	; 0x11
    7582:	80 e0       	ldi	r24, 0x00	; 0
    7584:	90 e0       	ldi	r25, 0x00	; 0
    7586:	a0 e2       	ldi	r26, 0x20	; 32
    7588:	b1 e4       	ldi	r27, 0x41	; 65
    758a:	8b 87       	std	Y+11, r24	; 0x0b
    758c:	9c 87       	std	Y+12, r25	; 0x0c
    758e:	ad 87       	std	Y+13, r26	; 0x0d
    7590:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7592:	6b 85       	ldd	r22, Y+11	; 0x0b
    7594:	7c 85       	ldd	r23, Y+12	; 0x0c
    7596:	8d 85       	ldd	r24, Y+13	; 0x0d
    7598:	9e 85       	ldd	r25, Y+14	; 0x0e
    759a:	20 e0       	ldi	r18, 0x00	; 0
    759c:	30 e0       	ldi	r19, 0x00	; 0
    759e:	4a ef       	ldi	r20, 0xFA	; 250
    75a0:	54 e4       	ldi	r21, 0x44	; 68
    75a2:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    75a6:	dc 01       	movw	r26, r24
    75a8:	cb 01       	movw	r24, r22
    75aa:	8f 83       	std	Y+7, r24	; 0x07
    75ac:	98 87       	std	Y+8, r25	; 0x08
    75ae:	a9 87       	std	Y+9, r26	; 0x09
    75b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    75b2:	6f 81       	ldd	r22, Y+7	; 0x07
    75b4:	78 85       	ldd	r23, Y+8	; 0x08
    75b6:	89 85       	ldd	r24, Y+9	; 0x09
    75b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    75ba:	20 e0       	ldi	r18, 0x00	; 0
    75bc:	30 e0       	ldi	r19, 0x00	; 0
    75be:	40 e8       	ldi	r20, 0x80	; 128
    75c0:	5f e3       	ldi	r21, 0x3F	; 63
    75c2:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    75c6:	88 23       	and	r24, r24
    75c8:	2c f4       	brge	.+10     	; 0x75d4 <LCD_vidShiftDisplayCursor+0xd4>
		__ticks = 1;
    75ca:	81 e0       	ldi	r24, 0x01	; 1
    75cc:	90 e0       	ldi	r25, 0x00	; 0
    75ce:	9e 83       	std	Y+6, r25	; 0x06
    75d0:	8d 83       	std	Y+5, r24	; 0x05
    75d2:	3f c0       	rjmp	.+126    	; 0x7652 <LCD_vidShiftDisplayCursor+0x152>
	else if (__tmp > 65535)
    75d4:	6f 81       	ldd	r22, Y+7	; 0x07
    75d6:	78 85       	ldd	r23, Y+8	; 0x08
    75d8:	89 85       	ldd	r24, Y+9	; 0x09
    75da:	9a 85       	ldd	r25, Y+10	; 0x0a
    75dc:	20 e0       	ldi	r18, 0x00	; 0
    75de:	3f ef       	ldi	r19, 0xFF	; 255
    75e0:	4f e7       	ldi	r20, 0x7F	; 127
    75e2:	57 e4       	ldi	r21, 0x47	; 71
    75e4:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    75e8:	18 16       	cp	r1, r24
    75ea:	4c f5       	brge	.+82     	; 0x763e <LCD_vidShiftDisplayCursor+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    75ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    75ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    75f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    75f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    75f4:	20 e0       	ldi	r18, 0x00	; 0
    75f6:	30 e0       	ldi	r19, 0x00	; 0
    75f8:	40 e2       	ldi	r20, 0x20	; 32
    75fa:	51 e4       	ldi	r21, 0x41	; 65
    75fc:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    7600:	dc 01       	movw	r26, r24
    7602:	cb 01       	movw	r24, r22
    7604:	bc 01       	movw	r22, r24
    7606:	cd 01       	movw	r24, r26
    7608:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    760c:	dc 01       	movw	r26, r24
    760e:	cb 01       	movw	r24, r22
    7610:	9e 83       	std	Y+6, r25	; 0x06
    7612:	8d 83       	std	Y+5, r24	; 0x05
    7614:	0f c0       	rjmp	.+30     	; 0x7634 <LCD_vidShiftDisplayCursor+0x134>
    7616:	88 ec       	ldi	r24, 0xC8	; 200
    7618:	90 e0       	ldi	r25, 0x00	; 0
    761a:	9c 83       	std	Y+4, r25	; 0x04
    761c:	8b 83       	std	Y+3, r24	; 0x03
    761e:	8b 81       	ldd	r24, Y+3	; 0x03
    7620:	9c 81       	ldd	r25, Y+4	; 0x04
    7622:	01 97       	sbiw	r24, 0x01	; 1
    7624:	f1 f7       	brne	.-4      	; 0x7622 <LCD_vidShiftDisplayCursor+0x122>
    7626:	9c 83       	std	Y+4, r25	; 0x04
    7628:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    762a:	8d 81       	ldd	r24, Y+5	; 0x05
    762c:	9e 81       	ldd	r25, Y+6	; 0x06
    762e:	01 97       	sbiw	r24, 0x01	; 1
    7630:	9e 83       	std	Y+6, r25	; 0x06
    7632:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7634:	8d 81       	ldd	r24, Y+5	; 0x05
    7636:	9e 81       	ldd	r25, Y+6	; 0x06
    7638:	00 97       	sbiw	r24, 0x00	; 0
    763a:	69 f7       	brne	.-38     	; 0x7616 <LCD_vidShiftDisplayCursor+0x116>
    763c:	14 c0       	rjmp	.+40     	; 0x7666 <LCD_vidShiftDisplayCursor+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    763e:	6f 81       	ldd	r22, Y+7	; 0x07
    7640:	78 85       	ldd	r23, Y+8	; 0x08
    7642:	89 85       	ldd	r24, Y+9	; 0x09
    7644:	9a 85       	ldd	r25, Y+10	; 0x0a
    7646:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    764a:	dc 01       	movw	r26, r24
    764c:	cb 01       	movw	r24, r22
    764e:	9e 83       	std	Y+6, r25	; 0x06
    7650:	8d 83       	std	Y+5, r24	; 0x05
    7652:	8d 81       	ldd	r24, Y+5	; 0x05
    7654:	9e 81       	ldd	r25, Y+6	; 0x06
    7656:	9a 83       	std	Y+2, r25	; 0x02
    7658:	89 83       	std	Y+1, r24	; 0x01
    765a:	89 81       	ldd	r24, Y+1	; 0x01
    765c:	9a 81       	ldd	r25, Y+2	; 0x02
    765e:	01 97       	sbiw	r24, 0x01	; 1
    7660:	f1 f7       	brne	.-4      	; 0x765e <LCD_vidShiftDisplayCursor+0x15e>
    7662:	9a 83       	std	Y+2, r25	; 0x02
    7664:	89 83       	std	Y+1, r24	; 0x01
	               break;
	case Cursor:CLR_BIT(u8CommandValue,3);
                 break;
	}

	while(u8ShiftNumber!=0)
    7666:	89 89       	ldd	r24, Y+17	; 0x11
    7668:	88 23       	and	r24, r24
    766a:	09 f0       	breq	.+2      	; 0x766e <LCD_vidShiftDisplayCursor+0x16e>
    766c:	84 cf       	rjmp	.-248    	; 0x7576 <LCD_vidShiftDisplayCursor+0x76>
		 LCD_vidSendCommand(u8CommandValue);
		 u8ShiftNumber--;
		 _delay_ms(10);
	}

}
    766e:	66 96       	adiw	r28, 0x16	; 22
    7670:	0f b6       	in	r0, 0x3f	; 63
    7672:	f8 94       	cli
    7674:	de bf       	out	0x3e, r29	; 62
    7676:	0f be       	out	0x3f, r0	; 63
    7678:	cd bf       	out	0x3d, r28	; 61
    767a:	cf 91       	pop	r28
    767c:	df 91       	pop	r29
    767e:	08 95       	ret

00007680 <LCD_vidShiftDisplayCursor4>:

//.....................................................................................
void LCD_vidShiftDisplayCursor4(uint8 u8Direction,uint8 u8ShiftNumber,uint8 u8DisplayOrcursor)
{
    7680:	df 93       	push	r29
    7682:	cf 93       	push	r28
    7684:	cd b7       	in	r28, 0x3d	; 61
    7686:	de b7       	in	r29, 0x3e	; 62
    7688:	28 97       	sbiw	r28, 0x08	; 8
    768a:	0f b6       	in	r0, 0x3f	; 63
    768c:	f8 94       	cli
    768e:	de bf       	out	0x3e, r29	; 62
    7690:	0f be       	out	0x3f, r0	; 63
    7692:	cd bf       	out	0x3d, r28	; 61
    7694:	8a 83       	std	Y+2, r24	; 0x02
    7696:	6b 83       	std	Y+3, r22	; 0x03
    7698:	4c 83       	std	Y+4, r20	; 0x04
	 uint8 u8CommandValue=0x10;
    769a:	80 e1       	ldi	r24, 0x10	; 16
    769c:	89 83       	std	Y+1, r24	; 0x01
		switch( u8Direction)
    769e:	8a 81       	ldd	r24, Y+2	; 0x02
    76a0:	28 2f       	mov	r18, r24
    76a2:	30 e0       	ldi	r19, 0x00	; 0
    76a4:	38 87       	std	Y+8, r19	; 0x08
    76a6:	2f 83       	std	Y+7, r18	; 0x07
    76a8:	8f 81       	ldd	r24, Y+7	; 0x07
    76aa:	98 85       	ldd	r25, Y+8	; 0x08
    76ac:	00 97       	sbiw	r24, 0x00	; 0
    76ae:	49 f0       	breq	.+18     	; 0x76c2 <LCD_vidShiftDisplayCursor4+0x42>
    76b0:	2f 81       	ldd	r18, Y+7	; 0x07
    76b2:	38 85       	ldd	r19, Y+8	; 0x08
    76b4:	21 30       	cpi	r18, 0x01	; 1
    76b6:	31 05       	cpc	r19, r1
    76b8:	39 f4       	brne	.+14     	; 0x76c8 <LCD_vidShiftDisplayCursor4+0x48>
		{
		case Right:SET_BIT(u8CommandValue,2);
    76ba:	89 81       	ldd	r24, Y+1	; 0x01
    76bc:	84 60       	ori	r24, 0x04	; 4
    76be:	89 83       	std	Y+1, r24	; 0x01
    76c0:	03 c0       	rjmp	.+6      	; 0x76c8 <LCD_vidShiftDisplayCursor4+0x48>
		            break;

		case Left:CLR_BIT(u8CommandValue,2);
    76c2:	89 81       	ldd	r24, Y+1	; 0x01
    76c4:	8b 7f       	andi	r24, 0xFB	; 251
    76c6:	89 83       	std	Y+1, r24	; 0x01
		          break;

		}

		switch( u8DisplayOrcursor)
    76c8:	8c 81       	ldd	r24, Y+4	; 0x04
    76ca:	28 2f       	mov	r18, r24
    76cc:	30 e0       	ldi	r19, 0x00	; 0
    76ce:	3e 83       	std	Y+6, r19	; 0x06
    76d0:	2d 83       	std	Y+5, r18	; 0x05
    76d2:	8d 81       	ldd	r24, Y+5	; 0x05
    76d4:	9e 81       	ldd	r25, Y+6	; 0x06
    76d6:	00 97       	sbiw	r24, 0x00	; 0
    76d8:	49 f0       	breq	.+18     	; 0x76ec <LCD_vidShiftDisplayCursor4+0x6c>
    76da:	2d 81       	ldd	r18, Y+5	; 0x05
    76dc:	3e 81       	ldd	r19, Y+6	; 0x06
    76de:	21 30       	cpi	r18, 0x01	; 1
    76e0:	31 05       	cpc	r19, r1
    76e2:	71 f4       	brne	.+28     	; 0x7700 <LCD_vidShiftDisplayCursor4+0x80>
		{
		case Display:SET_BIT(u8CommandValue,3);
    76e4:	89 81       	ldd	r24, Y+1	; 0x01
    76e6:	88 60       	ori	r24, 0x08	; 8
    76e8:	89 83       	std	Y+1, r24	; 0x01
    76ea:	0a c0       	rjmp	.+20     	; 0x7700 <LCD_vidShiftDisplayCursor4+0x80>
		               break;
		case Cursor:CLR_BIT(u8CommandValue,3);
    76ec:	89 81       	ldd	r24, Y+1	; 0x01
    76ee:	87 7f       	andi	r24, 0xF7	; 247
    76f0:	89 83       	std	Y+1, r24	; 0x01
    76f2:	06 c0       	rjmp	.+12     	; 0x7700 <LCD_vidShiftDisplayCursor4+0x80>
	                 break;
		}
		while(u8ShiftNumber!=0)
		{
			 LCD_vidSendCommand4(u8CommandValue);
    76f4:	89 81       	ldd	r24, Y+1	; 0x01
    76f6:	0e 94 c1 31 	call	0x6382	; 0x6382 <LCD_vidSendCommand4>
			 u8ShiftNumber--;
    76fa:	8b 81       	ldd	r24, Y+3	; 0x03
    76fc:	81 50       	subi	r24, 0x01	; 1
    76fe:	8b 83       	std	Y+3, r24	; 0x03
		case Display:SET_BIT(u8CommandValue,3);
		               break;
		case Cursor:CLR_BIT(u8CommandValue,3);
	                 break;
		}
		while(u8ShiftNumber!=0)
    7700:	8b 81       	ldd	r24, Y+3	; 0x03
    7702:	88 23       	and	r24, r24
    7704:	b9 f7       	brne	.-18     	; 0x76f4 <LCD_vidShiftDisplayCursor4+0x74>
		{
			 LCD_vidSendCommand4(u8CommandValue);
			 u8ShiftNumber--;
		}

}
    7706:	28 96       	adiw	r28, 0x08	; 8
    7708:	0f b6       	in	r0, 0x3f	; 63
    770a:	f8 94       	cli
    770c:	de bf       	out	0x3e, r29	; 62
    770e:	0f be       	out	0x3f, r0	; 63
    7710:	cd bf       	out	0x3d, r28	; 61
    7712:	cf 91       	pop	r28
    7714:	df 91       	pop	r29
    7716:	08 95       	ret

00007718 <LCD_vidPrint>:

//.......................................................................................
void LCD_vidPrint(uint8 str[])
{
    7718:	df 93       	push	r29
    771a:	cf 93       	push	r28
    771c:	00 d0       	rcall	.+0      	; 0x771e <LCD_vidPrint+0x6>
    771e:	0f 92       	push	r0
    7720:	cd b7       	in	r28, 0x3d	; 61
    7722:	de b7       	in	r29, 0x3e	; 62
    7724:	9b 83       	std	Y+3, r25	; 0x03
    7726:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    7728:	19 82       	std	Y+1, r1	; 0x01
    772a:	0f c0       	rjmp	.+30     	; 0x774a <LCD_vidPrint+0x32>
	while(str[i]!=0)
	{
		LCD_vidWriteCharacter(str[i++]);
    772c:	89 81       	ldd	r24, Y+1	; 0x01
    772e:	28 2f       	mov	r18, r24
    7730:	30 e0       	ldi	r19, 0x00	; 0
    7732:	8a 81       	ldd	r24, Y+2	; 0x02
    7734:	9b 81       	ldd	r25, Y+3	; 0x03
    7736:	fc 01       	movw	r30, r24
    7738:	e2 0f       	add	r30, r18
    773a:	f3 1f       	adc	r31, r19
    773c:	90 81       	ld	r25, Z
    773e:	89 81       	ldd	r24, Y+1	; 0x01
    7740:	8f 5f       	subi	r24, 0xFF	; 255
    7742:	89 83       	std	Y+1, r24	; 0x01
    7744:	89 2f       	mov	r24, r25
    7746:	0e 94 ac 30 	call	0x6158	; 0x6158 <LCD_vidWriteCharacter>

//.......................................................................................
void LCD_vidPrint(uint8 str[])
{
	uint8 i=0;
	while(str[i]!=0)
    774a:	89 81       	ldd	r24, Y+1	; 0x01
    774c:	28 2f       	mov	r18, r24
    774e:	30 e0       	ldi	r19, 0x00	; 0
    7750:	8a 81       	ldd	r24, Y+2	; 0x02
    7752:	9b 81       	ldd	r25, Y+3	; 0x03
    7754:	fc 01       	movw	r30, r24
    7756:	e2 0f       	add	r30, r18
    7758:	f3 1f       	adc	r31, r19
    775a:	80 81       	ld	r24, Z
    775c:	88 23       	and	r24, r24
    775e:	31 f7       	brne	.-52     	; 0x772c <LCD_vidPrint+0x14>
	{
		LCD_vidWriteCharacter(str[i++]);
	}
}
    7760:	0f 90       	pop	r0
    7762:	0f 90       	pop	r0
    7764:	0f 90       	pop	r0
    7766:	cf 91       	pop	r28
    7768:	df 91       	pop	r29
    776a:	08 95       	ret

0000776c <LCD_vidPrintInTwoLines>:
//.........................................................................................
void LCD_vidPrintInTwoLines(uint8 str[])
{
    776c:	df 93       	push	r29
    776e:	cf 93       	push	r28
    7770:	00 d0       	rcall	.+0      	; 0x7772 <LCD_vidPrintInTwoLines+0x6>
    7772:	0f 92       	push	r0
    7774:	cd b7       	in	r28, 0x3d	; 61
    7776:	de b7       	in	r29, 0x3e	; 62
    7778:	9b 83       	std	Y+3, r25	; 0x03
    777a:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i=0;
    777c:	19 82       	std	Y+1, r1	; 0x01
    777e:	5b c0       	rjmp	.+182    	; 0x7836 <LCD_vidPrintInTwoLines+0xca>
		while(str[i]!=0)
		{
			if(i<=15){
    7780:	89 81       	ldd	r24, Y+1	; 0x01
    7782:	80 31       	cpi	r24, 0x10	; 16
    7784:	a0 f4       	brcc	.+40     	; 0x77ae <LCD_vidPrintInTwoLines+0x42>

			LCD_vidGotoxy(i,0);
    7786:	89 81       	ldd	r24, Y+1	; 0x01
    7788:	60 e0       	ldi	r22, 0x00	; 0
    778a:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
			LCD_vidWriteCharacter(str[i++]);
    778e:	89 81       	ldd	r24, Y+1	; 0x01
    7790:	28 2f       	mov	r18, r24
    7792:	30 e0       	ldi	r19, 0x00	; 0
    7794:	8a 81       	ldd	r24, Y+2	; 0x02
    7796:	9b 81       	ldd	r25, Y+3	; 0x03
    7798:	fc 01       	movw	r30, r24
    779a:	e2 0f       	add	r30, r18
    779c:	f3 1f       	adc	r31, r19
    779e:	90 81       	ld	r25, Z
    77a0:	89 81       	ldd	r24, Y+1	; 0x01
    77a2:	8f 5f       	subi	r24, 0xFF	; 255
    77a4:	89 83       	std	Y+1, r24	; 0x01
    77a6:	89 2f       	mov	r24, r25
    77a8:	0e 94 ac 30 	call	0x6158	; 0x6158 <LCD_vidWriteCharacter>
    77ac:	44 c0       	rjmp	.+136    	; 0x7836 <LCD_vidPrintInTwoLines+0xca>
		}
			else if(i<=31)
    77ae:	89 81       	ldd	r24, Y+1	; 0x01
    77b0:	80 32       	cpi	r24, 0x20	; 32
    77b2:	a8 f4       	brcc	.+42     	; 0x77de <LCD_vidPrintInTwoLines+0x72>
			{

				LCD_vidGotoxy(i-16,1);
    77b4:	89 81       	ldd	r24, Y+1	; 0x01
    77b6:	80 51       	subi	r24, 0x10	; 16
    77b8:	61 e0       	ldi	r22, 0x01	; 1
    77ba:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
				LCD_vidWriteCharacter(str[i++]);
    77be:	89 81       	ldd	r24, Y+1	; 0x01
    77c0:	28 2f       	mov	r18, r24
    77c2:	30 e0       	ldi	r19, 0x00	; 0
    77c4:	8a 81       	ldd	r24, Y+2	; 0x02
    77c6:	9b 81       	ldd	r25, Y+3	; 0x03
    77c8:	fc 01       	movw	r30, r24
    77ca:	e2 0f       	add	r30, r18
    77cc:	f3 1f       	adc	r31, r19
    77ce:	90 81       	ld	r25, Z
    77d0:	89 81       	ldd	r24, Y+1	; 0x01
    77d2:	8f 5f       	subi	r24, 0xFF	; 255
    77d4:	89 83       	std	Y+1, r24	; 0x01
    77d6:	89 2f       	mov	r24, r25
    77d8:	0e 94 ac 30 	call	0x6158	; 0x6158 <LCD_vidWriteCharacter>
    77dc:	2c c0       	rjmp	.+88     	; 0x7836 <LCD_vidPrintInTwoLines+0xca>

			}
			else if(i>31)
    77de:	89 81       	ldd	r24, Y+1	; 0x01
    77e0:	80 32       	cpi	r24, 0x20	; 32
    77e2:	a8 f0       	brcs	.+42     	; 0x780e <LCD_vidPrintInTwoLines+0xa2>
				{
					LCD_vidGotoxy(i-32,0);
    77e4:	89 81       	ldd	r24, Y+1	; 0x01
    77e6:	80 52       	subi	r24, 0x20	; 32
    77e8:	60 e0       	ldi	r22, 0x00	; 0
    77ea:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
					LCD_vidWriteCharacter(str[i++]);
    77ee:	89 81       	ldd	r24, Y+1	; 0x01
    77f0:	28 2f       	mov	r18, r24
    77f2:	30 e0       	ldi	r19, 0x00	; 0
    77f4:	8a 81       	ldd	r24, Y+2	; 0x02
    77f6:	9b 81       	ldd	r25, Y+3	; 0x03
    77f8:	fc 01       	movw	r30, r24
    77fa:	e2 0f       	add	r30, r18
    77fc:	f3 1f       	adc	r31, r19
    77fe:	90 81       	ld	r25, Z
    7800:	89 81       	ldd	r24, Y+1	; 0x01
    7802:	8f 5f       	subi	r24, 0xFF	; 255
    7804:	89 83       	std	Y+1, r24	; 0x01
    7806:	89 2f       	mov	r24, r25
    7808:	0e 94 ac 30 	call	0x6158	; 0x6158 <LCD_vidWriteCharacter>
    780c:	14 c0       	rjmp	.+40     	; 0x7836 <LCD_vidPrintInTwoLines+0xca>
				}
			else
			{

				LCD_vidGotoxy(i-64,1);
    780e:	89 81       	ldd	r24, Y+1	; 0x01
    7810:	80 54       	subi	r24, 0x40	; 64
    7812:	61 e0       	ldi	r22, 0x01	; 1
    7814:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
				LCD_vidWriteCharacter(str[i++]);
    7818:	89 81       	ldd	r24, Y+1	; 0x01
    781a:	28 2f       	mov	r18, r24
    781c:	30 e0       	ldi	r19, 0x00	; 0
    781e:	8a 81       	ldd	r24, Y+2	; 0x02
    7820:	9b 81       	ldd	r25, Y+3	; 0x03
    7822:	fc 01       	movw	r30, r24
    7824:	e2 0f       	add	r30, r18
    7826:	f3 1f       	adc	r31, r19
    7828:	90 81       	ld	r25, Z
    782a:	89 81       	ldd	r24, Y+1	; 0x01
    782c:	8f 5f       	subi	r24, 0xFF	; 255
    782e:	89 83       	std	Y+1, r24	; 0x01
    7830:	89 2f       	mov	r24, r25
    7832:	0e 94 ac 30 	call	0x6158	; 0x6158 <LCD_vidWriteCharacter>
//.........................................................................................
void LCD_vidPrintInTwoLines(uint8 str[])
{

	uint8 i=0;
		while(str[i]!=0)
    7836:	89 81       	ldd	r24, Y+1	; 0x01
    7838:	28 2f       	mov	r18, r24
    783a:	30 e0       	ldi	r19, 0x00	; 0
    783c:	8a 81       	ldd	r24, Y+2	; 0x02
    783e:	9b 81       	ldd	r25, Y+3	; 0x03
    7840:	fc 01       	movw	r30, r24
    7842:	e2 0f       	add	r30, r18
    7844:	f3 1f       	adc	r31, r19
    7846:	80 81       	ld	r24, Z
    7848:	88 23       	and	r24, r24
    784a:	09 f0       	breq	.+2      	; 0x784e <LCD_vidPrintInTwoLines+0xe2>
    784c:	99 cf       	rjmp	.-206    	; 0x7780 <LCD_vidPrintInTwoLines+0x14>

				}

}

}
    784e:	0f 90       	pop	r0
    7850:	0f 90       	pop	r0
    7852:	0f 90       	pop	r0
    7854:	cf 91       	pop	r28
    7856:	df 91       	pop	r29
    7858:	08 95       	ret

0000785a <LCD_vidPrint4>:
//.........................................................................................
void LCD_vidPrint4(uint8 str[])
{
    785a:	df 93       	push	r29
    785c:	cf 93       	push	r28
    785e:	00 d0       	rcall	.+0      	; 0x7860 <LCD_vidPrint4+0x6>
    7860:	0f 92       	push	r0
    7862:	cd b7       	in	r28, 0x3d	; 61
    7864:	de b7       	in	r29, 0x3e	; 62
    7866:	9b 83       	std	Y+3, r25	; 0x03
    7868:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    786a:	19 82       	std	Y+1, r1	; 0x01
    786c:	0f c0       	rjmp	.+30     	; 0x788c <LCD_vidPrint4+0x32>
	while(str[i]!=0)
	{
		LCD_vidWriteCharacter4(str[i++]);
    786e:	89 81       	ldd	r24, Y+1	; 0x01
    7870:	28 2f       	mov	r18, r24
    7872:	30 e0       	ldi	r19, 0x00	; 0
    7874:	8a 81       	ldd	r24, Y+2	; 0x02
    7876:	9b 81       	ldd	r25, Y+3	; 0x03
    7878:	fc 01       	movw	r30, r24
    787a:	e2 0f       	add	r30, r18
    787c:	f3 1f       	adc	r31, r19
    787e:	90 81       	ld	r25, Z
    7880:	89 81       	ldd	r24, Y+1	; 0x01
    7882:	8f 5f       	subi	r24, 0xFF	; 255
    7884:	89 83       	std	Y+1, r24	; 0x01
    7886:	89 2f       	mov	r24, r25
    7888:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <LCD_vidWriteCharacter4>
}
//.........................................................................................
void LCD_vidPrint4(uint8 str[])
{
	uint8 i=0;
	while(str[i]!=0)
    788c:	89 81       	ldd	r24, Y+1	; 0x01
    788e:	28 2f       	mov	r18, r24
    7890:	30 e0       	ldi	r19, 0x00	; 0
    7892:	8a 81       	ldd	r24, Y+2	; 0x02
    7894:	9b 81       	ldd	r25, Y+3	; 0x03
    7896:	fc 01       	movw	r30, r24
    7898:	e2 0f       	add	r30, r18
    789a:	f3 1f       	adc	r31, r19
    789c:	80 81       	ld	r24, Z
    789e:	88 23       	and	r24, r24
    78a0:	31 f7       	brne	.-52     	; 0x786e <LCD_vidPrint4+0x14>
	{
		LCD_vidWriteCharacter4(str[i++]);
	}
}
    78a2:	0f 90       	pop	r0
    78a4:	0f 90       	pop	r0
    78a6:	0f 90       	pop	r0
    78a8:	cf 91       	pop	r28
    78aa:	df 91       	pop	r29
    78ac:	08 95       	ret

000078ae <LCD_vidPrintInTwoLines4>:

//......................................................................................
void LCD_vidPrintInTwoLines4(uint8 str[])
{
    78ae:	df 93       	push	r29
    78b0:	cf 93       	push	r28
    78b2:	00 d0       	rcall	.+0      	; 0x78b4 <LCD_vidPrintInTwoLines4+0x6>
    78b4:	0f 92       	push	r0
    78b6:	cd b7       	in	r28, 0x3d	; 61
    78b8:	de b7       	in	r29, 0x3e	; 62
    78ba:	9b 83       	std	Y+3, r25	; 0x03
    78bc:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i=0;
    78be:	19 82       	std	Y+1, r1	; 0x01
    78c0:	2b c0       	rjmp	.+86     	; 0x7918 <LCD_vidPrintInTwoLines4+0x6a>
		while(str[i]!=0)
		{
			if(i<=15)
    78c2:	89 81       	ldd	r24, Y+1	; 0x01
    78c4:	80 31       	cpi	r24, 0x10	; 16
    78c6:	a0 f4       	brcc	.+40     	; 0x78f0 <LCD_vidPrintInTwoLines4+0x42>
			{

			LCD_vidGotoxy4(i,0);
    78c8:	89 81       	ldd	r24, Y+1	; 0x01
    78ca:	60 e0       	ldi	r22, 0x00	; 0
    78cc:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <LCD_vidGotoxy4>
			LCD_vidWriteCharacter4(str[i++]);
    78d0:	89 81       	ldd	r24, Y+1	; 0x01
    78d2:	28 2f       	mov	r18, r24
    78d4:	30 e0       	ldi	r19, 0x00	; 0
    78d6:	8a 81       	ldd	r24, Y+2	; 0x02
    78d8:	9b 81       	ldd	r25, Y+3	; 0x03
    78da:	fc 01       	movw	r30, r24
    78dc:	e2 0f       	add	r30, r18
    78de:	f3 1f       	adc	r31, r19
    78e0:	90 81       	ld	r25, Z
    78e2:	89 81       	ldd	r24, Y+1	; 0x01
    78e4:	8f 5f       	subi	r24, 0xFF	; 255
    78e6:	89 83       	std	Y+1, r24	; 0x01
    78e8:	89 2f       	mov	r24, r25
    78ea:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <LCD_vidWriteCharacter4>
    78ee:	14 c0       	rjmp	.+40     	; 0x7918 <LCD_vidPrintInTwoLines4+0x6a>
		}
			else
			{
				LCD_vidGotoxy4(i-16,1);
    78f0:	89 81       	ldd	r24, Y+1	; 0x01
    78f2:	80 51       	subi	r24, 0x10	; 16
    78f4:	61 e0       	ldi	r22, 0x01	; 1
    78f6:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <LCD_vidGotoxy4>
				LCD_vidWriteCharacter4(str[i++]);
    78fa:	89 81       	ldd	r24, Y+1	; 0x01
    78fc:	28 2f       	mov	r18, r24
    78fe:	30 e0       	ldi	r19, 0x00	; 0
    7900:	8a 81       	ldd	r24, Y+2	; 0x02
    7902:	9b 81       	ldd	r25, Y+3	; 0x03
    7904:	fc 01       	movw	r30, r24
    7906:	e2 0f       	add	r30, r18
    7908:	f3 1f       	adc	r31, r19
    790a:	90 81       	ld	r25, Z
    790c:	89 81       	ldd	r24, Y+1	; 0x01
    790e:	8f 5f       	subi	r24, 0xFF	; 255
    7910:	89 83       	std	Y+1, r24	; 0x01
    7912:	89 2f       	mov	r24, r25
    7914:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <LCD_vidWriteCharacter4>
//......................................................................................
void LCD_vidPrintInTwoLines4(uint8 str[])
{

	uint8 i=0;
		while(str[i]!=0)
    7918:	89 81       	ldd	r24, Y+1	; 0x01
    791a:	28 2f       	mov	r18, r24
    791c:	30 e0       	ldi	r19, 0x00	; 0
    791e:	8a 81       	ldd	r24, Y+2	; 0x02
    7920:	9b 81       	ldd	r25, Y+3	; 0x03
    7922:	fc 01       	movw	r30, r24
    7924:	e2 0f       	add	r30, r18
    7926:	f3 1f       	adc	r31, r19
    7928:	80 81       	ld	r24, Z
    792a:	88 23       	and	r24, r24
    792c:	51 f6       	brne	.-108    	; 0x78c2 <LCD_vidPrintInTwoLines4+0x14>

			}

		}

}
    792e:	0f 90       	pop	r0
    7930:	0f 90       	pop	r0
    7932:	0f 90       	pop	r0
    7934:	cf 91       	pop	r28
    7936:	df 91       	pop	r29
    7938:	08 95       	ret

0000793a <project_init>:
volatile uint16 ultra_back=0;
volatile uint16 ultra_front=0;
volatile uint8 count_back_flag=0;

void project_init(void)
{
    793a:	df 93       	push	r29
    793c:	cf 93       	push	r28
    793e:	cd b7       	in	r28, 0x3d	; 61
    7940:	de b7       	in	r29, 0x3e	; 62
	//AUTO PARK
   DIO_void_Set_Pin_Dirction(auto_park_port,auto_park_pin,INPUT);
    7942:	83 e0       	ldi	r24, 0x03	; 3
    7944:	60 e0       	ldi	r22, 0x00	; 0
    7946:	40 e0       	ldi	r20, 0x00	; 0
    7948:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>

   DIO_void_Set_Pin_Value(auto_park_port,auto_park_pin,HIGH);
    794c:	83 e0       	ldi	r24, 0x03	; 3
    794e:	60 e0       	ldi	r22, 0x00	; 0
    7950:	41 e0       	ldi	r20, 0x01	; 1
    7952:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>

   //LCD INIT
   LCD_vidDirections();
    7956:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <LCD_vidDirections>
   LCD_vidInit();
    795a:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <LCD_vidInit>
   LCD_LIGHT();
    795e:	0e 94 0f 49 	call	0x921e	; 0x921e <LCD_LIGHT>
   Ultrasonic_init();
    7962:	0e 94 6e 25 	call	0x4adc	; 0x4adc <Ultrasonic_init>
   //for pins
   DIO_void_Set_Pin_Dirction(car_control,forward,OUTPUT);
    7966:	84 e0       	ldi	r24, 0x04	; 4
    7968:	63 e0       	ldi	r22, 0x03	; 3
    796a:	41 e0       	ldi	r20, 0x01	; 1
    796c:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>
   DIO_void_Set_Pin_Dirction(car_control,backword,OUTPUT);
    7970:	84 e0       	ldi	r24, 0x04	; 4
    7972:	65 e0       	ldi	r22, 0x05	; 5
    7974:	41 e0       	ldi	r20, 0x01	; 1
    7976:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>
   DIO_void_Set_Pin_Dirction(car_control,left_wheel,OUTPUT);
    797a:	84 e0       	ldi	r24, 0x04	; 4
    797c:	60 e0       	ldi	r22, 0x00	; 0
    797e:	41 e0       	ldi	r20, 0x01	; 1
    7980:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>
   DIO_void_Set_Pin_Dirction(car_control,right_wheel,OUTPUT);
    7984:	84 e0       	ldi	r24, 0x04	; 4
    7986:	61 e0       	ldi	r22, 0x01	; 1
    7988:	41 e0       	ldi	r20, 0x01	; 1
    798a:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>
   DIO_void_Set_Pin_Dirction(car_control,stop,OUTPUT);
    798e:	84 e0       	ldi	r24, 0x04	; 4
    7990:	62 e0       	ldi	r22, 0x02	; 2
    7992:	41 e0       	ldi	r20, 0x01	; 1
    7994:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>


   DIO_void_Set_Pin_Value(car_control,forward,HIGH);
    7998:	84 e0       	ldi	r24, 0x04	; 4
    799a:	63 e0       	ldi	r22, 0x03	; 3
    799c:	41 e0       	ldi	r20, 0x01	; 1
    799e:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
   DIO_void_Set_Pin_Value(car_control,backword,HIGH);
    79a2:	84 e0       	ldi	r24, 0x04	; 4
    79a4:	65 e0       	ldi	r22, 0x05	; 5
    79a6:	41 e0       	ldi	r20, 0x01	; 1
    79a8:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
   DIO_void_Set_Pin_Value(car_control,left_wheel,HIGH);
    79ac:	84 e0       	ldi	r24, 0x04	; 4
    79ae:	60 e0       	ldi	r22, 0x00	; 0
    79b0:	41 e0       	ldi	r20, 0x01	; 1
    79b2:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
   DIO_void_Set_Pin_Value(car_control,right_wheel,HIGH);
    79b6:	84 e0       	ldi	r24, 0x04	; 4
    79b8:	61 e0       	ldi	r22, 0x01	; 1
    79ba:	41 e0       	ldi	r20, 0x01	; 1
    79bc:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
   DIO_void_Set_Pin_Value(car_control,stop,HIGH);
    79c0:	84 e0       	ldi	r24, 0x04	; 4
    79c2:	62 e0       	ldi	r22, 0x02	; 2
    79c4:	41 e0       	ldi	r20, 0x01	; 1
    79c6:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
   //
   sei();
    79ca:	78 94       	sei

   //
   Timer0_OVInterrupt_Enable();
    79cc:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <Timer0_OVInterrupt_Enable>
   LCD_vidWriteCharacter('t');
    79d0:	84 e7       	ldi	r24, 0x74	; 116
    79d2:	0e 94 ac 30 	call	0x6158	; 0x6158 <LCD_vidWriteCharacter>
}
    79d6:	cf 91       	pop	r28
    79d8:	df 91       	pop	r29
    79da:	08 95       	ret

000079dc <autopark>:

void autopark(void)
{
    79dc:	af 92       	push	r10
    79de:	bf 92       	push	r11
    79e0:	cf 92       	push	r12
    79e2:	df 92       	push	r13
    79e4:	ef 92       	push	r14
    79e6:	ff 92       	push	r15
    79e8:	0f 93       	push	r16
    79ea:	1f 93       	push	r17
    79ec:	df 93       	push	r29
    79ee:	cf 93       	push	r28
    79f0:	cd b7       	in	r28, 0x3d	; 61
    79f2:	de b7       	in	r29, 0x3e	; 62
    79f4:	60 97       	sbiw	r28, 0x10	; 16
    79f6:	0f b6       	in	r0, 0x3f	; 63
    79f8:	f8 94       	cli
    79fa:	de bf       	out	0x3e, r29	; 62
    79fc:	0f be       	out	0x3f, r0	; 63
    79fe:	cd bf       	out	0x3d, r28	; 61
	uint8 check_no_of_call=0;
    7a00:	18 8a       	std	Y+16, r1	; 0x10
	uint8 check=0;
    7a02:	1f 86       	std	Y+15, r1	; 0x0f
	autopark_check();
    7a04:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <autopark_check>
    7a08:	80 e0       	ldi	r24, 0x00	; 0
    7a0a:	90 e0       	ldi	r25, 0x00	; 0
    7a0c:	a8 ec       	ldi	r26, 0xC8	; 200
    7a0e:	b2 e4       	ldi	r27, 0x42	; 66
    7a10:	8b 87       	std	Y+11, r24	; 0x0b
    7a12:	9c 87       	std	Y+12, r25	; 0x0c
    7a14:	ad 87       	std	Y+13, r26	; 0x0d
    7a16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    7a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    7a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    7a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    7a20:	20 e0       	ldi	r18, 0x00	; 0
    7a22:	30 e0       	ldi	r19, 0x00	; 0
    7a24:	4a ef       	ldi	r20, 0xFA	; 250
    7a26:	54 e4       	ldi	r21, 0x44	; 68
    7a28:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    7a2c:	dc 01       	movw	r26, r24
    7a2e:	cb 01       	movw	r24, r22
    7a30:	8f 83       	std	Y+7, r24	; 0x07
    7a32:	98 87       	std	Y+8, r25	; 0x08
    7a34:	a9 87       	std	Y+9, r26	; 0x09
    7a36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7a38:	6f 81       	ldd	r22, Y+7	; 0x07
    7a3a:	78 85       	ldd	r23, Y+8	; 0x08
    7a3c:	89 85       	ldd	r24, Y+9	; 0x09
    7a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7a40:	20 e0       	ldi	r18, 0x00	; 0
    7a42:	30 e0       	ldi	r19, 0x00	; 0
    7a44:	40 e8       	ldi	r20, 0x80	; 128
    7a46:	5f e3       	ldi	r21, 0x3F	; 63
    7a48:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    7a4c:	88 23       	and	r24, r24
    7a4e:	2c f4       	brge	.+10     	; 0x7a5a <autopark+0x7e>
		__ticks = 1;
    7a50:	81 e0       	ldi	r24, 0x01	; 1
    7a52:	90 e0       	ldi	r25, 0x00	; 0
    7a54:	9e 83       	std	Y+6, r25	; 0x06
    7a56:	8d 83       	std	Y+5, r24	; 0x05
    7a58:	3f c0       	rjmp	.+126    	; 0x7ad8 <autopark+0xfc>
	else if (__tmp > 65535)
    7a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    7a5c:	78 85       	ldd	r23, Y+8	; 0x08
    7a5e:	89 85       	ldd	r24, Y+9	; 0x09
    7a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    7a62:	20 e0       	ldi	r18, 0x00	; 0
    7a64:	3f ef       	ldi	r19, 0xFF	; 255
    7a66:	4f e7       	ldi	r20, 0x7F	; 127
    7a68:	57 e4       	ldi	r21, 0x47	; 71
    7a6a:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    7a6e:	18 16       	cp	r1, r24
    7a70:	4c f5       	brge	.+82     	; 0x7ac4 <autopark+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    7a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    7a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    7a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    7a7a:	20 e0       	ldi	r18, 0x00	; 0
    7a7c:	30 e0       	ldi	r19, 0x00	; 0
    7a7e:	40 e2       	ldi	r20, 0x20	; 32
    7a80:	51 e4       	ldi	r21, 0x41	; 65
    7a82:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    7a86:	dc 01       	movw	r26, r24
    7a88:	cb 01       	movw	r24, r22
    7a8a:	bc 01       	movw	r22, r24
    7a8c:	cd 01       	movw	r24, r26
    7a8e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    7a92:	dc 01       	movw	r26, r24
    7a94:	cb 01       	movw	r24, r22
    7a96:	9e 83       	std	Y+6, r25	; 0x06
    7a98:	8d 83       	std	Y+5, r24	; 0x05
    7a9a:	0f c0       	rjmp	.+30     	; 0x7aba <autopark+0xde>
    7a9c:	88 ec       	ldi	r24, 0xC8	; 200
    7a9e:	90 e0       	ldi	r25, 0x00	; 0
    7aa0:	9c 83       	std	Y+4, r25	; 0x04
    7aa2:	8b 83       	std	Y+3, r24	; 0x03
    7aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    7aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    7aa8:	01 97       	sbiw	r24, 0x01	; 1
    7aaa:	f1 f7       	brne	.-4      	; 0x7aa8 <autopark+0xcc>
    7aac:	9c 83       	std	Y+4, r25	; 0x04
    7aae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    7ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    7ab4:	01 97       	sbiw	r24, 0x01	; 1
    7ab6:	9e 83       	std	Y+6, r25	; 0x06
    7ab8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7aba:	8d 81       	ldd	r24, Y+5	; 0x05
    7abc:	9e 81       	ldd	r25, Y+6	; 0x06
    7abe:	00 97       	sbiw	r24, 0x00	; 0
    7ac0:	69 f7       	brne	.-38     	; 0x7a9c <autopark+0xc0>
    7ac2:	14 c0       	rjmp	.+40     	; 0x7aec <autopark+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    7ac6:	78 85       	ldd	r23, Y+8	; 0x08
    7ac8:	89 85       	ldd	r24, Y+9	; 0x09
    7aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    7acc:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    7ad0:	dc 01       	movw	r26, r24
    7ad2:	cb 01       	movw	r24, r22
    7ad4:	9e 83       	std	Y+6, r25	; 0x06
    7ad6:	8d 83       	std	Y+5, r24	; 0x05
    7ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    7ada:	9e 81       	ldd	r25, Y+6	; 0x06
    7adc:	9a 83       	std	Y+2, r25	; 0x02
    7ade:	89 83       	std	Y+1, r24	; 0x01
    7ae0:	89 81       	ldd	r24, Y+1	; 0x01
    7ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    7ae4:	01 97       	sbiw	r24, 0x01	; 1
    7ae6:	f1 f7       	brne	.-4      	; 0x7ae4 <autopark+0x108>
    7ae8:	9a 83       	std	Y+2, r25	; 0x02
    7aea:	89 83       	std	Y+1, r24	; 0x01
	//NAKHOD BALNA ENY 3AMLA FI HALET EO LOW DELAY AMA FI HALET ENO HIGH MSH 3AMLA
	//3ASHAN FI DELAY FE ELCODE NAFSO
	_delay_ms(100);
	LCD_vidSendCommand(1);
    7aec:	81 e0       	ldi	r24, 0x01	; 1
    7aee:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
	do
	{
	 forward_move();
    7af2:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <forward_move>
	ultra_right_front=Ultrasonic_right_front_Get_Distance();
    7af6:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <Ultrasonic_right_front_Get_Distance>
    7afa:	dc 01       	movw	r26, r24
    7afc:	cb 01       	movw	r24, r22
    7afe:	90 93 e9 02 	sts	0x02E9, r25
    7b02:	80 93 e8 02 	sts	0x02E8, r24
	LCD_vidGotoxy(0,0);
    7b06:	80 e0       	ldi	r24, 0x00	; 0
    7b08:	60 e0       	ldi	r22, 0x00	; 0
    7b0a:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
    LCD_vidWriteString("       ");
    7b0e:	80 e0       	ldi	r24, 0x00	; 0
    7b10:	91 e0       	ldi	r25, 0x01	; 1
    7b12:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
	LCD_vidGotoxy(0,0);
    7b16:	80 e0       	ldi	r24, 0x00	; 0
    7b18:	60 e0       	ldi	r22, 0x00	; 0
    7b1a:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
	LCD_vidWriteUnSignedInteger(ultra_right_front);
    7b1e:	80 91 e8 02 	lds	r24, 0x02E8
    7b22:	90 91 e9 02 	lds	r25, 0x02E9
    7b26:	5c 01       	movw	r10, r24
    7b28:	cc 24       	eor	r12, r12
    7b2a:	dd 24       	eor	r13, r13
    7b2c:	ee 24       	eor	r14, r14
    7b2e:	ff 24       	eor	r15, r15
    7b30:	87 01       	movw	r16, r14
    7b32:	2a 2d       	mov	r18, r10
    7b34:	3b 2d       	mov	r19, r11
    7b36:	4c 2d       	mov	r20, r12
    7b38:	5d 2d       	mov	r21, r13
    7b3a:	6e 2d       	mov	r22, r14
    7b3c:	7f 2d       	mov	r23, r15
    7b3e:	80 2f       	mov	r24, r16
    7b40:	91 2f       	mov	r25, r17
    7b42:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <LCD_vidWriteUnSignedInteger>
	 }while(ultra_right_front<100);
    7b46:	80 91 e8 02 	lds	r24, 0x02E8
    7b4a:	90 91 e9 02 	lds	r25, 0x02E9
    7b4e:	84 36       	cpi	r24, 0x64	; 100
    7b50:	91 05       	cpc	r25, r1
    7b52:	78 f2       	brcs	.-98     	; 0x7af2 <autopark+0x116>
//....................................................................................
  //WE GET THE FIRST SPACE TO PARK
	forward_move();
    7b54:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <forward_move>
    LCD_vidGotoxy(0,1);
    7b58:	80 e0       	ldi	r24, 0x00	; 0
    7b5a:	61 e0       	ldi	r22, 0x01	; 1
    7b5c:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
    LCD_vidWriteString("DISTANCE>100");
    7b60:	88 e0       	ldi	r24, 0x08	; 8
    7b62:	91 e0       	ldi	r25, 0x01	; 1
    7b64:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
	check=check_length_CAR();
    7b68:	0e 94 d2 44 	call	0x89a4	; 0x89a4 <check_length_CAR>
    7b6c:	8f 87       	std	Y+15, r24	; 0x0f
    7b6e:	1c c0       	rjmp	.+56     	; 0x7ba8 <autopark+0x1cc>

//....................................................................................

	while((check==0)&&(check_no_of_call<=10))
	{
		check_no_of_call++;
    7b70:	88 89       	ldd	r24, Y+16	; 0x10
    7b72:	8f 5f       	subi	r24, 0xFF	; 255
    7b74:	88 8b       	std	Y+16, r24	; 0x10
		check=check_length_CAR();
    7b76:	0e 94 d2 44 	call	0x89a4	; 0x89a4 <check_length_CAR>
    7b7a:	8f 87       	std	Y+15, r24	; 0x0f

	if(check_no_of_call>10)
    7b7c:	88 89       	ldd	r24, Y+16	; 0x10
    7b7e:	8b 30       	cpi	r24, 0x0B	; 11
    7b80:	98 f0       	brcs	.+38     	; 0x7ba8 <autopark+0x1cc>
			{
				while(1)
				{
				STOP_CAR();
    7b82:	0e 94 2b 40 	call	0x8056	; 0x8056 <STOP_CAR>
				LCD_vidGotoxy(0,1);
    7b86:	80 e0       	ldi	r24, 0x00	; 0
    7b88:	61 e0       	ldi	r22, 0x01	; 1
    7b8a:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
				LCD_vidWriteString("          ");
    7b8e:	85 e1       	ldi	r24, 0x15	; 21
    7b90:	91 e0       	ldi	r25, 0x01	; 1
    7b92:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
				LCD_vidGotoxy(0,1);
    7b96:	80 e0       	ldi	r24, 0x00	; 0
    7b98:	61 e0       	ldi	r22, 0x01	; 1
    7b9a:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
				LCD_vidWriteString("NO SPACES");
    7b9e:	80 e2       	ldi	r24, 0x20	; 32
    7ba0:	91 e0       	ldi	r25, 0x01	; 1
    7ba2:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
    7ba6:	ed cf       	rjmp	.-38     	; 0x7b82 <autopark+0x1a6>
    LCD_vidWriteString("DISTANCE>100");
	check=check_length_CAR();

//....................................................................................

	while((check==0)&&(check_no_of_call<=10))
    7ba8:	8f 85       	ldd	r24, Y+15	; 0x0f
    7baa:	88 23       	and	r24, r24
    7bac:	19 f4       	brne	.+6      	; 0x7bb4 <autopark+0x1d8>
    7bae:	88 89       	ldd	r24, Y+16	; 0x10
    7bb0:	8b 30       	cpi	r24, 0x0B	; 11
    7bb2:	f0 f2       	brcs	.-68     	; 0x7b70 <autopark+0x194>
				LCD_vidWriteString("NO SPACES");
				}
			}
	}

	if(check==1)
    7bb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    7bb6:	81 30       	cpi	r24, 0x01	; 1
    7bb8:	11 f4       	brne	.+4      	; 0x7bbe <autopark+0x1e2>
	{
		start_parking();
    7bba:	0e 94 79 46 	call	0x8cf2	; 0x8cf2 <start_parking>
	}
LCD_vidGotoxy(0,1);
    7bbe:	80 e0       	ldi	r24, 0x00	; 0
    7bc0:	61 e0       	ldi	r22, 0x01	; 1
    7bc2:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
LCD_vidWriteString("              ");
    7bc6:	8a e2       	ldi	r24, 0x2A	; 42
    7bc8:	91 e0       	ldi	r25, 0x01	; 1
    7bca:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
LCD_vidGotoxy(0,1);
    7bce:	80 e0       	ldi	r24, 0x00	; 0
    7bd0:	61 e0       	ldi	r22, 0x01	; 1
    7bd2:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
LCD_vidWriteString("PARK IS DONE");
    7bd6:	89 e3       	ldi	r24, 0x39	; 57
    7bd8:	91 e0       	ldi	r25, 0x01	; 1
    7bda:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>


}
    7bde:	60 96       	adiw	r28, 0x10	; 16
    7be0:	0f b6       	in	r0, 0x3f	; 63
    7be2:	f8 94       	cli
    7be4:	de bf       	out	0x3e, r29	; 62
    7be6:	0f be       	out	0x3f, r0	; 63
    7be8:	cd bf       	out	0x3d, r28	; 61
    7bea:	cf 91       	pop	r28
    7bec:	df 91       	pop	r29
    7bee:	1f 91       	pop	r17
    7bf0:	0f 91       	pop	r16
    7bf2:	ff 90       	pop	r15
    7bf4:	ef 90       	pop	r14
    7bf6:	df 90       	pop	r13
    7bf8:	cf 90       	pop	r12
    7bfa:	bf 90       	pop	r11
    7bfc:	af 90       	pop	r10
    7bfe:	08 95       	ret

00007c00 <autopark_check>:

void autopark_check(void)
{
    7c00:	df 93       	push	r29
    7c02:	cf 93       	push	r28
    7c04:	0f 92       	push	r0
    7c06:	cd b7       	in	r28, 0x3d	; 61
    7c08:	de b7       	in	r29, 0x3e	; 62
uint8 key0=def_key;
    7c0a:	81 e0       	ldi	r24, 0x01	; 1
    7c0c:	89 83       	std	Y+1, r24	; 0x01
    7c0e:	05 c0       	rjmp	.+10     	; 0x7c1a <autopark_check+0x1a>
	while(key0==def_key)
	{
		key0= DIO_value_type_Get_Pin_Value(auto_park_port ,auto_park_pin);
    7c10:	83 e0       	ldi	r24, 0x03	; 3
    7c12:	60 e0       	ldi	r22, 0x00	; 0
    7c14:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <DIO_value_type_Get_Pin_Value>
    7c18:	89 83       	std	Y+1, r24	; 0x01
}

void autopark_check(void)
{
uint8 key0=def_key;
	while(key0==def_key)
    7c1a:	89 81       	ldd	r24, Y+1	; 0x01
    7c1c:	81 30       	cpi	r24, 0x01	; 1
    7c1e:	c1 f3       	breq	.-16     	; 0x7c10 <autopark_check+0x10>
	{
		key0= DIO_value_type_Get_Pin_Value(auto_park_port ,auto_park_pin);
	}
	LCD_vidSendCommand(1);
    7c20:	81 e0       	ldi	r24, 0x01	; 1
    7c22:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
	LCD_vidGotoxy(0,0);
    7c26:	80 e0       	ldi	r24, 0x00	; 0
    7c28:	60 e0       	ldi	r22, 0x00	; 0
    7c2a:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
	LCD_vidWriteString("AUTOPARKING");
    7c2e:	86 e4       	ldi	r24, 0x46	; 70
    7c30:	91 e0       	ldi	r25, 0x01	; 1
    7c32:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
}
    7c36:	0f 90       	pop	r0
    7c38:	cf 91       	pop	r28
    7c3a:	df 91       	pop	r29
    7c3c:	08 95       	ret

00007c3e <forward_move>:
void forward_move(void)
{
    7c3e:	df 93       	push	r29
    7c40:	cf 93       	push	r28
    7c42:	cd b7       	in	r28, 0x3d	; 61
    7c44:	de b7       	in	r29, 0x3e	; 62
    7c46:	6c 97       	sbiw	r28, 0x1c	; 28
    7c48:	0f b6       	in	r0, 0x3f	; 63
    7c4a:	f8 94       	cli
    7c4c:	de bf       	out	0x3e, r29	; 62
    7c4e:	0f be       	out	0x3f, r0	; 63
    7c50:	cd bf       	out	0x3d, r28	; 61
	   DIO_void_Set_Pin_Value(car_control,forward,LOW);
    7c52:	84 e0       	ldi	r24, 0x04	; 4
    7c54:	63 e0       	ldi	r22, 0x03	; 3
    7c56:	40 e0       	ldi	r20, 0x00	; 0
    7c58:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
		DIO_void_Set_Pin_Value(car_control,backword,HIGH);
    7c5c:	84 e0       	ldi	r24, 0x04	; 4
    7c5e:	65 e0       	ldi	r22, 0x05	; 5
    7c60:	41 e0       	ldi	r20, 0x01	; 1
    7c62:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    7c66:	80 e0       	ldi	r24, 0x00	; 0
    7c68:	90 e0       	ldi	r25, 0x00	; 0
    7c6a:	a8 e4       	ldi	r26, 0x48	; 72
    7c6c:	b3 e4       	ldi	r27, 0x43	; 67
    7c6e:	89 8f       	std	Y+25, r24	; 0x19
    7c70:	9a 8f       	std	Y+26, r25	; 0x1a
    7c72:	ab 8f       	std	Y+27, r26	; 0x1b
    7c74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7c76:	69 8d       	ldd	r22, Y+25	; 0x19
    7c78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7c7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7c7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7c7e:	20 e0       	ldi	r18, 0x00	; 0
    7c80:	30 e0       	ldi	r19, 0x00	; 0
    7c82:	4a ef       	ldi	r20, 0xFA	; 250
    7c84:	54 e4       	ldi	r21, 0x44	; 68
    7c86:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    7c8a:	dc 01       	movw	r26, r24
    7c8c:	cb 01       	movw	r24, r22
    7c8e:	8d 8b       	std	Y+21, r24	; 0x15
    7c90:	9e 8b       	std	Y+22, r25	; 0x16
    7c92:	af 8b       	std	Y+23, r26	; 0x17
    7c94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7c96:	6d 89       	ldd	r22, Y+21	; 0x15
    7c98:	7e 89       	ldd	r23, Y+22	; 0x16
    7c9a:	8f 89       	ldd	r24, Y+23	; 0x17
    7c9c:	98 8d       	ldd	r25, Y+24	; 0x18
    7c9e:	20 e0       	ldi	r18, 0x00	; 0
    7ca0:	30 e0       	ldi	r19, 0x00	; 0
    7ca2:	40 e8       	ldi	r20, 0x80	; 128
    7ca4:	5f e3       	ldi	r21, 0x3F	; 63
    7ca6:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    7caa:	88 23       	and	r24, r24
    7cac:	2c f4       	brge	.+10     	; 0x7cb8 <forward_move+0x7a>
		__ticks = 1;
    7cae:	81 e0       	ldi	r24, 0x01	; 1
    7cb0:	90 e0       	ldi	r25, 0x00	; 0
    7cb2:	9c 8b       	std	Y+20, r25	; 0x14
    7cb4:	8b 8b       	std	Y+19, r24	; 0x13
    7cb6:	3f c0       	rjmp	.+126    	; 0x7d36 <forward_move+0xf8>
	else if (__tmp > 65535)
    7cb8:	6d 89       	ldd	r22, Y+21	; 0x15
    7cba:	7e 89       	ldd	r23, Y+22	; 0x16
    7cbc:	8f 89       	ldd	r24, Y+23	; 0x17
    7cbe:	98 8d       	ldd	r25, Y+24	; 0x18
    7cc0:	20 e0       	ldi	r18, 0x00	; 0
    7cc2:	3f ef       	ldi	r19, 0xFF	; 255
    7cc4:	4f e7       	ldi	r20, 0x7F	; 127
    7cc6:	57 e4       	ldi	r21, 0x47	; 71
    7cc8:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    7ccc:	18 16       	cp	r1, r24
    7cce:	4c f5       	brge	.+82     	; 0x7d22 <forward_move+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7cd0:	69 8d       	ldd	r22, Y+25	; 0x19
    7cd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7cd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7cd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7cd8:	20 e0       	ldi	r18, 0x00	; 0
    7cda:	30 e0       	ldi	r19, 0x00	; 0
    7cdc:	40 e2       	ldi	r20, 0x20	; 32
    7cde:	51 e4       	ldi	r21, 0x41	; 65
    7ce0:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    7ce4:	dc 01       	movw	r26, r24
    7ce6:	cb 01       	movw	r24, r22
    7ce8:	bc 01       	movw	r22, r24
    7cea:	cd 01       	movw	r24, r26
    7cec:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    7cf0:	dc 01       	movw	r26, r24
    7cf2:	cb 01       	movw	r24, r22
    7cf4:	9c 8b       	std	Y+20, r25	; 0x14
    7cf6:	8b 8b       	std	Y+19, r24	; 0x13
    7cf8:	0f c0       	rjmp	.+30     	; 0x7d18 <forward_move+0xda>
    7cfa:	88 ec       	ldi	r24, 0xC8	; 200
    7cfc:	90 e0       	ldi	r25, 0x00	; 0
    7cfe:	9a 8b       	std	Y+18, r25	; 0x12
    7d00:	89 8b       	std	Y+17, r24	; 0x11
    7d02:	89 89       	ldd	r24, Y+17	; 0x11
    7d04:	9a 89       	ldd	r25, Y+18	; 0x12
    7d06:	01 97       	sbiw	r24, 0x01	; 1
    7d08:	f1 f7       	brne	.-4      	; 0x7d06 <forward_move+0xc8>
    7d0a:	9a 8b       	std	Y+18, r25	; 0x12
    7d0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    7d10:	9c 89       	ldd	r25, Y+20	; 0x14
    7d12:	01 97       	sbiw	r24, 0x01	; 1
    7d14:	9c 8b       	std	Y+20, r25	; 0x14
    7d16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7d18:	8b 89       	ldd	r24, Y+19	; 0x13
    7d1a:	9c 89       	ldd	r25, Y+20	; 0x14
    7d1c:	00 97       	sbiw	r24, 0x00	; 0
    7d1e:	69 f7       	brne	.-38     	; 0x7cfa <forward_move+0xbc>
    7d20:	14 c0       	rjmp	.+40     	; 0x7d4a <forward_move+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7d22:	6d 89       	ldd	r22, Y+21	; 0x15
    7d24:	7e 89       	ldd	r23, Y+22	; 0x16
    7d26:	8f 89       	ldd	r24, Y+23	; 0x17
    7d28:	98 8d       	ldd	r25, Y+24	; 0x18
    7d2a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    7d2e:	dc 01       	movw	r26, r24
    7d30:	cb 01       	movw	r24, r22
    7d32:	9c 8b       	std	Y+20, r25	; 0x14
    7d34:	8b 8b       	std	Y+19, r24	; 0x13
    7d36:	8b 89       	ldd	r24, Y+19	; 0x13
    7d38:	9c 89       	ldd	r25, Y+20	; 0x14
    7d3a:	98 8b       	std	Y+16, r25	; 0x10
    7d3c:	8f 87       	std	Y+15, r24	; 0x0f
    7d3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    7d40:	98 89       	ldd	r25, Y+16	; 0x10
    7d42:	01 97       	sbiw	r24, 0x01	; 1
    7d44:	f1 f7       	brne	.-4      	; 0x7d42 <forward_move+0x104>
    7d46:	98 8b       	std	Y+16, r25	; 0x10
    7d48:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		DIO_void_Set_Pin_Value(car_control,forward,HIGH);
    7d4a:	84 e0       	ldi	r24, 0x04	; 4
    7d4c:	63 e0       	ldi	r22, 0x03	; 3
    7d4e:	41 e0       	ldi	r20, 0x01	; 1
    7d50:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    7d54:	80 e0       	ldi	r24, 0x00	; 0
    7d56:	90 e0       	ldi	r25, 0x00	; 0
    7d58:	aa e7       	ldi	r26, 0x7A	; 122
    7d5a:	b4 e4       	ldi	r27, 0x44	; 68
    7d5c:	8b 87       	std	Y+11, r24	; 0x0b
    7d5e:	9c 87       	std	Y+12, r25	; 0x0c
    7d60:	ad 87       	std	Y+13, r26	; 0x0d
    7d62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7d64:	6b 85       	ldd	r22, Y+11	; 0x0b
    7d66:	7c 85       	ldd	r23, Y+12	; 0x0c
    7d68:	8d 85       	ldd	r24, Y+13	; 0x0d
    7d6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    7d6c:	20 e0       	ldi	r18, 0x00	; 0
    7d6e:	30 e0       	ldi	r19, 0x00	; 0
    7d70:	4a ef       	ldi	r20, 0xFA	; 250
    7d72:	54 e4       	ldi	r21, 0x44	; 68
    7d74:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    7d78:	dc 01       	movw	r26, r24
    7d7a:	cb 01       	movw	r24, r22
    7d7c:	8f 83       	std	Y+7, r24	; 0x07
    7d7e:	98 87       	std	Y+8, r25	; 0x08
    7d80:	a9 87       	std	Y+9, r26	; 0x09
    7d82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7d84:	6f 81       	ldd	r22, Y+7	; 0x07
    7d86:	78 85       	ldd	r23, Y+8	; 0x08
    7d88:	89 85       	ldd	r24, Y+9	; 0x09
    7d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    7d8c:	20 e0       	ldi	r18, 0x00	; 0
    7d8e:	30 e0       	ldi	r19, 0x00	; 0
    7d90:	40 e8       	ldi	r20, 0x80	; 128
    7d92:	5f e3       	ldi	r21, 0x3F	; 63
    7d94:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    7d98:	88 23       	and	r24, r24
    7d9a:	2c f4       	brge	.+10     	; 0x7da6 <forward_move+0x168>
		__ticks = 1;
    7d9c:	81 e0       	ldi	r24, 0x01	; 1
    7d9e:	90 e0       	ldi	r25, 0x00	; 0
    7da0:	9e 83       	std	Y+6, r25	; 0x06
    7da2:	8d 83       	std	Y+5, r24	; 0x05
    7da4:	3f c0       	rjmp	.+126    	; 0x7e24 <forward_move+0x1e6>
	else if (__tmp > 65535)
    7da6:	6f 81       	ldd	r22, Y+7	; 0x07
    7da8:	78 85       	ldd	r23, Y+8	; 0x08
    7daa:	89 85       	ldd	r24, Y+9	; 0x09
    7dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    7dae:	20 e0       	ldi	r18, 0x00	; 0
    7db0:	3f ef       	ldi	r19, 0xFF	; 255
    7db2:	4f e7       	ldi	r20, 0x7F	; 127
    7db4:	57 e4       	ldi	r21, 0x47	; 71
    7db6:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    7dba:	18 16       	cp	r1, r24
    7dbc:	4c f5       	brge	.+82     	; 0x7e10 <forward_move+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    7dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    7dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    7dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    7dc6:	20 e0       	ldi	r18, 0x00	; 0
    7dc8:	30 e0       	ldi	r19, 0x00	; 0
    7dca:	40 e2       	ldi	r20, 0x20	; 32
    7dcc:	51 e4       	ldi	r21, 0x41	; 65
    7dce:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    7dd2:	dc 01       	movw	r26, r24
    7dd4:	cb 01       	movw	r24, r22
    7dd6:	bc 01       	movw	r22, r24
    7dd8:	cd 01       	movw	r24, r26
    7dda:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    7dde:	dc 01       	movw	r26, r24
    7de0:	cb 01       	movw	r24, r22
    7de2:	9e 83       	std	Y+6, r25	; 0x06
    7de4:	8d 83       	std	Y+5, r24	; 0x05
    7de6:	0f c0       	rjmp	.+30     	; 0x7e06 <forward_move+0x1c8>
    7de8:	88 ec       	ldi	r24, 0xC8	; 200
    7dea:	90 e0       	ldi	r25, 0x00	; 0
    7dec:	9c 83       	std	Y+4, r25	; 0x04
    7dee:	8b 83       	std	Y+3, r24	; 0x03
    7df0:	8b 81       	ldd	r24, Y+3	; 0x03
    7df2:	9c 81       	ldd	r25, Y+4	; 0x04
    7df4:	01 97       	sbiw	r24, 0x01	; 1
    7df6:	f1 f7       	brne	.-4      	; 0x7df4 <forward_move+0x1b6>
    7df8:	9c 83       	std	Y+4, r25	; 0x04
    7dfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    7dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    7e00:	01 97       	sbiw	r24, 0x01	; 1
    7e02:	9e 83       	std	Y+6, r25	; 0x06
    7e04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7e06:	8d 81       	ldd	r24, Y+5	; 0x05
    7e08:	9e 81       	ldd	r25, Y+6	; 0x06
    7e0a:	00 97       	sbiw	r24, 0x00	; 0
    7e0c:	69 f7       	brne	.-38     	; 0x7de8 <forward_move+0x1aa>
    7e0e:	14 c0       	rjmp	.+40     	; 0x7e38 <forward_move+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7e10:	6f 81       	ldd	r22, Y+7	; 0x07
    7e12:	78 85       	ldd	r23, Y+8	; 0x08
    7e14:	89 85       	ldd	r24, Y+9	; 0x09
    7e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    7e18:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    7e1c:	dc 01       	movw	r26, r24
    7e1e:	cb 01       	movw	r24, r22
    7e20:	9e 83       	std	Y+6, r25	; 0x06
    7e22:	8d 83       	std	Y+5, r24	; 0x05
    7e24:	8d 81       	ldd	r24, Y+5	; 0x05
    7e26:	9e 81       	ldd	r25, Y+6	; 0x06
    7e28:	9a 83       	std	Y+2, r25	; 0x02
    7e2a:	89 83       	std	Y+1, r24	; 0x01
    7e2c:	89 81       	ldd	r24, Y+1	; 0x01
    7e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    7e30:	01 97       	sbiw	r24, 0x01	; 1
    7e32:	f1 f7       	brne	.-4      	; 0x7e30 <forward_move+0x1f2>
    7e34:	9a 83       	std	Y+2, r25	; 0x02
    7e36:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);


}
    7e38:	6c 96       	adiw	r28, 0x1c	; 28
    7e3a:	0f b6       	in	r0, 0x3f	; 63
    7e3c:	f8 94       	cli
    7e3e:	de bf       	out	0x3e, r29	; 62
    7e40:	0f be       	out	0x3f, r0	; 63
    7e42:	cd bf       	out	0x3d, r28	; 61
    7e44:	cf 91       	pop	r28
    7e46:	df 91       	pop	r29
    7e48:	08 95       	ret

00007e4a <backward_move>:

void backward_move(void)
{
    7e4a:	df 93       	push	r29
    7e4c:	cf 93       	push	r28
    7e4e:	cd b7       	in	r28, 0x3d	; 61
    7e50:	de b7       	in	r29, 0x3e	; 62
    7e52:	6c 97       	sbiw	r28, 0x1c	; 28
    7e54:	0f b6       	in	r0, 0x3f	; 63
    7e56:	f8 94       	cli
    7e58:	de bf       	out	0x3e, r29	; 62
    7e5a:	0f be       	out	0x3f, r0	; 63
    7e5c:	cd bf       	out	0x3d, r28	; 61
	DIO_void_Set_Pin_Value(car_control,backword,LOW);
    7e5e:	84 e0       	ldi	r24, 0x04	; 4
    7e60:	65 e0       	ldi	r22, 0x05	; 5
    7e62:	40 e0       	ldi	r20, 0x00	; 0
    7e64:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
	DIO_void_Set_Pin_Value(car_control,forward,HIGH);
    7e68:	84 e0       	ldi	r24, 0x04	; 4
    7e6a:	63 e0       	ldi	r22, 0x03	; 3
    7e6c:	41 e0       	ldi	r20, 0x01	; 1
    7e6e:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    7e72:	80 e0       	ldi	r24, 0x00	; 0
    7e74:	90 e0       	ldi	r25, 0x00	; 0
    7e76:	a8 e4       	ldi	r26, 0x48	; 72
    7e78:	b3 e4       	ldi	r27, 0x43	; 67
    7e7a:	89 8f       	std	Y+25, r24	; 0x19
    7e7c:	9a 8f       	std	Y+26, r25	; 0x1a
    7e7e:	ab 8f       	std	Y+27, r26	; 0x1b
    7e80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7e82:	69 8d       	ldd	r22, Y+25	; 0x19
    7e84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7e86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7e88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7e8a:	20 e0       	ldi	r18, 0x00	; 0
    7e8c:	30 e0       	ldi	r19, 0x00	; 0
    7e8e:	4a ef       	ldi	r20, 0xFA	; 250
    7e90:	54 e4       	ldi	r21, 0x44	; 68
    7e92:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    7e96:	dc 01       	movw	r26, r24
    7e98:	cb 01       	movw	r24, r22
    7e9a:	8d 8b       	std	Y+21, r24	; 0x15
    7e9c:	9e 8b       	std	Y+22, r25	; 0x16
    7e9e:	af 8b       	std	Y+23, r26	; 0x17
    7ea0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    7ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    7ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    7ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    7eaa:	20 e0       	ldi	r18, 0x00	; 0
    7eac:	30 e0       	ldi	r19, 0x00	; 0
    7eae:	40 e8       	ldi	r20, 0x80	; 128
    7eb0:	5f e3       	ldi	r21, 0x3F	; 63
    7eb2:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    7eb6:	88 23       	and	r24, r24
    7eb8:	2c f4       	brge	.+10     	; 0x7ec4 <backward_move+0x7a>
		__ticks = 1;
    7eba:	81 e0       	ldi	r24, 0x01	; 1
    7ebc:	90 e0       	ldi	r25, 0x00	; 0
    7ebe:	9c 8b       	std	Y+20, r25	; 0x14
    7ec0:	8b 8b       	std	Y+19, r24	; 0x13
    7ec2:	3f c0       	rjmp	.+126    	; 0x7f42 <backward_move+0xf8>
	else if (__tmp > 65535)
    7ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    7ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    7ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    7eca:	98 8d       	ldd	r25, Y+24	; 0x18
    7ecc:	20 e0       	ldi	r18, 0x00	; 0
    7ece:	3f ef       	ldi	r19, 0xFF	; 255
    7ed0:	4f e7       	ldi	r20, 0x7F	; 127
    7ed2:	57 e4       	ldi	r21, 0x47	; 71
    7ed4:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    7ed8:	18 16       	cp	r1, r24
    7eda:	4c f5       	brge	.+82     	; 0x7f2e <backward_move+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7edc:	69 8d       	ldd	r22, Y+25	; 0x19
    7ede:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7ee0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7ee2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7ee4:	20 e0       	ldi	r18, 0x00	; 0
    7ee6:	30 e0       	ldi	r19, 0x00	; 0
    7ee8:	40 e2       	ldi	r20, 0x20	; 32
    7eea:	51 e4       	ldi	r21, 0x41	; 65
    7eec:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    7ef0:	dc 01       	movw	r26, r24
    7ef2:	cb 01       	movw	r24, r22
    7ef4:	bc 01       	movw	r22, r24
    7ef6:	cd 01       	movw	r24, r26
    7ef8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    7efc:	dc 01       	movw	r26, r24
    7efe:	cb 01       	movw	r24, r22
    7f00:	9c 8b       	std	Y+20, r25	; 0x14
    7f02:	8b 8b       	std	Y+19, r24	; 0x13
    7f04:	0f c0       	rjmp	.+30     	; 0x7f24 <backward_move+0xda>
    7f06:	88 ec       	ldi	r24, 0xC8	; 200
    7f08:	90 e0       	ldi	r25, 0x00	; 0
    7f0a:	9a 8b       	std	Y+18, r25	; 0x12
    7f0c:	89 8b       	std	Y+17, r24	; 0x11
    7f0e:	89 89       	ldd	r24, Y+17	; 0x11
    7f10:	9a 89       	ldd	r25, Y+18	; 0x12
    7f12:	01 97       	sbiw	r24, 0x01	; 1
    7f14:	f1 f7       	brne	.-4      	; 0x7f12 <backward_move+0xc8>
    7f16:	9a 8b       	std	Y+18, r25	; 0x12
    7f18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7f1a:	8b 89       	ldd	r24, Y+19	; 0x13
    7f1c:	9c 89       	ldd	r25, Y+20	; 0x14
    7f1e:	01 97       	sbiw	r24, 0x01	; 1
    7f20:	9c 8b       	std	Y+20, r25	; 0x14
    7f22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7f24:	8b 89       	ldd	r24, Y+19	; 0x13
    7f26:	9c 89       	ldd	r25, Y+20	; 0x14
    7f28:	00 97       	sbiw	r24, 0x00	; 0
    7f2a:	69 f7       	brne	.-38     	; 0x7f06 <backward_move+0xbc>
    7f2c:	14 c0       	rjmp	.+40     	; 0x7f56 <backward_move+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7f2e:	6d 89       	ldd	r22, Y+21	; 0x15
    7f30:	7e 89       	ldd	r23, Y+22	; 0x16
    7f32:	8f 89       	ldd	r24, Y+23	; 0x17
    7f34:	98 8d       	ldd	r25, Y+24	; 0x18
    7f36:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    7f3a:	dc 01       	movw	r26, r24
    7f3c:	cb 01       	movw	r24, r22
    7f3e:	9c 8b       	std	Y+20, r25	; 0x14
    7f40:	8b 8b       	std	Y+19, r24	; 0x13
    7f42:	8b 89       	ldd	r24, Y+19	; 0x13
    7f44:	9c 89       	ldd	r25, Y+20	; 0x14
    7f46:	98 8b       	std	Y+16, r25	; 0x10
    7f48:	8f 87       	std	Y+15, r24	; 0x0f
    7f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    7f4c:	98 89       	ldd	r25, Y+16	; 0x10
    7f4e:	01 97       	sbiw	r24, 0x01	; 1
    7f50:	f1 f7       	brne	.-4      	; 0x7f4e <backward_move+0x104>
    7f52:	98 8b       	std	Y+16, r25	; 0x10
    7f54:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	DIO_void_Set_Pin_Value(car_control,backword,HIGH);
    7f56:	84 e0       	ldi	r24, 0x04	; 4
    7f58:	65 e0       	ldi	r22, 0x05	; 5
    7f5a:	41 e0       	ldi	r20, 0x01	; 1
    7f5c:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    7f60:	80 e0       	ldi	r24, 0x00	; 0
    7f62:	90 e0       	ldi	r25, 0x00	; 0
    7f64:	aa e7       	ldi	r26, 0x7A	; 122
    7f66:	b4 e4       	ldi	r27, 0x44	; 68
    7f68:	8b 87       	std	Y+11, r24	; 0x0b
    7f6a:	9c 87       	std	Y+12, r25	; 0x0c
    7f6c:	ad 87       	std	Y+13, r26	; 0x0d
    7f6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    7f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    7f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    7f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    7f78:	20 e0       	ldi	r18, 0x00	; 0
    7f7a:	30 e0       	ldi	r19, 0x00	; 0
    7f7c:	4a ef       	ldi	r20, 0xFA	; 250
    7f7e:	54 e4       	ldi	r21, 0x44	; 68
    7f80:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    7f84:	dc 01       	movw	r26, r24
    7f86:	cb 01       	movw	r24, r22
    7f88:	8f 83       	std	Y+7, r24	; 0x07
    7f8a:	98 87       	std	Y+8, r25	; 0x08
    7f8c:	a9 87       	std	Y+9, r26	; 0x09
    7f8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7f90:	6f 81       	ldd	r22, Y+7	; 0x07
    7f92:	78 85       	ldd	r23, Y+8	; 0x08
    7f94:	89 85       	ldd	r24, Y+9	; 0x09
    7f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    7f98:	20 e0       	ldi	r18, 0x00	; 0
    7f9a:	30 e0       	ldi	r19, 0x00	; 0
    7f9c:	40 e8       	ldi	r20, 0x80	; 128
    7f9e:	5f e3       	ldi	r21, 0x3F	; 63
    7fa0:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    7fa4:	88 23       	and	r24, r24
    7fa6:	2c f4       	brge	.+10     	; 0x7fb2 <backward_move+0x168>
		__ticks = 1;
    7fa8:	81 e0       	ldi	r24, 0x01	; 1
    7faa:	90 e0       	ldi	r25, 0x00	; 0
    7fac:	9e 83       	std	Y+6, r25	; 0x06
    7fae:	8d 83       	std	Y+5, r24	; 0x05
    7fb0:	3f c0       	rjmp	.+126    	; 0x8030 <backward_move+0x1e6>
	else if (__tmp > 65535)
    7fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    7fb4:	78 85       	ldd	r23, Y+8	; 0x08
    7fb6:	89 85       	ldd	r24, Y+9	; 0x09
    7fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    7fba:	20 e0       	ldi	r18, 0x00	; 0
    7fbc:	3f ef       	ldi	r19, 0xFF	; 255
    7fbe:	4f e7       	ldi	r20, 0x7F	; 127
    7fc0:	57 e4       	ldi	r21, 0x47	; 71
    7fc2:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    7fc6:	18 16       	cp	r1, r24
    7fc8:	4c f5       	brge	.+82     	; 0x801c <backward_move+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7fca:	6b 85       	ldd	r22, Y+11	; 0x0b
    7fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    7fce:	8d 85       	ldd	r24, Y+13	; 0x0d
    7fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    7fd2:	20 e0       	ldi	r18, 0x00	; 0
    7fd4:	30 e0       	ldi	r19, 0x00	; 0
    7fd6:	40 e2       	ldi	r20, 0x20	; 32
    7fd8:	51 e4       	ldi	r21, 0x41	; 65
    7fda:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    7fde:	dc 01       	movw	r26, r24
    7fe0:	cb 01       	movw	r24, r22
    7fe2:	bc 01       	movw	r22, r24
    7fe4:	cd 01       	movw	r24, r26
    7fe6:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    7fea:	dc 01       	movw	r26, r24
    7fec:	cb 01       	movw	r24, r22
    7fee:	9e 83       	std	Y+6, r25	; 0x06
    7ff0:	8d 83       	std	Y+5, r24	; 0x05
    7ff2:	0f c0       	rjmp	.+30     	; 0x8012 <backward_move+0x1c8>
    7ff4:	88 ec       	ldi	r24, 0xC8	; 200
    7ff6:	90 e0       	ldi	r25, 0x00	; 0
    7ff8:	9c 83       	std	Y+4, r25	; 0x04
    7ffa:	8b 83       	std	Y+3, r24	; 0x03
    7ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    7ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    8000:	01 97       	sbiw	r24, 0x01	; 1
    8002:	f1 f7       	brne	.-4      	; 0x8000 <backward_move+0x1b6>
    8004:	9c 83       	std	Y+4, r25	; 0x04
    8006:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8008:	8d 81       	ldd	r24, Y+5	; 0x05
    800a:	9e 81       	ldd	r25, Y+6	; 0x06
    800c:	01 97       	sbiw	r24, 0x01	; 1
    800e:	9e 83       	std	Y+6, r25	; 0x06
    8010:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8012:	8d 81       	ldd	r24, Y+5	; 0x05
    8014:	9e 81       	ldd	r25, Y+6	; 0x06
    8016:	00 97       	sbiw	r24, 0x00	; 0
    8018:	69 f7       	brne	.-38     	; 0x7ff4 <backward_move+0x1aa>
    801a:	14 c0       	rjmp	.+40     	; 0x8044 <backward_move+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    801c:	6f 81       	ldd	r22, Y+7	; 0x07
    801e:	78 85       	ldd	r23, Y+8	; 0x08
    8020:	89 85       	ldd	r24, Y+9	; 0x09
    8022:	9a 85       	ldd	r25, Y+10	; 0x0a
    8024:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    8028:	dc 01       	movw	r26, r24
    802a:	cb 01       	movw	r24, r22
    802c:	9e 83       	std	Y+6, r25	; 0x06
    802e:	8d 83       	std	Y+5, r24	; 0x05
    8030:	8d 81       	ldd	r24, Y+5	; 0x05
    8032:	9e 81       	ldd	r25, Y+6	; 0x06
    8034:	9a 83       	std	Y+2, r25	; 0x02
    8036:	89 83       	std	Y+1, r24	; 0x01
    8038:	89 81       	ldd	r24, Y+1	; 0x01
    803a:	9a 81       	ldd	r25, Y+2	; 0x02
    803c:	01 97       	sbiw	r24, 0x01	; 1
    803e:	f1 f7       	brne	.-4      	; 0x803c <backward_move+0x1f2>
    8040:	9a 83       	std	Y+2, r25	; 0x02
    8042:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

}
    8044:	6c 96       	adiw	r28, 0x1c	; 28
    8046:	0f b6       	in	r0, 0x3f	; 63
    8048:	f8 94       	cli
    804a:	de bf       	out	0x3e, r29	; 62
    804c:	0f be       	out	0x3f, r0	; 63
    804e:	cd bf       	out	0x3d, r28	; 61
    8050:	cf 91       	pop	r28
    8052:	df 91       	pop	r29
    8054:	08 95       	ret

00008056 <STOP_CAR>:


void STOP_CAR(void)
{
    8056:	df 93       	push	r29
    8058:	cf 93       	push	r28
    805a:	cd b7       	in	r28, 0x3d	; 61
    805c:	de b7       	in	r29, 0x3e	; 62
    805e:	2e 97       	sbiw	r28, 0x0e	; 14
    8060:	0f b6       	in	r0, 0x3f	; 63
    8062:	f8 94       	cli
    8064:	de bf       	out	0x3e, r29	; 62
    8066:	0f be       	out	0x3f, r0	; 63
    8068:	cd bf       	out	0x3d, r28	; 61
DIO_void_Set_Pin_Value(car_control,stop,LOW);
    806a:	84 e0       	ldi	r24, 0x04	; 4
    806c:	62 e0       	ldi	r22, 0x02	; 2
    806e:	40 e0       	ldi	r20, 0x00	; 0
    8070:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    8074:	80 e0       	ldi	r24, 0x00	; 0
    8076:	90 e0       	ldi	r25, 0x00	; 0
    8078:	aa ef       	ldi	r26, 0xFA	; 250
    807a:	b3 e4       	ldi	r27, 0x43	; 67
    807c:	8b 87       	std	Y+11, r24	; 0x0b
    807e:	9c 87       	std	Y+12, r25	; 0x0c
    8080:	ad 87       	std	Y+13, r26	; 0x0d
    8082:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8084:	6b 85       	ldd	r22, Y+11	; 0x0b
    8086:	7c 85       	ldd	r23, Y+12	; 0x0c
    8088:	8d 85       	ldd	r24, Y+13	; 0x0d
    808a:	9e 85       	ldd	r25, Y+14	; 0x0e
    808c:	20 e0       	ldi	r18, 0x00	; 0
    808e:	30 e0       	ldi	r19, 0x00	; 0
    8090:	4a ef       	ldi	r20, 0xFA	; 250
    8092:	54 e4       	ldi	r21, 0x44	; 68
    8094:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    8098:	dc 01       	movw	r26, r24
    809a:	cb 01       	movw	r24, r22
    809c:	8f 83       	std	Y+7, r24	; 0x07
    809e:	98 87       	std	Y+8, r25	; 0x08
    80a0:	a9 87       	std	Y+9, r26	; 0x09
    80a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    80a4:	6f 81       	ldd	r22, Y+7	; 0x07
    80a6:	78 85       	ldd	r23, Y+8	; 0x08
    80a8:	89 85       	ldd	r24, Y+9	; 0x09
    80aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    80ac:	20 e0       	ldi	r18, 0x00	; 0
    80ae:	30 e0       	ldi	r19, 0x00	; 0
    80b0:	40 e8       	ldi	r20, 0x80	; 128
    80b2:	5f e3       	ldi	r21, 0x3F	; 63
    80b4:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    80b8:	88 23       	and	r24, r24
    80ba:	2c f4       	brge	.+10     	; 0x80c6 <STOP_CAR+0x70>
		__ticks = 1;
    80bc:	81 e0       	ldi	r24, 0x01	; 1
    80be:	90 e0       	ldi	r25, 0x00	; 0
    80c0:	9e 83       	std	Y+6, r25	; 0x06
    80c2:	8d 83       	std	Y+5, r24	; 0x05
    80c4:	3f c0       	rjmp	.+126    	; 0x8144 <STOP_CAR+0xee>
	else if (__tmp > 65535)
    80c6:	6f 81       	ldd	r22, Y+7	; 0x07
    80c8:	78 85       	ldd	r23, Y+8	; 0x08
    80ca:	89 85       	ldd	r24, Y+9	; 0x09
    80cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    80ce:	20 e0       	ldi	r18, 0x00	; 0
    80d0:	3f ef       	ldi	r19, 0xFF	; 255
    80d2:	4f e7       	ldi	r20, 0x7F	; 127
    80d4:	57 e4       	ldi	r21, 0x47	; 71
    80d6:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    80da:	18 16       	cp	r1, r24
    80dc:	4c f5       	brge	.+82     	; 0x8130 <STOP_CAR+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    80de:	6b 85       	ldd	r22, Y+11	; 0x0b
    80e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    80e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    80e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    80e6:	20 e0       	ldi	r18, 0x00	; 0
    80e8:	30 e0       	ldi	r19, 0x00	; 0
    80ea:	40 e2       	ldi	r20, 0x20	; 32
    80ec:	51 e4       	ldi	r21, 0x41	; 65
    80ee:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    80f2:	dc 01       	movw	r26, r24
    80f4:	cb 01       	movw	r24, r22
    80f6:	bc 01       	movw	r22, r24
    80f8:	cd 01       	movw	r24, r26
    80fa:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    80fe:	dc 01       	movw	r26, r24
    8100:	cb 01       	movw	r24, r22
    8102:	9e 83       	std	Y+6, r25	; 0x06
    8104:	8d 83       	std	Y+5, r24	; 0x05
    8106:	0f c0       	rjmp	.+30     	; 0x8126 <STOP_CAR+0xd0>
    8108:	88 ec       	ldi	r24, 0xC8	; 200
    810a:	90 e0       	ldi	r25, 0x00	; 0
    810c:	9c 83       	std	Y+4, r25	; 0x04
    810e:	8b 83       	std	Y+3, r24	; 0x03
    8110:	8b 81       	ldd	r24, Y+3	; 0x03
    8112:	9c 81       	ldd	r25, Y+4	; 0x04
    8114:	01 97       	sbiw	r24, 0x01	; 1
    8116:	f1 f7       	brne	.-4      	; 0x8114 <STOP_CAR+0xbe>
    8118:	9c 83       	std	Y+4, r25	; 0x04
    811a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    811c:	8d 81       	ldd	r24, Y+5	; 0x05
    811e:	9e 81       	ldd	r25, Y+6	; 0x06
    8120:	01 97       	sbiw	r24, 0x01	; 1
    8122:	9e 83       	std	Y+6, r25	; 0x06
    8124:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8126:	8d 81       	ldd	r24, Y+5	; 0x05
    8128:	9e 81       	ldd	r25, Y+6	; 0x06
    812a:	00 97       	sbiw	r24, 0x00	; 0
    812c:	69 f7       	brne	.-38     	; 0x8108 <STOP_CAR+0xb2>
    812e:	14 c0       	rjmp	.+40     	; 0x8158 <STOP_CAR+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8130:	6f 81       	ldd	r22, Y+7	; 0x07
    8132:	78 85       	ldd	r23, Y+8	; 0x08
    8134:	89 85       	ldd	r24, Y+9	; 0x09
    8136:	9a 85       	ldd	r25, Y+10	; 0x0a
    8138:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    813c:	dc 01       	movw	r26, r24
    813e:	cb 01       	movw	r24, r22
    8140:	9e 83       	std	Y+6, r25	; 0x06
    8142:	8d 83       	std	Y+5, r24	; 0x05
    8144:	8d 81       	ldd	r24, Y+5	; 0x05
    8146:	9e 81       	ldd	r25, Y+6	; 0x06
    8148:	9a 83       	std	Y+2, r25	; 0x02
    814a:	89 83       	std	Y+1, r24	; 0x01
    814c:	89 81       	ldd	r24, Y+1	; 0x01
    814e:	9a 81       	ldd	r25, Y+2	; 0x02
    8150:	01 97       	sbiw	r24, 0x01	; 1
    8152:	f1 f7       	brne	.-4      	; 0x8150 <STOP_CAR+0xfa>
    8154:	9a 83       	std	Y+2, r25	; 0x02
    8156:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(500);
DIO_void_Set_Pin_Value(car_control,stop,HIGH);
    8158:	84 e0       	ldi	r24, 0x04	; 4
    815a:	62 e0       	ldi	r22, 0x02	; 2
    815c:	41 e0       	ldi	r20, 0x01	; 1
    815e:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
}
    8162:	2e 96       	adiw	r28, 0x0e	; 14
    8164:	0f b6       	in	r0, 0x3f	; 63
    8166:	f8 94       	cli
    8168:	de bf       	out	0x3e, r29	; 62
    816a:	0f be       	out	0x3f, r0	; 63
    816c:	cd bf       	out	0x3d, r28	; 61
    816e:	cf 91       	pop	r28
    8170:	df 91       	pop	r29
    8172:	08 95       	ret

00008174 <right_move>:


void right_move(void)
{
    8174:	df 93       	push	r29
    8176:	cf 93       	push	r28
    8178:	cd b7       	in	r28, 0x3d	; 61
    817a:	de b7       	in	r29, 0x3e	; 62
    817c:	6c 97       	sbiw	r28, 0x1c	; 28
    817e:	0f b6       	in	r0, 0x3f	; 63
    8180:	f8 94       	cli
    8182:	de bf       	out	0x3e, r29	; 62
    8184:	0f be       	out	0x3f, r0	; 63
    8186:	cd bf       	out	0x3d, r28	; 61
	DIO_void_Set_Pin_Value(car_control,left_wheel,HIGH);
    8188:	84 e0       	ldi	r24, 0x04	; 4
    818a:	60 e0       	ldi	r22, 0x00	; 0
    818c:	41 e0       	ldi	r20, 0x01	; 1
    818e:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
	DIO_void_Set_Pin_Value(car_control,right_wheel,LOW);
    8192:	84 e0       	ldi	r24, 0x04	; 4
    8194:	61 e0       	ldi	r22, 0x01	; 1
    8196:	40 e0       	ldi	r20, 0x00	; 0
    8198:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    819c:	80 e0       	ldi	r24, 0x00	; 0
    819e:	90 e0       	ldi	r25, 0x00	; 0
    81a0:	a6 e9       	ldi	r26, 0x96	; 150
    81a2:	b4 e4       	ldi	r27, 0x44	; 68
    81a4:	89 8f       	std	Y+25, r24	; 0x19
    81a6:	9a 8f       	std	Y+26, r25	; 0x1a
    81a8:	ab 8f       	std	Y+27, r26	; 0x1b
    81aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    81ac:	69 8d       	ldd	r22, Y+25	; 0x19
    81ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    81b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    81b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    81b4:	20 e0       	ldi	r18, 0x00	; 0
    81b6:	30 e0       	ldi	r19, 0x00	; 0
    81b8:	4a ef       	ldi	r20, 0xFA	; 250
    81ba:	54 e4       	ldi	r21, 0x44	; 68
    81bc:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    81c0:	dc 01       	movw	r26, r24
    81c2:	cb 01       	movw	r24, r22
    81c4:	8d 8b       	std	Y+21, r24	; 0x15
    81c6:	9e 8b       	std	Y+22, r25	; 0x16
    81c8:	af 8b       	std	Y+23, r26	; 0x17
    81ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    81cc:	6d 89       	ldd	r22, Y+21	; 0x15
    81ce:	7e 89       	ldd	r23, Y+22	; 0x16
    81d0:	8f 89       	ldd	r24, Y+23	; 0x17
    81d2:	98 8d       	ldd	r25, Y+24	; 0x18
    81d4:	20 e0       	ldi	r18, 0x00	; 0
    81d6:	30 e0       	ldi	r19, 0x00	; 0
    81d8:	40 e8       	ldi	r20, 0x80	; 128
    81da:	5f e3       	ldi	r21, 0x3F	; 63
    81dc:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    81e0:	88 23       	and	r24, r24
    81e2:	2c f4       	brge	.+10     	; 0x81ee <right_move+0x7a>
		__ticks = 1;
    81e4:	81 e0       	ldi	r24, 0x01	; 1
    81e6:	90 e0       	ldi	r25, 0x00	; 0
    81e8:	9c 8b       	std	Y+20, r25	; 0x14
    81ea:	8b 8b       	std	Y+19, r24	; 0x13
    81ec:	3f c0       	rjmp	.+126    	; 0x826c <right_move+0xf8>
	else if (__tmp > 65535)
    81ee:	6d 89       	ldd	r22, Y+21	; 0x15
    81f0:	7e 89       	ldd	r23, Y+22	; 0x16
    81f2:	8f 89       	ldd	r24, Y+23	; 0x17
    81f4:	98 8d       	ldd	r25, Y+24	; 0x18
    81f6:	20 e0       	ldi	r18, 0x00	; 0
    81f8:	3f ef       	ldi	r19, 0xFF	; 255
    81fa:	4f e7       	ldi	r20, 0x7F	; 127
    81fc:	57 e4       	ldi	r21, 0x47	; 71
    81fe:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    8202:	18 16       	cp	r1, r24
    8204:	4c f5       	brge	.+82     	; 0x8258 <right_move+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8206:	69 8d       	ldd	r22, Y+25	; 0x19
    8208:	7a 8d       	ldd	r23, Y+26	; 0x1a
    820a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    820c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    820e:	20 e0       	ldi	r18, 0x00	; 0
    8210:	30 e0       	ldi	r19, 0x00	; 0
    8212:	40 e2       	ldi	r20, 0x20	; 32
    8214:	51 e4       	ldi	r21, 0x41	; 65
    8216:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    821a:	dc 01       	movw	r26, r24
    821c:	cb 01       	movw	r24, r22
    821e:	bc 01       	movw	r22, r24
    8220:	cd 01       	movw	r24, r26
    8222:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    8226:	dc 01       	movw	r26, r24
    8228:	cb 01       	movw	r24, r22
    822a:	9c 8b       	std	Y+20, r25	; 0x14
    822c:	8b 8b       	std	Y+19, r24	; 0x13
    822e:	0f c0       	rjmp	.+30     	; 0x824e <right_move+0xda>
    8230:	88 ec       	ldi	r24, 0xC8	; 200
    8232:	90 e0       	ldi	r25, 0x00	; 0
    8234:	9a 8b       	std	Y+18, r25	; 0x12
    8236:	89 8b       	std	Y+17, r24	; 0x11
    8238:	89 89       	ldd	r24, Y+17	; 0x11
    823a:	9a 89       	ldd	r25, Y+18	; 0x12
    823c:	01 97       	sbiw	r24, 0x01	; 1
    823e:	f1 f7       	brne	.-4      	; 0x823c <right_move+0xc8>
    8240:	9a 8b       	std	Y+18, r25	; 0x12
    8242:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8244:	8b 89       	ldd	r24, Y+19	; 0x13
    8246:	9c 89       	ldd	r25, Y+20	; 0x14
    8248:	01 97       	sbiw	r24, 0x01	; 1
    824a:	9c 8b       	std	Y+20, r25	; 0x14
    824c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    824e:	8b 89       	ldd	r24, Y+19	; 0x13
    8250:	9c 89       	ldd	r25, Y+20	; 0x14
    8252:	00 97       	sbiw	r24, 0x00	; 0
    8254:	69 f7       	brne	.-38     	; 0x8230 <right_move+0xbc>
    8256:	14 c0       	rjmp	.+40     	; 0x8280 <right_move+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8258:	6d 89       	ldd	r22, Y+21	; 0x15
    825a:	7e 89       	ldd	r23, Y+22	; 0x16
    825c:	8f 89       	ldd	r24, Y+23	; 0x17
    825e:	98 8d       	ldd	r25, Y+24	; 0x18
    8260:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    8264:	dc 01       	movw	r26, r24
    8266:	cb 01       	movw	r24, r22
    8268:	9c 8b       	std	Y+20, r25	; 0x14
    826a:	8b 8b       	std	Y+19, r24	; 0x13
    826c:	8b 89       	ldd	r24, Y+19	; 0x13
    826e:	9c 89       	ldd	r25, Y+20	; 0x14
    8270:	98 8b       	std	Y+16, r25	; 0x10
    8272:	8f 87       	std	Y+15, r24	; 0x0f
    8274:	8f 85       	ldd	r24, Y+15	; 0x0f
    8276:	98 89       	ldd	r25, Y+16	; 0x10
    8278:	01 97       	sbiw	r24, 0x01	; 1
    827a:	f1 f7       	brne	.-4      	; 0x8278 <right_move+0x104>
    827c:	98 8b       	std	Y+16, r25	; 0x10
    827e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1200);
	DIO_void_Set_Pin_Value(car_control,right_wheel,HIGH);
    8280:	84 e0       	ldi	r24, 0x04	; 4
    8282:	61 e0       	ldi	r22, 0x01	; 1
    8284:	41 e0       	ldi	r20, 0x01	; 1
    8286:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    828a:	80 e0       	ldi	r24, 0x00	; 0
    828c:	90 e0       	ldi	r25, 0x00	; 0
    828e:	aa ef       	ldi	r26, 0xFA	; 250
    8290:	b3 e4       	ldi	r27, 0x43	; 67
    8292:	8b 87       	std	Y+11, r24	; 0x0b
    8294:	9c 87       	std	Y+12, r25	; 0x0c
    8296:	ad 87       	std	Y+13, r26	; 0x0d
    8298:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    829a:	6b 85       	ldd	r22, Y+11	; 0x0b
    829c:	7c 85       	ldd	r23, Y+12	; 0x0c
    829e:	8d 85       	ldd	r24, Y+13	; 0x0d
    82a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    82a2:	20 e0       	ldi	r18, 0x00	; 0
    82a4:	30 e0       	ldi	r19, 0x00	; 0
    82a6:	4a ef       	ldi	r20, 0xFA	; 250
    82a8:	54 e4       	ldi	r21, 0x44	; 68
    82aa:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    82ae:	dc 01       	movw	r26, r24
    82b0:	cb 01       	movw	r24, r22
    82b2:	8f 83       	std	Y+7, r24	; 0x07
    82b4:	98 87       	std	Y+8, r25	; 0x08
    82b6:	a9 87       	std	Y+9, r26	; 0x09
    82b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    82ba:	6f 81       	ldd	r22, Y+7	; 0x07
    82bc:	78 85       	ldd	r23, Y+8	; 0x08
    82be:	89 85       	ldd	r24, Y+9	; 0x09
    82c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    82c2:	20 e0       	ldi	r18, 0x00	; 0
    82c4:	30 e0       	ldi	r19, 0x00	; 0
    82c6:	40 e8       	ldi	r20, 0x80	; 128
    82c8:	5f e3       	ldi	r21, 0x3F	; 63
    82ca:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    82ce:	88 23       	and	r24, r24
    82d0:	2c f4       	brge	.+10     	; 0x82dc <right_move+0x168>
		__ticks = 1;
    82d2:	81 e0       	ldi	r24, 0x01	; 1
    82d4:	90 e0       	ldi	r25, 0x00	; 0
    82d6:	9e 83       	std	Y+6, r25	; 0x06
    82d8:	8d 83       	std	Y+5, r24	; 0x05
    82da:	3f c0       	rjmp	.+126    	; 0x835a <right_move+0x1e6>
	else if (__tmp > 65535)
    82dc:	6f 81       	ldd	r22, Y+7	; 0x07
    82de:	78 85       	ldd	r23, Y+8	; 0x08
    82e0:	89 85       	ldd	r24, Y+9	; 0x09
    82e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    82e4:	20 e0       	ldi	r18, 0x00	; 0
    82e6:	3f ef       	ldi	r19, 0xFF	; 255
    82e8:	4f e7       	ldi	r20, 0x7F	; 127
    82ea:	57 e4       	ldi	r21, 0x47	; 71
    82ec:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    82f0:	18 16       	cp	r1, r24
    82f2:	4c f5       	brge	.+82     	; 0x8346 <right_move+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    82f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    82f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    82f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    82fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    82fc:	20 e0       	ldi	r18, 0x00	; 0
    82fe:	30 e0       	ldi	r19, 0x00	; 0
    8300:	40 e2       	ldi	r20, 0x20	; 32
    8302:	51 e4       	ldi	r21, 0x41	; 65
    8304:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    8308:	dc 01       	movw	r26, r24
    830a:	cb 01       	movw	r24, r22
    830c:	bc 01       	movw	r22, r24
    830e:	cd 01       	movw	r24, r26
    8310:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    8314:	dc 01       	movw	r26, r24
    8316:	cb 01       	movw	r24, r22
    8318:	9e 83       	std	Y+6, r25	; 0x06
    831a:	8d 83       	std	Y+5, r24	; 0x05
    831c:	0f c0       	rjmp	.+30     	; 0x833c <right_move+0x1c8>
    831e:	88 ec       	ldi	r24, 0xC8	; 200
    8320:	90 e0       	ldi	r25, 0x00	; 0
    8322:	9c 83       	std	Y+4, r25	; 0x04
    8324:	8b 83       	std	Y+3, r24	; 0x03
    8326:	8b 81       	ldd	r24, Y+3	; 0x03
    8328:	9c 81       	ldd	r25, Y+4	; 0x04
    832a:	01 97       	sbiw	r24, 0x01	; 1
    832c:	f1 f7       	brne	.-4      	; 0x832a <right_move+0x1b6>
    832e:	9c 83       	std	Y+4, r25	; 0x04
    8330:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8332:	8d 81       	ldd	r24, Y+5	; 0x05
    8334:	9e 81       	ldd	r25, Y+6	; 0x06
    8336:	01 97       	sbiw	r24, 0x01	; 1
    8338:	9e 83       	std	Y+6, r25	; 0x06
    833a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    833c:	8d 81       	ldd	r24, Y+5	; 0x05
    833e:	9e 81       	ldd	r25, Y+6	; 0x06
    8340:	00 97       	sbiw	r24, 0x00	; 0
    8342:	69 f7       	brne	.-38     	; 0x831e <right_move+0x1aa>
    8344:	14 c0       	rjmp	.+40     	; 0x836e <right_move+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8346:	6f 81       	ldd	r22, Y+7	; 0x07
    8348:	78 85       	ldd	r23, Y+8	; 0x08
    834a:	89 85       	ldd	r24, Y+9	; 0x09
    834c:	9a 85       	ldd	r25, Y+10	; 0x0a
    834e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    8352:	dc 01       	movw	r26, r24
    8354:	cb 01       	movw	r24, r22
    8356:	9e 83       	std	Y+6, r25	; 0x06
    8358:	8d 83       	std	Y+5, r24	; 0x05
    835a:	8d 81       	ldd	r24, Y+5	; 0x05
    835c:	9e 81       	ldd	r25, Y+6	; 0x06
    835e:	9a 83       	std	Y+2, r25	; 0x02
    8360:	89 83       	std	Y+1, r24	; 0x01
    8362:	89 81       	ldd	r24, Y+1	; 0x01
    8364:	9a 81       	ldd	r25, Y+2	; 0x02
    8366:	01 97       	sbiw	r24, 0x01	; 1
    8368:	f1 f7       	brne	.-4      	; 0x8366 <right_move+0x1f2>
    836a:	9a 83       	std	Y+2, r25	; 0x02
    836c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    836e:	6c 96       	adiw	r28, 0x1c	; 28
    8370:	0f b6       	in	r0, 0x3f	; 63
    8372:	f8 94       	cli
    8374:	de bf       	out	0x3e, r29	; 62
    8376:	0f be       	out	0x3f, r0	; 63
    8378:	cd bf       	out	0x3d, r28	; 61
    837a:	cf 91       	pop	r28
    837c:	df 91       	pop	r29
    837e:	08 95       	ret

00008380 <right_half_move>:
void right_half_move(void)
{
    8380:	df 93       	push	r29
    8382:	cf 93       	push	r28
    8384:	cd b7       	in	r28, 0x3d	; 61
    8386:	de b7       	in	r29, 0x3e	; 62
    8388:	6c 97       	sbiw	r28, 0x1c	; 28
    838a:	0f b6       	in	r0, 0x3f	; 63
    838c:	f8 94       	cli
    838e:	de bf       	out	0x3e, r29	; 62
    8390:	0f be       	out	0x3f, r0	; 63
    8392:	cd bf       	out	0x3d, r28	; 61
	DIO_void_Set_Pin_Value(car_control,left_wheel,HIGH);
    8394:	84 e0       	ldi	r24, 0x04	; 4
    8396:	60 e0       	ldi	r22, 0x00	; 0
    8398:	41 e0       	ldi	r20, 0x01	; 1
    839a:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
	DIO_void_Set_Pin_Value(car_control,right_wheel,LOW);
    839e:	84 e0       	ldi	r24, 0x04	; 4
    83a0:	61 e0       	ldi	r22, 0x01	; 1
    83a2:	40 e0       	ldi	r20, 0x00	; 0
    83a4:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    83a8:	80 e0       	ldi	r24, 0x00	; 0
    83aa:	90 e0       	ldi	r25, 0x00	; 0
    83ac:	aa ef       	ldi	r26, 0xFA	; 250
    83ae:	b3 e4       	ldi	r27, 0x43	; 67
    83b0:	89 8f       	std	Y+25, r24	; 0x19
    83b2:	9a 8f       	std	Y+26, r25	; 0x1a
    83b4:	ab 8f       	std	Y+27, r26	; 0x1b
    83b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    83b8:	69 8d       	ldd	r22, Y+25	; 0x19
    83ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    83bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    83be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    83c0:	20 e0       	ldi	r18, 0x00	; 0
    83c2:	30 e0       	ldi	r19, 0x00	; 0
    83c4:	4a ef       	ldi	r20, 0xFA	; 250
    83c6:	54 e4       	ldi	r21, 0x44	; 68
    83c8:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    83cc:	dc 01       	movw	r26, r24
    83ce:	cb 01       	movw	r24, r22
    83d0:	8d 8b       	std	Y+21, r24	; 0x15
    83d2:	9e 8b       	std	Y+22, r25	; 0x16
    83d4:	af 8b       	std	Y+23, r26	; 0x17
    83d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    83d8:	6d 89       	ldd	r22, Y+21	; 0x15
    83da:	7e 89       	ldd	r23, Y+22	; 0x16
    83dc:	8f 89       	ldd	r24, Y+23	; 0x17
    83de:	98 8d       	ldd	r25, Y+24	; 0x18
    83e0:	20 e0       	ldi	r18, 0x00	; 0
    83e2:	30 e0       	ldi	r19, 0x00	; 0
    83e4:	40 e8       	ldi	r20, 0x80	; 128
    83e6:	5f e3       	ldi	r21, 0x3F	; 63
    83e8:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    83ec:	88 23       	and	r24, r24
    83ee:	2c f4       	brge	.+10     	; 0x83fa <right_half_move+0x7a>
		__ticks = 1;
    83f0:	81 e0       	ldi	r24, 0x01	; 1
    83f2:	90 e0       	ldi	r25, 0x00	; 0
    83f4:	9c 8b       	std	Y+20, r25	; 0x14
    83f6:	8b 8b       	std	Y+19, r24	; 0x13
    83f8:	3f c0       	rjmp	.+126    	; 0x8478 <right_half_move+0xf8>
	else if (__tmp > 65535)
    83fa:	6d 89       	ldd	r22, Y+21	; 0x15
    83fc:	7e 89       	ldd	r23, Y+22	; 0x16
    83fe:	8f 89       	ldd	r24, Y+23	; 0x17
    8400:	98 8d       	ldd	r25, Y+24	; 0x18
    8402:	20 e0       	ldi	r18, 0x00	; 0
    8404:	3f ef       	ldi	r19, 0xFF	; 255
    8406:	4f e7       	ldi	r20, 0x7F	; 127
    8408:	57 e4       	ldi	r21, 0x47	; 71
    840a:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    840e:	18 16       	cp	r1, r24
    8410:	4c f5       	brge	.+82     	; 0x8464 <right_half_move+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8412:	69 8d       	ldd	r22, Y+25	; 0x19
    8414:	7a 8d       	ldd	r23, Y+26	; 0x1a
    8416:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8418:	9c 8d       	ldd	r25, Y+28	; 0x1c
    841a:	20 e0       	ldi	r18, 0x00	; 0
    841c:	30 e0       	ldi	r19, 0x00	; 0
    841e:	40 e2       	ldi	r20, 0x20	; 32
    8420:	51 e4       	ldi	r21, 0x41	; 65
    8422:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    8426:	dc 01       	movw	r26, r24
    8428:	cb 01       	movw	r24, r22
    842a:	bc 01       	movw	r22, r24
    842c:	cd 01       	movw	r24, r26
    842e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    8432:	dc 01       	movw	r26, r24
    8434:	cb 01       	movw	r24, r22
    8436:	9c 8b       	std	Y+20, r25	; 0x14
    8438:	8b 8b       	std	Y+19, r24	; 0x13
    843a:	0f c0       	rjmp	.+30     	; 0x845a <right_half_move+0xda>
    843c:	88 ec       	ldi	r24, 0xC8	; 200
    843e:	90 e0       	ldi	r25, 0x00	; 0
    8440:	9a 8b       	std	Y+18, r25	; 0x12
    8442:	89 8b       	std	Y+17, r24	; 0x11
    8444:	89 89       	ldd	r24, Y+17	; 0x11
    8446:	9a 89       	ldd	r25, Y+18	; 0x12
    8448:	01 97       	sbiw	r24, 0x01	; 1
    844a:	f1 f7       	brne	.-4      	; 0x8448 <right_half_move+0xc8>
    844c:	9a 8b       	std	Y+18, r25	; 0x12
    844e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8450:	8b 89       	ldd	r24, Y+19	; 0x13
    8452:	9c 89       	ldd	r25, Y+20	; 0x14
    8454:	01 97       	sbiw	r24, 0x01	; 1
    8456:	9c 8b       	std	Y+20, r25	; 0x14
    8458:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    845a:	8b 89       	ldd	r24, Y+19	; 0x13
    845c:	9c 89       	ldd	r25, Y+20	; 0x14
    845e:	00 97       	sbiw	r24, 0x00	; 0
    8460:	69 f7       	brne	.-38     	; 0x843c <right_half_move+0xbc>
    8462:	14 c0       	rjmp	.+40     	; 0x848c <right_half_move+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8464:	6d 89       	ldd	r22, Y+21	; 0x15
    8466:	7e 89       	ldd	r23, Y+22	; 0x16
    8468:	8f 89       	ldd	r24, Y+23	; 0x17
    846a:	98 8d       	ldd	r25, Y+24	; 0x18
    846c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    8470:	dc 01       	movw	r26, r24
    8472:	cb 01       	movw	r24, r22
    8474:	9c 8b       	std	Y+20, r25	; 0x14
    8476:	8b 8b       	std	Y+19, r24	; 0x13
    8478:	8b 89       	ldd	r24, Y+19	; 0x13
    847a:	9c 89       	ldd	r25, Y+20	; 0x14
    847c:	98 8b       	std	Y+16, r25	; 0x10
    847e:	8f 87       	std	Y+15, r24	; 0x0f
    8480:	8f 85       	ldd	r24, Y+15	; 0x0f
    8482:	98 89       	ldd	r25, Y+16	; 0x10
    8484:	01 97       	sbiw	r24, 0x01	; 1
    8486:	f1 f7       	brne	.-4      	; 0x8484 <right_half_move+0x104>
    8488:	98 8b       	std	Y+16, r25	; 0x10
    848a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	DIO_void_Set_Pin_Value(car_control,right_wheel,HIGH);
    848c:	84 e0       	ldi	r24, 0x04	; 4
    848e:	61 e0       	ldi	r22, 0x01	; 1
    8490:	41 e0       	ldi	r20, 0x01	; 1
    8492:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    8496:	80 e0       	ldi	r24, 0x00	; 0
    8498:	90 e0       	ldi	r25, 0x00	; 0
    849a:	aa ef       	ldi	r26, 0xFA	; 250
    849c:	b3 e4       	ldi	r27, 0x43	; 67
    849e:	8b 87       	std	Y+11, r24	; 0x0b
    84a0:	9c 87       	std	Y+12, r25	; 0x0c
    84a2:	ad 87       	std	Y+13, r26	; 0x0d
    84a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    84a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    84a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    84aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    84ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    84ae:	20 e0       	ldi	r18, 0x00	; 0
    84b0:	30 e0       	ldi	r19, 0x00	; 0
    84b2:	4a ef       	ldi	r20, 0xFA	; 250
    84b4:	54 e4       	ldi	r21, 0x44	; 68
    84b6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    84ba:	dc 01       	movw	r26, r24
    84bc:	cb 01       	movw	r24, r22
    84be:	8f 83       	std	Y+7, r24	; 0x07
    84c0:	98 87       	std	Y+8, r25	; 0x08
    84c2:	a9 87       	std	Y+9, r26	; 0x09
    84c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    84c6:	6f 81       	ldd	r22, Y+7	; 0x07
    84c8:	78 85       	ldd	r23, Y+8	; 0x08
    84ca:	89 85       	ldd	r24, Y+9	; 0x09
    84cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    84ce:	20 e0       	ldi	r18, 0x00	; 0
    84d0:	30 e0       	ldi	r19, 0x00	; 0
    84d2:	40 e8       	ldi	r20, 0x80	; 128
    84d4:	5f e3       	ldi	r21, 0x3F	; 63
    84d6:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    84da:	88 23       	and	r24, r24
    84dc:	2c f4       	brge	.+10     	; 0x84e8 <right_half_move+0x168>
		__ticks = 1;
    84de:	81 e0       	ldi	r24, 0x01	; 1
    84e0:	90 e0       	ldi	r25, 0x00	; 0
    84e2:	9e 83       	std	Y+6, r25	; 0x06
    84e4:	8d 83       	std	Y+5, r24	; 0x05
    84e6:	3f c0       	rjmp	.+126    	; 0x8566 <right_half_move+0x1e6>
	else if (__tmp > 65535)
    84e8:	6f 81       	ldd	r22, Y+7	; 0x07
    84ea:	78 85       	ldd	r23, Y+8	; 0x08
    84ec:	89 85       	ldd	r24, Y+9	; 0x09
    84ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    84f0:	20 e0       	ldi	r18, 0x00	; 0
    84f2:	3f ef       	ldi	r19, 0xFF	; 255
    84f4:	4f e7       	ldi	r20, 0x7F	; 127
    84f6:	57 e4       	ldi	r21, 0x47	; 71
    84f8:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    84fc:	18 16       	cp	r1, r24
    84fe:	4c f5       	brge	.+82     	; 0x8552 <right_half_move+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8500:	6b 85       	ldd	r22, Y+11	; 0x0b
    8502:	7c 85       	ldd	r23, Y+12	; 0x0c
    8504:	8d 85       	ldd	r24, Y+13	; 0x0d
    8506:	9e 85       	ldd	r25, Y+14	; 0x0e
    8508:	20 e0       	ldi	r18, 0x00	; 0
    850a:	30 e0       	ldi	r19, 0x00	; 0
    850c:	40 e2       	ldi	r20, 0x20	; 32
    850e:	51 e4       	ldi	r21, 0x41	; 65
    8510:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    8514:	dc 01       	movw	r26, r24
    8516:	cb 01       	movw	r24, r22
    8518:	bc 01       	movw	r22, r24
    851a:	cd 01       	movw	r24, r26
    851c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    8520:	dc 01       	movw	r26, r24
    8522:	cb 01       	movw	r24, r22
    8524:	9e 83       	std	Y+6, r25	; 0x06
    8526:	8d 83       	std	Y+5, r24	; 0x05
    8528:	0f c0       	rjmp	.+30     	; 0x8548 <right_half_move+0x1c8>
    852a:	88 ec       	ldi	r24, 0xC8	; 200
    852c:	90 e0       	ldi	r25, 0x00	; 0
    852e:	9c 83       	std	Y+4, r25	; 0x04
    8530:	8b 83       	std	Y+3, r24	; 0x03
    8532:	8b 81       	ldd	r24, Y+3	; 0x03
    8534:	9c 81       	ldd	r25, Y+4	; 0x04
    8536:	01 97       	sbiw	r24, 0x01	; 1
    8538:	f1 f7       	brne	.-4      	; 0x8536 <right_half_move+0x1b6>
    853a:	9c 83       	std	Y+4, r25	; 0x04
    853c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    853e:	8d 81       	ldd	r24, Y+5	; 0x05
    8540:	9e 81       	ldd	r25, Y+6	; 0x06
    8542:	01 97       	sbiw	r24, 0x01	; 1
    8544:	9e 83       	std	Y+6, r25	; 0x06
    8546:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8548:	8d 81       	ldd	r24, Y+5	; 0x05
    854a:	9e 81       	ldd	r25, Y+6	; 0x06
    854c:	00 97       	sbiw	r24, 0x00	; 0
    854e:	69 f7       	brne	.-38     	; 0x852a <right_half_move+0x1aa>
    8550:	14 c0       	rjmp	.+40     	; 0x857a <right_half_move+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8552:	6f 81       	ldd	r22, Y+7	; 0x07
    8554:	78 85       	ldd	r23, Y+8	; 0x08
    8556:	89 85       	ldd	r24, Y+9	; 0x09
    8558:	9a 85       	ldd	r25, Y+10	; 0x0a
    855a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    855e:	dc 01       	movw	r26, r24
    8560:	cb 01       	movw	r24, r22
    8562:	9e 83       	std	Y+6, r25	; 0x06
    8564:	8d 83       	std	Y+5, r24	; 0x05
    8566:	8d 81       	ldd	r24, Y+5	; 0x05
    8568:	9e 81       	ldd	r25, Y+6	; 0x06
    856a:	9a 83       	std	Y+2, r25	; 0x02
    856c:	89 83       	std	Y+1, r24	; 0x01
    856e:	89 81       	ldd	r24, Y+1	; 0x01
    8570:	9a 81       	ldd	r25, Y+2	; 0x02
    8572:	01 97       	sbiw	r24, 0x01	; 1
    8574:	f1 f7       	brne	.-4      	; 0x8572 <right_half_move+0x1f2>
    8576:	9a 83       	std	Y+2, r25	; 0x02
    8578:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    857a:	6c 96       	adiw	r28, 0x1c	; 28
    857c:	0f b6       	in	r0, 0x3f	; 63
    857e:	f8 94       	cli
    8580:	de bf       	out	0x3e, r29	; 62
    8582:	0f be       	out	0x3f, r0	; 63
    8584:	cd bf       	out	0x3d, r28	; 61
    8586:	cf 91       	pop	r28
    8588:	df 91       	pop	r29
    858a:	08 95       	ret

0000858c <left_move>:

void left_move(void)
{
    858c:	df 93       	push	r29
    858e:	cf 93       	push	r28
    8590:	cd b7       	in	r28, 0x3d	; 61
    8592:	de b7       	in	r29, 0x3e	; 62
    8594:	6c 97       	sbiw	r28, 0x1c	; 28
    8596:	0f b6       	in	r0, 0x3f	; 63
    8598:	f8 94       	cli
    859a:	de bf       	out	0x3e, r29	; 62
    859c:	0f be       	out	0x3f, r0	; 63
    859e:	cd bf       	out	0x3d, r28	; 61
	DIO_void_Set_Pin_Value(car_control,right_wheel,HIGH);
    85a0:	84 e0       	ldi	r24, 0x04	; 4
    85a2:	61 e0       	ldi	r22, 0x01	; 1
    85a4:	41 e0       	ldi	r20, 0x01	; 1
    85a6:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
	DIO_void_Set_Pin_Value(car_control,left_wheel,LOW);
    85aa:	84 e0       	ldi	r24, 0x04	; 4
    85ac:	60 e0       	ldi	r22, 0x00	; 0
    85ae:	40 e0       	ldi	r20, 0x00	; 0
    85b0:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    85b4:	80 e0       	ldi	r24, 0x00	; 0
    85b6:	90 e0       	ldi	r25, 0x00	; 0
    85b8:	a6 e9       	ldi	r26, 0x96	; 150
    85ba:	b4 e4       	ldi	r27, 0x44	; 68
    85bc:	89 8f       	std	Y+25, r24	; 0x19
    85be:	9a 8f       	std	Y+26, r25	; 0x1a
    85c0:	ab 8f       	std	Y+27, r26	; 0x1b
    85c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    85c4:	69 8d       	ldd	r22, Y+25	; 0x19
    85c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    85c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    85ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    85cc:	20 e0       	ldi	r18, 0x00	; 0
    85ce:	30 e0       	ldi	r19, 0x00	; 0
    85d0:	4a ef       	ldi	r20, 0xFA	; 250
    85d2:	54 e4       	ldi	r21, 0x44	; 68
    85d4:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    85d8:	dc 01       	movw	r26, r24
    85da:	cb 01       	movw	r24, r22
    85dc:	8d 8b       	std	Y+21, r24	; 0x15
    85de:	9e 8b       	std	Y+22, r25	; 0x16
    85e0:	af 8b       	std	Y+23, r26	; 0x17
    85e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    85e4:	6d 89       	ldd	r22, Y+21	; 0x15
    85e6:	7e 89       	ldd	r23, Y+22	; 0x16
    85e8:	8f 89       	ldd	r24, Y+23	; 0x17
    85ea:	98 8d       	ldd	r25, Y+24	; 0x18
    85ec:	20 e0       	ldi	r18, 0x00	; 0
    85ee:	30 e0       	ldi	r19, 0x00	; 0
    85f0:	40 e8       	ldi	r20, 0x80	; 128
    85f2:	5f e3       	ldi	r21, 0x3F	; 63
    85f4:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    85f8:	88 23       	and	r24, r24
    85fa:	2c f4       	brge	.+10     	; 0x8606 <left_move+0x7a>
		__ticks = 1;
    85fc:	81 e0       	ldi	r24, 0x01	; 1
    85fe:	90 e0       	ldi	r25, 0x00	; 0
    8600:	9c 8b       	std	Y+20, r25	; 0x14
    8602:	8b 8b       	std	Y+19, r24	; 0x13
    8604:	3f c0       	rjmp	.+126    	; 0x8684 <left_move+0xf8>
	else if (__tmp > 65535)
    8606:	6d 89       	ldd	r22, Y+21	; 0x15
    8608:	7e 89       	ldd	r23, Y+22	; 0x16
    860a:	8f 89       	ldd	r24, Y+23	; 0x17
    860c:	98 8d       	ldd	r25, Y+24	; 0x18
    860e:	20 e0       	ldi	r18, 0x00	; 0
    8610:	3f ef       	ldi	r19, 0xFF	; 255
    8612:	4f e7       	ldi	r20, 0x7F	; 127
    8614:	57 e4       	ldi	r21, 0x47	; 71
    8616:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    861a:	18 16       	cp	r1, r24
    861c:	4c f5       	brge	.+82     	; 0x8670 <left_move+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    861e:	69 8d       	ldd	r22, Y+25	; 0x19
    8620:	7a 8d       	ldd	r23, Y+26	; 0x1a
    8622:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8624:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8626:	20 e0       	ldi	r18, 0x00	; 0
    8628:	30 e0       	ldi	r19, 0x00	; 0
    862a:	40 e2       	ldi	r20, 0x20	; 32
    862c:	51 e4       	ldi	r21, 0x41	; 65
    862e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    8632:	dc 01       	movw	r26, r24
    8634:	cb 01       	movw	r24, r22
    8636:	bc 01       	movw	r22, r24
    8638:	cd 01       	movw	r24, r26
    863a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    863e:	dc 01       	movw	r26, r24
    8640:	cb 01       	movw	r24, r22
    8642:	9c 8b       	std	Y+20, r25	; 0x14
    8644:	8b 8b       	std	Y+19, r24	; 0x13
    8646:	0f c0       	rjmp	.+30     	; 0x8666 <left_move+0xda>
    8648:	88 ec       	ldi	r24, 0xC8	; 200
    864a:	90 e0       	ldi	r25, 0x00	; 0
    864c:	9a 8b       	std	Y+18, r25	; 0x12
    864e:	89 8b       	std	Y+17, r24	; 0x11
    8650:	89 89       	ldd	r24, Y+17	; 0x11
    8652:	9a 89       	ldd	r25, Y+18	; 0x12
    8654:	01 97       	sbiw	r24, 0x01	; 1
    8656:	f1 f7       	brne	.-4      	; 0x8654 <left_move+0xc8>
    8658:	9a 8b       	std	Y+18, r25	; 0x12
    865a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    865c:	8b 89       	ldd	r24, Y+19	; 0x13
    865e:	9c 89       	ldd	r25, Y+20	; 0x14
    8660:	01 97       	sbiw	r24, 0x01	; 1
    8662:	9c 8b       	std	Y+20, r25	; 0x14
    8664:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8666:	8b 89       	ldd	r24, Y+19	; 0x13
    8668:	9c 89       	ldd	r25, Y+20	; 0x14
    866a:	00 97       	sbiw	r24, 0x00	; 0
    866c:	69 f7       	brne	.-38     	; 0x8648 <left_move+0xbc>
    866e:	14 c0       	rjmp	.+40     	; 0x8698 <left_move+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8670:	6d 89       	ldd	r22, Y+21	; 0x15
    8672:	7e 89       	ldd	r23, Y+22	; 0x16
    8674:	8f 89       	ldd	r24, Y+23	; 0x17
    8676:	98 8d       	ldd	r25, Y+24	; 0x18
    8678:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    867c:	dc 01       	movw	r26, r24
    867e:	cb 01       	movw	r24, r22
    8680:	9c 8b       	std	Y+20, r25	; 0x14
    8682:	8b 8b       	std	Y+19, r24	; 0x13
    8684:	8b 89       	ldd	r24, Y+19	; 0x13
    8686:	9c 89       	ldd	r25, Y+20	; 0x14
    8688:	98 8b       	std	Y+16, r25	; 0x10
    868a:	8f 87       	std	Y+15, r24	; 0x0f
    868c:	8f 85       	ldd	r24, Y+15	; 0x0f
    868e:	98 89       	ldd	r25, Y+16	; 0x10
    8690:	01 97       	sbiw	r24, 0x01	; 1
    8692:	f1 f7       	brne	.-4      	; 0x8690 <left_move+0x104>
    8694:	98 8b       	std	Y+16, r25	; 0x10
    8696:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1200);
	DIO_void_Set_Pin_Value(car_control,left_wheel,HIGH);
    8698:	84 e0       	ldi	r24, 0x04	; 4
    869a:	60 e0       	ldi	r22, 0x00	; 0
    869c:	41 e0       	ldi	r20, 0x01	; 1
    869e:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    86a2:	80 e0       	ldi	r24, 0x00	; 0
    86a4:	90 e0       	ldi	r25, 0x00	; 0
    86a6:	aa ef       	ldi	r26, 0xFA	; 250
    86a8:	b3 e4       	ldi	r27, 0x43	; 67
    86aa:	8b 87       	std	Y+11, r24	; 0x0b
    86ac:	9c 87       	std	Y+12, r25	; 0x0c
    86ae:	ad 87       	std	Y+13, r26	; 0x0d
    86b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    86b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    86b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    86b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    86b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    86ba:	20 e0       	ldi	r18, 0x00	; 0
    86bc:	30 e0       	ldi	r19, 0x00	; 0
    86be:	4a ef       	ldi	r20, 0xFA	; 250
    86c0:	54 e4       	ldi	r21, 0x44	; 68
    86c2:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    86c6:	dc 01       	movw	r26, r24
    86c8:	cb 01       	movw	r24, r22
    86ca:	8f 83       	std	Y+7, r24	; 0x07
    86cc:	98 87       	std	Y+8, r25	; 0x08
    86ce:	a9 87       	std	Y+9, r26	; 0x09
    86d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    86d2:	6f 81       	ldd	r22, Y+7	; 0x07
    86d4:	78 85       	ldd	r23, Y+8	; 0x08
    86d6:	89 85       	ldd	r24, Y+9	; 0x09
    86d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    86da:	20 e0       	ldi	r18, 0x00	; 0
    86dc:	30 e0       	ldi	r19, 0x00	; 0
    86de:	40 e8       	ldi	r20, 0x80	; 128
    86e0:	5f e3       	ldi	r21, 0x3F	; 63
    86e2:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    86e6:	88 23       	and	r24, r24
    86e8:	2c f4       	brge	.+10     	; 0x86f4 <left_move+0x168>
		__ticks = 1;
    86ea:	81 e0       	ldi	r24, 0x01	; 1
    86ec:	90 e0       	ldi	r25, 0x00	; 0
    86ee:	9e 83       	std	Y+6, r25	; 0x06
    86f0:	8d 83       	std	Y+5, r24	; 0x05
    86f2:	3f c0       	rjmp	.+126    	; 0x8772 <left_move+0x1e6>
	else if (__tmp > 65535)
    86f4:	6f 81       	ldd	r22, Y+7	; 0x07
    86f6:	78 85       	ldd	r23, Y+8	; 0x08
    86f8:	89 85       	ldd	r24, Y+9	; 0x09
    86fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    86fc:	20 e0       	ldi	r18, 0x00	; 0
    86fe:	3f ef       	ldi	r19, 0xFF	; 255
    8700:	4f e7       	ldi	r20, 0x7F	; 127
    8702:	57 e4       	ldi	r21, 0x47	; 71
    8704:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    8708:	18 16       	cp	r1, r24
    870a:	4c f5       	brge	.+82     	; 0x875e <left_move+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    870c:	6b 85       	ldd	r22, Y+11	; 0x0b
    870e:	7c 85       	ldd	r23, Y+12	; 0x0c
    8710:	8d 85       	ldd	r24, Y+13	; 0x0d
    8712:	9e 85       	ldd	r25, Y+14	; 0x0e
    8714:	20 e0       	ldi	r18, 0x00	; 0
    8716:	30 e0       	ldi	r19, 0x00	; 0
    8718:	40 e2       	ldi	r20, 0x20	; 32
    871a:	51 e4       	ldi	r21, 0x41	; 65
    871c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    8720:	dc 01       	movw	r26, r24
    8722:	cb 01       	movw	r24, r22
    8724:	bc 01       	movw	r22, r24
    8726:	cd 01       	movw	r24, r26
    8728:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    872c:	dc 01       	movw	r26, r24
    872e:	cb 01       	movw	r24, r22
    8730:	9e 83       	std	Y+6, r25	; 0x06
    8732:	8d 83       	std	Y+5, r24	; 0x05
    8734:	0f c0       	rjmp	.+30     	; 0x8754 <left_move+0x1c8>
    8736:	88 ec       	ldi	r24, 0xC8	; 200
    8738:	90 e0       	ldi	r25, 0x00	; 0
    873a:	9c 83       	std	Y+4, r25	; 0x04
    873c:	8b 83       	std	Y+3, r24	; 0x03
    873e:	8b 81       	ldd	r24, Y+3	; 0x03
    8740:	9c 81       	ldd	r25, Y+4	; 0x04
    8742:	01 97       	sbiw	r24, 0x01	; 1
    8744:	f1 f7       	brne	.-4      	; 0x8742 <left_move+0x1b6>
    8746:	9c 83       	std	Y+4, r25	; 0x04
    8748:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    874a:	8d 81       	ldd	r24, Y+5	; 0x05
    874c:	9e 81       	ldd	r25, Y+6	; 0x06
    874e:	01 97       	sbiw	r24, 0x01	; 1
    8750:	9e 83       	std	Y+6, r25	; 0x06
    8752:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8754:	8d 81       	ldd	r24, Y+5	; 0x05
    8756:	9e 81       	ldd	r25, Y+6	; 0x06
    8758:	00 97       	sbiw	r24, 0x00	; 0
    875a:	69 f7       	brne	.-38     	; 0x8736 <left_move+0x1aa>
    875c:	14 c0       	rjmp	.+40     	; 0x8786 <left_move+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    875e:	6f 81       	ldd	r22, Y+7	; 0x07
    8760:	78 85       	ldd	r23, Y+8	; 0x08
    8762:	89 85       	ldd	r24, Y+9	; 0x09
    8764:	9a 85       	ldd	r25, Y+10	; 0x0a
    8766:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    876a:	dc 01       	movw	r26, r24
    876c:	cb 01       	movw	r24, r22
    876e:	9e 83       	std	Y+6, r25	; 0x06
    8770:	8d 83       	std	Y+5, r24	; 0x05
    8772:	8d 81       	ldd	r24, Y+5	; 0x05
    8774:	9e 81       	ldd	r25, Y+6	; 0x06
    8776:	9a 83       	std	Y+2, r25	; 0x02
    8778:	89 83       	std	Y+1, r24	; 0x01
    877a:	89 81       	ldd	r24, Y+1	; 0x01
    877c:	9a 81       	ldd	r25, Y+2	; 0x02
    877e:	01 97       	sbiw	r24, 0x01	; 1
    8780:	f1 f7       	brne	.-4      	; 0x877e <left_move+0x1f2>
    8782:	9a 83       	std	Y+2, r25	; 0x02
    8784:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    8786:	6c 96       	adiw	r28, 0x1c	; 28
    8788:	0f b6       	in	r0, 0x3f	; 63
    878a:	f8 94       	cli
    878c:	de bf       	out	0x3e, r29	; 62
    878e:	0f be       	out	0x3f, r0	; 63
    8790:	cd bf       	out	0x3d, r28	; 61
    8792:	cf 91       	pop	r28
    8794:	df 91       	pop	r29
    8796:	08 95       	ret

00008798 <left_half_move>:
void left_half_move(void)
{
    8798:	df 93       	push	r29
    879a:	cf 93       	push	r28
    879c:	cd b7       	in	r28, 0x3d	; 61
    879e:	de b7       	in	r29, 0x3e	; 62
    87a0:	6c 97       	sbiw	r28, 0x1c	; 28
    87a2:	0f b6       	in	r0, 0x3f	; 63
    87a4:	f8 94       	cli
    87a6:	de bf       	out	0x3e, r29	; 62
    87a8:	0f be       	out	0x3f, r0	; 63
    87aa:	cd bf       	out	0x3d, r28	; 61
	DIO_void_Set_Pin_Value(car_control,right_wheel,HIGH);
    87ac:	84 e0       	ldi	r24, 0x04	; 4
    87ae:	61 e0       	ldi	r22, 0x01	; 1
    87b0:	41 e0       	ldi	r20, 0x01	; 1
    87b2:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
	DIO_void_Set_Pin_Value(car_control,left_wheel,LOW);
    87b6:	84 e0       	ldi	r24, 0x04	; 4
    87b8:	60 e0       	ldi	r22, 0x00	; 0
    87ba:	40 e0       	ldi	r20, 0x00	; 0
    87bc:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    87c0:	80 e0       	ldi	r24, 0x00	; 0
    87c2:	90 e0       	ldi	r25, 0x00	; 0
    87c4:	aa ef       	ldi	r26, 0xFA	; 250
    87c6:	b3 e4       	ldi	r27, 0x43	; 67
    87c8:	89 8f       	std	Y+25, r24	; 0x19
    87ca:	9a 8f       	std	Y+26, r25	; 0x1a
    87cc:	ab 8f       	std	Y+27, r26	; 0x1b
    87ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    87d0:	69 8d       	ldd	r22, Y+25	; 0x19
    87d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    87d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    87d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    87d8:	20 e0       	ldi	r18, 0x00	; 0
    87da:	30 e0       	ldi	r19, 0x00	; 0
    87dc:	4a ef       	ldi	r20, 0xFA	; 250
    87de:	54 e4       	ldi	r21, 0x44	; 68
    87e0:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    87e4:	dc 01       	movw	r26, r24
    87e6:	cb 01       	movw	r24, r22
    87e8:	8d 8b       	std	Y+21, r24	; 0x15
    87ea:	9e 8b       	std	Y+22, r25	; 0x16
    87ec:	af 8b       	std	Y+23, r26	; 0x17
    87ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    87f0:	6d 89       	ldd	r22, Y+21	; 0x15
    87f2:	7e 89       	ldd	r23, Y+22	; 0x16
    87f4:	8f 89       	ldd	r24, Y+23	; 0x17
    87f6:	98 8d       	ldd	r25, Y+24	; 0x18
    87f8:	20 e0       	ldi	r18, 0x00	; 0
    87fa:	30 e0       	ldi	r19, 0x00	; 0
    87fc:	40 e8       	ldi	r20, 0x80	; 128
    87fe:	5f e3       	ldi	r21, 0x3F	; 63
    8800:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    8804:	88 23       	and	r24, r24
    8806:	2c f4       	brge	.+10     	; 0x8812 <left_half_move+0x7a>
		__ticks = 1;
    8808:	81 e0       	ldi	r24, 0x01	; 1
    880a:	90 e0       	ldi	r25, 0x00	; 0
    880c:	9c 8b       	std	Y+20, r25	; 0x14
    880e:	8b 8b       	std	Y+19, r24	; 0x13
    8810:	3f c0       	rjmp	.+126    	; 0x8890 <left_half_move+0xf8>
	else if (__tmp > 65535)
    8812:	6d 89       	ldd	r22, Y+21	; 0x15
    8814:	7e 89       	ldd	r23, Y+22	; 0x16
    8816:	8f 89       	ldd	r24, Y+23	; 0x17
    8818:	98 8d       	ldd	r25, Y+24	; 0x18
    881a:	20 e0       	ldi	r18, 0x00	; 0
    881c:	3f ef       	ldi	r19, 0xFF	; 255
    881e:	4f e7       	ldi	r20, 0x7F	; 127
    8820:	57 e4       	ldi	r21, 0x47	; 71
    8822:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    8826:	18 16       	cp	r1, r24
    8828:	4c f5       	brge	.+82     	; 0x887c <left_half_move+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    882a:	69 8d       	ldd	r22, Y+25	; 0x19
    882c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    882e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8830:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8832:	20 e0       	ldi	r18, 0x00	; 0
    8834:	30 e0       	ldi	r19, 0x00	; 0
    8836:	40 e2       	ldi	r20, 0x20	; 32
    8838:	51 e4       	ldi	r21, 0x41	; 65
    883a:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    883e:	dc 01       	movw	r26, r24
    8840:	cb 01       	movw	r24, r22
    8842:	bc 01       	movw	r22, r24
    8844:	cd 01       	movw	r24, r26
    8846:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    884a:	dc 01       	movw	r26, r24
    884c:	cb 01       	movw	r24, r22
    884e:	9c 8b       	std	Y+20, r25	; 0x14
    8850:	8b 8b       	std	Y+19, r24	; 0x13
    8852:	0f c0       	rjmp	.+30     	; 0x8872 <left_half_move+0xda>
    8854:	88 ec       	ldi	r24, 0xC8	; 200
    8856:	90 e0       	ldi	r25, 0x00	; 0
    8858:	9a 8b       	std	Y+18, r25	; 0x12
    885a:	89 8b       	std	Y+17, r24	; 0x11
    885c:	89 89       	ldd	r24, Y+17	; 0x11
    885e:	9a 89       	ldd	r25, Y+18	; 0x12
    8860:	01 97       	sbiw	r24, 0x01	; 1
    8862:	f1 f7       	brne	.-4      	; 0x8860 <left_half_move+0xc8>
    8864:	9a 8b       	std	Y+18, r25	; 0x12
    8866:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8868:	8b 89       	ldd	r24, Y+19	; 0x13
    886a:	9c 89       	ldd	r25, Y+20	; 0x14
    886c:	01 97       	sbiw	r24, 0x01	; 1
    886e:	9c 8b       	std	Y+20, r25	; 0x14
    8870:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8872:	8b 89       	ldd	r24, Y+19	; 0x13
    8874:	9c 89       	ldd	r25, Y+20	; 0x14
    8876:	00 97       	sbiw	r24, 0x00	; 0
    8878:	69 f7       	brne	.-38     	; 0x8854 <left_half_move+0xbc>
    887a:	14 c0       	rjmp	.+40     	; 0x88a4 <left_half_move+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    887c:	6d 89       	ldd	r22, Y+21	; 0x15
    887e:	7e 89       	ldd	r23, Y+22	; 0x16
    8880:	8f 89       	ldd	r24, Y+23	; 0x17
    8882:	98 8d       	ldd	r25, Y+24	; 0x18
    8884:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    8888:	dc 01       	movw	r26, r24
    888a:	cb 01       	movw	r24, r22
    888c:	9c 8b       	std	Y+20, r25	; 0x14
    888e:	8b 8b       	std	Y+19, r24	; 0x13
    8890:	8b 89       	ldd	r24, Y+19	; 0x13
    8892:	9c 89       	ldd	r25, Y+20	; 0x14
    8894:	98 8b       	std	Y+16, r25	; 0x10
    8896:	8f 87       	std	Y+15, r24	; 0x0f
    8898:	8f 85       	ldd	r24, Y+15	; 0x0f
    889a:	98 89       	ldd	r25, Y+16	; 0x10
    889c:	01 97       	sbiw	r24, 0x01	; 1
    889e:	f1 f7       	brne	.-4      	; 0x889c <left_half_move+0x104>
    88a0:	98 8b       	std	Y+16, r25	; 0x10
    88a2:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(500);
	DIO_void_Set_Pin_Value(car_control,left_wheel,HIGH);
    88a4:	84 e0       	ldi	r24, 0x04	; 4
    88a6:	60 e0       	ldi	r22, 0x00	; 0
    88a8:	41 e0       	ldi	r20, 0x01	; 1
    88aa:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
    88ae:	80 e0       	ldi	r24, 0x00	; 0
    88b0:	90 e0       	ldi	r25, 0x00	; 0
    88b2:	aa ef       	ldi	r26, 0xFA	; 250
    88b4:	b3 e4       	ldi	r27, 0x43	; 67
    88b6:	8b 87       	std	Y+11, r24	; 0x0b
    88b8:	9c 87       	std	Y+12, r25	; 0x0c
    88ba:	ad 87       	std	Y+13, r26	; 0x0d
    88bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    88be:	6b 85       	ldd	r22, Y+11	; 0x0b
    88c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    88c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    88c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    88c6:	20 e0       	ldi	r18, 0x00	; 0
    88c8:	30 e0       	ldi	r19, 0x00	; 0
    88ca:	4a ef       	ldi	r20, 0xFA	; 250
    88cc:	54 e4       	ldi	r21, 0x44	; 68
    88ce:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    88d2:	dc 01       	movw	r26, r24
    88d4:	cb 01       	movw	r24, r22
    88d6:	8f 83       	std	Y+7, r24	; 0x07
    88d8:	98 87       	std	Y+8, r25	; 0x08
    88da:	a9 87       	std	Y+9, r26	; 0x09
    88dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    88de:	6f 81       	ldd	r22, Y+7	; 0x07
    88e0:	78 85       	ldd	r23, Y+8	; 0x08
    88e2:	89 85       	ldd	r24, Y+9	; 0x09
    88e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    88e6:	20 e0       	ldi	r18, 0x00	; 0
    88e8:	30 e0       	ldi	r19, 0x00	; 0
    88ea:	40 e8       	ldi	r20, 0x80	; 128
    88ec:	5f e3       	ldi	r21, 0x3F	; 63
    88ee:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    88f2:	88 23       	and	r24, r24
    88f4:	2c f4       	brge	.+10     	; 0x8900 <left_half_move+0x168>
		__ticks = 1;
    88f6:	81 e0       	ldi	r24, 0x01	; 1
    88f8:	90 e0       	ldi	r25, 0x00	; 0
    88fa:	9e 83       	std	Y+6, r25	; 0x06
    88fc:	8d 83       	std	Y+5, r24	; 0x05
    88fe:	3f c0       	rjmp	.+126    	; 0x897e <left_half_move+0x1e6>
	else if (__tmp > 65535)
    8900:	6f 81       	ldd	r22, Y+7	; 0x07
    8902:	78 85       	ldd	r23, Y+8	; 0x08
    8904:	89 85       	ldd	r24, Y+9	; 0x09
    8906:	9a 85       	ldd	r25, Y+10	; 0x0a
    8908:	20 e0       	ldi	r18, 0x00	; 0
    890a:	3f ef       	ldi	r19, 0xFF	; 255
    890c:	4f e7       	ldi	r20, 0x7F	; 127
    890e:	57 e4       	ldi	r21, 0x47	; 71
    8910:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    8914:	18 16       	cp	r1, r24
    8916:	4c f5       	brge	.+82     	; 0x896a <left_half_move+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8918:	6b 85       	ldd	r22, Y+11	; 0x0b
    891a:	7c 85       	ldd	r23, Y+12	; 0x0c
    891c:	8d 85       	ldd	r24, Y+13	; 0x0d
    891e:	9e 85       	ldd	r25, Y+14	; 0x0e
    8920:	20 e0       	ldi	r18, 0x00	; 0
    8922:	30 e0       	ldi	r19, 0x00	; 0
    8924:	40 e2       	ldi	r20, 0x20	; 32
    8926:	51 e4       	ldi	r21, 0x41	; 65
    8928:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    892c:	dc 01       	movw	r26, r24
    892e:	cb 01       	movw	r24, r22
    8930:	bc 01       	movw	r22, r24
    8932:	cd 01       	movw	r24, r26
    8934:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    8938:	dc 01       	movw	r26, r24
    893a:	cb 01       	movw	r24, r22
    893c:	9e 83       	std	Y+6, r25	; 0x06
    893e:	8d 83       	std	Y+5, r24	; 0x05
    8940:	0f c0       	rjmp	.+30     	; 0x8960 <left_half_move+0x1c8>
    8942:	88 ec       	ldi	r24, 0xC8	; 200
    8944:	90 e0       	ldi	r25, 0x00	; 0
    8946:	9c 83       	std	Y+4, r25	; 0x04
    8948:	8b 83       	std	Y+3, r24	; 0x03
    894a:	8b 81       	ldd	r24, Y+3	; 0x03
    894c:	9c 81       	ldd	r25, Y+4	; 0x04
    894e:	01 97       	sbiw	r24, 0x01	; 1
    8950:	f1 f7       	brne	.-4      	; 0x894e <left_half_move+0x1b6>
    8952:	9c 83       	std	Y+4, r25	; 0x04
    8954:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8956:	8d 81       	ldd	r24, Y+5	; 0x05
    8958:	9e 81       	ldd	r25, Y+6	; 0x06
    895a:	01 97       	sbiw	r24, 0x01	; 1
    895c:	9e 83       	std	Y+6, r25	; 0x06
    895e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8960:	8d 81       	ldd	r24, Y+5	; 0x05
    8962:	9e 81       	ldd	r25, Y+6	; 0x06
    8964:	00 97       	sbiw	r24, 0x00	; 0
    8966:	69 f7       	brne	.-38     	; 0x8942 <left_half_move+0x1aa>
    8968:	14 c0       	rjmp	.+40     	; 0x8992 <left_half_move+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    896a:	6f 81       	ldd	r22, Y+7	; 0x07
    896c:	78 85       	ldd	r23, Y+8	; 0x08
    896e:	89 85       	ldd	r24, Y+9	; 0x09
    8970:	9a 85       	ldd	r25, Y+10	; 0x0a
    8972:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    8976:	dc 01       	movw	r26, r24
    8978:	cb 01       	movw	r24, r22
    897a:	9e 83       	std	Y+6, r25	; 0x06
    897c:	8d 83       	std	Y+5, r24	; 0x05
    897e:	8d 81       	ldd	r24, Y+5	; 0x05
    8980:	9e 81       	ldd	r25, Y+6	; 0x06
    8982:	9a 83       	std	Y+2, r25	; 0x02
    8984:	89 83       	std	Y+1, r24	; 0x01
    8986:	89 81       	ldd	r24, Y+1	; 0x01
    8988:	9a 81       	ldd	r25, Y+2	; 0x02
    898a:	01 97       	sbiw	r24, 0x01	; 1
    898c:	f1 f7       	brne	.-4      	; 0x898a <left_half_move+0x1f2>
    898e:	9a 83       	std	Y+2, r25	; 0x02
    8990:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    8992:	6c 96       	adiw	r28, 0x1c	; 28
    8994:	0f b6       	in	r0, 0x3f	; 63
    8996:	f8 94       	cli
    8998:	de bf       	out	0x3e, r29	; 62
    899a:	0f be       	out	0x3f, r0	; 63
    899c:	cd bf       	out	0x3d, r28	; 61
    899e:	cf 91       	pop	r28
    89a0:	df 91       	pop	r29
    89a2:	08 95       	ret

000089a4 <check_length_CAR>:
uint8 check_length_CAR(void)
{
    89a4:	af 92       	push	r10
    89a6:	bf 92       	push	r11
    89a8:	cf 92       	push	r12
    89aa:	df 92       	push	r13
    89ac:	ef 92       	push	r14
    89ae:	ff 92       	push	r15
    89b0:	0f 93       	push	r16
    89b2:	1f 93       	push	r17
    89b4:	df 93       	push	r29
    89b6:	cf 93       	push	r28
    89b8:	cd b7       	in	r28, 0x3d	; 61
    89ba:	de b7       	in	r29, 0x3e	; 62
    89bc:	62 97       	sbiw	r28, 0x12	; 18
    89be:	0f b6       	in	r0, 0x3f	; 63
    89c0:	f8 94       	cli
    89c2:	de bf       	out	0x3e, r29	; 62
    89c4:	0f be       	out	0x3f, r0	; 63
    89c6:	cd bf       	out	0x3d, r28	; 61
	Timer0_Init(Normal_mode,timer0_scale_1024,disconnected);
    89c8:	80 e0       	ldi	r24, 0x00	; 0
    89ca:	67 e0       	ldi	r22, 0x07	; 7
    89cc:	40 e0       	ldi	r20, 0x00	; 0
    89ce:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <Timer0_Init>
	TCNT0=64;
    89d2:	e2 e5       	ldi	r30, 0x52	; 82
    89d4:	f0 e0       	ldi	r31, 0x00	; 0
    89d6:	80 e4       	ldi	r24, 0x40	; 64
    89d8:	80 83       	st	Z, r24
	uint8 flag_check=0;
    89da:	18 8a       	std	Y+16, r1	; 0x10
    uint8 ret_value=1;
    89dc:	81 e0       	ldi	r24, 0x01	; 1
    89de:	8f 87       	std	Y+15, r24	; 0x0f
    89e0:	dd c0       	rjmp	.+442    	; 0x8b9c <check_length_CAR+0x1f8>
//    count_right_front=0;
while((ultra_right_front>=100)&&(count_right_front<300))
	{

			ultra_right_front=Ultrasonic_right_front_Get_Distance();
    89e2:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <Ultrasonic_right_front_Get_Distance>
    89e6:	dc 01       	movw	r26, r24
    89e8:	cb 01       	movw	r24, r22
    89ea:	90 93 e9 02 	sts	0x02E9, r25
    89ee:	80 93 e8 02 	sts	0x02E8, r24
			LCD_vidGotoxy(0,0);
    89f2:	80 e0       	ldi	r24, 0x00	; 0
    89f4:	60 e0       	ldi	r22, 0x00	; 0
    89f6:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
			LCD_vidWriteUnSignedInteger(ultra_right_front);
    89fa:	80 91 e8 02 	lds	r24, 0x02E8
    89fe:	90 91 e9 02 	lds	r25, 0x02E9
    8a02:	5c 01       	movw	r10, r24
    8a04:	cc 24       	eor	r12, r12
    8a06:	dd 24       	eor	r13, r13
    8a08:	ee 24       	eor	r14, r14
    8a0a:	ff 24       	eor	r15, r15
    8a0c:	87 01       	movw	r16, r14
    8a0e:	2a 2d       	mov	r18, r10
    8a10:	3b 2d       	mov	r19, r11
    8a12:	4c 2d       	mov	r20, r12
    8a14:	5d 2d       	mov	r21, r13
    8a16:	6e 2d       	mov	r22, r14
    8a18:	7f 2d       	mov	r23, r15
    8a1a:	80 2f       	mov	r24, r16
    8a1c:	91 2f       	mov	r25, r17
    8a1e:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <LCD_vidWriteUnSignedInteger>
			forward_move();
    8a22:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <forward_move>
			LCD_vidGotoxy(0,1);
    8a26:	80 e0       	ldi	r24, 0x00	; 0
    8a28:	61 e0       	ldi	r22, 0x01	; 1
    8a2a:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
			LCD_vidWriteString(" FIND DISTANCE");
    8a2e:	82 e5       	ldi	r24, 0x52	; 82
    8a30:	91 e0       	ldi	r25, 0x01	; 1
    8a32:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
			LCD_vidSendCommand(1);
    8a36:	81 e0       	ldi	r24, 0x01	; 1
    8a38:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>

			if(count_right_front>=300)
    8a3c:	80 91 e2 02 	lds	r24, 0x02E2
    8a40:	90 91 e3 02 	lds	r25, 0x02E3
    8a44:	21 e0       	ldi	r18, 0x01	; 1
    8a46:	8c 32       	cpi	r24, 0x2C	; 44
    8a48:	92 07       	cpc	r25, r18
    8a4a:	10 f0       	brcs	.+4      	; 0x8a50 <check_length_CAR+0xac>
			{
				flag_check=1;
    8a4c:	81 e0       	ldi	r24, 0x01	; 1
    8a4e:	88 8b       	std	Y+16, r24	; 0x10


			}
			 if(ultra_right_front<100)
    8a50:	80 91 e8 02 	lds	r24, 0x02E8
    8a54:	90 91 e9 02 	lds	r25, 0x02E9
    8a58:	84 36       	cpi	r24, 0x64	; 100
    8a5a:	91 05       	cpc	r25, r1
    8a5c:	10 f4       	brcc	.+4      	; 0x8a62 <check_length_CAR+0xbe>
			{
				flag_check=2;
    8a5e:	82 e0       	ldi	r24, 0x02	; 2
    8a60:	88 8b       	std	Y+16, r24	; 0x10

			}
			 LCD_vidSendCommand(1);
    8a62:	81 e0       	ldi	r24, 0x01	; 1
    8a64:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
			 ultra_right_front=Ultrasonic_right_front_Get_Distance();
    8a68:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <Ultrasonic_right_front_Get_Distance>
    8a6c:	dc 01       	movw	r26, r24
    8a6e:	cb 01       	movw	r24, r22
    8a70:	90 93 e9 02 	sts	0x02E9, r25
    8a74:	80 93 e8 02 	sts	0x02E8, r24
			 LCD_vidGotoxy(0,0);
    8a78:	80 e0       	ldi	r24, 0x00	; 0
    8a7a:	60 e0       	ldi	r22, 0x00	; 0
    8a7c:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
			 LCD_vidWriteUnSignedInteger(ultra_right_front);
    8a80:	80 91 e8 02 	lds	r24, 0x02E8
    8a84:	90 91 e9 02 	lds	r25, 0x02E9
    8a88:	5c 01       	movw	r10, r24
    8a8a:	cc 24       	eor	r12, r12
    8a8c:	dd 24       	eor	r13, r13
    8a8e:	ee 24       	eor	r14, r14
    8a90:	ff 24       	eor	r15, r15
    8a92:	87 01       	movw	r16, r14
    8a94:	2a 2d       	mov	r18, r10
    8a96:	3b 2d       	mov	r19, r11
    8a98:	4c 2d       	mov	r20, r12
    8a9a:	5d 2d       	mov	r21, r13
    8a9c:	6e 2d       	mov	r22, r14
    8a9e:	7f 2d       	mov	r23, r15
    8aa0:	80 2f       	mov	r24, r16
    8aa2:	91 2f       	mov	r25, r17
    8aa4:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <LCD_vidWriteUnSignedInteger>
			 LCD_vidGotoxy(0,1);
    8aa8:	80 e0       	ldi	r24, 0x00	; 0
    8aaa:	61 e0       	ldi	r22, 0x01	; 1
    8aac:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
			 LCD_vidWriteString(" FIND DISTANCE");
    8ab0:	82 e5       	ldi	r24, 0x52	; 82
    8ab2:	91 e0       	ldi	r25, 0x01	; 1
    8ab4:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
    8ab8:	80 e0       	ldi	r24, 0x00	; 0
    8aba:	90 e0       	ldi	r25, 0x00	; 0
    8abc:	aa ef       	ldi	r26, 0xFA	; 250
    8abe:	b3 e4       	ldi	r27, 0x43	; 67
    8ac0:	8b 87       	std	Y+11, r24	; 0x0b
    8ac2:	9c 87       	std	Y+12, r25	; 0x0c
    8ac4:	ad 87       	std	Y+13, r26	; 0x0d
    8ac6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8ac8:	6b 85       	ldd	r22, Y+11	; 0x0b
    8aca:	7c 85       	ldd	r23, Y+12	; 0x0c
    8acc:	8d 85       	ldd	r24, Y+13	; 0x0d
    8ace:	9e 85       	ldd	r25, Y+14	; 0x0e
    8ad0:	20 e0       	ldi	r18, 0x00	; 0
    8ad2:	30 e0       	ldi	r19, 0x00	; 0
    8ad4:	4a ef       	ldi	r20, 0xFA	; 250
    8ad6:	54 e4       	ldi	r21, 0x44	; 68
    8ad8:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    8adc:	dc 01       	movw	r26, r24
    8ade:	cb 01       	movw	r24, r22
    8ae0:	8f 83       	std	Y+7, r24	; 0x07
    8ae2:	98 87       	std	Y+8, r25	; 0x08
    8ae4:	a9 87       	std	Y+9, r26	; 0x09
    8ae6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    8ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    8aea:	78 85       	ldd	r23, Y+8	; 0x08
    8aec:	89 85       	ldd	r24, Y+9	; 0x09
    8aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    8af0:	20 e0       	ldi	r18, 0x00	; 0
    8af2:	30 e0       	ldi	r19, 0x00	; 0
    8af4:	40 e8       	ldi	r20, 0x80	; 128
    8af6:	5f e3       	ldi	r21, 0x3F	; 63
    8af8:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    8afc:	88 23       	and	r24, r24
    8afe:	2c f4       	brge	.+10     	; 0x8b0a <check_length_CAR+0x166>
		__ticks = 1;
    8b00:	81 e0       	ldi	r24, 0x01	; 1
    8b02:	90 e0       	ldi	r25, 0x00	; 0
    8b04:	9e 83       	std	Y+6, r25	; 0x06
    8b06:	8d 83       	std	Y+5, r24	; 0x05
    8b08:	3f c0       	rjmp	.+126    	; 0x8b88 <check_length_CAR+0x1e4>
	else if (__tmp > 65535)
    8b0a:	6f 81       	ldd	r22, Y+7	; 0x07
    8b0c:	78 85       	ldd	r23, Y+8	; 0x08
    8b0e:	89 85       	ldd	r24, Y+9	; 0x09
    8b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    8b12:	20 e0       	ldi	r18, 0x00	; 0
    8b14:	3f ef       	ldi	r19, 0xFF	; 255
    8b16:	4f e7       	ldi	r20, 0x7F	; 127
    8b18:	57 e4       	ldi	r21, 0x47	; 71
    8b1a:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    8b1e:	18 16       	cp	r1, r24
    8b20:	4c f5       	brge	.+82     	; 0x8b74 <check_length_CAR+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8b22:	6b 85       	ldd	r22, Y+11	; 0x0b
    8b24:	7c 85       	ldd	r23, Y+12	; 0x0c
    8b26:	8d 85       	ldd	r24, Y+13	; 0x0d
    8b28:	9e 85       	ldd	r25, Y+14	; 0x0e
    8b2a:	20 e0       	ldi	r18, 0x00	; 0
    8b2c:	30 e0       	ldi	r19, 0x00	; 0
    8b2e:	40 e2       	ldi	r20, 0x20	; 32
    8b30:	51 e4       	ldi	r21, 0x41	; 65
    8b32:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    8b36:	dc 01       	movw	r26, r24
    8b38:	cb 01       	movw	r24, r22
    8b3a:	bc 01       	movw	r22, r24
    8b3c:	cd 01       	movw	r24, r26
    8b3e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    8b42:	dc 01       	movw	r26, r24
    8b44:	cb 01       	movw	r24, r22
    8b46:	9e 83       	std	Y+6, r25	; 0x06
    8b48:	8d 83       	std	Y+5, r24	; 0x05
    8b4a:	0f c0       	rjmp	.+30     	; 0x8b6a <check_length_CAR+0x1c6>
    8b4c:	88 ec       	ldi	r24, 0xC8	; 200
    8b4e:	90 e0       	ldi	r25, 0x00	; 0
    8b50:	9c 83       	std	Y+4, r25	; 0x04
    8b52:	8b 83       	std	Y+3, r24	; 0x03
    8b54:	8b 81       	ldd	r24, Y+3	; 0x03
    8b56:	9c 81       	ldd	r25, Y+4	; 0x04
    8b58:	01 97       	sbiw	r24, 0x01	; 1
    8b5a:	f1 f7       	brne	.-4      	; 0x8b58 <check_length_CAR+0x1b4>
    8b5c:	9c 83       	std	Y+4, r25	; 0x04
    8b5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8b60:	8d 81       	ldd	r24, Y+5	; 0x05
    8b62:	9e 81       	ldd	r25, Y+6	; 0x06
    8b64:	01 97       	sbiw	r24, 0x01	; 1
    8b66:	9e 83       	std	Y+6, r25	; 0x06
    8b68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    8b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    8b6e:	00 97       	sbiw	r24, 0x00	; 0
    8b70:	69 f7       	brne	.-38     	; 0x8b4c <check_length_CAR+0x1a8>
    8b72:	14 c0       	rjmp	.+40     	; 0x8b9c <check_length_CAR+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8b74:	6f 81       	ldd	r22, Y+7	; 0x07
    8b76:	78 85       	ldd	r23, Y+8	; 0x08
    8b78:	89 85       	ldd	r24, Y+9	; 0x09
    8b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    8b7c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    8b80:	dc 01       	movw	r26, r24
    8b82:	cb 01       	movw	r24, r22
    8b84:	9e 83       	std	Y+6, r25	; 0x06
    8b86:	8d 83       	std	Y+5, r24	; 0x05
    8b88:	8d 81       	ldd	r24, Y+5	; 0x05
    8b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    8b8c:	9a 83       	std	Y+2, r25	; 0x02
    8b8e:	89 83       	std	Y+1, r24	; 0x01
    8b90:	89 81       	ldd	r24, Y+1	; 0x01
    8b92:	9a 81       	ldd	r25, Y+2	; 0x02
    8b94:	01 97       	sbiw	r24, 0x01	; 1
    8b96:	f1 f7       	brne	.-4      	; 0x8b94 <check_length_CAR+0x1f0>
    8b98:	9a 83       	std	Y+2, r25	; 0x02
    8b9a:	89 83       	std	Y+1, r24	; 0x01
	Timer0_Init(Normal_mode,timer0_scale_1024,disconnected);
	TCNT0=64;
	uint8 flag_check=0;
    uint8 ret_value=1;
//    count_right_front=0;
while((ultra_right_front>=100)&&(count_right_front<300))
    8b9c:	80 91 e8 02 	lds	r24, 0x02E8
    8ba0:	90 91 e9 02 	lds	r25, 0x02E9
    8ba4:	84 36       	cpi	r24, 0x64	; 100
    8ba6:	91 05       	cpc	r25, r1
    8ba8:	48 f0       	brcs	.+18     	; 0x8bbc <check_length_CAR+0x218>
    8baa:	80 91 e2 02 	lds	r24, 0x02E2
    8bae:	90 91 e3 02 	lds	r25, 0x02E3
    8bb2:	31 e0       	ldi	r19, 0x01	; 1
    8bb4:	8c 32       	cpi	r24, 0x2C	; 44
    8bb6:	93 07       	cpc	r25, r19
    8bb8:	08 f4       	brcc	.+2      	; 0x8bbc <check_length_CAR+0x218>
    8bba:	13 cf       	rjmp	.-474    	; 0x89e2 <check_length_CAR+0x3e>
			 LCD_vidGotoxy(0,1);
			 LCD_vidWriteString(" FIND DISTANCE");
			 _delay_ms(500);

     }
    STOP_CAR();
    8bbc:	0e 94 2b 40 	call	0x8056	; 0x8056 <STOP_CAR>
    LCD_vidSendCommand(1);
    8bc0:	81 e0       	ldi	r24, 0x01	; 1
    8bc2:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <LCD_vidSendCommand>
	LCD_vidGotoxy(0,1);
    8bc6:	80 e0       	ldi	r24, 0x00	; 0
    8bc8:	61 e0       	ldi	r22, 0x01	; 1
    8bca:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
	LCD_vidWriteString("DISTANCE FOUND");
    8bce:	81 e6       	ldi	r24, 0x61	; 97
    8bd0:	91 e0       	ldi	r25, 0x01	; 1
    8bd2:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
	LCD_vidGotoxy(0,0);
    8bd6:	80 e0       	ldi	r24, 0x00	; 0
    8bd8:	60 e0       	ldi	r22, 0x00	; 0
    8bda:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
	LCD_vidWriteUnSignedInteger(count_right_front);
    8bde:	80 91 e2 02 	lds	r24, 0x02E2
    8be2:	90 91 e3 02 	lds	r25, 0x02E3
    8be6:	5c 01       	movw	r10, r24
    8be8:	cc 24       	eor	r12, r12
    8bea:	dd 24       	eor	r13, r13
    8bec:	ee 24       	eor	r14, r14
    8bee:	ff 24       	eor	r15, r15
    8bf0:	87 01       	movw	r16, r14
    8bf2:	2a 2d       	mov	r18, r10
    8bf4:	3b 2d       	mov	r19, r11
    8bf6:	4c 2d       	mov	r20, r12
    8bf8:	5d 2d       	mov	r21, r13
    8bfa:	6e 2d       	mov	r22, r14
    8bfc:	7f 2d       	mov	r23, r15
    8bfe:	80 2f       	mov	r24, r16
    8c00:	91 2f       	mov	r25, r17
    8c02:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <LCD_vidWriteUnSignedInteger>

switch(flag_check)
    8c06:	88 89       	ldd	r24, Y+16	; 0x10
    8c08:	28 2f       	mov	r18, r24
    8c0a:	30 e0       	ldi	r19, 0x00	; 0
    8c0c:	3a 8b       	std	Y+18, r19	; 0x12
    8c0e:	29 8b       	std	Y+17, r18	; 0x11
    8c10:	89 89       	ldd	r24, Y+17	; 0x11
    8c12:	9a 89       	ldd	r25, Y+18	; 0x12
    8c14:	81 30       	cpi	r24, 0x01	; 1
    8c16:	91 05       	cpc	r25, r1
    8c18:	39 f0       	breq	.+14     	; 0x8c28 <check_length_CAR+0x284>
    8c1a:	29 89       	ldd	r18, Y+17	; 0x11
    8c1c:	3a 89       	ldd	r19, Y+18	; 0x12
    8c1e:	22 30       	cpi	r18, 0x02	; 2
    8c20:	31 05       	cpc	r19, r1
    8c22:	09 f4       	brne	.+2      	; 0x8c26 <check_length_CAR+0x282>
    8c24:	53 c0       	rjmp	.+166    	; 0x8ccc <check_length_CAR+0x328>
    8c26:	53 c0       	rjmp	.+166    	; 0x8cce <check_length_CAR+0x32a>
{
//case 1 if length of car is found
case 1: STOP_CAR();
    8c28:	0e 94 2b 40 	call	0x8056	; 0x8056 <STOP_CAR>
        //initialize counter to count the distance
        count_right_front=0;
    8c2c:	10 92 e3 02 	sts	0x02E3, r1
    8c30:	10 92 e2 02 	sts	0x02E2, r1
        Timer0_Init(Normal_mode,timer0_scale_1024,disconnected);
    8c34:	80 e0       	ldi	r24, 0x00	; 0
    8c36:	67 e0       	ldi	r22, 0x07	; 7
    8c38:	40 e0       	ldi	r20, 0x00	; 0
    8c3a:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <Timer0_Init>
        TCNT0=64;
    8c3e:	e2 e5       	ldi	r30, 0x52	; 82
    8c40:	f0 e0       	ldi	r31, 0x00	; 0
    8c42:	80 e4       	ldi	r24, 0x40	; 64
    8c44:	80 83       	st	Z, r24
    8c46:	22 c0       	rjmp	.+68     	; 0x8c8c <check_length_CAR+0x2e8>
        //mshena nafs el car length two

        while(count_right_front<300)
        {
        	LCD_vidGotoxy(0,0);
    8c48:	80 e0       	ldi	r24, 0x00	; 0
    8c4a:	60 e0       	ldi	r22, 0x00	; 0
    8c4c:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
        	LCD_vidWriteUnSignedInteger(count_right_front);
    8c50:	80 91 e2 02 	lds	r24, 0x02E2
    8c54:	90 91 e3 02 	lds	r25, 0x02E3
    8c58:	5c 01       	movw	r10, r24
    8c5a:	cc 24       	eor	r12, r12
    8c5c:	dd 24       	eor	r13, r13
    8c5e:	ee 24       	eor	r14, r14
    8c60:	ff 24       	eor	r15, r15
    8c62:	87 01       	movw	r16, r14
    8c64:	2a 2d       	mov	r18, r10
    8c66:	3b 2d       	mov	r19, r11
    8c68:	4c 2d       	mov	r20, r12
    8c6a:	5d 2d       	mov	r21, r13
    8c6c:	6e 2d       	mov	r22, r14
    8c6e:	7f 2d       	mov	r23, r15
    8c70:	80 2f       	mov	r24, r16
    8c72:	91 2f       	mov	r25, r17
    8c74:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <LCD_vidWriteUnSignedInteger>
        	forward_move();
    8c78:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <forward_move>
        	LCD_vidGotoxy(0,0);
    8c7c:	80 e0       	ldi	r24, 0x00	; 0
    8c7e:	60 e0       	ldi	r22, 0x00	; 0
    8c80:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
        	LCD_vidWriteString("     ");
    8c84:	80 e7       	ldi	r24, 0x70	; 112
    8c86:	91 e0       	ldi	r25, 0x01	; 1
    8c88:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
        count_right_front=0;
        Timer0_Init(Normal_mode,timer0_scale_1024,disconnected);
        TCNT0=64;
        //mshena nafs el car length two

        while(count_right_front<300)
    8c8c:	80 91 e2 02 	lds	r24, 0x02E2
    8c90:	90 91 e3 02 	lds	r25, 0x02E3
    8c94:	31 e0       	ldi	r19, 0x01	; 1
    8c96:	8c 32       	cpi	r24, 0x2C	; 44
    8c98:	93 07       	cpc	r25, r19
    8c9a:	b0 f2       	brcs	.-84     	; 0x8c48 <check_length_CAR+0x2a4>
        	LCD_vidWriteUnSignedInteger(count_right_front);
        	forward_move();
        	LCD_vidGotoxy(0,0);
        	LCD_vidWriteString("     ");
        }
        LCD_vidGotoxy(0,1);
    8c9c:	80 e0       	ldi	r24, 0x00	; 0
    8c9e:	61 e0       	ldi	r22, 0x01	; 1
    8ca0:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
        LCD_vidWriteString("             ");
    8ca4:	86 e7       	ldi	r24, 0x76	; 118
    8ca6:	91 e0       	ldi	r25, 0x01	; 1
    8ca8:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
       	LCD_vidGotoxy(0,1);
    8cac:	80 e0       	ldi	r24, 0x00	; 0
    8cae:	61 e0       	ldi	r22, 0x01	; 1
    8cb0:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
       	LCD_vidWriteString("CAR MOVED DISTANCE");
    8cb4:	84 e8       	ldi	r24, 0x84	; 132
    8cb6:	91 e0       	ldi	r25, 0x01	; 1
    8cb8:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
        STOP_CAR();
    8cbc:	0e 94 2b 40 	call	0x8056	; 0x8056 <STOP_CAR>
        Timer0_Init(Normal_mode,timer0_stop,disconnected);
    8cc0:	80 e0       	ldi	r24, 0x00	; 0
    8cc2:	60 e0       	ldi	r22, 0x00	; 0
    8cc4:	40 e0       	ldi	r20, 0x00	; 0
    8cc6:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <Timer0_Init>
    8cca:	01 c0       	rjmp	.+2      	; 0x8cce <check_length_CAR+0x32a>
        break;

case 2://option lawfront
	    ret_value=0;
    8ccc:	1f 86       	std	Y+15, r1	; 0x0f
	  break;

}

return ret_value;
    8cce:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    8cd0:	62 96       	adiw	r28, 0x12	; 18
    8cd2:	0f b6       	in	r0, 0x3f	; 63
    8cd4:	f8 94       	cli
    8cd6:	de bf       	out	0x3e, r29	; 62
    8cd8:	0f be       	out	0x3f, r0	; 63
    8cda:	cd bf       	out	0x3d, r28	; 61
    8cdc:	cf 91       	pop	r28
    8cde:	df 91       	pop	r29
    8ce0:	1f 91       	pop	r17
    8ce2:	0f 91       	pop	r16
    8ce4:	ff 90       	pop	r15
    8ce6:	ef 90       	pop	r14
    8ce8:	df 90       	pop	r13
    8cea:	cf 90       	pop	r12
    8cec:	bf 90       	pop	r11
    8cee:	af 90       	pop	r10
    8cf0:	08 95       	ret

00008cf2 <start_parking>:

void start_parking(void)
{
    8cf2:	af 92       	push	r10
    8cf4:	bf 92       	push	r11
    8cf6:	cf 92       	push	r12
    8cf8:	df 92       	push	r13
    8cfa:	ef 92       	push	r14
    8cfc:	ff 92       	push	r15
    8cfe:	0f 93       	push	r16
    8d00:	1f 93       	push	r17
    8d02:	df 93       	push	r29
    8d04:	cf 93       	push	r28
    8d06:	cd b7       	in	r28, 0x3d	; 61
    8d08:	de b7       	in	r29, 0x3e	; 62
    8d0a:	6d 97       	sbiw	r28, 0x1d	; 29
    8d0c:	0f b6       	in	r0, 0x3f	; 63
    8d0e:	f8 94       	cli
    8d10:	de bf       	out	0x3e, r29	; 62
    8d12:	0f be       	out	0x3f, r0	; 63
    8d14:	cd bf       	out	0x3d, r28	; 61
	uint8 k=0;
    8d16:	1d 8e       	std	Y+29, r1	; 0x1d
	for(k=0;k<4;k++)
    8d18:	1d 8e       	std	Y+29, r1	; 0x1d
    8d1a:	15 c0       	rjmp	.+42     	; 0x8d46 <start_parking+0x54>
	{
		right_move();
    8d1c:	0e 94 ba 40 	call	0x8174	; 0x8174 <right_move>
		LCD_vidGotoxy(0,1);
    8d20:	80 e0       	ldi	r24, 0x00	; 0
    8d22:	61 e0       	ldi	r22, 0x01	; 1
    8d24:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
	    LCD_vidWriteString("           ");
    8d28:	87 e9       	ldi	r24, 0x97	; 151
    8d2a:	91 e0       	ldi	r25, 0x01	; 1
    8d2c:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
	    LCD_vidGotoxy(0,1);
    8d30:	80 e0       	ldi	r24, 0x00	; 0
    8d32:	61 e0       	ldi	r22, 0x01	; 1
    8d34:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
		LCD_vidWriteString("RIGHT MOVE");
    8d38:	83 ea       	ldi	r24, 0xA3	; 163
    8d3a:	91 e0       	ldi	r25, 0x01	; 1
    8d3c:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
}

void start_parking(void)
{
	uint8 k=0;
	for(k=0;k<4;k++)
    8d40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8d42:	8f 5f       	subi	r24, 0xFF	; 255
    8d44:	8d 8f       	std	Y+29, r24	; 0x1d
    8d46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8d48:	84 30       	cpi	r24, 0x04	; 4
    8d4a:	40 f3       	brcs	.-48     	; 0x8d1c <start_parking+0x2a>
	    LCD_vidWriteString("           ");
	    LCD_vidGotoxy(0,1);
		LCD_vidWriteString("RIGHT MOVE");
	}

	 count_back=0;
    8d4c:	10 92 e5 02 	sts	0x02E5, r1
    8d50:	10 92 e4 02 	sts	0x02E4, r1
	 Timer0_Init(Normal_mode,timer0_scale_1024,disconnected);
    8d54:	80 e0       	ldi	r24, 0x00	; 0
    8d56:	67 e0       	ldi	r22, 0x07	; 7
    8d58:	40 e0       	ldi	r20, 0x00	; 0
    8d5a:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <Timer0_Init>
	 TCNT0=0;
    8d5e:	e2 e5       	ldi	r30, 0x52	; 82
    8d60:	f0 e0       	ldi	r31, 0x00	; 0
    8d62:	10 82       	st	Z, r1
	 count_back_flag=1;
    8d64:	81 e0       	ldi	r24, 0x01	; 1
    8d66:	80 93 ee 02 	sts	0x02EE, r24
    8d6a:	22 c0       	rjmp	.+68     	; 0x8db0 <start_parking+0xbe>
	 while(count_back<60)
	 {
		 backward_move();
    8d6c:	0e 94 25 3f 	call	0x7e4a	; 0x7e4a <backward_move>
		 LCD_vidGotoxy(0,0);
    8d70:	80 e0       	ldi	r24, 0x00	; 0
    8d72:	60 e0       	ldi	r22, 0x00	; 0
    8d74:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
		 LCD_vidWriteString("        ");
    8d78:	8e ea       	ldi	r24, 0xAE	; 174
    8d7a:	91 e0       	ldi	r25, 0x01	; 1
    8d7c:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
		 LCD_vidGotoxy(0,0);
    8d80:	80 e0       	ldi	r24, 0x00	; 0
    8d82:	60 e0       	ldi	r22, 0x00	; 0
    8d84:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
	     LCD_vidWriteUnSignedInteger(count_back);
    8d88:	80 91 e4 02 	lds	r24, 0x02E4
    8d8c:	90 91 e5 02 	lds	r25, 0x02E5
    8d90:	5c 01       	movw	r10, r24
    8d92:	cc 24       	eor	r12, r12
    8d94:	dd 24       	eor	r13, r13
    8d96:	ee 24       	eor	r14, r14
    8d98:	ff 24       	eor	r15, r15
    8d9a:	87 01       	movw	r16, r14
    8d9c:	2a 2d       	mov	r18, r10
    8d9e:	3b 2d       	mov	r19, r11
    8da0:	4c 2d       	mov	r20, r12
    8da2:	5d 2d       	mov	r21, r13
    8da4:	6e 2d       	mov	r22, r14
    8da6:	7f 2d       	mov	r23, r15
    8da8:	80 2f       	mov	r24, r16
    8daa:	91 2f       	mov	r25, r17
    8dac:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <LCD_vidWriteUnSignedInteger>

	 count_back=0;
	 Timer0_Init(Normal_mode,timer0_scale_1024,disconnected);
	 TCNT0=0;
	 count_back_flag=1;
	 while(count_back<60)
    8db0:	80 91 e4 02 	lds	r24, 0x02E4
    8db4:	90 91 e5 02 	lds	r25, 0x02E5
    8db8:	8c 33       	cpi	r24, 0x3C	; 60
    8dba:	91 05       	cpc	r25, r1
    8dbc:	b8 f2       	brcs	.-82     	; 0x8d6c <start_parking+0x7a>
		 LCD_vidWriteString("        ");
		 LCD_vidGotoxy(0,0);
	     LCD_vidWriteUnSignedInteger(count_back);
	 }

	 STOP_CAR();
    8dbe:	0e 94 2b 40 	call	0x8056	; 0x8056 <STOP_CAR>
	 for(k=0;k<4;k++)
    8dc2:	1d 8e       	std	Y+29, r1	; 0x1d
    8dc4:	15 c0       	rjmp	.+42     	; 0x8df0 <start_parking+0xfe>
	 	{
		    left_move();
    8dc6:	0e 94 c6 42 	call	0x858c	; 0x858c <left_move>
	 		LCD_vidGotoxy(0,1);
    8dca:	80 e0       	ldi	r24, 0x00	; 0
    8dcc:	61 e0       	ldi	r22, 0x01	; 1
    8dce:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
	 	    LCD_vidWriteString("           ");
    8dd2:	87 e9       	ldi	r24, 0x97	; 151
    8dd4:	91 e0       	ldi	r25, 0x01	; 1
    8dd6:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
	 	    LCD_vidGotoxy(0,1);
    8dda:	80 e0       	ldi	r24, 0x00	; 0
    8ddc:	61 e0       	ldi	r22, 0x01	; 1
    8dde:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
	 		LCD_vidWriteString("left MOVE");
    8de2:	87 eb       	ldi	r24, 0xB7	; 183
    8de4:	91 e0       	ldi	r25, 0x01	; 1
    8de6:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
		 LCD_vidGotoxy(0,0);
	     LCD_vidWriteUnSignedInteger(count_back);
	 }

	 STOP_CAR();
	 for(k=0;k<4;k++)
    8dea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8dec:	8f 5f       	subi	r24, 0xFF	; 255
    8dee:	8d 8f       	std	Y+29, r24	; 0x1d
    8df0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8df2:	84 30       	cpi	r24, 0x04	; 4
    8df4:	40 f3       	brcs	.-48     	; 0x8dc6 <start_parking+0xd4>
	 		LCD_vidGotoxy(0,1);
	 	    LCD_vidWriteString("           ");
	 	    LCD_vidGotoxy(0,1);
	 		LCD_vidWriteString("left MOVE");
	 	}
	 STOP_CAR();
    8df6:	0e 94 2b 40 	call	0x8056	; 0x8056 <STOP_CAR>
    8dfa:	9c c0       	rjmp	.+312    	; 0x8f34 <start_parking+0x242>
	 while( ultra_back>15)
	 {

		 ultra_back=Ultrasonic_back_Get_Distance();
    8dfc:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <Ultrasonic_back_Get_Distance>
    8e00:	dc 01       	movw	r26, r24
    8e02:	cb 01       	movw	r24, r22
    8e04:	90 93 eb 02 	sts	0x02EB, r25
    8e08:	80 93 ea 02 	sts	0x02EA, r24
		 LCD_vidGotoxy(0,0);
    8e0c:	80 e0       	ldi	r24, 0x00	; 0
    8e0e:	60 e0       	ldi	r22, 0x00	; 0
    8e10:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
	     LCD_vidWriteUnSignedInteger(ultra_back);
    8e14:	80 91 ea 02 	lds	r24, 0x02EA
    8e18:	90 91 eb 02 	lds	r25, 0x02EB
    8e1c:	5c 01       	movw	r10, r24
    8e1e:	cc 24       	eor	r12, r12
    8e20:	dd 24       	eor	r13, r13
    8e22:	ee 24       	eor	r14, r14
    8e24:	ff 24       	eor	r15, r15
    8e26:	87 01       	movw	r16, r14
    8e28:	2a 2d       	mov	r18, r10
    8e2a:	3b 2d       	mov	r19, r11
    8e2c:	4c 2d       	mov	r20, r12
    8e2e:	5d 2d       	mov	r21, r13
    8e30:	6e 2d       	mov	r22, r14
    8e32:	7f 2d       	mov	r23, r15
    8e34:	80 2f       	mov	r24, r16
    8e36:	91 2f       	mov	r25, r17
    8e38:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <LCD_vidWriteUnSignedInteger>
    8e3c:	80 e0       	ldi	r24, 0x00	; 0
    8e3e:	90 e0       	ldi	r25, 0x00	; 0
    8e40:	aa e7       	ldi	r26, 0x7A	; 122
    8e42:	b4 e4       	ldi	r27, 0x44	; 68
    8e44:	89 8f       	std	Y+25, r24	; 0x19
    8e46:	9a 8f       	std	Y+26, r25	; 0x1a
    8e48:	ab 8f       	std	Y+27, r26	; 0x1b
    8e4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8e4c:	69 8d       	ldd	r22, Y+25	; 0x19
    8e4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    8e50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8e52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8e54:	20 e0       	ldi	r18, 0x00	; 0
    8e56:	30 e0       	ldi	r19, 0x00	; 0
    8e58:	4a ef       	ldi	r20, 0xFA	; 250
    8e5a:	54 e4       	ldi	r21, 0x44	; 68
    8e5c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    8e60:	dc 01       	movw	r26, r24
    8e62:	cb 01       	movw	r24, r22
    8e64:	8d 8b       	std	Y+21, r24	; 0x15
    8e66:	9e 8b       	std	Y+22, r25	; 0x16
    8e68:	af 8b       	std	Y+23, r26	; 0x17
    8e6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    8e6c:	6d 89       	ldd	r22, Y+21	; 0x15
    8e6e:	7e 89       	ldd	r23, Y+22	; 0x16
    8e70:	8f 89       	ldd	r24, Y+23	; 0x17
    8e72:	98 8d       	ldd	r25, Y+24	; 0x18
    8e74:	20 e0       	ldi	r18, 0x00	; 0
    8e76:	30 e0       	ldi	r19, 0x00	; 0
    8e78:	40 e8       	ldi	r20, 0x80	; 128
    8e7a:	5f e3       	ldi	r21, 0x3F	; 63
    8e7c:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    8e80:	88 23       	and	r24, r24
    8e82:	2c f4       	brge	.+10     	; 0x8e8e <start_parking+0x19c>
		__ticks = 1;
    8e84:	81 e0       	ldi	r24, 0x01	; 1
    8e86:	90 e0       	ldi	r25, 0x00	; 0
    8e88:	9c 8b       	std	Y+20, r25	; 0x14
    8e8a:	8b 8b       	std	Y+19, r24	; 0x13
    8e8c:	3f c0       	rjmp	.+126    	; 0x8f0c <start_parking+0x21a>
	else if (__tmp > 65535)
    8e8e:	6d 89       	ldd	r22, Y+21	; 0x15
    8e90:	7e 89       	ldd	r23, Y+22	; 0x16
    8e92:	8f 89       	ldd	r24, Y+23	; 0x17
    8e94:	98 8d       	ldd	r25, Y+24	; 0x18
    8e96:	20 e0       	ldi	r18, 0x00	; 0
    8e98:	3f ef       	ldi	r19, 0xFF	; 255
    8e9a:	4f e7       	ldi	r20, 0x7F	; 127
    8e9c:	57 e4       	ldi	r21, 0x47	; 71
    8e9e:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    8ea2:	18 16       	cp	r1, r24
    8ea4:	4c f5       	brge	.+82     	; 0x8ef8 <start_parking+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8ea6:	69 8d       	ldd	r22, Y+25	; 0x19
    8ea8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    8eaa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8eac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8eae:	20 e0       	ldi	r18, 0x00	; 0
    8eb0:	30 e0       	ldi	r19, 0x00	; 0
    8eb2:	40 e2       	ldi	r20, 0x20	; 32
    8eb4:	51 e4       	ldi	r21, 0x41	; 65
    8eb6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    8eba:	dc 01       	movw	r26, r24
    8ebc:	cb 01       	movw	r24, r22
    8ebe:	bc 01       	movw	r22, r24
    8ec0:	cd 01       	movw	r24, r26
    8ec2:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    8ec6:	dc 01       	movw	r26, r24
    8ec8:	cb 01       	movw	r24, r22
    8eca:	9c 8b       	std	Y+20, r25	; 0x14
    8ecc:	8b 8b       	std	Y+19, r24	; 0x13
    8ece:	0f c0       	rjmp	.+30     	; 0x8eee <start_parking+0x1fc>
    8ed0:	88 ec       	ldi	r24, 0xC8	; 200
    8ed2:	90 e0       	ldi	r25, 0x00	; 0
    8ed4:	9a 8b       	std	Y+18, r25	; 0x12
    8ed6:	89 8b       	std	Y+17, r24	; 0x11
    8ed8:	89 89       	ldd	r24, Y+17	; 0x11
    8eda:	9a 89       	ldd	r25, Y+18	; 0x12
    8edc:	01 97       	sbiw	r24, 0x01	; 1
    8ede:	f1 f7       	brne	.-4      	; 0x8edc <start_parking+0x1ea>
    8ee0:	9a 8b       	std	Y+18, r25	; 0x12
    8ee2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8ee4:	8b 89       	ldd	r24, Y+19	; 0x13
    8ee6:	9c 89       	ldd	r25, Y+20	; 0x14
    8ee8:	01 97       	sbiw	r24, 0x01	; 1
    8eea:	9c 8b       	std	Y+20, r25	; 0x14
    8eec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8eee:	8b 89       	ldd	r24, Y+19	; 0x13
    8ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    8ef2:	00 97       	sbiw	r24, 0x00	; 0
    8ef4:	69 f7       	brne	.-38     	; 0x8ed0 <start_parking+0x1de>
    8ef6:	14 c0       	rjmp	.+40     	; 0x8f20 <start_parking+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8ef8:	6d 89       	ldd	r22, Y+21	; 0x15
    8efa:	7e 89       	ldd	r23, Y+22	; 0x16
    8efc:	8f 89       	ldd	r24, Y+23	; 0x17
    8efe:	98 8d       	ldd	r25, Y+24	; 0x18
    8f00:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    8f04:	dc 01       	movw	r26, r24
    8f06:	cb 01       	movw	r24, r22
    8f08:	9c 8b       	std	Y+20, r25	; 0x14
    8f0a:	8b 8b       	std	Y+19, r24	; 0x13
    8f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    8f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    8f10:	98 8b       	std	Y+16, r25	; 0x10
    8f12:	8f 87       	std	Y+15, r24	; 0x0f
    8f14:	8f 85       	ldd	r24, Y+15	; 0x0f
    8f16:	98 89       	ldd	r25, Y+16	; 0x10
    8f18:	01 97       	sbiw	r24, 0x01	; 1
    8f1a:	f1 f7       	brne	.-4      	; 0x8f18 <start_parking+0x226>
    8f1c:	98 8b       	std	Y+16, r25	; 0x10
    8f1e:	8f 87       	std	Y+15, r24	; 0x0f
		 _delay_ms(1000);
		 LCD_vidGotoxy(0,0);
    8f20:	80 e0       	ldi	r24, 0x00	; 0
    8f22:	60 e0       	ldi	r22, 0x00	; 0
    8f24:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
		 LCD_vidWriteString("      ");
    8f28:	81 ec       	ldi	r24, 0xC1	; 193
    8f2a:	91 e0       	ldi	r25, 0x01	; 1
    8f2c:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
		 backward_move();
    8f30:	0e 94 25 3f 	call	0x7e4a	; 0x7e4a <backward_move>
	 	    LCD_vidWriteString("           ");
	 	    LCD_vidGotoxy(0,1);
	 		LCD_vidWriteString("left MOVE");
	 	}
	 STOP_CAR();
	 while( ultra_back>15)
    8f34:	80 91 ea 02 	lds	r24, 0x02EA
    8f38:	90 91 eb 02 	lds	r25, 0x02EB
    8f3c:	80 31       	cpi	r24, 0x10	; 16
    8f3e:	91 05       	cpc	r25, r1
    8f40:	08 f0       	brcs	.+2      	; 0x8f44 <start_parking+0x252>
    8f42:	5c cf       	rjmp	.-328    	; 0x8dfc <start_parking+0x10a>
		 _delay_ms(1000);
		 LCD_vidGotoxy(0,0);
		 LCD_vidWriteString("      ");
		 backward_move();
	 }
	 LCD_vidGotoxy(0,0);
    8f44:	80 e0       	ldi	r24, 0x00	; 0
    8f46:	60 e0       	ldi	r22, 0x00	; 0
    8f48:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
	 LCD_vidWriteString("      ");
    8f4c:	81 ec       	ldi	r24, 0xC1	; 193
    8f4e:	91 e0       	ldi	r25, 0x01	; 1
    8f50:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
	 LCD_vidGotoxy(0,0);
    8f54:	80 e0       	ldi	r24, 0x00	; 0
    8f56:	60 e0       	ldi	r22, 0x00	; 0
    8f58:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
	 LCD_vidWriteUnSignedInteger(count_back);
    8f5c:	80 91 e4 02 	lds	r24, 0x02E4
    8f60:	90 91 e5 02 	lds	r25, 0x02E5
    8f64:	5c 01       	movw	r10, r24
    8f66:	cc 24       	eor	r12, r12
    8f68:	dd 24       	eor	r13, r13
    8f6a:	ee 24       	eor	r14, r14
    8f6c:	ff 24       	eor	r15, r15
    8f6e:	87 01       	movw	r16, r14
    8f70:	2a 2d       	mov	r18, r10
    8f72:	3b 2d       	mov	r19, r11
    8f74:	4c 2d       	mov	r20, r12
    8f76:	5d 2d       	mov	r21, r13
    8f78:	6e 2d       	mov	r22, r14
    8f7a:	7f 2d       	mov	r23, r15
    8f7c:	80 2f       	mov	r24, r16
    8f7e:	91 2f       	mov	r25, r17
    8f80:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <LCD_vidWriteUnSignedInteger>
	 STOP_CAR();
    8f84:	0e 94 2b 40 	call	0x8056	; 0x8056 <STOP_CAR>
	 right_move();
    8f88:	0e 94 ba 40 	call	0x8174	; 0x8174 <right_move>
	 STOP_CAR();
    8f8c:	0e 94 2b 40 	call	0x8056	; 0x8056 <STOP_CAR>
     ultra_front=Ultrasonic_front_Get_Distance();
    8f90:	0e 94 91 25 	call	0x4b22	; 0x4b22 <Ultrasonic_front_Get_Distance>
    8f94:	dc 01       	movw	r26, r24
    8f96:	cb 01       	movw	r24, r22
    8f98:	90 93 ed 02 	sts	0x02ED, r25
    8f9c:	80 93 ec 02 	sts	0x02EC, r24
     LCD_vidGotoxy(0,0);
    8fa0:	80 e0       	ldi	r24, 0x00	; 0
    8fa2:	60 e0       	ldi	r22, 0x00	; 0
    8fa4:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
     LCD_vidWriteString("      ");
    8fa8:	81 ec       	ldi	r24, 0xC1	; 193
    8faa:	91 e0       	ldi	r25, 0x01	; 1
    8fac:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
     LCD_vidWriteUnSignedInteger(ultra_front);
    8fb0:	80 91 ec 02 	lds	r24, 0x02EC
    8fb4:	90 91 ed 02 	lds	r25, 0x02ED
    8fb8:	5c 01       	movw	r10, r24
    8fba:	cc 24       	eor	r12, r12
    8fbc:	dd 24       	eor	r13, r13
    8fbe:	ee 24       	eor	r14, r14
    8fc0:	ff 24       	eor	r15, r15
    8fc2:	87 01       	movw	r16, r14
    8fc4:	2a 2d       	mov	r18, r10
    8fc6:	3b 2d       	mov	r19, r11
    8fc8:	4c 2d       	mov	r20, r12
    8fca:	5d 2d       	mov	r21, r13
    8fcc:	6e 2d       	mov	r22, r14
    8fce:	7f 2d       	mov	r23, r15
    8fd0:	80 2f       	mov	r24, r16
    8fd2:	91 2f       	mov	r25, r17
    8fd4:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <LCD_vidWriteUnSignedInteger>
    8fd8:	9c c0       	rjmp	.+312    	; 0x9112 <start_parking+0x420>
     while( ultra_front>25)
    	 {

    		 forward_move();
    8fda:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <forward_move>
    		 ultra_front=Ultrasonic_front_Get_Distance();
    8fde:	0e 94 91 25 	call	0x4b22	; 0x4b22 <Ultrasonic_front_Get_Distance>
    8fe2:	dc 01       	movw	r26, r24
    8fe4:	cb 01       	movw	r24, r22
    8fe6:	90 93 ed 02 	sts	0x02ED, r25
    8fea:	80 93 ec 02 	sts	0x02EC, r24
    8fee:	80 e0       	ldi	r24, 0x00	; 0
    8ff0:	90 e0       	ldi	r25, 0x00	; 0
    8ff2:	aa e7       	ldi	r26, 0x7A	; 122
    8ff4:	b4 e4       	ldi	r27, 0x44	; 68
    8ff6:	8b 87       	std	Y+11, r24	; 0x0b
    8ff8:	9c 87       	std	Y+12, r25	; 0x0c
    8ffa:	ad 87       	std	Y+13, r26	; 0x0d
    8ffc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8ffe:	6b 85       	ldd	r22, Y+11	; 0x0b
    9000:	7c 85       	ldd	r23, Y+12	; 0x0c
    9002:	8d 85       	ldd	r24, Y+13	; 0x0d
    9004:	9e 85       	ldd	r25, Y+14	; 0x0e
    9006:	20 e0       	ldi	r18, 0x00	; 0
    9008:	30 e0       	ldi	r19, 0x00	; 0
    900a:	4a ef       	ldi	r20, 0xFA	; 250
    900c:	54 e4       	ldi	r21, 0x44	; 68
    900e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    9012:	dc 01       	movw	r26, r24
    9014:	cb 01       	movw	r24, r22
    9016:	8f 83       	std	Y+7, r24	; 0x07
    9018:	98 87       	std	Y+8, r25	; 0x08
    901a:	a9 87       	std	Y+9, r26	; 0x09
    901c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    901e:	6f 81       	ldd	r22, Y+7	; 0x07
    9020:	78 85       	ldd	r23, Y+8	; 0x08
    9022:	89 85       	ldd	r24, Y+9	; 0x09
    9024:	9a 85       	ldd	r25, Y+10	; 0x0a
    9026:	20 e0       	ldi	r18, 0x00	; 0
    9028:	30 e0       	ldi	r19, 0x00	; 0
    902a:	40 e8       	ldi	r20, 0x80	; 128
    902c:	5f e3       	ldi	r21, 0x3F	; 63
    902e:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    9032:	88 23       	and	r24, r24
    9034:	2c f4       	brge	.+10     	; 0x9040 <start_parking+0x34e>
		__ticks = 1;
    9036:	81 e0       	ldi	r24, 0x01	; 1
    9038:	90 e0       	ldi	r25, 0x00	; 0
    903a:	9e 83       	std	Y+6, r25	; 0x06
    903c:	8d 83       	std	Y+5, r24	; 0x05
    903e:	3f c0       	rjmp	.+126    	; 0x90be <start_parking+0x3cc>
	else if (__tmp > 65535)
    9040:	6f 81       	ldd	r22, Y+7	; 0x07
    9042:	78 85       	ldd	r23, Y+8	; 0x08
    9044:	89 85       	ldd	r24, Y+9	; 0x09
    9046:	9a 85       	ldd	r25, Y+10	; 0x0a
    9048:	20 e0       	ldi	r18, 0x00	; 0
    904a:	3f ef       	ldi	r19, 0xFF	; 255
    904c:	4f e7       	ldi	r20, 0x7F	; 127
    904e:	57 e4       	ldi	r21, 0x47	; 71
    9050:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    9054:	18 16       	cp	r1, r24
    9056:	4c f5       	brge	.+82     	; 0x90aa <start_parking+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9058:	6b 85       	ldd	r22, Y+11	; 0x0b
    905a:	7c 85       	ldd	r23, Y+12	; 0x0c
    905c:	8d 85       	ldd	r24, Y+13	; 0x0d
    905e:	9e 85       	ldd	r25, Y+14	; 0x0e
    9060:	20 e0       	ldi	r18, 0x00	; 0
    9062:	30 e0       	ldi	r19, 0x00	; 0
    9064:	40 e2       	ldi	r20, 0x20	; 32
    9066:	51 e4       	ldi	r21, 0x41	; 65
    9068:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    906c:	dc 01       	movw	r26, r24
    906e:	cb 01       	movw	r24, r22
    9070:	bc 01       	movw	r22, r24
    9072:	cd 01       	movw	r24, r26
    9074:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    9078:	dc 01       	movw	r26, r24
    907a:	cb 01       	movw	r24, r22
    907c:	9e 83       	std	Y+6, r25	; 0x06
    907e:	8d 83       	std	Y+5, r24	; 0x05
    9080:	0f c0       	rjmp	.+30     	; 0x90a0 <start_parking+0x3ae>
    9082:	88 ec       	ldi	r24, 0xC8	; 200
    9084:	90 e0       	ldi	r25, 0x00	; 0
    9086:	9c 83       	std	Y+4, r25	; 0x04
    9088:	8b 83       	std	Y+3, r24	; 0x03
    908a:	8b 81       	ldd	r24, Y+3	; 0x03
    908c:	9c 81       	ldd	r25, Y+4	; 0x04
    908e:	01 97       	sbiw	r24, 0x01	; 1
    9090:	f1 f7       	brne	.-4      	; 0x908e <start_parking+0x39c>
    9092:	9c 83       	std	Y+4, r25	; 0x04
    9094:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9096:	8d 81       	ldd	r24, Y+5	; 0x05
    9098:	9e 81       	ldd	r25, Y+6	; 0x06
    909a:	01 97       	sbiw	r24, 0x01	; 1
    909c:	9e 83       	std	Y+6, r25	; 0x06
    909e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    90a0:	8d 81       	ldd	r24, Y+5	; 0x05
    90a2:	9e 81       	ldd	r25, Y+6	; 0x06
    90a4:	00 97       	sbiw	r24, 0x00	; 0
    90a6:	69 f7       	brne	.-38     	; 0x9082 <start_parking+0x390>
    90a8:	14 c0       	rjmp	.+40     	; 0x90d2 <start_parking+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    90aa:	6f 81       	ldd	r22, Y+7	; 0x07
    90ac:	78 85       	ldd	r23, Y+8	; 0x08
    90ae:	89 85       	ldd	r24, Y+9	; 0x09
    90b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    90b2:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    90b6:	dc 01       	movw	r26, r24
    90b8:	cb 01       	movw	r24, r22
    90ba:	9e 83       	std	Y+6, r25	; 0x06
    90bc:	8d 83       	std	Y+5, r24	; 0x05
    90be:	8d 81       	ldd	r24, Y+5	; 0x05
    90c0:	9e 81       	ldd	r25, Y+6	; 0x06
    90c2:	9a 83       	std	Y+2, r25	; 0x02
    90c4:	89 83       	std	Y+1, r24	; 0x01
    90c6:	89 81       	ldd	r24, Y+1	; 0x01
    90c8:	9a 81       	ldd	r25, Y+2	; 0x02
    90ca:	01 97       	sbiw	r24, 0x01	; 1
    90cc:	f1 f7       	brne	.-4      	; 0x90ca <start_parking+0x3d8>
    90ce:	9a 83       	std	Y+2, r25	; 0x02
    90d0:	89 83       	std	Y+1, r24	; 0x01
    		 _delay_ms(1000);
    		 LCD_vidGotoxy(0,0);
    90d2:	80 e0       	ldi	r24, 0x00	; 0
    90d4:	60 e0       	ldi	r22, 0x00	; 0
    90d6:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
    		 LCD_vidWriteString("      ");
    90da:	81 ec       	ldi	r24, 0xC1	; 193
    90dc:	91 e0       	ldi	r25, 0x01	; 1
    90de:	0e 94 74 34 	call	0x68e8	; 0x68e8 <LCD_vidWriteString>
    		 LCD_vidGotoxy(0,0);
    90e2:	80 e0       	ldi	r24, 0x00	; 0
    90e4:	60 e0       	ldi	r22, 0x00	; 0
    90e6:	0e 94 26 3a 	call	0x744c	; 0x744c <LCD_vidGotoxy>
    		 LCD_vidWriteUnSignedInteger(ultra_front);
    90ea:	80 91 ec 02 	lds	r24, 0x02EC
    90ee:	90 91 ed 02 	lds	r25, 0x02ED
    90f2:	5c 01       	movw	r10, r24
    90f4:	cc 24       	eor	r12, r12
    90f6:	dd 24       	eor	r13, r13
    90f8:	ee 24       	eor	r14, r14
    90fa:	ff 24       	eor	r15, r15
    90fc:	87 01       	movw	r16, r14
    90fe:	2a 2d       	mov	r18, r10
    9100:	3b 2d       	mov	r19, r11
    9102:	4c 2d       	mov	r20, r12
    9104:	5d 2d       	mov	r21, r13
    9106:	6e 2d       	mov	r22, r14
    9108:	7f 2d       	mov	r23, r15
    910a:	80 2f       	mov	r24, r16
    910c:	91 2f       	mov	r25, r17
    910e:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <LCD_vidWriteUnSignedInteger>
	 STOP_CAR();
     ultra_front=Ultrasonic_front_Get_Distance();
     LCD_vidGotoxy(0,0);
     LCD_vidWriteString("      ");
     LCD_vidWriteUnSignedInteger(ultra_front);
     while( ultra_front>25)
    9112:	80 91 ec 02 	lds	r24, 0x02EC
    9116:	90 91 ed 02 	lds	r25, 0x02ED
    911a:	8a 31       	cpi	r24, 0x1A	; 26
    911c:	91 05       	cpc	r25, r1
    911e:	08 f0       	brcs	.+2      	; 0x9122 <start_parking+0x430>
    9120:	5c cf       	rjmp	.-328    	; 0x8fda <start_parking+0x2e8>
    		 LCD_vidGotoxy(0,0);
    		 LCD_vidWriteString("      ");
    		 LCD_vidGotoxy(0,0);
    		 LCD_vidWriteUnSignedInteger(ultra_front);
    	 }
STOP_CAR();
    9122:	0e 94 2b 40 	call	0x8056	; 0x8056 <STOP_CAR>
DIO_void_Set_Pin_Value(car_control,stop,LOW);
    9126:	84 e0       	ldi	r24, 0x04	; 4
    9128:	62 e0       	ldi	r22, 0x02	; 2
    912a:	40 e0       	ldi	r20, 0x00	; 0
    912c:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>

}
    9130:	6d 96       	adiw	r28, 0x1d	; 29
    9132:	0f b6       	in	r0, 0x3f	; 63
    9134:	f8 94       	cli
    9136:	de bf       	out	0x3e, r29	; 62
    9138:	0f be       	out	0x3f, r0	; 63
    913a:	cd bf       	out	0x3d, r28	; 61
    913c:	cf 91       	pop	r28
    913e:	df 91       	pop	r29
    9140:	1f 91       	pop	r17
    9142:	0f 91       	pop	r16
    9144:	ff 90       	pop	r15
    9146:	ef 90       	pop	r14
    9148:	df 90       	pop	r13
    914a:	cf 90       	pop	r12
    914c:	bf 90       	pop	r11
    914e:	af 90       	pop	r10
    9150:	08 95       	ret

00009152 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
    9152:	1f 92       	push	r1
    9154:	0f 92       	push	r0
    9156:	0f b6       	in	r0, 0x3f	; 63
    9158:	0f 92       	push	r0
    915a:	00 90 5b 00 	lds	r0, 0x005B
    915e:	0f 92       	push	r0
    9160:	11 24       	eor	r1, r1
    9162:	2f 93       	push	r18
    9164:	3f 93       	push	r19
    9166:	4f 93       	push	r20
    9168:	5f 93       	push	r21
    916a:	6f 93       	push	r22
    916c:	7f 93       	push	r23
    916e:	8f 93       	push	r24
    9170:	9f 93       	push	r25
    9172:	af 93       	push	r26
    9174:	bf 93       	push	r27
    9176:	ef 93       	push	r30
    9178:	ff 93       	push	r31
    917a:	df 93       	push	r29
    917c:	cf 93       	push	r28
    917e:	cd b7       	in	r28, 0x3d	; 61
    9180:	de b7       	in	r29, 0x3e	; 62

	count_right_front++,count_back++,count_front++;
    9182:	80 91 e2 02 	lds	r24, 0x02E2
    9186:	90 91 e3 02 	lds	r25, 0x02E3
    918a:	01 96       	adiw	r24, 0x01	; 1
    918c:	90 93 e3 02 	sts	0x02E3, r25
    9190:	80 93 e2 02 	sts	0x02E2, r24
    9194:	80 91 e4 02 	lds	r24, 0x02E4
    9198:	90 91 e5 02 	lds	r25, 0x02E5
    919c:	01 96       	adiw	r24, 0x01	; 1
    919e:	90 93 e5 02 	sts	0x02E5, r25
    91a2:	80 93 e4 02 	sts	0x02E4, r24
    91a6:	80 91 e6 02 	lds	r24, 0x02E6
    91aa:	90 91 e7 02 	lds	r25, 0x02E7
    91ae:	01 96       	adiw	r24, 0x01	; 1
    91b0:	90 93 e7 02 	sts	0x02E7, r25
    91b4:	80 93 e6 02 	sts	0x02E6, r24

	if(count_right_front==300)
    91b8:	80 91 e2 02 	lds	r24, 0x02E2
    91bc:	90 91 e3 02 	lds	r25, 0x02E3
    91c0:	21 e0       	ldi	r18, 0x01	; 1
    91c2:	8c 32       	cpi	r24, 0x2C	; 44
    91c4:	92 07       	cpc	r25, r18
    91c6:	29 f4       	brne	.+10     	; 0x91d2 <__vector_16+0x80>
	{

		Timer0_Init(Normal_mode,timer0_stop,disconnected);
    91c8:	80 e0       	ldi	r24, 0x00	; 0
    91ca:	60 e0       	ldi	r22, 0x00	; 0
    91cc:	40 e0       	ldi	r20, 0x00	; 0
    91ce:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <Timer0_Init>
	}

	if(count_back==60)
    91d2:	80 91 e4 02 	lds	r24, 0x02E4
    91d6:	90 91 e5 02 	lds	r25, 0x02E5
    91da:	8c 33       	cpi	r24, 0x3C	; 60
    91dc:	91 05       	cpc	r25, r1
    91de:	49 f4       	brne	.+18     	; 0x91f2 <__vector_16+0xa0>
		{
		    if(count_back_flag==1)
    91e0:	80 91 ee 02 	lds	r24, 0x02EE
    91e4:	81 30       	cpi	r24, 0x01	; 1
    91e6:	29 f4       	brne	.+10     	; 0x91f2 <__vector_16+0xa0>
		    {
			Timer0_Init(Normal_mode,timer0_stop,disconnected);
    91e8:	80 e0       	ldi	r24, 0x00	; 0
    91ea:	60 e0       	ldi	r22, 0x00	; 0
    91ec:	40 e0       	ldi	r20, 0x00	; 0
    91ee:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <Timer0_Init>

		    }

		}
}
    91f2:	cf 91       	pop	r28
    91f4:	df 91       	pop	r29
    91f6:	ff 91       	pop	r31
    91f8:	ef 91       	pop	r30
    91fa:	bf 91       	pop	r27
    91fc:	af 91       	pop	r26
    91fe:	9f 91       	pop	r25
    9200:	8f 91       	pop	r24
    9202:	7f 91       	pop	r23
    9204:	6f 91       	pop	r22
    9206:	5f 91       	pop	r21
    9208:	4f 91       	pop	r20
    920a:	3f 91       	pop	r19
    920c:	2f 91       	pop	r18
    920e:	0f 90       	pop	r0
    9210:	00 92 5b 00 	sts	0x005B, r0
    9214:	0f 90       	pop	r0
    9216:	0f be       	out	0x3f, r0	; 63
    9218:	0f 90       	pop	r0
    921a:	1f 90       	pop	r1
    921c:	18 95       	reti

0000921e <LCD_LIGHT>:


void LCD_LIGHT(void)
{
    921e:	df 93       	push	r29
    9220:	cf 93       	push	r28
    9222:	cd b7       	in	r28, 0x3d	; 61
    9224:	de b7       	in	r29, 0x3e	; 62
	DIO_void_Set_Pin_Dirction(PORTE_ID,PIN4,OUTPUT);
    9226:	84 e0       	ldi	r24, 0x04	; 4
    9228:	64 e0       	ldi	r22, 0x04	; 4
    922a:	41 e0       	ldi	r20, 0x01	; 1
    922c:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <DIO_void_Set_Pin_Dirction>
	DIO_void_Set_Pin_Value(PORTE_ID,PIN4,OUTPUT);
    9230:	84 e0       	ldi	r24, 0x04	; 4
    9232:	64 e0       	ldi	r22, 0x04	; 4
    9234:	41 e0       	ldi	r20, 0x01	; 1
    9236:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <DIO_void_Set_Pin_Value>
}
    923a:	cf 91       	pop	r28
    923c:	df 91       	pop	r29
    923e:	08 95       	ret

00009240 <main>:
#include"APP_SERV.h"

int main(void)
{
    9240:	df 93       	push	r29
    9242:	cf 93       	push	r28
    9244:	cd b7       	in	r28, 0x3d	; 61
    9246:	de b7       	in	r29, 0x3e	; 62

project_init();
    9248:	0e 94 9d 3c 	call	0x793a	; 0x793a <project_init>


while(1)
{
	autopark();
    924c:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <autopark>
    9250:	fd cf       	rjmp	.-6      	; 0x924c <main+0xc>

00009252 <__udivmodsi4>:
    9252:	a1 e2       	ldi	r26, 0x21	; 33
    9254:	1a 2e       	mov	r1, r26
    9256:	aa 1b       	sub	r26, r26
    9258:	bb 1b       	sub	r27, r27
    925a:	fd 01       	movw	r30, r26
    925c:	0d c0       	rjmp	.+26     	; 0x9278 <__udivmodsi4_ep>

0000925e <__udivmodsi4_loop>:
    925e:	aa 1f       	adc	r26, r26
    9260:	bb 1f       	adc	r27, r27
    9262:	ee 1f       	adc	r30, r30
    9264:	ff 1f       	adc	r31, r31
    9266:	a2 17       	cp	r26, r18
    9268:	b3 07       	cpc	r27, r19
    926a:	e4 07       	cpc	r30, r20
    926c:	f5 07       	cpc	r31, r21
    926e:	20 f0       	brcs	.+8      	; 0x9278 <__udivmodsi4_ep>
    9270:	a2 1b       	sub	r26, r18
    9272:	b3 0b       	sbc	r27, r19
    9274:	e4 0b       	sbc	r30, r20
    9276:	f5 0b       	sbc	r31, r21

00009278 <__udivmodsi4_ep>:
    9278:	66 1f       	adc	r22, r22
    927a:	77 1f       	adc	r23, r23
    927c:	88 1f       	adc	r24, r24
    927e:	99 1f       	adc	r25, r25
    9280:	1a 94       	dec	r1
    9282:	69 f7       	brne	.-38     	; 0x925e <__udivmodsi4_loop>
    9284:	60 95       	com	r22
    9286:	70 95       	com	r23
    9288:	80 95       	com	r24
    928a:	90 95       	com	r25
    928c:	9b 01       	movw	r18, r22
    928e:	ac 01       	movw	r20, r24
    9290:	bd 01       	movw	r22, r26
    9292:	cf 01       	movw	r24, r30
    9294:	08 95       	ret

00009296 <__mulsi3>:
    9296:	62 9f       	mul	r22, r18
    9298:	d0 01       	movw	r26, r0
    929a:	73 9f       	mul	r23, r19
    929c:	f0 01       	movw	r30, r0
    929e:	82 9f       	mul	r24, r18
    92a0:	e0 0d       	add	r30, r0
    92a2:	f1 1d       	adc	r31, r1
    92a4:	64 9f       	mul	r22, r20
    92a6:	e0 0d       	add	r30, r0
    92a8:	f1 1d       	adc	r31, r1
    92aa:	92 9f       	mul	r25, r18
    92ac:	f0 0d       	add	r31, r0
    92ae:	83 9f       	mul	r24, r19
    92b0:	f0 0d       	add	r31, r0
    92b2:	74 9f       	mul	r23, r20
    92b4:	f0 0d       	add	r31, r0
    92b6:	65 9f       	mul	r22, r21
    92b8:	f0 0d       	add	r31, r0
    92ba:	99 27       	eor	r25, r25
    92bc:	72 9f       	mul	r23, r18
    92be:	b0 0d       	add	r27, r0
    92c0:	e1 1d       	adc	r30, r1
    92c2:	f9 1f       	adc	r31, r25
    92c4:	63 9f       	mul	r22, r19
    92c6:	b0 0d       	add	r27, r0
    92c8:	e1 1d       	adc	r30, r1
    92ca:	f9 1f       	adc	r31, r25
    92cc:	bd 01       	movw	r22, r26
    92ce:	cf 01       	movw	r24, r30
    92d0:	11 24       	eor	r1, r1
    92d2:	08 95       	ret

000092d4 <__prologue_saves__>:
    92d4:	2f 92       	push	r2
    92d6:	3f 92       	push	r3
    92d8:	4f 92       	push	r4
    92da:	5f 92       	push	r5
    92dc:	6f 92       	push	r6
    92de:	7f 92       	push	r7
    92e0:	8f 92       	push	r8
    92e2:	9f 92       	push	r9
    92e4:	af 92       	push	r10
    92e6:	bf 92       	push	r11
    92e8:	cf 92       	push	r12
    92ea:	df 92       	push	r13
    92ec:	ef 92       	push	r14
    92ee:	ff 92       	push	r15
    92f0:	0f 93       	push	r16
    92f2:	1f 93       	push	r17
    92f4:	cf 93       	push	r28
    92f6:	df 93       	push	r29
    92f8:	cd b7       	in	r28, 0x3d	; 61
    92fa:	de b7       	in	r29, 0x3e	; 62
    92fc:	ca 1b       	sub	r28, r26
    92fe:	db 0b       	sbc	r29, r27
    9300:	0f b6       	in	r0, 0x3f	; 63
    9302:	f8 94       	cli
    9304:	de bf       	out	0x3e, r29	; 62
    9306:	0f be       	out	0x3f, r0	; 63
    9308:	cd bf       	out	0x3d, r28	; 61
    930a:	09 94       	ijmp

0000930c <__epilogue_restores__>:
    930c:	2a 88       	ldd	r2, Y+18	; 0x12
    930e:	39 88       	ldd	r3, Y+17	; 0x11
    9310:	48 88       	ldd	r4, Y+16	; 0x10
    9312:	5f 84       	ldd	r5, Y+15	; 0x0f
    9314:	6e 84       	ldd	r6, Y+14	; 0x0e
    9316:	7d 84       	ldd	r7, Y+13	; 0x0d
    9318:	8c 84       	ldd	r8, Y+12	; 0x0c
    931a:	9b 84       	ldd	r9, Y+11	; 0x0b
    931c:	aa 84       	ldd	r10, Y+10	; 0x0a
    931e:	b9 84       	ldd	r11, Y+9	; 0x09
    9320:	c8 84       	ldd	r12, Y+8	; 0x08
    9322:	df 80       	ldd	r13, Y+7	; 0x07
    9324:	ee 80       	ldd	r14, Y+6	; 0x06
    9326:	fd 80       	ldd	r15, Y+5	; 0x05
    9328:	0c 81       	ldd	r16, Y+4	; 0x04
    932a:	1b 81       	ldd	r17, Y+3	; 0x03
    932c:	aa 81       	ldd	r26, Y+2	; 0x02
    932e:	b9 81       	ldd	r27, Y+1	; 0x01
    9330:	ce 0f       	add	r28, r30
    9332:	d1 1d       	adc	r29, r1
    9334:	0f b6       	in	r0, 0x3f	; 63
    9336:	f8 94       	cli
    9338:	de bf       	out	0x3e, r29	; 62
    933a:	0f be       	out	0x3f, r0	; 63
    933c:	cd bf       	out	0x3d, r28	; 61
    933e:	ed 01       	movw	r28, r26
    9340:	08 95       	ret

00009342 <_exit>:
    9342:	f8 94       	cli

00009344 <__stop_program>:
    9344:	ff cf       	rjmp	.-2      	; 0x9344 <__stop_program>
