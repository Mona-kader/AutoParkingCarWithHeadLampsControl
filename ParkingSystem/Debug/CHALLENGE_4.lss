
CHALLENGE_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f4  00800100  0000ac10  0000aca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000ac10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006b  008002f4  008002f4  0000ae98  2**0
                  ALLOC
  3 .stab         00007914  00000000  00000000  0000ae98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004302  00000000  00000000  000127ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00016aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020f  00000000  00000000  00016c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000030e2  00000000  00000000  00016e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000156a  00000000  00000000  00019f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014dd  00000000  00000000  0001b4c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001c9a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000376  00000000  00000000  0001cb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000022ac  00000000  00000000  0001cefe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  0001f1aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 b5 2b 	jmp	0x576a	; 0x576a <__vector_11>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 05 2c 	jmp	0x580a	; 0x580a <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 31 55 	jmp	0xaa62	; 0xaa62 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e1       	ldi	r30, 0x10	; 16
      a0:	fc ea       	ldi	r31, 0xAC	; 172
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 3f       	cpi	r26, 0xF4	; 244
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	13 e0       	ldi	r17, 0x03	; 3
      b4:	a4 ef       	ldi	r26, 0xF4	; 244
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 35       	cpi	r26, 0x5F	; 95
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 70 55 	call	0xaae0	; 0xaae0 <main>
      c6:	0c 94 06 56 	jmp	0xac0c	; 0xac0c <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__ashldi3>:
      ce:	ef 92       	push	r14
      d0:	ff 92       	push	r15
      d2:	0f 93       	push	r16
      d4:	df 93       	push	r29
      d6:	cf 93       	push	r28
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	60 97       	sbiw	r28, 0x10	; 16
      de:	0f b6       	in	r0, 0x3f	; 63
      e0:	f8 94       	cli
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	0f be       	out	0x3f, r0	; 63
      e6:	cd bf       	out	0x3d, r28	; 61
      e8:	a8 2f       	mov	r26, r24
      ea:	00 23       	and	r16, r16
      ec:	09 f4       	brne	.+2      	; 0xf0 <__ashldi3+0x22>
      ee:	61 c0       	rjmp	.+194    	; 0x1b2 <__ashldi3+0xe4>
      f0:	7e 01       	movw	r14, r28
      f2:	08 94       	sec
      f4:	e1 1c       	adc	r14, r1
      f6:	f1 1c       	adc	r15, r1
      f8:	88 e0       	ldi	r24, 0x08	; 8
      fa:	f7 01       	movw	r30, r14
      fc:	11 92       	st	Z+, r1
      fe:	8a 95       	dec	r24
     100:	e9 f7       	brne	.-6      	; 0xfc <__ashldi3+0x2e>
     102:	29 83       	std	Y+1, r18	; 0x01
     104:	3a 83       	std	Y+2, r19	; 0x02
     106:	4b 83       	std	Y+3, r20	; 0x03
     108:	5c 83       	std	Y+4, r21	; 0x04
     10a:	6d 83       	std	Y+5, r22	; 0x05
     10c:	7e 83       	std	Y+6, r23	; 0x06
     10e:	af 83       	std	Y+7, r26	; 0x07
     110:	98 87       	std	Y+8, r25	; 0x08
     112:	80 e2       	ldi	r24, 0x20	; 32
     114:	80 1b       	sub	r24, r16
     116:	e8 2f       	mov	r30, r24
     118:	ff 27       	eor	r31, r31
     11a:	e7 fd       	sbrc	r30, 7
     11c:	f0 95       	com	r31
     11e:	49 81       	ldd	r20, Y+1	; 0x01
     120:	5a 81       	ldd	r21, Y+2	; 0x02
     122:	6b 81       	ldd	r22, Y+3	; 0x03
     124:	7c 81       	ldd	r23, Y+4	; 0x04
     126:	18 16       	cp	r1, r24
     128:	84 f0       	brlt	.+32     	; 0x14a <__ashldi3+0x7c>
     12a:	19 86       	std	Y+9, r1	; 0x09
     12c:	1a 86       	std	Y+10, r1	; 0x0a
     12e:	1b 86       	std	Y+11, r1	; 0x0b
     130:	1c 86       	std	Y+12, r1	; 0x0c
     132:	88 27       	eor	r24, r24
     134:	99 27       	eor	r25, r25
     136:	8e 1b       	sub	r24, r30
     138:	9f 0b       	sbc	r25, r31
     13a:	04 c0       	rjmp	.+8      	; 0x144 <__ashldi3+0x76>
     13c:	44 0f       	add	r20, r20
     13e:	55 1f       	adc	r21, r21
     140:	66 1f       	adc	r22, r22
     142:	77 1f       	adc	r23, r23
     144:	8a 95       	dec	r24
     146:	d2 f7       	brpl	.-12     	; 0x13c <__ashldi3+0x6e>
     148:	28 c0       	rjmp	.+80     	; 0x19a <__ashldi3+0xcc>
     14a:	20 2f       	mov	r18, r16
     14c:	33 27       	eor	r19, r19
     14e:	27 fd       	sbrc	r18, 7
     150:	30 95       	com	r19
     152:	db 01       	movw	r26, r22
     154:	ca 01       	movw	r24, r20
     156:	02 2e       	mov	r0, r18
     158:	04 c0       	rjmp	.+8      	; 0x162 <__ashldi3+0x94>
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	aa 1f       	adc	r26, r26
     160:	bb 1f       	adc	r27, r27
     162:	0a 94       	dec	r0
     164:	d2 f7       	brpl	.-12     	; 0x15a <__ashldi3+0x8c>
     166:	89 87       	std	Y+9, r24	; 0x09
     168:	9a 87       	std	Y+10, r25	; 0x0a
     16a:	ab 87       	std	Y+11, r26	; 0x0b
     16c:	bc 87       	std	Y+12, r27	; 0x0c
     16e:	04 c0       	rjmp	.+8      	; 0x178 <__ashldi3+0xaa>
     170:	76 95       	lsr	r23
     172:	67 95       	ror	r22
     174:	57 95       	ror	r21
     176:	47 95       	ror	r20
     178:	ea 95       	dec	r30
     17a:	d2 f7       	brpl	.-12     	; 0x170 <__ashldi3+0xa2>
     17c:	8d 81       	ldd	r24, Y+5	; 0x05
     17e:	9e 81       	ldd	r25, Y+6	; 0x06
     180:	af 81       	ldd	r26, Y+7	; 0x07
     182:	b8 85       	ldd	r27, Y+8	; 0x08
     184:	04 c0       	rjmp	.+8      	; 0x18e <__ashldi3+0xc0>
     186:	88 0f       	add	r24, r24
     188:	99 1f       	adc	r25, r25
     18a:	aa 1f       	adc	r26, r26
     18c:	bb 1f       	adc	r27, r27
     18e:	2a 95       	dec	r18
     190:	d2 f7       	brpl	.-12     	; 0x186 <__ashldi3+0xb8>
     192:	48 2b       	or	r20, r24
     194:	59 2b       	or	r21, r25
     196:	6a 2b       	or	r22, r26
     198:	7b 2b       	or	r23, r27
     19a:	4d 87       	std	Y+13, r20	; 0x0d
     19c:	5e 87       	std	Y+14, r21	; 0x0e
     19e:	6f 87       	std	Y+15, r22	; 0x0f
     1a0:	78 8b       	std	Y+16, r23	; 0x10
     1a2:	29 85       	ldd	r18, Y+9	; 0x09
     1a4:	3a 85       	ldd	r19, Y+10	; 0x0a
     1a6:	4b 85       	ldd	r20, Y+11	; 0x0b
     1a8:	5c 85       	ldd	r21, Y+12	; 0x0c
     1aa:	6d 85       	ldd	r22, Y+13	; 0x0d
     1ac:	7e 85       	ldd	r23, Y+14	; 0x0e
     1ae:	af 85       	ldd	r26, Y+15	; 0x0f
     1b0:	98 89       	ldd	r25, Y+16	; 0x10
     1b2:	8a 2f       	mov	r24, r26
     1b4:	60 96       	adiw	r28, 0x10	; 16
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	f8 94       	cli
     1ba:	de bf       	out	0x3e, r29	; 62
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	cd bf       	out	0x3d, r28	; 61
     1c0:	cf 91       	pop	r28
     1c2:	df 91       	pop	r29
     1c4:	0f 91       	pop	r16
     1c6:	ff 90       	pop	r15
     1c8:	ef 90       	pop	r14
     1ca:	08 95       	ret

000001cc <__fixunssfsi>:
     1cc:	ef 92       	push	r14
     1ce:	ff 92       	push	r15
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	7b 01       	movw	r14, r22
     1d6:	8c 01       	movw	r16, r24
     1d8:	20 e0       	ldi	r18, 0x00	; 0
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	40 e0       	ldi	r20, 0x00	; 0
     1de:	5f e4       	ldi	r21, 0x4F	; 79
     1e0:	0e 94 77 11 	call	0x22ee	; 0x22ee <__gesf2>
     1e4:	88 23       	and	r24, r24
     1e6:	8c f0       	brlt	.+34     	; 0x20a <__fixunssfsi+0x3e>
     1e8:	c8 01       	movw	r24, r16
     1ea:	b7 01       	movw	r22, r14
     1ec:	20 e0       	ldi	r18, 0x00	; 0
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	40 e0       	ldi	r20, 0x00	; 0
     1f2:	5f e4       	ldi	r21, 0x4F	; 79
     1f4:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__subsf3>
     1f8:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__fixsfsi>
     1fc:	9b 01       	movw	r18, r22
     1fe:	ac 01       	movw	r20, r24
     200:	20 50       	subi	r18, 0x00	; 0
     202:	30 40       	sbci	r19, 0x00	; 0
     204:	40 40       	sbci	r20, 0x00	; 0
     206:	50 48       	sbci	r21, 0x80	; 128
     208:	06 c0       	rjmp	.+12     	; 0x216 <__fixunssfsi+0x4a>
     20a:	c8 01       	movw	r24, r16
     20c:	b7 01       	movw	r22, r14
     20e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__fixsfsi>
     212:	9b 01       	movw	r18, r22
     214:	ac 01       	movw	r20, r24
     216:	b9 01       	movw	r22, r18
     218:	ca 01       	movw	r24, r20
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	ff 90       	pop	r15
     220:	ef 90       	pop	r14
     222:	08 95       	ret

00000224 <__udivdi3>:
     224:	ae e5       	ldi	r26, 0x5E	; 94
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	e8 e1       	ldi	r30, 0x18	; 24
     22a:	f1 e0       	ldi	r31, 0x01	; 1
     22c:	0c 94 cf 55 	jmp	0xab9e	; 0xab9e <__prologue_saves__>
     230:	a8 e0       	ldi	r26, 0x08	; 8
     232:	4e 01       	movw	r8, r28
     234:	08 94       	sec
     236:	81 1c       	adc	r8, r1
     238:	91 1c       	adc	r9, r1
     23a:	f4 01       	movw	r30, r8
     23c:	6a 2e       	mov	r6, r26
     23e:	11 92       	st	Z+, r1
     240:	6a 94       	dec	r6
     242:	e9 f7       	brne	.-6      	; 0x23e <__udivdi3+0x1a>
     244:	29 83       	std	Y+1, r18	; 0x01
     246:	3a 83       	std	Y+2, r19	; 0x02
     248:	4b 83       	std	Y+3, r20	; 0x03
     24a:	5c 83       	std	Y+4, r21	; 0x04
     24c:	6d 83       	std	Y+5, r22	; 0x05
     24e:	7e 83       	std	Y+6, r23	; 0x06
     250:	8f 83       	std	Y+7, r24	; 0x07
     252:	98 87       	std	Y+8, r25	; 0x08
     254:	ce 01       	movw	r24, r28
     256:	09 96       	adiw	r24, 0x09	; 9
     258:	fc 01       	movw	r30, r24
     25a:	11 92       	st	Z+, r1
     25c:	aa 95       	dec	r26
     25e:	e9 f7       	brne	.-6      	; 0x25a <__udivdi3+0x36>
     260:	a9 86       	std	Y+9, r10	; 0x09
     262:	ba 86       	std	Y+10, r11	; 0x0a
     264:	cb 86       	std	Y+11, r12	; 0x0b
     266:	dc 86       	std	Y+12, r13	; 0x0c
     268:	ed 86       	std	Y+13, r14	; 0x0d
     26a:	fe 86       	std	Y+14, r15	; 0x0e
     26c:	0f 87       	std	Y+15, r16	; 0x0f
     26e:	18 8b       	std	Y+16, r17	; 0x10
     270:	29 84       	ldd	r2, Y+9	; 0x09
     272:	3a 84       	ldd	r3, Y+10	; 0x0a
     274:	4b 84       	ldd	r4, Y+11	; 0x0b
     276:	5c 84       	ldd	r5, Y+12	; 0x0c
     278:	ed 84       	ldd	r14, Y+13	; 0x0d
     27a:	fe 84       	ldd	r15, Y+14	; 0x0e
     27c:	0f 85       	ldd	r16, Y+15	; 0x0f
     27e:	18 89       	ldd	r17, Y+16	; 0x10
     280:	69 80       	ldd	r6, Y+1	; 0x01
     282:	7a 80       	ldd	r7, Y+2	; 0x02
     284:	8b 80       	ldd	r8, Y+3	; 0x03
     286:	9c 80       	ldd	r9, Y+4	; 0x04
     288:	6d a6       	std	Y+45, r6	; 0x2d
     28a:	7e a6       	std	Y+46, r7	; 0x2e
     28c:	8f a6       	std	Y+47, r8	; 0x2f
     28e:	98 aa       	std	Y+48, r9	; 0x30
     290:	6d 80       	ldd	r6, Y+5	; 0x05
     292:	7e 80       	ldd	r7, Y+6	; 0x06
     294:	8f 80       	ldd	r8, Y+7	; 0x07
     296:	98 84       	ldd	r9, Y+8	; 0x08
     298:	e1 14       	cp	r14, r1
     29a:	f1 04       	cpc	r15, r1
     29c:	01 05       	cpc	r16, r1
     29e:	11 05       	cpc	r17, r1
     2a0:	09 f0       	breq	.+2      	; 0x2a4 <__udivdi3+0x80>
     2a2:	b3 c3       	rjmp	.+1894   	; 0xa0a <__udivdi3+0x7e6>
     2a4:	62 14       	cp	r6, r2
     2a6:	73 04       	cpc	r7, r3
     2a8:	84 04       	cpc	r8, r4
     2aa:	95 04       	cpc	r9, r5
     2ac:	08 f0       	brcs	.+2      	; 0x2b0 <__udivdi3+0x8c>
     2ae:	3d c1       	rjmp	.+634    	; 0x52a <__udivdi3+0x306>
     2b0:	00 e0       	ldi	r16, 0x00	; 0
     2b2:	20 16       	cp	r2, r16
     2b4:	00 e0       	ldi	r16, 0x00	; 0
     2b6:	30 06       	cpc	r3, r16
     2b8:	01 e0       	ldi	r16, 0x01	; 1
     2ba:	40 06       	cpc	r4, r16
     2bc:	00 e0       	ldi	r16, 0x00	; 0
     2be:	50 06       	cpc	r5, r16
     2c0:	88 f4       	brcc	.+34     	; 0x2e4 <__udivdi3+0xc0>
     2c2:	1f ef       	ldi	r17, 0xFF	; 255
     2c4:	21 16       	cp	r2, r17
     2c6:	31 04       	cpc	r3, r1
     2c8:	41 04       	cpc	r4, r1
     2ca:	51 04       	cpc	r5, r1
     2cc:	39 f0       	breq	.+14     	; 0x2dc <__udivdi3+0xb8>
     2ce:	30 f0       	brcs	.+12     	; 0x2dc <__udivdi3+0xb8>
     2d0:	48 e0       	ldi	r20, 0x08	; 8
     2d2:	e4 2e       	mov	r14, r20
     2d4:	f1 2c       	mov	r15, r1
     2d6:	01 2d       	mov	r16, r1
     2d8:	11 2d       	mov	r17, r1
     2da:	18 c0       	rjmp	.+48     	; 0x30c <__udivdi3+0xe8>
     2dc:	ee 24       	eor	r14, r14
     2de:	ff 24       	eor	r15, r15
     2e0:	87 01       	movw	r16, r14
     2e2:	14 c0       	rjmp	.+40     	; 0x30c <__udivdi3+0xe8>
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	22 16       	cp	r2, r18
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	32 06       	cpc	r3, r18
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	42 06       	cpc	r4, r18
     2f0:	21 e0       	ldi	r18, 0x01	; 1
     2f2:	52 06       	cpc	r5, r18
     2f4:	30 f0       	brcs	.+12     	; 0x302 <__udivdi3+0xde>
     2f6:	38 e1       	ldi	r19, 0x18	; 24
     2f8:	e3 2e       	mov	r14, r19
     2fa:	f1 2c       	mov	r15, r1
     2fc:	01 2d       	mov	r16, r1
     2fe:	11 2d       	mov	r17, r1
     300:	05 c0       	rjmp	.+10     	; 0x30c <__udivdi3+0xe8>
     302:	20 e1       	ldi	r18, 0x10	; 16
     304:	e2 2e       	mov	r14, r18
     306:	f1 2c       	mov	r15, r1
     308:	01 2d       	mov	r16, r1
     30a:	11 2d       	mov	r17, r1
     30c:	d2 01       	movw	r26, r4
     30e:	c1 01       	movw	r24, r2
     310:	0e 2c       	mov	r0, r14
     312:	04 c0       	rjmp	.+8      	; 0x31c <__udivdi3+0xf8>
     314:	b6 95       	lsr	r27
     316:	a7 95       	ror	r26
     318:	97 95       	ror	r25
     31a:	87 95       	ror	r24
     31c:	0a 94       	dec	r0
     31e:	d2 f7       	brpl	.-12     	; 0x314 <__udivdi3+0xf0>
     320:	8f 50       	subi	r24, 0x0F	; 15
     322:	9e 4f       	sbci	r25, 0xFE	; 254
     324:	dc 01       	movw	r26, r24
     326:	2c 91       	ld	r18, X
     328:	80 e2       	ldi	r24, 0x20	; 32
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	a0 e0       	ldi	r26, 0x00	; 0
     32e:	b0 e0       	ldi	r27, 0x00	; 0
     330:	8e 19       	sub	r24, r14
     332:	9f 09       	sbc	r25, r15
     334:	a0 0b       	sbc	r26, r16
     336:	b1 0b       	sbc	r27, r17
     338:	7c 01       	movw	r14, r24
     33a:	8d 01       	movw	r16, r26
     33c:	e2 1a       	sub	r14, r18
     33e:	f1 08       	sbc	r15, r1
     340:	01 09       	sbc	r16, r1
     342:	11 09       	sbc	r17, r1
     344:	e1 14       	cp	r14, r1
     346:	f1 04       	cpc	r15, r1
     348:	01 05       	cpc	r16, r1
     34a:	11 05       	cpc	r17, r1
     34c:	a1 f1       	breq	.+104    	; 0x3b6 <__udivdi3+0x192>
     34e:	0e 2c       	mov	r0, r14
     350:	04 c0       	rjmp	.+8      	; 0x35a <__udivdi3+0x136>
     352:	22 0c       	add	r2, r2
     354:	33 1c       	adc	r3, r3
     356:	44 1c       	adc	r4, r4
     358:	55 1c       	adc	r5, r5
     35a:	0a 94       	dec	r0
     35c:	d2 f7       	brpl	.-12     	; 0x352 <__udivdi3+0x12e>
     35e:	a4 01       	movw	r20, r8
     360:	93 01       	movw	r18, r6
     362:	0e 2c       	mov	r0, r14
     364:	04 c0       	rjmp	.+8      	; 0x36e <__udivdi3+0x14a>
     366:	22 0f       	add	r18, r18
     368:	33 1f       	adc	r19, r19
     36a:	44 1f       	adc	r20, r20
     36c:	55 1f       	adc	r21, r21
     36e:	0a 94       	dec	r0
     370:	d2 f7       	brpl	.-12     	; 0x366 <__udivdi3+0x142>
     372:	80 e2       	ldi	r24, 0x20	; 32
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	8e 19       	sub	r24, r14
     378:	9f 09       	sbc	r25, r15
     37a:	6d a4       	ldd	r6, Y+45	; 0x2d
     37c:	7e a4       	ldd	r7, Y+46	; 0x2e
     37e:	8f a4       	ldd	r8, Y+47	; 0x2f
     380:	98 a8       	ldd	r9, Y+48	; 0x30
     382:	04 c0       	rjmp	.+8      	; 0x38c <__udivdi3+0x168>
     384:	96 94       	lsr	r9
     386:	87 94       	ror	r8
     388:	77 94       	ror	r7
     38a:	67 94       	ror	r6
     38c:	8a 95       	dec	r24
     38e:	d2 f7       	brpl	.-12     	; 0x384 <__udivdi3+0x160>
     390:	62 2a       	or	r6, r18
     392:	73 2a       	or	r7, r19
     394:	84 2a       	or	r8, r20
     396:	95 2a       	or	r9, r21
     398:	ad a4       	ldd	r10, Y+45	; 0x2d
     39a:	be a4       	ldd	r11, Y+46	; 0x2e
     39c:	cf a4       	ldd	r12, Y+47	; 0x2f
     39e:	d8 a8       	ldd	r13, Y+48	; 0x30
     3a0:	04 c0       	rjmp	.+8      	; 0x3aa <__udivdi3+0x186>
     3a2:	aa 0c       	add	r10, r10
     3a4:	bb 1c       	adc	r11, r11
     3a6:	cc 1c       	adc	r12, r12
     3a8:	dd 1c       	adc	r13, r13
     3aa:	ea 94       	dec	r14
     3ac:	d2 f7       	brpl	.-12     	; 0x3a2 <__udivdi3+0x17e>
     3ae:	ad a6       	std	Y+45, r10	; 0x2d
     3b0:	be a6       	std	Y+46, r11	; 0x2e
     3b2:	cf a6       	std	Y+47, r12	; 0x2f
     3b4:	d8 aa       	std	Y+48, r13	; 0x30
     3b6:	62 01       	movw	r12, r4
     3b8:	ee 24       	eor	r14, r14
     3ba:	ff 24       	eor	r15, r15
     3bc:	cd aa       	std	Y+53, r12	; 0x35
     3be:	de aa       	std	Y+54, r13	; 0x36
     3c0:	ef aa       	std	Y+55, r14	; 0x37
     3c2:	f8 ae       	std	Y+56, r15	; 0x38
     3c4:	92 01       	movw	r18, r4
     3c6:	81 01       	movw	r16, r2
     3c8:	20 70       	andi	r18, 0x00	; 0
     3ca:	30 70       	andi	r19, 0x00	; 0
     3cc:	09 af       	std	Y+57, r16	; 0x39
     3ce:	1a af       	std	Y+58, r17	; 0x3a
     3d0:	2b af       	std	Y+59, r18	; 0x3b
     3d2:	3c af       	std	Y+60, r19	; 0x3c
     3d4:	c4 01       	movw	r24, r8
     3d6:	b3 01       	movw	r22, r6
     3d8:	a7 01       	movw	r20, r14
     3da:	96 01       	movw	r18, r12
     3dc:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
     3e0:	7b 01       	movw	r14, r22
     3e2:	8c 01       	movw	r16, r24
     3e4:	c4 01       	movw	r24, r8
     3e6:	b3 01       	movw	r22, r6
     3e8:	2d a9       	ldd	r18, Y+53	; 0x35
     3ea:	3e a9       	ldd	r19, Y+54	; 0x36
     3ec:	4f a9       	ldd	r20, Y+55	; 0x37
     3ee:	58 ad       	ldd	r21, Y+56	; 0x38
     3f0:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
     3f4:	c9 01       	movw	r24, r18
     3f6:	da 01       	movw	r26, r20
     3f8:	3c 01       	movw	r6, r24
     3fa:	4d 01       	movw	r8, r26
     3fc:	c4 01       	movw	r24, r8
     3fe:	b3 01       	movw	r22, r6
     400:	29 ad       	ldd	r18, Y+57	; 0x39
     402:	3a ad       	ldd	r19, Y+58	; 0x3a
     404:	4b ad       	ldd	r20, Y+59	; 0x3b
     406:	5c ad       	ldd	r21, Y+60	; 0x3c
     408:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
     40c:	9b 01       	movw	r18, r22
     40e:	ac 01       	movw	r20, r24
     410:	87 01       	movw	r16, r14
     412:	ff 24       	eor	r15, r15
     414:	ee 24       	eor	r14, r14
     416:	ad a4       	ldd	r10, Y+45	; 0x2d
     418:	be a4       	ldd	r11, Y+46	; 0x2e
     41a:	cf a4       	ldd	r12, Y+47	; 0x2f
     41c:	d8 a8       	ldd	r13, Y+48	; 0x30
     41e:	c6 01       	movw	r24, r12
     420:	aa 27       	eor	r26, r26
     422:	bb 27       	eor	r27, r27
     424:	57 01       	movw	r10, r14
     426:	68 01       	movw	r12, r16
     428:	a8 2a       	or	r10, r24
     42a:	b9 2a       	or	r11, r25
     42c:	ca 2a       	or	r12, r26
     42e:	db 2a       	or	r13, r27
     430:	a2 16       	cp	r10, r18
     432:	b3 06       	cpc	r11, r19
     434:	c4 06       	cpc	r12, r20
     436:	d5 06       	cpc	r13, r21
     438:	e0 f4       	brcc	.+56     	; 0x472 <__udivdi3+0x24e>
     43a:	08 94       	sec
     43c:	61 08       	sbc	r6, r1
     43e:	71 08       	sbc	r7, r1
     440:	81 08       	sbc	r8, r1
     442:	91 08       	sbc	r9, r1
     444:	a2 0c       	add	r10, r2
     446:	b3 1c       	adc	r11, r3
     448:	c4 1c       	adc	r12, r4
     44a:	d5 1c       	adc	r13, r5
     44c:	a2 14       	cp	r10, r2
     44e:	b3 04       	cpc	r11, r3
     450:	c4 04       	cpc	r12, r4
     452:	d5 04       	cpc	r13, r5
     454:	70 f0       	brcs	.+28     	; 0x472 <__udivdi3+0x24e>
     456:	a2 16       	cp	r10, r18
     458:	b3 06       	cpc	r11, r19
     45a:	c4 06       	cpc	r12, r20
     45c:	d5 06       	cpc	r13, r21
     45e:	48 f4       	brcc	.+18     	; 0x472 <__udivdi3+0x24e>
     460:	08 94       	sec
     462:	61 08       	sbc	r6, r1
     464:	71 08       	sbc	r7, r1
     466:	81 08       	sbc	r8, r1
     468:	91 08       	sbc	r9, r1
     46a:	a2 0c       	add	r10, r2
     46c:	b3 1c       	adc	r11, r3
     46e:	c4 1c       	adc	r12, r4
     470:	d5 1c       	adc	r13, r5
     472:	a2 1a       	sub	r10, r18
     474:	b3 0a       	sbc	r11, r19
     476:	c4 0a       	sbc	r12, r20
     478:	d5 0a       	sbc	r13, r21
     47a:	c6 01       	movw	r24, r12
     47c:	b5 01       	movw	r22, r10
     47e:	2d a9       	ldd	r18, Y+53	; 0x35
     480:	3e a9       	ldd	r19, Y+54	; 0x36
     482:	4f a9       	ldd	r20, Y+55	; 0x37
     484:	58 ad       	ldd	r21, Y+56	; 0x38
     486:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
     48a:	7b 01       	movw	r14, r22
     48c:	8c 01       	movw	r16, r24
     48e:	c6 01       	movw	r24, r12
     490:	b5 01       	movw	r22, r10
     492:	2d a9       	ldd	r18, Y+53	; 0x35
     494:	3e a9       	ldd	r19, Y+54	; 0x36
     496:	4f a9       	ldd	r20, Y+55	; 0x37
     498:	58 ad       	ldd	r21, Y+56	; 0x38
     49a:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
     49e:	c9 01       	movw	r24, r18
     4a0:	da 01       	movw	r26, r20
     4a2:	5c 01       	movw	r10, r24
     4a4:	6d 01       	movw	r12, r26
     4a6:	c6 01       	movw	r24, r12
     4a8:	b5 01       	movw	r22, r10
     4aa:	29 ad       	ldd	r18, Y+57	; 0x39
     4ac:	3a ad       	ldd	r19, Y+58	; 0x3a
     4ae:	4b ad       	ldd	r20, Y+59	; 0x3b
     4b0:	5c ad       	ldd	r21, Y+60	; 0x3c
     4b2:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
     4b6:	9b 01       	movw	r18, r22
     4b8:	ac 01       	movw	r20, r24
     4ba:	87 01       	movw	r16, r14
     4bc:	ff 24       	eor	r15, r15
     4be:	ee 24       	eor	r14, r14
     4c0:	8d a5       	ldd	r24, Y+45	; 0x2d
     4c2:	9e a5       	ldd	r25, Y+46	; 0x2e
     4c4:	af a5       	ldd	r26, Y+47	; 0x2f
     4c6:	b8 a9       	ldd	r27, Y+48	; 0x30
     4c8:	a0 70       	andi	r26, 0x00	; 0
     4ca:	b0 70       	andi	r27, 0x00	; 0
     4cc:	e8 2a       	or	r14, r24
     4ce:	f9 2a       	or	r15, r25
     4d0:	0a 2b       	or	r16, r26
     4d2:	1b 2b       	or	r17, r27
     4d4:	e2 16       	cp	r14, r18
     4d6:	f3 06       	cpc	r15, r19
     4d8:	04 07       	cpc	r16, r20
     4da:	15 07       	cpc	r17, r21
     4dc:	c0 f4       	brcc	.+48     	; 0x50e <__udivdi3+0x2ea>
     4de:	08 94       	sec
     4e0:	a1 08       	sbc	r10, r1
     4e2:	b1 08       	sbc	r11, r1
     4e4:	c1 08       	sbc	r12, r1
     4e6:	d1 08       	sbc	r13, r1
     4e8:	e2 0c       	add	r14, r2
     4ea:	f3 1c       	adc	r15, r3
     4ec:	04 1d       	adc	r16, r4
     4ee:	15 1d       	adc	r17, r5
     4f0:	e2 14       	cp	r14, r2
     4f2:	f3 04       	cpc	r15, r3
     4f4:	04 05       	cpc	r16, r4
     4f6:	15 05       	cpc	r17, r5
     4f8:	50 f0       	brcs	.+20     	; 0x50e <__udivdi3+0x2ea>
     4fa:	e2 16       	cp	r14, r18
     4fc:	f3 06       	cpc	r15, r19
     4fe:	04 07       	cpc	r16, r20
     500:	15 07       	cpc	r17, r21
     502:	28 f4       	brcc	.+10     	; 0x50e <__udivdi3+0x2ea>
     504:	08 94       	sec
     506:	a1 08       	sbc	r10, r1
     508:	b1 08       	sbc	r11, r1
     50a:	c1 08       	sbc	r12, r1
     50c:	d1 08       	sbc	r13, r1
     50e:	d3 01       	movw	r26, r6
     510:	99 27       	eor	r25, r25
     512:	88 27       	eor	r24, r24
     514:	86 01       	movw	r16, r12
     516:	75 01       	movw	r14, r10
     518:	e8 2a       	or	r14, r24
     51a:	f9 2a       	or	r15, r25
     51c:	0a 2b       	or	r16, r26
     51e:	1b 2b       	or	r17, r27
     520:	e9 aa       	std	Y+49, r14	; 0x31
     522:	fa aa       	std	Y+50, r15	; 0x32
     524:	0b ab       	std	Y+51, r16	; 0x33
     526:	1c ab       	std	Y+52, r17	; 0x34
     528:	cf c4       	rjmp	.+2462   	; 0xec8 <__udivdi3+0xca4>
     52a:	21 14       	cp	r2, r1
     52c:	31 04       	cpc	r3, r1
     52e:	41 04       	cpc	r4, r1
     530:	51 04       	cpc	r5, r1
     532:	71 f4       	brne	.+28     	; 0x550 <__udivdi3+0x32c>
     534:	61 e0       	ldi	r22, 0x01	; 1
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
     548:	c9 01       	movw	r24, r18
     54a:	da 01       	movw	r26, r20
     54c:	1c 01       	movw	r2, r24
     54e:	2d 01       	movw	r4, r26
     550:	00 e0       	ldi	r16, 0x00	; 0
     552:	20 16       	cp	r2, r16
     554:	00 e0       	ldi	r16, 0x00	; 0
     556:	30 06       	cpc	r3, r16
     558:	01 e0       	ldi	r16, 0x01	; 1
     55a:	40 06       	cpc	r4, r16
     55c:	00 e0       	ldi	r16, 0x00	; 0
     55e:	50 06       	cpc	r5, r16
     560:	88 f4       	brcc	.+34     	; 0x584 <__udivdi3+0x360>
     562:	1f ef       	ldi	r17, 0xFF	; 255
     564:	21 16       	cp	r2, r17
     566:	31 04       	cpc	r3, r1
     568:	41 04       	cpc	r4, r1
     56a:	51 04       	cpc	r5, r1
     56c:	31 f0       	breq	.+12     	; 0x57a <__udivdi3+0x356>
     56e:	28 f0       	brcs	.+10     	; 0x57a <__udivdi3+0x356>
     570:	48 e0       	ldi	r20, 0x08	; 8
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	17 c0       	rjmp	.+46     	; 0x5a8 <__udivdi3+0x384>
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	12 c0       	rjmp	.+36     	; 0x5a8 <__udivdi3+0x384>
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	22 16       	cp	r2, r18
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	32 06       	cpc	r3, r18
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	42 06       	cpc	r4, r18
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	52 06       	cpc	r5, r18
     594:	28 f0       	brcs	.+10     	; 0x5a0 <__udivdi3+0x37c>
     596:	48 e1       	ldi	r20, 0x18	; 24
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	04 c0       	rjmp	.+8      	; 0x5a8 <__udivdi3+0x384>
     5a0:	40 e1       	ldi	r20, 0x10	; 16
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	d2 01       	movw	r26, r4
     5aa:	c1 01       	movw	r24, r2
     5ac:	04 2e       	mov	r0, r20
     5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <__udivdi3+0x394>
     5b0:	b6 95       	lsr	r27
     5b2:	a7 95       	ror	r26
     5b4:	97 95       	ror	r25
     5b6:	87 95       	ror	r24
     5b8:	0a 94       	dec	r0
     5ba:	d2 f7       	brpl	.-12     	; 0x5b0 <__udivdi3+0x38c>
     5bc:	8f 50       	subi	r24, 0x0F	; 15
     5be:	9e 4f       	sbci	r25, 0xFE	; 254
     5c0:	dc 01       	movw	r26, r24
     5c2:	2c 91       	ld	r18, X
     5c4:	e0 e2       	ldi	r30, 0x20	; 32
     5c6:	ee 2e       	mov	r14, r30
     5c8:	f1 2c       	mov	r15, r1
     5ca:	01 2d       	mov	r16, r1
     5cc:	11 2d       	mov	r17, r1
     5ce:	d8 01       	movw	r26, r16
     5d0:	c7 01       	movw	r24, r14
     5d2:	84 1b       	sub	r24, r20
     5d4:	95 0b       	sbc	r25, r21
     5d6:	a6 0b       	sbc	r26, r22
     5d8:	b7 0b       	sbc	r27, r23
     5da:	82 1b       	sub	r24, r18
     5dc:	91 09       	sbc	r25, r1
     5de:	a1 09       	sbc	r26, r1
     5e0:	b1 09       	sbc	r27, r1
     5e2:	00 97       	sbiw	r24, 0x00	; 0
     5e4:	a1 05       	cpc	r26, r1
     5e6:	b1 05       	cpc	r27, r1
     5e8:	61 f4       	brne	.+24     	; 0x602 <__udivdi3+0x3de>
     5ea:	64 01       	movw	r12, r8
     5ec:	53 01       	movw	r10, r6
     5ee:	a2 18       	sub	r10, r2
     5f0:	b3 08       	sbc	r11, r3
     5f2:	c4 08       	sbc	r12, r4
     5f4:	d5 08       	sbc	r13, r5
     5f6:	31 e0       	ldi	r19, 0x01	; 1
     5f8:	63 2e       	mov	r6, r19
     5fa:	71 2c       	mov	r7, r1
     5fc:	81 2c       	mov	r8, r1
     5fe:	91 2c       	mov	r9, r1
     600:	1e c1       	rjmp	.+572    	; 0x83e <__udivdi3+0x61a>
     602:	6f 96       	adiw	r28, 0x1f	; 31
     604:	8f af       	std	Y+63, r24	; 0x3f
     606:	6f 97       	sbiw	r28, 0x1f	; 31
     608:	08 2e       	mov	r0, r24
     60a:	04 c0       	rjmp	.+8      	; 0x614 <__udivdi3+0x3f0>
     60c:	22 0c       	add	r2, r2
     60e:	33 1c       	adc	r3, r3
     610:	44 1c       	adc	r4, r4
     612:	55 1c       	adc	r5, r5
     614:	0a 94       	dec	r0
     616:	d2 f7       	brpl	.-12     	; 0x60c <__udivdi3+0x3e8>
     618:	ee 2d       	mov	r30, r14
     61a:	e8 1b       	sub	r30, r24
     61c:	64 01       	movw	r12, r8
     61e:	53 01       	movw	r10, r6
     620:	0e 2e       	mov	r0, r30
     622:	04 c0       	rjmp	.+8      	; 0x62c <__udivdi3+0x408>
     624:	d6 94       	lsr	r13
     626:	c7 94       	ror	r12
     628:	b7 94       	ror	r11
     62a:	a7 94       	ror	r10
     62c:	0a 94       	dec	r0
     62e:	d2 f7       	brpl	.-12     	; 0x624 <__udivdi3+0x400>
     630:	a4 01       	movw	r20, r8
     632:	93 01       	movw	r18, r6
     634:	6f 96       	adiw	r28, 0x1f	; 31
     636:	0f ac       	ldd	r0, Y+63	; 0x3f
     638:	6f 97       	sbiw	r28, 0x1f	; 31
     63a:	04 c0       	rjmp	.+8      	; 0x644 <__udivdi3+0x420>
     63c:	22 0f       	add	r18, r18
     63e:	33 1f       	adc	r19, r19
     640:	44 1f       	adc	r20, r20
     642:	55 1f       	adc	r21, r21
     644:	0a 94       	dec	r0
     646:	d2 f7       	brpl	.-12     	; 0x63c <__udivdi3+0x418>
     648:	6d a4       	ldd	r6, Y+45	; 0x2d
     64a:	7e a4       	ldd	r7, Y+46	; 0x2e
     64c:	8f a4       	ldd	r8, Y+47	; 0x2f
     64e:	98 a8       	ldd	r9, Y+48	; 0x30
     650:	0e 2e       	mov	r0, r30
     652:	04 c0       	rjmp	.+8      	; 0x65c <__udivdi3+0x438>
     654:	96 94       	lsr	r9
     656:	87 94       	ror	r8
     658:	77 94       	ror	r7
     65a:	67 94       	ror	r6
     65c:	0a 94       	dec	r0
     65e:	d2 f7       	brpl	.-12     	; 0x654 <__udivdi3+0x430>
     660:	84 01       	movw	r16, r8
     662:	73 01       	movw	r14, r6
     664:	e2 2a       	or	r14, r18
     666:	f3 2a       	or	r15, r19
     668:	04 2b       	or	r16, r20
     66a:	15 2b       	or	r17, r21
     66c:	e9 a6       	std	Y+41, r14	; 0x29
     66e:	fa a6       	std	Y+42, r15	; 0x2a
     670:	0b a7       	std	Y+43, r16	; 0x2b
     672:	1c a7       	std	Y+44, r17	; 0x2c
     674:	32 01       	movw	r6, r4
     676:	88 24       	eor	r8, r8
     678:	99 24       	eor	r9, r9
     67a:	92 01       	movw	r18, r4
     67c:	81 01       	movw	r16, r2
     67e:	20 70       	andi	r18, 0x00	; 0
     680:	30 70       	andi	r19, 0x00	; 0
     682:	21 96       	adiw	r28, 0x01	; 1
     684:	0c af       	std	Y+60, r16	; 0x3c
     686:	1d af       	std	Y+61, r17	; 0x3d
     688:	2e af       	std	Y+62, r18	; 0x3e
     68a:	3f af       	std	Y+63, r19	; 0x3f
     68c:	21 97       	sbiw	r28, 0x01	; 1
     68e:	c6 01       	movw	r24, r12
     690:	b5 01       	movw	r22, r10
     692:	a4 01       	movw	r20, r8
     694:	93 01       	movw	r18, r6
     696:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
     69a:	7b 01       	movw	r14, r22
     69c:	8c 01       	movw	r16, r24
     69e:	c6 01       	movw	r24, r12
     6a0:	b5 01       	movw	r22, r10
     6a2:	a4 01       	movw	r20, r8
     6a4:	93 01       	movw	r18, r6
     6a6:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
     6aa:	c9 01       	movw	r24, r18
     6ac:	da 01       	movw	r26, r20
     6ae:	25 96       	adiw	r28, 0x05	; 5
     6b0:	8c af       	std	Y+60, r24	; 0x3c
     6b2:	9d af       	std	Y+61, r25	; 0x3d
     6b4:	ae af       	std	Y+62, r26	; 0x3e
     6b6:	bf af       	std	Y+63, r27	; 0x3f
     6b8:	25 97       	sbiw	r28, 0x05	; 5
     6ba:	bc 01       	movw	r22, r24
     6bc:	cd 01       	movw	r24, r26
     6be:	21 96       	adiw	r28, 0x01	; 1
     6c0:	2c ad       	ldd	r18, Y+60	; 0x3c
     6c2:	3d ad       	ldd	r19, Y+61	; 0x3d
     6c4:	4e ad       	ldd	r20, Y+62	; 0x3e
     6c6:	5f ad       	ldd	r21, Y+63	; 0x3f
     6c8:	21 97       	sbiw	r28, 0x01	; 1
     6ca:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
     6ce:	9b 01       	movw	r18, r22
     6d0:	ac 01       	movw	r20, r24
     6d2:	87 01       	movw	r16, r14
     6d4:	ff 24       	eor	r15, r15
     6d6:	ee 24       	eor	r14, r14
     6d8:	a9 a4       	ldd	r10, Y+41	; 0x29
     6da:	ba a4       	ldd	r11, Y+42	; 0x2a
     6dc:	cb a4       	ldd	r12, Y+43	; 0x2b
     6de:	dc a4       	ldd	r13, Y+44	; 0x2c
     6e0:	c6 01       	movw	r24, r12
     6e2:	aa 27       	eor	r26, r26
     6e4:	bb 27       	eor	r27, r27
     6e6:	5c 01       	movw	r10, r24
     6e8:	6d 01       	movw	r12, r26
     6ea:	ae 28       	or	r10, r14
     6ec:	bf 28       	or	r11, r15
     6ee:	c0 2a       	or	r12, r16
     6f0:	d1 2a       	or	r13, r17
     6f2:	a2 16       	cp	r10, r18
     6f4:	b3 06       	cpc	r11, r19
     6f6:	c4 06       	cpc	r12, r20
     6f8:	d5 06       	cpc	r13, r21
     6fa:	60 f5       	brcc	.+88     	; 0x754 <__udivdi3+0x530>
     6fc:	25 96       	adiw	r28, 0x05	; 5
     6fe:	6c ad       	ldd	r22, Y+60	; 0x3c
     700:	7d ad       	ldd	r23, Y+61	; 0x3d
     702:	8e ad       	ldd	r24, Y+62	; 0x3e
     704:	9f ad       	ldd	r25, Y+63	; 0x3f
     706:	25 97       	sbiw	r28, 0x05	; 5
     708:	61 50       	subi	r22, 0x01	; 1
     70a:	70 40       	sbci	r23, 0x00	; 0
     70c:	80 40       	sbci	r24, 0x00	; 0
     70e:	90 40       	sbci	r25, 0x00	; 0
     710:	25 96       	adiw	r28, 0x05	; 5
     712:	6c af       	std	Y+60, r22	; 0x3c
     714:	7d af       	std	Y+61, r23	; 0x3d
     716:	8e af       	std	Y+62, r24	; 0x3e
     718:	9f af       	std	Y+63, r25	; 0x3f
     71a:	25 97       	sbiw	r28, 0x05	; 5
     71c:	a2 0c       	add	r10, r2
     71e:	b3 1c       	adc	r11, r3
     720:	c4 1c       	adc	r12, r4
     722:	d5 1c       	adc	r13, r5
     724:	a2 14       	cp	r10, r2
     726:	b3 04       	cpc	r11, r3
     728:	c4 04       	cpc	r12, r4
     72a:	d5 04       	cpc	r13, r5
     72c:	98 f0       	brcs	.+38     	; 0x754 <__udivdi3+0x530>
     72e:	a2 16       	cp	r10, r18
     730:	b3 06       	cpc	r11, r19
     732:	c4 06       	cpc	r12, r20
     734:	d5 06       	cpc	r13, r21
     736:	70 f4       	brcc	.+28     	; 0x754 <__udivdi3+0x530>
     738:	61 50       	subi	r22, 0x01	; 1
     73a:	70 40       	sbci	r23, 0x00	; 0
     73c:	80 40       	sbci	r24, 0x00	; 0
     73e:	90 40       	sbci	r25, 0x00	; 0
     740:	25 96       	adiw	r28, 0x05	; 5
     742:	6c af       	std	Y+60, r22	; 0x3c
     744:	7d af       	std	Y+61, r23	; 0x3d
     746:	8e af       	std	Y+62, r24	; 0x3e
     748:	9f af       	std	Y+63, r25	; 0x3f
     74a:	25 97       	sbiw	r28, 0x05	; 5
     74c:	a2 0c       	add	r10, r2
     74e:	b3 1c       	adc	r11, r3
     750:	c4 1c       	adc	r12, r4
     752:	d5 1c       	adc	r13, r5
     754:	a2 1a       	sub	r10, r18
     756:	b3 0a       	sbc	r11, r19
     758:	c4 0a       	sbc	r12, r20
     75a:	d5 0a       	sbc	r13, r21
     75c:	c6 01       	movw	r24, r12
     75e:	b5 01       	movw	r22, r10
     760:	a4 01       	movw	r20, r8
     762:	93 01       	movw	r18, r6
     764:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
     768:	7b 01       	movw	r14, r22
     76a:	8c 01       	movw	r16, r24
     76c:	c6 01       	movw	r24, r12
     76e:	b5 01       	movw	r22, r10
     770:	a4 01       	movw	r20, r8
     772:	93 01       	movw	r18, r6
     774:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
     778:	c9 01       	movw	r24, r18
     77a:	da 01       	movw	r26, r20
     77c:	3c 01       	movw	r6, r24
     77e:	4d 01       	movw	r8, r26
     780:	c4 01       	movw	r24, r8
     782:	b3 01       	movw	r22, r6
     784:	21 96       	adiw	r28, 0x01	; 1
     786:	2c ad       	ldd	r18, Y+60	; 0x3c
     788:	3d ad       	ldd	r19, Y+61	; 0x3d
     78a:	4e ad       	ldd	r20, Y+62	; 0x3e
     78c:	5f ad       	ldd	r21, Y+63	; 0x3f
     78e:	21 97       	sbiw	r28, 0x01	; 1
     790:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
     794:	9b 01       	movw	r18, r22
     796:	ac 01       	movw	r20, r24
     798:	87 01       	movw	r16, r14
     79a:	ff 24       	eor	r15, r15
     79c:	ee 24       	eor	r14, r14
     79e:	89 a5       	ldd	r24, Y+41	; 0x29
     7a0:	9a a5       	ldd	r25, Y+42	; 0x2a
     7a2:	ab a5       	ldd	r26, Y+43	; 0x2b
     7a4:	bc a5       	ldd	r27, Y+44	; 0x2c
     7a6:	a0 70       	andi	r26, 0x00	; 0
     7a8:	b0 70       	andi	r27, 0x00	; 0
     7aa:	57 01       	movw	r10, r14
     7ac:	68 01       	movw	r12, r16
     7ae:	a8 2a       	or	r10, r24
     7b0:	b9 2a       	or	r11, r25
     7b2:	ca 2a       	or	r12, r26
     7b4:	db 2a       	or	r13, r27
     7b6:	a2 16       	cp	r10, r18
     7b8:	b3 06       	cpc	r11, r19
     7ba:	c4 06       	cpc	r12, r20
     7bc:	d5 06       	cpc	r13, r21
     7be:	e0 f4       	brcc	.+56     	; 0x7f8 <__udivdi3+0x5d4>
     7c0:	08 94       	sec
     7c2:	61 08       	sbc	r6, r1
     7c4:	71 08       	sbc	r7, r1
     7c6:	81 08       	sbc	r8, r1
     7c8:	91 08       	sbc	r9, r1
     7ca:	a2 0c       	add	r10, r2
     7cc:	b3 1c       	adc	r11, r3
     7ce:	c4 1c       	adc	r12, r4
     7d0:	d5 1c       	adc	r13, r5
     7d2:	a2 14       	cp	r10, r2
     7d4:	b3 04       	cpc	r11, r3
     7d6:	c4 04       	cpc	r12, r4
     7d8:	d5 04       	cpc	r13, r5
     7da:	70 f0       	brcs	.+28     	; 0x7f8 <__udivdi3+0x5d4>
     7dc:	a2 16       	cp	r10, r18
     7de:	b3 06       	cpc	r11, r19
     7e0:	c4 06       	cpc	r12, r20
     7e2:	d5 06       	cpc	r13, r21
     7e4:	48 f4       	brcc	.+18     	; 0x7f8 <__udivdi3+0x5d4>
     7e6:	08 94       	sec
     7e8:	61 08       	sbc	r6, r1
     7ea:	71 08       	sbc	r7, r1
     7ec:	81 08       	sbc	r8, r1
     7ee:	91 08       	sbc	r9, r1
     7f0:	a2 0c       	add	r10, r2
     7f2:	b3 1c       	adc	r11, r3
     7f4:	c4 1c       	adc	r12, r4
     7f6:	d5 1c       	adc	r13, r5
     7f8:	8d a5       	ldd	r24, Y+45	; 0x2d
     7fa:	9e a5       	ldd	r25, Y+46	; 0x2e
     7fc:	af a5       	ldd	r26, Y+47	; 0x2f
     7fe:	b8 a9       	ldd	r27, Y+48	; 0x30
     800:	6f 96       	adiw	r28, 0x1f	; 31
     802:	0f ac       	ldd	r0, Y+63	; 0x3f
     804:	6f 97       	sbiw	r28, 0x1f	; 31
     806:	04 c0       	rjmp	.+8      	; 0x810 <__udivdi3+0x5ec>
     808:	88 0f       	add	r24, r24
     80a:	99 1f       	adc	r25, r25
     80c:	aa 1f       	adc	r26, r26
     80e:	bb 1f       	adc	r27, r27
     810:	0a 94       	dec	r0
     812:	d2 f7       	brpl	.-12     	; 0x808 <__udivdi3+0x5e4>
     814:	8d a7       	std	Y+45, r24	; 0x2d
     816:	9e a7       	std	Y+46, r25	; 0x2e
     818:	af a7       	std	Y+47, r26	; 0x2f
     81a:	b8 ab       	std	Y+48, r27	; 0x30
     81c:	a2 1a       	sub	r10, r18
     81e:	b3 0a       	sbc	r11, r19
     820:	c4 0a       	sbc	r12, r20
     822:	d5 0a       	sbc	r13, r21
     824:	25 96       	adiw	r28, 0x05	; 5
     826:	ec ac       	ldd	r14, Y+60	; 0x3c
     828:	fd ac       	ldd	r15, Y+61	; 0x3d
     82a:	0e ad       	ldd	r16, Y+62	; 0x3e
     82c:	1f ad       	ldd	r17, Y+63	; 0x3f
     82e:	25 97       	sbiw	r28, 0x05	; 5
     830:	d7 01       	movw	r26, r14
     832:	99 27       	eor	r25, r25
     834:	88 27       	eor	r24, r24
     836:	68 2a       	or	r6, r24
     838:	79 2a       	or	r7, r25
     83a:	8a 2a       	or	r8, r26
     83c:	9b 2a       	or	r9, r27
     83e:	82 01       	movw	r16, r4
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	29 96       	adiw	r28, 0x09	; 9
     846:	0c af       	std	Y+60, r16	; 0x3c
     848:	1d af       	std	Y+61, r17	; 0x3d
     84a:	2e af       	std	Y+62, r18	; 0x3e
     84c:	3f af       	std	Y+63, r19	; 0x3f
     84e:	29 97       	sbiw	r28, 0x09	; 9
     850:	a2 01       	movw	r20, r4
     852:	91 01       	movw	r18, r2
     854:	40 70       	andi	r20, 0x00	; 0
     856:	50 70       	andi	r21, 0x00	; 0
     858:	2d 96       	adiw	r28, 0x0d	; 13
     85a:	2c af       	std	Y+60, r18	; 0x3c
     85c:	3d af       	std	Y+61, r19	; 0x3d
     85e:	4e af       	std	Y+62, r20	; 0x3e
     860:	5f af       	std	Y+63, r21	; 0x3f
     862:	2d 97       	sbiw	r28, 0x0d	; 13
     864:	c6 01       	movw	r24, r12
     866:	b5 01       	movw	r22, r10
     868:	29 96       	adiw	r28, 0x09	; 9
     86a:	2c ad       	ldd	r18, Y+60	; 0x3c
     86c:	3d ad       	ldd	r19, Y+61	; 0x3d
     86e:	4e ad       	ldd	r20, Y+62	; 0x3e
     870:	5f ad       	ldd	r21, Y+63	; 0x3f
     872:	29 97       	sbiw	r28, 0x09	; 9
     874:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
     878:	7b 01       	movw	r14, r22
     87a:	8c 01       	movw	r16, r24
     87c:	c6 01       	movw	r24, r12
     87e:	b5 01       	movw	r22, r10
     880:	29 96       	adiw	r28, 0x09	; 9
     882:	2c ad       	ldd	r18, Y+60	; 0x3c
     884:	3d ad       	ldd	r19, Y+61	; 0x3d
     886:	4e ad       	ldd	r20, Y+62	; 0x3e
     888:	5f ad       	ldd	r21, Y+63	; 0x3f
     88a:	29 97       	sbiw	r28, 0x09	; 9
     88c:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
     890:	c9 01       	movw	r24, r18
     892:	da 01       	movw	r26, r20
     894:	61 96       	adiw	r28, 0x11	; 17
     896:	8c af       	std	Y+60, r24	; 0x3c
     898:	9d af       	std	Y+61, r25	; 0x3d
     89a:	ae af       	std	Y+62, r26	; 0x3e
     89c:	bf af       	std	Y+63, r27	; 0x3f
     89e:	61 97       	sbiw	r28, 0x11	; 17
     8a0:	bc 01       	movw	r22, r24
     8a2:	cd 01       	movw	r24, r26
     8a4:	2d 96       	adiw	r28, 0x0d	; 13
     8a6:	2c ad       	ldd	r18, Y+60	; 0x3c
     8a8:	3d ad       	ldd	r19, Y+61	; 0x3d
     8aa:	4e ad       	ldd	r20, Y+62	; 0x3e
     8ac:	5f ad       	ldd	r21, Y+63	; 0x3f
     8ae:	2d 97       	sbiw	r28, 0x0d	; 13
     8b0:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
     8b4:	9b 01       	movw	r18, r22
     8b6:	ac 01       	movw	r20, r24
     8b8:	87 01       	movw	r16, r14
     8ba:	ff 24       	eor	r15, r15
     8bc:	ee 24       	eor	r14, r14
     8be:	ad a4       	ldd	r10, Y+45	; 0x2d
     8c0:	be a4       	ldd	r11, Y+46	; 0x2e
     8c2:	cf a4       	ldd	r12, Y+47	; 0x2f
     8c4:	d8 a8       	ldd	r13, Y+48	; 0x30
     8c6:	c6 01       	movw	r24, r12
     8c8:	aa 27       	eor	r26, r26
     8ca:	bb 27       	eor	r27, r27
     8cc:	57 01       	movw	r10, r14
     8ce:	68 01       	movw	r12, r16
     8d0:	a8 2a       	or	r10, r24
     8d2:	b9 2a       	or	r11, r25
     8d4:	ca 2a       	or	r12, r26
     8d6:	db 2a       	or	r13, r27
     8d8:	a2 16       	cp	r10, r18
     8da:	b3 06       	cpc	r11, r19
     8dc:	c4 06       	cpc	r12, r20
     8de:	d5 06       	cpc	r13, r21
     8e0:	60 f5       	brcc	.+88     	; 0x93a <__udivdi3+0x716>
     8e2:	61 96       	adiw	r28, 0x11	; 17
     8e4:	6c ad       	ldd	r22, Y+60	; 0x3c
     8e6:	7d ad       	ldd	r23, Y+61	; 0x3d
     8e8:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ea:	9f ad       	ldd	r25, Y+63	; 0x3f
     8ec:	61 97       	sbiw	r28, 0x11	; 17
     8ee:	61 50       	subi	r22, 0x01	; 1
     8f0:	70 40       	sbci	r23, 0x00	; 0
     8f2:	80 40       	sbci	r24, 0x00	; 0
     8f4:	90 40       	sbci	r25, 0x00	; 0
     8f6:	61 96       	adiw	r28, 0x11	; 17
     8f8:	6c af       	std	Y+60, r22	; 0x3c
     8fa:	7d af       	std	Y+61, r23	; 0x3d
     8fc:	8e af       	std	Y+62, r24	; 0x3e
     8fe:	9f af       	std	Y+63, r25	; 0x3f
     900:	61 97       	sbiw	r28, 0x11	; 17
     902:	a2 0c       	add	r10, r2
     904:	b3 1c       	adc	r11, r3
     906:	c4 1c       	adc	r12, r4
     908:	d5 1c       	adc	r13, r5
     90a:	a2 14       	cp	r10, r2
     90c:	b3 04       	cpc	r11, r3
     90e:	c4 04       	cpc	r12, r4
     910:	d5 04       	cpc	r13, r5
     912:	98 f0       	brcs	.+38     	; 0x93a <__udivdi3+0x716>
     914:	a2 16       	cp	r10, r18
     916:	b3 06       	cpc	r11, r19
     918:	c4 06       	cpc	r12, r20
     91a:	d5 06       	cpc	r13, r21
     91c:	70 f4       	brcc	.+28     	; 0x93a <__udivdi3+0x716>
     91e:	61 50       	subi	r22, 0x01	; 1
     920:	70 40       	sbci	r23, 0x00	; 0
     922:	80 40       	sbci	r24, 0x00	; 0
     924:	90 40       	sbci	r25, 0x00	; 0
     926:	61 96       	adiw	r28, 0x11	; 17
     928:	6c af       	std	Y+60, r22	; 0x3c
     92a:	7d af       	std	Y+61, r23	; 0x3d
     92c:	8e af       	std	Y+62, r24	; 0x3e
     92e:	9f af       	std	Y+63, r25	; 0x3f
     930:	61 97       	sbiw	r28, 0x11	; 17
     932:	a2 0c       	add	r10, r2
     934:	b3 1c       	adc	r11, r3
     936:	c4 1c       	adc	r12, r4
     938:	d5 1c       	adc	r13, r5
     93a:	a2 1a       	sub	r10, r18
     93c:	b3 0a       	sbc	r11, r19
     93e:	c4 0a       	sbc	r12, r20
     940:	d5 0a       	sbc	r13, r21
     942:	c6 01       	movw	r24, r12
     944:	b5 01       	movw	r22, r10
     946:	29 96       	adiw	r28, 0x09	; 9
     948:	2c ad       	ldd	r18, Y+60	; 0x3c
     94a:	3d ad       	ldd	r19, Y+61	; 0x3d
     94c:	4e ad       	ldd	r20, Y+62	; 0x3e
     94e:	5f ad       	ldd	r21, Y+63	; 0x3f
     950:	29 97       	sbiw	r28, 0x09	; 9
     952:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
     956:	7b 01       	movw	r14, r22
     958:	8c 01       	movw	r16, r24
     95a:	c6 01       	movw	r24, r12
     95c:	b5 01       	movw	r22, r10
     95e:	29 96       	adiw	r28, 0x09	; 9
     960:	2c ad       	ldd	r18, Y+60	; 0x3c
     962:	3d ad       	ldd	r19, Y+61	; 0x3d
     964:	4e ad       	ldd	r20, Y+62	; 0x3e
     966:	5f ad       	ldd	r21, Y+63	; 0x3f
     968:	29 97       	sbiw	r28, 0x09	; 9
     96a:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
     96e:	c9 01       	movw	r24, r18
     970:	da 01       	movw	r26, r20
     972:	5c 01       	movw	r10, r24
     974:	6d 01       	movw	r12, r26
     976:	c6 01       	movw	r24, r12
     978:	b5 01       	movw	r22, r10
     97a:	2d 96       	adiw	r28, 0x0d	; 13
     97c:	2c ad       	ldd	r18, Y+60	; 0x3c
     97e:	3d ad       	ldd	r19, Y+61	; 0x3d
     980:	4e ad       	ldd	r20, Y+62	; 0x3e
     982:	5f ad       	ldd	r21, Y+63	; 0x3f
     984:	2d 97       	sbiw	r28, 0x0d	; 13
     986:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
     98a:	9b 01       	movw	r18, r22
     98c:	ac 01       	movw	r20, r24
     98e:	87 01       	movw	r16, r14
     990:	ff 24       	eor	r15, r15
     992:	ee 24       	eor	r14, r14
     994:	8d a5       	ldd	r24, Y+45	; 0x2d
     996:	9e a5       	ldd	r25, Y+46	; 0x2e
     998:	af a5       	ldd	r26, Y+47	; 0x2f
     99a:	b8 a9       	ldd	r27, Y+48	; 0x30
     99c:	a0 70       	andi	r26, 0x00	; 0
     99e:	b0 70       	andi	r27, 0x00	; 0
     9a0:	e8 2a       	or	r14, r24
     9a2:	f9 2a       	or	r15, r25
     9a4:	0a 2b       	or	r16, r26
     9a6:	1b 2b       	or	r17, r27
     9a8:	e2 16       	cp	r14, r18
     9aa:	f3 06       	cpc	r15, r19
     9ac:	04 07       	cpc	r16, r20
     9ae:	15 07       	cpc	r17, r21
     9b0:	c0 f4       	brcc	.+48     	; 0x9e2 <__udivdi3+0x7be>
     9b2:	08 94       	sec
     9b4:	a1 08       	sbc	r10, r1
     9b6:	b1 08       	sbc	r11, r1
     9b8:	c1 08       	sbc	r12, r1
     9ba:	d1 08       	sbc	r13, r1
     9bc:	e2 0c       	add	r14, r2
     9be:	f3 1c       	adc	r15, r3
     9c0:	04 1d       	adc	r16, r4
     9c2:	15 1d       	adc	r17, r5
     9c4:	e2 14       	cp	r14, r2
     9c6:	f3 04       	cpc	r15, r3
     9c8:	04 05       	cpc	r16, r4
     9ca:	15 05       	cpc	r17, r5
     9cc:	50 f0       	brcs	.+20     	; 0x9e2 <__udivdi3+0x7be>
     9ce:	e2 16       	cp	r14, r18
     9d0:	f3 06       	cpc	r15, r19
     9d2:	04 07       	cpc	r16, r20
     9d4:	15 07       	cpc	r17, r21
     9d6:	28 f4       	brcc	.+10     	; 0x9e2 <__udivdi3+0x7be>
     9d8:	08 94       	sec
     9da:	a1 08       	sbc	r10, r1
     9dc:	b1 08       	sbc	r11, r1
     9de:	c1 08       	sbc	r12, r1
     9e0:	d1 08       	sbc	r13, r1
     9e2:	61 96       	adiw	r28, 0x11	; 17
     9e4:	ec ac       	ldd	r14, Y+60	; 0x3c
     9e6:	fd ac       	ldd	r15, Y+61	; 0x3d
     9e8:	0e ad       	ldd	r16, Y+62	; 0x3e
     9ea:	1f ad       	ldd	r17, Y+63	; 0x3f
     9ec:	61 97       	sbiw	r28, 0x11	; 17
     9ee:	d7 01       	movw	r26, r14
     9f0:	99 27       	eor	r25, r25
     9f2:	88 27       	eor	r24, r24
     9f4:	96 01       	movw	r18, r12
     9f6:	85 01       	movw	r16, r10
     9f8:	08 2b       	or	r16, r24
     9fa:	19 2b       	or	r17, r25
     9fc:	2a 2b       	or	r18, r26
     9fe:	3b 2b       	or	r19, r27
     a00:	09 ab       	std	Y+49, r16	; 0x31
     a02:	1a ab       	std	Y+50, r17	; 0x32
     a04:	2b ab       	std	Y+51, r18	; 0x33
     a06:	3c ab       	std	Y+52, r19	; 0x34
     a08:	62 c2       	rjmp	.+1220   	; 0xece <__udivdi3+0xcaa>
     a0a:	6e 14       	cp	r6, r14
     a0c:	7f 04       	cpc	r7, r15
     a0e:	80 06       	cpc	r8, r16
     a10:	91 06       	cpc	r9, r17
     a12:	08 f4       	brcc	.+2      	; 0xa16 <__udivdi3+0x7f2>
     a14:	51 c2       	rjmp	.+1186   	; 0xeb8 <__udivdi3+0xc94>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	e2 16       	cp	r14, r18
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	f2 06       	cpc	r15, r18
     a1e:	21 e0       	ldi	r18, 0x01	; 1
     a20:	02 07       	cpc	r16, r18
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	12 07       	cpc	r17, r18
     a26:	88 f4       	brcc	.+34     	; 0xa4a <__udivdi3+0x826>
     a28:	3f ef       	ldi	r19, 0xFF	; 255
     a2a:	e3 16       	cp	r14, r19
     a2c:	f1 04       	cpc	r15, r1
     a2e:	01 05       	cpc	r16, r1
     a30:	11 05       	cpc	r17, r1
     a32:	31 f0       	breq	.+12     	; 0xa40 <__udivdi3+0x81c>
     a34:	28 f0       	brcs	.+10     	; 0xa40 <__udivdi3+0x81c>
     a36:	48 e0       	ldi	r20, 0x08	; 8
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	17 c0       	rjmp	.+46     	; 0xa6e <__udivdi3+0x84a>
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	50 e0       	ldi	r21, 0x00	; 0
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	12 c0       	rjmp	.+36     	; 0xa6e <__udivdi3+0x84a>
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	e4 16       	cp	r14, r20
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	f4 06       	cpc	r15, r20
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	04 07       	cpc	r16, r20
     a56:	41 e0       	ldi	r20, 0x01	; 1
     a58:	14 07       	cpc	r17, r20
     a5a:	28 f0       	brcs	.+10     	; 0xa66 <__udivdi3+0x842>
     a5c:	48 e1       	ldi	r20, 0x18	; 24
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	04 c0       	rjmp	.+8      	; 0xa6e <__udivdi3+0x84a>
     a66:	40 e1       	ldi	r20, 0x10	; 16
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	d8 01       	movw	r26, r16
     a70:	c7 01       	movw	r24, r14
     a72:	04 2e       	mov	r0, r20
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__udivdi3+0x85a>
     a76:	b6 95       	lsr	r27
     a78:	a7 95       	ror	r26
     a7a:	97 95       	ror	r25
     a7c:	87 95       	ror	r24
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__udivdi3+0x852>
     a82:	8f 50       	subi	r24, 0x0F	; 15
     a84:	9e 4f       	sbci	r25, 0xFE	; 254
     a86:	dc 01       	movw	r26, r24
     a88:	2c 91       	ld	r18, X
     a8a:	30 e2       	ldi	r19, 0x20	; 32
     a8c:	a3 2e       	mov	r10, r19
     a8e:	b1 2c       	mov	r11, r1
     a90:	c1 2c       	mov	r12, r1
     a92:	d1 2c       	mov	r13, r1
     a94:	d6 01       	movw	r26, r12
     a96:	c5 01       	movw	r24, r10
     a98:	84 1b       	sub	r24, r20
     a9a:	95 0b       	sbc	r25, r21
     a9c:	a6 0b       	sbc	r26, r22
     a9e:	b7 0b       	sbc	r27, r23
     aa0:	82 1b       	sub	r24, r18
     aa2:	91 09       	sbc	r25, r1
     aa4:	a1 09       	sbc	r26, r1
     aa6:	b1 09       	sbc	r27, r1
     aa8:	00 97       	sbiw	r24, 0x00	; 0
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	89 f4       	brne	.+34     	; 0xad2 <__udivdi3+0x8ae>
     ab0:	e6 14       	cp	r14, r6
     ab2:	f7 04       	cpc	r15, r7
     ab4:	08 05       	cpc	r16, r8
     ab6:	19 05       	cpc	r17, r9
     ab8:	08 f4       	brcc	.+2      	; 0xabc <__udivdi3+0x898>
     aba:	f2 c1       	rjmp	.+996    	; 0xea0 <__udivdi3+0xc7c>
     abc:	6d a4       	ldd	r6, Y+45	; 0x2d
     abe:	7e a4       	ldd	r7, Y+46	; 0x2e
     ac0:	8f a4       	ldd	r8, Y+47	; 0x2f
     ac2:	98 a8       	ldd	r9, Y+48	; 0x30
     ac4:	62 14       	cp	r6, r2
     ac6:	73 04       	cpc	r7, r3
     ac8:	84 04       	cpc	r8, r4
     aca:	95 04       	cpc	r9, r5
     acc:	08 f0       	brcs	.+2      	; 0xad0 <__udivdi3+0x8ac>
     ace:	e8 c1       	rjmp	.+976    	; 0xea0 <__udivdi3+0xc7c>
     ad0:	f3 c1       	rjmp	.+998    	; 0xeb8 <__udivdi3+0xc94>
     ad2:	6e 96       	adiw	r28, 0x1e	; 30
     ad4:	8f af       	std	Y+63, r24	; 0x3f
     ad6:	6e 97       	sbiw	r28, 0x1e	; 30
     ad8:	08 2e       	mov	r0, r24
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <__udivdi3+0x8c0>
     adc:	ee 0c       	add	r14, r14
     ade:	ff 1c       	adc	r15, r15
     ae0:	00 1f       	adc	r16, r16
     ae2:	11 1f       	adc	r17, r17
     ae4:	0a 94       	dec	r0
     ae6:	d2 f7       	brpl	.-12     	; 0xadc <__udivdi3+0x8b8>
     ae8:	6a 2d       	mov	r22, r10
     aea:	68 1b       	sub	r22, r24
     aec:	d2 01       	movw	r26, r4
     aee:	c1 01       	movw	r24, r2
     af0:	06 2e       	mov	r0, r22
     af2:	04 c0       	rjmp	.+8      	; 0xafc <__udivdi3+0x8d8>
     af4:	b6 95       	lsr	r27
     af6:	a7 95       	ror	r26
     af8:	97 95       	ror	r25
     afa:	87 95       	ror	r24
     afc:	0a 94       	dec	r0
     afe:	d2 f7       	brpl	.-12     	; 0xaf4 <__udivdi3+0x8d0>
     b00:	5c 01       	movw	r10, r24
     b02:	6d 01       	movw	r12, r26
     b04:	ae 28       	or	r10, r14
     b06:	bf 28       	or	r11, r15
     b08:	c0 2a       	or	r12, r16
     b0a:	d1 2a       	or	r13, r17
     b0c:	ad a2       	std	Y+37, r10	; 0x25
     b0e:	be a2       	std	Y+38, r11	; 0x26
     b10:	cf a2       	std	Y+39, r12	; 0x27
     b12:	d8 a6       	std	Y+40, r13	; 0x28
     b14:	72 01       	movw	r14, r4
     b16:	61 01       	movw	r12, r2
     b18:	6e 96       	adiw	r28, 0x1e	; 30
     b1a:	0f ac       	ldd	r0, Y+63	; 0x3f
     b1c:	6e 97       	sbiw	r28, 0x1e	; 30
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <__udivdi3+0x904>
     b20:	cc 0c       	add	r12, r12
     b22:	dd 1c       	adc	r13, r13
     b24:	ee 1c       	adc	r14, r14
     b26:	ff 1c       	adc	r15, r15
     b28:	0a 94       	dec	r0
     b2a:	d2 f7       	brpl	.-12     	; 0xb20 <__udivdi3+0x8fc>
     b2c:	c9 a2       	std	Y+33, r12	; 0x21
     b2e:	da a2       	std	Y+34, r13	; 0x22
     b30:	eb a2       	std	Y+35, r14	; 0x23
     b32:	fc a2       	std	Y+36, r15	; 0x24
     b34:	64 01       	movw	r12, r8
     b36:	53 01       	movw	r10, r6
     b38:	06 2e       	mov	r0, r22
     b3a:	04 c0       	rjmp	.+8      	; 0xb44 <__udivdi3+0x920>
     b3c:	d6 94       	lsr	r13
     b3e:	c7 94       	ror	r12
     b40:	b7 94       	ror	r11
     b42:	a7 94       	ror	r10
     b44:	0a 94       	dec	r0
     b46:	d2 f7       	brpl	.-12     	; 0xb3c <__udivdi3+0x918>
     b48:	d4 01       	movw	r26, r8
     b4a:	c3 01       	movw	r24, r6
     b4c:	6e 96       	adiw	r28, 0x1e	; 30
     b4e:	0f ac       	ldd	r0, Y+63	; 0x3f
     b50:	6e 97       	sbiw	r28, 0x1e	; 30
     b52:	04 c0       	rjmp	.+8      	; 0xb5c <__udivdi3+0x938>
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	aa 1f       	adc	r26, r26
     b5a:	bb 1f       	adc	r27, r27
     b5c:	0a 94       	dec	r0
     b5e:	d2 f7       	brpl	.-12     	; 0xb54 <__udivdi3+0x930>
     b60:	ed a4       	ldd	r14, Y+45	; 0x2d
     b62:	fe a4       	ldd	r15, Y+46	; 0x2e
     b64:	0f a5       	ldd	r16, Y+47	; 0x2f
     b66:	18 a9       	ldd	r17, Y+48	; 0x30
     b68:	04 c0       	rjmp	.+8      	; 0xb72 <__udivdi3+0x94e>
     b6a:	16 95       	lsr	r17
     b6c:	07 95       	ror	r16
     b6e:	f7 94       	ror	r15
     b70:	e7 94       	ror	r14
     b72:	6a 95       	dec	r22
     b74:	d2 f7       	brpl	.-12     	; 0xb6a <__udivdi3+0x946>
     b76:	37 01       	movw	r6, r14
     b78:	48 01       	movw	r8, r16
     b7a:	68 2a       	or	r6, r24
     b7c:	79 2a       	or	r7, r25
     b7e:	8a 2a       	or	r8, r26
     b80:	9b 2a       	or	r9, r27
     b82:	6d 8e       	std	Y+29, r6	; 0x1d
     b84:	7e 8e       	std	Y+30, r7	; 0x1e
     b86:	8f 8e       	std	Y+31, r8	; 0x1f
     b88:	98 a2       	std	Y+32, r9	; 0x20
     b8a:	ed a0       	ldd	r14, Y+37	; 0x25
     b8c:	fe a0       	ldd	r15, Y+38	; 0x26
     b8e:	0f a1       	ldd	r16, Y+39	; 0x27
     b90:	18 a5       	ldd	r17, Y+40	; 0x28
     b92:	38 01       	movw	r6, r16
     b94:	88 24       	eor	r8, r8
     b96:	99 24       	eor	r9, r9
     b98:	98 01       	movw	r18, r16
     b9a:	87 01       	movw	r16, r14
     b9c:	20 70       	andi	r18, 0x00	; 0
     b9e:	30 70       	andi	r19, 0x00	; 0
     ba0:	65 96       	adiw	r28, 0x15	; 21
     ba2:	0c af       	std	Y+60, r16	; 0x3c
     ba4:	1d af       	std	Y+61, r17	; 0x3d
     ba6:	2e af       	std	Y+62, r18	; 0x3e
     ba8:	3f af       	std	Y+63, r19	; 0x3f
     baa:	65 97       	sbiw	r28, 0x15	; 21
     bac:	c6 01       	movw	r24, r12
     bae:	b5 01       	movw	r22, r10
     bb0:	a4 01       	movw	r20, r8
     bb2:	93 01       	movw	r18, r6
     bb4:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
     bb8:	7b 01       	movw	r14, r22
     bba:	8c 01       	movw	r16, r24
     bbc:	c6 01       	movw	r24, r12
     bbe:	b5 01       	movw	r22, r10
     bc0:	a4 01       	movw	r20, r8
     bc2:	93 01       	movw	r18, r6
     bc4:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
     bc8:	c9 01       	movw	r24, r18
     bca:	da 01       	movw	r26, r20
     bcc:	1c 01       	movw	r2, r24
     bce:	2d 01       	movw	r4, r26
     bd0:	c2 01       	movw	r24, r4
     bd2:	b1 01       	movw	r22, r2
     bd4:	65 96       	adiw	r28, 0x15	; 21
     bd6:	2c ad       	ldd	r18, Y+60	; 0x3c
     bd8:	3d ad       	ldd	r19, Y+61	; 0x3d
     bda:	4e ad       	ldd	r20, Y+62	; 0x3e
     bdc:	5f ad       	ldd	r21, Y+63	; 0x3f
     bde:	65 97       	sbiw	r28, 0x15	; 21
     be0:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
     be4:	9b 01       	movw	r18, r22
     be6:	ac 01       	movw	r20, r24
     be8:	87 01       	movw	r16, r14
     bea:	ff 24       	eor	r15, r15
     bec:	ee 24       	eor	r14, r14
     bee:	ad 8c       	ldd	r10, Y+29	; 0x1d
     bf0:	be 8c       	ldd	r11, Y+30	; 0x1e
     bf2:	cf 8c       	ldd	r12, Y+31	; 0x1f
     bf4:	d8 a0       	ldd	r13, Y+32	; 0x20
     bf6:	c6 01       	movw	r24, r12
     bf8:	aa 27       	eor	r26, r26
     bfa:	bb 27       	eor	r27, r27
     bfc:	57 01       	movw	r10, r14
     bfe:	68 01       	movw	r12, r16
     c00:	a8 2a       	or	r10, r24
     c02:	b9 2a       	or	r11, r25
     c04:	ca 2a       	or	r12, r26
     c06:	db 2a       	or	r13, r27
     c08:	a2 16       	cp	r10, r18
     c0a:	b3 06       	cpc	r11, r19
     c0c:	c4 06       	cpc	r12, r20
     c0e:	d5 06       	cpc	r13, r21
     c10:	00 f5       	brcc	.+64     	; 0xc52 <__udivdi3+0xa2e>
     c12:	08 94       	sec
     c14:	21 08       	sbc	r2, r1
     c16:	31 08       	sbc	r3, r1
     c18:	41 08       	sbc	r4, r1
     c1a:	51 08       	sbc	r5, r1
     c1c:	ed a0       	ldd	r14, Y+37	; 0x25
     c1e:	fe a0       	ldd	r15, Y+38	; 0x26
     c20:	0f a1       	ldd	r16, Y+39	; 0x27
     c22:	18 a5       	ldd	r17, Y+40	; 0x28
     c24:	ae 0c       	add	r10, r14
     c26:	bf 1c       	adc	r11, r15
     c28:	c0 1e       	adc	r12, r16
     c2a:	d1 1e       	adc	r13, r17
     c2c:	ae 14       	cp	r10, r14
     c2e:	bf 04       	cpc	r11, r15
     c30:	c0 06       	cpc	r12, r16
     c32:	d1 06       	cpc	r13, r17
     c34:	70 f0       	brcs	.+28     	; 0xc52 <__udivdi3+0xa2e>
     c36:	a2 16       	cp	r10, r18
     c38:	b3 06       	cpc	r11, r19
     c3a:	c4 06       	cpc	r12, r20
     c3c:	d5 06       	cpc	r13, r21
     c3e:	48 f4       	brcc	.+18     	; 0xc52 <__udivdi3+0xa2e>
     c40:	08 94       	sec
     c42:	21 08       	sbc	r2, r1
     c44:	31 08       	sbc	r3, r1
     c46:	41 08       	sbc	r4, r1
     c48:	51 08       	sbc	r5, r1
     c4a:	ae 0c       	add	r10, r14
     c4c:	bf 1c       	adc	r11, r15
     c4e:	c0 1e       	adc	r12, r16
     c50:	d1 1e       	adc	r13, r17
     c52:	a2 1a       	sub	r10, r18
     c54:	b3 0a       	sbc	r11, r19
     c56:	c4 0a       	sbc	r12, r20
     c58:	d5 0a       	sbc	r13, r21
     c5a:	c6 01       	movw	r24, r12
     c5c:	b5 01       	movw	r22, r10
     c5e:	a4 01       	movw	r20, r8
     c60:	93 01       	movw	r18, r6
     c62:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
     c66:	7b 01       	movw	r14, r22
     c68:	8c 01       	movw	r16, r24
     c6a:	c6 01       	movw	r24, r12
     c6c:	b5 01       	movw	r22, r10
     c6e:	a4 01       	movw	r20, r8
     c70:	93 01       	movw	r18, r6
     c72:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
     c76:	c9 01       	movw	r24, r18
     c78:	da 01       	movw	r26, r20
     c7a:	3c 01       	movw	r6, r24
     c7c:	4d 01       	movw	r8, r26
     c7e:	c4 01       	movw	r24, r8
     c80:	b3 01       	movw	r22, r6
     c82:	65 96       	adiw	r28, 0x15	; 21
     c84:	2c ad       	ldd	r18, Y+60	; 0x3c
     c86:	3d ad       	ldd	r19, Y+61	; 0x3d
     c88:	4e ad       	ldd	r20, Y+62	; 0x3e
     c8a:	5f ad       	ldd	r21, Y+63	; 0x3f
     c8c:	65 97       	sbiw	r28, 0x15	; 21
     c8e:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
     c92:	9b 01       	movw	r18, r22
     c94:	ac 01       	movw	r20, r24
     c96:	87 01       	movw	r16, r14
     c98:	ff 24       	eor	r15, r15
     c9a:	ee 24       	eor	r14, r14
     c9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c9e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ca0:	af 8d       	ldd	r26, Y+31	; 0x1f
     ca2:	b8 a1       	ldd	r27, Y+32	; 0x20
     ca4:	a0 70       	andi	r26, 0x00	; 0
     ca6:	b0 70       	andi	r27, 0x00	; 0
     ca8:	57 01       	movw	r10, r14
     caa:	68 01       	movw	r12, r16
     cac:	a8 2a       	or	r10, r24
     cae:	b9 2a       	or	r11, r25
     cb0:	ca 2a       	or	r12, r26
     cb2:	db 2a       	or	r13, r27
     cb4:	a2 16       	cp	r10, r18
     cb6:	b3 06       	cpc	r11, r19
     cb8:	c4 06       	cpc	r12, r20
     cba:	d5 06       	cpc	r13, r21
     cbc:	00 f5       	brcc	.+64     	; 0xcfe <__udivdi3+0xada>
     cbe:	08 94       	sec
     cc0:	61 08       	sbc	r6, r1
     cc2:	71 08       	sbc	r7, r1
     cc4:	81 08       	sbc	r8, r1
     cc6:	91 08       	sbc	r9, r1
     cc8:	6d a1       	ldd	r22, Y+37	; 0x25
     cca:	7e a1       	ldd	r23, Y+38	; 0x26
     ccc:	8f a1       	ldd	r24, Y+39	; 0x27
     cce:	98 a5       	ldd	r25, Y+40	; 0x28
     cd0:	a6 0e       	add	r10, r22
     cd2:	b7 1e       	adc	r11, r23
     cd4:	c8 1e       	adc	r12, r24
     cd6:	d9 1e       	adc	r13, r25
     cd8:	a6 16       	cp	r10, r22
     cda:	b7 06       	cpc	r11, r23
     cdc:	c8 06       	cpc	r12, r24
     cde:	d9 06       	cpc	r13, r25
     ce0:	70 f0       	brcs	.+28     	; 0xcfe <__udivdi3+0xada>
     ce2:	a2 16       	cp	r10, r18
     ce4:	b3 06       	cpc	r11, r19
     ce6:	c4 06       	cpc	r12, r20
     ce8:	d5 06       	cpc	r13, r21
     cea:	48 f4       	brcc	.+18     	; 0xcfe <__udivdi3+0xada>
     cec:	08 94       	sec
     cee:	61 08       	sbc	r6, r1
     cf0:	71 08       	sbc	r7, r1
     cf2:	81 08       	sbc	r8, r1
     cf4:	91 08       	sbc	r9, r1
     cf6:	a6 0e       	add	r10, r22
     cf8:	b7 1e       	adc	r11, r23
     cfa:	c8 1e       	adc	r12, r24
     cfc:	d9 1e       	adc	r13, r25
     cfe:	d6 01       	movw	r26, r12
     d00:	c5 01       	movw	r24, r10
     d02:	82 1b       	sub	r24, r18
     d04:	93 0b       	sbc	r25, r19
     d06:	a4 0b       	sbc	r26, r20
     d08:	b5 0b       	sbc	r27, r21
     d0a:	89 8f       	std	Y+25, r24	; 0x19
     d0c:	9a 8f       	std	Y+26, r25	; 0x1a
     d0e:	ab 8f       	std	Y+27, r26	; 0x1b
     d10:	bc 8f       	std	Y+28, r27	; 0x1c
     d12:	d1 01       	movw	r26, r2
     d14:	99 27       	eor	r25, r25
     d16:	88 27       	eor	r24, r24
     d18:	64 01       	movw	r12, r8
     d1a:	53 01       	movw	r10, r6
     d1c:	a8 2a       	or	r10, r24
     d1e:	b9 2a       	or	r11, r25
     d20:	ca 2a       	or	r12, r26
     d22:	db 2a       	or	r13, r27
     d24:	a9 aa       	std	Y+49, r10	; 0x31
     d26:	ba aa       	std	Y+50, r11	; 0x32
     d28:	cb aa       	std	Y+51, r12	; 0x33
     d2a:	dc aa       	std	Y+52, r13	; 0x34
     d2c:	86 01       	movw	r16, r12
     d2e:	75 01       	movw	r14, r10
     d30:	2f ef       	ldi	r18, 0xFF	; 255
     d32:	3f ef       	ldi	r19, 0xFF	; 255
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	e2 22       	and	r14, r18
     d3a:	f3 22       	and	r15, r19
     d3c:	04 23       	and	r16, r20
     d3e:	15 23       	and	r17, r21
     d40:	a6 01       	movw	r20, r12
     d42:	66 27       	eor	r22, r22
     d44:	77 27       	eor	r23, r23
     d46:	6d 96       	adiw	r28, 0x1d	; 29
     d48:	4c af       	std	Y+60, r20	; 0x3c
     d4a:	5d af       	std	Y+61, r21	; 0x3d
     d4c:	6e af       	std	Y+62, r22	; 0x3e
     d4e:	7f af       	std	Y+63, r23	; 0x3f
     d50:	6d 97       	sbiw	r28, 0x1d	; 29
     d52:	a9 a0       	ldd	r10, Y+33	; 0x21
     d54:	ba a0       	ldd	r11, Y+34	; 0x22
     d56:	cb a0       	ldd	r12, Y+35	; 0x23
     d58:	dc a0       	ldd	r13, Y+36	; 0x24
     d5a:	6f ef       	ldi	r22, 0xFF	; 255
     d5c:	7f ef       	ldi	r23, 0xFF	; 255
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	a6 22       	and	r10, r22
     d64:	b7 22       	and	r11, r23
     d66:	c8 22       	and	r12, r24
     d68:	d9 22       	and	r13, r25
     d6a:	89 a1       	ldd	r24, Y+33	; 0x21
     d6c:	9a a1       	ldd	r25, Y+34	; 0x22
     d6e:	ab a1       	ldd	r26, Y+35	; 0x23
     d70:	bc a1       	ldd	r27, Y+36	; 0x24
     d72:	1d 01       	movw	r2, r26
     d74:	44 24       	eor	r4, r4
     d76:	55 24       	eor	r5, r5
     d78:	c8 01       	movw	r24, r16
     d7a:	b7 01       	movw	r22, r14
     d7c:	a6 01       	movw	r20, r12
     d7e:	95 01       	movw	r18, r10
     d80:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
     d84:	69 96       	adiw	r28, 0x19	; 25
     d86:	6c af       	std	Y+60, r22	; 0x3c
     d88:	7d af       	std	Y+61, r23	; 0x3d
     d8a:	8e af       	std	Y+62, r24	; 0x3e
     d8c:	9f af       	std	Y+63, r25	; 0x3f
     d8e:	69 97       	sbiw	r28, 0x19	; 25
     d90:	c8 01       	movw	r24, r16
     d92:	b7 01       	movw	r22, r14
     d94:	a2 01       	movw	r20, r4
     d96:	91 01       	movw	r18, r2
     d98:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
     d9c:	3b 01       	movw	r6, r22
     d9e:	4c 01       	movw	r8, r24
     da0:	6d 96       	adiw	r28, 0x1d	; 29
     da2:	6c ad       	ldd	r22, Y+60	; 0x3c
     da4:	7d ad       	ldd	r23, Y+61	; 0x3d
     da6:	8e ad       	ldd	r24, Y+62	; 0x3e
     da8:	9f ad       	ldd	r25, Y+63	; 0x3f
     daa:	6d 97       	sbiw	r28, 0x1d	; 29
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
     db4:	7b 01       	movw	r14, r22
     db6:	8c 01       	movw	r16, r24
     db8:	6d 96       	adiw	r28, 0x1d	; 29
     dba:	6c ad       	ldd	r22, Y+60	; 0x3c
     dbc:	7d ad       	ldd	r23, Y+61	; 0x3d
     dbe:	8e ad       	ldd	r24, Y+62	; 0x3e
     dc0:	9f ad       	ldd	r25, Y+63	; 0x3f
     dc2:	6d 97       	sbiw	r28, 0x1d	; 29
     dc4:	a2 01       	movw	r20, r4
     dc6:	91 01       	movw	r18, r2
     dc8:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
     dcc:	5b 01       	movw	r10, r22
     dce:	6c 01       	movw	r12, r24
     dd0:	a8 01       	movw	r20, r16
     dd2:	97 01       	movw	r18, r14
     dd4:	26 0d       	add	r18, r6
     dd6:	37 1d       	adc	r19, r7
     dd8:	48 1d       	adc	r20, r8
     dda:	59 1d       	adc	r21, r9
     ddc:	69 96       	adiw	r28, 0x19	; 25
     dde:	6c ac       	ldd	r6, Y+60	; 0x3c
     de0:	7d ac       	ldd	r7, Y+61	; 0x3d
     de2:	8e ac       	ldd	r8, Y+62	; 0x3e
     de4:	9f ac       	ldd	r9, Y+63	; 0x3f
     de6:	69 97       	sbiw	r28, 0x19	; 25
     de8:	c4 01       	movw	r24, r8
     dea:	aa 27       	eor	r26, r26
     dec:	bb 27       	eor	r27, r27
     dee:	28 0f       	add	r18, r24
     df0:	39 1f       	adc	r19, r25
     df2:	4a 1f       	adc	r20, r26
     df4:	5b 1f       	adc	r21, r27
     df6:	2e 15       	cp	r18, r14
     df8:	3f 05       	cpc	r19, r15
     dfa:	40 07       	cpc	r20, r16
     dfc:	51 07       	cpc	r21, r17
     dfe:	48 f4       	brcc	.+18     	; 0xe12 <__udivdi3+0xbee>
     e00:	e1 2c       	mov	r14, r1
     e02:	f1 2c       	mov	r15, r1
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	06 2f       	mov	r16, r22
     e08:	11 2d       	mov	r17, r1
     e0a:	ae 0c       	add	r10, r14
     e0c:	bf 1c       	adc	r11, r15
     e0e:	c0 1e       	adc	r12, r16
     e10:	d1 1e       	adc	r13, r17
     e12:	ca 01       	movw	r24, r20
     e14:	aa 27       	eor	r26, r26
     e16:	bb 27       	eor	r27, r27
     e18:	bc 01       	movw	r22, r24
     e1a:	cd 01       	movw	r24, r26
     e1c:	6a 0d       	add	r22, r10
     e1e:	7b 1d       	adc	r23, r11
     e20:	8c 1d       	adc	r24, r12
     e22:	9d 1d       	adc	r25, r13
     e24:	69 8c       	ldd	r6, Y+25	; 0x19
     e26:	7a 8c       	ldd	r7, Y+26	; 0x1a
     e28:	8b 8c       	ldd	r8, Y+27	; 0x1b
     e2a:	9c 8c       	ldd	r9, Y+28	; 0x1c
     e2c:	66 16       	cp	r6, r22
     e2e:	77 06       	cpc	r7, r23
     e30:	88 06       	cpc	r8, r24
     e32:	99 06       	cpc	r9, r25
     e34:	40 f1       	brcs	.+80     	; 0xe86 <__udivdi3+0xc62>
     e36:	66 15       	cp	r22, r6
     e38:	77 05       	cpc	r23, r7
     e3a:	88 05       	cpc	r24, r8
     e3c:	99 05       	cpc	r25, r9
     e3e:	09 f0       	breq	.+2      	; 0xe42 <__udivdi3+0xc1e>
     e40:	43 c0       	rjmp	.+134    	; 0xec8 <__udivdi3+0xca4>
     e42:	d9 01       	movw	r26, r18
     e44:	99 27       	eor	r25, r25
     e46:	88 27       	eor	r24, r24
     e48:	69 96       	adiw	r28, 0x19	; 25
     e4a:	2c ad       	ldd	r18, Y+60	; 0x3c
     e4c:	3d ad       	ldd	r19, Y+61	; 0x3d
     e4e:	4e ad       	ldd	r20, Y+62	; 0x3e
     e50:	5f ad       	ldd	r21, Y+63	; 0x3f
     e52:	69 97       	sbiw	r28, 0x19	; 25
     e54:	40 70       	andi	r20, 0x00	; 0
     e56:	50 70       	andi	r21, 0x00	; 0
     e58:	82 0f       	add	r24, r18
     e5a:	93 1f       	adc	r25, r19
     e5c:	a4 1f       	adc	r26, r20
     e5e:	b5 1f       	adc	r27, r21
     e60:	2d a5       	ldd	r18, Y+45	; 0x2d
     e62:	3e a5       	ldd	r19, Y+46	; 0x2e
     e64:	4f a5       	ldd	r20, Y+47	; 0x2f
     e66:	58 a9       	ldd	r21, Y+48	; 0x30
     e68:	6e 96       	adiw	r28, 0x1e	; 30
     e6a:	0f ac       	ldd	r0, Y+63	; 0x3f
     e6c:	6e 97       	sbiw	r28, 0x1e	; 30
     e6e:	04 c0       	rjmp	.+8      	; 0xe78 <__udivdi3+0xc54>
     e70:	22 0f       	add	r18, r18
     e72:	33 1f       	adc	r19, r19
     e74:	44 1f       	adc	r20, r20
     e76:	55 1f       	adc	r21, r21
     e78:	0a 94       	dec	r0
     e7a:	d2 f7       	brpl	.-12     	; 0xe70 <__udivdi3+0xc4c>
     e7c:	28 17       	cp	r18, r24
     e7e:	39 07       	cpc	r19, r25
     e80:	4a 07       	cpc	r20, r26
     e82:	5b 07       	cpc	r21, r27
     e84:	08 f5       	brcc	.+66     	; 0xec8 <__udivdi3+0xca4>
     e86:	09 a9       	ldd	r16, Y+49	; 0x31
     e88:	1a a9       	ldd	r17, Y+50	; 0x32
     e8a:	2b a9       	ldd	r18, Y+51	; 0x33
     e8c:	3c a9       	ldd	r19, Y+52	; 0x34
     e8e:	01 50       	subi	r16, 0x01	; 1
     e90:	10 40       	sbci	r17, 0x00	; 0
     e92:	20 40       	sbci	r18, 0x00	; 0
     e94:	30 40       	sbci	r19, 0x00	; 0
     e96:	09 ab       	std	Y+49, r16	; 0x31
     e98:	1a ab       	std	Y+50, r17	; 0x32
     e9a:	2b ab       	std	Y+51, r18	; 0x33
     e9c:	3c ab       	std	Y+52, r19	; 0x34
     e9e:	14 c0       	rjmp	.+40     	; 0xec8 <__udivdi3+0xca4>
     ea0:	66 24       	eor	r6, r6
     ea2:	77 24       	eor	r7, r7
     ea4:	43 01       	movw	r8, r6
     ea6:	21 e0       	ldi	r18, 0x01	; 1
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	29 ab       	std	Y+49, r18	; 0x31
     eb0:	3a ab       	std	Y+50, r19	; 0x32
     eb2:	4b ab       	std	Y+51, r20	; 0x33
     eb4:	5c ab       	std	Y+52, r21	; 0x34
     eb6:	0b c0       	rjmp	.+22     	; 0xece <__udivdi3+0xcaa>
     eb8:	66 24       	eor	r6, r6
     eba:	77 24       	eor	r7, r7
     ebc:	43 01       	movw	r8, r6
     ebe:	19 aa       	std	Y+49, r1	; 0x31
     ec0:	1a aa       	std	Y+50, r1	; 0x32
     ec2:	1b aa       	std	Y+51, r1	; 0x33
     ec4:	1c aa       	std	Y+52, r1	; 0x34
     ec6:	03 c0       	rjmp	.+6      	; 0xece <__udivdi3+0xcaa>
     ec8:	66 24       	eor	r6, r6
     eca:	77 24       	eor	r7, r7
     ecc:	43 01       	movw	r8, r6
     ece:	fe 01       	movw	r30, r28
     ed0:	71 96       	adiw	r30, 0x11	; 17
     ed2:	88 e0       	ldi	r24, 0x08	; 8
     ed4:	df 01       	movw	r26, r30
     ed6:	1d 92       	st	X+, r1
     ed8:	8a 95       	dec	r24
     eda:	e9 f7       	brne	.-6      	; 0xed6 <__udivdi3+0xcb2>
     edc:	a9 a8       	ldd	r10, Y+49	; 0x31
     ede:	ba a8       	ldd	r11, Y+50	; 0x32
     ee0:	cb a8       	ldd	r12, Y+51	; 0x33
     ee2:	dc a8       	ldd	r13, Y+52	; 0x34
     ee4:	a9 8a       	std	Y+17, r10	; 0x11
     ee6:	ba 8a       	std	Y+18, r11	; 0x12
     ee8:	cb 8a       	std	Y+19, r12	; 0x13
     eea:	dc 8a       	std	Y+20, r13	; 0x14
     eec:	6d 8a       	std	Y+21, r6	; 0x15
     eee:	7e 8a       	std	Y+22, r7	; 0x16
     ef0:	8f 8a       	std	Y+23, r8	; 0x17
     ef2:	98 8e       	std	Y+24, r9	; 0x18
     ef4:	29 a9       	ldd	r18, Y+49	; 0x31
     ef6:	3a 89       	ldd	r19, Y+18	; 0x12
     ef8:	4b 89       	ldd	r20, Y+19	; 0x13
     efa:	5c 89       	ldd	r21, Y+20	; 0x14
     efc:	66 2d       	mov	r22, r6
     efe:	7e 89       	ldd	r23, Y+22	; 0x16
     f00:	8f 89       	ldd	r24, Y+23	; 0x17
     f02:	98 8d       	ldd	r25, Y+24	; 0x18
     f04:	c2 5a       	subi	r28, 0xA2	; 162
     f06:	df 4f       	sbci	r29, 0xFF	; 255
     f08:	e2 e1       	ldi	r30, 0x12	; 18
     f0a:	0c 94 eb 55 	jmp	0xabd6	; 0xabd6 <__epilogue_restores__>

00000f0e <__umoddi3>:
     f0e:	ab e5       	ldi	r26, 0x5B	; 91
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	ed e8       	ldi	r30, 0x8D	; 141
     f14:	f7 e0       	ldi	r31, 0x07	; 7
     f16:	0c 94 cf 55 	jmp	0xab9e	; 0xab9e <__prologue_saves__>
     f1a:	a8 e0       	ldi	r26, 0x08	; 8
     f1c:	4e 01       	movw	r8, r28
     f1e:	08 94       	sec
     f20:	81 1c       	adc	r8, r1
     f22:	91 1c       	adc	r9, r1
     f24:	f4 01       	movw	r30, r8
     f26:	6a 2e       	mov	r6, r26
     f28:	11 92       	st	Z+, r1
     f2a:	6a 94       	dec	r6
     f2c:	e9 f7       	brne	.-6      	; 0xf28 <__umoddi3+0x1a>
     f2e:	29 83       	std	Y+1, r18	; 0x01
     f30:	3a 83       	std	Y+2, r19	; 0x02
     f32:	4b 83       	std	Y+3, r20	; 0x03
     f34:	5c 83       	std	Y+4, r21	; 0x04
     f36:	6d 83       	std	Y+5, r22	; 0x05
     f38:	7e 83       	std	Y+6, r23	; 0x06
     f3a:	8f 83       	std	Y+7, r24	; 0x07
     f3c:	98 87       	std	Y+8, r25	; 0x08
     f3e:	ce 01       	movw	r24, r28
     f40:	09 96       	adiw	r24, 0x09	; 9
     f42:	fc 01       	movw	r30, r24
     f44:	11 92       	st	Z+, r1
     f46:	aa 95       	dec	r26
     f48:	e9 f7       	brne	.-6      	; 0xf44 <__umoddi3+0x36>
     f4a:	a9 86       	std	Y+9, r10	; 0x09
     f4c:	ba 86       	std	Y+10, r11	; 0x0a
     f4e:	cb 86       	std	Y+11, r12	; 0x0b
     f50:	dc 86       	std	Y+12, r13	; 0x0c
     f52:	ed 86       	std	Y+13, r14	; 0x0d
     f54:	fe 86       	std	Y+14, r15	; 0x0e
     f56:	0f 87       	std	Y+15, r16	; 0x0f
     f58:	18 8b       	std	Y+16, r17	; 0x10
     f5a:	29 84       	ldd	r2, Y+9	; 0x09
     f5c:	3a 84       	ldd	r3, Y+10	; 0x0a
     f5e:	4b 84       	ldd	r4, Y+11	; 0x0b
     f60:	5c 84       	ldd	r5, Y+12	; 0x0c
     f62:	ad 84       	ldd	r10, Y+13	; 0x0d
     f64:	be 84       	ldd	r11, Y+14	; 0x0e
     f66:	cf 84       	ldd	r12, Y+15	; 0x0f
     f68:	d8 88       	ldd	r13, Y+16	; 0x10
     f6a:	29 81       	ldd	r18, Y+1	; 0x01
     f6c:	3a 81       	ldd	r19, Y+2	; 0x02
     f6e:	4b 81       	ldd	r20, Y+3	; 0x03
     f70:	5c 81       	ldd	r21, Y+4	; 0x04
     f72:	69 96       	adiw	r28, 0x19	; 25
     f74:	2f af       	std	Y+63, r18	; 0x3f
     f76:	69 97       	sbiw	r28, 0x19	; 25
     f78:	6a 96       	adiw	r28, 0x1a	; 26
     f7a:	3f af       	std	Y+63, r19	; 0x3f
     f7c:	6a 97       	sbiw	r28, 0x1a	; 26
     f7e:	6b 96       	adiw	r28, 0x1b	; 27
     f80:	4f af       	std	Y+63, r20	; 0x3f
     f82:	6b 97       	sbiw	r28, 0x1b	; 27
     f84:	6c 96       	adiw	r28, 0x1c	; 28
     f86:	5f af       	std	Y+63, r21	; 0x3f
     f88:	6c 97       	sbiw	r28, 0x1c	; 28
     f8a:	6c 96       	adiw	r28, 0x1c	; 28
     f8c:	6c ac       	ldd	r6, Y+60	; 0x3c
     f8e:	7d ac       	ldd	r7, Y+61	; 0x3d
     f90:	8e ac       	ldd	r8, Y+62	; 0x3e
     f92:	9f ac       	ldd	r9, Y+63	; 0x3f
     f94:	6c 97       	sbiw	r28, 0x1c	; 28
     f96:	69 aa       	std	Y+49, r6	; 0x31
     f98:	7a aa       	std	Y+50, r7	; 0x32
     f9a:	8b aa       	std	Y+51, r8	; 0x33
     f9c:	9c aa       	std	Y+52, r9	; 0x34
     f9e:	6d 81       	ldd	r22, Y+5	; 0x05
     fa0:	7e 81       	ldd	r23, Y+6	; 0x06
     fa2:	8f 81       	ldd	r24, Y+7	; 0x07
     fa4:	98 85       	ldd	r25, Y+8	; 0x08
     fa6:	3b 01       	movw	r6, r22
     fa8:	4c 01       	movw	r8, r24
     faa:	6d aa       	std	Y+53, r6	; 0x35
     fac:	7e aa       	std	Y+54, r7	; 0x36
     fae:	8f aa       	std	Y+55, r8	; 0x37
     fb0:	98 ae       	std	Y+56, r9	; 0x38
     fb2:	a1 14       	cp	r10, r1
     fb4:	b1 04       	cpc	r11, r1
     fb6:	c1 04       	cpc	r12, r1
     fb8:	d1 04       	cpc	r13, r1
     fba:	09 f0       	breq	.+2      	; 0xfbe <__umoddi3+0xb0>
     fbc:	04 c3       	rjmp	.+1544   	; 0x15c6 <__stack+0x4c7>
     fbe:	62 14       	cp	r6, r2
     fc0:	73 04       	cpc	r7, r3
     fc2:	84 04       	cpc	r8, r4
     fc4:	95 04       	cpc	r9, r5
     fc6:	08 f0       	brcs	.+2      	; 0xfca <__umoddi3+0xbc>
     fc8:	00 c1       	rjmp	.+512    	; 0x11ca <__stack+0xcb>
     fca:	00 e0       	ldi	r16, 0x00	; 0
     fcc:	20 16       	cp	r2, r16
     fce:	00 e0       	ldi	r16, 0x00	; 0
     fd0:	30 06       	cpc	r3, r16
     fd2:	01 e0       	ldi	r16, 0x01	; 1
     fd4:	40 06       	cpc	r4, r16
     fd6:	00 e0       	ldi	r16, 0x00	; 0
     fd8:	50 06       	cpc	r5, r16
     fda:	88 f4       	brcc	.+34     	; 0xffe <__umoddi3+0xf0>
     fdc:	1f ef       	ldi	r17, 0xFF	; 255
     fde:	21 16       	cp	r2, r17
     fe0:	31 04       	cpc	r3, r1
     fe2:	41 04       	cpc	r4, r1
     fe4:	51 04       	cpc	r5, r1
     fe6:	39 f0       	breq	.+14     	; 0xff6 <__umoddi3+0xe8>
     fe8:	30 f0       	brcs	.+12     	; 0xff6 <__umoddi3+0xe8>
     fea:	88 e0       	ldi	r24, 0x08	; 8
     fec:	e8 2e       	mov	r14, r24
     fee:	f1 2c       	mov	r15, r1
     ff0:	01 2d       	mov	r16, r1
     ff2:	11 2d       	mov	r17, r1
     ff4:	18 c0       	rjmp	.+48     	; 0x1026 <__umoddi3+0x118>
     ff6:	ee 24       	eor	r14, r14
     ff8:	ff 24       	eor	r15, r15
     ffa:	87 01       	movw	r16, r14
     ffc:	14 c0       	rjmp	.+40     	; 0x1026 <__umoddi3+0x118>
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	24 16       	cp	r2, r20
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	34 06       	cpc	r3, r20
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	44 06       	cpc	r4, r20
    100a:	41 e0       	ldi	r20, 0x01	; 1
    100c:	54 06       	cpc	r5, r20
    100e:	30 f0       	brcs	.+12     	; 0x101c <__umoddi3+0x10e>
    1010:	b8 e1       	ldi	r27, 0x18	; 24
    1012:	eb 2e       	mov	r14, r27
    1014:	f1 2c       	mov	r15, r1
    1016:	01 2d       	mov	r16, r1
    1018:	11 2d       	mov	r17, r1
    101a:	05 c0       	rjmp	.+10     	; 0x1026 <__umoddi3+0x118>
    101c:	a0 e1       	ldi	r26, 0x10	; 16
    101e:	ea 2e       	mov	r14, r26
    1020:	f1 2c       	mov	r15, r1
    1022:	01 2d       	mov	r16, r1
    1024:	11 2d       	mov	r17, r1
    1026:	d2 01       	movw	r26, r4
    1028:	c1 01       	movw	r24, r2
    102a:	0e 2c       	mov	r0, r14
    102c:	04 c0       	rjmp	.+8      	; 0x1036 <__umoddi3+0x128>
    102e:	b6 95       	lsr	r27
    1030:	a7 95       	ror	r26
    1032:	97 95       	ror	r25
    1034:	87 95       	ror	r24
    1036:	0a 94       	dec	r0
    1038:	d2 f7       	brpl	.-12     	; 0x102e <__umoddi3+0x120>
    103a:	8f 50       	subi	r24, 0x0F	; 15
    103c:	9e 4f       	sbci	r25, 0xFE	; 254
    103e:	dc 01       	movw	r26, r24
    1040:	2c 91       	ld	r18, X
    1042:	80 e2       	ldi	r24, 0x20	; 32
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	a0 e0       	ldi	r26, 0x00	; 0
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	8e 19       	sub	r24, r14
    104c:	9f 09       	sbc	r25, r15
    104e:	a0 0b       	sbc	r26, r16
    1050:	b1 0b       	sbc	r27, r17
    1052:	5c 01       	movw	r10, r24
    1054:	6d 01       	movw	r12, r26
    1056:	a2 1a       	sub	r10, r18
    1058:	b1 08       	sbc	r11, r1
    105a:	c1 08       	sbc	r12, r1
    105c:	d1 08       	sbc	r13, r1
    105e:	a9 ae       	std	Y+57, r10	; 0x39
    1060:	ba ae       	std	Y+58, r11	; 0x3a
    1062:	cb ae       	std	Y+59, r12	; 0x3b
    1064:	dc ae       	std	Y+60, r13	; 0x3c
    1066:	a1 14       	cp	r10, r1
    1068:	b1 04       	cpc	r11, r1
    106a:	c1 04       	cpc	r12, r1
    106c:	d1 04       	cpc	r13, r1
    106e:	09 f4       	brne	.+2      	; 0x1072 <__umoddi3+0x164>
    1070:	3f c0       	rjmp	.+126    	; 0x10f0 <__umoddi3+0x1e2>
    1072:	69 ad       	ldd	r22, Y+57	; 0x39
    1074:	06 2e       	mov	r0, r22
    1076:	04 c0       	rjmp	.+8      	; 0x1080 <__umoddi3+0x172>
    1078:	22 0c       	add	r2, r2
    107a:	33 1c       	adc	r3, r3
    107c:	44 1c       	adc	r4, r4
    107e:	55 1c       	adc	r5, r5
    1080:	0a 94       	dec	r0
    1082:	d2 f7       	brpl	.-12     	; 0x1078 <__umoddi3+0x16a>
    1084:	a4 01       	movw	r20, r8
    1086:	93 01       	movw	r18, r6
    1088:	06 2e       	mov	r0, r22
    108a:	04 c0       	rjmp	.+8      	; 0x1094 <__umoddi3+0x186>
    108c:	22 0f       	add	r18, r18
    108e:	33 1f       	adc	r19, r19
    1090:	44 1f       	adc	r20, r20
    1092:	55 1f       	adc	r21, r21
    1094:	0a 94       	dec	r0
    1096:	d2 f7       	brpl	.-12     	; 0x108c <__umoddi3+0x17e>
    1098:	80 e2       	ldi	r24, 0x20	; 32
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	8a 19       	sub	r24, r10
    109e:	9b 09       	sbc	r25, r11
    10a0:	6c 96       	adiw	r28, 0x1c	; 28
    10a2:	cc ac       	ldd	r12, Y+60	; 0x3c
    10a4:	dd ac       	ldd	r13, Y+61	; 0x3d
    10a6:	ee ac       	ldd	r14, Y+62	; 0x3e
    10a8:	ff ac       	ldd	r15, Y+63	; 0x3f
    10aa:	6c 97       	sbiw	r28, 0x1c	; 28
    10ac:	04 c0       	rjmp	.+8      	; 0x10b6 <__umoddi3+0x1a8>
    10ae:	f6 94       	lsr	r15
    10b0:	e7 94       	ror	r14
    10b2:	d7 94       	ror	r13
    10b4:	c7 94       	ror	r12
    10b6:	8a 95       	dec	r24
    10b8:	d2 f7       	brpl	.-12     	; 0x10ae <__umoddi3+0x1a0>
    10ba:	87 01       	movw	r16, r14
    10bc:	76 01       	movw	r14, r12
    10be:	e2 2a       	or	r14, r18
    10c0:	f3 2a       	or	r15, r19
    10c2:	04 2b       	or	r16, r20
    10c4:	15 2b       	or	r17, r21
    10c6:	ed aa       	std	Y+53, r14	; 0x35
    10c8:	fe aa       	std	Y+54, r15	; 0x36
    10ca:	0f ab       	std	Y+55, r16	; 0x37
    10cc:	18 af       	std	Y+56, r17	; 0x38
    10ce:	6c 96       	adiw	r28, 0x1c	; 28
    10d0:	8c ad       	ldd	r24, Y+60	; 0x3c
    10d2:	9d ad       	ldd	r25, Y+61	; 0x3d
    10d4:	ae ad       	ldd	r26, Y+62	; 0x3e
    10d6:	bf ad       	ldd	r27, Y+63	; 0x3f
    10d8:	6c 97       	sbiw	r28, 0x1c	; 28
    10da:	04 c0       	rjmp	.+8      	; 0x10e4 <__umoddi3+0x1d6>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	aa 1f       	adc	r26, r26
    10e2:	bb 1f       	adc	r27, r27
    10e4:	6a 95       	dec	r22
    10e6:	d2 f7       	brpl	.-12     	; 0x10dc <__umoddi3+0x1ce>
    10e8:	89 ab       	std	Y+49, r24	; 0x31
    10ea:	9a ab       	std	Y+50, r25	; 0x32
    10ec:	ab ab       	std	Y+51, r26	; 0x33
    10ee:	bc ab       	std	Y+52, r27	; 0x34
    10f0:	32 01       	movw	r6, r4
    10f2:	88 24       	eor	r8, r8
    10f4:	99 24       	eor	r9, r9
    10f6:	b2 01       	movw	r22, r4
    10f8:	a1 01       	movw	r20, r2
    10fa:	60 70       	andi	r22, 0x00	; 0
    10fc:	70 70       	andi	r23, 0x00	; 0
    10fe:	21 96       	adiw	r28, 0x01	; 1
    1100:	4c af       	std	Y+60, r20	; 0x3c
    1102:	5d af       	std	Y+61, r21	; 0x3d
    1104:	6e af       	std	Y+62, r22	; 0x3e
    1106:	7f af       	std	Y+63, r23	; 0x3f
    1108:	21 97       	sbiw	r28, 0x01	; 1
    110a:	6d a9       	ldd	r22, Y+53	; 0x35
    110c:	7e a9       	ldd	r23, Y+54	; 0x36
    110e:	8f a9       	ldd	r24, Y+55	; 0x37
    1110:	98 ad       	ldd	r25, Y+56	; 0x38
    1112:	a4 01       	movw	r20, r8
    1114:	93 01       	movw	r18, r6
    1116:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    111a:	7b 01       	movw	r14, r22
    111c:	8c 01       	movw	r16, r24
    111e:	6d a9       	ldd	r22, Y+53	; 0x35
    1120:	7e a9       	ldd	r23, Y+54	; 0x36
    1122:	8f a9       	ldd	r24, Y+55	; 0x37
    1124:	98 ad       	ldd	r25, Y+56	; 0x38
    1126:	a4 01       	movw	r20, r8
    1128:	93 01       	movw	r18, r6
    112a:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    112e:	ca 01       	movw	r24, r20
    1130:	b9 01       	movw	r22, r18
    1132:	21 96       	adiw	r28, 0x01	; 1
    1134:	2c ad       	ldd	r18, Y+60	; 0x3c
    1136:	3d ad       	ldd	r19, Y+61	; 0x3d
    1138:	4e ad       	ldd	r20, Y+62	; 0x3e
    113a:	5f ad       	ldd	r21, Y+63	; 0x3f
    113c:	21 97       	sbiw	r28, 0x01	; 1
    113e:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
    1142:	9b 01       	movw	r18, r22
    1144:	ac 01       	movw	r20, r24
    1146:	87 01       	movw	r16, r14
    1148:	ff 24       	eor	r15, r15
    114a:	ee 24       	eor	r14, r14
    114c:	a9 a8       	ldd	r10, Y+49	; 0x31
    114e:	ba a8       	ldd	r11, Y+50	; 0x32
    1150:	cb a8       	ldd	r12, Y+51	; 0x33
    1152:	dc a8       	ldd	r13, Y+52	; 0x34
    1154:	c6 01       	movw	r24, r12
    1156:	aa 27       	eor	r26, r26
    1158:	bb 27       	eor	r27, r27
    115a:	57 01       	movw	r10, r14
    115c:	68 01       	movw	r12, r16
    115e:	a8 2a       	or	r10, r24
    1160:	b9 2a       	or	r11, r25
    1162:	ca 2a       	or	r12, r26
    1164:	db 2a       	or	r13, r27
    1166:	a2 16       	cp	r10, r18
    1168:	b3 06       	cpc	r11, r19
    116a:	c4 06       	cpc	r12, r20
    116c:	d5 06       	cpc	r13, r21
    116e:	90 f4       	brcc	.+36     	; 0x1194 <__stack+0x95>
    1170:	a2 0c       	add	r10, r2
    1172:	b3 1c       	adc	r11, r3
    1174:	c4 1c       	adc	r12, r4
    1176:	d5 1c       	adc	r13, r5
    1178:	a2 14       	cp	r10, r2
    117a:	b3 04       	cpc	r11, r3
    117c:	c4 04       	cpc	r12, r4
    117e:	d5 04       	cpc	r13, r5
    1180:	48 f0       	brcs	.+18     	; 0x1194 <__stack+0x95>
    1182:	a2 16       	cp	r10, r18
    1184:	b3 06       	cpc	r11, r19
    1186:	c4 06       	cpc	r12, r20
    1188:	d5 06       	cpc	r13, r21
    118a:	20 f4       	brcc	.+8      	; 0x1194 <__stack+0x95>
    118c:	a2 0c       	add	r10, r2
    118e:	b3 1c       	adc	r11, r3
    1190:	c4 1c       	adc	r12, r4
    1192:	d5 1c       	adc	r13, r5
    1194:	a2 1a       	sub	r10, r18
    1196:	b3 0a       	sbc	r11, r19
    1198:	c4 0a       	sbc	r12, r20
    119a:	d5 0a       	sbc	r13, r21
    119c:	c6 01       	movw	r24, r12
    119e:	b5 01       	movw	r22, r10
    11a0:	a4 01       	movw	r20, r8
    11a2:	93 01       	movw	r18, r6
    11a4:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    11a8:	7b 01       	movw	r14, r22
    11aa:	8c 01       	movw	r16, r24
    11ac:	c6 01       	movw	r24, r12
    11ae:	b5 01       	movw	r22, r10
    11b0:	a4 01       	movw	r20, r8
    11b2:	93 01       	movw	r18, r6
    11b4:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    11b8:	ca 01       	movw	r24, r20
    11ba:	b9 01       	movw	r22, r18
    11bc:	21 96       	adiw	r28, 0x01	; 1
    11be:	2c ad       	ldd	r18, Y+60	; 0x3c
    11c0:	3d ad       	ldd	r19, Y+61	; 0x3d
    11c2:	4e ad       	ldd	r20, Y+62	; 0x3e
    11c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    11c6:	21 97       	sbiw	r28, 0x01	; 1
    11c8:	ba c1       	rjmp	.+884    	; 0x153e <__stack+0x43f>
    11ca:	21 14       	cp	r2, r1
    11cc:	31 04       	cpc	r3, r1
    11ce:	41 04       	cpc	r4, r1
    11d0:	51 04       	cpc	r5, r1
    11d2:	71 f4       	brne	.+28     	; 0x11f0 <__stack+0xf1>
    11d4:	61 e0       	ldi	r22, 0x01	; 1
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e0       	ldi	r20, 0x00	; 0
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    11e8:	c9 01       	movw	r24, r18
    11ea:	da 01       	movw	r26, r20
    11ec:	1c 01       	movw	r2, r24
    11ee:	2d 01       	movw	r4, r26
    11f0:	00 e0       	ldi	r16, 0x00	; 0
    11f2:	20 16       	cp	r2, r16
    11f4:	00 e0       	ldi	r16, 0x00	; 0
    11f6:	30 06       	cpc	r3, r16
    11f8:	01 e0       	ldi	r16, 0x01	; 1
    11fa:	40 06       	cpc	r4, r16
    11fc:	00 e0       	ldi	r16, 0x00	; 0
    11fe:	50 06       	cpc	r5, r16
    1200:	88 f4       	brcc	.+34     	; 0x1224 <__stack+0x125>
    1202:	1f ef       	ldi	r17, 0xFF	; 255
    1204:	21 16       	cp	r2, r17
    1206:	31 04       	cpc	r3, r1
    1208:	41 04       	cpc	r4, r1
    120a:	51 04       	cpc	r5, r1
    120c:	39 f0       	breq	.+14     	; 0x121c <__stack+0x11d>
    120e:	30 f0       	brcs	.+12     	; 0x121c <__stack+0x11d>
    1210:	68 e0       	ldi	r22, 0x08	; 8
    1212:	e6 2e       	mov	r14, r22
    1214:	f1 2c       	mov	r15, r1
    1216:	01 2d       	mov	r16, r1
    1218:	11 2d       	mov	r17, r1
    121a:	18 c0       	rjmp	.+48     	; 0x124c <__stack+0x14d>
    121c:	ee 24       	eor	r14, r14
    121e:	ff 24       	eor	r15, r15
    1220:	87 01       	movw	r16, r14
    1222:	14 c0       	rjmp	.+40     	; 0x124c <__stack+0x14d>
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	24 16       	cp	r2, r20
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	34 06       	cpc	r3, r20
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	44 06       	cpc	r4, r20
    1230:	41 e0       	ldi	r20, 0x01	; 1
    1232:	54 06       	cpc	r5, r20
    1234:	30 f0       	brcs	.+12     	; 0x1242 <__stack+0x143>
    1236:	58 e1       	ldi	r21, 0x18	; 24
    1238:	e5 2e       	mov	r14, r21
    123a:	f1 2c       	mov	r15, r1
    123c:	01 2d       	mov	r16, r1
    123e:	11 2d       	mov	r17, r1
    1240:	05 c0       	rjmp	.+10     	; 0x124c <__stack+0x14d>
    1242:	40 e1       	ldi	r20, 0x10	; 16
    1244:	e4 2e       	mov	r14, r20
    1246:	f1 2c       	mov	r15, r1
    1248:	01 2d       	mov	r16, r1
    124a:	11 2d       	mov	r17, r1
    124c:	d2 01       	movw	r26, r4
    124e:	c1 01       	movw	r24, r2
    1250:	0e 2c       	mov	r0, r14
    1252:	04 c0       	rjmp	.+8      	; 0x125c <__stack+0x15d>
    1254:	b6 95       	lsr	r27
    1256:	a7 95       	ror	r26
    1258:	97 95       	ror	r25
    125a:	87 95       	ror	r24
    125c:	0a 94       	dec	r0
    125e:	d2 f7       	brpl	.-12     	; 0x1254 <__stack+0x155>
    1260:	8f 50       	subi	r24, 0x0F	; 15
    1262:	9e 4f       	sbci	r25, 0xFE	; 254
    1264:	dc 01       	movw	r26, r24
    1266:	2c 91       	ld	r18, X
    1268:	30 e2       	ldi	r19, 0x20	; 32
    126a:	a3 2e       	mov	r10, r19
    126c:	b1 2c       	mov	r11, r1
    126e:	c1 2c       	mov	r12, r1
    1270:	d1 2c       	mov	r13, r1
    1272:	d6 01       	movw	r26, r12
    1274:	c5 01       	movw	r24, r10
    1276:	8e 19       	sub	r24, r14
    1278:	9f 09       	sbc	r25, r15
    127a:	a0 0b       	sbc	r26, r16
    127c:	b1 0b       	sbc	r27, r17
    127e:	7c 01       	movw	r14, r24
    1280:	8d 01       	movw	r16, r26
    1282:	e2 1a       	sub	r14, r18
    1284:	f1 08       	sbc	r15, r1
    1286:	01 09       	sbc	r16, r1
    1288:	11 09       	sbc	r17, r1
    128a:	e9 ae       	std	Y+57, r14	; 0x39
    128c:	fa ae       	std	Y+58, r15	; 0x3a
    128e:	0b af       	std	Y+59, r16	; 0x3b
    1290:	1c af       	std	Y+60, r17	; 0x3c
    1292:	e1 14       	cp	r14, r1
    1294:	f1 04       	cpc	r15, r1
    1296:	01 05       	cpc	r16, r1
    1298:	11 05       	cpc	r17, r1
    129a:	39 f4       	brne	.+14     	; 0x12aa <__stack+0x1ab>
    129c:	64 01       	movw	r12, r8
    129e:	53 01       	movw	r10, r6
    12a0:	a2 18       	sub	r10, r2
    12a2:	b3 08       	sbc	r11, r3
    12a4:	c4 08       	sbc	r12, r4
    12a6:	d5 08       	sbc	r13, r5
    12a8:	e2 c0       	rjmp	.+452    	; 0x146e <__stack+0x36f>
    12aa:	f9 ac       	ldd	r15, Y+57	; 0x39
    12ac:	68 96       	adiw	r28, 0x18	; 24
    12ae:	ff ae       	std	Y+63, r15	; 0x3f
    12b0:	68 97       	sbiw	r28, 0x18	; 24
    12b2:	0f 2c       	mov	r0, r15
    12b4:	04 c0       	rjmp	.+8      	; 0x12be <__stack+0x1bf>
    12b6:	22 0c       	add	r2, r2
    12b8:	33 1c       	adc	r3, r3
    12ba:	44 1c       	adc	r4, r4
    12bc:	55 1c       	adc	r5, r5
    12be:	0a 94       	dec	r0
    12c0:	d2 f7       	brpl	.-12     	; 0x12b6 <__stack+0x1b7>
    12c2:	8a 2d       	mov	r24, r10
    12c4:	8f 19       	sub	r24, r15
    12c6:	64 01       	movw	r12, r8
    12c8:	53 01       	movw	r10, r6
    12ca:	08 2e       	mov	r0, r24
    12cc:	04 c0       	rjmp	.+8      	; 0x12d6 <__stack+0x1d7>
    12ce:	d6 94       	lsr	r13
    12d0:	c7 94       	ror	r12
    12d2:	b7 94       	ror	r11
    12d4:	a7 94       	ror	r10
    12d6:	0a 94       	dec	r0
    12d8:	d2 f7       	brpl	.-12     	; 0x12ce <__stack+0x1cf>
    12da:	a4 01       	movw	r20, r8
    12dc:	93 01       	movw	r18, r6
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <__stack+0x1e9>
    12e0:	22 0f       	add	r18, r18
    12e2:	33 1f       	adc	r19, r19
    12e4:	44 1f       	adc	r20, r20
    12e6:	55 1f       	adc	r21, r21
    12e8:	fa 94       	dec	r15
    12ea:	d2 f7       	brpl	.-12     	; 0x12e0 <__stack+0x1e1>
    12ec:	6c 96       	adiw	r28, 0x1c	; 28
    12ee:	6c ac       	ldd	r6, Y+60	; 0x3c
    12f0:	7d ac       	ldd	r7, Y+61	; 0x3d
    12f2:	8e ac       	ldd	r8, Y+62	; 0x3e
    12f4:	9f ac       	ldd	r9, Y+63	; 0x3f
    12f6:	6c 97       	sbiw	r28, 0x1c	; 28
    12f8:	04 c0       	rjmp	.+8      	; 0x1302 <__stack+0x203>
    12fa:	96 94       	lsr	r9
    12fc:	87 94       	ror	r8
    12fe:	77 94       	ror	r7
    1300:	67 94       	ror	r6
    1302:	8a 95       	dec	r24
    1304:	d2 f7       	brpl	.-12     	; 0x12fa <__stack+0x1fb>
    1306:	84 01       	movw	r16, r8
    1308:	73 01       	movw	r14, r6
    130a:	e2 2a       	or	r14, r18
    130c:	f3 2a       	or	r15, r19
    130e:	04 2b       	or	r16, r20
    1310:	15 2b       	or	r17, r21
    1312:	ed a6       	std	Y+45, r14	; 0x2d
    1314:	fe a6       	std	Y+46, r15	; 0x2e
    1316:	0f a7       	std	Y+47, r16	; 0x2f
    1318:	18 ab       	std	Y+48, r17	; 0x30
    131a:	32 01       	movw	r6, r4
    131c:	88 24       	eor	r8, r8
    131e:	99 24       	eor	r9, r9
    1320:	b2 01       	movw	r22, r4
    1322:	a1 01       	movw	r20, r2
    1324:	60 70       	andi	r22, 0x00	; 0
    1326:	70 70       	andi	r23, 0x00	; 0
    1328:	25 96       	adiw	r28, 0x05	; 5
    132a:	4c af       	std	Y+60, r20	; 0x3c
    132c:	5d af       	std	Y+61, r21	; 0x3d
    132e:	6e af       	std	Y+62, r22	; 0x3e
    1330:	7f af       	std	Y+63, r23	; 0x3f
    1332:	25 97       	sbiw	r28, 0x05	; 5
    1334:	c6 01       	movw	r24, r12
    1336:	b5 01       	movw	r22, r10
    1338:	a4 01       	movw	r20, r8
    133a:	93 01       	movw	r18, r6
    133c:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    1340:	7b 01       	movw	r14, r22
    1342:	8c 01       	movw	r16, r24
    1344:	c6 01       	movw	r24, r12
    1346:	b5 01       	movw	r22, r10
    1348:	a4 01       	movw	r20, r8
    134a:	93 01       	movw	r18, r6
    134c:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    1350:	ca 01       	movw	r24, r20
    1352:	b9 01       	movw	r22, r18
    1354:	25 96       	adiw	r28, 0x05	; 5
    1356:	2c ad       	ldd	r18, Y+60	; 0x3c
    1358:	3d ad       	ldd	r19, Y+61	; 0x3d
    135a:	4e ad       	ldd	r20, Y+62	; 0x3e
    135c:	5f ad       	ldd	r21, Y+63	; 0x3f
    135e:	25 97       	sbiw	r28, 0x05	; 5
    1360:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
    1364:	9b 01       	movw	r18, r22
    1366:	ac 01       	movw	r20, r24
    1368:	87 01       	movw	r16, r14
    136a:	ff 24       	eor	r15, r15
    136c:	ee 24       	eor	r14, r14
    136e:	ad a4       	ldd	r10, Y+45	; 0x2d
    1370:	be a4       	ldd	r11, Y+46	; 0x2e
    1372:	cf a4       	ldd	r12, Y+47	; 0x2f
    1374:	d8 a8       	ldd	r13, Y+48	; 0x30
    1376:	c6 01       	movw	r24, r12
    1378:	aa 27       	eor	r26, r26
    137a:	bb 27       	eor	r27, r27
    137c:	5c 01       	movw	r10, r24
    137e:	6d 01       	movw	r12, r26
    1380:	ae 28       	or	r10, r14
    1382:	bf 28       	or	r11, r15
    1384:	c0 2a       	or	r12, r16
    1386:	d1 2a       	or	r13, r17
    1388:	a2 16       	cp	r10, r18
    138a:	b3 06       	cpc	r11, r19
    138c:	c4 06       	cpc	r12, r20
    138e:	d5 06       	cpc	r13, r21
    1390:	90 f4       	brcc	.+36     	; 0x13b6 <__stack+0x2b7>
    1392:	a2 0c       	add	r10, r2
    1394:	b3 1c       	adc	r11, r3
    1396:	c4 1c       	adc	r12, r4
    1398:	d5 1c       	adc	r13, r5
    139a:	a2 14       	cp	r10, r2
    139c:	b3 04       	cpc	r11, r3
    139e:	c4 04       	cpc	r12, r4
    13a0:	d5 04       	cpc	r13, r5
    13a2:	48 f0       	brcs	.+18     	; 0x13b6 <__stack+0x2b7>
    13a4:	a2 16       	cp	r10, r18
    13a6:	b3 06       	cpc	r11, r19
    13a8:	c4 06       	cpc	r12, r20
    13aa:	d5 06       	cpc	r13, r21
    13ac:	20 f4       	brcc	.+8      	; 0x13b6 <__stack+0x2b7>
    13ae:	a2 0c       	add	r10, r2
    13b0:	b3 1c       	adc	r11, r3
    13b2:	c4 1c       	adc	r12, r4
    13b4:	d5 1c       	adc	r13, r5
    13b6:	a2 1a       	sub	r10, r18
    13b8:	b3 0a       	sbc	r11, r19
    13ba:	c4 0a       	sbc	r12, r20
    13bc:	d5 0a       	sbc	r13, r21
    13be:	c6 01       	movw	r24, r12
    13c0:	b5 01       	movw	r22, r10
    13c2:	a4 01       	movw	r20, r8
    13c4:	93 01       	movw	r18, r6
    13c6:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    13ca:	7b 01       	movw	r14, r22
    13cc:	8c 01       	movw	r16, r24
    13ce:	c6 01       	movw	r24, r12
    13d0:	b5 01       	movw	r22, r10
    13d2:	a4 01       	movw	r20, r8
    13d4:	93 01       	movw	r18, r6
    13d6:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    13da:	ca 01       	movw	r24, r20
    13dc:	b9 01       	movw	r22, r18
    13de:	25 96       	adiw	r28, 0x05	; 5
    13e0:	2c ad       	ldd	r18, Y+60	; 0x3c
    13e2:	3d ad       	ldd	r19, Y+61	; 0x3d
    13e4:	4e ad       	ldd	r20, Y+62	; 0x3e
    13e6:	5f ad       	ldd	r21, Y+63	; 0x3f
    13e8:	25 97       	sbiw	r28, 0x05	; 5
    13ea:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
    13ee:	9b 01       	movw	r18, r22
    13f0:	ac 01       	movw	r20, r24
    13f2:	87 01       	movw	r16, r14
    13f4:	ff 24       	eor	r15, r15
    13f6:	ee 24       	eor	r14, r14
    13f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    13fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    13fc:	af a5       	ldd	r26, Y+47	; 0x2f
    13fe:	b8 a9       	ldd	r27, Y+48	; 0x30
    1400:	a0 70       	andi	r26, 0x00	; 0
    1402:	b0 70       	andi	r27, 0x00	; 0
    1404:	57 01       	movw	r10, r14
    1406:	68 01       	movw	r12, r16
    1408:	a8 2a       	or	r10, r24
    140a:	b9 2a       	or	r11, r25
    140c:	ca 2a       	or	r12, r26
    140e:	db 2a       	or	r13, r27
    1410:	a2 16       	cp	r10, r18
    1412:	b3 06       	cpc	r11, r19
    1414:	c4 06       	cpc	r12, r20
    1416:	d5 06       	cpc	r13, r21
    1418:	90 f4       	brcc	.+36     	; 0x143e <__stack+0x33f>
    141a:	a2 0c       	add	r10, r2
    141c:	b3 1c       	adc	r11, r3
    141e:	c4 1c       	adc	r12, r4
    1420:	d5 1c       	adc	r13, r5
    1422:	a2 14       	cp	r10, r2
    1424:	b3 04       	cpc	r11, r3
    1426:	c4 04       	cpc	r12, r4
    1428:	d5 04       	cpc	r13, r5
    142a:	48 f0       	brcs	.+18     	; 0x143e <__stack+0x33f>
    142c:	a2 16       	cp	r10, r18
    142e:	b3 06       	cpc	r11, r19
    1430:	c4 06       	cpc	r12, r20
    1432:	d5 06       	cpc	r13, r21
    1434:	20 f4       	brcc	.+8      	; 0x143e <__stack+0x33f>
    1436:	a2 0c       	add	r10, r2
    1438:	b3 1c       	adc	r11, r3
    143a:	c4 1c       	adc	r12, r4
    143c:	d5 1c       	adc	r13, r5
    143e:	6c 96       	adiw	r28, 0x1c	; 28
    1440:	ec ac       	ldd	r14, Y+60	; 0x3c
    1442:	fd ac       	ldd	r15, Y+61	; 0x3d
    1444:	0e ad       	ldd	r16, Y+62	; 0x3e
    1446:	1f ad       	ldd	r17, Y+63	; 0x3f
    1448:	6c 97       	sbiw	r28, 0x1c	; 28
    144a:	68 96       	adiw	r28, 0x18	; 24
    144c:	0f ac       	ldd	r0, Y+63	; 0x3f
    144e:	68 97       	sbiw	r28, 0x18	; 24
    1450:	04 c0       	rjmp	.+8      	; 0x145a <__stack+0x35b>
    1452:	ee 0c       	add	r14, r14
    1454:	ff 1c       	adc	r15, r15
    1456:	00 1f       	adc	r16, r16
    1458:	11 1f       	adc	r17, r17
    145a:	0a 94       	dec	r0
    145c:	d2 f7       	brpl	.-12     	; 0x1452 <__stack+0x353>
    145e:	e9 aa       	std	Y+49, r14	; 0x31
    1460:	fa aa       	std	Y+50, r15	; 0x32
    1462:	0b ab       	std	Y+51, r16	; 0x33
    1464:	1c ab       	std	Y+52, r17	; 0x34
    1466:	a2 1a       	sub	r10, r18
    1468:	b3 0a       	sbc	r11, r19
    146a:	c4 0a       	sbc	r12, r20
    146c:	d5 0a       	sbc	r13, r21
    146e:	32 01       	movw	r6, r4
    1470:	88 24       	eor	r8, r8
    1472:	99 24       	eor	r9, r9
    1474:	b2 01       	movw	r22, r4
    1476:	a1 01       	movw	r20, r2
    1478:	60 70       	andi	r22, 0x00	; 0
    147a:	70 70       	andi	r23, 0x00	; 0
    147c:	29 96       	adiw	r28, 0x09	; 9
    147e:	4c af       	std	Y+60, r20	; 0x3c
    1480:	5d af       	std	Y+61, r21	; 0x3d
    1482:	6e af       	std	Y+62, r22	; 0x3e
    1484:	7f af       	std	Y+63, r23	; 0x3f
    1486:	29 97       	sbiw	r28, 0x09	; 9
    1488:	c6 01       	movw	r24, r12
    148a:	b5 01       	movw	r22, r10
    148c:	a4 01       	movw	r20, r8
    148e:	93 01       	movw	r18, r6
    1490:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    1494:	7b 01       	movw	r14, r22
    1496:	8c 01       	movw	r16, r24
    1498:	c6 01       	movw	r24, r12
    149a:	b5 01       	movw	r22, r10
    149c:	a4 01       	movw	r20, r8
    149e:	93 01       	movw	r18, r6
    14a0:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    14a4:	ca 01       	movw	r24, r20
    14a6:	b9 01       	movw	r22, r18
    14a8:	29 96       	adiw	r28, 0x09	; 9
    14aa:	2c ad       	ldd	r18, Y+60	; 0x3c
    14ac:	3d ad       	ldd	r19, Y+61	; 0x3d
    14ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    14b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    14b2:	29 97       	sbiw	r28, 0x09	; 9
    14b4:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
    14b8:	9b 01       	movw	r18, r22
    14ba:	ac 01       	movw	r20, r24
    14bc:	87 01       	movw	r16, r14
    14be:	ff 24       	eor	r15, r15
    14c0:	ee 24       	eor	r14, r14
    14c2:	a9 a8       	ldd	r10, Y+49	; 0x31
    14c4:	ba a8       	ldd	r11, Y+50	; 0x32
    14c6:	cb a8       	ldd	r12, Y+51	; 0x33
    14c8:	dc a8       	ldd	r13, Y+52	; 0x34
    14ca:	c6 01       	movw	r24, r12
    14cc:	aa 27       	eor	r26, r26
    14ce:	bb 27       	eor	r27, r27
    14d0:	57 01       	movw	r10, r14
    14d2:	68 01       	movw	r12, r16
    14d4:	a8 2a       	or	r10, r24
    14d6:	b9 2a       	or	r11, r25
    14d8:	ca 2a       	or	r12, r26
    14da:	db 2a       	or	r13, r27
    14dc:	a2 16       	cp	r10, r18
    14de:	b3 06       	cpc	r11, r19
    14e0:	c4 06       	cpc	r12, r20
    14e2:	d5 06       	cpc	r13, r21
    14e4:	90 f4       	brcc	.+36     	; 0x150a <__stack+0x40b>
    14e6:	a2 0c       	add	r10, r2
    14e8:	b3 1c       	adc	r11, r3
    14ea:	c4 1c       	adc	r12, r4
    14ec:	d5 1c       	adc	r13, r5
    14ee:	a2 14       	cp	r10, r2
    14f0:	b3 04       	cpc	r11, r3
    14f2:	c4 04       	cpc	r12, r4
    14f4:	d5 04       	cpc	r13, r5
    14f6:	48 f0       	brcs	.+18     	; 0x150a <__stack+0x40b>
    14f8:	a2 16       	cp	r10, r18
    14fa:	b3 06       	cpc	r11, r19
    14fc:	c4 06       	cpc	r12, r20
    14fe:	d5 06       	cpc	r13, r21
    1500:	20 f4       	brcc	.+8      	; 0x150a <__stack+0x40b>
    1502:	a2 0c       	add	r10, r2
    1504:	b3 1c       	adc	r11, r3
    1506:	c4 1c       	adc	r12, r4
    1508:	d5 1c       	adc	r13, r5
    150a:	a2 1a       	sub	r10, r18
    150c:	b3 0a       	sbc	r11, r19
    150e:	c4 0a       	sbc	r12, r20
    1510:	d5 0a       	sbc	r13, r21
    1512:	c6 01       	movw	r24, r12
    1514:	b5 01       	movw	r22, r10
    1516:	a4 01       	movw	r20, r8
    1518:	93 01       	movw	r18, r6
    151a:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    151e:	7b 01       	movw	r14, r22
    1520:	8c 01       	movw	r16, r24
    1522:	c6 01       	movw	r24, r12
    1524:	b5 01       	movw	r22, r10
    1526:	a4 01       	movw	r20, r8
    1528:	93 01       	movw	r18, r6
    152a:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    152e:	ca 01       	movw	r24, r20
    1530:	b9 01       	movw	r22, r18
    1532:	29 96       	adiw	r28, 0x09	; 9
    1534:	2c ad       	ldd	r18, Y+60	; 0x3c
    1536:	3d ad       	ldd	r19, Y+61	; 0x3d
    1538:	4e ad       	ldd	r20, Y+62	; 0x3e
    153a:	5f ad       	ldd	r21, Y+63	; 0x3f
    153c:	29 97       	sbiw	r28, 0x09	; 9
    153e:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
    1542:	9b 01       	movw	r18, r22
    1544:	ac 01       	movw	r20, r24
    1546:	87 01       	movw	r16, r14
    1548:	ff 24       	eor	r15, r15
    154a:	ee 24       	eor	r14, r14
    154c:	89 a9       	ldd	r24, Y+49	; 0x31
    154e:	9a a9       	ldd	r25, Y+50	; 0x32
    1550:	ab a9       	ldd	r26, Y+51	; 0x33
    1552:	bc a9       	ldd	r27, Y+52	; 0x34
    1554:	a0 70       	andi	r26, 0x00	; 0
    1556:	b0 70       	andi	r27, 0x00	; 0
    1558:	e8 2a       	or	r14, r24
    155a:	f9 2a       	or	r15, r25
    155c:	0a 2b       	or	r16, r26
    155e:	1b 2b       	or	r17, r27
    1560:	e2 16       	cp	r14, r18
    1562:	f3 06       	cpc	r15, r19
    1564:	04 07       	cpc	r16, r20
    1566:	15 07       	cpc	r17, r21
    1568:	90 f4       	brcc	.+36     	; 0x158e <__stack+0x48f>
    156a:	e2 0c       	add	r14, r2
    156c:	f3 1c       	adc	r15, r3
    156e:	04 1d       	adc	r16, r4
    1570:	15 1d       	adc	r17, r5
    1572:	e2 14       	cp	r14, r2
    1574:	f3 04       	cpc	r15, r3
    1576:	04 05       	cpc	r16, r4
    1578:	15 05       	cpc	r17, r5
    157a:	48 f0       	brcs	.+18     	; 0x158e <__stack+0x48f>
    157c:	e2 16       	cp	r14, r18
    157e:	f3 06       	cpc	r15, r19
    1580:	04 07       	cpc	r16, r20
    1582:	15 07       	cpc	r17, r21
    1584:	20 f4       	brcc	.+8      	; 0x158e <__stack+0x48f>
    1586:	e2 0c       	add	r14, r2
    1588:	f3 1c       	adc	r15, r3
    158a:	04 1d       	adc	r16, r4
    158c:	15 1d       	adc	r17, r5
    158e:	e2 1a       	sub	r14, r18
    1590:	f3 0a       	sbc	r15, r19
    1592:	04 0b       	sbc	r16, r20
    1594:	15 0b       	sbc	r17, r21
    1596:	d8 01       	movw	r26, r16
    1598:	c7 01       	movw	r24, r14
    159a:	09 ac       	ldd	r0, Y+57	; 0x39
    159c:	04 c0       	rjmp	.+8      	; 0x15a6 <__stack+0x4a7>
    159e:	b6 95       	lsr	r27
    15a0:	a7 95       	ror	r26
    15a2:	97 95       	ror	r25
    15a4:	87 95       	ror	r24
    15a6:	0a 94       	dec	r0
    15a8:	d2 f7       	brpl	.-12     	; 0x159e <__stack+0x49f>
    15aa:	89 8b       	std	Y+17, r24	; 0x11
    15ac:	9a 8b       	std	Y+18, r25	; 0x12
    15ae:	ab 8b       	std	Y+19, r26	; 0x13
    15b0:	bc 8b       	std	Y+20, r27	; 0x14
    15b2:	1d 8a       	std	Y+21, r1	; 0x15
    15b4:	1e 8a       	std	Y+22, r1	; 0x16
    15b6:	1f 8a       	std	Y+23, r1	; 0x17
    15b8:	18 8e       	std	Y+24, r1	; 0x18
    15ba:	28 2f       	mov	r18, r24
    15bc:	3a 89       	ldd	r19, Y+18	; 0x12
    15be:	4b 89       	ldd	r20, Y+19	; 0x13
    15c0:	5c 89       	ldd	r21, Y+20	; 0x14
    15c2:	6d 89       	ldd	r22, Y+21	; 0x15
    15c4:	0c c3       	rjmp	.+1560   	; 0x1bde <__stack+0xadf>
    15c6:	6a 14       	cp	r6, r10
    15c8:	7b 04       	cpc	r7, r11
    15ca:	8c 04       	cpc	r8, r12
    15cc:	9d 04       	cpc	r9, r13
    15ce:	08 f4       	brcc	.+2      	; 0x15d2 <__stack+0x4d3>
    15d0:	09 c3       	rjmp	.+1554   	; 0x1be4 <__stack+0xae5>
    15d2:	00 e0       	ldi	r16, 0x00	; 0
    15d4:	a0 16       	cp	r10, r16
    15d6:	00 e0       	ldi	r16, 0x00	; 0
    15d8:	b0 06       	cpc	r11, r16
    15da:	01 e0       	ldi	r16, 0x01	; 1
    15dc:	c0 06       	cpc	r12, r16
    15de:	00 e0       	ldi	r16, 0x00	; 0
    15e0:	d0 06       	cpc	r13, r16
    15e2:	88 f4       	brcc	.+34     	; 0x1606 <__stack+0x507>
    15e4:	1f ef       	ldi	r17, 0xFF	; 255
    15e6:	a1 16       	cp	r10, r17
    15e8:	b1 04       	cpc	r11, r1
    15ea:	c1 04       	cpc	r12, r1
    15ec:	d1 04       	cpc	r13, r1
    15ee:	39 f0       	breq	.+14     	; 0x15fe <__stack+0x4ff>
    15f0:	30 f0       	brcs	.+12     	; 0x15fe <__stack+0x4ff>
    15f2:	28 e0       	ldi	r18, 0x08	; 8
    15f4:	e2 2e       	mov	r14, r18
    15f6:	f1 2c       	mov	r15, r1
    15f8:	01 2d       	mov	r16, r1
    15fa:	11 2d       	mov	r17, r1
    15fc:	18 c0       	rjmp	.+48     	; 0x162e <__stack+0x52f>
    15fe:	ee 24       	eor	r14, r14
    1600:	ff 24       	eor	r15, r15
    1602:	87 01       	movw	r16, r14
    1604:	14 c0       	rjmp	.+40     	; 0x162e <__stack+0x52f>
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	a4 16       	cp	r10, r20
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	b4 06       	cpc	r11, r20
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	c4 06       	cpc	r12, r20
    1612:	41 e0       	ldi	r20, 0x01	; 1
    1614:	d4 06       	cpc	r13, r20
    1616:	30 f0       	brcs	.+12     	; 0x1624 <__stack+0x525>
    1618:	98 e1       	ldi	r25, 0x18	; 24
    161a:	e9 2e       	mov	r14, r25
    161c:	f1 2c       	mov	r15, r1
    161e:	01 2d       	mov	r16, r1
    1620:	11 2d       	mov	r17, r1
    1622:	05 c0       	rjmp	.+10     	; 0x162e <__stack+0x52f>
    1624:	80 e1       	ldi	r24, 0x10	; 16
    1626:	e8 2e       	mov	r14, r24
    1628:	f1 2c       	mov	r15, r1
    162a:	01 2d       	mov	r16, r1
    162c:	11 2d       	mov	r17, r1
    162e:	d6 01       	movw	r26, r12
    1630:	c5 01       	movw	r24, r10
    1632:	0e 2c       	mov	r0, r14
    1634:	04 c0       	rjmp	.+8      	; 0x163e <__stack+0x53f>
    1636:	b6 95       	lsr	r27
    1638:	a7 95       	ror	r26
    163a:	97 95       	ror	r25
    163c:	87 95       	ror	r24
    163e:	0a 94       	dec	r0
    1640:	d2 f7       	brpl	.-12     	; 0x1636 <__stack+0x537>
    1642:	8f 50       	subi	r24, 0x0F	; 15
    1644:	9e 4f       	sbci	r25, 0xFE	; 254
    1646:	dc 01       	movw	r26, r24
    1648:	2c 91       	ld	r18, X
    164a:	80 e2       	ldi	r24, 0x20	; 32
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a0 e0       	ldi	r26, 0x00	; 0
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	8e 19       	sub	r24, r14
    1654:	9f 09       	sbc	r25, r15
    1656:	a0 0b       	sbc	r26, r16
    1658:	b1 0b       	sbc	r27, r17
    165a:	82 1b       	sub	r24, r18
    165c:	91 09       	sbc	r25, r1
    165e:	a1 09       	sbc	r26, r1
    1660:	b1 09       	sbc	r27, r1
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	a1 05       	cpc	r26, r1
    1666:	b1 05       	cpc	r27, r1
    1668:	09 f0       	breq	.+2      	; 0x166c <__stack+0x56d>
    166a:	4f c0       	rjmp	.+158    	; 0x170a <__stack+0x60b>
    166c:	a6 14       	cp	r10, r6
    166e:	b7 04       	cpc	r11, r7
    1670:	c8 04       	cpc	r12, r8
    1672:	d9 04       	cpc	r13, r9
    1674:	58 f0       	brcs	.+22     	; 0x168c <__stack+0x58d>
    1676:	6c 96       	adiw	r28, 0x1c	; 28
    1678:	ec ac       	ldd	r14, Y+60	; 0x3c
    167a:	fd ac       	ldd	r15, Y+61	; 0x3d
    167c:	0e ad       	ldd	r16, Y+62	; 0x3e
    167e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1680:	6c 97       	sbiw	r28, 0x1c	; 28
    1682:	e2 14       	cp	r14, r2
    1684:	f3 04       	cpc	r15, r3
    1686:	04 05       	cpc	r16, r4
    1688:	15 05       	cpc	r17, r5
    168a:	68 f1       	brcs	.+90     	; 0x16e6 <__stack+0x5e7>
    168c:	6c 96       	adiw	r28, 0x1c	; 28
    168e:	ec ac       	ldd	r14, Y+60	; 0x3c
    1690:	fd ac       	ldd	r15, Y+61	; 0x3d
    1692:	0e ad       	ldd	r16, Y+62	; 0x3e
    1694:	1f ad       	ldd	r17, Y+63	; 0x3f
    1696:	6c 97       	sbiw	r28, 0x1c	; 28
    1698:	e2 18       	sub	r14, r2
    169a:	f3 08       	sbc	r15, r3
    169c:	04 09       	sbc	r16, r4
    169e:	15 09       	sbc	r17, r5
    16a0:	a4 01       	movw	r20, r8
    16a2:	93 01       	movw	r18, r6
    16a4:	2a 19       	sub	r18, r10
    16a6:	3b 09       	sbc	r19, r11
    16a8:	4c 09       	sbc	r20, r12
    16aa:	5d 09       	sbc	r21, r13
    16ac:	aa 24       	eor	r10, r10
    16ae:	bb 24       	eor	r11, r11
    16b0:	65 01       	movw	r12, r10
    16b2:	6c 96       	adiw	r28, 0x1c	; 28
    16b4:	6c ad       	ldd	r22, Y+60	; 0x3c
    16b6:	7d ad       	ldd	r23, Y+61	; 0x3d
    16b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    16ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    16bc:	6c 97       	sbiw	r28, 0x1c	; 28
    16be:	6e 15       	cp	r22, r14
    16c0:	7f 05       	cpc	r23, r15
    16c2:	80 07       	cpc	r24, r16
    16c4:	91 07       	cpc	r25, r17
    16c6:	28 f4       	brcc	.+10     	; 0x16d2 <__stack+0x5d3>
    16c8:	b1 e0       	ldi	r27, 0x01	; 1
    16ca:	ab 2e       	mov	r10, r27
    16cc:	b1 2c       	mov	r11, r1
    16ce:	c1 2c       	mov	r12, r1
    16d0:	d1 2c       	mov	r13, r1
    16d2:	da 01       	movw	r26, r20
    16d4:	c9 01       	movw	r24, r18
    16d6:	8a 19       	sub	r24, r10
    16d8:	9b 09       	sbc	r25, r11
    16da:	ac 09       	sbc	r26, r12
    16dc:	bd 09       	sbc	r27, r13
    16de:	8d ab       	std	Y+53, r24	; 0x35
    16e0:	9e ab       	std	Y+54, r25	; 0x36
    16e2:	af ab       	std	Y+55, r26	; 0x37
    16e4:	b8 af       	std	Y+56, r27	; 0x38
    16e6:	e9 8a       	std	Y+17, r14	; 0x11
    16e8:	fa 8a       	std	Y+18, r15	; 0x12
    16ea:	0b 8b       	std	Y+19, r16	; 0x13
    16ec:	1c 8b       	std	Y+20, r17	; 0x14
    16ee:	6d a8       	ldd	r6, Y+53	; 0x35
    16f0:	7e a8       	ldd	r7, Y+54	; 0x36
    16f2:	8f a8       	ldd	r8, Y+55	; 0x37
    16f4:	98 ac       	ldd	r9, Y+56	; 0x38
    16f6:	6d 8a       	std	Y+21, r6	; 0x15
    16f8:	7e 8a       	std	Y+22, r7	; 0x16
    16fa:	8f 8a       	std	Y+23, r8	; 0x17
    16fc:	98 8e       	std	Y+24, r9	; 0x18
    16fe:	2e 2d       	mov	r18, r14
    1700:	3a 89       	ldd	r19, Y+18	; 0x12
    1702:	4b 89       	ldd	r20, Y+19	; 0x13
    1704:	5c 89       	ldd	r21, Y+20	; 0x14
    1706:	6d a9       	ldd	r22, Y+53	; 0x35
    1708:	6a c2       	rjmp	.+1236   	; 0x1bde <__stack+0xadf>
    170a:	67 96       	adiw	r28, 0x17	; 23
    170c:	8f af       	std	Y+63, r24	; 0x3f
    170e:	67 97       	sbiw	r28, 0x17	; 23
    1710:	a6 01       	movw	r20, r12
    1712:	95 01       	movw	r18, r10
    1714:	08 2e       	mov	r0, r24
    1716:	04 c0       	rjmp	.+8      	; 0x1720 <__stack+0x621>
    1718:	22 0f       	add	r18, r18
    171a:	33 1f       	adc	r19, r19
    171c:	44 1f       	adc	r20, r20
    171e:	55 1f       	adc	r21, r21
    1720:	0a 94       	dec	r0
    1722:	d2 f7       	brpl	.-12     	; 0x1718 <__stack+0x619>
    1724:	a0 e2       	ldi	r26, 0x20	; 32
    1726:	aa 2e       	mov	r10, r26
    1728:	a8 1a       	sub	r10, r24
    172a:	66 96       	adiw	r28, 0x16	; 22
    172c:	af ae       	std	Y+63, r10	; 0x3f
    172e:	66 97       	sbiw	r28, 0x16	; 22
    1730:	d2 01       	movw	r26, r4
    1732:	c1 01       	movw	r24, r2
    1734:	04 c0       	rjmp	.+8      	; 0x173e <__stack+0x63f>
    1736:	b6 95       	lsr	r27
    1738:	a7 95       	ror	r26
    173a:	97 95       	ror	r25
    173c:	87 95       	ror	r24
    173e:	aa 94       	dec	r10
    1740:	d2 f7       	brpl	.-12     	; 0x1736 <__stack+0x637>
    1742:	6c 01       	movw	r12, r24
    1744:	7d 01       	movw	r14, r26
    1746:	c2 2a       	or	r12, r18
    1748:	d3 2a       	or	r13, r19
    174a:	e4 2a       	or	r14, r20
    174c:	f5 2a       	or	r15, r21
    174e:	c9 a6       	std	Y+41, r12	; 0x29
    1750:	da a6       	std	Y+42, r13	; 0x2a
    1752:	eb a6       	std	Y+43, r14	; 0x2b
    1754:	fc a6       	std	Y+44, r15	; 0x2c
    1756:	82 01       	movw	r16, r4
    1758:	71 01       	movw	r14, r2
    175a:	67 96       	adiw	r28, 0x17	; 23
    175c:	0f ac       	ldd	r0, Y+63	; 0x3f
    175e:	67 97       	sbiw	r28, 0x17	; 23
    1760:	04 c0       	rjmp	.+8      	; 0x176a <__stack+0x66b>
    1762:	ee 0c       	add	r14, r14
    1764:	ff 1c       	adc	r15, r15
    1766:	00 1f       	adc	r16, r16
    1768:	11 1f       	adc	r17, r17
    176a:	0a 94       	dec	r0
    176c:	d2 f7       	brpl	.-12     	; 0x1762 <__stack+0x663>
    176e:	ed a2       	std	Y+37, r14	; 0x25
    1770:	fe a2       	std	Y+38, r15	; 0x26
    1772:	0f a3       	std	Y+39, r16	; 0x27
    1774:	18 a7       	std	Y+40, r17	; 0x28
    1776:	64 01       	movw	r12, r8
    1778:	53 01       	movw	r10, r6
    177a:	66 96       	adiw	r28, 0x16	; 22
    177c:	0f ac       	ldd	r0, Y+63	; 0x3f
    177e:	66 97       	sbiw	r28, 0x16	; 22
    1780:	04 c0       	rjmp	.+8      	; 0x178a <__stack+0x68b>
    1782:	d6 94       	lsr	r13
    1784:	c7 94       	ror	r12
    1786:	b7 94       	ror	r11
    1788:	a7 94       	ror	r10
    178a:	0a 94       	dec	r0
    178c:	d2 f7       	brpl	.-12     	; 0x1782 <__stack+0x683>
    178e:	a4 01       	movw	r20, r8
    1790:	93 01       	movw	r18, r6
    1792:	67 96       	adiw	r28, 0x17	; 23
    1794:	0f ac       	ldd	r0, Y+63	; 0x3f
    1796:	67 97       	sbiw	r28, 0x17	; 23
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <__stack+0x6a3>
    179a:	22 0f       	add	r18, r18
    179c:	33 1f       	adc	r19, r19
    179e:	44 1f       	adc	r20, r20
    17a0:	55 1f       	adc	r21, r21
    17a2:	0a 94       	dec	r0
    17a4:	d2 f7       	brpl	.-12     	; 0x179a <__stack+0x69b>
    17a6:	6c 96       	adiw	r28, 0x1c	; 28
    17a8:	8c ad       	ldd	r24, Y+60	; 0x3c
    17aa:	9d ad       	ldd	r25, Y+61	; 0x3d
    17ac:	ae ad       	ldd	r26, Y+62	; 0x3e
    17ae:	bf ad       	ldd	r27, Y+63	; 0x3f
    17b0:	6c 97       	sbiw	r28, 0x1c	; 28
    17b2:	66 96       	adiw	r28, 0x16	; 22
    17b4:	0f ac       	ldd	r0, Y+63	; 0x3f
    17b6:	66 97       	sbiw	r28, 0x16	; 22
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <__stack+0x6c3>
    17ba:	b6 95       	lsr	r27
    17bc:	a7 95       	ror	r26
    17be:	97 95       	ror	r25
    17c0:	87 95       	ror	r24
    17c2:	0a 94       	dec	r0
    17c4:	d2 f7       	brpl	.-12     	; 0x17ba <__stack+0x6bb>
    17c6:	3c 01       	movw	r6, r24
    17c8:	4d 01       	movw	r8, r26
    17ca:	62 2a       	or	r6, r18
    17cc:	73 2a       	or	r7, r19
    17ce:	84 2a       	or	r8, r20
    17d0:	95 2a       	or	r9, r21
    17d2:	69 a2       	std	Y+33, r6	; 0x21
    17d4:	7a a2       	std	Y+34, r7	; 0x22
    17d6:	8b a2       	std	Y+35, r8	; 0x23
    17d8:	9c a2       	std	Y+36, r9	; 0x24
    17da:	6c 96       	adiw	r28, 0x1c	; 28
    17dc:	ec ac       	ldd	r14, Y+60	; 0x3c
    17de:	fd ac       	ldd	r15, Y+61	; 0x3d
    17e0:	0e ad       	ldd	r16, Y+62	; 0x3e
    17e2:	1f ad       	ldd	r17, Y+63	; 0x3f
    17e4:	6c 97       	sbiw	r28, 0x1c	; 28
    17e6:	67 96       	adiw	r28, 0x17	; 23
    17e8:	0f ac       	ldd	r0, Y+63	; 0x3f
    17ea:	67 97       	sbiw	r28, 0x17	; 23
    17ec:	04 c0       	rjmp	.+8      	; 0x17f6 <__stack+0x6f7>
    17ee:	ee 0c       	add	r14, r14
    17f0:	ff 1c       	adc	r15, r15
    17f2:	00 1f       	adc	r16, r16
    17f4:	11 1f       	adc	r17, r17
    17f6:	0a 94       	dec	r0
    17f8:	d2 f7       	brpl	.-12     	; 0x17ee <__stack+0x6ef>
    17fa:	ed 8e       	std	Y+29, r14	; 0x1d
    17fc:	fe 8e       	std	Y+30, r15	; 0x1e
    17fe:	0f 8f       	std	Y+31, r16	; 0x1f
    1800:	18 a3       	std	Y+32, r17	; 0x20
    1802:	49 a5       	ldd	r20, Y+41	; 0x29
    1804:	5a a5       	ldd	r21, Y+42	; 0x2a
    1806:	6b a5       	ldd	r22, Y+43	; 0x2b
    1808:	7c a5       	ldd	r23, Y+44	; 0x2c
    180a:	3b 01       	movw	r6, r22
    180c:	88 24       	eor	r8, r8
    180e:	99 24       	eor	r9, r9
    1810:	60 70       	andi	r22, 0x00	; 0
    1812:	70 70       	andi	r23, 0x00	; 0
    1814:	2d 96       	adiw	r28, 0x0d	; 13
    1816:	4c af       	std	Y+60, r20	; 0x3c
    1818:	5d af       	std	Y+61, r21	; 0x3d
    181a:	6e af       	std	Y+62, r22	; 0x3e
    181c:	7f af       	std	Y+63, r23	; 0x3f
    181e:	2d 97       	sbiw	r28, 0x0d	; 13
    1820:	c6 01       	movw	r24, r12
    1822:	b5 01       	movw	r22, r10
    1824:	a4 01       	movw	r20, r8
    1826:	93 01       	movw	r18, r6
    1828:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    182c:	7b 01       	movw	r14, r22
    182e:	8c 01       	movw	r16, r24
    1830:	c6 01       	movw	r24, r12
    1832:	b5 01       	movw	r22, r10
    1834:	a4 01       	movw	r20, r8
    1836:	93 01       	movw	r18, r6
    1838:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    183c:	c9 01       	movw	r24, r18
    183e:	da 01       	movw	r26, r20
    1840:	1c 01       	movw	r2, r24
    1842:	2d 01       	movw	r4, r26
    1844:	c2 01       	movw	r24, r4
    1846:	b1 01       	movw	r22, r2
    1848:	2d 96       	adiw	r28, 0x0d	; 13
    184a:	2c ad       	ldd	r18, Y+60	; 0x3c
    184c:	3d ad       	ldd	r19, Y+61	; 0x3d
    184e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1850:	5f ad       	ldd	r21, Y+63	; 0x3f
    1852:	2d 97       	sbiw	r28, 0x0d	; 13
    1854:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
    1858:	9b 01       	movw	r18, r22
    185a:	ac 01       	movw	r20, r24
    185c:	87 01       	movw	r16, r14
    185e:	ff 24       	eor	r15, r15
    1860:	ee 24       	eor	r14, r14
    1862:	a9 a0       	ldd	r10, Y+33	; 0x21
    1864:	ba a0       	ldd	r11, Y+34	; 0x22
    1866:	cb a0       	ldd	r12, Y+35	; 0x23
    1868:	dc a0       	ldd	r13, Y+36	; 0x24
    186a:	c6 01       	movw	r24, r12
    186c:	aa 27       	eor	r26, r26
    186e:	bb 27       	eor	r27, r27
    1870:	57 01       	movw	r10, r14
    1872:	68 01       	movw	r12, r16
    1874:	a8 2a       	or	r10, r24
    1876:	b9 2a       	or	r11, r25
    1878:	ca 2a       	or	r12, r26
    187a:	db 2a       	or	r13, r27
    187c:	a2 16       	cp	r10, r18
    187e:	b3 06       	cpc	r11, r19
    1880:	c4 06       	cpc	r12, r20
    1882:	d5 06       	cpc	r13, r21
    1884:	00 f5       	brcc	.+64     	; 0x18c6 <__stack+0x7c7>
    1886:	08 94       	sec
    1888:	21 08       	sbc	r2, r1
    188a:	31 08       	sbc	r3, r1
    188c:	41 08       	sbc	r4, r1
    188e:	51 08       	sbc	r5, r1
    1890:	e9 a4       	ldd	r14, Y+41	; 0x29
    1892:	fa a4       	ldd	r15, Y+42	; 0x2a
    1894:	0b a5       	ldd	r16, Y+43	; 0x2b
    1896:	1c a5       	ldd	r17, Y+44	; 0x2c
    1898:	ae 0c       	add	r10, r14
    189a:	bf 1c       	adc	r11, r15
    189c:	c0 1e       	adc	r12, r16
    189e:	d1 1e       	adc	r13, r17
    18a0:	ae 14       	cp	r10, r14
    18a2:	bf 04       	cpc	r11, r15
    18a4:	c0 06       	cpc	r12, r16
    18a6:	d1 06       	cpc	r13, r17
    18a8:	70 f0       	brcs	.+28     	; 0x18c6 <__stack+0x7c7>
    18aa:	a2 16       	cp	r10, r18
    18ac:	b3 06       	cpc	r11, r19
    18ae:	c4 06       	cpc	r12, r20
    18b0:	d5 06       	cpc	r13, r21
    18b2:	48 f4       	brcc	.+18     	; 0x18c6 <__stack+0x7c7>
    18b4:	08 94       	sec
    18b6:	21 08       	sbc	r2, r1
    18b8:	31 08       	sbc	r3, r1
    18ba:	41 08       	sbc	r4, r1
    18bc:	51 08       	sbc	r5, r1
    18be:	ae 0c       	add	r10, r14
    18c0:	bf 1c       	adc	r11, r15
    18c2:	c0 1e       	adc	r12, r16
    18c4:	d1 1e       	adc	r13, r17
    18c6:	a2 1a       	sub	r10, r18
    18c8:	b3 0a       	sbc	r11, r19
    18ca:	c4 0a       	sbc	r12, r20
    18cc:	d5 0a       	sbc	r13, r21
    18ce:	c6 01       	movw	r24, r12
    18d0:	b5 01       	movw	r22, r10
    18d2:	a4 01       	movw	r20, r8
    18d4:	93 01       	movw	r18, r6
    18d6:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    18da:	7b 01       	movw	r14, r22
    18dc:	8c 01       	movw	r16, r24
    18de:	c6 01       	movw	r24, r12
    18e0:	b5 01       	movw	r22, r10
    18e2:	a4 01       	movw	r20, r8
    18e4:	93 01       	movw	r18, r6
    18e6:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    18ea:	c9 01       	movw	r24, r18
    18ec:	da 01       	movw	r26, r20
    18ee:	3c 01       	movw	r6, r24
    18f0:	4d 01       	movw	r8, r26
    18f2:	c4 01       	movw	r24, r8
    18f4:	b3 01       	movw	r22, r6
    18f6:	2d 96       	adiw	r28, 0x0d	; 13
    18f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    18fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    18fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    18fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1900:	2d 97       	sbiw	r28, 0x0d	; 13
    1902:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
    1906:	9b 01       	movw	r18, r22
    1908:	ac 01       	movw	r20, r24
    190a:	87 01       	movw	r16, r14
    190c:	ff 24       	eor	r15, r15
    190e:	ee 24       	eor	r14, r14
    1910:	89 a1       	ldd	r24, Y+33	; 0x21
    1912:	9a a1       	ldd	r25, Y+34	; 0x22
    1914:	ab a1       	ldd	r26, Y+35	; 0x23
    1916:	bc a1       	ldd	r27, Y+36	; 0x24
    1918:	a0 70       	andi	r26, 0x00	; 0
    191a:	b0 70       	andi	r27, 0x00	; 0
    191c:	57 01       	movw	r10, r14
    191e:	68 01       	movw	r12, r16
    1920:	a8 2a       	or	r10, r24
    1922:	b9 2a       	or	r11, r25
    1924:	ca 2a       	or	r12, r26
    1926:	db 2a       	or	r13, r27
    1928:	a2 16       	cp	r10, r18
    192a:	b3 06       	cpc	r11, r19
    192c:	c4 06       	cpc	r12, r20
    192e:	d5 06       	cpc	r13, r21
    1930:	00 f5       	brcc	.+64     	; 0x1972 <__stack+0x873>
    1932:	08 94       	sec
    1934:	61 08       	sbc	r6, r1
    1936:	71 08       	sbc	r7, r1
    1938:	81 08       	sbc	r8, r1
    193a:	91 08       	sbc	r9, r1
    193c:	69 a5       	ldd	r22, Y+41	; 0x29
    193e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1940:	8b a5       	ldd	r24, Y+43	; 0x2b
    1942:	9c a5       	ldd	r25, Y+44	; 0x2c
    1944:	a6 0e       	add	r10, r22
    1946:	b7 1e       	adc	r11, r23
    1948:	c8 1e       	adc	r12, r24
    194a:	d9 1e       	adc	r13, r25
    194c:	a6 16       	cp	r10, r22
    194e:	b7 06       	cpc	r11, r23
    1950:	c8 06       	cpc	r12, r24
    1952:	d9 06       	cpc	r13, r25
    1954:	70 f0       	brcs	.+28     	; 0x1972 <__stack+0x873>
    1956:	a2 16       	cp	r10, r18
    1958:	b3 06       	cpc	r11, r19
    195a:	c4 06       	cpc	r12, r20
    195c:	d5 06       	cpc	r13, r21
    195e:	48 f4       	brcc	.+18     	; 0x1972 <__stack+0x873>
    1960:	08 94       	sec
    1962:	61 08       	sbc	r6, r1
    1964:	71 08       	sbc	r7, r1
    1966:	81 08       	sbc	r8, r1
    1968:	91 08       	sbc	r9, r1
    196a:	a6 0e       	add	r10, r22
    196c:	b7 1e       	adc	r11, r23
    196e:	c8 1e       	adc	r12, r24
    1970:	d9 1e       	adc	r13, r25
    1972:	d6 01       	movw	r26, r12
    1974:	c5 01       	movw	r24, r10
    1976:	82 1b       	sub	r24, r18
    1978:	93 0b       	sbc	r25, r19
    197a:	a4 0b       	sbc	r26, r20
    197c:	b5 0b       	sbc	r27, r21
    197e:	89 8f       	std	Y+25, r24	; 0x19
    1980:	9a 8f       	std	Y+26, r25	; 0x1a
    1982:	ab 8f       	std	Y+27, r26	; 0x1b
    1984:	bc 8f       	std	Y+28, r27	; 0x1c
    1986:	d1 01       	movw	r26, r2
    1988:	99 27       	eor	r25, r25
    198a:	88 27       	eor	r24, r24
    198c:	84 01       	movw	r16, r8
    198e:	73 01       	movw	r14, r6
    1990:	e8 2a       	or	r14, r24
    1992:	f9 2a       	or	r15, r25
    1994:	0a 2b       	or	r16, r26
    1996:	1b 2b       	or	r17, r27
    1998:	4f ef       	ldi	r20, 0xFF	; 255
    199a:	a4 2e       	mov	r10, r20
    199c:	4f ef       	ldi	r20, 0xFF	; 255
    199e:	b4 2e       	mov	r11, r20
    19a0:	c1 2c       	mov	r12, r1
    19a2:	d1 2c       	mov	r13, r1
    19a4:	ae 20       	and	r10, r14
    19a6:	bf 20       	and	r11, r15
    19a8:	c0 22       	and	r12, r16
    19aa:	d1 22       	and	r13, r17
    19ac:	78 01       	movw	r14, r16
    19ae:	00 27       	eor	r16, r16
    19b0:	11 27       	eor	r17, r17
    19b2:	6d a0       	ldd	r6, Y+37	; 0x25
    19b4:	7e a0       	ldd	r7, Y+38	; 0x26
    19b6:	8f a0       	ldd	r8, Y+39	; 0x27
    19b8:	98 a4       	ldd	r9, Y+40	; 0x28
    19ba:	4f ef       	ldi	r20, 0xFF	; 255
    19bc:	5f ef       	ldi	r21, 0xFF	; 255
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	64 22       	and	r6, r20
    19c4:	75 22       	and	r7, r21
    19c6:	86 22       	and	r8, r22
    19c8:	97 22       	and	r9, r23
    19ca:	8d a1       	ldd	r24, Y+37	; 0x25
    19cc:	9e a1       	ldd	r25, Y+38	; 0x26
    19ce:	af a1       	ldd	r26, Y+39	; 0x27
    19d0:	b8 a5       	ldd	r27, Y+40	; 0x28
    19d2:	bd 01       	movw	r22, r26
    19d4:	88 27       	eor	r24, r24
    19d6:	99 27       	eor	r25, r25
    19d8:	65 96       	adiw	r28, 0x15	; 21
    19da:	6c af       	std	Y+60, r22	; 0x3c
    19dc:	7d af       	std	Y+61, r23	; 0x3d
    19de:	8e af       	std	Y+62, r24	; 0x3e
    19e0:	9f af       	std	Y+63, r25	; 0x3f
    19e2:	65 97       	sbiw	r28, 0x15	; 21
    19e4:	c6 01       	movw	r24, r12
    19e6:	b5 01       	movw	r22, r10
    19e8:	a4 01       	movw	r20, r8
    19ea:	93 01       	movw	r18, r6
    19ec:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
    19f0:	61 96       	adiw	r28, 0x11	; 17
    19f2:	6c af       	std	Y+60, r22	; 0x3c
    19f4:	7d af       	std	Y+61, r23	; 0x3d
    19f6:	8e af       	std	Y+62, r24	; 0x3e
    19f8:	9f af       	std	Y+63, r25	; 0x3f
    19fa:	61 97       	sbiw	r28, 0x11	; 17
    19fc:	c6 01       	movw	r24, r12
    19fe:	b5 01       	movw	r22, r10
    1a00:	65 96       	adiw	r28, 0x15	; 21
    1a02:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a04:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a06:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a08:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a0a:	65 97       	sbiw	r28, 0x15	; 21
    1a0c:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
    1a10:	1b 01       	movw	r2, r22
    1a12:	2c 01       	movw	r4, r24
    1a14:	c8 01       	movw	r24, r16
    1a16:	b7 01       	movw	r22, r14
    1a18:	a4 01       	movw	r20, r8
    1a1a:	93 01       	movw	r18, r6
    1a1c:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
    1a20:	5b 01       	movw	r10, r22
    1a22:	6c 01       	movw	r12, r24
    1a24:	c8 01       	movw	r24, r16
    1a26:	b7 01       	movw	r22, r14
    1a28:	65 96       	adiw	r28, 0x15	; 21
    1a2a:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a2c:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a2e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a30:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a32:	65 97       	sbiw	r28, 0x15	; 21
    1a34:	0e 94 b0 55 	call	0xab60	; 0xab60 <__mulsi3>
    1a38:	7b 01       	movw	r14, r22
    1a3a:	8c 01       	movw	r16, r24
    1a3c:	a6 01       	movw	r20, r12
    1a3e:	95 01       	movw	r18, r10
    1a40:	22 0d       	add	r18, r2
    1a42:	33 1d       	adc	r19, r3
    1a44:	44 1d       	adc	r20, r4
    1a46:	55 1d       	adc	r21, r5
    1a48:	61 96       	adiw	r28, 0x11	; 17
    1a4a:	6c ac       	ldd	r6, Y+60	; 0x3c
    1a4c:	7d ac       	ldd	r7, Y+61	; 0x3d
    1a4e:	8e ac       	ldd	r8, Y+62	; 0x3e
    1a50:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a52:	61 97       	sbiw	r28, 0x11	; 17
    1a54:	c4 01       	movw	r24, r8
    1a56:	aa 27       	eor	r26, r26
    1a58:	bb 27       	eor	r27, r27
    1a5a:	28 0f       	add	r18, r24
    1a5c:	39 1f       	adc	r19, r25
    1a5e:	4a 1f       	adc	r20, r26
    1a60:	5b 1f       	adc	r21, r27
    1a62:	2a 15       	cp	r18, r10
    1a64:	3b 05       	cpc	r19, r11
    1a66:	4c 05       	cpc	r20, r12
    1a68:	5d 05       	cpc	r21, r13
    1a6a:	48 f4       	brcc	.+18     	; 0x1a7e <__stack+0x97f>
    1a6c:	81 2c       	mov	r8, r1
    1a6e:	91 2c       	mov	r9, r1
    1a70:	e1 e0       	ldi	r30, 0x01	; 1
    1a72:	ae 2e       	mov	r10, r30
    1a74:	b1 2c       	mov	r11, r1
    1a76:	e8 0c       	add	r14, r8
    1a78:	f9 1c       	adc	r15, r9
    1a7a:	0a 1d       	adc	r16, r10
    1a7c:	1b 1d       	adc	r17, r11
    1a7e:	ca 01       	movw	r24, r20
    1a80:	aa 27       	eor	r26, r26
    1a82:	bb 27       	eor	r27, r27
    1a84:	57 01       	movw	r10, r14
    1a86:	68 01       	movw	r12, r16
    1a88:	a8 0e       	add	r10, r24
    1a8a:	b9 1e       	adc	r11, r25
    1a8c:	ca 1e       	adc	r12, r26
    1a8e:	db 1e       	adc	r13, r27
    1a90:	a9 01       	movw	r20, r18
    1a92:	33 27       	eor	r19, r19
    1a94:	22 27       	eor	r18, r18
    1a96:	61 96       	adiw	r28, 0x11	; 17
    1a98:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a9a:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a9c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a9e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1aa0:	61 97       	sbiw	r28, 0x11	; 17
    1aa2:	a0 70       	andi	r26, 0x00	; 0
    1aa4:	b0 70       	andi	r27, 0x00	; 0
    1aa6:	28 0f       	add	r18, r24
    1aa8:	39 1f       	adc	r19, r25
    1aaa:	4a 1f       	adc	r20, r26
    1aac:	5b 1f       	adc	r21, r27
    1aae:	e9 8c       	ldd	r14, Y+25	; 0x19
    1ab0:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1ab2:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1ab4:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1ab6:	ea 14       	cp	r14, r10
    1ab8:	fb 04       	cpc	r15, r11
    1aba:	0c 05       	cpc	r16, r12
    1abc:	1d 05       	cpc	r17, r13
    1abe:	70 f0       	brcs	.+28     	; 0x1adc <__stack+0x9dd>
    1ac0:	ae 14       	cp	r10, r14
    1ac2:	bf 04       	cpc	r11, r15
    1ac4:	c0 06       	cpc	r12, r16
    1ac6:	d1 06       	cpc	r13, r17
    1ac8:	69 f5       	brne	.+90     	; 0x1b24 <__stack+0xa25>
    1aca:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1acc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1ace:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ad0:	98 a1       	ldd	r25, Y+32	; 0x20
    1ad2:	62 17       	cp	r22, r18
    1ad4:	73 07       	cpc	r23, r19
    1ad6:	84 07       	cpc	r24, r20
    1ad8:	95 07       	cpc	r25, r21
    1ada:	20 f5       	brcc	.+72     	; 0x1b24 <__stack+0xa25>
    1adc:	da 01       	movw	r26, r20
    1ade:	c9 01       	movw	r24, r18
    1ae0:	6d a0       	ldd	r6, Y+37	; 0x25
    1ae2:	7e a0       	ldd	r7, Y+38	; 0x26
    1ae4:	8f a0       	ldd	r8, Y+39	; 0x27
    1ae6:	98 a4       	ldd	r9, Y+40	; 0x28
    1ae8:	86 19       	sub	r24, r6
    1aea:	97 09       	sbc	r25, r7
    1aec:	a8 09       	sbc	r26, r8
    1aee:	b9 09       	sbc	r27, r9
    1af0:	e9 a4       	ldd	r14, Y+41	; 0x29
    1af2:	fa a4       	ldd	r15, Y+42	; 0x2a
    1af4:	0b a5       	ldd	r16, Y+43	; 0x2b
    1af6:	1c a5       	ldd	r17, Y+44	; 0x2c
    1af8:	ae 18       	sub	r10, r14
    1afa:	bf 08       	sbc	r11, r15
    1afc:	c0 0a       	sbc	r12, r16
    1afe:	d1 0a       	sbc	r13, r17
    1b00:	ee 24       	eor	r14, r14
    1b02:	ff 24       	eor	r15, r15
    1b04:	87 01       	movw	r16, r14
    1b06:	28 17       	cp	r18, r24
    1b08:	39 07       	cpc	r19, r25
    1b0a:	4a 07       	cpc	r20, r26
    1b0c:	5b 07       	cpc	r21, r27
    1b0e:	28 f4       	brcc	.+10     	; 0x1b1a <__stack+0xa1b>
    1b10:	21 e0       	ldi	r18, 0x01	; 1
    1b12:	e2 2e       	mov	r14, r18
    1b14:	f1 2c       	mov	r15, r1
    1b16:	01 2d       	mov	r16, r1
    1b18:	11 2d       	mov	r17, r1
    1b1a:	ae 18       	sub	r10, r14
    1b1c:	bf 08       	sbc	r11, r15
    1b1e:	c0 0a       	sbc	r12, r16
    1b20:	d1 0a       	sbc	r13, r17
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <__stack+0xa29>
    1b24:	da 01       	movw	r26, r20
    1b26:	c9 01       	movw	r24, r18
    1b28:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1b2a:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1b2c:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1b2e:	98 a0       	ldd	r9, Y+32	; 0x20
    1b30:	68 1a       	sub	r6, r24
    1b32:	79 0a       	sbc	r7, r25
    1b34:	8a 0a       	sbc	r8, r26
    1b36:	9b 0a       	sbc	r9, r27
    1b38:	49 8d       	ldd	r20, Y+25	; 0x19
    1b3a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1b3c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1b3e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1b40:	4a 19       	sub	r20, r10
    1b42:	5b 09       	sbc	r21, r11
    1b44:	6c 09       	sbc	r22, r12
    1b46:	7d 09       	sbc	r23, r13
    1b48:	5a 01       	movw	r10, r20
    1b4a:	6b 01       	movw	r12, r22
    1b4c:	22 24       	eor	r2, r2
    1b4e:	33 24       	eor	r3, r3
    1b50:	21 01       	movw	r4, r2
    1b52:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b54:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b58:	98 a1       	ldd	r25, Y+32	; 0x20
    1b5a:	66 15       	cp	r22, r6
    1b5c:	77 05       	cpc	r23, r7
    1b5e:	88 05       	cpc	r24, r8
    1b60:	99 05       	cpc	r25, r9
    1b62:	28 f4       	brcc	.+10     	; 0x1b6e <__stack+0xa6f>
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	28 2e       	mov	r2, r24
    1b68:	31 2c       	mov	r3, r1
    1b6a:	41 2c       	mov	r4, r1
    1b6c:	51 2c       	mov	r5, r1
    1b6e:	86 01       	movw	r16, r12
    1b70:	75 01       	movw	r14, r10
    1b72:	e2 18       	sub	r14, r2
    1b74:	f3 08       	sbc	r15, r3
    1b76:	04 09       	sbc	r16, r4
    1b78:	15 09       	sbc	r17, r5
    1b7a:	a8 01       	movw	r20, r16
    1b7c:	97 01       	movw	r18, r14
    1b7e:	66 96       	adiw	r28, 0x16	; 22
    1b80:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b82:	66 97       	sbiw	r28, 0x16	; 22
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <__stack+0xa8f>
    1b86:	22 0f       	add	r18, r18
    1b88:	33 1f       	adc	r19, r19
    1b8a:	44 1f       	adc	r20, r20
    1b8c:	55 1f       	adc	r21, r21
    1b8e:	0a 94       	dec	r0
    1b90:	d2 f7       	brpl	.-12     	; 0x1b86 <__stack+0xa87>
    1b92:	d4 01       	movw	r26, r8
    1b94:	c3 01       	movw	r24, r6
    1b96:	67 96       	adiw	r28, 0x17	; 23
    1b98:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b9a:	67 97       	sbiw	r28, 0x17	; 23
    1b9c:	04 c0       	rjmp	.+8      	; 0x1ba6 <__stack+0xaa7>
    1b9e:	b6 95       	lsr	r27
    1ba0:	a7 95       	ror	r26
    1ba2:	97 95       	ror	r25
    1ba4:	87 95       	ror	r24
    1ba6:	0a 94       	dec	r0
    1ba8:	d2 f7       	brpl	.-12     	; 0x1b9e <__stack+0xa9f>
    1baa:	28 2b       	or	r18, r24
    1bac:	39 2b       	or	r19, r25
    1bae:	4a 2b       	or	r20, r26
    1bb0:	5b 2b       	or	r21, r27
    1bb2:	29 8b       	std	Y+17, r18	; 0x11
    1bb4:	3a 8b       	std	Y+18, r19	; 0x12
    1bb6:	4b 8b       	std	Y+19, r20	; 0x13
    1bb8:	5c 8b       	std	Y+20, r21	; 0x14
    1bba:	67 96       	adiw	r28, 0x17	; 23
    1bbc:	0f ac       	ldd	r0, Y+63	; 0x3f
    1bbe:	67 97       	sbiw	r28, 0x17	; 23
    1bc0:	04 c0       	rjmp	.+8      	; 0x1bca <__stack+0xacb>
    1bc2:	16 95       	lsr	r17
    1bc4:	07 95       	ror	r16
    1bc6:	f7 94       	ror	r15
    1bc8:	e7 94       	ror	r14
    1bca:	0a 94       	dec	r0
    1bcc:	d2 f7       	brpl	.-12     	; 0x1bc2 <__stack+0xac3>
    1bce:	ed 8a       	std	Y+21, r14	; 0x15
    1bd0:	fe 8a       	std	Y+22, r15	; 0x16
    1bd2:	0f 8b       	std	Y+23, r16	; 0x17
    1bd4:	18 8f       	std	Y+24, r17	; 0x18
    1bd6:	3a 89       	ldd	r19, Y+18	; 0x12
    1bd8:	4b 89       	ldd	r20, Y+19	; 0x13
    1bda:	5c 89       	ldd	r21, Y+20	; 0x14
    1bdc:	6e 2d       	mov	r22, r14
    1bde:	7e 89       	ldd	r23, Y+22	; 0x16
    1be0:	8f 89       	ldd	r24, Y+23	; 0x17
    1be2:	98 8d       	ldd	r25, Y+24	; 0x18
    1be4:	c5 5a       	subi	r28, 0xA5	; 165
    1be6:	df 4f       	sbci	r29, 0xFF	; 255
    1be8:	e2 e1       	ldi	r30, 0x12	; 18
    1bea:	0c 94 eb 55 	jmp	0xabd6	; 0xabd6 <__epilogue_restores__>

00001bee <_fpadd_parts>:
    1bee:	a0 e0       	ldi	r26, 0x00	; 0
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	ed ef       	ldi	r30, 0xFD	; 253
    1bf4:	fd e0       	ldi	r31, 0x0D	; 13
    1bf6:	0c 94 cf 55 	jmp	0xab9e	; 0xab9e <__prologue_saves__>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	2b 01       	movw	r4, r22
    1bfe:	fa 01       	movw	r30, r20
    1c00:	9c 91       	ld	r25, X
    1c02:	92 30       	cpi	r25, 0x02	; 2
    1c04:	08 f4       	brcc	.+2      	; 0x1c08 <_fpadd_parts+0x1a>
    1c06:	39 c1       	rjmp	.+626    	; 0x1e7a <_fpadd_parts+0x28c>
    1c08:	eb 01       	movw	r28, r22
    1c0a:	88 81       	ld	r24, Y
    1c0c:	82 30       	cpi	r24, 0x02	; 2
    1c0e:	08 f4       	brcc	.+2      	; 0x1c12 <_fpadd_parts+0x24>
    1c10:	33 c1       	rjmp	.+614    	; 0x1e78 <_fpadd_parts+0x28a>
    1c12:	94 30       	cpi	r25, 0x04	; 4
    1c14:	69 f4       	brne	.+26     	; 0x1c30 <_fpadd_parts+0x42>
    1c16:	84 30       	cpi	r24, 0x04	; 4
    1c18:	09 f0       	breq	.+2      	; 0x1c1c <_fpadd_parts+0x2e>
    1c1a:	2f c1       	rjmp	.+606    	; 0x1e7a <_fpadd_parts+0x28c>
    1c1c:	11 96       	adiw	r26, 0x01	; 1
    1c1e:	9c 91       	ld	r25, X
    1c20:	11 97       	sbiw	r26, 0x01	; 1
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	98 17       	cp	r25, r24
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <_fpadd_parts+0x3c>
    1c28:	28 c1       	rjmp	.+592    	; 0x1e7a <_fpadd_parts+0x28c>
    1c2a:	a9 ee       	ldi	r26, 0xE9	; 233
    1c2c:	b1 e0       	ldi	r27, 0x01	; 1
    1c2e:	25 c1       	rjmp	.+586    	; 0x1e7a <_fpadd_parts+0x28c>
    1c30:	84 30       	cpi	r24, 0x04	; 4
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <_fpadd_parts+0x48>
    1c34:	21 c1       	rjmp	.+578    	; 0x1e78 <_fpadd_parts+0x28a>
    1c36:	82 30       	cpi	r24, 0x02	; 2
    1c38:	a9 f4       	brne	.+42     	; 0x1c64 <_fpadd_parts+0x76>
    1c3a:	92 30       	cpi	r25, 0x02	; 2
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <_fpadd_parts+0x52>
    1c3e:	1d c1       	rjmp	.+570    	; 0x1e7a <_fpadd_parts+0x28c>
    1c40:	9a 01       	movw	r18, r20
    1c42:	ad 01       	movw	r20, r26
    1c44:	88 e0       	ldi	r24, 0x08	; 8
    1c46:	ea 01       	movw	r28, r20
    1c48:	09 90       	ld	r0, Y+
    1c4a:	ae 01       	movw	r20, r28
    1c4c:	e9 01       	movw	r28, r18
    1c4e:	09 92       	st	Y+, r0
    1c50:	9e 01       	movw	r18, r28
    1c52:	81 50       	subi	r24, 0x01	; 1
    1c54:	c1 f7       	brne	.-16     	; 0x1c46 <_fpadd_parts+0x58>
    1c56:	e2 01       	movw	r28, r4
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	11 96       	adiw	r26, 0x01	; 1
    1c5c:	9c 91       	ld	r25, X
    1c5e:	89 23       	and	r24, r25
    1c60:	81 83       	std	Z+1, r24	; 0x01
    1c62:	08 c1       	rjmp	.+528    	; 0x1e74 <_fpadd_parts+0x286>
    1c64:	92 30       	cpi	r25, 0x02	; 2
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <_fpadd_parts+0x7c>
    1c68:	07 c1       	rjmp	.+526    	; 0x1e78 <_fpadd_parts+0x28a>
    1c6a:	12 96       	adiw	r26, 0x02	; 2
    1c6c:	2d 90       	ld	r2, X+
    1c6e:	3c 90       	ld	r3, X
    1c70:	13 97       	sbiw	r26, 0x03	; 3
    1c72:	eb 01       	movw	r28, r22
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	9b 81       	ldd	r25, Y+3	; 0x03
    1c78:	14 96       	adiw	r26, 0x04	; 4
    1c7a:	ad 90       	ld	r10, X+
    1c7c:	bd 90       	ld	r11, X+
    1c7e:	cd 90       	ld	r12, X+
    1c80:	dc 90       	ld	r13, X
    1c82:	17 97       	sbiw	r26, 0x07	; 7
    1c84:	ec 80       	ldd	r14, Y+4	; 0x04
    1c86:	fd 80       	ldd	r15, Y+5	; 0x05
    1c88:	0e 81       	ldd	r16, Y+6	; 0x06
    1c8a:	1f 81       	ldd	r17, Y+7	; 0x07
    1c8c:	91 01       	movw	r18, r2
    1c8e:	28 1b       	sub	r18, r24
    1c90:	39 0b       	sbc	r19, r25
    1c92:	b9 01       	movw	r22, r18
    1c94:	37 ff       	sbrs	r19, 7
    1c96:	04 c0       	rjmp	.+8      	; 0x1ca0 <_fpadd_parts+0xb2>
    1c98:	66 27       	eor	r22, r22
    1c9a:	77 27       	eor	r23, r23
    1c9c:	62 1b       	sub	r22, r18
    1c9e:	73 0b       	sbc	r23, r19
    1ca0:	60 32       	cpi	r22, 0x20	; 32
    1ca2:	71 05       	cpc	r23, r1
    1ca4:	0c f0       	brlt	.+2      	; 0x1ca8 <_fpadd_parts+0xba>
    1ca6:	61 c0       	rjmp	.+194    	; 0x1d6a <_fpadd_parts+0x17c>
    1ca8:	12 16       	cp	r1, r18
    1caa:	13 06       	cpc	r1, r19
    1cac:	6c f5       	brge	.+90     	; 0x1d08 <_fpadd_parts+0x11a>
    1cae:	37 01       	movw	r6, r14
    1cb0:	48 01       	movw	r8, r16
    1cb2:	06 2e       	mov	r0, r22
    1cb4:	04 c0       	rjmp	.+8      	; 0x1cbe <_fpadd_parts+0xd0>
    1cb6:	96 94       	lsr	r9
    1cb8:	87 94       	ror	r8
    1cba:	77 94       	ror	r7
    1cbc:	67 94       	ror	r6
    1cbe:	0a 94       	dec	r0
    1cc0:	d2 f7       	brpl	.-12     	; 0x1cb6 <_fpadd_parts+0xc8>
    1cc2:	21 e0       	ldi	r18, 0x01	; 1
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <_fpadd_parts+0xe6>
    1ccc:	22 0f       	add	r18, r18
    1cce:	33 1f       	adc	r19, r19
    1cd0:	44 1f       	adc	r20, r20
    1cd2:	55 1f       	adc	r21, r21
    1cd4:	6a 95       	dec	r22
    1cd6:	d2 f7       	brpl	.-12     	; 0x1ccc <_fpadd_parts+0xde>
    1cd8:	21 50       	subi	r18, 0x01	; 1
    1cda:	30 40       	sbci	r19, 0x00	; 0
    1cdc:	40 40       	sbci	r20, 0x00	; 0
    1cde:	50 40       	sbci	r21, 0x00	; 0
    1ce0:	2e 21       	and	r18, r14
    1ce2:	3f 21       	and	r19, r15
    1ce4:	40 23       	and	r20, r16
    1ce6:	51 23       	and	r21, r17
    1ce8:	21 15       	cp	r18, r1
    1cea:	31 05       	cpc	r19, r1
    1cec:	41 05       	cpc	r20, r1
    1cee:	51 05       	cpc	r21, r1
    1cf0:	21 f0       	breq	.+8      	; 0x1cfa <_fpadd_parts+0x10c>
    1cf2:	21 e0       	ldi	r18, 0x01	; 1
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e0       	ldi	r20, 0x00	; 0
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	79 01       	movw	r14, r18
    1cfc:	8a 01       	movw	r16, r20
    1cfe:	e6 28       	or	r14, r6
    1d00:	f7 28       	or	r15, r7
    1d02:	08 29       	or	r16, r8
    1d04:	19 29       	or	r17, r9
    1d06:	3c c0       	rjmp	.+120    	; 0x1d80 <_fpadd_parts+0x192>
    1d08:	23 2b       	or	r18, r19
    1d0a:	d1 f1       	breq	.+116    	; 0x1d80 <_fpadd_parts+0x192>
    1d0c:	26 0e       	add	r2, r22
    1d0e:	37 1e       	adc	r3, r23
    1d10:	35 01       	movw	r6, r10
    1d12:	46 01       	movw	r8, r12
    1d14:	06 2e       	mov	r0, r22
    1d16:	04 c0       	rjmp	.+8      	; 0x1d20 <_fpadd_parts+0x132>
    1d18:	96 94       	lsr	r9
    1d1a:	87 94       	ror	r8
    1d1c:	77 94       	ror	r7
    1d1e:	67 94       	ror	r6
    1d20:	0a 94       	dec	r0
    1d22:	d2 f7       	brpl	.-12     	; 0x1d18 <_fpadd_parts+0x12a>
    1d24:	21 e0       	ldi	r18, 0x01	; 1
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e0       	ldi	r20, 0x00	; 0
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	04 c0       	rjmp	.+8      	; 0x1d36 <_fpadd_parts+0x148>
    1d2e:	22 0f       	add	r18, r18
    1d30:	33 1f       	adc	r19, r19
    1d32:	44 1f       	adc	r20, r20
    1d34:	55 1f       	adc	r21, r21
    1d36:	6a 95       	dec	r22
    1d38:	d2 f7       	brpl	.-12     	; 0x1d2e <_fpadd_parts+0x140>
    1d3a:	21 50       	subi	r18, 0x01	; 1
    1d3c:	30 40       	sbci	r19, 0x00	; 0
    1d3e:	40 40       	sbci	r20, 0x00	; 0
    1d40:	50 40       	sbci	r21, 0x00	; 0
    1d42:	2a 21       	and	r18, r10
    1d44:	3b 21       	and	r19, r11
    1d46:	4c 21       	and	r20, r12
    1d48:	5d 21       	and	r21, r13
    1d4a:	21 15       	cp	r18, r1
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	41 05       	cpc	r20, r1
    1d50:	51 05       	cpc	r21, r1
    1d52:	21 f0       	breq	.+8      	; 0x1d5c <_fpadd_parts+0x16e>
    1d54:	21 e0       	ldi	r18, 0x01	; 1
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	50 e0       	ldi	r21, 0x00	; 0
    1d5c:	59 01       	movw	r10, r18
    1d5e:	6a 01       	movw	r12, r20
    1d60:	a6 28       	or	r10, r6
    1d62:	b7 28       	or	r11, r7
    1d64:	c8 28       	or	r12, r8
    1d66:	d9 28       	or	r13, r9
    1d68:	0b c0       	rjmp	.+22     	; 0x1d80 <_fpadd_parts+0x192>
    1d6a:	82 15       	cp	r24, r2
    1d6c:	93 05       	cpc	r25, r3
    1d6e:	2c f0       	brlt	.+10     	; 0x1d7a <_fpadd_parts+0x18c>
    1d70:	1c 01       	movw	r2, r24
    1d72:	aa 24       	eor	r10, r10
    1d74:	bb 24       	eor	r11, r11
    1d76:	65 01       	movw	r12, r10
    1d78:	03 c0       	rjmp	.+6      	; 0x1d80 <_fpadd_parts+0x192>
    1d7a:	ee 24       	eor	r14, r14
    1d7c:	ff 24       	eor	r15, r15
    1d7e:	87 01       	movw	r16, r14
    1d80:	11 96       	adiw	r26, 0x01	; 1
    1d82:	9c 91       	ld	r25, X
    1d84:	d2 01       	movw	r26, r4
    1d86:	11 96       	adiw	r26, 0x01	; 1
    1d88:	8c 91       	ld	r24, X
    1d8a:	98 17       	cp	r25, r24
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <_fpadd_parts+0x1a2>
    1d8e:	45 c0       	rjmp	.+138    	; 0x1e1a <_fpadd_parts+0x22c>
    1d90:	99 23       	and	r25, r25
    1d92:	39 f0       	breq	.+14     	; 0x1da2 <_fpadd_parts+0x1b4>
    1d94:	a8 01       	movw	r20, r16
    1d96:	97 01       	movw	r18, r14
    1d98:	2a 19       	sub	r18, r10
    1d9a:	3b 09       	sbc	r19, r11
    1d9c:	4c 09       	sbc	r20, r12
    1d9e:	5d 09       	sbc	r21, r13
    1da0:	06 c0       	rjmp	.+12     	; 0x1dae <_fpadd_parts+0x1c0>
    1da2:	a6 01       	movw	r20, r12
    1da4:	95 01       	movw	r18, r10
    1da6:	2e 19       	sub	r18, r14
    1da8:	3f 09       	sbc	r19, r15
    1daa:	40 0b       	sbc	r20, r16
    1dac:	51 0b       	sbc	r21, r17
    1dae:	57 fd       	sbrc	r21, 7
    1db0:	08 c0       	rjmp	.+16     	; 0x1dc2 <_fpadd_parts+0x1d4>
    1db2:	11 82       	std	Z+1, r1	; 0x01
    1db4:	33 82       	std	Z+3, r3	; 0x03
    1db6:	22 82       	std	Z+2, r2	; 0x02
    1db8:	24 83       	std	Z+4, r18	; 0x04
    1dba:	35 83       	std	Z+5, r19	; 0x05
    1dbc:	46 83       	std	Z+6, r20	; 0x06
    1dbe:	57 83       	std	Z+7, r21	; 0x07
    1dc0:	1d c0       	rjmp	.+58     	; 0x1dfc <_fpadd_parts+0x20e>
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	81 83       	std	Z+1, r24	; 0x01
    1dc6:	33 82       	std	Z+3, r3	; 0x03
    1dc8:	22 82       	std	Z+2, r2	; 0x02
    1dca:	88 27       	eor	r24, r24
    1dcc:	99 27       	eor	r25, r25
    1dce:	dc 01       	movw	r26, r24
    1dd0:	82 1b       	sub	r24, r18
    1dd2:	93 0b       	sbc	r25, r19
    1dd4:	a4 0b       	sbc	r26, r20
    1dd6:	b5 0b       	sbc	r27, r21
    1dd8:	84 83       	std	Z+4, r24	; 0x04
    1dda:	95 83       	std	Z+5, r25	; 0x05
    1ddc:	a6 83       	std	Z+6, r26	; 0x06
    1dde:	b7 83       	std	Z+7, r27	; 0x07
    1de0:	0d c0       	rjmp	.+26     	; 0x1dfc <_fpadd_parts+0x20e>
    1de2:	22 0f       	add	r18, r18
    1de4:	33 1f       	adc	r19, r19
    1de6:	44 1f       	adc	r20, r20
    1de8:	55 1f       	adc	r21, r21
    1dea:	24 83       	std	Z+4, r18	; 0x04
    1dec:	35 83       	std	Z+5, r19	; 0x05
    1dee:	46 83       	std	Z+6, r20	; 0x06
    1df0:	57 83       	std	Z+7, r21	; 0x07
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	93 83       	std	Z+3, r25	; 0x03
    1dfa:	82 83       	std	Z+2, r24	; 0x02
    1dfc:	24 81       	ldd	r18, Z+4	; 0x04
    1dfe:	35 81       	ldd	r19, Z+5	; 0x05
    1e00:	46 81       	ldd	r20, Z+6	; 0x06
    1e02:	57 81       	ldd	r21, Z+7	; 0x07
    1e04:	da 01       	movw	r26, r20
    1e06:	c9 01       	movw	r24, r18
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	a1 09       	sbc	r26, r1
    1e0c:	b1 09       	sbc	r27, r1
    1e0e:	8f 5f       	subi	r24, 0xFF	; 255
    1e10:	9f 4f       	sbci	r25, 0xFF	; 255
    1e12:	af 4f       	sbci	r26, 0xFF	; 255
    1e14:	bf 43       	sbci	r27, 0x3F	; 63
    1e16:	28 f3       	brcs	.-54     	; 0x1de2 <_fpadd_parts+0x1f4>
    1e18:	0b c0       	rjmp	.+22     	; 0x1e30 <_fpadd_parts+0x242>
    1e1a:	91 83       	std	Z+1, r25	; 0x01
    1e1c:	33 82       	std	Z+3, r3	; 0x03
    1e1e:	22 82       	std	Z+2, r2	; 0x02
    1e20:	ea 0c       	add	r14, r10
    1e22:	fb 1c       	adc	r15, r11
    1e24:	0c 1d       	adc	r16, r12
    1e26:	1d 1d       	adc	r17, r13
    1e28:	e4 82       	std	Z+4, r14	; 0x04
    1e2a:	f5 82       	std	Z+5, r15	; 0x05
    1e2c:	06 83       	std	Z+6, r16	; 0x06
    1e2e:	17 83       	std	Z+7, r17	; 0x07
    1e30:	83 e0       	ldi	r24, 0x03	; 3
    1e32:	80 83       	st	Z, r24
    1e34:	24 81       	ldd	r18, Z+4	; 0x04
    1e36:	35 81       	ldd	r19, Z+5	; 0x05
    1e38:	46 81       	ldd	r20, Z+6	; 0x06
    1e3a:	57 81       	ldd	r21, Z+7	; 0x07
    1e3c:	57 ff       	sbrs	r21, 7
    1e3e:	1a c0       	rjmp	.+52     	; 0x1e74 <_fpadd_parts+0x286>
    1e40:	c9 01       	movw	r24, r18
    1e42:	aa 27       	eor	r26, r26
    1e44:	97 fd       	sbrc	r25, 7
    1e46:	a0 95       	com	r26
    1e48:	ba 2f       	mov	r27, r26
    1e4a:	81 70       	andi	r24, 0x01	; 1
    1e4c:	90 70       	andi	r25, 0x00	; 0
    1e4e:	a0 70       	andi	r26, 0x00	; 0
    1e50:	b0 70       	andi	r27, 0x00	; 0
    1e52:	56 95       	lsr	r21
    1e54:	47 95       	ror	r20
    1e56:	37 95       	ror	r19
    1e58:	27 95       	ror	r18
    1e5a:	82 2b       	or	r24, r18
    1e5c:	93 2b       	or	r25, r19
    1e5e:	a4 2b       	or	r26, r20
    1e60:	b5 2b       	or	r27, r21
    1e62:	84 83       	std	Z+4, r24	; 0x04
    1e64:	95 83       	std	Z+5, r25	; 0x05
    1e66:	a6 83       	std	Z+6, r26	; 0x06
    1e68:	b7 83       	std	Z+7, r27	; 0x07
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	93 81       	ldd	r25, Z+3	; 0x03
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	93 83       	std	Z+3, r25	; 0x03
    1e72:	82 83       	std	Z+2, r24	; 0x02
    1e74:	df 01       	movw	r26, r30
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <_fpadd_parts+0x28c>
    1e78:	d2 01       	movw	r26, r4
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	e2 e1       	ldi	r30, 0x12	; 18
    1e82:	0c 94 eb 55 	jmp	0xabd6	; 0xabd6 <__epilogue_restores__>

00001e86 <__subsf3>:
    1e86:	a0 e2       	ldi	r26, 0x20	; 32
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e9 e4       	ldi	r30, 0x49	; 73
    1e8c:	ff e0       	ldi	r31, 0x0F	; 15
    1e8e:	0c 94 db 55 	jmp	0xabb6	; 0xabb6 <__prologue_saves__+0x18>
    1e92:	69 83       	std	Y+1, r22	; 0x01
    1e94:	7a 83       	std	Y+2, r23	; 0x02
    1e96:	8b 83       	std	Y+3, r24	; 0x03
    1e98:	9c 83       	std	Y+4, r25	; 0x04
    1e9a:	2d 83       	std	Y+5, r18	; 0x05
    1e9c:	3e 83       	std	Y+6, r19	; 0x06
    1e9e:	4f 83       	std	Y+7, r20	; 0x07
    1ea0:	58 87       	std	Y+8, r21	; 0x08
    1ea2:	e9 e0       	ldi	r30, 0x09	; 9
    1ea4:	ee 2e       	mov	r14, r30
    1ea6:	f1 2c       	mov	r15, r1
    1ea8:	ec 0e       	add	r14, r28
    1eaa:	fd 1e       	adc	r15, r29
    1eac:	ce 01       	movw	r24, r28
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	b7 01       	movw	r22, r14
    1eb2:	0e 94 00 13 	call	0x2600	; 0x2600 <__unpack_f>
    1eb6:	8e 01       	movw	r16, r28
    1eb8:	0f 5e       	subi	r16, 0xEF	; 239
    1eba:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	05 96       	adiw	r24, 0x05	; 5
    1ec0:	b8 01       	movw	r22, r16
    1ec2:	0e 94 00 13 	call	0x2600	; 0x2600 <__unpack_f>
    1ec6:	8a 89       	ldd	r24, Y+18	; 0x12
    1ec8:	91 e0       	ldi	r25, 0x01	; 1
    1eca:	89 27       	eor	r24, r25
    1ecc:	8a 8b       	std	Y+18, r24	; 0x12
    1ece:	c7 01       	movw	r24, r14
    1ed0:	b8 01       	movw	r22, r16
    1ed2:	ae 01       	movw	r20, r28
    1ed4:	47 5e       	subi	r20, 0xE7	; 231
    1ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed8:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_fpadd_parts>
    1edc:	0e 94 2b 12 	call	0x2456	; 0x2456 <__pack_f>
    1ee0:	a0 96       	adiw	r28, 0x20	; 32
    1ee2:	e6 e0       	ldi	r30, 0x06	; 6
    1ee4:	0c 94 f7 55 	jmp	0xabee	; 0xabee <__epilogue_restores__+0x18>

00001ee8 <__addsf3>:
    1ee8:	a0 e2       	ldi	r26, 0x20	; 32
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	ea e7       	ldi	r30, 0x7A	; 122
    1eee:	ff e0       	ldi	r31, 0x0F	; 15
    1ef0:	0c 94 db 55 	jmp	0xabb6	; 0xabb6 <__prologue_saves__+0x18>
    1ef4:	69 83       	std	Y+1, r22	; 0x01
    1ef6:	7a 83       	std	Y+2, r23	; 0x02
    1ef8:	8b 83       	std	Y+3, r24	; 0x03
    1efa:	9c 83       	std	Y+4, r25	; 0x04
    1efc:	2d 83       	std	Y+5, r18	; 0x05
    1efe:	3e 83       	std	Y+6, r19	; 0x06
    1f00:	4f 83       	std	Y+7, r20	; 0x07
    1f02:	58 87       	std	Y+8, r21	; 0x08
    1f04:	f9 e0       	ldi	r31, 0x09	; 9
    1f06:	ef 2e       	mov	r14, r31
    1f08:	f1 2c       	mov	r15, r1
    1f0a:	ec 0e       	add	r14, r28
    1f0c:	fd 1e       	adc	r15, r29
    1f0e:	ce 01       	movw	r24, r28
    1f10:	01 96       	adiw	r24, 0x01	; 1
    1f12:	b7 01       	movw	r22, r14
    1f14:	0e 94 00 13 	call	0x2600	; 0x2600 <__unpack_f>
    1f18:	8e 01       	movw	r16, r28
    1f1a:	0f 5e       	subi	r16, 0xEF	; 239
    1f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1e:	ce 01       	movw	r24, r28
    1f20:	05 96       	adiw	r24, 0x05	; 5
    1f22:	b8 01       	movw	r22, r16
    1f24:	0e 94 00 13 	call	0x2600	; 0x2600 <__unpack_f>
    1f28:	c7 01       	movw	r24, r14
    1f2a:	b8 01       	movw	r22, r16
    1f2c:	ae 01       	movw	r20, r28
    1f2e:	47 5e       	subi	r20, 0xE7	; 231
    1f30:	5f 4f       	sbci	r21, 0xFF	; 255
    1f32:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_fpadd_parts>
    1f36:	0e 94 2b 12 	call	0x2456	; 0x2456 <__pack_f>
    1f3a:	a0 96       	adiw	r28, 0x20	; 32
    1f3c:	e6 e0       	ldi	r30, 0x06	; 6
    1f3e:	0c 94 f7 55 	jmp	0xabee	; 0xabee <__epilogue_restores__+0x18>

00001f42 <__mulsf3>:
    1f42:	a0 e2       	ldi	r26, 0x20	; 32
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	e7 ea       	ldi	r30, 0xA7	; 167
    1f48:	ff e0       	ldi	r31, 0x0F	; 15
    1f4a:	0c 94 cf 55 	jmp	0xab9e	; 0xab9e <__prologue_saves__>
    1f4e:	69 83       	std	Y+1, r22	; 0x01
    1f50:	7a 83       	std	Y+2, r23	; 0x02
    1f52:	8b 83       	std	Y+3, r24	; 0x03
    1f54:	9c 83       	std	Y+4, r25	; 0x04
    1f56:	2d 83       	std	Y+5, r18	; 0x05
    1f58:	3e 83       	std	Y+6, r19	; 0x06
    1f5a:	4f 83       	std	Y+7, r20	; 0x07
    1f5c:	58 87       	std	Y+8, r21	; 0x08
    1f5e:	ce 01       	movw	r24, r28
    1f60:	01 96       	adiw	r24, 0x01	; 1
    1f62:	be 01       	movw	r22, r28
    1f64:	67 5f       	subi	r22, 0xF7	; 247
    1f66:	7f 4f       	sbci	r23, 0xFF	; 255
    1f68:	0e 94 00 13 	call	0x2600	; 0x2600 <__unpack_f>
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	05 96       	adiw	r24, 0x05	; 5
    1f70:	be 01       	movw	r22, r28
    1f72:	6f 5e       	subi	r22, 0xEF	; 239
    1f74:	7f 4f       	sbci	r23, 0xFF	; 255
    1f76:	0e 94 00 13 	call	0x2600	; 0x2600 <__unpack_f>
    1f7a:	99 85       	ldd	r25, Y+9	; 0x09
    1f7c:	92 30       	cpi	r25, 0x02	; 2
    1f7e:	88 f0       	brcs	.+34     	; 0x1fa2 <__mulsf3+0x60>
    1f80:	89 89       	ldd	r24, Y+17	; 0x11
    1f82:	82 30       	cpi	r24, 0x02	; 2
    1f84:	c8 f0       	brcs	.+50     	; 0x1fb8 <__mulsf3+0x76>
    1f86:	94 30       	cpi	r25, 0x04	; 4
    1f88:	19 f4       	brne	.+6      	; 0x1f90 <__mulsf3+0x4e>
    1f8a:	82 30       	cpi	r24, 0x02	; 2
    1f8c:	51 f4       	brne	.+20     	; 0x1fa2 <__mulsf3+0x60>
    1f8e:	04 c0       	rjmp	.+8      	; 0x1f98 <__mulsf3+0x56>
    1f90:	84 30       	cpi	r24, 0x04	; 4
    1f92:	29 f4       	brne	.+10     	; 0x1f9e <__mulsf3+0x5c>
    1f94:	92 30       	cpi	r25, 0x02	; 2
    1f96:	81 f4       	brne	.+32     	; 0x1fb8 <__mulsf3+0x76>
    1f98:	89 ee       	ldi	r24, 0xE9	; 233
    1f9a:	91 e0       	ldi	r25, 0x01	; 1
    1f9c:	c6 c0       	rjmp	.+396    	; 0x212a <__mulsf3+0x1e8>
    1f9e:	92 30       	cpi	r25, 0x02	; 2
    1fa0:	49 f4       	brne	.+18     	; 0x1fb4 <__mulsf3+0x72>
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa6:	8a 89       	ldd	r24, Y+18	; 0x12
    1fa8:	98 13       	cpse	r25, r24
    1faa:	21 e0       	ldi	r18, 0x01	; 1
    1fac:	2a 87       	std	Y+10, r18	; 0x0a
    1fae:	ce 01       	movw	r24, r28
    1fb0:	09 96       	adiw	r24, 0x09	; 9
    1fb2:	bb c0       	rjmp	.+374    	; 0x212a <__mulsf3+0x1e8>
    1fb4:	82 30       	cpi	r24, 0x02	; 2
    1fb6:	49 f4       	brne	.+18     	; 0x1fca <__mulsf3+0x88>
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbc:	8a 89       	ldd	r24, Y+18	; 0x12
    1fbe:	98 13       	cpse	r25, r24
    1fc0:	21 e0       	ldi	r18, 0x01	; 1
    1fc2:	2a 8b       	std	Y+18, r18	; 0x12
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	41 96       	adiw	r24, 0x11	; 17
    1fc8:	b0 c0       	rjmp	.+352    	; 0x212a <__mulsf3+0x1e8>
    1fca:	2d 84       	ldd	r2, Y+13	; 0x0d
    1fcc:	3e 84       	ldd	r3, Y+14	; 0x0e
    1fce:	4f 84       	ldd	r4, Y+15	; 0x0f
    1fd0:	58 88       	ldd	r5, Y+16	; 0x10
    1fd2:	6d 88       	ldd	r6, Y+21	; 0x15
    1fd4:	7e 88       	ldd	r7, Y+22	; 0x16
    1fd6:	8f 88       	ldd	r8, Y+23	; 0x17
    1fd8:	98 8c       	ldd	r9, Y+24	; 0x18
    1fda:	ee 24       	eor	r14, r14
    1fdc:	ff 24       	eor	r15, r15
    1fde:	87 01       	movw	r16, r14
    1fe0:	aa 24       	eor	r10, r10
    1fe2:	bb 24       	eor	r11, r11
    1fe4:	65 01       	movw	r12, r10
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	70 e0       	ldi	r23, 0x00	; 0
    1fee:	e0 e0       	ldi	r30, 0x00	; 0
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	c1 01       	movw	r24, r2
    1ff4:	81 70       	andi	r24, 0x01	; 1
    1ff6:	90 70       	andi	r25, 0x00	; 0
    1ff8:	89 2b       	or	r24, r25
    1ffa:	e9 f0       	breq	.+58     	; 0x2036 <__mulsf3+0xf4>
    1ffc:	e6 0c       	add	r14, r6
    1ffe:	f7 1c       	adc	r15, r7
    2000:	08 1d       	adc	r16, r8
    2002:	19 1d       	adc	r17, r9
    2004:	9a 01       	movw	r18, r20
    2006:	ab 01       	movw	r20, r22
    2008:	2a 0d       	add	r18, r10
    200a:	3b 1d       	adc	r19, r11
    200c:	4c 1d       	adc	r20, r12
    200e:	5d 1d       	adc	r21, r13
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	a0 e0       	ldi	r26, 0x00	; 0
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e6 14       	cp	r14, r6
    201a:	f7 04       	cpc	r15, r7
    201c:	08 05       	cpc	r16, r8
    201e:	19 05       	cpc	r17, r9
    2020:	20 f4       	brcc	.+8      	; 0x202a <__mulsf3+0xe8>
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a0 e0       	ldi	r26, 0x00	; 0
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	ba 01       	movw	r22, r20
    202c:	a9 01       	movw	r20, r18
    202e:	48 0f       	add	r20, r24
    2030:	59 1f       	adc	r21, r25
    2032:	6a 1f       	adc	r22, r26
    2034:	7b 1f       	adc	r23, r27
    2036:	aa 0c       	add	r10, r10
    2038:	bb 1c       	adc	r11, r11
    203a:	cc 1c       	adc	r12, r12
    203c:	dd 1c       	adc	r13, r13
    203e:	97 fe       	sbrs	r9, 7
    2040:	08 c0       	rjmp	.+16     	; 0x2052 <__mulsf3+0x110>
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	a0 e0       	ldi	r26, 0x00	; 0
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	a8 2a       	or	r10, r24
    204c:	b9 2a       	or	r11, r25
    204e:	ca 2a       	or	r12, r26
    2050:	db 2a       	or	r13, r27
    2052:	31 96       	adiw	r30, 0x01	; 1
    2054:	e0 32       	cpi	r30, 0x20	; 32
    2056:	f1 05       	cpc	r31, r1
    2058:	49 f0       	breq	.+18     	; 0x206c <__mulsf3+0x12a>
    205a:	66 0c       	add	r6, r6
    205c:	77 1c       	adc	r7, r7
    205e:	88 1c       	adc	r8, r8
    2060:	99 1c       	adc	r9, r9
    2062:	56 94       	lsr	r5
    2064:	47 94       	ror	r4
    2066:	37 94       	ror	r3
    2068:	27 94       	ror	r2
    206a:	c3 cf       	rjmp	.-122    	; 0x1ff2 <__mulsf3+0xb0>
    206c:	fa 85       	ldd	r31, Y+10	; 0x0a
    206e:	ea 89       	ldd	r30, Y+18	; 0x12
    2070:	2b 89       	ldd	r18, Y+19	; 0x13
    2072:	3c 89       	ldd	r19, Y+20	; 0x14
    2074:	8b 85       	ldd	r24, Y+11	; 0x0b
    2076:	9c 85       	ldd	r25, Y+12	; 0x0c
    2078:	28 0f       	add	r18, r24
    207a:	39 1f       	adc	r19, r25
    207c:	2e 5f       	subi	r18, 0xFE	; 254
    207e:	3f 4f       	sbci	r19, 0xFF	; 255
    2080:	17 c0       	rjmp	.+46     	; 0x20b0 <__mulsf3+0x16e>
    2082:	ca 01       	movw	r24, r20
    2084:	81 70       	andi	r24, 0x01	; 1
    2086:	90 70       	andi	r25, 0x00	; 0
    2088:	89 2b       	or	r24, r25
    208a:	61 f0       	breq	.+24     	; 0x20a4 <__mulsf3+0x162>
    208c:	16 95       	lsr	r17
    208e:	07 95       	ror	r16
    2090:	f7 94       	ror	r15
    2092:	e7 94       	ror	r14
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	a0 e0       	ldi	r26, 0x00	; 0
    209a:	b0 e8       	ldi	r27, 0x80	; 128
    209c:	e8 2a       	or	r14, r24
    209e:	f9 2a       	or	r15, r25
    20a0:	0a 2b       	or	r16, r26
    20a2:	1b 2b       	or	r17, r27
    20a4:	76 95       	lsr	r23
    20a6:	67 95       	ror	r22
    20a8:	57 95       	ror	r21
    20aa:	47 95       	ror	r20
    20ac:	2f 5f       	subi	r18, 0xFF	; 255
    20ae:	3f 4f       	sbci	r19, 0xFF	; 255
    20b0:	77 fd       	sbrc	r23, 7
    20b2:	e7 cf       	rjmp	.-50     	; 0x2082 <__mulsf3+0x140>
    20b4:	0c c0       	rjmp	.+24     	; 0x20ce <__mulsf3+0x18c>
    20b6:	44 0f       	add	r20, r20
    20b8:	55 1f       	adc	r21, r21
    20ba:	66 1f       	adc	r22, r22
    20bc:	77 1f       	adc	r23, r23
    20be:	17 fd       	sbrc	r17, 7
    20c0:	41 60       	ori	r20, 0x01	; 1
    20c2:	ee 0c       	add	r14, r14
    20c4:	ff 1c       	adc	r15, r15
    20c6:	00 1f       	adc	r16, r16
    20c8:	11 1f       	adc	r17, r17
    20ca:	21 50       	subi	r18, 0x01	; 1
    20cc:	30 40       	sbci	r19, 0x00	; 0
    20ce:	40 30       	cpi	r20, 0x00	; 0
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	59 07       	cpc	r21, r25
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	69 07       	cpc	r22, r25
    20d8:	90 e4       	ldi	r25, 0x40	; 64
    20da:	79 07       	cpc	r23, r25
    20dc:	60 f3       	brcs	.-40     	; 0x20b6 <__mulsf3+0x174>
    20de:	2b 8f       	std	Y+27, r18	; 0x1b
    20e0:	3c 8f       	std	Y+28, r19	; 0x1c
    20e2:	db 01       	movw	r26, r22
    20e4:	ca 01       	movw	r24, r20
    20e6:	8f 77       	andi	r24, 0x7F	; 127
    20e8:	90 70       	andi	r25, 0x00	; 0
    20ea:	a0 70       	andi	r26, 0x00	; 0
    20ec:	b0 70       	andi	r27, 0x00	; 0
    20ee:	80 34       	cpi	r24, 0x40	; 64
    20f0:	91 05       	cpc	r25, r1
    20f2:	a1 05       	cpc	r26, r1
    20f4:	b1 05       	cpc	r27, r1
    20f6:	61 f4       	brne	.+24     	; 0x2110 <__mulsf3+0x1ce>
    20f8:	47 fd       	sbrc	r20, 7
    20fa:	0a c0       	rjmp	.+20     	; 0x2110 <__mulsf3+0x1ce>
    20fc:	e1 14       	cp	r14, r1
    20fe:	f1 04       	cpc	r15, r1
    2100:	01 05       	cpc	r16, r1
    2102:	11 05       	cpc	r17, r1
    2104:	29 f0       	breq	.+10     	; 0x2110 <__mulsf3+0x1ce>
    2106:	40 5c       	subi	r20, 0xC0	; 192
    2108:	5f 4f       	sbci	r21, 0xFF	; 255
    210a:	6f 4f       	sbci	r22, 0xFF	; 255
    210c:	7f 4f       	sbci	r23, 0xFF	; 255
    210e:	40 78       	andi	r20, 0x80	; 128
    2110:	1a 8e       	std	Y+26, r1	; 0x1a
    2112:	fe 17       	cp	r31, r30
    2114:	11 f0       	breq	.+4      	; 0x211a <__mulsf3+0x1d8>
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	8a 8f       	std	Y+26, r24	; 0x1a
    211a:	4d 8f       	std	Y+29, r20	; 0x1d
    211c:	5e 8f       	std	Y+30, r21	; 0x1e
    211e:	6f 8f       	std	Y+31, r22	; 0x1f
    2120:	78 a3       	std	Y+32, r23	; 0x20
    2122:	83 e0       	ldi	r24, 0x03	; 3
    2124:	89 8f       	std	Y+25, r24	; 0x19
    2126:	ce 01       	movw	r24, r28
    2128:	49 96       	adiw	r24, 0x19	; 25
    212a:	0e 94 2b 12 	call	0x2456	; 0x2456 <__pack_f>
    212e:	a0 96       	adiw	r28, 0x20	; 32
    2130:	e2 e1       	ldi	r30, 0x12	; 18
    2132:	0c 94 eb 55 	jmp	0xabd6	; 0xabd6 <__epilogue_restores__>

00002136 <__divsf3>:
    2136:	a8 e1       	ldi	r26, 0x18	; 24
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e1 ea       	ldi	r30, 0xA1	; 161
    213c:	f0 e1       	ldi	r31, 0x10	; 16
    213e:	0c 94 d7 55 	jmp	0xabae	; 0xabae <__prologue_saves__+0x10>
    2142:	69 83       	std	Y+1, r22	; 0x01
    2144:	7a 83       	std	Y+2, r23	; 0x02
    2146:	8b 83       	std	Y+3, r24	; 0x03
    2148:	9c 83       	std	Y+4, r25	; 0x04
    214a:	2d 83       	std	Y+5, r18	; 0x05
    214c:	3e 83       	std	Y+6, r19	; 0x06
    214e:	4f 83       	std	Y+7, r20	; 0x07
    2150:	58 87       	std	Y+8, r21	; 0x08
    2152:	b9 e0       	ldi	r27, 0x09	; 9
    2154:	eb 2e       	mov	r14, r27
    2156:	f1 2c       	mov	r15, r1
    2158:	ec 0e       	add	r14, r28
    215a:	fd 1e       	adc	r15, r29
    215c:	ce 01       	movw	r24, r28
    215e:	01 96       	adiw	r24, 0x01	; 1
    2160:	b7 01       	movw	r22, r14
    2162:	0e 94 00 13 	call	0x2600	; 0x2600 <__unpack_f>
    2166:	8e 01       	movw	r16, r28
    2168:	0f 5e       	subi	r16, 0xEF	; 239
    216a:	1f 4f       	sbci	r17, 0xFF	; 255
    216c:	ce 01       	movw	r24, r28
    216e:	05 96       	adiw	r24, 0x05	; 5
    2170:	b8 01       	movw	r22, r16
    2172:	0e 94 00 13 	call	0x2600	; 0x2600 <__unpack_f>
    2176:	29 85       	ldd	r18, Y+9	; 0x09
    2178:	22 30       	cpi	r18, 0x02	; 2
    217a:	08 f4       	brcc	.+2      	; 0x217e <__divsf3+0x48>
    217c:	7e c0       	rjmp	.+252    	; 0x227a <__divsf3+0x144>
    217e:	39 89       	ldd	r19, Y+17	; 0x11
    2180:	32 30       	cpi	r19, 0x02	; 2
    2182:	10 f4       	brcc	.+4      	; 0x2188 <__divsf3+0x52>
    2184:	b8 01       	movw	r22, r16
    2186:	7c c0       	rjmp	.+248    	; 0x2280 <__divsf3+0x14a>
    2188:	8a 85       	ldd	r24, Y+10	; 0x0a
    218a:	9a 89       	ldd	r25, Y+18	; 0x12
    218c:	89 27       	eor	r24, r25
    218e:	8a 87       	std	Y+10, r24	; 0x0a
    2190:	24 30       	cpi	r18, 0x04	; 4
    2192:	11 f0       	breq	.+4      	; 0x2198 <__divsf3+0x62>
    2194:	22 30       	cpi	r18, 0x02	; 2
    2196:	31 f4       	brne	.+12     	; 0x21a4 <__divsf3+0x6e>
    2198:	23 17       	cp	r18, r19
    219a:	09 f0       	breq	.+2      	; 0x219e <__divsf3+0x68>
    219c:	6e c0       	rjmp	.+220    	; 0x227a <__divsf3+0x144>
    219e:	69 ee       	ldi	r22, 0xE9	; 233
    21a0:	71 e0       	ldi	r23, 0x01	; 1
    21a2:	6e c0       	rjmp	.+220    	; 0x2280 <__divsf3+0x14a>
    21a4:	34 30       	cpi	r19, 0x04	; 4
    21a6:	39 f4       	brne	.+14     	; 0x21b6 <__divsf3+0x80>
    21a8:	1d 86       	std	Y+13, r1	; 0x0d
    21aa:	1e 86       	std	Y+14, r1	; 0x0e
    21ac:	1f 86       	std	Y+15, r1	; 0x0f
    21ae:	18 8a       	std	Y+16, r1	; 0x10
    21b0:	1c 86       	std	Y+12, r1	; 0x0c
    21b2:	1b 86       	std	Y+11, r1	; 0x0b
    21b4:	04 c0       	rjmp	.+8      	; 0x21be <__divsf3+0x88>
    21b6:	32 30       	cpi	r19, 0x02	; 2
    21b8:	21 f4       	brne	.+8      	; 0x21c2 <__divsf3+0x8c>
    21ba:	84 e0       	ldi	r24, 0x04	; 4
    21bc:	89 87       	std	Y+9, r24	; 0x09
    21be:	b7 01       	movw	r22, r14
    21c0:	5f c0       	rjmp	.+190    	; 0x2280 <__divsf3+0x14a>
    21c2:	2b 85       	ldd	r18, Y+11	; 0x0b
    21c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    21c6:	8b 89       	ldd	r24, Y+19	; 0x13
    21c8:	9c 89       	ldd	r25, Y+20	; 0x14
    21ca:	28 1b       	sub	r18, r24
    21cc:	39 0b       	sbc	r19, r25
    21ce:	3c 87       	std	Y+12, r19	; 0x0c
    21d0:	2b 87       	std	Y+11, r18	; 0x0b
    21d2:	ed 84       	ldd	r14, Y+13	; 0x0d
    21d4:	fe 84       	ldd	r15, Y+14	; 0x0e
    21d6:	0f 85       	ldd	r16, Y+15	; 0x0f
    21d8:	18 89       	ldd	r17, Y+16	; 0x10
    21da:	ad 88       	ldd	r10, Y+21	; 0x15
    21dc:	be 88       	ldd	r11, Y+22	; 0x16
    21de:	cf 88       	ldd	r12, Y+23	; 0x17
    21e0:	d8 8c       	ldd	r13, Y+24	; 0x18
    21e2:	ea 14       	cp	r14, r10
    21e4:	fb 04       	cpc	r15, r11
    21e6:	0c 05       	cpc	r16, r12
    21e8:	1d 05       	cpc	r17, r13
    21ea:	40 f4       	brcc	.+16     	; 0x21fc <__divsf3+0xc6>
    21ec:	ee 0c       	add	r14, r14
    21ee:	ff 1c       	adc	r15, r15
    21f0:	00 1f       	adc	r16, r16
    21f2:	11 1f       	adc	r17, r17
    21f4:	21 50       	subi	r18, 0x01	; 1
    21f6:	30 40       	sbci	r19, 0x00	; 0
    21f8:	3c 87       	std	Y+12, r19	; 0x0c
    21fa:	2b 87       	std	Y+11, r18	; 0x0b
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	50 e0       	ldi	r21, 0x00	; 0
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	a0 e0       	ldi	r26, 0x00	; 0
    220a:	b0 e4       	ldi	r27, 0x40	; 64
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	70 e0       	ldi	r23, 0x00	; 0
    2210:	ea 14       	cp	r14, r10
    2212:	fb 04       	cpc	r15, r11
    2214:	0c 05       	cpc	r16, r12
    2216:	1d 05       	cpc	r17, r13
    2218:	40 f0       	brcs	.+16     	; 0x222a <__divsf3+0xf4>
    221a:	28 2b       	or	r18, r24
    221c:	39 2b       	or	r19, r25
    221e:	4a 2b       	or	r20, r26
    2220:	5b 2b       	or	r21, r27
    2222:	ea 18       	sub	r14, r10
    2224:	fb 08       	sbc	r15, r11
    2226:	0c 09       	sbc	r16, r12
    2228:	1d 09       	sbc	r17, r13
    222a:	b6 95       	lsr	r27
    222c:	a7 95       	ror	r26
    222e:	97 95       	ror	r25
    2230:	87 95       	ror	r24
    2232:	ee 0c       	add	r14, r14
    2234:	ff 1c       	adc	r15, r15
    2236:	00 1f       	adc	r16, r16
    2238:	11 1f       	adc	r17, r17
    223a:	6f 5f       	subi	r22, 0xFF	; 255
    223c:	7f 4f       	sbci	r23, 0xFF	; 255
    223e:	6f 31       	cpi	r22, 0x1F	; 31
    2240:	71 05       	cpc	r23, r1
    2242:	31 f7       	brne	.-52     	; 0x2210 <__divsf3+0xda>
    2244:	da 01       	movw	r26, r20
    2246:	c9 01       	movw	r24, r18
    2248:	8f 77       	andi	r24, 0x7F	; 127
    224a:	90 70       	andi	r25, 0x00	; 0
    224c:	a0 70       	andi	r26, 0x00	; 0
    224e:	b0 70       	andi	r27, 0x00	; 0
    2250:	80 34       	cpi	r24, 0x40	; 64
    2252:	91 05       	cpc	r25, r1
    2254:	a1 05       	cpc	r26, r1
    2256:	b1 05       	cpc	r27, r1
    2258:	61 f4       	brne	.+24     	; 0x2272 <__divsf3+0x13c>
    225a:	27 fd       	sbrc	r18, 7
    225c:	0a c0       	rjmp	.+20     	; 0x2272 <__divsf3+0x13c>
    225e:	e1 14       	cp	r14, r1
    2260:	f1 04       	cpc	r15, r1
    2262:	01 05       	cpc	r16, r1
    2264:	11 05       	cpc	r17, r1
    2266:	29 f0       	breq	.+10     	; 0x2272 <__divsf3+0x13c>
    2268:	20 5c       	subi	r18, 0xC0	; 192
    226a:	3f 4f       	sbci	r19, 0xFF	; 255
    226c:	4f 4f       	sbci	r20, 0xFF	; 255
    226e:	5f 4f       	sbci	r21, 0xFF	; 255
    2270:	20 78       	andi	r18, 0x80	; 128
    2272:	2d 87       	std	Y+13, r18	; 0x0d
    2274:	3e 87       	std	Y+14, r19	; 0x0e
    2276:	4f 87       	std	Y+15, r20	; 0x0f
    2278:	58 8b       	std	Y+16, r21	; 0x10
    227a:	be 01       	movw	r22, r28
    227c:	67 5f       	subi	r22, 0xF7	; 247
    227e:	7f 4f       	sbci	r23, 0xFF	; 255
    2280:	cb 01       	movw	r24, r22
    2282:	0e 94 2b 12 	call	0x2456	; 0x2456 <__pack_f>
    2286:	68 96       	adiw	r28, 0x18	; 24
    2288:	ea e0       	ldi	r30, 0x0A	; 10
    228a:	0c 94 f3 55 	jmp	0xabe6	; 0xabe6 <__epilogue_restores__+0x10>

0000228e <__gtsf2>:
    228e:	a8 e1       	ldi	r26, 0x18	; 24
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	ed e4       	ldi	r30, 0x4D	; 77
    2294:	f1 e1       	ldi	r31, 0x11	; 17
    2296:	0c 94 db 55 	jmp	0xabb6	; 0xabb6 <__prologue_saves__+0x18>
    229a:	69 83       	std	Y+1, r22	; 0x01
    229c:	7a 83       	std	Y+2, r23	; 0x02
    229e:	8b 83       	std	Y+3, r24	; 0x03
    22a0:	9c 83       	std	Y+4, r25	; 0x04
    22a2:	2d 83       	std	Y+5, r18	; 0x05
    22a4:	3e 83       	std	Y+6, r19	; 0x06
    22a6:	4f 83       	std	Y+7, r20	; 0x07
    22a8:	58 87       	std	Y+8, r21	; 0x08
    22aa:	89 e0       	ldi	r24, 0x09	; 9
    22ac:	e8 2e       	mov	r14, r24
    22ae:	f1 2c       	mov	r15, r1
    22b0:	ec 0e       	add	r14, r28
    22b2:	fd 1e       	adc	r15, r29
    22b4:	ce 01       	movw	r24, r28
    22b6:	01 96       	adiw	r24, 0x01	; 1
    22b8:	b7 01       	movw	r22, r14
    22ba:	0e 94 00 13 	call	0x2600	; 0x2600 <__unpack_f>
    22be:	8e 01       	movw	r16, r28
    22c0:	0f 5e       	subi	r16, 0xEF	; 239
    22c2:	1f 4f       	sbci	r17, 0xFF	; 255
    22c4:	ce 01       	movw	r24, r28
    22c6:	05 96       	adiw	r24, 0x05	; 5
    22c8:	b8 01       	movw	r22, r16
    22ca:	0e 94 00 13 	call	0x2600	; 0x2600 <__unpack_f>
    22ce:	89 85       	ldd	r24, Y+9	; 0x09
    22d0:	82 30       	cpi	r24, 0x02	; 2
    22d2:	40 f0       	brcs	.+16     	; 0x22e4 <__gtsf2+0x56>
    22d4:	89 89       	ldd	r24, Y+17	; 0x11
    22d6:	82 30       	cpi	r24, 0x02	; 2
    22d8:	28 f0       	brcs	.+10     	; 0x22e4 <__gtsf2+0x56>
    22da:	c7 01       	movw	r24, r14
    22dc:	b8 01       	movw	r22, r16
    22de:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__fpcmp_parts_f>
    22e2:	01 c0       	rjmp	.+2      	; 0x22e6 <__gtsf2+0x58>
    22e4:	8f ef       	ldi	r24, 0xFF	; 255
    22e6:	68 96       	adiw	r28, 0x18	; 24
    22e8:	e6 e0       	ldi	r30, 0x06	; 6
    22ea:	0c 94 f7 55 	jmp	0xabee	; 0xabee <__epilogue_restores__+0x18>

000022ee <__gesf2>:
    22ee:	a8 e1       	ldi	r26, 0x18	; 24
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	ed e7       	ldi	r30, 0x7D	; 125
    22f4:	f1 e1       	ldi	r31, 0x11	; 17
    22f6:	0c 94 db 55 	jmp	0xabb6	; 0xabb6 <__prologue_saves__+0x18>
    22fa:	69 83       	std	Y+1, r22	; 0x01
    22fc:	7a 83       	std	Y+2, r23	; 0x02
    22fe:	8b 83       	std	Y+3, r24	; 0x03
    2300:	9c 83       	std	Y+4, r25	; 0x04
    2302:	2d 83       	std	Y+5, r18	; 0x05
    2304:	3e 83       	std	Y+6, r19	; 0x06
    2306:	4f 83       	std	Y+7, r20	; 0x07
    2308:	58 87       	std	Y+8, r21	; 0x08
    230a:	89 e0       	ldi	r24, 0x09	; 9
    230c:	e8 2e       	mov	r14, r24
    230e:	f1 2c       	mov	r15, r1
    2310:	ec 0e       	add	r14, r28
    2312:	fd 1e       	adc	r15, r29
    2314:	ce 01       	movw	r24, r28
    2316:	01 96       	adiw	r24, 0x01	; 1
    2318:	b7 01       	movw	r22, r14
    231a:	0e 94 00 13 	call	0x2600	; 0x2600 <__unpack_f>
    231e:	8e 01       	movw	r16, r28
    2320:	0f 5e       	subi	r16, 0xEF	; 239
    2322:	1f 4f       	sbci	r17, 0xFF	; 255
    2324:	ce 01       	movw	r24, r28
    2326:	05 96       	adiw	r24, 0x05	; 5
    2328:	b8 01       	movw	r22, r16
    232a:	0e 94 00 13 	call	0x2600	; 0x2600 <__unpack_f>
    232e:	89 85       	ldd	r24, Y+9	; 0x09
    2330:	82 30       	cpi	r24, 0x02	; 2
    2332:	40 f0       	brcs	.+16     	; 0x2344 <__gesf2+0x56>
    2334:	89 89       	ldd	r24, Y+17	; 0x11
    2336:	82 30       	cpi	r24, 0x02	; 2
    2338:	28 f0       	brcs	.+10     	; 0x2344 <__gesf2+0x56>
    233a:	c7 01       	movw	r24, r14
    233c:	b8 01       	movw	r22, r16
    233e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__fpcmp_parts_f>
    2342:	01 c0       	rjmp	.+2      	; 0x2346 <__gesf2+0x58>
    2344:	8f ef       	ldi	r24, 0xFF	; 255
    2346:	68 96       	adiw	r28, 0x18	; 24
    2348:	e6 e0       	ldi	r30, 0x06	; 6
    234a:	0c 94 f7 55 	jmp	0xabee	; 0xabee <__epilogue_restores__+0x18>

0000234e <__ltsf2>:
    234e:	a8 e1       	ldi	r26, 0x18	; 24
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	ed ea       	ldi	r30, 0xAD	; 173
    2354:	f1 e1       	ldi	r31, 0x11	; 17
    2356:	0c 94 db 55 	jmp	0xabb6	; 0xabb6 <__prologue_saves__+0x18>
    235a:	69 83       	std	Y+1, r22	; 0x01
    235c:	7a 83       	std	Y+2, r23	; 0x02
    235e:	8b 83       	std	Y+3, r24	; 0x03
    2360:	9c 83       	std	Y+4, r25	; 0x04
    2362:	2d 83       	std	Y+5, r18	; 0x05
    2364:	3e 83       	std	Y+6, r19	; 0x06
    2366:	4f 83       	std	Y+7, r20	; 0x07
    2368:	58 87       	std	Y+8, r21	; 0x08
    236a:	89 e0       	ldi	r24, 0x09	; 9
    236c:	e8 2e       	mov	r14, r24
    236e:	f1 2c       	mov	r15, r1
    2370:	ec 0e       	add	r14, r28
    2372:	fd 1e       	adc	r15, r29
    2374:	ce 01       	movw	r24, r28
    2376:	01 96       	adiw	r24, 0x01	; 1
    2378:	b7 01       	movw	r22, r14
    237a:	0e 94 00 13 	call	0x2600	; 0x2600 <__unpack_f>
    237e:	8e 01       	movw	r16, r28
    2380:	0f 5e       	subi	r16, 0xEF	; 239
    2382:	1f 4f       	sbci	r17, 0xFF	; 255
    2384:	ce 01       	movw	r24, r28
    2386:	05 96       	adiw	r24, 0x05	; 5
    2388:	b8 01       	movw	r22, r16
    238a:	0e 94 00 13 	call	0x2600	; 0x2600 <__unpack_f>
    238e:	89 85       	ldd	r24, Y+9	; 0x09
    2390:	82 30       	cpi	r24, 0x02	; 2
    2392:	40 f0       	brcs	.+16     	; 0x23a4 <__ltsf2+0x56>
    2394:	89 89       	ldd	r24, Y+17	; 0x11
    2396:	82 30       	cpi	r24, 0x02	; 2
    2398:	28 f0       	brcs	.+10     	; 0x23a4 <__ltsf2+0x56>
    239a:	c7 01       	movw	r24, r14
    239c:	b8 01       	movw	r22, r16
    239e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__fpcmp_parts_f>
    23a2:	01 c0       	rjmp	.+2      	; 0x23a6 <__ltsf2+0x58>
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	68 96       	adiw	r28, 0x18	; 24
    23a8:	e6 e0       	ldi	r30, 0x06	; 6
    23aa:	0c 94 f7 55 	jmp	0xabee	; 0xabee <__epilogue_restores__+0x18>

000023ae <__fixsfsi>:
    23ae:	ac e0       	ldi	r26, 0x0C	; 12
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	ed ed       	ldi	r30, 0xDD	; 221
    23b4:	f1 e1       	ldi	r31, 0x11	; 17
    23b6:	0c 94 df 55 	jmp	0xabbe	; 0xabbe <__prologue_saves__+0x20>
    23ba:	69 83       	std	Y+1, r22	; 0x01
    23bc:	7a 83       	std	Y+2, r23	; 0x02
    23be:	8b 83       	std	Y+3, r24	; 0x03
    23c0:	9c 83       	std	Y+4, r25	; 0x04
    23c2:	ce 01       	movw	r24, r28
    23c4:	01 96       	adiw	r24, 0x01	; 1
    23c6:	be 01       	movw	r22, r28
    23c8:	6b 5f       	subi	r22, 0xFB	; 251
    23ca:	7f 4f       	sbci	r23, 0xFF	; 255
    23cc:	0e 94 00 13 	call	0x2600	; 0x2600 <__unpack_f>
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	82 30       	cpi	r24, 0x02	; 2
    23d4:	61 f1       	breq	.+88     	; 0x242e <__fixsfsi+0x80>
    23d6:	82 30       	cpi	r24, 0x02	; 2
    23d8:	50 f1       	brcs	.+84     	; 0x242e <__fixsfsi+0x80>
    23da:	84 30       	cpi	r24, 0x04	; 4
    23dc:	21 f4       	brne	.+8      	; 0x23e6 <__fixsfsi+0x38>
    23de:	8e 81       	ldd	r24, Y+6	; 0x06
    23e0:	88 23       	and	r24, r24
    23e2:	51 f1       	breq	.+84     	; 0x2438 <__fixsfsi+0x8a>
    23e4:	2e c0       	rjmp	.+92     	; 0x2442 <__fixsfsi+0x94>
    23e6:	2f 81       	ldd	r18, Y+7	; 0x07
    23e8:	38 85       	ldd	r19, Y+8	; 0x08
    23ea:	37 fd       	sbrc	r19, 7
    23ec:	20 c0       	rjmp	.+64     	; 0x242e <__fixsfsi+0x80>
    23ee:	6e 81       	ldd	r22, Y+6	; 0x06
    23f0:	2f 31       	cpi	r18, 0x1F	; 31
    23f2:	31 05       	cpc	r19, r1
    23f4:	1c f0       	brlt	.+6      	; 0x23fc <__fixsfsi+0x4e>
    23f6:	66 23       	and	r22, r22
    23f8:	f9 f0       	breq	.+62     	; 0x2438 <__fixsfsi+0x8a>
    23fa:	23 c0       	rjmp	.+70     	; 0x2442 <__fixsfsi+0x94>
    23fc:	8e e1       	ldi	r24, 0x1E	; 30
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	82 1b       	sub	r24, r18
    2402:	93 0b       	sbc	r25, r19
    2404:	29 85       	ldd	r18, Y+9	; 0x09
    2406:	3a 85       	ldd	r19, Y+10	; 0x0a
    2408:	4b 85       	ldd	r20, Y+11	; 0x0b
    240a:	5c 85       	ldd	r21, Y+12	; 0x0c
    240c:	04 c0       	rjmp	.+8      	; 0x2416 <__fixsfsi+0x68>
    240e:	56 95       	lsr	r21
    2410:	47 95       	ror	r20
    2412:	37 95       	ror	r19
    2414:	27 95       	ror	r18
    2416:	8a 95       	dec	r24
    2418:	d2 f7       	brpl	.-12     	; 0x240e <__fixsfsi+0x60>
    241a:	66 23       	and	r22, r22
    241c:	b1 f0       	breq	.+44     	; 0x244a <__fixsfsi+0x9c>
    241e:	50 95       	com	r21
    2420:	40 95       	com	r20
    2422:	30 95       	com	r19
    2424:	21 95       	neg	r18
    2426:	3f 4f       	sbci	r19, 0xFF	; 255
    2428:	4f 4f       	sbci	r20, 0xFF	; 255
    242a:	5f 4f       	sbci	r21, 0xFF	; 255
    242c:	0e c0       	rjmp	.+28     	; 0x244a <__fixsfsi+0x9c>
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	50 e0       	ldi	r21, 0x00	; 0
    2436:	09 c0       	rjmp	.+18     	; 0x244a <__fixsfsi+0x9c>
    2438:	2f ef       	ldi	r18, 0xFF	; 255
    243a:	3f ef       	ldi	r19, 0xFF	; 255
    243c:	4f ef       	ldi	r20, 0xFF	; 255
    243e:	5f e7       	ldi	r21, 0x7F	; 127
    2440:	04 c0       	rjmp	.+8      	; 0x244a <__fixsfsi+0x9c>
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e0       	ldi	r20, 0x00	; 0
    2448:	50 e8       	ldi	r21, 0x80	; 128
    244a:	b9 01       	movw	r22, r18
    244c:	ca 01       	movw	r24, r20
    244e:	2c 96       	adiw	r28, 0x0c	; 12
    2450:	e2 e0       	ldi	r30, 0x02	; 2
    2452:	0c 94 fb 55 	jmp	0xabf6	; 0xabf6 <__epilogue_restores__+0x20>

00002456 <__pack_f>:
    2456:	df 92       	push	r13
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	fc 01       	movw	r30, r24
    2462:	e4 80       	ldd	r14, Z+4	; 0x04
    2464:	f5 80       	ldd	r15, Z+5	; 0x05
    2466:	06 81       	ldd	r16, Z+6	; 0x06
    2468:	17 81       	ldd	r17, Z+7	; 0x07
    246a:	d1 80       	ldd	r13, Z+1	; 0x01
    246c:	80 81       	ld	r24, Z
    246e:	82 30       	cpi	r24, 0x02	; 2
    2470:	48 f4       	brcc	.+18     	; 0x2484 <__pack_f+0x2e>
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	a0 e1       	ldi	r26, 0x10	; 16
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	e8 2a       	or	r14, r24
    247c:	f9 2a       	or	r15, r25
    247e:	0a 2b       	or	r16, r26
    2480:	1b 2b       	or	r17, r27
    2482:	a5 c0       	rjmp	.+330    	; 0x25ce <__pack_f+0x178>
    2484:	84 30       	cpi	r24, 0x04	; 4
    2486:	09 f4       	brne	.+2      	; 0x248a <__pack_f+0x34>
    2488:	9f c0       	rjmp	.+318    	; 0x25c8 <__pack_f+0x172>
    248a:	82 30       	cpi	r24, 0x02	; 2
    248c:	21 f4       	brne	.+8      	; 0x2496 <__pack_f+0x40>
    248e:	ee 24       	eor	r14, r14
    2490:	ff 24       	eor	r15, r15
    2492:	87 01       	movw	r16, r14
    2494:	05 c0       	rjmp	.+10     	; 0x24a0 <__pack_f+0x4a>
    2496:	e1 14       	cp	r14, r1
    2498:	f1 04       	cpc	r15, r1
    249a:	01 05       	cpc	r16, r1
    249c:	11 05       	cpc	r17, r1
    249e:	19 f4       	brne	.+6      	; 0x24a6 <__pack_f+0x50>
    24a0:	e0 e0       	ldi	r30, 0x00	; 0
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	96 c0       	rjmp	.+300    	; 0x25d2 <__pack_f+0x17c>
    24a6:	62 81       	ldd	r22, Z+2	; 0x02
    24a8:	73 81       	ldd	r23, Z+3	; 0x03
    24aa:	9f ef       	ldi	r25, 0xFF	; 255
    24ac:	62 38       	cpi	r22, 0x82	; 130
    24ae:	79 07       	cpc	r23, r25
    24b0:	0c f0       	brlt	.+2      	; 0x24b4 <__pack_f+0x5e>
    24b2:	5b c0       	rjmp	.+182    	; 0x256a <__pack_f+0x114>
    24b4:	22 e8       	ldi	r18, 0x82	; 130
    24b6:	3f ef       	ldi	r19, 0xFF	; 255
    24b8:	26 1b       	sub	r18, r22
    24ba:	37 0b       	sbc	r19, r23
    24bc:	2a 31       	cpi	r18, 0x1A	; 26
    24be:	31 05       	cpc	r19, r1
    24c0:	2c f0       	brlt	.+10     	; 0x24cc <__pack_f+0x76>
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e0       	ldi	r20, 0x00	; 0
    24c8:	50 e0       	ldi	r21, 0x00	; 0
    24ca:	2a c0       	rjmp	.+84     	; 0x2520 <__pack_f+0xca>
    24cc:	b8 01       	movw	r22, r16
    24ce:	a7 01       	movw	r20, r14
    24d0:	02 2e       	mov	r0, r18
    24d2:	04 c0       	rjmp	.+8      	; 0x24dc <__pack_f+0x86>
    24d4:	76 95       	lsr	r23
    24d6:	67 95       	ror	r22
    24d8:	57 95       	ror	r21
    24da:	47 95       	ror	r20
    24dc:	0a 94       	dec	r0
    24de:	d2 f7       	brpl	.-12     	; 0x24d4 <__pack_f+0x7e>
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	a0 e0       	ldi	r26, 0x00	; 0
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	04 c0       	rjmp	.+8      	; 0x24f2 <__pack_f+0x9c>
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	aa 1f       	adc	r26, r26
    24f0:	bb 1f       	adc	r27, r27
    24f2:	2a 95       	dec	r18
    24f4:	d2 f7       	brpl	.-12     	; 0x24ea <__pack_f+0x94>
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	a1 09       	sbc	r26, r1
    24fa:	b1 09       	sbc	r27, r1
    24fc:	8e 21       	and	r24, r14
    24fe:	9f 21       	and	r25, r15
    2500:	a0 23       	and	r26, r16
    2502:	b1 23       	and	r27, r17
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	a1 05       	cpc	r26, r1
    2508:	b1 05       	cpc	r27, r1
    250a:	21 f0       	breq	.+8      	; 0x2514 <__pack_f+0xbe>
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	a0 e0       	ldi	r26, 0x00	; 0
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	9a 01       	movw	r18, r20
    2516:	ab 01       	movw	r20, r22
    2518:	28 2b       	or	r18, r24
    251a:	39 2b       	or	r19, r25
    251c:	4a 2b       	or	r20, r26
    251e:	5b 2b       	or	r21, r27
    2520:	da 01       	movw	r26, r20
    2522:	c9 01       	movw	r24, r18
    2524:	8f 77       	andi	r24, 0x7F	; 127
    2526:	90 70       	andi	r25, 0x00	; 0
    2528:	a0 70       	andi	r26, 0x00	; 0
    252a:	b0 70       	andi	r27, 0x00	; 0
    252c:	80 34       	cpi	r24, 0x40	; 64
    252e:	91 05       	cpc	r25, r1
    2530:	a1 05       	cpc	r26, r1
    2532:	b1 05       	cpc	r27, r1
    2534:	39 f4       	brne	.+14     	; 0x2544 <__pack_f+0xee>
    2536:	27 ff       	sbrs	r18, 7
    2538:	09 c0       	rjmp	.+18     	; 0x254c <__pack_f+0xf6>
    253a:	20 5c       	subi	r18, 0xC0	; 192
    253c:	3f 4f       	sbci	r19, 0xFF	; 255
    253e:	4f 4f       	sbci	r20, 0xFF	; 255
    2540:	5f 4f       	sbci	r21, 0xFF	; 255
    2542:	04 c0       	rjmp	.+8      	; 0x254c <__pack_f+0xf6>
    2544:	21 5c       	subi	r18, 0xC1	; 193
    2546:	3f 4f       	sbci	r19, 0xFF	; 255
    2548:	4f 4f       	sbci	r20, 0xFF	; 255
    254a:	5f 4f       	sbci	r21, 0xFF	; 255
    254c:	e0 e0       	ldi	r30, 0x00	; 0
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	20 30       	cpi	r18, 0x00	; 0
    2552:	a0 e0       	ldi	r26, 0x00	; 0
    2554:	3a 07       	cpc	r19, r26
    2556:	a0 e0       	ldi	r26, 0x00	; 0
    2558:	4a 07       	cpc	r20, r26
    255a:	a0 e4       	ldi	r26, 0x40	; 64
    255c:	5a 07       	cpc	r21, r26
    255e:	10 f0       	brcs	.+4      	; 0x2564 <__pack_f+0x10e>
    2560:	e1 e0       	ldi	r30, 0x01	; 1
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	79 01       	movw	r14, r18
    2566:	8a 01       	movw	r16, r20
    2568:	27 c0       	rjmp	.+78     	; 0x25b8 <__pack_f+0x162>
    256a:	60 38       	cpi	r22, 0x80	; 128
    256c:	71 05       	cpc	r23, r1
    256e:	64 f5       	brge	.+88     	; 0x25c8 <__pack_f+0x172>
    2570:	fb 01       	movw	r30, r22
    2572:	e1 58       	subi	r30, 0x81	; 129
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	d8 01       	movw	r26, r16
    2578:	c7 01       	movw	r24, r14
    257a:	8f 77       	andi	r24, 0x7F	; 127
    257c:	90 70       	andi	r25, 0x00	; 0
    257e:	a0 70       	andi	r26, 0x00	; 0
    2580:	b0 70       	andi	r27, 0x00	; 0
    2582:	80 34       	cpi	r24, 0x40	; 64
    2584:	91 05       	cpc	r25, r1
    2586:	a1 05       	cpc	r26, r1
    2588:	b1 05       	cpc	r27, r1
    258a:	39 f4       	brne	.+14     	; 0x259a <__pack_f+0x144>
    258c:	e7 fe       	sbrs	r14, 7
    258e:	0d c0       	rjmp	.+26     	; 0x25aa <__pack_f+0x154>
    2590:	80 e4       	ldi	r24, 0x40	; 64
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	a0 e0       	ldi	r26, 0x00	; 0
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	04 c0       	rjmp	.+8      	; 0x25a2 <__pack_f+0x14c>
    259a:	8f e3       	ldi	r24, 0x3F	; 63
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	a0 e0       	ldi	r26, 0x00	; 0
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e8 0e       	add	r14, r24
    25a4:	f9 1e       	adc	r15, r25
    25a6:	0a 1f       	adc	r16, r26
    25a8:	1b 1f       	adc	r17, r27
    25aa:	17 ff       	sbrs	r17, 7
    25ac:	05 c0       	rjmp	.+10     	; 0x25b8 <__pack_f+0x162>
    25ae:	16 95       	lsr	r17
    25b0:	07 95       	ror	r16
    25b2:	f7 94       	ror	r15
    25b4:	e7 94       	ror	r14
    25b6:	31 96       	adiw	r30, 0x01	; 1
    25b8:	87 e0       	ldi	r24, 0x07	; 7
    25ba:	16 95       	lsr	r17
    25bc:	07 95       	ror	r16
    25be:	f7 94       	ror	r15
    25c0:	e7 94       	ror	r14
    25c2:	8a 95       	dec	r24
    25c4:	d1 f7       	brne	.-12     	; 0x25ba <__pack_f+0x164>
    25c6:	05 c0       	rjmp	.+10     	; 0x25d2 <__pack_f+0x17c>
    25c8:	ee 24       	eor	r14, r14
    25ca:	ff 24       	eor	r15, r15
    25cc:	87 01       	movw	r16, r14
    25ce:	ef ef       	ldi	r30, 0xFF	; 255
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	6e 2f       	mov	r22, r30
    25d4:	67 95       	ror	r22
    25d6:	66 27       	eor	r22, r22
    25d8:	67 95       	ror	r22
    25da:	90 2f       	mov	r25, r16
    25dc:	9f 77       	andi	r25, 0x7F	; 127
    25de:	d7 94       	ror	r13
    25e0:	dd 24       	eor	r13, r13
    25e2:	d7 94       	ror	r13
    25e4:	8e 2f       	mov	r24, r30
    25e6:	86 95       	lsr	r24
    25e8:	49 2f       	mov	r20, r25
    25ea:	46 2b       	or	r20, r22
    25ec:	58 2f       	mov	r21, r24
    25ee:	5d 29       	or	r21, r13
    25f0:	b7 01       	movw	r22, r14
    25f2:	ca 01       	movw	r24, r20
    25f4:	1f 91       	pop	r17
    25f6:	0f 91       	pop	r16
    25f8:	ff 90       	pop	r15
    25fa:	ef 90       	pop	r14
    25fc:	df 90       	pop	r13
    25fe:	08 95       	ret

00002600 <__unpack_f>:
    2600:	fc 01       	movw	r30, r24
    2602:	db 01       	movw	r26, r22
    2604:	40 81       	ld	r20, Z
    2606:	51 81       	ldd	r21, Z+1	; 0x01
    2608:	22 81       	ldd	r18, Z+2	; 0x02
    260a:	62 2f       	mov	r22, r18
    260c:	6f 77       	andi	r22, 0x7F	; 127
    260e:	70 e0       	ldi	r23, 0x00	; 0
    2610:	22 1f       	adc	r18, r18
    2612:	22 27       	eor	r18, r18
    2614:	22 1f       	adc	r18, r18
    2616:	93 81       	ldd	r25, Z+3	; 0x03
    2618:	89 2f       	mov	r24, r25
    261a:	88 0f       	add	r24, r24
    261c:	82 2b       	or	r24, r18
    261e:	28 2f       	mov	r18, r24
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	99 1f       	adc	r25, r25
    2624:	99 27       	eor	r25, r25
    2626:	99 1f       	adc	r25, r25
    2628:	11 96       	adiw	r26, 0x01	; 1
    262a:	9c 93       	st	X, r25
    262c:	11 97       	sbiw	r26, 0x01	; 1
    262e:	21 15       	cp	r18, r1
    2630:	31 05       	cpc	r19, r1
    2632:	a9 f5       	brne	.+106    	; 0x269e <__unpack_f+0x9e>
    2634:	41 15       	cp	r20, r1
    2636:	51 05       	cpc	r21, r1
    2638:	61 05       	cpc	r22, r1
    263a:	71 05       	cpc	r23, r1
    263c:	11 f4       	brne	.+4      	; 0x2642 <__unpack_f+0x42>
    263e:	82 e0       	ldi	r24, 0x02	; 2
    2640:	37 c0       	rjmp	.+110    	; 0x26b0 <__unpack_f+0xb0>
    2642:	82 e8       	ldi	r24, 0x82	; 130
    2644:	9f ef       	ldi	r25, 0xFF	; 255
    2646:	13 96       	adiw	r26, 0x03	; 3
    2648:	9c 93       	st	X, r25
    264a:	8e 93       	st	-X, r24
    264c:	12 97       	sbiw	r26, 0x02	; 2
    264e:	9a 01       	movw	r18, r20
    2650:	ab 01       	movw	r20, r22
    2652:	67 e0       	ldi	r22, 0x07	; 7
    2654:	22 0f       	add	r18, r18
    2656:	33 1f       	adc	r19, r19
    2658:	44 1f       	adc	r20, r20
    265a:	55 1f       	adc	r21, r21
    265c:	6a 95       	dec	r22
    265e:	d1 f7       	brne	.-12     	; 0x2654 <__unpack_f+0x54>
    2660:	83 e0       	ldi	r24, 0x03	; 3
    2662:	8c 93       	st	X, r24
    2664:	0d c0       	rjmp	.+26     	; 0x2680 <__unpack_f+0x80>
    2666:	22 0f       	add	r18, r18
    2668:	33 1f       	adc	r19, r19
    266a:	44 1f       	adc	r20, r20
    266c:	55 1f       	adc	r21, r21
    266e:	12 96       	adiw	r26, 0x02	; 2
    2670:	8d 91       	ld	r24, X+
    2672:	9c 91       	ld	r25, X
    2674:	13 97       	sbiw	r26, 0x03	; 3
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	13 96       	adiw	r26, 0x03	; 3
    267a:	9c 93       	st	X, r25
    267c:	8e 93       	st	-X, r24
    267e:	12 97       	sbiw	r26, 0x02	; 2
    2680:	20 30       	cpi	r18, 0x00	; 0
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	38 07       	cpc	r19, r24
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	48 07       	cpc	r20, r24
    268a:	80 e4       	ldi	r24, 0x40	; 64
    268c:	58 07       	cpc	r21, r24
    268e:	58 f3       	brcs	.-42     	; 0x2666 <__unpack_f+0x66>
    2690:	14 96       	adiw	r26, 0x04	; 4
    2692:	2d 93       	st	X+, r18
    2694:	3d 93       	st	X+, r19
    2696:	4d 93       	st	X+, r20
    2698:	5c 93       	st	X, r21
    269a:	17 97       	sbiw	r26, 0x07	; 7
    269c:	08 95       	ret
    269e:	2f 3f       	cpi	r18, 0xFF	; 255
    26a0:	31 05       	cpc	r19, r1
    26a2:	79 f4       	brne	.+30     	; 0x26c2 <__unpack_f+0xc2>
    26a4:	41 15       	cp	r20, r1
    26a6:	51 05       	cpc	r21, r1
    26a8:	61 05       	cpc	r22, r1
    26aa:	71 05       	cpc	r23, r1
    26ac:	19 f4       	brne	.+6      	; 0x26b4 <__unpack_f+0xb4>
    26ae:	84 e0       	ldi	r24, 0x04	; 4
    26b0:	8c 93       	st	X, r24
    26b2:	08 95       	ret
    26b4:	64 ff       	sbrs	r22, 4
    26b6:	03 c0       	rjmp	.+6      	; 0x26be <__unpack_f+0xbe>
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	8c 93       	st	X, r24
    26bc:	12 c0       	rjmp	.+36     	; 0x26e2 <__unpack_f+0xe2>
    26be:	1c 92       	st	X, r1
    26c0:	10 c0       	rjmp	.+32     	; 0x26e2 <__unpack_f+0xe2>
    26c2:	2f 57       	subi	r18, 0x7F	; 127
    26c4:	30 40       	sbci	r19, 0x00	; 0
    26c6:	13 96       	adiw	r26, 0x03	; 3
    26c8:	3c 93       	st	X, r19
    26ca:	2e 93       	st	-X, r18
    26cc:	12 97       	sbiw	r26, 0x02	; 2
    26ce:	83 e0       	ldi	r24, 0x03	; 3
    26d0:	8c 93       	st	X, r24
    26d2:	87 e0       	ldi	r24, 0x07	; 7
    26d4:	44 0f       	add	r20, r20
    26d6:	55 1f       	adc	r21, r21
    26d8:	66 1f       	adc	r22, r22
    26da:	77 1f       	adc	r23, r23
    26dc:	8a 95       	dec	r24
    26de:	d1 f7       	brne	.-12     	; 0x26d4 <__unpack_f+0xd4>
    26e0:	70 64       	ori	r23, 0x40	; 64
    26e2:	14 96       	adiw	r26, 0x04	; 4
    26e4:	4d 93       	st	X+, r20
    26e6:	5d 93       	st	X+, r21
    26e8:	6d 93       	st	X+, r22
    26ea:	7c 93       	st	X, r23
    26ec:	17 97       	sbiw	r26, 0x07	; 7
    26ee:	08 95       	ret

000026f0 <__fpcmp_parts_f>:
    26f0:	1f 93       	push	r17
    26f2:	dc 01       	movw	r26, r24
    26f4:	fb 01       	movw	r30, r22
    26f6:	9c 91       	ld	r25, X
    26f8:	92 30       	cpi	r25, 0x02	; 2
    26fa:	08 f4       	brcc	.+2      	; 0x26fe <__fpcmp_parts_f+0xe>
    26fc:	47 c0       	rjmp	.+142    	; 0x278c <__fpcmp_parts_f+0x9c>
    26fe:	80 81       	ld	r24, Z
    2700:	82 30       	cpi	r24, 0x02	; 2
    2702:	08 f4       	brcc	.+2      	; 0x2706 <__fpcmp_parts_f+0x16>
    2704:	43 c0       	rjmp	.+134    	; 0x278c <__fpcmp_parts_f+0x9c>
    2706:	94 30       	cpi	r25, 0x04	; 4
    2708:	51 f4       	brne	.+20     	; 0x271e <__fpcmp_parts_f+0x2e>
    270a:	11 96       	adiw	r26, 0x01	; 1
    270c:	1c 91       	ld	r17, X
    270e:	84 30       	cpi	r24, 0x04	; 4
    2710:	99 f5       	brne	.+102    	; 0x2778 <__fpcmp_parts_f+0x88>
    2712:	81 81       	ldd	r24, Z+1	; 0x01
    2714:	68 2f       	mov	r22, r24
    2716:	70 e0       	ldi	r23, 0x00	; 0
    2718:	61 1b       	sub	r22, r17
    271a:	71 09       	sbc	r23, r1
    271c:	3f c0       	rjmp	.+126    	; 0x279c <__fpcmp_parts_f+0xac>
    271e:	84 30       	cpi	r24, 0x04	; 4
    2720:	21 f0       	breq	.+8      	; 0x272a <__fpcmp_parts_f+0x3a>
    2722:	92 30       	cpi	r25, 0x02	; 2
    2724:	31 f4       	brne	.+12     	; 0x2732 <__fpcmp_parts_f+0x42>
    2726:	82 30       	cpi	r24, 0x02	; 2
    2728:	b9 f1       	breq	.+110    	; 0x2798 <__fpcmp_parts_f+0xa8>
    272a:	81 81       	ldd	r24, Z+1	; 0x01
    272c:	88 23       	and	r24, r24
    272e:	89 f1       	breq	.+98     	; 0x2792 <__fpcmp_parts_f+0xa2>
    2730:	2d c0       	rjmp	.+90     	; 0x278c <__fpcmp_parts_f+0x9c>
    2732:	11 96       	adiw	r26, 0x01	; 1
    2734:	1c 91       	ld	r17, X
    2736:	11 97       	sbiw	r26, 0x01	; 1
    2738:	82 30       	cpi	r24, 0x02	; 2
    273a:	f1 f0       	breq	.+60     	; 0x2778 <__fpcmp_parts_f+0x88>
    273c:	81 81       	ldd	r24, Z+1	; 0x01
    273e:	18 17       	cp	r17, r24
    2740:	d9 f4       	brne	.+54     	; 0x2778 <__fpcmp_parts_f+0x88>
    2742:	12 96       	adiw	r26, 0x02	; 2
    2744:	2d 91       	ld	r18, X+
    2746:	3c 91       	ld	r19, X
    2748:	13 97       	sbiw	r26, 0x03	; 3
    274a:	82 81       	ldd	r24, Z+2	; 0x02
    274c:	93 81       	ldd	r25, Z+3	; 0x03
    274e:	82 17       	cp	r24, r18
    2750:	93 07       	cpc	r25, r19
    2752:	94 f0       	brlt	.+36     	; 0x2778 <__fpcmp_parts_f+0x88>
    2754:	28 17       	cp	r18, r24
    2756:	39 07       	cpc	r19, r25
    2758:	bc f0       	brlt	.+46     	; 0x2788 <__fpcmp_parts_f+0x98>
    275a:	14 96       	adiw	r26, 0x04	; 4
    275c:	8d 91       	ld	r24, X+
    275e:	9d 91       	ld	r25, X+
    2760:	0d 90       	ld	r0, X+
    2762:	bc 91       	ld	r27, X
    2764:	a0 2d       	mov	r26, r0
    2766:	24 81       	ldd	r18, Z+4	; 0x04
    2768:	35 81       	ldd	r19, Z+5	; 0x05
    276a:	46 81       	ldd	r20, Z+6	; 0x06
    276c:	57 81       	ldd	r21, Z+7	; 0x07
    276e:	28 17       	cp	r18, r24
    2770:	39 07       	cpc	r19, r25
    2772:	4a 07       	cpc	r20, r26
    2774:	5b 07       	cpc	r21, r27
    2776:	18 f4       	brcc	.+6      	; 0x277e <__fpcmp_parts_f+0x8e>
    2778:	11 23       	and	r17, r17
    277a:	41 f0       	breq	.+16     	; 0x278c <__fpcmp_parts_f+0x9c>
    277c:	0a c0       	rjmp	.+20     	; 0x2792 <__fpcmp_parts_f+0xa2>
    277e:	82 17       	cp	r24, r18
    2780:	93 07       	cpc	r25, r19
    2782:	a4 07       	cpc	r26, r20
    2784:	b5 07       	cpc	r27, r21
    2786:	40 f4       	brcc	.+16     	; 0x2798 <__fpcmp_parts_f+0xa8>
    2788:	11 23       	and	r17, r17
    278a:	19 f0       	breq	.+6      	; 0x2792 <__fpcmp_parts_f+0xa2>
    278c:	61 e0       	ldi	r22, 0x01	; 1
    278e:	70 e0       	ldi	r23, 0x00	; 0
    2790:	05 c0       	rjmp	.+10     	; 0x279c <__fpcmp_parts_f+0xac>
    2792:	6f ef       	ldi	r22, 0xFF	; 255
    2794:	7f ef       	ldi	r23, 0xFF	; 255
    2796:	02 c0       	rjmp	.+4      	; 0x279c <__fpcmp_parts_f+0xac>
    2798:	60 e0       	ldi	r22, 0x00	; 0
    279a:	70 e0       	ldi	r23, 0x00	; 0
    279c:	cb 01       	movw	r24, r22
    279e:	1f 91       	pop	r17
    27a0:	08 95       	ret

000027a2 <Uart_Init>:
static void (*Ptr_To_Trans_Int) (void);
static void (*Ptr_To_Rece_Int) (void);

/*****************initialization **********************************/
void Uart_Init(BITS_config_T datlength,Parity_config_T paritytype,Stop_config_T stopnumber)
{
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	00 d0       	rcall	.+0      	; 0x27a8 <Uart_Init+0x6>
    27a8:	00 d0       	rcall	.+0      	; 0x27aa <Uart_Init+0x8>
    27aa:	0f 92       	push	r0
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    27b0:	8b 83       	std	Y+3, r24	; 0x03
    27b2:	6c 83       	std	Y+4, r22	; 0x04
    27b4:	4d 83       	std	Y+5, r20	; 0x05
	uint16 baud;
	//TO WORK IN DOUBLE SPEED DIVIDE BY 8
	baud = F_CPU /((uint32)Baud_rate * division_factor_for_speed);
    27b6:	88 e6       	ldi	r24, 0x68	; 104
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	9a 83       	std	Y+2, r25	; 0x02
    27bc:	89 83       	std	Y+1, r24	; 0x01
#if( UART_UNIT==UART_UNIT0)
	{
	//PUT THE BAUD RATE IN UBRR REGISTER
	UBRR0L = (uint8) baud;
    27be:	e9 e2       	ldi	r30, 0x29	; 41
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
    27c4:	80 83       	st	Z, r24
	UBRR0H = (uint8) (baud >> 8);
    27c6:	e0 e9       	ldi	r30, 0x90	; 144
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	9a 81       	ldd	r25, Y+2	; 0x02
    27ce:	89 2f       	mov	r24, r25
    27d0:	99 27       	eor	r25, r25
    27d2:	80 83       	st	Z, r24
	//...............................
	//parity&&MASK FIRST
	UCSR0C&=(~(3<<4));
    27d4:	a5 e9       	ldi	r26, 0x95	; 149
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e5 e9       	ldi	r30, 0x95	; 149
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	8f 7c       	andi	r24, 0xCF	; 207
    27e0:	8c 93       	st	X, r24
	UCSR0C|=(paritytype<<4);
    27e2:	a5 e9       	ldi	r26, 0x95	; 149
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	e5 e9       	ldi	r30, 0x95	; 149
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	80 81       	ld	r24, Z
    27ec:	28 2f       	mov	r18, r24
    27ee:	8c 81       	ldd	r24, Y+4	; 0x04
    27f0:	88 2f       	mov	r24, r24
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	82 95       	swap	r24
    27f6:	92 95       	swap	r25
    27f8:	90 7f       	andi	r25, 0xF0	; 240
    27fa:	98 27       	eor	r25, r24
    27fc:	80 7f       	andi	r24, 0xF0	; 240
    27fe:	98 27       	eor	r25, r24
    2800:	82 2b       	or	r24, r18
    2802:	8c 93       	st	X, r24
	//...............................
	//STOP BIT
	UCSR0C&=(~(1<<3));
    2804:	a5 e9       	ldi	r26, 0x95	; 149
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	e5 e9       	ldi	r30, 0x95	; 149
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	87 7f       	andi	r24, 0xF7	; 247
    2810:	8c 93       	st	X, r24
	UCSR0C|=(stopnumber<<3);
    2812:	a5 e9       	ldi	r26, 0x95	; 149
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	e5 e9       	ldi	r30, 0x95	; 149
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	28 2f       	mov	r18, r24
    281e:	8d 81       	ldd	r24, Y+5	; 0x05
    2820:	88 2f       	mov	r24, r24
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	88 0f       	add	r24, r24
    2826:	99 1f       	adc	r25, r25
    2828:	88 0f       	add	r24, r24
    282a:	99 1f       	adc	r25, r25
    282c:	88 0f       	add	r24, r24
    282e:	99 1f       	adc	r25, r25
    2830:	82 2b       	or	r24, r18
    2832:	8c 93       	st	X, r24
	//..................................
	//DATA SIZE
	if(datlength==7)
    2834:	8b 81       	ldd	r24, Y+3	; 0x03
    2836:	87 30       	cpi	r24, 0x07	; 7
    2838:	51 f4       	brne	.+20     	; 0x284e <Uart_Init+0xac>
	{
		UCSR0B|=(datlength&4);
    283a:	aa e2       	ldi	r26, 0x2A	; 42
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	ea e2       	ldi	r30, 0x2A	; 42
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	98 2f       	mov	r25, r24
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	84 70       	andi	r24, 0x04	; 4
    284a:	89 2b       	or	r24, r25
    284c:	8c 93       	st	X, r24
	}
	UCSR0C|=((datlength&3)<<1);
    284e:	a5 e9       	ldi	r26, 0x95	; 149
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	e5 e9       	ldi	r30, 0x95	; 149
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	28 2f       	mov	r18, r24
    285a:	8b 81       	ldd	r24, Y+3	; 0x03
    285c:	88 2f       	mov	r24, r24
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	83 70       	andi	r24, 0x03	; 3
    2862:	90 70       	andi	r25, 0x00	; 0
    2864:	88 0f       	add	r24, r24
    2866:	99 1f       	adc	r25, r25
    2868:	82 2b       	or	r24, r18
    286a:	8c 93       	st	X, r24
#if UART_MODE==TX_ONLY
		UCSR0B|=(1<<3);
#elif UART_MODE==RX_ONLY
		UCSR0B|=(1<<4);
#elif UART_MODE== TX_RX
		UCSR0B|=((1<<4)|(1<<3));
    286c:	aa e2       	ldi	r26, 0x2A	; 42
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	ea e2       	ldi	r30, 0x2A	; 42
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	88 61       	ori	r24, 0x18	; 24
    2878:	8c 93       	st	X, r24
#if division_factor_for_speed==normal
	//normal SPEED
     UCSR0A&=(~(1<<1));
#elif division_factor_for_speed==double_speed
     //DOUBLESPEED
       UCSR0A|=(1<<1);
    287a:	ab e2       	ldi	r26, 0x2B	; 43
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	eb e2       	ldi	r30, 0x2B	; 43
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	82 60       	ori	r24, 0x02	; 2
    2886:	8c 93       	st	X, r24

	}
#endif


}
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <UART_Receiver_Int_Enable>:

/**************Interrupt functions***********************************/


void UART_Receiver_Int_Enable(void)
{
    2898:	df 93       	push	r29
    289a:	cf 93       	push	r28
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
#if UART_UNIT==UART_UNIT0
	SET_BIT(UCSR0B,RXCIE);
    28a0:	aa e2       	ldi	r26, 0x2A	; 42
    28a2:	b0 e0       	ldi	r27, 0x00	; 0
    28a4:	ea e2       	ldi	r30, 0x2A	; 42
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	80 81       	ld	r24, Z
    28aa:	80 68       	ori	r24, 0x80	; 128
    28ac:	8c 93       	st	X, r24
#elif UART_UNIT==UART_UNIT1
	SET_BIT(UCSR1B,RXCIE);
#endif
}
    28ae:	cf 91       	pop	r28
    28b0:	df 91       	pop	r29
    28b2:	08 95       	ret

000028b4 <UART_Receiver_Int_Disable>:

 void UART_Receiver_Int_Disable(void)
{
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
#if UART_UNIT==UART_UNIT0
	CLR_BIT(UCSR0B,RXCIE);
    28bc:	aa e2       	ldi	r26, 0x2A	; 42
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	ea e2       	ldi	r30, 0x2A	; 42
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	8f 77       	andi	r24, 0x7F	; 127
    28c8:	8c 93       	st	X, r24
#elif UART_UNIT==UART_UNIT1
	CLR_BIT(UCSR1B,RXCIE);
#endif
}
    28ca:	cf 91       	pop	r28
    28cc:	df 91       	pop	r29
    28ce:	08 95       	ret

000028d0 <UART_Transmit_Int_Enable>:

 void UART_Transmit_Int_Enable(void)
{
    28d0:	df 93       	push	r29
    28d2:	cf 93       	push	r28
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
#if UART_UNIT==UART_UNIT0
	SET_BIT(UCSR0B,TXCIE);
    28d8:	aa e2       	ldi	r26, 0x2A	; 42
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	ea e2       	ldi	r30, 0x2A	; 42
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	80 64       	ori	r24, 0x40	; 64
    28e4:	8c 93       	st	X, r24
#elif UART_UNIT==UART_UNIT1
	SET_BIT(UCSR1B,TXCIE);
#endif
}
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <UART_Transmit_Int_Disable>:

 void UART_Transmit_Int_Disable(void)
{
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
#if UART_UNIT==UART_UNIT0
	CLR_BIT(UCSR0B,TXCIE);
    28f4:	aa e2       	ldi	r26, 0x2A	; 42
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	ea e2       	ldi	r30, 0x2A	; 42
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	8f 7b       	andi	r24, 0xBF	; 191
    2900:	8c 93       	st	X, r24
#elif UART_UNIT==UART_UNIT1
	CLR_BIT(UCSR1B,TXCIE);
#endif
}
    2902:	cf 91       	pop	r28
    2904:	df 91       	pop	r29
    2906:	08 95       	ret

00002908 <UART_callback_Rece_Int>:

 void UART_callback_Rece_Int(void (*Ptr_to_Func)(void))
{
    2908:	df 93       	push	r29
    290a:	cf 93       	push	r28
    290c:	00 d0       	rcall	.+0      	; 0x290e <UART_callback_Rece_Int+0x6>
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
    2912:	9a 83       	std	Y+2, r25	; 0x02
    2914:	89 83       	std	Y+1, r24	; 0x01
	Ptr_To_Rece_Int = Ptr_to_Func;
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	9a 81       	ldd	r25, Y+2	; 0x02
    291a:	90 93 f7 02 	sts	0x02F7, r25
    291e:	80 93 f6 02 	sts	0x02F6, r24
}
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret

0000292c <UART_callback_Trans_Int>:

 void UART_callback_Trans_Int(void (*Ptr_to_Func)(void))
{
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	00 d0       	rcall	.+0      	; 0x2932 <UART_callback_Trans_Int+0x6>
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
    2936:	9a 83       	std	Y+2, r25	; 0x02
    2938:	89 83       	std	Y+1, r24	; 0x01
	Ptr_To_Trans_Int = Ptr_to_Func;
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	9a 81       	ldd	r25, Y+2	; 0x02
    293e:	90 93 f5 02 	sts	0x02F5, r25
    2942:	80 93 f4 02 	sts	0x02F4, r24
}
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	08 95       	ret

00002950 <USART_RX0C_vect>:

#if UART_UNIT==UART_UNIT0
ISR(USART_RX0C_vect)
{
    2950:	1f 92       	push	r1
    2952:	0f 92       	push	r0
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	0f 92       	push	r0
    2958:	00 90 5b 00 	lds	r0, 0x005B
    295c:	0f 92       	push	r0
    295e:	11 24       	eor	r1, r1
    2960:	2f 93       	push	r18
    2962:	3f 93       	push	r19
    2964:	4f 93       	push	r20
    2966:	5f 93       	push	r21
    2968:	6f 93       	push	r22
    296a:	7f 93       	push	r23
    296c:	8f 93       	push	r24
    296e:	9f 93       	push	r25
    2970:	af 93       	push	r26
    2972:	bf 93       	push	r27
    2974:	ef 93       	push	r30
    2976:	ff 93       	push	r31
    2978:	df 93       	push	r29
    297a:	cf 93       	push	r28
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62

	(*Ptr_To_Rece_Int)();
    2980:	e0 91 f6 02 	lds	r30, 0x02F6
    2984:	f0 91 f7 02 	lds	r31, 0x02F7
    2988:	09 95       	icall
}
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	ff 91       	pop	r31
    2990:	ef 91       	pop	r30
    2992:	bf 91       	pop	r27
    2994:	af 91       	pop	r26
    2996:	9f 91       	pop	r25
    2998:	8f 91       	pop	r24
    299a:	7f 91       	pop	r23
    299c:	6f 91       	pop	r22
    299e:	5f 91       	pop	r21
    29a0:	4f 91       	pop	r20
    29a2:	3f 91       	pop	r19
    29a4:	2f 91       	pop	r18
    29a6:	0f 90       	pop	r0
    29a8:	00 92 5b 00 	sts	0x005B, r0
    29ac:	0f 90       	pop	r0
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	0f 90       	pop	r0
    29b2:	1f 90       	pop	r1
    29b4:	18 95       	reti

000029b6 <USART_TX0C_vect>:
	(*Ptr_To_Rece_Int)();
}
#endif
#if UART_UNIT==UART_UNIT0
ISR(USART_TX0C_vect)
{
    29b6:	1f 92       	push	r1
    29b8:	0f 92       	push	r0
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	0f 92       	push	r0
    29be:	00 90 5b 00 	lds	r0, 0x005B
    29c2:	0f 92       	push	r0
    29c4:	11 24       	eor	r1, r1
    29c6:	2f 93       	push	r18
    29c8:	3f 93       	push	r19
    29ca:	4f 93       	push	r20
    29cc:	5f 93       	push	r21
    29ce:	6f 93       	push	r22
    29d0:	7f 93       	push	r23
    29d2:	8f 93       	push	r24
    29d4:	9f 93       	push	r25
    29d6:	af 93       	push	r26
    29d8:	bf 93       	push	r27
    29da:	ef 93       	push	r30
    29dc:	ff 93       	push	r31
    29de:	df 93       	push	r29
    29e0:	cf 93       	push	r28
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62

	(*Ptr_To_Trans_Int)();
    29e6:	e0 91 f4 02 	lds	r30, 0x02F4
    29ea:	f0 91 f5 02 	lds	r31, 0x02F5
    29ee:	09 95       	icall
}
    29f0:	cf 91       	pop	r28
    29f2:	df 91       	pop	r29
    29f4:	ff 91       	pop	r31
    29f6:	ef 91       	pop	r30
    29f8:	bf 91       	pop	r27
    29fa:	af 91       	pop	r26
    29fc:	9f 91       	pop	r25
    29fe:	8f 91       	pop	r24
    2a00:	7f 91       	pop	r23
    2a02:	6f 91       	pop	r22
    2a04:	5f 91       	pop	r21
    2a06:	4f 91       	pop	r20
    2a08:	3f 91       	pop	r19
    2a0a:	2f 91       	pop	r18
    2a0c:	0f 90       	pop	r0
    2a0e:	00 92 5b 00 	sts	0x005B, r0
    2a12:	0f 90       	pop	r0
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	0f 90       	pop	r0
    2a18:	1f 90       	pop	r1
    2a1a:	18 95       	reti

00002a1c <UART_SendByte>:
#endif

/****************************************Send and receive functions with no ckecking********************************/

void UART_SendByte(const uint8 data)
{
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	0f 92       	push	r0
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	89 83       	std	Y+1, r24	; 0x01

#if UART_UNIT==UART_UNIT0
	UDR0 = data;
    2a28:	ec e2       	ldi	r30, 0x2C	; 44
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	80 83       	st	Z, r24
#elif UART_UNIT==UART_UNIT1
	UDR1 = data;
#endif

}
    2a30:	0f 90       	pop	r0
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <UART_RecieveByte>:

uint8 UART_RecieveByte(void)
{
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	0f 92       	push	r0
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
	uint8 ret=0;
    2a42:	19 82       	std	Y+1, r1	; 0x01
#if UART_UNIT==UART_UNIT0
	ret=UDR0;
    2a44:	ec e2       	ldi	r30, 0x2C	; 44
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	89 83       	std	Y+1, r24	; 0x01
#elif UART_UNIT==UART_UNIT1
	ret=UDR1;
#endif
    return ret;
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a4e:	0f 90       	pop	r0
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	08 95       	ret

00002a56 <UART_SendData>:
/****************************************Send and receive functions with polling     ********************************/
void UART_SendData(const uint8 data)
{
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	0f 92       	push	r0
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
    2a60:	89 83       	std	Y+1, r24	; 0x01
#if UART_UNIT==UART_UNIT0
 while(!(GET_BIT(UCSR0A,UDRE)));  //UDRE flag is set when the buffer is empty and ready for transmitting a new byte so wait until this flag is set to one.
    2a62:	eb e2       	ldi	r30, 0x2B	; 43
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	82 95       	swap	r24
    2a6a:	86 95       	lsr	r24
    2a6c:	87 70       	andi	r24, 0x07	; 7
    2a6e:	88 2f       	mov	r24, r24
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	81 70       	andi	r24, 0x01	; 1
    2a74:	90 70       	andi	r25, 0x00	; 0
    2a76:	00 97       	sbiw	r24, 0x00	; 0
    2a78:	a1 f3       	breq	.-24     	; 0x2a62 <UART_SendData+0xc>
		UDR0 = data;
    2a7a:	ec e2       	ldi	r30, 0x2C	; 44
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	80 83       	st	Z, r24
#elif UART_UNIT==UART_UNIT1
 while(!(GET_BIT(UCSR0A,UDRE)));  //UDRE flag is set when the buffer is empty and ready for transmitting a new byte so wait until this flag is set to one.
		UDR1 = data;
#endif

}
    2a82:	0f 90       	pop	r0
    2a84:	cf 91       	pop	r28
    2a86:	df 91       	pop	r29
    2a88:	08 95       	ret

00002a8a <UART_RecieveData>:

uint8 UART_RecieveData(void)
{
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	0f 92       	push	r0
    2a90:	cd b7       	in	r28, 0x3d	; 61
    2a92:	de b7       	in	r29, 0x3e	; 62
	uint8 ret=0;
    2a94:	19 82       	std	Y+1, r1	; 0x01
	#if UART_UNIT==UART_UNIT0
	while(!(GET_BIT(UCSR0A,RXC)));  //RXC flag is set when the UART receive data so until this flag is set to one
    2a96:	eb e2       	ldi	r30, 0x2B	; 43
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	88 23       	and	r24, r24
    2a9e:	dc f7       	brge	.-10     	; 0x2a96 <UART_RecieveData+0xc>
	 ret=UDR0;
    2aa0:	ec e2       	ldi	r30, 0x2C	; 44
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	89 83       	std	Y+1, r24	; 0x01
    #elif UART_UNIT==UART_UNIT1
	 while(!(GET_BIT(UCSR1A,RXC)));  //RXC flag is set when the UART receive data so until this flag is set to one
	 	 ret=UDR1;
#endif
	 	 return ret;
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aaa:	0f 90       	pop	r0
    2aac:	cf 91       	pop	r28
    2aae:	df 91       	pop	r29
    2ab0:	08 95       	ret

00002ab2 <UART_RecieveData_NoBlock>:


//hyfedny b eh el statue
uint8 UART_RecieveData_NoBlock(uint8*pdata)
{
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	00 d0       	rcall	.+0      	; 0x2ab8 <UART_RecieveData_NoBlock+0x6>
    2ab8:	0f 92       	push	r0
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    2abe:	9b 83       	std	Y+3, r25	; 0x03
    2ac0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 statue=0;
    2ac2:	19 82       	std	Y+1, r1	; 0x01
#if UART_UNIT==UART_UNIT0
	if(GET_BIT(UCSR0A,RXC))
    2ac4:	eb e2       	ldi	r30, 0x2B	; 43
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	88 23       	and	r24, r24
    2acc:	4c f4       	brge	.+18     	; 0x2ae0 <UART_RecieveData_NoBlock+0x2e>
	{
		*pdata=UDR0;
    2ace:	ec e2       	ldi	r30, 0x2C	; 44
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 81       	ld	r24, Z
    2ad4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ad6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ad8:	80 83       	st	Z, r24

		statue=1;
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	89 83       	std	Y+1, r24	; 0x01
    2ade:	01 c0       	rjmp	.+2      	; 0x2ae2 <UART_RecieveData_NoBlock+0x30>

	}
	else
	{	statue=0;
    2ae0:	19 82       	std	Y+1, r1	; 0x01
		}
		else
		{	statue=0;
		}
#endif
return statue;
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	cf 91       	pop	r28
    2aec:	df 91       	pop	r29
    2aee:	08 95       	ret

00002af0 <Timer3_Init>:
#include"Timer3.h"
void Timer3_Init(timer3_mode_type timer_mode,prescaler3_type scaler,OC3_mode_type oc3_mode,OC3_ch_type channel_t)
{
    2af0:	df 93       	push	r29
    2af2:	cf 93       	push	r28
    2af4:	cd b7       	in	r28, 0x3d	; 61
    2af6:	de b7       	in	r29, 0x3e	; 62
    2af8:	2c 97       	sbiw	r28, 0x0c	; 12
    2afa:	0f b6       	in	r0, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	de bf       	out	0x3e, r29	; 62
    2b00:	0f be       	out	0x3f, r0	; 63
    2b02:	cd bf       	out	0x3d, r28	; 61
    2b04:	89 83       	std	Y+1, r24	; 0x01
    2b06:	6a 83       	std	Y+2, r22	; 0x02
    2b08:	4b 83       	std	Y+3, r20	; 0x03
    2b0a:	2c 83       	std	Y+4, r18	; 0x04
switch (timer_mode)
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	28 2f       	mov	r18, r24
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	3c 87       	std	Y+12, r19	; 0x0c
    2b14:	2b 87       	std	Y+11, r18	; 0x0b
    2b16:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b18:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b1a:	87 30       	cpi	r24, 0x07	; 7
    2b1c:	91 05       	cpc	r25, r1
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <Timer3_Init+0x32>
    2b20:	24 c1       	rjmp	.+584    	; 0x2d6a <Timer3_Init+0x27a>
    2b22:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b24:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b26:	28 30       	cpi	r18, 0x08	; 8
    2b28:	31 05       	cpc	r19, r1
    2b2a:	4c f5       	brge	.+82     	; 0x2b7e <Timer3_Init+0x8e>
    2b2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b2e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b30:	83 30       	cpi	r24, 0x03	; 3
    2b32:	91 05       	cpc	r25, r1
    2b34:	09 f4       	brne	.+2      	; 0x2b38 <Timer3_Init+0x48>
    2b36:	a5 c0       	rjmp	.+330    	; 0x2c82 <Timer3_Init+0x192>
    2b38:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b3a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b3c:	24 30       	cpi	r18, 0x04	; 4
    2b3e:	31 05       	cpc	r19, r1
    2b40:	8c f4       	brge	.+34     	; 0x2b64 <Timer3_Init+0x74>
    2b42:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b44:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b46:	81 30       	cpi	r24, 0x01	; 1
    2b48:	91 05       	cpc	r25, r1
    2b4a:	09 f4       	brne	.+2      	; 0x2b4e <Timer3_Init+0x5e>
    2b4c:	60 c0       	rjmp	.+192    	; 0x2c0e <Timer3_Init+0x11e>
    2b4e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b50:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b52:	22 30       	cpi	r18, 0x02	; 2
    2b54:	31 05       	cpc	r19, r1
    2b56:	0c f0       	brlt	.+2      	; 0x2b5a <Timer3_Init+0x6a>
    2b58:	77 c0       	rjmp	.+238    	; 0x2c48 <Timer3_Init+0x158>
    2b5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b5e:	00 97       	sbiw	r24, 0x00	; 0
    2b60:	c9 f1       	breq	.+114    	; 0x2bd4 <Timer3_Init+0xe4>
    2b62:	ea c1       	rjmp	.+980    	; 0x2f38 <Timer3_Init+0x448>
    2b64:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b66:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b68:	25 30       	cpi	r18, 0x05	; 5
    2b6a:	31 05       	cpc	r19, r1
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <Timer3_Init+0x80>
    2b6e:	c3 c0       	rjmp	.+390    	; 0x2cf6 <Timer3_Init+0x206>
    2b70:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b72:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b74:	86 30       	cpi	r24, 0x06	; 6
    2b76:	91 05       	cpc	r25, r1
    2b78:	0c f0       	brlt	.+2      	; 0x2b7c <Timer3_Init+0x8c>
    2b7a:	da c0       	rjmp	.+436    	; 0x2d30 <Timer3_Init+0x240>
    2b7c:	9f c0       	rjmp	.+318    	; 0x2cbc <Timer3_Init+0x1cc>
    2b7e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b80:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b82:	2b 30       	cpi	r18, 0x0B	; 11
    2b84:	31 05       	cpc	r19, r1
    2b86:	09 f4       	brne	.+2      	; 0x2b8a <Timer3_Init+0x9a>
    2b88:	64 c1       	rjmp	.+712    	; 0x2e52 <Timer3_Init+0x362>
    2b8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b8e:	8c 30       	cpi	r24, 0x0C	; 12
    2b90:	91 05       	cpc	r25, r1
    2b92:	6c f4       	brge	.+26     	; 0x2bae <Timer3_Init+0xbe>
    2b94:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b96:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b98:	29 30       	cpi	r18, 0x09	; 9
    2b9a:	31 05       	cpc	r19, r1
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <Timer3_Init+0xb0>
    2b9e:	1f c1       	rjmp	.+574    	; 0x2dde <Timer3_Init+0x2ee>
    2ba0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ba2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ba4:	8a 30       	cpi	r24, 0x0A	; 10
    2ba6:	91 05       	cpc	r25, r1
    2ba8:	0c f0       	brlt	.+2      	; 0x2bac <Timer3_Init+0xbc>
    2baa:	36 c1       	rjmp	.+620    	; 0x2e18 <Timer3_Init+0x328>
    2bac:	fb c0       	rjmp	.+502    	; 0x2da4 <Timer3_Init+0x2b4>
    2bae:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bb0:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bb2:	2d 30       	cpi	r18, 0x0D	; 13
    2bb4:	31 05       	cpc	r19, r1
    2bb6:	09 f4       	brne	.+2      	; 0x2bba <Timer3_Init+0xca>
    2bb8:	86 c1       	rjmp	.+780    	; 0x2ec6 <Timer3_Init+0x3d6>
    2bba:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bbc:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bbe:	8d 30       	cpi	r24, 0x0D	; 13
    2bc0:	91 05       	cpc	r25, r1
    2bc2:	0c f4       	brge	.+2      	; 0x2bc6 <Timer3_Init+0xd6>
    2bc4:	63 c1       	rjmp	.+710    	; 0x2e8c <Timer3_Init+0x39c>
    2bc6:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bc8:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bca:	2e 30       	cpi	r18, 0x0E	; 14
    2bcc:	31 05       	cpc	r19, r1
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <Timer3_Init+0xe2>
    2bd0:	97 c1       	rjmp	.+814    	; 0x2f00 <Timer3_Init+0x410>
    2bd2:	b2 c1       	rjmp	.+868    	; 0x2f38 <Timer3_Init+0x448>
 {

case timer3_Normal_mode:                          CLR_BIT(TCCR3A,WGM30);
    2bd4:	ab e8       	ldi	r26, 0x8B	; 139
    2bd6:	b0 e0       	ldi	r27, 0x00	; 0
    2bd8:	eb e8       	ldi	r30, 0x8B	; 139
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	8e 7f       	andi	r24, 0xFE	; 254
    2be0:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR3A,WGM31);
    2be2:	ab e8       	ldi	r26, 0x8B	; 139
    2be4:	b0 e0       	ldi	r27, 0x00	; 0
    2be6:	eb e8       	ldi	r30, 0x8B	; 139
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	80 81       	ld	r24, Z
    2bec:	8d 7f       	andi	r24, 0xFD	; 253
    2bee:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR3B,WGM32);
    2bf0:	aa e8       	ldi	r26, 0x8A	; 138
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	ea e8       	ldi	r30, 0x8A	; 138
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	87 7f       	andi	r24, 0xF7	; 247
    2bfc:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR3B,WGM33);
    2bfe:	aa e8       	ldi	r26, 0x8A	; 138
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	ea e8       	ldi	r30, 0x8A	; 138
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	8f 7e       	andi	r24, 0xEF	; 239
    2c0a:	8c 93       	st	X, r24
    2c0c:	95 c1       	rjmp	.+810    	; 0x2f38 <Timer3_Init+0x448>
                                                  break;
case timer3_PWM_Phase_Correct_8bit:               SET_BIT(TCCR3A,WGM30);
    2c0e:	ab e8       	ldi	r26, 0x8B	; 139
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	eb e8       	ldi	r30, 0x8B	; 139
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	81 60       	ori	r24, 0x01	; 1
    2c1a:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    2c1c:	ab e8       	ldi	r26, 0x8B	; 139
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	eb e8       	ldi	r30, 0x8B	; 139
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	8d 7f       	andi	r24, 0xFD	; 253
    2c28:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2c2a:	aa e8       	ldi	r26, 0x8A	; 138
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	ea e8       	ldi	r30, 0x8A	; 138
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 81       	ld	r24, Z
    2c34:	87 7f       	andi	r24, 0xF7	; 247
    2c36:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    2c38:	aa e8       	ldi	r26, 0x8A	; 138
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	ea e8       	ldi	r30, 0x8A	; 138
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	8f 7e       	andi	r24, 0xEF	; 239
    2c44:	8c 93       	st	X, r24
    2c46:	78 c1       	rjmp	.+752    	; 0x2f38 <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_Correct_9bit:               CLR_BIT(TCCR3A,WGM30);
    2c48:	ab e8       	ldi	r26, 0x8B	; 139
    2c4a:	b0 e0       	ldi	r27, 0x00	; 0
    2c4c:	eb e8       	ldi	r30, 0x8B	; 139
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	8e 7f       	andi	r24, 0xFE	; 254
    2c54:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2c56:	ab e8       	ldi	r26, 0x8B	; 139
    2c58:	b0 e0       	ldi	r27, 0x00	; 0
    2c5a:	eb e8       	ldi	r30, 0x8B	; 139
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	82 60       	ori	r24, 0x02	; 2
    2c62:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2c64:	aa e8       	ldi	r26, 0x8A	; 138
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	ea e8       	ldi	r30, 0x8A	; 138
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	87 7f       	andi	r24, 0xF7	; 247
    2c70:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    2c72:	aa e8       	ldi	r26, 0x8A	; 138
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	ea e8       	ldi	r30, 0x8A	; 138
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	8f 7e       	andi	r24, 0xEF	; 239
    2c7e:	8c 93       	st	X, r24
    2c80:	5b c1       	rjmp	.+694    	; 0x2f38 <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_Correct_10bit:              SET_BIT(TCCR3A,WGM30);
    2c82:	ab e8       	ldi	r26, 0x8B	; 139
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	eb e8       	ldi	r30, 0x8B	; 139
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	81 60       	ori	r24, 0x01	; 1
    2c8e:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2c90:	ab e8       	ldi	r26, 0x8B	; 139
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	eb e8       	ldi	r30, 0x8B	; 139
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	82 60       	ori	r24, 0x02	; 2
    2c9c:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2c9e:	aa e8       	ldi	r26, 0x8A	; 138
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	ea e8       	ldi	r30, 0x8A	; 138
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	87 7f       	andi	r24, 0xF7	; 247
    2caa:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    2cac:	aa e8       	ldi	r26, 0x8A	; 138
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	ea e8       	ldi	r30, 0x8A	; 138
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	8f 7e       	andi	r24, 0xEF	; 239
    2cb8:	8c 93       	st	X, r24
    2cba:	3e c1       	rjmp	.+636    	; 0x2f38 <Timer3_Init+0x448>
	                                              break;
case timer3_CTC_mode_ocr_top:                     CLR_BIT(TCCR3A,WGM30);
    2cbc:	ab e8       	ldi	r26, 0x8B	; 139
    2cbe:	b0 e0       	ldi	r27, 0x00	; 0
    2cc0:	eb e8       	ldi	r30, 0x8B	; 139
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	80 81       	ld	r24, Z
    2cc6:	8e 7f       	andi	r24, 0xFE	; 254
    2cc8:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    2cca:	ab e8       	ldi	r26, 0x8B	; 139
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	eb e8       	ldi	r30, 0x8B	; 139
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	8d 7f       	andi	r24, 0xFD	; 253
    2cd6:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2cd8:	aa e8       	ldi	r26, 0x8A	; 138
    2cda:	b0 e0       	ldi	r27, 0x00	; 0
    2cdc:	ea e8       	ldi	r30, 0x8A	; 138
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	80 81       	ld	r24, Z
    2ce2:	88 60       	ori	r24, 0x08	; 8
    2ce4:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    2ce6:	aa e8       	ldi	r26, 0x8A	; 138
    2ce8:	b0 e0       	ldi	r27, 0x00	; 0
    2cea:	ea e8       	ldi	r30, 0x8A	; 138
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	8f 7e       	andi	r24, 0xEF	; 239
    2cf2:	8c 93       	st	X, r24
    2cf4:	21 c1       	rjmp	.+578    	; 0x2f38 <Timer3_Init+0x448>
	                                              break;
case timer3_Fast_PWM_8_bit:                       SET_BIT(TCCR3A,WGM30);
    2cf6:	ab e8       	ldi	r26, 0x8B	; 139
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	eb e8       	ldi	r30, 0x8B	; 139
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	81 60       	ori	r24, 0x01	; 1
    2d02:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    2d04:	ab e8       	ldi	r26, 0x8B	; 139
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	eb e8       	ldi	r30, 0x8B	; 139
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	8d 7f       	andi	r24, 0xFD	; 253
    2d10:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2d12:	aa e8       	ldi	r26, 0x8A	; 138
    2d14:	b0 e0       	ldi	r27, 0x00	; 0
    2d16:	ea e8       	ldi	r30, 0x8A	; 138
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	88 60       	ori	r24, 0x08	; 8
    2d1e:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    2d20:	aa e8       	ldi	r26, 0x8A	; 138
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	ea e8       	ldi	r30, 0x8A	; 138
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	80 81       	ld	r24, Z
    2d2a:	8f 7e       	andi	r24, 0xEF	; 239
    2d2c:	8c 93       	st	X, r24
    2d2e:	04 c1       	rjmp	.+520    	; 0x2f38 <Timer3_Init+0x448>
	                                              break;
case timer3_Fast_PWM_9_bit:                       CLR_BIT(TCCR3A,WGM30);
    2d30:	ab e8       	ldi	r26, 0x8B	; 139
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	eb e8       	ldi	r30, 0x8B	; 139
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	8e 7f       	andi	r24, 0xFE	; 254
    2d3c:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2d3e:	ab e8       	ldi	r26, 0x8B	; 139
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	eb e8       	ldi	r30, 0x8B	; 139
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	82 60       	ori	r24, 0x02	; 2
    2d4a:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2d4c:	aa e8       	ldi	r26, 0x8A	; 138
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	ea e8       	ldi	r30, 0x8A	; 138
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	88 60       	ori	r24, 0x08	; 8
    2d58:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    2d5a:	aa e8       	ldi	r26, 0x8A	; 138
    2d5c:	b0 e0       	ldi	r27, 0x00	; 0
    2d5e:	ea e8       	ldi	r30, 0x8A	; 138
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	80 81       	ld	r24, Z
    2d64:	8f 7e       	andi	r24, 0xEF	; 239
    2d66:	8c 93       	st	X, r24
    2d68:	e7 c0       	rjmp	.+462    	; 0x2f38 <Timer3_Init+0x448>
	                                              break;
case timer3_Fast_PWM_10_bit:                      SET_BIT(TCCR3A,WGM30);
    2d6a:	ab e8       	ldi	r26, 0x8B	; 139
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	eb e8       	ldi	r30, 0x8B	; 139
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	81 60       	ori	r24, 0x01	; 1
    2d76:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2d78:	ab e8       	ldi	r26, 0x8B	; 139
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	eb e8       	ldi	r30, 0x8B	; 139
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	82 60       	ori	r24, 0x02	; 2
    2d84:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2d86:	aa e8       	ldi	r26, 0x8A	; 138
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	ea e8       	ldi	r30, 0x8A	; 138
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	88 60       	ori	r24, 0x08	; 8
    2d92:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    2d94:	aa e8       	ldi	r26, 0x8A	; 138
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	ea e8       	ldi	r30, 0x8A	; 138
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	8f 7e       	andi	r24, 0xEF	; 239
    2da0:	8c 93       	st	X, r24
    2da2:	ca c0       	rjmp	.+404    	; 0x2f38 <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_and_Freq_Correct_icr_top:   CLR_BIT(TCCR3A,WGM30);
    2da4:	ab e8       	ldi	r26, 0x8B	; 139
    2da6:	b0 e0       	ldi	r27, 0x00	; 0
    2da8:	eb e8       	ldi	r30, 0x8B	; 139
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	8e 7f       	andi	r24, 0xFE	; 254
    2db0:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    2db2:	ab e8       	ldi	r26, 0x8B	; 139
    2db4:	b0 e0       	ldi	r27, 0x00	; 0
    2db6:	eb e8       	ldi	r30, 0x8B	; 139
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	80 81       	ld	r24, Z
    2dbc:	8d 7f       	andi	r24, 0xFD	; 253
    2dbe:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2dc0:	aa e8       	ldi	r26, 0x8A	; 138
    2dc2:	b0 e0       	ldi	r27, 0x00	; 0
    2dc4:	ea e8       	ldi	r30, 0x8A	; 138
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 81       	ld	r24, Z
    2dca:	87 7f       	andi	r24, 0xF7	; 247
    2dcc:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2dce:	aa e8       	ldi	r26, 0x8A	; 138
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	ea e8       	ldi	r30, 0x8A	; 138
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	80 81       	ld	r24, Z
    2dd8:	80 61       	ori	r24, 0x10	; 16
    2dda:	8c 93       	st	X, r24
    2ddc:	ad c0       	rjmp	.+346    	; 0x2f38 <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_and_Freq_Correct_ocr_top:   SET_BIT(TCCR3A,WGM30);
    2dde:	ab e8       	ldi	r26, 0x8B	; 139
    2de0:	b0 e0       	ldi	r27, 0x00	; 0
    2de2:	eb e8       	ldi	r30, 0x8B	; 139
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	81 60       	ori	r24, 0x01	; 1
    2dea:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    2dec:	ab e8       	ldi	r26, 0x8B	; 139
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	eb e8       	ldi	r30, 0x8B	; 139
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	80 81       	ld	r24, Z
    2df6:	8d 7f       	andi	r24, 0xFD	; 253
    2df8:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2dfa:	aa e8       	ldi	r26, 0x8A	; 138
    2dfc:	b0 e0       	ldi	r27, 0x00	; 0
    2dfe:	ea e8       	ldi	r30, 0x8A	; 138
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	80 81       	ld	r24, Z
    2e04:	87 7f       	andi	r24, 0xF7	; 247
    2e06:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2e08:	aa e8       	ldi	r26, 0x8A	; 138
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	ea e8       	ldi	r30, 0x8A	; 138
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	80 81       	ld	r24, Z
    2e12:	80 61       	ori	r24, 0x10	; 16
    2e14:	8c 93       	st	X, r24
    2e16:	90 c0       	rjmp	.+288    	; 0x2f38 <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_Correct_icr_top:            CLR_BIT(TCCR3A,WGM30);
    2e18:	ab e8       	ldi	r26, 0x8B	; 139
    2e1a:	b0 e0       	ldi	r27, 0x00	; 0
    2e1c:	eb e8       	ldi	r30, 0x8B	; 139
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	8e 7f       	andi	r24, 0xFE	; 254
    2e24:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2e26:	ab e8       	ldi	r26, 0x8B	; 139
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	eb e8       	ldi	r30, 0x8B	; 139
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	82 60       	ori	r24, 0x02	; 2
    2e32:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2e34:	aa e8       	ldi	r26, 0x8A	; 138
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	ea e8       	ldi	r30, 0x8A	; 138
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	87 7f       	andi	r24, 0xF7	; 247
    2e40:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2e42:	aa e8       	ldi	r26, 0x8A	; 138
    2e44:	b0 e0       	ldi	r27, 0x00	; 0
    2e46:	ea e8       	ldi	r30, 0x8A	; 138
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	80 81       	ld	r24, Z
    2e4c:	80 61       	ori	r24, 0x10	; 16
    2e4e:	8c 93       	st	X, r24
    2e50:	73 c0       	rjmp	.+230    	; 0x2f38 <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_Correct_ocr_top:            SET_BIT(TCCR3A,WGM30);
    2e52:	ab e8       	ldi	r26, 0x8B	; 139
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	eb e8       	ldi	r30, 0x8B	; 139
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
    2e5c:	81 60       	ori	r24, 0x01	; 1
    2e5e:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2e60:	ab e8       	ldi	r26, 0x8B	; 139
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	eb e8       	ldi	r30, 0x8B	; 139
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	82 60       	ori	r24, 0x02	; 2
    2e6c:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2e6e:	aa e8       	ldi	r26, 0x8A	; 138
    2e70:	b0 e0       	ldi	r27, 0x00	; 0
    2e72:	ea e8       	ldi	r30, 0x8A	; 138
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	80 81       	ld	r24, Z
    2e78:	87 7f       	andi	r24, 0xF7	; 247
    2e7a:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2e7c:	aa e8       	ldi	r26, 0x8A	; 138
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	ea e8       	ldi	r30, 0x8A	; 138
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	80 81       	ld	r24, Z
    2e86:	80 61       	ori	r24, 0x10	; 16
    2e88:	8c 93       	st	X, r24
    2e8a:	56 c0       	rjmp	.+172    	; 0x2f38 <Timer3_Init+0x448>
	                                              break;
case timer3_CTC_mode_icr_top:                     CLR_BIT(TCCR3A,WGM30);
    2e8c:	ab e8       	ldi	r26, 0x8B	; 139
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	eb e8       	ldi	r30, 0x8B	; 139
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	8e 7f       	andi	r24, 0xFE	; 254
    2e98:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    2e9a:	ab e8       	ldi	r26, 0x8B	; 139
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	eb e8       	ldi	r30, 0x8B	; 139
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	8d 7f       	andi	r24, 0xFD	; 253
    2ea6:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2ea8:	aa e8       	ldi	r26, 0x8A	; 138
    2eaa:	b0 e0       	ldi	r27, 0x00	; 0
    2eac:	ea e8       	ldi	r30, 0x8A	; 138
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	80 81       	ld	r24, Z
    2eb2:	88 60       	ori	r24, 0x08	; 8
    2eb4:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2eb6:	aa e8       	ldi	r26, 0x8A	; 138
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	ea e8       	ldi	r30, 0x8A	; 138
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	80 81       	ld	r24, Z
    2ec0:	80 61       	ori	r24, 0x10	; 16
    2ec2:	8c 93       	st	X, r24
    2ec4:	39 c0       	rjmp	.+114    	; 0x2f38 <Timer3_Init+0x448>
	                                              break;
case timer3_Fast_PWM_icr_top:                     CLR_BIT(TCCR3A,WGM30);
    2ec6:	ab e8       	ldi	r26, 0x8B	; 139
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	eb e8       	ldi	r30, 0x8B	; 139
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	8e 7f       	andi	r24, 0xFE	; 254
    2ed2:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2ed4:	ab e8       	ldi	r26, 0x8B	; 139
    2ed6:	b0 e0       	ldi	r27, 0x00	; 0
    2ed8:	eb e8       	ldi	r30, 0x8B	; 139
    2eda:	f0 e0       	ldi	r31, 0x00	; 0
    2edc:	80 81       	ld	r24, Z
    2ede:	82 60       	ori	r24, 0x02	; 2
    2ee0:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2ee2:	aa e8       	ldi	r26, 0x8A	; 138
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	ea e8       	ldi	r30, 0x8A	; 138
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	80 81       	ld	r24, Z
    2eec:	88 60       	ori	r24, 0x08	; 8
    2eee:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2ef0:	aa e8       	ldi	r26, 0x8A	; 138
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	ea e8       	ldi	r30, 0x8A	; 138
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	80 61       	ori	r24, 0x10	; 16
    2efc:	8c 93       	st	X, r24
    2efe:	1c c0       	rjmp	.+56     	; 0x2f38 <Timer3_Init+0x448>
	                                              break;
case timer3_Fast_PWM_ocr_top:                     SET_BIT(TCCR3A,WGM30);
    2f00:	ab e8       	ldi	r26, 0x8B	; 139
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	eb e8       	ldi	r30, 0x8B	; 139
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	80 81       	ld	r24, Z
    2f0a:	81 60       	ori	r24, 0x01	; 1
    2f0c:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2f0e:	ab e8       	ldi	r26, 0x8B	; 139
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	eb e8       	ldi	r30, 0x8B	; 139
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	82 60       	ori	r24, 0x02	; 2
    2f1a:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2f1c:	aa e8       	ldi	r26, 0x8A	; 138
    2f1e:	b0 e0       	ldi	r27, 0x00	; 0
    2f20:	ea e8       	ldi	r30, 0x8A	; 138
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	80 81       	ld	r24, Z
    2f26:	88 60       	ori	r24, 0x08	; 8
    2f28:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2f2a:	aa e8       	ldi	r26, 0x8A	; 138
    2f2c:	b0 e0       	ldi	r27, 0x00	; 0
    2f2e:	ea e8       	ldi	r30, 0x8A	; 138
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	80 81       	ld	r24, Z
    2f34:	80 61       	ori	r24, 0x10	; 16
    2f36:	8c 93       	st	X, r24

						break;
}
#elif oc_3==fastpwm_3

switch (oc3_mode)
    2f38:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3a:	28 2f       	mov	r18, r24
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	3a 87       	std	Y+10, r19	; 0x0a
    2f40:	29 87       	std	Y+9, r18	; 0x09
    2f42:	89 85       	ldd	r24, Y+9	; 0x09
    2f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f46:	81 30       	cpi	r24, 0x01	; 1
    2f48:	91 05       	cpc	r25, r1
    2f4a:	09 f4       	brne	.+2      	; 0x2f4e <Timer3_Init+0x45e>
    2f4c:	cf c0       	rjmp	.+414    	; 0x30ec <Timer3_Init+0x5fc>
    2f4e:	29 85       	ldd	r18, Y+9	; 0x09
    2f50:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f52:	22 30       	cpi	r18, 0x02	; 2
    2f54:	31 05       	cpc	r19, r1
    2f56:	2c f4       	brge	.+10     	; 0x2f62 <Timer3_Init+0x472>
    2f58:	89 85       	ldd	r24, Y+9	; 0x09
    2f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5c:	00 97       	sbiw	r24, 0x00	; 0
    2f5e:	69 f0       	breq	.+26     	; 0x2f7a <Timer3_Init+0x48a>
    2f60:	c5 c0       	rjmp	.+394    	; 0x30ec <Timer3_Init+0x5fc>
    2f62:	29 85       	ldd	r18, Y+9	; 0x09
    2f64:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f66:	22 30       	cpi	r18, 0x02	; 2
    2f68:	31 05       	cpc	r19, r1
    2f6a:	91 f1       	breq	.+100    	; 0x2fd0 <Timer3_Init+0x4e0>
    2f6c:	89 85       	ldd	r24, Y+9	; 0x09
    2f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f70:	83 30       	cpi	r24, 0x03	; 3
    2f72:	91 05       	cpc	r25, r1
    2f74:	09 f4       	brne	.+2      	; 0x2f78 <Timer3_Init+0x488>
    2f76:	74 c0       	rjmp	.+232    	; 0x3060 <Timer3_Init+0x570>
    2f78:	b9 c0       	rjmp	.+370    	; 0x30ec <Timer3_Init+0x5fc>
{
case disconnected_3:CLR_BIT(TCCR3A,COM3A0);
    2f7a:	ab e8       	ldi	r26, 0x8B	; 139
    2f7c:	b0 e0       	ldi	r27, 0x00	; 0
    2f7e:	eb e8       	ldi	r30, 0x8B	; 139
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	80 81       	ld	r24, Z
    2f84:	8f 7b       	andi	r24, 0xBF	; 191
    2f86:	8c 93       	st	X, r24
                    CLR_BIT(TCCR3A,COM3A1);
    2f88:	ab e8       	ldi	r26, 0x8B	; 139
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	eb e8       	ldi	r30, 0x8B	; 139
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
    2f92:	8f 77       	andi	r24, 0x7F	; 127
    2f94:	8c 93       	st	X, r24

                    CLR_BIT(TCCR3A,COM3B0);
    2f96:	ab e8       	ldi	r26, 0x8B	; 139
    2f98:	b0 e0       	ldi	r27, 0x00	; 0
    2f9a:	eb e8       	ldi	r30, 0x8B	; 139
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	8f 7e       	andi	r24, 0xEF	; 239
    2fa2:	8c 93       	st	X, r24
                    CLR_BIT(TCCR3A,COM3B1);
    2fa4:	ab e8       	ldi	r26, 0x8B	; 139
    2fa6:	b0 e0       	ldi	r27, 0x00	; 0
    2fa8:	eb e8       	ldi	r30, 0x8B	; 139
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	80 81       	ld	r24, Z
    2fae:	8f 7d       	andi	r24, 0xDF	; 223
    2fb0:	8c 93       	st	X, r24

                    CLR_BIT(TCCR3A,COM3C0);
    2fb2:	ab e8       	ldi	r26, 0x8B	; 139
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	eb e8       	ldi	r30, 0x8B	; 139
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	8b 7f       	andi	r24, 0xFB	; 251
    2fbe:	8c 93       	st	X, r24
                    CLR_BIT(TCCR3A,COM3C1);
    2fc0:	ab e8       	ldi	r26, 0x8B	; 139
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	eb e8       	ldi	r30, 0x8B	; 139
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	80 81       	ld	r24, Z
    2fca:	87 7f       	andi	r24, 0xF7	; 247
    2fcc:	8c 93       	st	X, r24
    2fce:	8e c0       	rjmp	.+284    	; 0x30ec <Timer3_Init+0x5fc>
				    break;
case toggle_3:break;
case Non_inverting_clr_oc0_oncompare_set_on_bottom_3:
	switch(channel_t)
    2fd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd2:	28 2f       	mov	r18, r24
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	38 87       	std	Y+8, r19	; 0x08
    2fd8:	2f 83       	std	Y+7, r18	; 0x07
    2fda:	8f 81       	ldd	r24, Y+7	; 0x07
    2fdc:	98 85       	ldd	r25, Y+8	; 0x08
    2fde:	81 30       	cpi	r24, 0x01	; 1
    2fe0:	91 05       	cpc	r25, r1
    2fe2:	89 f0       	breq	.+34     	; 0x3006 <Timer3_Init+0x516>
    2fe4:	2f 81       	ldd	r18, Y+7	; 0x07
    2fe6:	38 85       	ldd	r19, Y+8	; 0x08
    2fe8:	22 30       	cpi	r18, 0x02	; 2
    2fea:	31 05       	cpc	r19, r1
    2fec:	0c f4       	brge	.+2      	; 0x2ff0 <Timer3_Init+0x500>
    2fee:	7e c0       	rjmp	.+252    	; 0x30ec <Timer3_Init+0x5fc>
    2ff0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff2:	98 85       	ldd	r25, Y+8	; 0x08
    2ff4:	82 30       	cpi	r24, 0x02	; 2
    2ff6:	91 05       	cpc	r25, r1
    2ff8:	a9 f0       	breq	.+42     	; 0x3024 <Timer3_Init+0x534>
    2ffa:	2f 81       	ldd	r18, Y+7	; 0x07
    2ffc:	38 85       	ldd	r19, Y+8	; 0x08
    2ffe:	23 30       	cpi	r18, 0x03	; 3
    3000:	31 05       	cpc	r19, r1
    3002:	f9 f0       	breq	.+62     	; 0x3042 <Timer3_Init+0x552>
    3004:	73 c0       	rjmp	.+230    	; 0x30ec <Timer3_Init+0x5fc>
	   {
	case disconnected_channel_3:break;
	     case A_Channel_3:CLR_BIT(TCCR3A,COM3A0);
    3006:	ab e8       	ldi	r26, 0x8B	; 139
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	eb e8       	ldi	r30, 0x8B	; 139
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	80 81       	ld	r24, Z
    3010:	8f 7b       	andi	r24, 0xBF	; 191
    3012:	8c 93       	st	X, r24
					    SET_BIT(TCCR3A,COM3A1);
    3014:	ab e8       	ldi	r26, 0x8B	; 139
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	eb e8       	ldi	r30, 0x8B	; 139
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 81       	ld	r24, Z
    301e:	80 68       	ori	r24, 0x80	; 128
    3020:	8c 93       	st	X, r24
    3022:	64 c0       	rjmp	.+200    	; 0x30ec <Timer3_Init+0x5fc>
						break;
	    case B_Channel_3:CLR_BIT(TCCR3A,COM3B0);
    3024:	ab e8       	ldi	r26, 0x8B	; 139
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	eb e8       	ldi	r30, 0x8B	; 139
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	8f 7e       	andi	r24, 0xEF	; 239
    3030:	8c 93       	st	X, r24
	                   SET_BIT(TCCR3A,COM3B1);
    3032:	ab e8       	ldi	r26, 0x8B	; 139
    3034:	b0 e0       	ldi	r27, 0x00	; 0
    3036:	eb e8       	ldi	r30, 0x8B	; 139
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	80 81       	ld	r24, Z
    303c:	80 62       	ori	r24, 0x20	; 32
    303e:	8c 93       	st	X, r24
    3040:	55 c0       	rjmp	.+170    	; 0x30ec <Timer3_Init+0x5fc>
	                   break;
	   case C_Channel_3:CLR_BIT(TCCR3A,COM3C0);
    3042:	ab e8       	ldi	r26, 0x8B	; 139
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	eb e8       	ldi	r30, 0x8B	; 139
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	80 81       	ld	r24, Z
    304c:	8b 7f       	andi	r24, 0xFB	; 251
    304e:	8c 93       	st	X, r24
	                    SET_BIT(TCCR3A,COM3C1);
    3050:	ab e8       	ldi	r26, 0x8B	; 139
    3052:	b0 e0       	ldi	r27, 0x00	; 0
    3054:	eb e8       	ldi	r30, 0x8B	; 139
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
    305a:	88 60       	ori	r24, 0x08	; 8
    305c:	8c 93       	st	X, r24
    305e:	46 c0       	rjmp	.+140    	; 0x30ec <Timer3_Init+0x5fc>
	                   break;
	   }
        break;
case Inverting_set_oc0_oncompare_clr_on_bottom_3:
	switch(channel_t)
    3060:	8c 81       	ldd	r24, Y+4	; 0x04
    3062:	28 2f       	mov	r18, r24
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	3e 83       	std	Y+6, r19	; 0x06
    3068:	2d 83       	std	Y+5, r18	; 0x05
    306a:	8d 81       	ldd	r24, Y+5	; 0x05
    306c:	9e 81       	ldd	r25, Y+6	; 0x06
    306e:	81 30       	cpi	r24, 0x01	; 1
    3070:	91 05       	cpc	r25, r1
    3072:	81 f0       	breq	.+32     	; 0x3094 <Timer3_Init+0x5a4>
    3074:	2d 81       	ldd	r18, Y+5	; 0x05
    3076:	3e 81       	ldd	r19, Y+6	; 0x06
    3078:	22 30       	cpi	r18, 0x02	; 2
    307a:	31 05       	cpc	r19, r1
    307c:	bc f1       	brlt	.+110    	; 0x30ec <Timer3_Init+0x5fc>
    307e:	8d 81       	ldd	r24, Y+5	; 0x05
    3080:	9e 81       	ldd	r25, Y+6	; 0x06
    3082:	82 30       	cpi	r24, 0x02	; 2
    3084:	91 05       	cpc	r25, r1
    3086:	a9 f0       	breq	.+42     	; 0x30b2 <Timer3_Init+0x5c2>
    3088:	2d 81       	ldd	r18, Y+5	; 0x05
    308a:	3e 81       	ldd	r19, Y+6	; 0x06
    308c:	23 30       	cpi	r18, 0x03	; 3
    308e:	31 05       	cpc	r19, r1
    3090:	f9 f0       	breq	.+62     	; 0x30d0 <Timer3_Init+0x5e0>
    3092:	2c c0       	rjmp	.+88     	; 0x30ec <Timer3_Init+0x5fc>
	   {
	case disconnected_channel_3:break;
	      case A_Channel_3:SET_BIT(TCCR3A,COM3A0);
    3094:	ab e8       	ldi	r26, 0x8B	; 139
    3096:	b0 e0       	ldi	r27, 0x00	; 0
    3098:	eb e8       	ldi	r30, 0x8B	; 139
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	80 81       	ld	r24, Z
    309e:	80 64       	ori	r24, 0x40	; 64
    30a0:	8c 93       	st	X, r24
	                     SET_BIT(TCCR3A,COM3A1);
    30a2:	ab e8       	ldi	r26, 0x8B	; 139
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	eb e8       	ldi	r30, 0x8B	; 139
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 81       	ld	r24, Z
    30ac:	80 68       	ori	r24, 0x80	; 128
    30ae:	8c 93       	st	X, r24
    30b0:	1d c0       	rjmp	.+58     	; 0x30ec <Timer3_Init+0x5fc>
	                     break;
	      case B_Channel_3:SET_BIT(TCCR3A,COM3B0);
    30b2:	ab e8       	ldi	r26, 0x8B	; 139
    30b4:	b0 e0       	ldi	r27, 0x00	; 0
    30b6:	eb e8       	ldi	r30, 0x8B	; 139
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	80 81       	ld	r24, Z
    30bc:	80 61       	ori	r24, 0x10	; 16
    30be:	8c 93       	st	X, r24
	  				     SET_BIT(TCCR3A,COM3B1);
    30c0:	ab e8       	ldi	r26, 0x8B	; 139
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	eb e8       	ldi	r30, 0x8B	; 139
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	80 81       	ld	r24, Z
    30ca:	80 62       	ori	r24, 0x20	; 32
    30cc:	8c 93       	st	X, r24
    30ce:	0e c0       	rjmp	.+28     	; 0x30ec <Timer3_Init+0x5fc>
	  			         break;
	      case C_Channel_3:SET_BIT(TCCR3A,COM3C0);
    30d0:	ab e8       	ldi	r26, 0x8B	; 139
    30d2:	b0 e0       	ldi	r27, 0x00	; 0
    30d4:	eb e8       	ldi	r30, 0x8B	; 139
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	80 81       	ld	r24, Z
    30da:	84 60       	ori	r24, 0x04	; 4
    30dc:	8c 93       	st	X, r24
	  				     SET_BIT(TCCR3A,COM3C1);
    30de:	ab e8       	ldi	r26, 0x8B	; 139
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	eb e8       	ldi	r30, 0x8B	; 139
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	88 60       	ori	r24, 0x08	; 8
    30ea:	8c 93       	st	X, r24
							break;

}

#endif
	TCCR3B&=0XF8;
    30ec:	aa e8       	ldi	r26, 0x8A	; 138
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	ea e8       	ldi	r30, 0x8A	; 138
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	88 7f       	andi	r24, 0xF8	; 248
    30f8:	8c 93       	st	X, r24
	TCCR3B|=scaler;
    30fa:	aa e8       	ldi	r26, 0x8A	; 138
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	ea e8       	ldi	r30, 0x8A	; 138
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	90 81       	ld	r25, Z
    3104:	8a 81       	ldd	r24, Y+2	; 0x02
    3106:	89 2b       	or	r24, r25
    3108:	8c 93       	st	X, r24

}
    310a:	2c 96       	adiw	r28, 0x0c	; 12
    310c:	0f b6       	in	r0, 0x3f	; 63
    310e:	f8 94       	cli
    3110:	de bf       	out	0x3e, r29	; 62
    3112:	0f be       	out	0x3f, r0	; 63
    3114:	cd bf       	out	0x3d, r28	; 61
    3116:	cf 91       	pop	r28
    3118:	df 91       	pop	r29
    311a:	08 95       	ret

0000311c <Timer3_InputCaptureEdge>:

void Timer3_InputCaptureEdge(Edge3_type edge)
{
    311c:	df 93       	push	r29
    311e:	cf 93       	push	r28
    3120:	0f 92       	push	r0
    3122:	cd b7       	in	r28, 0x3d	; 61
    3124:	de b7       	in	r29, 0x3e	; 62
    3126:	89 83       	std	Y+1, r24	; 0x01
	if(edge==Rising_3)
    3128:	89 81       	ldd	r24, Y+1	; 0x01
    312a:	81 30       	cpi	r24, 0x01	; 1
    312c:	41 f4       	brne	.+16     	; 0x313e <Timer3_InputCaptureEdge+0x22>
		SET_BIT(TCCR3B,ICES3);
    312e:	aa e8       	ldi	r26, 0x8A	; 138
    3130:	b0 e0       	ldi	r27, 0x00	; 0
    3132:	ea e8       	ldi	r30, 0x8A	; 138
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	80 81       	ld	r24, Z
    3138:	80 64       	ori	r24, 0x40	; 64
    313a:	8c 93       	st	X, r24
    313c:	0a c0       	rjmp	.+20     	; 0x3152 <Timer3_InputCaptureEdge+0x36>


	else if(edge==Falling_3)
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	88 23       	and	r24, r24
    3142:	39 f4       	brne	.+14     	; 0x3152 <Timer3_InputCaptureEdge+0x36>
		CLR_BIT(TCCR3B,ICES3);
    3144:	aa e8       	ldi	r26, 0x8A	; 138
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	ea e8       	ldi	r30, 0x8A	; 138
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	80 81       	ld	r24, Z
    314e:	8f 7b       	andi	r24, 0xBF	; 191
    3150:	8c 93       	st	X, r24

}
    3152:	0f 90       	pop	r0
    3154:	cf 91       	pop	r28
    3156:	df 91       	pop	r29
    3158:	08 95       	ret

0000315a <Timer3_ICU_InterruptEnable>:

void Timer3_ICU_InterruptEnable(void)
{
    315a:	df 93       	push	r29
    315c:	cf 93       	push	r28
    315e:	cd b7       	in	r28, 0x3d	; 61
    3160:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,TICIE3);
    3162:	ad e7       	ldi	r26, 0x7D	; 125
    3164:	b0 e0       	ldi	r27, 0x00	; 0
    3166:	ed e7       	ldi	r30, 0x7D	; 125
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	80 81       	ld	r24, Z
    316c:	80 62       	ori	r24, 0x20	; 32
    316e:	8c 93       	st	X, r24
}
    3170:	cf 91       	pop	r28
    3172:	df 91       	pop	r29
    3174:	08 95       	ret

00003176 <Timer3_ICU_InterruptDisable>:
void Timer3_ICU_InterruptDisable(void)
{
    3176:	df 93       	push	r29
    3178:	cf 93       	push	r28
    317a:	cd b7       	in	r28, 0x3d	; 61
    317c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,TICIE3);
    317e:	ad e7       	ldi	r26, 0x7D	; 125
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    3182:	ed e7       	ldi	r30, 0x7D	; 125
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	8f 7d       	andi	r24, 0xDF	; 223
    318a:	8c 93       	st	X, r24
}
    318c:	cf 91       	pop	r28
    318e:	df 91       	pop	r29
    3190:	08 95       	ret

00003192 <Timer3_OV_InterruptEnable>:
void Timer3_OV_InterruptEnable(void)
{
    3192:	df 93       	push	r29
    3194:	cf 93       	push	r28
    3196:	cd b7       	in	r28, 0x3d	; 61
    3198:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,TOIE3);
    319a:	ad e7       	ldi	r26, 0x7D	; 125
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	ed e7       	ldi	r30, 0x7D	; 125
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	80 81       	ld	r24, Z
    31a4:	84 60       	ori	r24, 0x04	; 4
    31a6:	8c 93       	st	X, r24
}
    31a8:	cf 91       	pop	r28
    31aa:	df 91       	pop	r29
    31ac:	08 95       	ret

000031ae <Timer3_OV_InterruptDisable>:
void Timer3_OV_InterruptDisable(void)
{
    31ae:	df 93       	push	r29
    31b0:	cf 93       	push	r28
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,TOIE3);
    31b6:	ad e7       	ldi	r26, 0x7D	; 125
    31b8:	b0 e0       	ldi	r27, 0x00	; 0
    31ba:	ed e7       	ldi	r30, 0x7D	; 125
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	80 81       	ld	r24, Z
    31c0:	8b 7f       	andi	r24, 0xFB	; 251
    31c2:	8c 93       	st	X, r24
}
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	08 95       	ret

000031ca <Timer3_OCA_InterruptEnable>:
void Timer3_OCA_InterruptEnable(void)
{
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	cd b7       	in	r28, 0x3d	; 61
    31d0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,OCIE3A);
    31d2:	ad e7       	ldi	r26, 0x7D	; 125
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	ed e7       	ldi	r30, 0x7D	; 125
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	80 61       	ori	r24, 0x10	; 16
    31de:	8c 93       	st	X, r24
}
    31e0:	cf 91       	pop	r28
    31e2:	df 91       	pop	r29
    31e4:	08 95       	ret

000031e6 <Timer3_OCA_InterruptDisable>:
void Timer3_OCA_InterruptDisable(void)
{
    31e6:	df 93       	push	r29
    31e8:	cf 93       	push	r28
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,OCIE3A);
    31ee:	ad e7       	ldi	r26, 0x7D	; 125
    31f0:	b0 e0       	ldi	r27, 0x00	; 0
    31f2:	ed e7       	ldi	r30, 0x7D	; 125
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	80 81       	ld	r24, Z
    31f8:	8f 7e       	andi	r24, 0xEF	; 239
    31fa:	8c 93       	st	X, r24
}
    31fc:	cf 91       	pop	r28
    31fe:	df 91       	pop	r29
    3200:	08 95       	ret

00003202 <Timer3_OCB_InterruptEnable>:
void Timer3_OCB_InterruptEnable(void)
{
    3202:	df 93       	push	r29
    3204:	cf 93       	push	r28
    3206:	cd b7       	in	r28, 0x3d	; 61
    3208:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,OCIE3B);
    320a:	ad e7       	ldi	r26, 0x7D	; 125
    320c:	b0 e0       	ldi	r27, 0x00	; 0
    320e:	ed e7       	ldi	r30, 0x7D	; 125
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	80 81       	ld	r24, Z
    3214:	88 60       	ori	r24, 0x08	; 8
    3216:	8c 93       	st	X, r24
}
    3218:	cf 91       	pop	r28
    321a:	df 91       	pop	r29
    321c:	08 95       	ret

0000321e <Timer3_OCB_InterruptDisable>:
void Timer3_OCB_InterruptDisable(void)
{
    321e:	df 93       	push	r29
    3220:	cf 93       	push	r28
    3222:	cd b7       	in	r28, 0x3d	; 61
    3224:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,OCIE3B);
    3226:	ad e7       	ldi	r26, 0x7D	; 125
    3228:	b0 e0       	ldi	r27, 0x00	; 0
    322a:	ed e7       	ldi	r30, 0x7D	; 125
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	80 81       	ld	r24, Z
    3230:	87 7f       	andi	r24, 0xF7	; 247
    3232:	8c 93       	st	X, r24
}
    3234:	cf 91       	pop	r28
    3236:	df 91       	pop	r29
    3238:	08 95       	ret

0000323a <Timer3_OCC_InterruptEnable>:

void Timer3_OCC_InterruptEnable(void)
{
    323a:	df 93       	push	r29
    323c:	cf 93       	push	r28
    323e:	cd b7       	in	r28, 0x3d	; 61
    3240:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,OCIE3C);
    3242:	ad e7       	ldi	r26, 0x7D	; 125
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	ed e7       	ldi	r30, 0x7D	; 125
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	80 81       	ld	r24, Z
    324c:	82 60       	ori	r24, 0x02	; 2
    324e:	8c 93       	st	X, r24
}
    3250:	cf 91       	pop	r28
    3252:	df 91       	pop	r29
    3254:	08 95       	ret

00003256 <Timer3_OCC_InterruptDisable>:
void Timer3_OCC_InterruptDisable(void)
{
    3256:	df 93       	push	r29
    3258:	cf 93       	push	r28
    325a:	cd b7       	in	r28, 0x3d	; 61
    325c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,OCIE3C);
    325e:	ad e7       	ldi	r26, 0x7D	; 125
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	ed e7       	ldi	r30, 0x7D	; 125
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	80 81       	ld	r24, Z
    3268:	8d 7f       	andi	r24, 0xFD	; 253
    326a:	8c 93       	st	X, r24
}
    326c:	cf 91       	pop	r28
    326e:	df 91       	pop	r29
    3270:	08 95       	ret

00003272 <TMR3_uint16_GetICUValue>:


uint16  TMR3_uint16_GetICUValue(void)
{
    3272:	df 93       	push	r29
    3274:	cf 93       	push	r28
    3276:	00 d0       	rcall	.+0      	; 0x3278 <TMR3_uint16_GetICUValue+0x6>
    3278:	cd b7       	in	r28, 0x3d	; 61
    327a:	de b7       	in	r29, 0x3e	; 62
	uint16 ret_val;
		ret_val=ICR3L|(ICR3H<<8);
    327c:	e0 e8       	ldi	r30, 0x80	; 128
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	80 81       	ld	r24, Z
    3282:	28 2f       	mov	r18, r24
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	e1 e8       	ldi	r30, 0x81	; 129
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	80 81       	ld	r24, Z
    328c:	88 2f       	mov	r24, r24
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	98 2f       	mov	r25, r24
    3292:	88 27       	eor	r24, r24
    3294:	82 2b       	or	r24, r18
    3296:	93 2b       	or	r25, r19
    3298:	9a 83       	std	Y+2, r25	; 0x02
    329a:	89 83       	std	Y+1, r24	; 0x01
		return ret_val;
    329c:	89 81       	ldd	r24, Y+1	; 0x01
    329e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    32a0:	0f 90       	pop	r0
    32a2:	0f 90       	pop	r0
    32a4:	cf 91       	pop	r28
    32a6:	df 91       	pop	r29
    32a8:	08 95       	ret

000032aa <TMR3_uint16_GetTimerValue>:

uint16  TMR3_uint16_GetTimerValue(void)
{
    32aa:	df 93       	push	r29
    32ac:	cf 93       	push	r28
    32ae:	00 d0       	rcall	.+0      	; 0x32b0 <TMR3_uint16_GetTimerValue+0x6>
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62

	uint16 ret_val;
	ret_val=TCNT3L|(TCNT3H<<8);
    32b4:	e8 e8       	ldi	r30, 0x88	; 136
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	80 81       	ld	r24, Z
    32ba:	28 2f       	mov	r18, r24
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	e9 e8       	ldi	r30, 0x89	; 137
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	80 81       	ld	r24, Z
    32c4:	88 2f       	mov	r24, r24
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	98 2f       	mov	r25, r24
    32ca:	88 27       	eor	r24, r24
    32cc:	82 2b       	or	r24, r18
    32ce:	93 2b       	or	r25, r19
    32d0:	9a 83       	std	Y+2, r25	; 0x02
    32d2:	89 83       	std	Y+1, r24	; 0x01
	return ret_val;
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    32d8:	0f 90       	pop	r0
    32da:	0f 90       	pop	r0
    32dc:	cf 91       	pop	r28
    32de:	df 91       	pop	r29
    32e0:	08 95       	ret

000032e2 <TMR3_void_SetTimerValue>:


void  TMR3_void_SetTimerValue(uint16 tmr_val)
{
    32e2:	df 93       	push	r29
    32e4:	cf 93       	push	r28
    32e6:	00 d0       	rcall	.+0      	; 0x32e8 <TMR3_void_SetTimerValue+0x6>
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	9a 83       	std	Y+2, r25	; 0x02
    32ee:	89 83       	std	Y+1, r24	; 0x01
TCNT3L=(uint8)tmr_val;
    32f0:	e8 e8       	ldi	r30, 0x88	; 136
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	80 83       	st	Z, r24
TCNT3H=(uint8)(tmr_val>>8);
    32f8:	e9 e8       	ldi	r30, 0x89	; 137
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	89 81       	ldd	r24, Y+1	; 0x01
    32fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3300:	89 2f       	mov	r24, r25
    3302:	99 27       	eor	r25, r25
    3304:	80 83       	st	Z, r24
}
    3306:	0f 90       	pop	r0
    3308:	0f 90       	pop	r0
    330a:	cf 91       	pop	r28
    330c:	df 91       	pop	r29
    330e:	08 95       	ret

00003310 <TMR3_void_Set_OCR_TimerValue>:

void  TMR3_void_Set_OCR_TimerValue(uint16 oc_val,OC3_ch_type ch)
{
    3310:	df 93       	push	r29
    3312:	cf 93       	push	r28
    3314:	00 d0       	rcall	.+0      	; 0x3316 <TMR3_void_Set_OCR_TimerValue+0x6>
    3316:	00 d0       	rcall	.+0      	; 0x3318 <TMR3_void_Set_OCR_TimerValue+0x8>
    3318:	0f 92       	push	r0
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	9a 83       	std	Y+2, r25	; 0x02
    3320:	89 83       	std	Y+1, r24	; 0x01
    3322:	6b 83       	std	Y+3, r22	; 0x03


	switch(ch){
    3324:	8b 81       	ldd	r24, Y+3	; 0x03
    3326:	28 2f       	mov	r18, r24
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	3d 83       	std	Y+5, r19	; 0x05
    332c:	2c 83       	std	Y+4, r18	; 0x04
    332e:	8c 81       	ldd	r24, Y+4	; 0x04
    3330:	9d 81       	ldd	r25, Y+5	; 0x05
    3332:	81 30       	cpi	r24, 0x01	; 1
    3334:	91 05       	cpc	r25, r1
    3336:	81 f0       	breq	.+32     	; 0x3358 <TMR3_void_Set_OCR_TimerValue+0x48>
    3338:	2c 81       	ldd	r18, Y+4	; 0x04
    333a:	3d 81       	ldd	r19, Y+5	; 0x05
    333c:	22 30       	cpi	r18, 0x02	; 2
    333e:	31 05       	cpc	r19, r1
    3340:	74 f1       	brlt	.+92     	; 0x339e <TMR3_void_Set_OCR_TimerValue+0x8e>
    3342:	8c 81       	ldd	r24, Y+4	; 0x04
    3344:	9d 81       	ldd	r25, Y+5	; 0x05
    3346:	82 30       	cpi	r24, 0x02	; 2
    3348:	91 05       	cpc	r25, r1
    334a:	91 f0       	breq	.+36     	; 0x3370 <TMR3_void_Set_OCR_TimerValue+0x60>
    334c:	2c 81       	ldd	r18, Y+4	; 0x04
    334e:	3d 81       	ldd	r19, Y+5	; 0x05
    3350:	23 30       	cpi	r18, 0x03	; 3
    3352:	31 05       	cpc	r19, r1
    3354:	c9 f0       	breq	.+50     	; 0x3388 <TMR3_void_Set_OCR_TimerValue+0x78>
    3356:	23 c0       	rjmp	.+70     	; 0x339e <TMR3_void_Set_OCR_TimerValue+0x8e>
	case disconnected_channel_3:break;
	case A_Channel_3:OCR3AL=(uint8)oc_val;
    3358:	e6 e8       	ldi	r30, 0x86	; 134
    335a:	f0 e0       	ldi	r31, 0x00	; 0
    335c:	89 81       	ldd	r24, Y+1	; 0x01
    335e:	80 83       	st	Z, r24
	                OCR3AH=(uint8)(oc_val>>8);
    3360:	e7 e8       	ldi	r30, 0x87	; 135
    3362:	f0 e0       	ldi	r31, 0x00	; 0
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	9a 81       	ldd	r25, Y+2	; 0x02
    3368:	89 2f       	mov	r24, r25
    336a:	99 27       	eor	r25, r25
    336c:	80 83       	st	Z, r24
    336e:	17 c0       	rjmp	.+46     	; 0x339e <TMR3_void_Set_OCR_TimerValue+0x8e>
	                 break;
	case B_Channel_3:OCR3BL=(uint8)oc_val;
    3370:	e4 e8       	ldi	r30, 0x84	; 132
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	89 81       	ldd	r24, Y+1	; 0x01
    3376:	80 83       	st	Z, r24
                   OCR3BH=(uint8)(oc_val>>8);
    3378:	e5 e8       	ldi	r30, 0x85	; 133
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	9a 81       	ldd	r25, Y+2	; 0x02
    3380:	89 2f       	mov	r24, r25
    3382:	99 27       	eor	r25, r25
    3384:	80 83       	st	Z, r24
    3386:	0b c0       	rjmp	.+22     	; 0x339e <TMR3_void_Set_OCR_TimerValue+0x8e>
		           break;
	case C_Channel_3:OCR3CL=(uint8)oc_val;
    3388:	e2 e8       	ldi	r30, 0x82	; 130
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	89 81       	ldd	r24, Y+1	; 0x01
    338e:	80 83       	st	Z, r24
                     OCR3CH=(uint8)(oc_val>>8);
    3390:	e3 e8       	ldi	r30, 0x83	; 131
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	89 81       	ldd	r24, Y+1	; 0x01
    3396:	9a 81       	ldd	r25, Y+2	; 0x02
    3398:	89 2f       	mov	r24, r25
    339a:	99 27       	eor	r25, r25
    339c:	80 83       	st	Z, r24
		             break;
	}

}
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	0f 90       	pop	r0
    33a4:	0f 90       	pop	r0
    33a6:	0f 90       	pop	r0
    33a8:	cf 91       	pop	r28
    33aa:	df 91       	pop	r29
    33ac:	08 95       	ret

000033ae <Timer1_Init>:
#include"Timer1.h"
void Timer1_Init(timer1_mode_type timer_mode,prescaler1_type scaler,OC1_mode_type oc1_mode,OC1_ch_type channel_t)
{
    33ae:	df 93       	push	r29
    33b0:	cf 93       	push	r28
    33b2:	cd b7       	in	r28, 0x3d	; 61
    33b4:	de b7       	in	r29, 0x3e	; 62
    33b6:	2e 97       	sbiw	r28, 0x0e	; 14
    33b8:	0f b6       	in	r0, 0x3f	; 63
    33ba:	f8 94       	cli
    33bc:	de bf       	out	0x3e, r29	; 62
    33be:	0f be       	out	0x3f, r0	; 63
    33c0:	cd bf       	out	0x3d, r28	; 61
    33c2:	89 83       	std	Y+1, r24	; 0x01
    33c4:	6a 83       	std	Y+2, r22	; 0x02
    33c6:	4b 83       	std	Y+3, r20	; 0x03
    33c8:	2c 83       	std	Y+4, r18	; 0x04
switch (timer_mode)
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	28 2f       	mov	r18, r24
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	3e 87       	std	Y+14, r19	; 0x0e
    33d2:	2d 87       	std	Y+13, r18	; 0x0d
    33d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d8:	87 30       	cpi	r24, 0x07	; 7
    33da:	91 05       	cpc	r25, r1
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <Timer1_Init+0x32>
    33de:	24 c1       	rjmp	.+584    	; 0x3628 <Timer1_Init+0x27a>
    33e0:	2d 85       	ldd	r18, Y+13	; 0x0d
    33e2:	3e 85       	ldd	r19, Y+14	; 0x0e
    33e4:	28 30       	cpi	r18, 0x08	; 8
    33e6:	31 05       	cpc	r19, r1
    33e8:	4c f5       	brge	.+82     	; 0x343c <Timer1_Init+0x8e>
    33ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ee:	83 30       	cpi	r24, 0x03	; 3
    33f0:	91 05       	cpc	r25, r1
    33f2:	09 f4       	brne	.+2      	; 0x33f6 <Timer1_Init+0x48>
    33f4:	a5 c0       	rjmp	.+330    	; 0x3540 <Timer1_Init+0x192>
    33f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    33f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    33fa:	24 30       	cpi	r18, 0x04	; 4
    33fc:	31 05       	cpc	r19, r1
    33fe:	8c f4       	brge	.+34     	; 0x3422 <Timer1_Init+0x74>
    3400:	8d 85       	ldd	r24, Y+13	; 0x0d
    3402:	9e 85       	ldd	r25, Y+14	; 0x0e
    3404:	81 30       	cpi	r24, 0x01	; 1
    3406:	91 05       	cpc	r25, r1
    3408:	09 f4       	brne	.+2      	; 0x340c <Timer1_Init+0x5e>
    340a:	60 c0       	rjmp	.+192    	; 0x34cc <Timer1_Init+0x11e>
    340c:	2d 85       	ldd	r18, Y+13	; 0x0d
    340e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3410:	22 30       	cpi	r18, 0x02	; 2
    3412:	31 05       	cpc	r19, r1
    3414:	0c f0       	brlt	.+2      	; 0x3418 <Timer1_Init+0x6a>
    3416:	77 c0       	rjmp	.+238    	; 0x3506 <Timer1_Init+0x158>
    3418:	8d 85       	ldd	r24, Y+13	; 0x0d
    341a:	9e 85       	ldd	r25, Y+14	; 0x0e
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	c9 f1       	breq	.+114    	; 0x3492 <Timer1_Init+0xe4>
    3420:	ea c1       	rjmp	.+980    	; 0x37f6 <Timer1_Init+0x448>
    3422:	2d 85       	ldd	r18, Y+13	; 0x0d
    3424:	3e 85       	ldd	r19, Y+14	; 0x0e
    3426:	25 30       	cpi	r18, 0x05	; 5
    3428:	31 05       	cpc	r19, r1
    342a:	09 f4       	brne	.+2      	; 0x342e <Timer1_Init+0x80>
    342c:	c3 c0       	rjmp	.+390    	; 0x35b4 <Timer1_Init+0x206>
    342e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3430:	9e 85       	ldd	r25, Y+14	; 0x0e
    3432:	86 30       	cpi	r24, 0x06	; 6
    3434:	91 05       	cpc	r25, r1
    3436:	0c f0       	brlt	.+2      	; 0x343a <Timer1_Init+0x8c>
    3438:	da c0       	rjmp	.+436    	; 0x35ee <Timer1_Init+0x240>
    343a:	9f c0       	rjmp	.+318    	; 0x357a <Timer1_Init+0x1cc>
    343c:	2d 85       	ldd	r18, Y+13	; 0x0d
    343e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3440:	2b 30       	cpi	r18, 0x0B	; 11
    3442:	31 05       	cpc	r19, r1
    3444:	09 f4       	brne	.+2      	; 0x3448 <Timer1_Init+0x9a>
    3446:	64 c1       	rjmp	.+712    	; 0x3710 <Timer1_Init+0x362>
    3448:	8d 85       	ldd	r24, Y+13	; 0x0d
    344a:	9e 85       	ldd	r25, Y+14	; 0x0e
    344c:	8c 30       	cpi	r24, 0x0C	; 12
    344e:	91 05       	cpc	r25, r1
    3450:	6c f4       	brge	.+26     	; 0x346c <Timer1_Init+0xbe>
    3452:	2d 85       	ldd	r18, Y+13	; 0x0d
    3454:	3e 85       	ldd	r19, Y+14	; 0x0e
    3456:	29 30       	cpi	r18, 0x09	; 9
    3458:	31 05       	cpc	r19, r1
    345a:	09 f4       	brne	.+2      	; 0x345e <Timer1_Init+0xb0>
    345c:	1f c1       	rjmp	.+574    	; 0x369c <Timer1_Init+0x2ee>
    345e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3460:	9e 85       	ldd	r25, Y+14	; 0x0e
    3462:	8a 30       	cpi	r24, 0x0A	; 10
    3464:	91 05       	cpc	r25, r1
    3466:	0c f0       	brlt	.+2      	; 0x346a <Timer1_Init+0xbc>
    3468:	36 c1       	rjmp	.+620    	; 0x36d6 <Timer1_Init+0x328>
    346a:	fb c0       	rjmp	.+502    	; 0x3662 <Timer1_Init+0x2b4>
    346c:	2d 85       	ldd	r18, Y+13	; 0x0d
    346e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3470:	2d 30       	cpi	r18, 0x0D	; 13
    3472:	31 05       	cpc	r19, r1
    3474:	09 f4       	brne	.+2      	; 0x3478 <Timer1_Init+0xca>
    3476:	86 c1       	rjmp	.+780    	; 0x3784 <Timer1_Init+0x3d6>
    3478:	8d 85       	ldd	r24, Y+13	; 0x0d
    347a:	9e 85       	ldd	r25, Y+14	; 0x0e
    347c:	8d 30       	cpi	r24, 0x0D	; 13
    347e:	91 05       	cpc	r25, r1
    3480:	0c f4       	brge	.+2      	; 0x3484 <Timer1_Init+0xd6>
    3482:	63 c1       	rjmp	.+710    	; 0x374a <Timer1_Init+0x39c>
    3484:	2d 85       	ldd	r18, Y+13	; 0x0d
    3486:	3e 85       	ldd	r19, Y+14	; 0x0e
    3488:	2e 30       	cpi	r18, 0x0E	; 14
    348a:	31 05       	cpc	r19, r1
    348c:	09 f4       	brne	.+2      	; 0x3490 <Timer1_Init+0xe2>
    348e:	97 c1       	rjmp	.+814    	; 0x37be <Timer1_Init+0x410>
    3490:	b2 c1       	rjmp	.+868    	; 0x37f6 <Timer1_Init+0x448>
 {

case timer1_Normal_mode:                          CLR_BIT(TCCR1A,WGM10);
    3492:	af e4       	ldi	r26, 0x4F	; 79
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	ef e4       	ldi	r30, 0x4F	; 79
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	80 81       	ld	r24, Z
    349c:	8e 7f       	andi	r24, 0xFE	; 254
    349e:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR1A,WGM11);
    34a0:	af e4       	ldi	r26, 0x4F	; 79
    34a2:	b0 e0       	ldi	r27, 0x00	; 0
    34a4:	ef e4       	ldi	r30, 0x4F	; 79
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	80 81       	ld	r24, Z
    34aa:	8d 7f       	andi	r24, 0xFD	; 253
    34ac:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR1B,WGM12);
    34ae:	ae e4       	ldi	r26, 0x4E	; 78
    34b0:	b0 e0       	ldi	r27, 0x00	; 0
    34b2:	ee e4       	ldi	r30, 0x4E	; 78
    34b4:	f0 e0       	ldi	r31, 0x00	; 0
    34b6:	80 81       	ld	r24, Z
    34b8:	87 7f       	andi	r24, 0xF7	; 247
    34ba:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR1B,WGM13);
    34bc:	ae e4       	ldi	r26, 0x4E	; 78
    34be:	b0 e0       	ldi	r27, 0x00	; 0
    34c0:	ee e4       	ldi	r30, 0x4E	; 78
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	80 81       	ld	r24, Z
    34c6:	8f 7e       	andi	r24, 0xEF	; 239
    34c8:	8c 93       	st	X, r24
    34ca:	95 c1       	rjmp	.+810    	; 0x37f6 <Timer1_Init+0x448>
                                                  break;
case timer1_PWM_Phase_Correct_8bit:               SET_BIT(TCCR1A,WGM10);
    34cc:	af e4       	ldi	r26, 0x4F	; 79
    34ce:	b0 e0       	ldi	r27, 0x00	; 0
    34d0:	ef e4       	ldi	r30, 0x4F	; 79
    34d2:	f0 e0       	ldi	r31, 0x00	; 0
    34d4:	80 81       	ld	r24, Z
    34d6:	81 60       	ori	r24, 0x01	; 1
    34d8:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    34da:	af e4       	ldi	r26, 0x4F	; 79
    34dc:	b0 e0       	ldi	r27, 0x00	; 0
    34de:	ef e4       	ldi	r30, 0x4F	; 79
    34e0:	f0 e0       	ldi	r31, 0x00	; 0
    34e2:	80 81       	ld	r24, Z
    34e4:	8d 7f       	andi	r24, 0xFD	; 253
    34e6:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    34e8:	ae e4       	ldi	r26, 0x4E	; 78
    34ea:	b0 e0       	ldi	r27, 0x00	; 0
    34ec:	ee e4       	ldi	r30, 0x4E	; 78
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	80 81       	ld	r24, Z
    34f2:	87 7f       	andi	r24, 0xF7	; 247
    34f4:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    34f6:	ae e4       	ldi	r26, 0x4E	; 78
    34f8:	b0 e0       	ldi	r27, 0x00	; 0
    34fa:	ee e4       	ldi	r30, 0x4E	; 78
    34fc:	f0 e0       	ldi	r31, 0x00	; 0
    34fe:	80 81       	ld	r24, Z
    3500:	8f 7e       	andi	r24, 0xEF	; 239
    3502:	8c 93       	st	X, r24
    3504:	78 c1       	rjmp	.+752    	; 0x37f6 <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_Correct_9bit:               CLR_BIT(TCCR1A,WGM10);
    3506:	af e4       	ldi	r26, 0x4F	; 79
    3508:	b0 e0       	ldi	r27, 0x00	; 0
    350a:	ef e4       	ldi	r30, 0x4F	; 79
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
    3510:	8e 7f       	andi	r24, 0xFE	; 254
    3512:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    3514:	af e4       	ldi	r26, 0x4F	; 79
    3516:	b0 e0       	ldi	r27, 0x00	; 0
    3518:	ef e4       	ldi	r30, 0x4F	; 79
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	80 81       	ld	r24, Z
    351e:	82 60       	ori	r24, 0x02	; 2
    3520:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    3522:	ae e4       	ldi	r26, 0x4E	; 78
    3524:	b0 e0       	ldi	r27, 0x00	; 0
    3526:	ee e4       	ldi	r30, 0x4E	; 78
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	80 81       	ld	r24, Z
    352c:	87 7f       	andi	r24, 0xF7	; 247
    352e:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    3530:	ae e4       	ldi	r26, 0x4E	; 78
    3532:	b0 e0       	ldi	r27, 0x00	; 0
    3534:	ee e4       	ldi	r30, 0x4E	; 78
    3536:	f0 e0       	ldi	r31, 0x00	; 0
    3538:	80 81       	ld	r24, Z
    353a:	8f 7e       	andi	r24, 0xEF	; 239
    353c:	8c 93       	st	X, r24
    353e:	5b c1       	rjmp	.+694    	; 0x37f6 <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_Correct_10bit:              SET_BIT(TCCR1A,WGM10);
    3540:	af e4       	ldi	r26, 0x4F	; 79
    3542:	b0 e0       	ldi	r27, 0x00	; 0
    3544:	ef e4       	ldi	r30, 0x4F	; 79
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	80 81       	ld	r24, Z
    354a:	81 60       	ori	r24, 0x01	; 1
    354c:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    354e:	af e4       	ldi	r26, 0x4F	; 79
    3550:	b0 e0       	ldi	r27, 0x00	; 0
    3552:	ef e4       	ldi	r30, 0x4F	; 79
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	80 81       	ld	r24, Z
    3558:	82 60       	ori	r24, 0x02	; 2
    355a:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    355c:	ae e4       	ldi	r26, 0x4E	; 78
    355e:	b0 e0       	ldi	r27, 0x00	; 0
    3560:	ee e4       	ldi	r30, 0x4E	; 78
    3562:	f0 e0       	ldi	r31, 0x00	; 0
    3564:	80 81       	ld	r24, Z
    3566:	87 7f       	andi	r24, 0xF7	; 247
    3568:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    356a:	ae e4       	ldi	r26, 0x4E	; 78
    356c:	b0 e0       	ldi	r27, 0x00	; 0
    356e:	ee e4       	ldi	r30, 0x4E	; 78
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	80 81       	ld	r24, Z
    3574:	8f 7e       	andi	r24, 0xEF	; 239
    3576:	8c 93       	st	X, r24
    3578:	3e c1       	rjmp	.+636    	; 0x37f6 <Timer1_Init+0x448>
	                                              break;
case timer1_CTC_mode_ocr_top:                     CLR_BIT(TCCR1A,WGM10);
    357a:	af e4       	ldi	r26, 0x4F	; 79
    357c:	b0 e0       	ldi	r27, 0x00	; 0
    357e:	ef e4       	ldi	r30, 0x4F	; 79
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	80 81       	ld	r24, Z
    3584:	8e 7f       	andi	r24, 0xFE	; 254
    3586:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    3588:	af e4       	ldi	r26, 0x4F	; 79
    358a:	b0 e0       	ldi	r27, 0x00	; 0
    358c:	ef e4       	ldi	r30, 0x4F	; 79
    358e:	f0 e0       	ldi	r31, 0x00	; 0
    3590:	80 81       	ld	r24, Z
    3592:	8d 7f       	andi	r24, 0xFD	; 253
    3594:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    3596:	ae e4       	ldi	r26, 0x4E	; 78
    3598:	b0 e0       	ldi	r27, 0x00	; 0
    359a:	ee e4       	ldi	r30, 0x4E	; 78
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	80 81       	ld	r24, Z
    35a0:	88 60       	ori	r24, 0x08	; 8
    35a2:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    35a4:	ae e4       	ldi	r26, 0x4E	; 78
    35a6:	b0 e0       	ldi	r27, 0x00	; 0
    35a8:	ee e4       	ldi	r30, 0x4E	; 78
    35aa:	f0 e0       	ldi	r31, 0x00	; 0
    35ac:	80 81       	ld	r24, Z
    35ae:	8f 7e       	andi	r24, 0xEF	; 239
    35b0:	8c 93       	st	X, r24
    35b2:	21 c1       	rjmp	.+578    	; 0x37f6 <Timer1_Init+0x448>
	                                              break;
case timer1_Fast_PWM_8_bit:                       SET_BIT(TCCR1A,WGM10);
    35b4:	af e4       	ldi	r26, 0x4F	; 79
    35b6:	b0 e0       	ldi	r27, 0x00	; 0
    35b8:	ef e4       	ldi	r30, 0x4F	; 79
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	80 81       	ld	r24, Z
    35be:	81 60       	ori	r24, 0x01	; 1
    35c0:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    35c2:	af e4       	ldi	r26, 0x4F	; 79
    35c4:	b0 e0       	ldi	r27, 0x00	; 0
    35c6:	ef e4       	ldi	r30, 0x4F	; 79
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	8d 7f       	andi	r24, 0xFD	; 253
    35ce:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    35d0:	ae e4       	ldi	r26, 0x4E	; 78
    35d2:	b0 e0       	ldi	r27, 0x00	; 0
    35d4:	ee e4       	ldi	r30, 0x4E	; 78
    35d6:	f0 e0       	ldi	r31, 0x00	; 0
    35d8:	80 81       	ld	r24, Z
    35da:	88 60       	ori	r24, 0x08	; 8
    35dc:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    35de:	ae e4       	ldi	r26, 0x4E	; 78
    35e0:	b0 e0       	ldi	r27, 0x00	; 0
    35e2:	ee e4       	ldi	r30, 0x4E	; 78
    35e4:	f0 e0       	ldi	r31, 0x00	; 0
    35e6:	80 81       	ld	r24, Z
    35e8:	8f 7e       	andi	r24, 0xEF	; 239
    35ea:	8c 93       	st	X, r24
    35ec:	04 c1       	rjmp	.+520    	; 0x37f6 <Timer1_Init+0x448>
	                                              break;
case timer1_Fast_PWM_9_bit:                       CLR_BIT(TCCR1A,WGM10);
    35ee:	af e4       	ldi	r26, 0x4F	; 79
    35f0:	b0 e0       	ldi	r27, 0x00	; 0
    35f2:	ef e4       	ldi	r30, 0x4F	; 79
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	80 81       	ld	r24, Z
    35f8:	8e 7f       	andi	r24, 0xFE	; 254
    35fa:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    35fc:	af e4       	ldi	r26, 0x4F	; 79
    35fe:	b0 e0       	ldi	r27, 0x00	; 0
    3600:	ef e4       	ldi	r30, 0x4F	; 79
    3602:	f0 e0       	ldi	r31, 0x00	; 0
    3604:	80 81       	ld	r24, Z
    3606:	82 60       	ori	r24, 0x02	; 2
    3608:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    360a:	ae e4       	ldi	r26, 0x4E	; 78
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	ee e4       	ldi	r30, 0x4E	; 78
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	80 81       	ld	r24, Z
    3614:	88 60       	ori	r24, 0x08	; 8
    3616:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    3618:	ae e4       	ldi	r26, 0x4E	; 78
    361a:	b0 e0       	ldi	r27, 0x00	; 0
    361c:	ee e4       	ldi	r30, 0x4E	; 78
    361e:	f0 e0       	ldi	r31, 0x00	; 0
    3620:	80 81       	ld	r24, Z
    3622:	8f 7e       	andi	r24, 0xEF	; 239
    3624:	8c 93       	st	X, r24
    3626:	e7 c0       	rjmp	.+462    	; 0x37f6 <Timer1_Init+0x448>
	                                              break;
case timer1_Fast_PWM_10_bit:                      SET_BIT(TCCR1A,WGM10);
    3628:	af e4       	ldi	r26, 0x4F	; 79
    362a:	b0 e0       	ldi	r27, 0x00	; 0
    362c:	ef e4       	ldi	r30, 0x4F	; 79
    362e:	f0 e0       	ldi	r31, 0x00	; 0
    3630:	80 81       	ld	r24, Z
    3632:	81 60       	ori	r24, 0x01	; 1
    3634:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    3636:	af e4       	ldi	r26, 0x4F	; 79
    3638:	b0 e0       	ldi	r27, 0x00	; 0
    363a:	ef e4       	ldi	r30, 0x4F	; 79
    363c:	f0 e0       	ldi	r31, 0x00	; 0
    363e:	80 81       	ld	r24, Z
    3640:	82 60       	ori	r24, 0x02	; 2
    3642:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    3644:	ae e4       	ldi	r26, 0x4E	; 78
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	ee e4       	ldi	r30, 0x4E	; 78
    364a:	f0 e0       	ldi	r31, 0x00	; 0
    364c:	80 81       	ld	r24, Z
    364e:	88 60       	ori	r24, 0x08	; 8
    3650:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    3652:	ae e4       	ldi	r26, 0x4E	; 78
    3654:	b0 e0       	ldi	r27, 0x00	; 0
    3656:	ee e4       	ldi	r30, 0x4E	; 78
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	80 81       	ld	r24, Z
    365c:	8f 7e       	andi	r24, 0xEF	; 239
    365e:	8c 93       	st	X, r24
    3660:	ca c0       	rjmp	.+404    	; 0x37f6 <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_and_Freq_Correct_icr_top:   CLR_BIT(TCCR1A,WGM10);
    3662:	af e4       	ldi	r26, 0x4F	; 79
    3664:	b0 e0       	ldi	r27, 0x00	; 0
    3666:	ef e4       	ldi	r30, 0x4F	; 79
    3668:	f0 e0       	ldi	r31, 0x00	; 0
    366a:	80 81       	ld	r24, Z
    366c:	8e 7f       	andi	r24, 0xFE	; 254
    366e:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    3670:	af e4       	ldi	r26, 0x4F	; 79
    3672:	b0 e0       	ldi	r27, 0x00	; 0
    3674:	ef e4       	ldi	r30, 0x4F	; 79
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	80 81       	ld	r24, Z
    367a:	8d 7f       	andi	r24, 0xFD	; 253
    367c:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    367e:	ae e4       	ldi	r26, 0x4E	; 78
    3680:	b0 e0       	ldi	r27, 0x00	; 0
    3682:	ee e4       	ldi	r30, 0x4E	; 78
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	80 81       	ld	r24, Z
    3688:	87 7f       	andi	r24, 0xF7	; 247
    368a:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    368c:	ae e4       	ldi	r26, 0x4E	; 78
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	ee e4       	ldi	r30, 0x4E	; 78
    3692:	f0 e0       	ldi	r31, 0x00	; 0
    3694:	80 81       	ld	r24, Z
    3696:	80 61       	ori	r24, 0x10	; 16
    3698:	8c 93       	st	X, r24
    369a:	ad c0       	rjmp	.+346    	; 0x37f6 <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_and_Freq_Correct_ocr_top:   SET_BIT(TCCR1A,WGM10);
    369c:	af e4       	ldi	r26, 0x4F	; 79
    369e:	b0 e0       	ldi	r27, 0x00	; 0
    36a0:	ef e4       	ldi	r30, 0x4F	; 79
    36a2:	f0 e0       	ldi	r31, 0x00	; 0
    36a4:	80 81       	ld	r24, Z
    36a6:	81 60       	ori	r24, 0x01	; 1
    36a8:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    36aa:	af e4       	ldi	r26, 0x4F	; 79
    36ac:	b0 e0       	ldi	r27, 0x00	; 0
    36ae:	ef e4       	ldi	r30, 0x4F	; 79
    36b0:	f0 e0       	ldi	r31, 0x00	; 0
    36b2:	80 81       	ld	r24, Z
    36b4:	8d 7f       	andi	r24, 0xFD	; 253
    36b6:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    36b8:	ae e4       	ldi	r26, 0x4E	; 78
    36ba:	b0 e0       	ldi	r27, 0x00	; 0
    36bc:	ee e4       	ldi	r30, 0x4E	; 78
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	80 81       	ld	r24, Z
    36c2:	87 7f       	andi	r24, 0xF7	; 247
    36c4:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    36c6:	ae e4       	ldi	r26, 0x4E	; 78
    36c8:	b0 e0       	ldi	r27, 0x00	; 0
    36ca:	ee e4       	ldi	r30, 0x4E	; 78
    36cc:	f0 e0       	ldi	r31, 0x00	; 0
    36ce:	80 81       	ld	r24, Z
    36d0:	80 61       	ori	r24, 0x10	; 16
    36d2:	8c 93       	st	X, r24
    36d4:	90 c0       	rjmp	.+288    	; 0x37f6 <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_Correct_icr_top:            CLR_BIT(TCCR1A,WGM10);
    36d6:	af e4       	ldi	r26, 0x4F	; 79
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	ef e4       	ldi	r30, 0x4F	; 79
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	80 81       	ld	r24, Z
    36e0:	8e 7f       	andi	r24, 0xFE	; 254
    36e2:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    36e4:	af e4       	ldi	r26, 0x4F	; 79
    36e6:	b0 e0       	ldi	r27, 0x00	; 0
    36e8:	ef e4       	ldi	r30, 0x4F	; 79
    36ea:	f0 e0       	ldi	r31, 0x00	; 0
    36ec:	80 81       	ld	r24, Z
    36ee:	82 60       	ori	r24, 0x02	; 2
    36f0:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    36f2:	ae e4       	ldi	r26, 0x4E	; 78
    36f4:	b0 e0       	ldi	r27, 0x00	; 0
    36f6:	ee e4       	ldi	r30, 0x4E	; 78
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	80 81       	ld	r24, Z
    36fc:	87 7f       	andi	r24, 0xF7	; 247
    36fe:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    3700:	ae e4       	ldi	r26, 0x4E	; 78
    3702:	b0 e0       	ldi	r27, 0x00	; 0
    3704:	ee e4       	ldi	r30, 0x4E	; 78
    3706:	f0 e0       	ldi	r31, 0x00	; 0
    3708:	80 81       	ld	r24, Z
    370a:	80 61       	ori	r24, 0x10	; 16
    370c:	8c 93       	st	X, r24
    370e:	73 c0       	rjmp	.+230    	; 0x37f6 <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_Correct_ocr_top:            SET_BIT(TCCR1A,WGM10);
    3710:	af e4       	ldi	r26, 0x4F	; 79
    3712:	b0 e0       	ldi	r27, 0x00	; 0
    3714:	ef e4       	ldi	r30, 0x4F	; 79
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	80 81       	ld	r24, Z
    371a:	81 60       	ori	r24, 0x01	; 1
    371c:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    371e:	af e4       	ldi	r26, 0x4F	; 79
    3720:	b0 e0       	ldi	r27, 0x00	; 0
    3722:	ef e4       	ldi	r30, 0x4F	; 79
    3724:	f0 e0       	ldi	r31, 0x00	; 0
    3726:	80 81       	ld	r24, Z
    3728:	82 60       	ori	r24, 0x02	; 2
    372a:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    372c:	ae e4       	ldi	r26, 0x4E	; 78
    372e:	b0 e0       	ldi	r27, 0x00	; 0
    3730:	ee e4       	ldi	r30, 0x4E	; 78
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	80 81       	ld	r24, Z
    3736:	87 7f       	andi	r24, 0xF7	; 247
    3738:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    373a:	ae e4       	ldi	r26, 0x4E	; 78
    373c:	b0 e0       	ldi	r27, 0x00	; 0
    373e:	ee e4       	ldi	r30, 0x4E	; 78
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	80 81       	ld	r24, Z
    3744:	80 61       	ori	r24, 0x10	; 16
    3746:	8c 93       	st	X, r24
    3748:	56 c0       	rjmp	.+172    	; 0x37f6 <Timer1_Init+0x448>
	                                              break;
case timer1_CTC_mode_icr_top:                     CLR_BIT(TCCR1A,WGM10);
    374a:	af e4       	ldi	r26, 0x4F	; 79
    374c:	b0 e0       	ldi	r27, 0x00	; 0
    374e:	ef e4       	ldi	r30, 0x4F	; 79
    3750:	f0 e0       	ldi	r31, 0x00	; 0
    3752:	80 81       	ld	r24, Z
    3754:	8e 7f       	andi	r24, 0xFE	; 254
    3756:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    3758:	af e4       	ldi	r26, 0x4F	; 79
    375a:	b0 e0       	ldi	r27, 0x00	; 0
    375c:	ef e4       	ldi	r30, 0x4F	; 79
    375e:	f0 e0       	ldi	r31, 0x00	; 0
    3760:	80 81       	ld	r24, Z
    3762:	8d 7f       	andi	r24, 0xFD	; 253
    3764:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    3766:	ae e4       	ldi	r26, 0x4E	; 78
    3768:	b0 e0       	ldi	r27, 0x00	; 0
    376a:	ee e4       	ldi	r30, 0x4E	; 78
    376c:	f0 e0       	ldi	r31, 0x00	; 0
    376e:	80 81       	ld	r24, Z
    3770:	88 60       	ori	r24, 0x08	; 8
    3772:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    3774:	ae e4       	ldi	r26, 0x4E	; 78
    3776:	b0 e0       	ldi	r27, 0x00	; 0
    3778:	ee e4       	ldi	r30, 0x4E	; 78
    377a:	f0 e0       	ldi	r31, 0x00	; 0
    377c:	80 81       	ld	r24, Z
    377e:	80 61       	ori	r24, 0x10	; 16
    3780:	8c 93       	st	X, r24
    3782:	39 c0       	rjmp	.+114    	; 0x37f6 <Timer1_Init+0x448>
	                                              break;
case timer1_Fast_PWM_icr_top:                     CLR_BIT(TCCR1A,WGM10);
    3784:	af e4       	ldi	r26, 0x4F	; 79
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	ef e4       	ldi	r30, 0x4F	; 79
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 81       	ld	r24, Z
    378e:	8e 7f       	andi	r24, 0xFE	; 254
    3790:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    3792:	af e4       	ldi	r26, 0x4F	; 79
    3794:	b0 e0       	ldi	r27, 0x00	; 0
    3796:	ef e4       	ldi	r30, 0x4F	; 79
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	80 81       	ld	r24, Z
    379c:	82 60       	ori	r24, 0x02	; 2
    379e:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    37a0:	ae e4       	ldi	r26, 0x4E	; 78
    37a2:	b0 e0       	ldi	r27, 0x00	; 0
    37a4:	ee e4       	ldi	r30, 0x4E	; 78
    37a6:	f0 e0       	ldi	r31, 0x00	; 0
    37a8:	80 81       	ld	r24, Z
    37aa:	88 60       	ori	r24, 0x08	; 8
    37ac:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    37ae:	ae e4       	ldi	r26, 0x4E	; 78
    37b0:	b0 e0       	ldi	r27, 0x00	; 0
    37b2:	ee e4       	ldi	r30, 0x4E	; 78
    37b4:	f0 e0       	ldi	r31, 0x00	; 0
    37b6:	80 81       	ld	r24, Z
    37b8:	80 61       	ori	r24, 0x10	; 16
    37ba:	8c 93       	st	X, r24
    37bc:	1c c0       	rjmp	.+56     	; 0x37f6 <Timer1_Init+0x448>
	                                              break;
case timer1_Fast_PWM_ocr_top:                     SET_BIT(TCCR1A,WGM10);
    37be:	af e4       	ldi	r26, 0x4F	; 79
    37c0:	b0 e0       	ldi	r27, 0x00	; 0
    37c2:	ef e4       	ldi	r30, 0x4F	; 79
    37c4:	f0 e0       	ldi	r31, 0x00	; 0
    37c6:	80 81       	ld	r24, Z
    37c8:	81 60       	ori	r24, 0x01	; 1
    37ca:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    37cc:	af e4       	ldi	r26, 0x4F	; 79
    37ce:	b0 e0       	ldi	r27, 0x00	; 0
    37d0:	ef e4       	ldi	r30, 0x4F	; 79
    37d2:	f0 e0       	ldi	r31, 0x00	; 0
    37d4:	80 81       	ld	r24, Z
    37d6:	82 60       	ori	r24, 0x02	; 2
    37d8:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    37da:	ae e4       	ldi	r26, 0x4E	; 78
    37dc:	b0 e0       	ldi	r27, 0x00	; 0
    37de:	ee e4       	ldi	r30, 0x4E	; 78
    37e0:	f0 e0       	ldi	r31, 0x00	; 0
    37e2:	80 81       	ld	r24, Z
    37e4:	88 60       	ori	r24, 0x08	; 8
    37e6:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    37e8:	ae e4       	ldi	r26, 0x4E	; 78
    37ea:	b0 e0       	ldi	r27, 0x00	; 0
    37ec:	ee e4       	ldi	r30, 0x4E	; 78
    37ee:	f0 e0       	ldi	r31, 0x00	; 0
    37f0:	80 81       	ld	r24, Z
    37f2:	80 61       	ori	r24, 0x10	; 16
    37f4:	8c 93       	st	X, r24
	                                              break;
}


#if  oc_1==normal_1
switch (oc1_mode)
    37f6:	8b 81       	ldd	r24, Y+3	; 0x03
    37f8:	28 2f       	mov	r18, r24
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	3c 87       	std	Y+12, r19	; 0x0c
    37fe:	2b 87       	std	Y+11, r18	; 0x0b
    3800:	8b 85       	ldd	r24, Y+11	; 0x0b
    3802:	9c 85       	ldd	r25, Y+12	; 0x0c
    3804:	81 30       	cpi	r24, 0x01	; 1
    3806:	91 05       	cpc	r25, r1
    3808:	09 f4       	brne	.+2      	; 0x380c <Timer1_Init+0x45e>
    380a:	42 c0       	rjmp	.+132    	; 0x3890 <Timer1_Init+0x4e2>
    380c:	2b 85       	ldd	r18, Y+11	; 0x0b
    380e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3810:	22 30       	cpi	r18, 0x02	; 2
    3812:	31 05       	cpc	r19, r1
    3814:	2c f4       	brge	.+10     	; 0x3820 <Timer1_Init+0x472>
    3816:	8b 85       	ldd	r24, Y+11	; 0x0b
    3818:	9c 85       	ldd	r25, Y+12	; 0x0c
    381a:	00 97       	sbiw	r24, 0x00	; 0
    381c:	71 f0       	breq	.+28     	; 0x383a <Timer1_Init+0x48c>
    381e:	0e c1       	rjmp	.+540    	; 0x3a3c <Timer1_Init+0x68e>
    3820:	2b 85       	ldd	r18, Y+11	; 0x0b
    3822:	3c 85       	ldd	r19, Y+12	; 0x0c
    3824:	22 30       	cpi	r18, 0x02	; 2
    3826:	31 05       	cpc	r19, r1
    3828:	09 f4       	brne	.+2      	; 0x382c <Timer1_Init+0x47e>
    382a:	7a c0       	rjmp	.+244    	; 0x3920 <Timer1_Init+0x572>
    382c:	8b 85       	ldd	r24, Y+11	; 0x0b
    382e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3830:	83 30       	cpi	r24, 0x03	; 3
    3832:	91 05       	cpc	r25, r1
    3834:	09 f4       	brne	.+2      	; 0x3838 <Timer1_Init+0x48a>
    3836:	bc c0       	rjmp	.+376    	; 0x39b0 <Timer1_Init+0x602>
    3838:	01 c1       	rjmp	.+514    	; 0x3a3c <Timer1_Init+0x68e>
{
case disconnected_1:
						CLR_BIT(TCCR1A,COM1A0);
    383a:	af e4       	ldi	r26, 0x4F	; 79
    383c:	b0 e0       	ldi	r27, 0x00	; 0
    383e:	ef e4       	ldi	r30, 0x4F	; 79
    3840:	f0 e0       	ldi	r31, 0x00	; 0
    3842:	80 81       	ld	r24, Z
    3844:	8f 7b       	andi	r24, 0xBF	; 191
    3846:	8c 93       	st	X, r24
						CLR_BIT(TCCR1A,COM1A1);
    3848:	af e4       	ldi	r26, 0x4F	; 79
    384a:	b0 e0       	ldi	r27, 0x00	; 0
    384c:	ef e4       	ldi	r30, 0x4F	; 79
    384e:	f0 e0       	ldi	r31, 0x00	; 0
    3850:	80 81       	ld	r24, Z
    3852:	8f 77       	andi	r24, 0x7F	; 127
    3854:	8c 93       	st	X, r24

						CLR_BIT(TCCR1A,COM1B0);
    3856:	af e4       	ldi	r26, 0x4F	; 79
    3858:	b0 e0       	ldi	r27, 0x00	; 0
    385a:	ef e4       	ldi	r30, 0x4F	; 79
    385c:	f0 e0       	ldi	r31, 0x00	; 0
    385e:	80 81       	ld	r24, Z
    3860:	8f 7e       	andi	r24, 0xEF	; 239
    3862:	8c 93       	st	X, r24
						CLR_BIT(TCCR1A,COM1B1);
    3864:	af e4       	ldi	r26, 0x4F	; 79
    3866:	b0 e0       	ldi	r27, 0x00	; 0
    3868:	ef e4       	ldi	r30, 0x4F	; 79
    386a:	f0 e0       	ldi	r31, 0x00	; 0
    386c:	80 81       	ld	r24, Z
    386e:	8f 7d       	andi	r24, 0xDF	; 223
    3870:	8c 93       	st	X, r24

						CLR_BIT(TCCR1A,COM1C0);
    3872:	af e4       	ldi	r26, 0x4F	; 79
    3874:	b0 e0       	ldi	r27, 0x00	; 0
    3876:	ef e4       	ldi	r30, 0x4F	; 79
    3878:	f0 e0       	ldi	r31, 0x00	; 0
    387a:	80 81       	ld	r24, Z
    387c:	8b 7f       	andi	r24, 0xFB	; 251
    387e:	8c 93       	st	X, r24
						CLR_BIT(TCCR1A,COM1C1);
    3880:	af e4       	ldi	r26, 0x4F	; 79
    3882:	b0 e0       	ldi	r27, 0x00	; 0
    3884:	ef e4       	ldi	r30, 0x4F	; 79
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	80 81       	ld	r24, Z
    388a:	87 7f       	andi	r24, 0xF7	; 247
    388c:	8c 93       	st	X, r24
    388e:	d6 c0       	rjmp	.+428    	; 0x3a3c <Timer1_Init+0x68e>
						break;
case Toggle_1:switch(channel_t)
    3890:	8c 81       	ldd	r24, Y+4	; 0x04
    3892:	28 2f       	mov	r18, r24
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	3a 87       	std	Y+10, r19	; 0x0a
    3898:	29 87       	std	Y+9, r18	; 0x09
    389a:	89 85       	ldd	r24, Y+9	; 0x09
    389c:	9a 85       	ldd	r25, Y+10	; 0x0a
    389e:	81 30       	cpi	r24, 0x01	; 1
    38a0:	91 05       	cpc	r25, r1
    38a2:	89 f0       	breq	.+34     	; 0x38c6 <Timer1_Init+0x518>
    38a4:	29 85       	ldd	r18, Y+9	; 0x09
    38a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    38a8:	22 30       	cpi	r18, 0x02	; 2
    38aa:	31 05       	cpc	r19, r1
    38ac:	0c f4       	brge	.+2      	; 0x38b0 <Timer1_Init+0x502>
    38ae:	c6 c0       	rjmp	.+396    	; 0x3a3c <Timer1_Init+0x68e>
    38b0:	89 85       	ldd	r24, Y+9	; 0x09
    38b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38b4:	82 30       	cpi	r24, 0x02	; 2
    38b6:	91 05       	cpc	r25, r1
    38b8:	a9 f0       	breq	.+42     	; 0x38e4 <Timer1_Init+0x536>
    38ba:	29 85       	ldd	r18, Y+9	; 0x09
    38bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    38be:	23 30       	cpi	r18, 0x03	; 3
    38c0:	31 05       	cpc	r19, r1
    38c2:	f9 f0       	breq	.+62     	; 0x3902 <Timer1_Init+0x554>
    38c4:	bb c0       	rjmp	.+374    	; 0x3a3c <Timer1_Init+0x68e>
                  {
                      case disconnected_channel:break;
                      case A_Channel:SET_BIT(TCCR1A,COM1A0);
    38c6:	af e4       	ldi	r26, 0x4F	; 79
    38c8:	b0 e0       	ldi	r27, 0x00	; 0
    38ca:	ef e4       	ldi	r30, 0x4F	; 79
    38cc:	f0 e0       	ldi	r31, 0x00	; 0
    38ce:	80 81       	ld	r24, Z
    38d0:	80 64       	ori	r24, 0x40	; 64
    38d2:	8c 93       	st	X, r24
						             CLR_BIT(TCCR1A,COM1A1);
    38d4:	af e4       	ldi	r26, 0x4F	; 79
    38d6:	b0 e0       	ldi	r27, 0x00	; 0
    38d8:	ef e4       	ldi	r30, 0x4F	; 79
    38da:	f0 e0       	ldi	r31, 0x00	; 0
    38dc:	80 81       	ld	r24, Z
    38de:	8f 77       	andi	r24, 0x7F	; 127
    38e0:	8c 93       	st	X, r24
    38e2:	ac c0       	rjmp	.+344    	; 0x3a3c <Timer1_Init+0x68e>
						             break;
                      case B_Channel:SET_BIT(TCCR1A,COM1B0);
    38e4:	af e4       	ldi	r26, 0x4F	; 79
    38e6:	b0 e0       	ldi	r27, 0x00	; 0
    38e8:	ef e4       	ldi	r30, 0x4F	; 79
    38ea:	f0 e0       	ldi	r31, 0x00	; 0
    38ec:	80 81       	ld	r24, Z
    38ee:	80 61       	ori	r24, 0x10	; 16
    38f0:	8c 93       	st	X, r24
                      				 CLR_BIT(TCCR1A,COM1B1);
    38f2:	af e4       	ldi	r26, 0x4F	; 79
    38f4:	b0 e0       	ldi	r27, 0x00	; 0
    38f6:	ef e4       	ldi	r30, 0x4F	; 79
    38f8:	f0 e0       	ldi	r31, 0x00	; 0
    38fa:	80 81       	ld	r24, Z
    38fc:	8f 7d       	andi	r24, 0xDF	; 223
    38fe:	8c 93       	st	X, r24
    3900:	9d c0       	rjmp	.+314    	; 0x3a3c <Timer1_Init+0x68e>
                      		         break;
                      case C_Channel:SET_BIT(TCCR1A,COM1C0);
    3902:	af e4       	ldi	r26, 0x4F	; 79
    3904:	b0 e0       	ldi	r27, 0x00	; 0
    3906:	ef e4       	ldi	r30, 0x4F	; 79
    3908:	f0 e0       	ldi	r31, 0x00	; 0
    390a:	80 81       	ld	r24, Z
    390c:	84 60       	ori	r24, 0x04	; 4
    390e:	8c 93       	st	X, r24
                      			     CLR_BIT(TCCR1A,COM1C1);
    3910:	af e4       	ldi	r26, 0x4F	; 79
    3912:	b0 e0       	ldi	r27, 0x00	; 0
    3914:	ef e4       	ldi	r30, 0x4F	; 79
    3916:	f0 e0       	ldi	r31, 0x00	; 0
    3918:	80 81       	ld	r24, Z
    391a:	87 7f       	andi	r24, 0xF7	; 247
    391c:	8c 93       	st	X, r24
    391e:	8e c0       	rjmp	.+284    	; 0x3a3c <Timer1_Init+0x68e>
                      				 break;
                    }
						break;
case Non_inverting_1:switch(channel_t)
    3920:	8c 81       	ldd	r24, Y+4	; 0x04
    3922:	28 2f       	mov	r18, r24
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	38 87       	std	Y+8, r19	; 0x08
    3928:	2f 83       	std	Y+7, r18	; 0x07
    392a:	8f 81       	ldd	r24, Y+7	; 0x07
    392c:	98 85       	ldd	r25, Y+8	; 0x08
    392e:	81 30       	cpi	r24, 0x01	; 1
    3930:	91 05       	cpc	r25, r1
    3932:	89 f0       	breq	.+34     	; 0x3956 <Timer1_Init+0x5a8>
    3934:	2f 81       	ldd	r18, Y+7	; 0x07
    3936:	38 85       	ldd	r19, Y+8	; 0x08
    3938:	22 30       	cpi	r18, 0x02	; 2
    393a:	31 05       	cpc	r19, r1
    393c:	0c f4       	brge	.+2      	; 0x3940 <Timer1_Init+0x592>
    393e:	7e c0       	rjmp	.+252    	; 0x3a3c <Timer1_Init+0x68e>
    3940:	8f 81       	ldd	r24, Y+7	; 0x07
    3942:	98 85       	ldd	r25, Y+8	; 0x08
    3944:	82 30       	cpi	r24, 0x02	; 2
    3946:	91 05       	cpc	r25, r1
    3948:	a9 f0       	breq	.+42     	; 0x3974 <Timer1_Init+0x5c6>
    394a:	2f 81       	ldd	r18, Y+7	; 0x07
    394c:	38 85       	ldd	r19, Y+8	; 0x08
    394e:	23 30       	cpi	r18, 0x03	; 3
    3950:	31 05       	cpc	r19, r1
    3952:	f9 f0       	breq	.+62     	; 0x3992 <Timer1_Init+0x5e4>
    3954:	73 c0       	rjmp	.+230    	; 0x3a3c <Timer1_Init+0x68e>
                        {
                          case disconnected_channel:break;
                          case A_Channel:CLR_BIT(TCCR1A,COM1A0);
    3956:	af e4       	ldi	r26, 0x4F	; 79
    3958:	b0 e0       	ldi	r27, 0x00	; 0
    395a:	ef e4       	ldi	r30, 0x4F	; 79
    395c:	f0 e0       	ldi	r31, 0x00	; 0
    395e:	80 81       	ld	r24, Z
    3960:	8f 7b       	andi	r24, 0xBF	; 191
    3962:	8c 93       	st	X, r24
						                 SET_BIT(TCCR1A,COM1A1);
    3964:	af e4       	ldi	r26, 0x4F	; 79
    3966:	b0 e0       	ldi	r27, 0x00	; 0
    3968:	ef e4       	ldi	r30, 0x4F	; 79
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	80 81       	ld	r24, Z
    396e:	80 68       	ori	r24, 0x80	; 128
    3970:	8c 93       	st	X, r24
    3972:	64 c0       	rjmp	.+200    	; 0x3a3c <Timer1_Init+0x68e>
						                 break;
                          case B_Channel:CLR_BIT(TCCR1A,COM1B0);
    3974:	af e4       	ldi	r26, 0x4F	; 79
    3976:	b0 e0       	ldi	r27, 0x00	; 0
    3978:	ef e4       	ldi	r30, 0x4F	; 79
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	80 81       	ld	r24, Z
    397e:	8f 7e       	andi	r24, 0xEF	; 239
    3980:	8c 93       	st	X, r24
                          				 SET_BIT(TCCR1A,COM1B1);
    3982:	af e4       	ldi	r26, 0x4F	; 79
    3984:	b0 e0       	ldi	r27, 0x00	; 0
    3986:	ef e4       	ldi	r30, 0x4F	; 79
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	80 81       	ld	r24, Z
    398c:	80 62       	ori	r24, 0x20	; 32
    398e:	8c 93       	st	X, r24
    3990:	55 c0       	rjmp	.+170    	; 0x3a3c <Timer1_Init+0x68e>
                          				 break;
                          case C_Channel:CLR_BIT(TCCR1A,COM1C0);
    3992:	af e4       	ldi	r26, 0x4F	; 79
    3994:	b0 e0       	ldi	r27, 0x00	; 0
    3996:	ef e4       	ldi	r30, 0x4F	; 79
    3998:	f0 e0       	ldi	r31, 0x00	; 0
    399a:	80 81       	ld	r24, Z
    399c:	8b 7f       	andi	r24, 0xFB	; 251
    399e:	8c 93       	st	X, r24
                          				 SET_BIT(TCCR1A,COM1C1);
    39a0:	af e4       	ldi	r26, 0x4F	; 79
    39a2:	b0 e0       	ldi	r27, 0x00	; 0
    39a4:	ef e4       	ldi	r30, 0x4F	; 79
    39a6:	f0 e0       	ldi	r31, 0x00	; 0
    39a8:	80 81       	ld	r24, Z
    39aa:	88 60       	ori	r24, 0x08	; 8
    39ac:	8c 93       	st	X, r24
    39ae:	46 c0       	rjmp	.+140    	; 0x3a3c <Timer1_Init+0x68e>
                          				 break;
                         }
						break;
case Inverting_1:switch(channel_t)
    39b0:	8c 81       	ldd	r24, Y+4	; 0x04
    39b2:	28 2f       	mov	r18, r24
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	3e 83       	std	Y+6, r19	; 0x06
    39b8:	2d 83       	std	Y+5, r18	; 0x05
    39ba:	8d 81       	ldd	r24, Y+5	; 0x05
    39bc:	9e 81       	ldd	r25, Y+6	; 0x06
    39be:	81 30       	cpi	r24, 0x01	; 1
    39c0:	91 05       	cpc	r25, r1
    39c2:	81 f0       	breq	.+32     	; 0x39e4 <Timer1_Init+0x636>
    39c4:	2d 81       	ldd	r18, Y+5	; 0x05
    39c6:	3e 81       	ldd	r19, Y+6	; 0x06
    39c8:	22 30       	cpi	r18, 0x02	; 2
    39ca:	31 05       	cpc	r19, r1
    39cc:	bc f1       	brlt	.+110    	; 0x3a3c <Timer1_Init+0x68e>
    39ce:	8d 81       	ldd	r24, Y+5	; 0x05
    39d0:	9e 81       	ldd	r25, Y+6	; 0x06
    39d2:	82 30       	cpi	r24, 0x02	; 2
    39d4:	91 05       	cpc	r25, r1
    39d6:	a9 f0       	breq	.+42     	; 0x3a02 <Timer1_Init+0x654>
    39d8:	2d 81       	ldd	r18, Y+5	; 0x05
    39da:	3e 81       	ldd	r19, Y+6	; 0x06
    39dc:	23 30       	cpi	r18, 0x03	; 3
    39de:	31 05       	cpc	r19, r1
    39e0:	f9 f0       	breq	.+62     	; 0x3a20 <Timer1_Init+0x672>
    39e2:	2c c0       	rjmp	.+88     	; 0x3a3c <Timer1_Init+0x68e>
                     {

                       case disconnected_channel:break;
                       case A_Channel:SET_BIT(TCCR1A,COM1A0);
    39e4:	af e4       	ldi	r26, 0x4F	; 79
    39e6:	b0 e0       	ldi	r27, 0x00	; 0
    39e8:	ef e4       	ldi	r30, 0x4F	; 79
    39ea:	f0 e0       	ldi	r31, 0x00	; 0
    39ec:	80 81       	ld	r24, Z
    39ee:	80 64       	ori	r24, 0x40	; 64
    39f0:	8c 93       	st	X, r24
                                      SET_BIT(TCCR1A,COM1A1);
    39f2:	af e4       	ldi	r26, 0x4F	; 79
    39f4:	b0 e0       	ldi	r27, 0x00	; 0
    39f6:	ef e4       	ldi	r30, 0x4F	; 79
    39f8:	f0 e0       	ldi	r31, 0x00	; 0
    39fa:	80 81       	ld	r24, Z
    39fc:	80 68       	ori	r24, 0x80	; 128
    39fe:	8c 93       	st	X, r24
    3a00:	1d c0       	rjmp	.+58     	; 0x3a3c <Timer1_Init+0x68e>
                                      break;
                       case B_Channel:SET_BIT(TCCR1A,COM1B0);
    3a02:	af e4       	ldi	r26, 0x4F	; 79
    3a04:	b0 e0       	ldi	r27, 0x00	; 0
    3a06:	ef e4       	ldi	r30, 0x4F	; 79
    3a08:	f0 e0       	ldi	r31, 0x00	; 0
    3a0a:	80 81       	ld	r24, Z
    3a0c:	80 61       	ori	r24, 0x10	; 16
    3a0e:	8c 93       	st	X, r24
  				                      SET_BIT(TCCR1A,COM1B1);
    3a10:	af e4       	ldi	r26, 0x4F	; 79
    3a12:	b0 e0       	ldi	r27, 0x00	; 0
    3a14:	ef e4       	ldi	r30, 0x4F	; 79
    3a16:	f0 e0       	ldi	r31, 0x00	; 0
    3a18:	80 81       	ld	r24, Z
    3a1a:	80 62       	ori	r24, 0x20	; 32
    3a1c:	8c 93       	st	X, r24
    3a1e:	0e c0       	rjmp	.+28     	; 0x3a3c <Timer1_Init+0x68e>
  			                       	  break;
                       case C_Channel:SET_BIT(TCCR1A,COM1C0);
    3a20:	af e4       	ldi	r26, 0x4F	; 79
    3a22:	b0 e0       	ldi	r27, 0x00	; 0
    3a24:	ef e4       	ldi	r30, 0x4F	; 79
    3a26:	f0 e0       	ldi	r31, 0x00	; 0
    3a28:	80 81       	ld	r24, Z
    3a2a:	84 60       	ori	r24, 0x04	; 4
    3a2c:	8c 93       	st	X, r24
  				                      SET_BIT(TCCR1A,COM1C1);
    3a2e:	af e4       	ldi	r26, 0x4F	; 79
    3a30:	b0 e0       	ldi	r27, 0x00	; 0
    3a32:	ef e4       	ldi	r30, 0x4F	; 79
    3a34:	f0 e0       	ldi	r31, 0x00	; 0
    3a36:	80 81       	ld	r24, Z
    3a38:	88 60       	ori	r24, 0x08	; 8
    3a3a:	8c 93       	st	X, r24
							break;

}

#endif
	TCCR1B&=0XF8;
    3a3c:	ae e4       	ldi	r26, 0x4E	; 78
    3a3e:	b0 e0       	ldi	r27, 0x00	; 0
    3a40:	ee e4       	ldi	r30, 0x4E	; 78
    3a42:	f0 e0       	ldi	r31, 0x00	; 0
    3a44:	80 81       	ld	r24, Z
    3a46:	88 7f       	andi	r24, 0xF8	; 248
    3a48:	8c 93       	st	X, r24
	TCCR1B|=scaler;
    3a4a:	ae e4       	ldi	r26, 0x4E	; 78
    3a4c:	b0 e0       	ldi	r27, 0x00	; 0
    3a4e:	ee e4       	ldi	r30, 0x4E	; 78
    3a50:	f0 e0       	ldi	r31, 0x00	; 0
    3a52:	90 81       	ld	r25, Z
    3a54:	8a 81       	ldd	r24, Y+2	; 0x02
    3a56:	89 2b       	or	r24, r25
    3a58:	8c 93       	st	X, r24

}
    3a5a:	2e 96       	adiw	r28, 0x0e	; 14
    3a5c:	0f b6       	in	r0, 0x3f	; 63
    3a5e:	f8 94       	cli
    3a60:	de bf       	out	0x3e, r29	; 62
    3a62:	0f be       	out	0x3f, r0	; 63
    3a64:	cd bf       	out	0x3d, r28	; 61
    3a66:	cf 91       	pop	r28
    3a68:	df 91       	pop	r29
    3a6a:	08 95       	ret

00003a6c <Timer1_InputCaptureEdge>:

void Timer1_InputCaptureEdge(Edge_type edge)
{
    3a6c:	df 93       	push	r29
    3a6e:	cf 93       	push	r28
    3a70:	0f 92       	push	r0
    3a72:	cd b7       	in	r28, 0x3d	; 61
    3a74:	de b7       	in	r29, 0x3e	; 62
    3a76:	89 83       	std	Y+1, r24	; 0x01
	if(edge==Rising)
    3a78:	89 81       	ldd	r24, Y+1	; 0x01
    3a7a:	81 30       	cpi	r24, 0x01	; 1
    3a7c:	41 f4       	brne	.+16     	; 0x3a8e <Timer1_InputCaptureEdge+0x22>
		SET_BIT(TCCR1B,ICES1);
    3a7e:	ae e4       	ldi	r26, 0x4E	; 78
    3a80:	b0 e0       	ldi	r27, 0x00	; 0
    3a82:	ee e4       	ldi	r30, 0x4E	; 78
    3a84:	f0 e0       	ldi	r31, 0x00	; 0
    3a86:	80 81       	ld	r24, Z
    3a88:	80 64       	ori	r24, 0x40	; 64
    3a8a:	8c 93       	st	X, r24
    3a8c:	0a c0       	rjmp	.+20     	; 0x3aa2 <Timer1_InputCaptureEdge+0x36>


	else if(edge==Falling)
    3a8e:	89 81       	ldd	r24, Y+1	; 0x01
    3a90:	88 23       	and	r24, r24
    3a92:	39 f4       	brne	.+14     	; 0x3aa2 <Timer1_InputCaptureEdge+0x36>
		CLR_BIT(TCCR1B,ICES1);
    3a94:	ae e4       	ldi	r26, 0x4E	; 78
    3a96:	b0 e0       	ldi	r27, 0x00	; 0
    3a98:	ee e4       	ldi	r30, 0x4E	; 78
    3a9a:	f0 e0       	ldi	r31, 0x00	; 0
    3a9c:	80 81       	ld	r24, Z
    3a9e:	8f 7b       	andi	r24, 0xBF	; 191
    3aa0:	8c 93       	st	X, r24

}
    3aa2:	0f 90       	pop	r0
    3aa4:	cf 91       	pop	r28
    3aa6:	df 91       	pop	r29
    3aa8:	08 95       	ret

00003aaa <Timer1_ICU_InterruptEnable>:

void Timer1_ICU_InterruptEnable(void)
{
    3aaa:	df 93       	push	r29
    3aac:	cf 93       	push	r28
    3aae:	cd b7       	in	r28, 0x3d	; 61
    3ab0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    3ab2:	a7 e5       	ldi	r26, 0x57	; 87
    3ab4:	b0 e0       	ldi	r27, 0x00	; 0
    3ab6:	e7 e5       	ldi	r30, 0x57	; 87
    3ab8:	f0 e0       	ldi	r31, 0x00	; 0
    3aba:	80 81       	ld	r24, Z
    3abc:	80 62       	ori	r24, 0x20	; 32
    3abe:	8c 93       	st	X, r24
}
    3ac0:	cf 91       	pop	r28
    3ac2:	df 91       	pop	r29
    3ac4:	08 95       	ret

00003ac6 <Timer1_ICU_InterruptDisable>:
void Timer1_ICU_InterruptDisable(void)
{
    3ac6:	df 93       	push	r29
    3ac8:	cf 93       	push	r28
    3aca:	cd b7       	in	r28, 0x3d	; 61
    3acc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TICIE1);
    3ace:	a7 e5       	ldi	r26, 0x57	; 87
    3ad0:	b0 e0       	ldi	r27, 0x00	; 0
    3ad2:	e7 e5       	ldi	r30, 0x57	; 87
    3ad4:	f0 e0       	ldi	r31, 0x00	; 0
    3ad6:	80 81       	ld	r24, Z
    3ad8:	8f 7d       	andi	r24, 0xDF	; 223
    3ada:	8c 93       	st	X, r24
}
    3adc:	cf 91       	pop	r28
    3ade:	df 91       	pop	r29
    3ae0:	08 95       	ret

00003ae2 <Timer1_OV_InterruptEnable>:
void Timer1_OV_InterruptEnable(void)
{
    3ae2:	df 93       	push	r29
    3ae4:	cf 93       	push	r28
    3ae6:	cd b7       	in	r28, 0x3d	; 61
    3ae8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE1);
    3aea:	a7 e5       	ldi	r26, 0x57	; 87
    3aec:	b0 e0       	ldi	r27, 0x00	; 0
    3aee:	e7 e5       	ldi	r30, 0x57	; 87
    3af0:	f0 e0       	ldi	r31, 0x00	; 0
    3af2:	80 81       	ld	r24, Z
    3af4:	84 60       	ori	r24, 0x04	; 4
    3af6:	8c 93       	st	X, r24
}
    3af8:	cf 91       	pop	r28
    3afa:	df 91       	pop	r29
    3afc:	08 95       	ret

00003afe <Timer1_OV_InterruptDisable>:
void Timer1_OV_InterruptDisable(void)
{
    3afe:	df 93       	push	r29
    3b00:	cf 93       	push	r28
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE1);
    3b06:	a7 e5       	ldi	r26, 0x57	; 87
    3b08:	b0 e0       	ldi	r27, 0x00	; 0
    3b0a:	e7 e5       	ldi	r30, 0x57	; 87
    3b0c:	f0 e0       	ldi	r31, 0x00	; 0
    3b0e:	80 81       	ld	r24, Z
    3b10:	8b 7f       	andi	r24, 0xFB	; 251
    3b12:	8c 93       	st	X, r24
}
    3b14:	cf 91       	pop	r28
    3b16:	df 91       	pop	r29
    3b18:	08 95       	ret

00003b1a <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
    3b1a:	df 93       	push	r29
    3b1c:	cf 93       	push	r28
    3b1e:	cd b7       	in	r28, 0x3d	; 61
    3b20:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1A);
    3b22:	a7 e5       	ldi	r26, 0x57	; 87
    3b24:	b0 e0       	ldi	r27, 0x00	; 0
    3b26:	e7 e5       	ldi	r30, 0x57	; 87
    3b28:	f0 e0       	ldi	r31, 0x00	; 0
    3b2a:	80 81       	ld	r24, Z
    3b2c:	80 61       	ori	r24, 0x10	; 16
    3b2e:	8c 93       	st	X, r24
}
    3b30:	cf 91       	pop	r28
    3b32:	df 91       	pop	r29
    3b34:	08 95       	ret

00003b36 <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
    3b36:	df 93       	push	r29
    3b38:	cf 93       	push	r28
    3b3a:	cd b7       	in	r28, 0x3d	; 61
    3b3c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE1A);
    3b3e:	a7 e5       	ldi	r26, 0x57	; 87
    3b40:	b0 e0       	ldi	r27, 0x00	; 0
    3b42:	e7 e5       	ldi	r30, 0x57	; 87
    3b44:	f0 e0       	ldi	r31, 0x00	; 0
    3b46:	80 81       	ld	r24, Z
    3b48:	8f 7e       	andi	r24, 0xEF	; 239
    3b4a:	8c 93       	st	X, r24
}
    3b4c:	cf 91       	pop	r28
    3b4e:	df 91       	pop	r29
    3b50:	08 95       	ret

00003b52 <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
    3b52:	df 93       	push	r29
    3b54:	cf 93       	push	r28
    3b56:	cd b7       	in	r28, 0x3d	; 61
    3b58:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1B);
    3b5a:	a7 e5       	ldi	r26, 0x57	; 87
    3b5c:	b0 e0       	ldi	r27, 0x00	; 0
    3b5e:	e7 e5       	ldi	r30, 0x57	; 87
    3b60:	f0 e0       	ldi	r31, 0x00	; 0
    3b62:	80 81       	ld	r24, Z
    3b64:	88 60       	ori	r24, 0x08	; 8
    3b66:	8c 93       	st	X, r24
}
    3b68:	cf 91       	pop	r28
    3b6a:	df 91       	pop	r29
    3b6c:	08 95       	ret

00003b6e <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
    3b6e:	df 93       	push	r29
    3b70:	cf 93       	push	r28
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE1B);
    3b76:	a7 e5       	ldi	r26, 0x57	; 87
    3b78:	b0 e0       	ldi	r27, 0x00	; 0
    3b7a:	e7 e5       	ldi	r30, 0x57	; 87
    3b7c:	f0 e0       	ldi	r31, 0x00	; 0
    3b7e:	80 81       	ld	r24, Z
    3b80:	87 7f       	andi	r24, 0xF7	; 247
    3b82:	8c 93       	st	X, r24
}
    3b84:	cf 91       	pop	r28
    3b86:	df 91       	pop	r29
    3b88:	08 95       	ret

00003b8a <Timer1_OCC_InterruptEnable>:

void Timer1_OCC_InterruptEnable(void)
{
    3b8a:	df 93       	push	r29
    3b8c:	cf 93       	push	r28
    3b8e:	cd b7       	in	r28, 0x3d	; 61
    3b90:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,OCIE1C);
    3b92:	ad e7       	ldi	r26, 0x7D	; 125
    3b94:	b0 e0       	ldi	r27, 0x00	; 0
    3b96:	ed e7       	ldi	r30, 0x7D	; 125
    3b98:	f0 e0       	ldi	r31, 0x00	; 0
    3b9a:	80 81       	ld	r24, Z
    3b9c:	81 60       	ori	r24, 0x01	; 1
    3b9e:	8c 93       	st	X, r24
}
    3ba0:	cf 91       	pop	r28
    3ba2:	df 91       	pop	r29
    3ba4:	08 95       	ret

00003ba6 <Timer1_OCC_InterruptDisable>:
void Timer1_OCC_InterruptDisable(void)
{
    3ba6:	df 93       	push	r29
    3ba8:	cf 93       	push	r28
    3baa:	cd b7       	in	r28, 0x3d	; 61
    3bac:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,OCIE1C);
    3bae:	ad e7       	ldi	r26, 0x7D	; 125
    3bb0:	b0 e0       	ldi	r27, 0x00	; 0
    3bb2:	ed e7       	ldi	r30, 0x7D	; 125
    3bb4:	f0 e0       	ldi	r31, 0x00	; 0
    3bb6:	80 81       	ld	r24, Z
    3bb8:	8e 7f       	andi	r24, 0xFE	; 254
    3bba:	8c 93       	st	X, r24
}
    3bbc:	cf 91       	pop	r28
    3bbe:	df 91       	pop	r29
    3bc0:	08 95       	ret

00003bc2 <TMR1_uint16_GetICUValue>:


uint16  TMR1_uint16_GetICUValue(void)
{
    3bc2:	df 93       	push	r29
    3bc4:	cf 93       	push	r28
    3bc6:	00 d0       	rcall	.+0      	; 0x3bc8 <TMR1_uint16_GetICUValue+0x6>
    3bc8:	cd b7       	in	r28, 0x3d	; 61
    3bca:	de b7       	in	r29, 0x3e	; 62
	uint16 ret_val;
		ret_val=ICR1L|(ICR1H<<8);
    3bcc:	e6 e4       	ldi	r30, 0x46	; 70
    3bce:	f0 e0       	ldi	r31, 0x00	; 0
    3bd0:	80 81       	ld	r24, Z
    3bd2:	28 2f       	mov	r18, r24
    3bd4:	30 e0       	ldi	r19, 0x00	; 0
    3bd6:	e7 e4       	ldi	r30, 0x47	; 71
    3bd8:	f0 e0       	ldi	r31, 0x00	; 0
    3bda:	80 81       	ld	r24, Z
    3bdc:	88 2f       	mov	r24, r24
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	98 2f       	mov	r25, r24
    3be2:	88 27       	eor	r24, r24
    3be4:	82 2b       	or	r24, r18
    3be6:	93 2b       	or	r25, r19
    3be8:	9a 83       	std	Y+2, r25	; 0x02
    3bea:	89 83       	std	Y+1, r24	; 0x01
		return ret_val;
    3bec:	89 81       	ldd	r24, Y+1	; 0x01
    3bee:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
    3bf4:	cf 91       	pop	r28
    3bf6:	df 91       	pop	r29
    3bf8:	08 95       	ret

00003bfa <TMR1_uint16_GetTimerValue>:

uint16  TMR1_uint16_GetTimerValue(void)
{
    3bfa:	df 93       	push	r29
    3bfc:	cf 93       	push	r28
    3bfe:	00 d0       	rcall	.+0      	; 0x3c00 <TMR1_uint16_GetTimerValue+0x6>
    3c00:	cd b7       	in	r28, 0x3d	; 61
    3c02:	de b7       	in	r29, 0x3e	; 62

	uint16 ret_val;
	ret_val=TCNT1L|(TCNT1H<<8);
    3c04:	ec e4       	ldi	r30, 0x4C	; 76
    3c06:	f0 e0       	ldi	r31, 0x00	; 0
    3c08:	80 81       	ld	r24, Z
    3c0a:	28 2f       	mov	r18, r24
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	ed e4       	ldi	r30, 0x4D	; 77
    3c10:	f0 e0       	ldi	r31, 0x00	; 0
    3c12:	80 81       	ld	r24, Z
    3c14:	88 2f       	mov	r24, r24
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	98 2f       	mov	r25, r24
    3c1a:	88 27       	eor	r24, r24
    3c1c:	82 2b       	or	r24, r18
    3c1e:	93 2b       	or	r25, r19
    3c20:	9a 83       	std	Y+2, r25	; 0x02
    3c22:	89 83       	std	Y+1, r24	; 0x01
	return ret_val;
    3c24:	89 81       	ldd	r24, Y+1	; 0x01
    3c26:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3c28:	0f 90       	pop	r0
    3c2a:	0f 90       	pop	r0
    3c2c:	cf 91       	pop	r28
    3c2e:	df 91       	pop	r29
    3c30:	08 95       	ret

00003c32 <TMR1_void_SetTimerValue>:


void  TMR1_void_SetTimerValue(uint16 tmr_val)
{
    3c32:	df 93       	push	r29
    3c34:	cf 93       	push	r28
    3c36:	00 d0       	rcall	.+0      	; 0x3c38 <TMR1_void_SetTimerValue+0x6>
    3c38:	cd b7       	in	r28, 0x3d	; 61
    3c3a:	de b7       	in	r29, 0x3e	; 62
    3c3c:	9a 83       	std	Y+2, r25	; 0x02
    3c3e:	89 83       	std	Y+1, r24	; 0x01
TCNT1L=(uint8)tmr_val;
    3c40:	ec e4       	ldi	r30, 0x4C	; 76
    3c42:	f0 e0       	ldi	r31, 0x00	; 0
    3c44:	89 81       	ldd	r24, Y+1	; 0x01
    3c46:	80 83       	st	Z, r24
TCNT1H=(uint8)(tmr_val>>8);
    3c48:	ed e4       	ldi	r30, 0x4D	; 77
    3c4a:	f0 e0       	ldi	r31, 0x00	; 0
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c50:	89 2f       	mov	r24, r25
    3c52:	99 27       	eor	r25, r25
    3c54:	80 83       	st	Z, r24
}
    3c56:	0f 90       	pop	r0
    3c58:	0f 90       	pop	r0
    3c5a:	cf 91       	pop	r28
    3c5c:	df 91       	pop	r29
    3c5e:	08 95       	ret

00003c60 <TMR1_void_Set_OCR_TimerValue>:

void  TMR1_void_Set_OCR_TimerValue(uint16 oc_val,OC1_ch_type ch)
{
    3c60:	df 93       	push	r29
    3c62:	cf 93       	push	r28
    3c64:	00 d0       	rcall	.+0      	; 0x3c66 <TMR1_void_Set_OCR_TimerValue+0x6>
    3c66:	00 d0       	rcall	.+0      	; 0x3c68 <TMR1_void_Set_OCR_TimerValue+0x8>
    3c68:	0f 92       	push	r0
    3c6a:	cd b7       	in	r28, 0x3d	; 61
    3c6c:	de b7       	in	r29, 0x3e	; 62
    3c6e:	9a 83       	std	Y+2, r25	; 0x02
    3c70:	89 83       	std	Y+1, r24	; 0x01
    3c72:	6b 83       	std	Y+3, r22	; 0x03
	switch(ch){
    3c74:	8b 81       	ldd	r24, Y+3	; 0x03
    3c76:	28 2f       	mov	r18, r24
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	3d 83       	std	Y+5, r19	; 0x05
    3c7c:	2c 83       	std	Y+4, r18	; 0x04
    3c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c80:	9d 81       	ldd	r25, Y+5	; 0x05
    3c82:	81 30       	cpi	r24, 0x01	; 1
    3c84:	91 05       	cpc	r25, r1
    3c86:	81 f0       	breq	.+32     	; 0x3ca8 <TMR1_void_Set_OCR_TimerValue+0x48>
    3c88:	2c 81       	ldd	r18, Y+4	; 0x04
    3c8a:	3d 81       	ldd	r19, Y+5	; 0x05
    3c8c:	22 30       	cpi	r18, 0x02	; 2
    3c8e:	31 05       	cpc	r19, r1
    3c90:	74 f1       	brlt	.+92     	; 0x3cee <TMR1_void_Set_OCR_TimerValue+0x8e>
    3c92:	8c 81       	ldd	r24, Y+4	; 0x04
    3c94:	9d 81       	ldd	r25, Y+5	; 0x05
    3c96:	82 30       	cpi	r24, 0x02	; 2
    3c98:	91 05       	cpc	r25, r1
    3c9a:	91 f0       	breq	.+36     	; 0x3cc0 <TMR1_void_Set_OCR_TimerValue+0x60>
    3c9c:	2c 81       	ldd	r18, Y+4	; 0x04
    3c9e:	3d 81       	ldd	r19, Y+5	; 0x05
    3ca0:	23 30       	cpi	r18, 0x03	; 3
    3ca2:	31 05       	cpc	r19, r1
    3ca4:	c9 f0       	breq	.+50     	; 0x3cd8 <TMR1_void_Set_OCR_TimerValue+0x78>
    3ca6:	23 c0       	rjmp	.+70     	; 0x3cee <TMR1_void_Set_OCR_TimerValue+0x8e>
	case disconnected_channel:break;
	case A_Channel:OCR1AL=(uint8)oc_val;
    3ca8:	ea e4       	ldi	r30, 0x4A	; 74
    3caa:	f0 e0       	ldi	r31, 0x00	; 0
    3cac:	89 81       	ldd	r24, Y+1	; 0x01
    3cae:	80 83       	st	Z, r24
	               OCR1AH=(uint8)(oc_val>>8);
    3cb0:	eb e4       	ldi	r30, 0x4B	; 75
    3cb2:	f0 e0       	ldi	r31, 0x00	; 0
    3cb4:	89 81       	ldd	r24, Y+1	; 0x01
    3cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb8:	89 2f       	mov	r24, r25
    3cba:	99 27       	eor	r25, r25
    3cbc:	80 83       	st	Z, r24
    3cbe:	17 c0       	rjmp	.+46     	; 0x3cee <TMR1_void_Set_OCR_TimerValue+0x8e>
	               break;
	case B_Channel:OCR1BL=(uint8)oc_val;
    3cc0:	e8 e4       	ldi	r30, 0x48	; 72
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	89 81       	ldd	r24, Y+1	; 0x01
    3cc6:	80 83       	st	Z, r24
		           OCR1BH=(uint8)(oc_val>>8);
    3cc8:	e9 e4       	ldi	r30, 0x49	; 73
    3cca:	f0 e0       	ldi	r31, 0x00	; 0
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd0:	89 2f       	mov	r24, r25
    3cd2:	99 27       	eor	r25, r25
    3cd4:	80 83       	st	Z, r24
    3cd6:	0b c0       	rjmp	.+22     	; 0x3cee <TMR1_void_Set_OCR_TimerValue+0x8e>
		           break;
	case C_Channel:OCR1CL=(uint8)oc_val;
    3cd8:	e8 e7       	ldi	r30, 0x78	; 120
    3cda:	f0 e0       	ldi	r31, 0x00	; 0
    3cdc:	89 81       	ldd	r24, Y+1	; 0x01
    3cde:	80 83       	st	Z, r24
		           OCR1CH=(uint8)(oc_val>>8);
    3ce0:	e9 e7       	ldi	r30, 0x79	; 121
    3ce2:	f0 e0       	ldi	r31, 0x00	; 0
    3ce4:	89 81       	ldd	r24, Y+1	; 0x01
    3ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce8:	89 2f       	mov	r24, r25
    3cea:	99 27       	eor	r25, r25
    3cec:	80 83       	st	Z, r24
		           break;
	}

}
    3cee:	0f 90       	pop	r0
    3cf0:	0f 90       	pop	r0
    3cf2:	0f 90       	pop	r0
    3cf4:	0f 90       	pop	r0
    3cf6:	0f 90       	pop	r0
    3cf8:	cf 91       	pop	r28
    3cfa:	df 91       	pop	r29
    3cfc:	08 95       	ret

00003cfe <Timer0_Init>:
#include"Timer0.h"
void Timer0_Init(timer0_mode_type mode,prescaler0_type scaler,OC0_mode_type oc_mode)
{
    3cfe:	df 93       	push	r29
    3d00:	cf 93       	push	r28
    3d02:	cd b7       	in	r28, 0x3d	; 61
    3d04:	de b7       	in	r29, 0x3e	; 62
    3d06:	27 97       	sbiw	r28, 0x07	; 7
    3d08:	0f b6       	in	r0, 0x3f	; 63
    3d0a:	f8 94       	cli
    3d0c:	de bf       	out	0x3e, r29	; 62
    3d0e:	0f be       	out	0x3f, r0	; 63
    3d10:	cd bf       	out	0x3d, r28	; 61
    3d12:	89 83       	std	Y+1, r24	; 0x01
    3d14:	6a 83       	std	Y+2, r22	; 0x02
    3d16:	4b 83       	std	Y+3, r20	; 0x03
	switch (mode)
    3d18:	89 81       	ldd	r24, Y+1	; 0x01
    3d1a:	28 2f       	mov	r18, r24
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	3f 83       	std	Y+7, r19	; 0x07
    3d20:	2e 83       	std	Y+6, r18	; 0x06
    3d22:	8e 81       	ldd	r24, Y+6	; 0x06
    3d24:	9f 81       	ldd	r25, Y+7	; 0x07
    3d26:	81 30       	cpi	r24, 0x01	; 1
    3d28:	91 05       	cpc	r25, r1
    3d2a:	21 f1       	breq	.+72     	; 0x3d74 <Timer0_Init+0x76>
    3d2c:	2e 81       	ldd	r18, Y+6	; 0x06
    3d2e:	3f 81       	ldd	r19, Y+7	; 0x07
    3d30:	22 30       	cpi	r18, 0x02	; 2
    3d32:	31 05       	cpc	r19, r1
    3d34:	2c f4       	brge	.+10     	; 0x3d40 <Timer0_Init+0x42>
    3d36:	8e 81       	ldd	r24, Y+6	; 0x06
    3d38:	9f 81       	ldd	r25, Y+7	; 0x07
    3d3a:	00 97       	sbiw	r24, 0x00	; 0
    3d3c:	61 f0       	breq	.+24     	; 0x3d56 <Timer0_Init+0x58>
    3d3e:	46 c0       	rjmp	.+140    	; 0x3dcc <Timer0_Init+0xce>
    3d40:	2e 81       	ldd	r18, Y+6	; 0x06
    3d42:	3f 81       	ldd	r19, Y+7	; 0x07
    3d44:	22 30       	cpi	r18, 0x02	; 2
    3d46:	31 05       	cpc	r19, r1
    3d48:	21 f1       	breq	.+72     	; 0x3d92 <Timer0_Init+0x94>
    3d4a:	8e 81       	ldd	r24, Y+6	; 0x06
    3d4c:	9f 81       	ldd	r25, Y+7	; 0x07
    3d4e:	83 30       	cpi	r24, 0x03	; 3
    3d50:	91 05       	cpc	r25, r1
    3d52:	71 f1       	breq	.+92     	; 0x3db0 <Timer0_Init+0xb2>
    3d54:	3b c0       	rjmp	.+118    	; 0x3dcc <Timer0_Init+0xce>
				{
					case Normal_mode:
						CLR_BIT(TCCR0,WGM00);
    3d56:	a3 e5       	ldi	r26, 0x53	; 83
    3d58:	b0 e0       	ldi	r27, 0x00	; 0
    3d5a:	e3 e5       	ldi	r30, 0x53	; 83
    3d5c:	f0 e0       	ldi	r31, 0x00	; 0
    3d5e:	80 81       	ld	r24, Z
    3d60:	8f 7b       	andi	r24, 0xBF	; 191
    3d62:	8c 93       	st	X, r24
						CLR_BIT(TCCR0,WGM01);
    3d64:	a3 e5       	ldi	r26, 0x53	; 83
    3d66:	b0 e0       	ldi	r27, 0x00	; 0
    3d68:	e3 e5       	ldi	r30, 0x53	; 83
    3d6a:	f0 e0       	ldi	r31, 0x00	; 0
    3d6c:	80 81       	ld	r24, Z
    3d6e:	87 7f       	andi	r24, 0xF7	; 247
    3d70:	8c 93       	st	X, r24
    3d72:	2c c0       	rjmp	.+88     	; 0x3dcc <Timer0_Init+0xce>

					break;
					case Phasecorrect_mode:
						SET_BIT(TCCR0,WGM00);
    3d74:	a3 e5       	ldi	r26, 0x53	; 83
    3d76:	b0 e0       	ldi	r27, 0x00	; 0
    3d78:	e3 e5       	ldi	r30, 0x53	; 83
    3d7a:	f0 e0       	ldi	r31, 0x00	; 0
    3d7c:	80 81       	ld	r24, Z
    3d7e:	80 64       	ori	r24, 0x40	; 64
    3d80:	8c 93       	st	X, r24
						CLR_BIT(TCCR0,WGM01);
    3d82:	a3 e5       	ldi	r26, 0x53	; 83
    3d84:	b0 e0       	ldi	r27, 0x00	; 0
    3d86:	e3 e5       	ldi	r30, 0x53	; 83
    3d88:	f0 e0       	ldi	r31, 0x00	; 0
    3d8a:	80 81       	ld	r24, Z
    3d8c:	87 7f       	andi	r24, 0xF7	; 247
    3d8e:	8c 93       	st	X, r24
    3d90:	1d c0       	rjmp	.+58     	; 0x3dcc <Timer0_Init+0xce>
					break;
					case CTC_mode:
						CLR_BIT(TCCR0,WGM00);
    3d92:	a3 e5       	ldi	r26, 0x53	; 83
    3d94:	b0 e0       	ldi	r27, 0x00	; 0
    3d96:	e3 e5       	ldi	r30, 0x53	; 83
    3d98:	f0 e0       	ldi	r31, 0x00	; 0
    3d9a:	80 81       	ld	r24, Z
    3d9c:	8f 7b       	andi	r24, 0xBF	; 191
    3d9e:	8c 93       	st	X, r24
						SET_BIT(TCCR0,WGM01);
    3da0:	a3 e5       	ldi	r26, 0x53	; 83
    3da2:	b0 e0       	ldi	r27, 0x00	; 0
    3da4:	e3 e5       	ldi	r30, 0x53	; 83
    3da6:	f0 e0       	ldi	r31, 0x00	; 0
    3da8:	80 81       	ld	r24, Z
    3daa:	88 60       	ori	r24, 0x08	; 8
    3dac:	8c 93       	st	X, r24
    3dae:	0e c0       	rjmp	.+28     	; 0x3dcc <Timer0_Init+0xce>

					break;
					case FastPWM_mode:
						SET_BIT(TCCR0,WGM00);
    3db0:	a3 e5       	ldi	r26, 0x53	; 83
    3db2:	b0 e0       	ldi	r27, 0x00	; 0
    3db4:	e3 e5       	ldi	r30, 0x53	; 83
    3db6:	f0 e0       	ldi	r31, 0x00	; 0
    3db8:	80 81       	ld	r24, Z
    3dba:	80 64       	ori	r24, 0x40	; 64
    3dbc:	8c 93       	st	X, r24
						SET_BIT(TCCR0,WGM01);
    3dbe:	a3 e5       	ldi	r26, 0x53	; 83
    3dc0:	b0 e0       	ldi	r27, 0x00	; 0
    3dc2:	e3 e5       	ldi	r30, 0x53	; 83
    3dc4:	f0 e0       	ldi	r31, 0x00	; 0
    3dc6:	80 81       	ld	r24, Z
    3dc8:	88 60       	ori	r24, 0x08	; 8
    3dca:	8c 93       	st	X, r24
					break;
				}
#if  oc==normal
	switch (oc_mode)
    3dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dce:	28 2f       	mov	r18, r24
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	3d 83       	std	Y+5, r19	; 0x05
    3dd4:	2c 83       	std	Y+4, r18	; 0x04
    3dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd8:	9d 81       	ldd	r25, Y+5	; 0x05
    3dda:	81 30       	cpi	r24, 0x01	; 1
    3ddc:	91 05       	cpc	r25, r1
    3dde:	21 f1       	breq	.+72     	; 0x3e28 <Timer0_Init+0x12a>
    3de0:	2c 81       	ldd	r18, Y+4	; 0x04
    3de2:	3d 81       	ldd	r19, Y+5	; 0x05
    3de4:	22 30       	cpi	r18, 0x02	; 2
    3de6:	31 05       	cpc	r19, r1
    3de8:	2c f4       	brge	.+10     	; 0x3df4 <Timer0_Init+0xf6>
    3dea:	8c 81       	ldd	r24, Y+4	; 0x04
    3dec:	9d 81       	ldd	r25, Y+5	; 0x05
    3dee:	00 97       	sbiw	r24, 0x00	; 0
    3df0:	61 f0       	breq	.+24     	; 0x3e0a <Timer0_Init+0x10c>
    3df2:	46 c0       	rjmp	.+140    	; 0x3e80 <Timer0_Init+0x182>
    3df4:	2c 81       	ldd	r18, Y+4	; 0x04
    3df6:	3d 81       	ldd	r19, Y+5	; 0x05
    3df8:	22 30       	cpi	r18, 0x02	; 2
    3dfa:	31 05       	cpc	r19, r1
    3dfc:	21 f1       	breq	.+72     	; 0x3e46 <Timer0_Init+0x148>
    3dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    3e00:	9d 81       	ldd	r25, Y+5	; 0x05
    3e02:	83 30       	cpi	r24, 0x03	; 3
    3e04:	91 05       	cpc	r25, r1
    3e06:	71 f1       	breq	.+92     	; 0x3e64 <Timer0_Init+0x166>
    3e08:	3b c0       	rjmp	.+118    	; 0x3e80 <Timer0_Init+0x182>
				{
					case disconnected:
						CLR_BIT(TCCR0,COM00);
    3e0a:	a3 e5       	ldi	r26, 0x53	; 83
    3e0c:	b0 e0       	ldi	r27, 0x00	; 0
    3e0e:	e3 e5       	ldi	r30, 0x53	; 83
    3e10:	f0 e0       	ldi	r31, 0x00	; 0
    3e12:	80 81       	ld	r24, Z
    3e14:	8f 7e       	andi	r24, 0xEF	; 239
    3e16:	8c 93       	st	X, r24
						CLR_BIT(TCCR0,COM01);
    3e18:	a3 e5       	ldi	r26, 0x53	; 83
    3e1a:	b0 e0       	ldi	r27, 0x00	; 0
    3e1c:	e3 e5       	ldi	r30, 0x53	; 83
    3e1e:	f0 e0       	ldi	r31, 0x00	; 0
    3e20:	80 81       	ld	r24, Z
    3e22:	8f 7d       	andi	r24, 0xDF	; 223
    3e24:	8c 93       	st	X, r24
    3e26:	2c c0       	rjmp	.+88     	; 0x3e80 <Timer0_Init+0x182>
						break;
					case Toggle:
						SET_BIT(TCCR0,COM00);
    3e28:	a3 e5       	ldi	r26, 0x53	; 83
    3e2a:	b0 e0       	ldi	r27, 0x00	; 0
    3e2c:	e3 e5       	ldi	r30, 0x53	; 83
    3e2e:	f0 e0       	ldi	r31, 0x00	; 0
    3e30:	80 81       	ld	r24, Z
    3e32:	80 61       	ori	r24, 0x10	; 16
    3e34:	8c 93       	st	X, r24
						CLR_BIT(TCCR0,COM01);
    3e36:	a3 e5       	ldi	r26, 0x53	; 83
    3e38:	b0 e0       	ldi	r27, 0x00	; 0
    3e3a:	e3 e5       	ldi	r30, 0x53	; 83
    3e3c:	f0 e0       	ldi	r31, 0x00	; 0
    3e3e:	80 81       	ld	r24, Z
    3e40:	8f 7d       	andi	r24, 0xDF	; 223
    3e42:	8c 93       	st	X, r24
    3e44:	1d c0       	rjmp	.+58     	; 0x3e80 <Timer0_Init+0x182>
						break;
					case Nin_inverting:
						CLR_BIT(TCCR0,COM00);
    3e46:	a3 e5       	ldi	r26, 0x53	; 83
    3e48:	b0 e0       	ldi	r27, 0x00	; 0
    3e4a:	e3 e5       	ldi	r30, 0x53	; 83
    3e4c:	f0 e0       	ldi	r31, 0x00	; 0
    3e4e:	80 81       	ld	r24, Z
    3e50:	8f 7e       	andi	r24, 0xEF	; 239
    3e52:	8c 93       	st	X, r24
						SET_BIT(TCCR0,COM01);
    3e54:	a3 e5       	ldi	r26, 0x53	; 83
    3e56:	b0 e0       	ldi	r27, 0x00	; 0
    3e58:	e3 e5       	ldi	r30, 0x53	; 83
    3e5a:	f0 e0       	ldi	r31, 0x00	; 0
    3e5c:	80 81       	ld	r24, Z
    3e5e:	80 62       	ori	r24, 0x20	; 32
    3e60:	8c 93       	st	X, r24
    3e62:	0e c0       	rjmp	.+28     	; 0x3e80 <Timer0_Init+0x182>
						break;
					case Inverting:
						SET_BIT(TCCR0,COM00);
    3e64:	a3 e5       	ldi	r26, 0x53	; 83
    3e66:	b0 e0       	ldi	r27, 0x00	; 0
    3e68:	e3 e5       	ldi	r30, 0x53	; 83
    3e6a:	f0 e0       	ldi	r31, 0x00	; 0
    3e6c:	80 81       	ld	r24, Z
    3e6e:	80 61       	ori	r24, 0x10	; 16
    3e70:	8c 93       	st	X, r24
						SET_BIT(TCCR0,COM01);
    3e72:	a3 e5       	ldi	r26, 0x53	; 83
    3e74:	b0 e0       	ldi	r27, 0x00	; 0
    3e76:	e3 e5       	ldi	r30, 0x53	; 83
    3e78:	f0 e0       	ldi	r31, 0x00	; 0
    3e7a:	80 81       	ld	r24, Z
    3e7c:	80 62       	ori	r24, 0x20	; 32
    3e7e:	8c 93       	st	X, r24
								break;
							}

#endif
	//MASK FOR SCALLER THE FIRST 3 BITS
	TCCR0&=0XF8;
    3e80:	a3 e5       	ldi	r26, 0x53	; 83
    3e82:	b0 e0       	ldi	r27, 0x00	; 0
    3e84:	e3 e5       	ldi	r30, 0x53	; 83
    3e86:	f0 e0       	ldi	r31, 0x00	; 0
    3e88:	80 81       	ld	r24, Z
    3e8a:	88 7f       	andi	r24, 0xF8	; 248
    3e8c:	8c 93       	st	X, r24
	//PUT THE SCALLER
	TCCR0|=scaler;
    3e8e:	a3 e5       	ldi	r26, 0x53	; 83
    3e90:	b0 e0       	ldi	r27, 0x00	; 0
    3e92:	e3 e5       	ldi	r30, 0x53	; 83
    3e94:	f0 e0       	ldi	r31, 0x00	; 0
    3e96:	90 81       	ld	r25, Z
    3e98:	8a 81       	ldd	r24, Y+2	; 0x02
    3e9a:	89 2b       	or	r24, r25
    3e9c:	8c 93       	st	X, r24

}
    3e9e:	27 96       	adiw	r28, 0x07	; 7
    3ea0:	0f b6       	in	r0, 0x3f	; 63
    3ea2:	f8 94       	cli
    3ea4:	de bf       	out	0x3e, r29	; 62
    3ea6:	0f be       	out	0x3f, r0	; 63
    3ea8:	cd bf       	out	0x3d, r28	; 61
    3eaa:	cf 91       	pop	r28
    3eac:	df 91       	pop	r29
    3eae:	08 95       	ret

00003eb0 <Timer0_OVInterrupt_Enable>:

void Timer0_OVInterrupt_Enable(void)
{
    3eb0:	df 93       	push	r29
    3eb2:	cf 93       	push	r28
    3eb4:	cd b7       	in	r28, 0x3d	; 61
    3eb6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
    3eb8:	a7 e5       	ldi	r26, 0x57	; 87
    3eba:	b0 e0       	ldi	r27, 0x00	; 0
    3ebc:	e7 e5       	ldi	r30, 0x57	; 87
    3ebe:	f0 e0       	ldi	r31, 0x00	; 0
    3ec0:	80 81       	ld	r24, Z
    3ec2:	81 60       	ori	r24, 0x01	; 1
    3ec4:	8c 93       	st	X, r24
}
    3ec6:	cf 91       	pop	r28
    3ec8:	df 91       	pop	r29
    3eca:	08 95       	ret

00003ecc <Timer0_OVInterrupt_Disable>:
void Timer0_OVInterrupt_Disable(void)
{
    3ecc:	df 93       	push	r29
    3ece:	cf 93       	push	r28
    3ed0:	cd b7       	in	r28, 0x3d	; 61
    3ed2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
    3ed4:	a7 e5       	ldi	r26, 0x57	; 87
    3ed6:	b0 e0       	ldi	r27, 0x00	; 0
    3ed8:	e7 e5       	ldi	r30, 0x57	; 87
    3eda:	f0 e0       	ldi	r31, 0x00	; 0
    3edc:	80 81       	ld	r24, Z
    3ede:	8e 7f       	andi	r24, 0xFE	; 254
    3ee0:	8c 93       	st	X, r24
}
    3ee2:	cf 91       	pop	r28
    3ee4:	df 91       	pop	r29
    3ee6:	08 95       	ret

00003ee8 <Timer0_OCInterrupt_Enable>:
void Timer0_OCInterrupt_Enable(void)
{
    3ee8:	df 93       	push	r29
    3eea:	cf 93       	push	r28
    3eec:	cd b7       	in	r28, 0x3d	; 61
    3eee:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE0);
    3ef0:	a7 e5       	ldi	r26, 0x57	; 87
    3ef2:	b0 e0       	ldi	r27, 0x00	; 0
    3ef4:	e7 e5       	ldi	r30, 0x57	; 87
    3ef6:	f0 e0       	ldi	r31, 0x00	; 0
    3ef8:	80 81       	ld	r24, Z
    3efa:	82 60       	ori	r24, 0x02	; 2
    3efc:	8c 93       	st	X, r24
}
    3efe:	cf 91       	pop	r28
    3f00:	df 91       	pop	r29
    3f02:	08 95       	ret

00003f04 <Timer0_OCInterrupt_Disable>:

void Timer0_OCInterrupt_Disable(void)
{
    3f04:	df 93       	push	r29
    3f06:	cf 93       	push	r28
    3f08:	cd b7       	in	r28, 0x3d	; 61
    3f0a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE0);
    3f0c:	a7 e5       	ldi	r26, 0x57	; 87
    3f0e:	b0 e0       	ldi	r27, 0x00	; 0
    3f10:	e7 e5       	ldi	r30, 0x57	; 87
    3f12:	f0 e0       	ldi	r31, 0x00	; 0
    3f14:	80 81       	ld	r24, Z
    3f16:	8d 7f       	andi	r24, 0xFD	; 253
    3f18:	8c 93       	st	X, r24
}
    3f1a:	cf 91       	pop	r28
    3f1c:	df 91       	pop	r29
    3f1e:	08 95       	ret

00003f20 <Timer0_OCI_Set_Value>:

void Timer0_OCI_Set_Value(uint8 oc_value)
{
    3f20:	df 93       	push	r29
    3f22:	cf 93       	push	r28
    3f24:	0f 92       	push	r0
    3f26:	cd b7       	in	r28, 0x3d	; 61
    3f28:	de b7       	in	r29, 0x3e	; 62
    3f2a:	89 83       	std	Y+1, r24	; 0x01
	OCR0= oc_value;
    3f2c:	e1 e5       	ldi	r30, 0x51	; 81
    3f2e:	f0 e0       	ldi	r31, 0x00	; 0
    3f30:	89 81       	ldd	r24, Y+1	; 0x01
    3f32:	80 83       	st	Z, r24
}
    3f34:	0f 90       	pop	r0
    3f36:	cf 91       	pop	r28
    3f38:	df 91       	pop	r29
    3f3a:	08 95       	ret

00003f3c <Timer0_TCNT_Set_Value>:
void Timer0_TCNT_Set_Value(uint8 TCNT_value)
{
    3f3c:	df 93       	push	r29
    3f3e:	cf 93       	push	r28
    3f40:	0f 92       	push	r0
    3f42:	cd b7       	in	r28, 0x3d	; 61
    3f44:	de b7       	in	r29, 0x3e	; 62
    3f46:	89 83       	std	Y+1, r24	; 0x01
	TCNT0= TCNT_value;
    3f48:	e2 e5       	ldi	r30, 0x52	; 82
    3f4a:	f0 e0       	ldi	r31, 0x00	; 0
    3f4c:	89 81       	ldd	r24, Y+1	; 0x01
    3f4e:	80 83       	st	Z, r24
}
    3f50:	0f 90       	pop	r0
    3f52:	cf 91       	pop	r28
    3f54:	df 91       	pop	r29
    3f56:	08 95       	ret

00003f58 <Timer0_Get_Value>:
uint8 Timer0_Get_Value(void)
{
    3f58:	df 93       	push	r29
    3f5a:	cf 93       	push	r28
    3f5c:	cd b7       	in	r28, 0x3d	; 61
    3f5e:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    3f60:	e2 e5       	ldi	r30, 0x52	; 82
    3f62:	f0 e0       	ldi	r31, 0x00	; 0
    3f64:	80 81       	ld	r24, Z
}
    3f66:	cf 91       	pop	r28
    3f68:	df 91       	pop	r29
    3f6a:	08 95       	ret

00003f6c <DIO_void_Set_Pin_Dirction>:
#include "DIO.h"
#include "utils.h"
#include"memmap128.h"

void DIO_void_Set_Pin_Dirction(port_no_type port_no, bit_no_type bit_no, direction_type direction)
{
    3f6c:	df 93       	push	r29
    3f6e:	cf 93       	push	r28
    3f70:	cd b7       	in	r28, 0x3d	; 61
    3f72:	de b7       	in	r29, 0x3e	; 62
    3f74:	27 97       	sbiw	r28, 0x07	; 7
    3f76:	0f b6       	in	r0, 0x3f	; 63
    3f78:	f8 94       	cli
    3f7a:	de bf       	out	0x3e, r29	; 62
    3f7c:	0f be       	out	0x3f, r0	; 63
    3f7e:	cd bf       	out	0x3d, r28	; 61
    3f80:	89 83       	std	Y+1, r24	; 0x01
    3f82:	6a 83       	std	Y+2, r22	; 0x02
    3f84:	4b 83       	std	Y+3, r20	; 0x03
	if(direction == INPUT)
    3f86:	8b 81       	ldd	r24, Y+3	; 0x03
    3f88:	88 23       	and	r24, r24
    3f8a:	09 f0       	breq	.+2      	; 0x3f8e <DIO_void_Set_Pin_Dirction+0x22>
    3f8c:	c6 c0       	rjmp	.+396    	; 0x411a <DIO_void_Set_Pin_Dirction+0x1ae>
	{
		switch(port_no)
    3f8e:	89 81       	ldd	r24, Y+1	; 0x01
    3f90:	28 2f       	mov	r18, r24
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	3f 83       	std	Y+7, r19	; 0x07
    3f96:	2e 83       	std	Y+6, r18	; 0x06
    3f98:	8e 81       	ldd	r24, Y+6	; 0x06
    3f9a:	9f 81       	ldd	r25, Y+7	; 0x07
    3f9c:	83 30       	cpi	r24, 0x03	; 3
    3f9e:	91 05       	cpc	r25, r1
    3fa0:	09 f4       	brne	.+2      	; 0x3fa4 <DIO_void_Set_Pin_Dirction+0x38>
    3fa2:	67 c0       	rjmp	.+206    	; 0x4072 <DIO_void_Set_Pin_Dirction+0x106>
    3fa4:	2e 81       	ldd	r18, Y+6	; 0x06
    3fa6:	3f 81       	ldd	r19, Y+7	; 0x07
    3fa8:	24 30       	cpi	r18, 0x04	; 4
    3faa:	31 05       	cpc	r19, r1
    3fac:	84 f4       	brge	.+32     	; 0x3fce <DIO_void_Set_Pin_Dirction+0x62>
    3fae:	8e 81       	ldd	r24, Y+6	; 0x06
    3fb0:	9f 81       	ldd	r25, Y+7	; 0x07
    3fb2:	81 30       	cpi	r24, 0x01	; 1
    3fb4:	91 05       	cpc	r25, r1
    3fb6:	99 f1       	breq	.+102    	; 0x401e <DIO_void_Set_Pin_Dirction+0xb2>
    3fb8:	2e 81       	ldd	r18, Y+6	; 0x06
    3fba:	3f 81       	ldd	r19, Y+7	; 0x07
    3fbc:	22 30       	cpi	r18, 0x02	; 2
    3fbe:	31 05       	cpc	r19, r1
    3fc0:	0c f0       	brlt	.+2      	; 0x3fc4 <DIO_void_Set_Pin_Dirction+0x58>
    3fc2:	42 c0       	rjmp	.+132    	; 0x4048 <DIO_void_Set_Pin_Dirction+0xdc>
    3fc4:	8e 81       	ldd	r24, Y+6	; 0x06
    3fc6:	9f 81       	ldd	r25, Y+7	; 0x07
    3fc8:	00 97       	sbiw	r24, 0x00	; 0
    3fca:	a1 f0       	breq	.+40     	; 0x3ff4 <DIO_void_Set_Pin_Dirction+0x88>
    3fcc:	68 c1       	rjmp	.+720    	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>
    3fce:	2e 81       	ldd	r18, Y+6	; 0x06
    3fd0:	3f 81       	ldd	r19, Y+7	; 0x07
    3fd2:	25 30       	cpi	r18, 0x05	; 5
    3fd4:	31 05       	cpc	r19, r1
    3fd6:	09 f4       	brne	.+2      	; 0x3fda <DIO_void_Set_Pin_Dirction+0x6e>
    3fd8:	76 c0       	rjmp	.+236    	; 0x40c6 <DIO_void_Set_Pin_Dirction+0x15a>
    3fda:	8e 81       	ldd	r24, Y+6	; 0x06
    3fdc:	9f 81       	ldd	r25, Y+7	; 0x07
    3fde:	85 30       	cpi	r24, 0x05	; 5
    3fe0:	91 05       	cpc	r25, r1
    3fe2:	0c f4       	brge	.+2      	; 0x3fe6 <DIO_void_Set_Pin_Dirction+0x7a>
    3fe4:	5b c0       	rjmp	.+182    	; 0x409c <DIO_void_Set_Pin_Dirction+0x130>
    3fe6:	2e 81       	ldd	r18, Y+6	; 0x06
    3fe8:	3f 81       	ldd	r19, Y+7	; 0x07
    3fea:	26 30       	cpi	r18, 0x06	; 6
    3fec:	31 05       	cpc	r19, r1
    3fee:	09 f4       	brne	.+2      	; 0x3ff2 <DIO_void_Set_Pin_Dirction+0x86>
    3ff0:	7f c0       	rjmp	.+254    	; 0x40f0 <DIO_void_Set_Pin_Dirction+0x184>
    3ff2:	55 c1       	rjmp	.+682    	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>
		{
		case PORTA_ID:CLR_BIT(DDRA,bit_no);break;
    3ff4:	aa e3       	ldi	r26, 0x3A	; 58
    3ff6:	b0 e0       	ldi	r27, 0x00	; 0
    3ff8:	ea e3       	ldi	r30, 0x3A	; 58
    3ffa:	f0 e0       	ldi	r31, 0x00	; 0
    3ffc:	80 81       	ld	r24, Z
    3ffe:	48 2f       	mov	r20, r24
    4000:	8a 81       	ldd	r24, Y+2	; 0x02
    4002:	28 2f       	mov	r18, r24
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	81 e0       	ldi	r24, 0x01	; 1
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	02 2e       	mov	r0, r18
    400c:	02 c0       	rjmp	.+4      	; 0x4012 <DIO_void_Set_Pin_Dirction+0xa6>
    400e:	88 0f       	add	r24, r24
    4010:	99 1f       	adc	r25, r25
    4012:	0a 94       	dec	r0
    4014:	e2 f7       	brpl	.-8      	; 0x400e <DIO_void_Set_Pin_Dirction+0xa2>
    4016:	80 95       	com	r24
    4018:	84 23       	and	r24, r20
    401a:	8c 93       	st	X, r24
    401c:	40 c1       	rjmp	.+640    	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>
		case PORTB_ID:CLR_BIT(DDRB,bit_no);break;
    401e:	a7 e3       	ldi	r26, 0x37	; 55
    4020:	b0 e0       	ldi	r27, 0x00	; 0
    4022:	e7 e3       	ldi	r30, 0x37	; 55
    4024:	f0 e0       	ldi	r31, 0x00	; 0
    4026:	80 81       	ld	r24, Z
    4028:	48 2f       	mov	r20, r24
    402a:	8a 81       	ldd	r24, Y+2	; 0x02
    402c:	28 2f       	mov	r18, r24
    402e:	30 e0       	ldi	r19, 0x00	; 0
    4030:	81 e0       	ldi	r24, 0x01	; 1
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	02 2e       	mov	r0, r18
    4036:	02 c0       	rjmp	.+4      	; 0x403c <DIO_void_Set_Pin_Dirction+0xd0>
    4038:	88 0f       	add	r24, r24
    403a:	99 1f       	adc	r25, r25
    403c:	0a 94       	dec	r0
    403e:	e2 f7       	brpl	.-8      	; 0x4038 <DIO_void_Set_Pin_Dirction+0xcc>
    4040:	80 95       	com	r24
    4042:	84 23       	and	r24, r20
    4044:	8c 93       	st	X, r24
    4046:	2b c1       	rjmp	.+598    	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>
		case PORTC_ID:CLR_BIT(DDRC,bit_no);break;
    4048:	a4 e3       	ldi	r26, 0x34	; 52
    404a:	b0 e0       	ldi	r27, 0x00	; 0
    404c:	e4 e3       	ldi	r30, 0x34	; 52
    404e:	f0 e0       	ldi	r31, 0x00	; 0
    4050:	80 81       	ld	r24, Z
    4052:	48 2f       	mov	r20, r24
    4054:	8a 81       	ldd	r24, Y+2	; 0x02
    4056:	28 2f       	mov	r18, r24
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	81 e0       	ldi	r24, 0x01	; 1
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	02 2e       	mov	r0, r18
    4060:	02 c0       	rjmp	.+4      	; 0x4066 <DIO_void_Set_Pin_Dirction+0xfa>
    4062:	88 0f       	add	r24, r24
    4064:	99 1f       	adc	r25, r25
    4066:	0a 94       	dec	r0
    4068:	e2 f7       	brpl	.-8      	; 0x4062 <DIO_void_Set_Pin_Dirction+0xf6>
    406a:	80 95       	com	r24
    406c:	84 23       	and	r24, r20
    406e:	8c 93       	st	X, r24
    4070:	16 c1       	rjmp	.+556    	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>
		case PORTD_ID:CLR_BIT(DDRD,bit_no);break;
    4072:	a1 e3       	ldi	r26, 0x31	; 49
    4074:	b0 e0       	ldi	r27, 0x00	; 0
    4076:	e1 e3       	ldi	r30, 0x31	; 49
    4078:	f0 e0       	ldi	r31, 0x00	; 0
    407a:	80 81       	ld	r24, Z
    407c:	48 2f       	mov	r20, r24
    407e:	8a 81       	ldd	r24, Y+2	; 0x02
    4080:	28 2f       	mov	r18, r24
    4082:	30 e0       	ldi	r19, 0x00	; 0
    4084:	81 e0       	ldi	r24, 0x01	; 1
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	02 2e       	mov	r0, r18
    408a:	02 c0       	rjmp	.+4      	; 0x4090 <DIO_void_Set_Pin_Dirction+0x124>
    408c:	88 0f       	add	r24, r24
    408e:	99 1f       	adc	r25, r25
    4090:	0a 94       	dec	r0
    4092:	e2 f7       	brpl	.-8      	; 0x408c <DIO_void_Set_Pin_Dirction+0x120>
    4094:	80 95       	com	r24
    4096:	84 23       	and	r24, r20
    4098:	8c 93       	st	X, r24
    409a:	01 c1       	rjmp	.+514    	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>
		case PORTE_ID:CLR_BIT(DDRE,bit_no);break;
    409c:	a2 e2       	ldi	r26, 0x22	; 34
    409e:	b0 e0       	ldi	r27, 0x00	; 0
    40a0:	e2 e2       	ldi	r30, 0x22	; 34
    40a2:	f0 e0       	ldi	r31, 0x00	; 0
    40a4:	80 81       	ld	r24, Z
    40a6:	48 2f       	mov	r20, r24
    40a8:	8a 81       	ldd	r24, Y+2	; 0x02
    40aa:	28 2f       	mov	r18, r24
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	81 e0       	ldi	r24, 0x01	; 1
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	02 2e       	mov	r0, r18
    40b4:	02 c0       	rjmp	.+4      	; 0x40ba <DIO_void_Set_Pin_Dirction+0x14e>
    40b6:	88 0f       	add	r24, r24
    40b8:	99 1f       	adc	r25, r25
    40ba:	0a 94       	dec	r0
    40bc:	e2 f7       	brpl	.-8      	; 0x40b6 <DIO_void_Set_Pin_Dirction+0x14a>
    40be:	80 95       	com	r24
    40c0:	84 23       	and	r24, r20
    40c2:	8c 93       	st	X, r24
    40c4:	ec c0       	rjmp	.+472    	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>
		case PORTF_ID:CLR_BIT(DDRF,bit_no);break;
    40c6:	a1 e6       	ldi	r26, 0x61	; 97
    40c8:	b0 e0       	ldi	r27, 0x00	; 0
    40ca:	e1 e6       	ldi	r30, 0x61	; 97
    40cc:	f0 e0       	ldi	r31, 0x00	; 0
    40ce:	80 81       	ld	r24, Z
    40d0:	48 2f       	mov	r20, r24
    40d2:	8a 81       	ldd	r24, Y+2	; 0x02
    40d4:	28 2f       	mov	r18, r24
    40d6:	30 e0       	ldi	r19, 0x00	; 0
    40d8:	81 e0       	ldi	r24, 0x01	; 1
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	02 2e       	mov	r0, r18
    40de:	02 c0       	rjmp	.+4      	; 0x40e4 <DIO_void_Set_Pin_Dirction+0x178>
    40e0:	88 0f       	add	r24, r24
    40e2:	99 1f       	adc	r25, r25
    40e4:	0a 94       	dec	r0
    40e6:	e2 f7       	brpl	.-8      	; 0x40e0 <DIO_void_Set_Pin_Dirction+0x174>
    40e8:	80 95       	com	r24
    40ea:	84 23       	and	r24, r20
    40ec:	8c 93       	st	X, r24
    40ee:	d7 c0       	rjmp	.+430    	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>
	    case PORTG_ID:CLR_BIT(DDRG,bit_no);break;
    40f0:	a4 e6       	ldi	r26, 0x64	; 100
    40f2:	b0 e0       	ldi	r27, 0x00	; 0
    40f4:	e4 e6       	ldi	r30, 0x64	; 100
    40f6:	f0 e0       	ldi	r31, 0x00	; 0
    40f8:	80 81       	ld	r24, Z
    40fa:	48 2f       	mov	r20, r24
    40fc:	8a 81       	ldd	r24, Y+2	; 0x02
    40fe:	28 2f       	mov	r18, r24
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	81 e0       	ldi	r24, 0x01	; 1
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	02 2e       	mov	r0, r18
    4108:	02 c0       	rjmp	.+4      	; 0x410e <DIO_void_Set_Pin_Dirction+0x1a2>
    410a:	88 0f       	add	r24, r24
    410c:	99 1f       	adc	r25, r25
    410e:	0a 94       	dec	r0
    4110:	e2 f7       	brpl	.-8      	; 0x410a <DIO_void_Set_Pin_Dirction+0x19e>
    4112:	80 95       	com	r24
    4114:	84 23       	and	r24, r20
    4116:	8c 93       	st	X, r24
    4118:	c2 c0       	rjmp	.+388    	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>

		}
	}
	else if(direction == OUTPUT)
    411a:	8b 81       	ldd	r24, Y+3	; 0x03
    411c:	81 30       	cpi	r24, 0x01	; 1
    411e:	09 f0       	breq	.+2      	; 0x4122 <DIO_void_Set_Pin_Dirction+0x1b6>
    4120:	be c0       	rjmp	.+380    	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>
	{
		switch(port_no)
    4122:	89 81       	ldd	r24, Y+1	; 0x01
    4124:	28 2f       	mov	r18, r24
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	3d 83       	std	Y+5, r19	; 0x05
    412a:	2c 83       	std	Y+4, r18	; 0x04
    412c:	8c 81       	ldd	r24, Y+4	; 0x04
    412e:	9d 81       	ldd	r25, Y+5	; 0x05
    4130:	83 30       	cpi	r24, 0x03	; 3
    4132:	91 05       	cpc	r25, r1
    4134:	09 f4       	brne	.+2      	; 0x4138 <DIO_void_Set_Pin_Dirction+0x1cc>
    4136:	64 c0       	rjmp	.+200    	; 0x4200 <DIO_void_Set_Pin_Dirction+0x294>
    4138:	2c 81       	ldd	r18, Y+4	; 0x04
    413a:	3d 81       	ldd	r19, Y+5	; 0x05
    413c:	24 30       	cpi	r18, 0x04	; 4
    413e:	31 05       	cpc	r19, r1
    4140:	84 f4       	brge	.+32     	; 0x4162 <DIO_void_Set_Pin_Dirction+0x1f6>
    4142:	8c 81       	ldd	r24, Y+4	; 0x04
    4144:	9d 81       	ldd	r25, Y+5	; 0x05
    4146:	81 30       	cpi	r24, 0x01	; 1
    4148:	91 05       	cpc	r25, r1
    414a:	91 f1       	breq	.+100    	; 0x41b0 <DIO_void_Set_Pin_Dirction+0x244>
    414c:	2c 81       	ldd	r18, Y+4	; 0x04
    414e:	3d 81       	ldd	r19, Y+5	; 0x05
    4150:	22 30       	cpi	r18, 0x02	; 2
    4152:	31 05       	cpc	r19, r1
    4154:	0c f0       	brlt	.+2      	; 0x4158 <DIO_void_Set_Pin_Dirction+0x1ec>
    4156:	40 c0       	rjmp	.+128    	; 0x41d8 <DIO_void_Set_Pin_Dirction+0x26c>
    4158:	8c 81       	ldd	r24, Y+4	; 0x04
    415a:	9d 81       	ldd	r25, Y+5	; 0x05
    415c:	00 97       	sbiw	r24, 0x00	; 0
    415e:	a1 f0       	breq	.+40     	; 0x4188 <DIO_void_Set_Pin_Dirction+0x21c>
    4160:	9e c0       	rjmp	.+316    	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>
    4162:	2c 81       	ldd	r18, Y+4	; 0x04
    4164:	3d 81       	ldd	r19, Y+5	; 0x05
    4166:	25 30       	cpi	r18, 0x05	; 5
    4168:	31 05       	cpc	r19, r1
    416a:	09 f4       	brne	.+2      	; 0x416e <DIO_void_Set_Pin_Dirction+0x202>
    416c:	71 c0       	rjmp	.+226    	; 0x4250 <DIO_void_Set_Pin_Dirction+0x2e4>
    416e:	8c 81       	ldd	r24, Y+4	; 0x04
    4170:	9d 81       	ldd	r25, Y+5	; 0x05
    4172:	85 30       	cpi	r24, 0x05	; 5
    4174:	91 05       	cpc	r25, r1
    4176:	0c f4       	brge	.+2      	; 0x417a <DIO_void_Set_Pin_Dirction+0x20e>
    4178:	57 c0       	rjmp	.+174    	; 0x4228 <DIO_void_Set_Pin_Dirction+0x2bc>
    417a:	2c 81       	ldd	r18, Y+4	; 0x04
    417c:	3d 81       	ldd	r19, Y+5	; 0x05
    417e:	26 30       	cpi	r18, 0x06	; 6
    4180:	31 05       	cpc	r19, r1
    4182:	09 f4       	brne	.+2      	; 0x4186 <DIO_void_Set_Pin_Dirction+0x21a>
    4184:	79 c0       	rjmp	.+242    	; 0x4278 <DIO_void_Set_Pin_Dirction+0x30c>
    4186:	8b c0       	rjmp	.+278    	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>
		{
		case PORTA_ID:SET_BIT(DDRA,bit_no);break;
    4188:	aa e3       	ldi	r26, 0x3A	; 58
    418a:	b0 e0       	ldi	r27, 0x00	; 0
    418c:	ea e3       	ldi	r30, 0x3A	; 58
    418e:	f0 e0       	ldi	r31, 0x00	; 0
    4190:	80 81       	ld	r24, Z
    4192:	48 2f       	mov	r20, r24
    4194:	8a 81       	ldd	r24, Y+2	; 0x02
    4196:	28 2f       	mov	r18, r24
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	02 2e       	mov	r0, r18
    41a0:	02 c0       	rjmp	.+4      	; 0x41a6 <DIO_void_Set_Pin_Dirction+0x23a>
    41a2:	88 0f       	add	r24, r24
    41a4:	99 1f       	adc	r25, r25
    41a6:	0a 94       	dec	r0
    41a8:	e2 f7       	brpl	.-8      	; 0x41a2 <DIO_void_Set_Pin_Dirction+0x236>
    41aa:	84 2b       	or	r24, r20
    41ac:	8c 93       	st	X, r24
    41ae:	77 c0       	rjmp	.+238    	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>
		case PORTB_ID:SET_BIT(DDRB,bit_no);break;
    41b0:	a7 e3       	ldi	r26, 0x37	; 55
    41b2:	b0 e0       	ldi	r27, 0x00	; 0
    41b4:	e7 e3       	ldi	r30, 0x37	; 55
    41b6:	f0 e0       	ldi	r31, 0x00	; 0
    41b8:	80 81       	ld	r24, Z
    41ba:	48 2f       	mov	r20, r24
    41bc:	8a 81       	ldd	r24, Y+2	; 0x02
    41be:	28 2f       	mov	r18, r24
    41c0:	30 e0       	ldi	r19, 0x00	; 0
    41c2:	81 e0       	ldi	r24, 0x01	; 1
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	02 2e       	mov	r0, r18
    41c8:	02 c0       	rjmp	.+4      	; 0x41ce <DIO_void_Set_Pin_Dirction+0x262>
    41ca:	88 0f       	add	r24, r24
    41cc:	99 1f       	adc	r25, r25
    41ce:	0a 94       	dec	r0
    41d0:	e2 f7       	brpl	.-8      	; 0x41ca <DIO_void_Set_Pin_Dirction+0x25e>
    41d2:	84 2b       	or	r24, r20
    41d4:	8c 93       	st	X, r24
    41d6:	63 c0       	rjmp	.+198    	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>
		case PORTC_ID:SET_BIT(DDRC,bit_no);break;
    41d8:	a4 e3       	ldi	r26, 0x34	; 52
    41da:	b0 e0       	ldi	r27, 0x00	; 0
    41dc:	e4 e3       	ldi	r30, 0x34	; 52
    41de:	f0 e0       	ldi	r31, 0x00	; 0
    41e0:	80 81       	ld	r24, Z
    41e2:	48 2f       	mov	r20, r24
    41e4:	8a 81       	ldd	r24, Y+2	; 0x02
    41e6:	28 2f       	mov	r18, r24
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	81 e0       	ldi	r24, 0x01	; 1
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	02 2e       	mov	r0, r18
    41f0:	02 c0       	rjmp	.+4      	; 0x41f6 <DIO_void_Set_Pin_Dirction+0x28a>
    41f2:	88 0f       	add	r24, r24
    41f4:	99 1f       	adc	r25, r25
    41f6:	0a 94       	dec	r0
    41f8:	e2 f7       	brpl	.-8      	; 0x41f2 <DIO_void_Set_Pin_Dirction+0x286>
    41fa:	84 2b       	or	r24, r20
    41fc:	8c 93       	st	X, r24
    41fe:	4f c0       	rjmp	.+158    	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>
		case PORTD_ID:SET_BIT(DDRD,bit_no);break;
    4200:	a1 e3       	ldi	r26, 0x31	; 49
    4202:	b0 e0       	ldi	r27, 0x00	; 0
    4204:	e1 e3       	ldi	r30, 0x31	; 49
    4206:	f0 e0       	ldi	r31, 0x00	; 0
    4208:	80 81       	ld	r24, Z
    420a:	48 2f       	mov	r20, r24
    420c:	8a 81       	ldd	r24, Y+2	; 0x02
    420e:	28 2f       	mov	r18, r24
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	81 e0       	ldi	r24, 0x01	; 1
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	02 2e       	mov	r0, r18
    4218:	02 c0       	rjmp	.+4      	; 0x421e <DIO_void_Set_Pin_Dirction+0x2b2>
    421a:	88 0f       	add	r24, r24
    421c:	99 1f       	adc	r25, r25
    421e:	0a 94       	dec	r0
    4220:	e2 f7       	brpl	.-8      	; 0x421a <DIO_void_Set_Pin_Dirction+0x2ae>
    4222:	84 2b       	or	r24, r20
    4224:	8c 93       	st	X, r24
    4226:	3b c0       	rjmp	.+118    	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>
		case PORTE_ID:SET_BIT(DDRE,bit_no);break;
    4228:	a2 e2       	ldi	r26, 0x22	; 34
    422a:	b0 e0       	ldi	r27, 0x00	; 0
    422c:	e2 e2       	ldi	r30, 0x22	; 34
    422e:	f0 e0       	ldi	r31, 0x00	; 0
    4230:	80 81       	ld	r24, Z
    4232:	48 2f       	mov	r20, r24
    4234:	8a 81       	ldd	r24, Y+2	; 0x02
    4236:	28 2f       	mov	r18, r24
    4238:	30 e0       	ldi	r19, 0x00	; 0
    423a:	81 e0       	ldi	r24, 0x01	; 1
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	02 2e       	mov	r0, r18
    4240:	02 c0       	rjmp	.+4      	; 0x4246 <DIO_void_Set_Pin_Dirction+0x2da>
    4242:	88 0f       	add	r24, r24
    4244:	99 1f       	adc	r25, r25
    4246:	0a 94       	dec	r0
    4248:	e2 f7       	brpl	.-8      	; 0x4242 <DIO_void_Set_Pin_Dirction+0x2d6>
    424a:	84 2b       	or	r24, r20
    424c:	8c 93       	st	X, r24
    424e:	27 c0       	rjmp	.+78     	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>
		case PORTF_ID:SET_BIT(DDRF,bit_no);break;
    4250:	a1 e6       	ldi	r26, 0x61	; 97
    4252:	b0 e0       	ldi	r27, 0x00	; 0
    4254:	e1 e6       	ldi	r30, 0x61	; 97
    4256:	f0 e0       	ldi	r31, 0x00	; 0
    4258:	80 81       	ld	r24, Z
    425a:	48 2f       	mov	r20, r24
    425c:	8a 81       	ldd	r24, Y+2	; 0x02
    425e:	28 2f       	mov	r18, r24
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	02 2e       	mov	r0, r18
    4268:	02 c0       	rjmp	.+4      	; 0x426e <DIO_void_Set_Pin_Dirction+0x302>
    426a:	88 0f       	add	r24, r24
    426c:	99 1f       	adc	r25, r25
    426e:	0a 94       	dec	r0
    4270:	e2 f7       	brpl	.-8      	; 0x426a <DIO_void_Set_Pin_Dirction+0x2fe>
    4272:	84 2b       	or	r24, r20
    4274:	8c 93       	st	X, r24
    4276:	13 c0       	rjmp	.+38     	; 0x429e <DIO_void_Set_Pin_Dirction+0x332>
		case PORTG_ID:SET_BIT(DDRG,bit_no);break;
    4278:	a4 e6       	ldi	r26, 0x64	; 100
    427a:	b0 e0       	ldi	r27, 0x00	; 0
    427c:	e4 e6       	ldi	r30, 0x64	; 100
    427e:	f0 e0       	ldi	r31, 0x00	; 0
    4280:	80 81       	ld	r24, Z
    4282:	48 2f       	mov	r20, r24
    4284:	8a 81       	ldd	r24, Y+2	; 0x02
    4286:	28 2f       	mov	r18, r24
    4288:	30 e0       	ldi	r19, 0x00	; 0
    428a:	81 e0       	ldi	r24, 0x01	; 1
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	02 2e       	mov	r0, r18
    4290:	02 c0       	rjmp	.+4      	; 0x4296 <DIO_void_Set_Pin_Dirction+0x32a>
    4292:	88 0f       	add	r24, r24
    4294:	99 1f       	adc	r25, r25
    4296:	0a 94       	dec	r0
    4298:	e2 f7       	brpl	.-8      	; 0x4292 <DIO_void_Set_Pin_Dirction+0x326>
    429a:	84 2b       	or	r24, r20
    429c:	8c 93       	st	X, r24
		}
	}
}
    429e:	27 96       	adiw	r28, 0x07	; 7
    42a0:	0f b6       	in	r0, 0x3f	; 63
    42a2:	f8 94       	cli
    42a4:	de bf       	out	0x3e, r29	; 62
    42a6:	0f be       	out	0x3f, r0	; 63
    42a8:	cd bf       	out	0x3d, r28	; 61
    42aa:	cf 91       	pop	r28
    42ac:	df 91       	pop	r29
    42ae:	08 95       	ret

000042b0 <DIO_void_Set_Pin_Value>:

void DIO_void_Set_Pin_Value(port_no_type port_no, bit_no_type bit_no, value_type value)
{
    42b0:	df 93       	push	r29
    42b2:	cf 93       	push	r28
    42b4:	cd b7       	in	r28, 0x3d	; 61
    42b6:	de b7       	in	r29, 0x3e	; 62
    42b8:	27 97       	sbiw	r28, 0x07	; 7
    42ba:	0f b6       	in	r0, 0x3f	; 63
    42bc:	f8 94       	cli
    42be:	de bf       	out	0x3e, r29	; 62
    42c0:	0f be       	out	0x3f, r0	; 63
    42c2:	cd bf       	out	0x3d, r28	; 61
    42c4:	89 83       	std	Y+1, r24	; 0x01
    42c6:	6a 83       	std	Y+2, r22	; 0x02
    42c8:	4b 83       	std	Y+3, r20	; 0x03
	if(value == LOW)
    42ca:	8b 81       	ldd	r24, Y+3	; 0x03
    42cc:	88 23       	and	r24, r24
    42ce:	09 f0       	breq	.+2      	; 0x42d2 <DIO_void_Set_Pin_Value+0x22>
    42d0:	c6 c0       	rjmp	.+396    	; 0x445e <DIO_void_Set_Pin_Value+0x1ae>
	{
		switch(port_no)
    42d2:	89 81       	ldd	r24, Y+1	; 0x01
    42d4:	28 2f       	mov	r18, r24
    42d6:	30 e0       	ldi	r19, 0x00	; 0
    42d8:	3f 83       	std	Y+7, r19	; 0x07
    42da:	2e 83       	std	Y+6, r18	; 0x06
    42dc:	8e 81       	ldd	r24, Y+6	; 0x06
    42de:	9f 81       	ldd	r25, Y+7	; 0x07
    42e0:	83 30       	cpi	r24, 0x03	; 3
    42e2:	91 05       	cpc	r25, r1
    42e4:	09 f4       	brne	.+2      	; 0x42e8 <DIO_void_Set_Pin_Value+0x38>
    42e6:	67 c0       	rjmp	.+206    	; 0x43b6 <DIO_void_Set_Pin_Value+0x106>
    42e8:	2e 81       	ldd	r18, Y+6	; 0x06
    42ea:	3f 81       	ldd	r19, Y+7	; 0x07
    42ec:	24 30       	cpi	r18, 0x04	; 4
    42ee:	31 05       	cpc	r19, r1
    42f0:	84 f4       	brge	.+32     	; 0x4312 <DIO_void_Set_Pin_Value+0x62>
    42f2:	8e 81       	ldd	r24, Y+6	; 0x06
    42f4:	9f 81       	ldd	r25, Y+7	; 0x07
    42f6:	81 30       	cpi	r24, 0x01	; 1
    42f8:	91 05       	cpc	r25, r1
    42fa:	99 f1       	breq	.+102    	; 0x4362 <DIO_void_Set_Pin_Value+0xb2>
    42fc:	2e 81       	ldd	r18, Y+6	; 0x06
    42fe:	3f 81       	ldd	r19, Y+7	; 0x07
    4300:	22 30       	cpi	r18, 0x02	; 2
    4302:	31 05       	cpc	r19, r1
    4304:	0c f0       	brlt	.+2      	; 0x4308 <DIO_void_Set_Pin_Value+0x58>
    4306:	42 c0       	rjmp	.+132    	; 0x438c <DIO_void_Set_Pin_Value+0xdc>
    4308:	8e 81       	ldd	r24, Y+6	; 0x06
    430a:	9f 81       	ldd	r25, Y+7	; 0x07
    430c:	00 97       	sbiw	r24, 0x00	; 0
    430e:	a1 f0       	breq	.+40     	; 0x4338 <DIO_void_Set_Pin_Value+0x88>
    4310:	68 c1       	rjmp	.+720    	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
    4312:	2e 81       	ldd	r18, Y+6	; 0x06
    4314:	3f 81       	ldd	r19, Y+7	; 0x07
    4316:	25 30       	cpi	r18, 0x05	; 5
    4318:	31 05       	cpc	r19, r1
    431a:	09 f4       	brne	.+2      	; 0x431e <DIO_void_Set_Pin_Value+0x6e>
    431c:	76 c0       	rjmp	.+236    	; 0x440a <DIO_void_Set_Pin_Value+0x15a>
    431e:	8e 81       	ldd	r24, Y+6	; 0x06
    4320:	9f 81       	ldd	r25, Y+7	; 0x07
    4322:	85 30       	cpi	r24, 0x05	; 5
    4324:	91 05       	cpc	r25, r1
    4326:	0c f4       	brge	.+2      	; 0x432a <DIO_void_Set_Pin_Value+0x7a>
    4328:	5b c0       	rjmp	.+182    	; 0x43e0 <DIO_void_Set_Pin_Value+0x130>
    432a:	2e 81       	ldd	r18, Y+6	; 0x06
    432c:	3f 81       	ldd	r19, Y+7	; 0x07
    432e:	26 30       	cpi	r18, 0x06	; 6
    4330:	31 05       	cpc	r19, r1
    4332:	09 f4       	brne	.+2      	; 0x4336 <DIO_void_Set_Pin_Value+0x86>
    4334:	7f c0       	rjmp	.+254    	; 0x4434 <DIO_void_Set_Pin_Value+0x184>
    4336:	55 c1       	rjmp	.+682    	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
		{
		case PORTA_ID:CLR_BIT(PORTA,bit_no);break;
    4338:	ab e3       	ldi	r26, 0x3B	; 59
    433a:	b0 e0       	ldi	r27, 0x00	; 0
    433c:	eb e3       	ldi	r30, 0x3B	; 59
    433e:	f0 e0       	ldi	r31, 0x00	; 0
    4340:	80 81       	ld	r24, Z
    4342:	48 2f       	mov	r20, r24
    4344:	8a 81       	ldd	r24, Y+2	; 0x02
    4346:	28 2f       	mov	r18, r24
    4348:	30 e0       	ldi	r19, 0x00	; 0
    434a:	81 e0       	ldi	r24, 0x01	; 1
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	02 2e       	mov	r0, r18
    4350:	02 c0       	rjmp	.+4      	; 0x4356 <DIO_void_Set_Pin_Value+0xa6>
    4352:	88 0f       	add	r24, r24
    4354:	99 1f       	adc	r25, r25
    4356:	0a 94       	dec	r0
    4358:	e2 f7       	brpl	.-8      	; 0x4352 <DIO_void_Set_Pin_Value+0xa2>
    435a:	80 95       	com	r24
    435c:	84 23       	and	r24, r20
    435e:	8c 93       	st	X, r24
    4360:	40 c1       	rjmp	.+640    	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
		case PORTB_ID:CLR_BIT(PORTB,bit_no);break;
    4362:	a8 e3       	ldi	r26, 0x38	; 56
    4364:	b0 e0       	ldi	r27, 0x00	; 0
    4366:	e8 e3       	ldi	r30, 0x38	; 56
    4368:	f0 e0       	ldi	r31, 0x00	; 0
    436a:	80 81       	ld	r24, Z
    436c:	48 2f       	mov	r20, r24
    436e:	8a 81       	ldd	r24, Y+2	; 0x02
    4370:	28 2f       	mov	r18, r24
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	02 2e       	mov	r0, r18
    437a:	02 c0       	rjmp	.+4      	; 0x4380 <DIO_void_Set_Pin_Value+0xd0>
    437c:	88 0f       	add	r24, r24
    437e:	99 1f       	adc	r25, r25
    4380:	0a 94       	dec	r0
    4382:	e2 f7       	brpl	.-8      	; 0x437c <DIO_void_Set_Pin_Value+0xcc>
    4384:	80 95       	com	r24
    4386:	84 23       	and	r24, r20
    4388:	8c 93       	st	X, r24
    438a:	2b c1       	rjmp	.+598    	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
		case PORTC_ID:CLR_BIT(PORTC,bit_no);break;
    438c:	a5 e3       	ldi	r26, 0x35	; 53
    438e:	b0 e0       	ldi	r27, 0x00	; 0
    4390:	e5 e3       	ldi	r30, 0x35	; 53
    4392:	f0 e0       	ldi	r31, 0x00	; 0
    4394:	80 81       	ld	r24, Z
    4396:	48 2f       	mov	r20, r24
    4398:	8a 81       	ldd	r24, Y+2	; 0x02
    439a:	28 2f       	mov	r18, r24
    439c:	30 e0       	ldi	r19, 0x00	; 0
    439e:	81 e0       	ldi	r24, 0x01	; 1
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	02 2e       	mov	r0, r18
    43a4:	02 c0       	rjmp	.+4      	; 0x43aa <DIO_void_Set_Pin_Value+0xfa>
    43a6:	88 0f       	add	r24, r24
    43a8:	99 1f       	adc	r25, r25
    43aa:	0a 94       	dec	r0
    43ac:	e2 f7       	brpl	.-8      	; 0x43a6 <DIO_void_Set_Pin_Value+0xf6>
    43ae:	80 95       	com	r24
    43b0:	84 23       	and	r24, r20
    43b2:	8c 93       	st	X, r24
    43b4:	16 c1       	rjmp	.+556    	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
		case PORTD_ID:CLR_BIT(PORTD,bit_no);break;
    43b6:	a2 e3       	ldi	r26, 0x32	; 50
    43b8:	b0 e0       	ldi	r27, 0x00	; 0
    43ba:	e2 e3       	ldi	r30, 0x32	; 50
    43bc:	f0 e0       	ldi	r31, 0x00	; 0
    43be:	80 81       	ld	r24, Z
    43c0:	48 2f       	mov	r20, r24
    43c2:	8a 81       	ldd	r24, Y+2	; 0x02
    43c4:	28 2f       	mov	r18, r24
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	81 e0       	ldi	r24, 0x01	; 1
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	02 2e       	mov	r0, r18
    43ce:	02 c0       	rjmp	.+4      	; 0x43d4 <DIO_void_Set_Pin_Value+0x124>
    43d0:	88 0f       	add	r24, r24
    43d2:	99 1f       	adc	r25, r25
    43d4:	0a 94       	dec	r0
    43d6:	e2 f7       	brpl	.-8      	; 0x43d0 <DIO_void_Set_Pin_Value+0x120>
    43d8:	80 95       	com	r24
    43da:	84 23       	and	r24, r20
    43dc:	8c 93       	st	X, r24
    43de:	01 c1       	rjmp	.+514    	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
		case PORTE_ID:CLR_BIT(PORTE,bit_no);break;
    43e0:	a3 e2       	ldi	r26, 0x23	; 35
    43e2:	b0 e0       	ldi	r27, 0x00	; 0
    43e4:	e3 e2       	ldi	r30, 0x23	; 35
    43e6:	f0 e0       	ldi	r31, 0x00	; 0
    43e8:	80 81       	ld	r24, Z
    43ea:	48 2f       	mov	r20, r24
    43ec:	8a 81       	ldd	r24, Y+2	; 0x02
    43ee:	28 2f       	mov	r18, r24
    43f0:	30 e0       	ldi	r19, 0x00	; 0
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	02 2e       	mov	r0, r18
    43f8:	02 c0       	rjmp	.+4      	; 0x43fe <DIO_void_Set_Pin_Value+0x14e>
    43fa:	88 0f       	add	r24, r24
    43fc:	99 1f       	adc	r25, r25
    43fe:	0a 94       	dec	r0
    4400:	e2 f7       	brpl	.-8      	; 0x43fa <DIO_void_Set_Pin_Value+0x14a>
    4402:	80 95       	com	r24
    4404:	84 23       	and	r24, r20
    4406:	8c 93       	st	X, r24
    4408:	ec c0       	rjmp	.+472    	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
		case PORTF_ID:CLR_BIT(PORTF,bit_no);break;
    440a:	a2 e6       	ldi	r26, 0x62	; 98
    440c:	b0 e0       	ldi	r27, 0x00	; 0
    440e:	e2 e6       	ldi	r30, 0x62	; 98
    4410:	f0 e0       	ldi	r31, 0x00	; 0
    4412:	80 81       	ld	r24, Z
    4414:	48 2f       	mov	r20, r24
    4416:	8a 81       	ldd	r24, Y+2	; 0x02
    4418:	28 2f       	mov	r18, r24
    441a:	30 e0       	ldi	r19, 0x00	; 0
    441c:	81 e0       	ldi	r24, 0x01	; 1
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	02 2e       	mov	r0, r18
    4422:	02 c0       	rjmp	.+4      	; 0x4428 <DIO_void_Set_Pin_Value+0x178>
    4424:	88 0f       	add	r24, r24
    4426:	99 1f       	adc	r25, r25
    4428:	0a 94       	dec	r0
    442a:	e2 f7       	brpl	.-8      	; 0x4424 <DIO_void_Set_Pin_Value+0x174>
    442c:	80 95       	com	r24
    442e:	84 23       	and	r24, r20
    4430:	8c 93       	st	X, r24
    4432:	d7 c0       	rjmp	.+430    	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
		case PORTG_ID:CLR_BIT(PORTG,bit_no);break;
    4434:	a5 e6       	ldi	r26, 0x65	; 101
    4436:	b0 e0       	ldi	r27, 0x00	; 0
    4438:	e5 e6       	ldi	r30, 0x65	; 101
    443a:	f0 e0       	ldi	r31, 0x00	; 0
    443c:	80 81       	ld	r24, Z
    443e:	48 2f       	mov	r20, r24
    4440:	8a 81       	ldd	r24, Y+2	; 0x02
    4442:	28 2f       	mov	r18, r24
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	81 e0       	ldi	r24, 0x01	; 1
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	02 2e       	mov	r0, r18
    444c:	02 c0       	rjmp	.+4      	; 0x4452 <DIO_void_Set_Pin_Value+0x1a2>
    444e:	88 0f       	add	r24, r24
    4450:	99 1f       	adc	r25, r25
    4452:	0a 94       	dec	r0
    4454:	e2 f7       	brpl	.-8      	; 0x444e <DIO_void_Set_Pin_Value+0x19e>
    4456:	80 95       	com	r24
    4458:	84 23       	and	r24, r20
    445a:	8c 93       	st	X, r24
    445c:	c2 c0       	rjmp	.+388    	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
		}
	}
	else if(value == HIGH)
    445e:	8b 81       	ldd	r24, Y+3	; 0x03
    4460:	81 30       	cpi	r24, 0x01	; 1
    4462:	09 f0       	breq	.+2      	; 0x4466 <DIO_void_Set_Pin_Value+0x1b6>
    4464:	be c0       	rjmp	.+380    	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
	{
		switch(port_no)
    4466:	89 81       	ldd	r24, Y+1	; 0x01
    4468:	28 2f       	mov	r18, r24
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	3d 83       	std	Y+5, r19	; 0x05
    446e:	2c 83       	std	Y+4, r18	; 0x04
    4470:	8c 81       	ldd	r24, Y+4	; 0x04
    4472:	9d 81       	ldd	r25, Y+5	; 0x05
    4474:	83 30       	cpi	r24, 0x03	; 3
    4476:	91 05       	cpc	r25, r1
    4478:	09 f4       	brne	.+2      	; 0x447c <DIO_void_Set_Pin_Value+0x1cc>
    447a:	64 c0       	rjmp	.+200    	; 0x4544 <DIO_void_Set_Pin_Value+0x294>
    447c:	2c 81       	ldd	r18, Y+4	; 0x04
    447e:	3d 81       	ldd	r19, Y+5	; 0x05
    4480:	24 30       	cpi	r18, 0x04	; 4
    4482:	31 05       	cpc	r19, r1
    4484:	84 f4       	brge	.+32     	; 0x44a6 <DIO_void_Set_Pin_Value+0x1f6>
    4486:	8c 81       	ldd	r24, Y+4	; 0x04
    4488:	9d 81       	ldd	r25, Y+5	; 0x05
    448a:	81 30       	cpi	r24, 0x01	; 1
    448c:	91 05       	cpc	r25, r1
    448e:	91 f1       	breq	.+100    	; 0x44f4 <DIO_void_Set_Pin_Value+0x244>
    4490:	2c 81       	ldd	r18, Y+4	; 0x04
    4492:	3d 81       	ldd	r19, Y+5	; 0x05
    4494:	22 30       	cpi	r18, 0x02	; 2
    4496:	31 05       	cpc	r19, r1
    4498:	0c f0       	brlt	.+2      	; 0x449c <DIO_void_Set_Pin_Value+0x1ec>
    449a:	40 c0       	rjmp	.+128    	; 0x451c <DIO_void_Set_Pin_Value+0x26c>
    449c:	8c 81       	ldd	r24, Y+4	; 0x04
    449e:	9d 81       	ldd	r25, Y+5	; 0x05
    44a0:	00 97       	sbiw	r24, 0x00	; 0
    44a2:	a1 f0       	breq	.+40     	; 0x44cc <DIO_void_Set_Pin_Value+0x21c>
    44a4:	9e c0       	rjmp	.+316    	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
    44a6:	2c 81       	ldd	r18, Y+4	; 0x04
    44a8:	3d 81       	ldd	r19, Y+5	; 0x05
    44aa:	25 30       	cpi	r18, 0x05	; 5
    44ac:	31 05       	cpc	r19, r1
    44ae:	09 f4       	brne	.+2      	; 0x44b2 <DIO_void_Set_Pin_Value+0x202>
    44b0:	71 c0       	rjmp	.+226    	; 0x4594 <DIO_void_Set_Pin_Value+0x2e4>
    44b2:	8c 81       	ldd	r24, Y+4	; 0x04
    44b4:	9d 81       	ldd	r25, Y+5	; 0x05
    44b6:	85 30       	cpi	r24, 0x05	; 5
    44b8:	91 05       	cpc	r25, r1
    44ba:	0c f4       	brge	.+2      	; 0x44be <DIO_void_Set_Pin_Value+0x20e>
    44bc:	57 c0       	rjmp	.+174    	; 0x456c <DIO_void_Set_Pin_Value+0x2bc>
    44be:	2c 81       	ldd	r18, Y+4	; 0x04
    44c0:	3d 81       	ldd	r19, Y+5	; 0x05
    44c2:	26 30       	cpi	r18, 0x06	; 6
    44c4:	31 05       	cpc	r19, r1
    44c6:	09 f4       	brne	.+2      	; 0x44ca <DIO_void_Set_Pin_Value+0x21a>
    44c8:	79 c0       	rjmp	.+242    	; 0x45bc <DIO_void_Set_Pin_Value+0x30c>
    44ca:	8b c0       	rjmp	.+278    	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
		{
		case PORTA_ID:SET_BIT(PORTA,bit_no);break;
    44cc:	ab e3       	ldi	r26, 0x3B	; 59
    44ce:	b0 e0       	ldi	r27, 0x00	; 0
    44d0:	eb e3       	ldi	r30, 0x3B	; 59
    44d2:	f0 e0       	ldi	r31, 0x00	; 0
    44d4:	80 81       	ld	r24, Z
    44d6:	48 2f       	mov	r20, r24
    44d8:	8a 81       	ldd	r24, Y+2	; 0x02
    44da:	28 2f       	mov	r18, r24
    44dc:	30 e0       	ldi	r19, 0x00	; 0
    44de:	81 e0       	ldi	r24, 0x01	; 1
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	02 2e       	mov	r0, r18
    44e4:	02 c0       	rjmp	.+4      	; 0x44ea <DIO_void_Set_Pin_Value+0x23a>
    44e6:	88 0f       	add	r24, r24
    44e8:	99 1f       	adc	r25, r25
    44ea:	0a 94       	dec	r0
    44ec:	e2 f7       	brpl	.-8      	; 0x44e6 <DIO_void_Set_Pin_Value+0x236>
    44ee:	84 2b       	or	r24, r20
    44f0:	8c 93       	st	X, r24
    44f2:	77 c0       	rjmp	.+238    	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
		case PORTB_ID:SET_BIT(PORTB,bit_no);break;
    44f4:	a8 e3       	ldi	r26, 0x38	; 56
    44f6:	b0 e0       	ldi	r27, 0x00	; 0
    44f8:	e8 e3       	ldi	r30, 0x38	; 56
    44fa:	f0 e0       	ldi	r31, 0x00	; 0
    44fc:	80 81       	ld	r24, Z
    44fe:	48 2f       	mov	r20, r24
    4500:	8a 81       	ldd	r24, Y+2	; 0x02
    4502:	28 2f       	mov	r18, r24
    4504:	30 e0       	ldi	r19, 0x00	; 0
    4506:	81 e0       	ldi	r24, 0x01	; 1
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	02 2e       	mov	r0, r18
    450c:	02 c0       	rjmp	.+4      	; 0x4512 <DIO_void_Set_Pin_Value+0x262>
    450e:	88 0f       	add	r24, r24
    4510:	99 1f       	adc	r25, r25
    4512:	0a 94       	dec	r0
    4514:	e2 f7       	brpl	.-8      	; 0x450e <DIO_void_Set_Pin_Value+0x25e>
    4516:	84 2b       	or	r24, r20
    4518:	8c 93       	st	X, r24
    451a:	63 c0       	rjmp	.+198    	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
		case PORTC_ID:SET_BIT(PORTC,bit_no);break;
    451c:	a5 e3       	ldi	r26, 0x35	; 53
    451e:	b0 e0       	ldi	r27, 0x00	; 0
    4520:	e5 e3       	ldi	r30, 0x35	; 53
    4522:	f0 e0       	ldi	r31, 0x00	; 0
    4524:	80 81       	ld	r24, Z
    4526:	48 2f       	mov	r20, r24
    4528:	8a 81       	ldd	r24, Y+2	; 0x02
    452a:	28 2f       	mov	r18, r24
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	81 e0       	ldi	r24, 0x01	; 1
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	02 2e       	mov	r0, r18
    4534:	02 c0       	rjmp	.+4      	; 0x453a <DIO_void_Set_Pin_Value+0x28a>
    4536:	88 0f       	add	r24, r24
    4538:	99 1f       	adc	r25, r25
    453a:	0a 94       	dec	r0
    453c:	e2 f7       	brpl	.-8      	; 0x4536 <DIO_void_Set_Pin_Value+0x286>
    453e:	84 2b       	or	r24, r20
    4540:	8c 93       	st	X, r24
    4542:	4f c0       	rjmp	.+158    	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
		case PORTD_ID:SET_BIT(PORTD,bit_no);break;
    4544:	a2 e3       	ldi	r26, 0x32	; 50
    4546:	b0 e0       	ldi	r27, 0x00	; 0
    4548:	e2 e3       	ldi	r30, 0x32	; 50
    454a:	f0 e0       	ldi	r31, 0x00	; 0
    454c:	80 81       	ld	r24, Z
    454e:	48 2f       	mov	r20, r24
    4550:	8a 81       	ldd	r24, Y+2	; 0x02
    4552:	28 2f       	mov	r18, r24
    4554:	30 e0       	ldi	r19, 0x00	; 0
    4556:	81 e0       	ldi	r24, 0x01	; 1
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	02 2e       	mov	r0, r18
    455c:	02 c0       	rjmp	.+4      	; 0x4562 <DIO_void_Set_Pin_Value+0x2b2>
    455e:	88 0f       	add	r24, r24
    4560:	99 1f       	adc	r25, r25
    4562:	0a 94       	dec	r0
    4564:	e2 f7       	brpl	.-8      	; 0x455e <DIO_void_Set_Pin_Value+0x2ae>
    4566:	84 2b       	or	r24, r20
    4568:	8c 93       	st	X, r24
    456a:	3b c0       	rjmp	.+118    	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
		case PORTE_ID:SET_BIT(PORTE,bit_no);break;
    456c:	a3 e2       	ldi	r26, 0x23	; 35
    456e:	b0 e0       	ldi	r27, 0x00	; 0
    4570:	e3 e2       	ldi	r30, 0x23	; 35
    4572:	f0 e0       	ldi	r31, 0x00	; 0
    4574:	80 81       	ld	r24, Z
    4576:	48 2f       	mov	r20, r24
    4578:	8a 81       	ldd	r24, Y+2	; 0x02
    457a:	28 2f       	mov	r18, r24
    457c:	30 e0       	ldi	r19, 0x00	; 0
    457e:	81 e0       	ldi	r24, 0x01	; 1
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	02 2e       	mov	r0, r18
    4584:	02 c0       	rjmp	.+4      	; 0x458a <DIO_void_Set_Pin_Value+0x2da>
    4586:	88 0f       	add	r24, r24
    4588:	99 1f       	adc	r25, r25
    458a:	0a 94       	dec	r0
    458c:	e2 f7       	brpl	.-8      	; 0x4586 <DIO_void_Set_Pin_Value+0x2d6>
    458e:	84 2b       	or	r24, r20
    4590:	8c 93       	st	X, r24
    4592:	27 c0       	rjmp	.+78     	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
		case PORTF_ID:SET_BIT(PORTF,bit_no);break;
    4594:	a2 e6       	ldi	r26, 0x62	; 98
    4596:	b0 e0       	ldi	r27, 0x00	; 0
    4598:	e2 e6       	ldi	r30, 0x62	; 98
    459a:	f0 e0       	ldi	r31, 0x00	; 0
    459c:	80 81       	ld	r24, Z
    459e:	48 2f       	mov	r20, r24
    45a0:	8a 81       	ldd	r24, Y+2	; 0x02
    45a2:	28 2f       	mov	r18, r24
    45a4:	30 e0       	ldi	r19, 0x00	; 0
    45a6:	81 e0       	ldi	r24, 0x01	; 1
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	02 2e       	mov	r0, r18
    45ac:	02 c0       	rjmp	.+4      	; 0x45b2 <DIO_void_Set_Pin_Value+0x302>
    45ae:	88 0f       	add	r24, r24
    45b0:	99 1f       	adc	r25, r25
    45b2:	0a 94       	dec	r0
    45b4:	e2 f7       	brpl	.-8      	; 0x45ae <DIO_void_Set_Pin_Value+0x2fe>
    45b6:	84 2b       	or	r24, r20
    45b8:	8c 93       	st	X, r24
    45ba:	13 c0       	rjmp	.+38     	; 0x45e2 <DIO_void_Set_Pin_Value+0x332>
		case PORTG_ID:SET_BIT(PORTG,bit_no);break;
    45bc:	a5 e6       	ldi	r26, 0x65	; 101
    45be:	b0 e0       	ldi	r27, 0x00	; 0
    45c0:	e5 e6       	ldi	r30, 0x65	; 101
    45c2:	f0 e0       	ldi	r31, 0x00	; 0
    45c4:	80 81       	ld	r24, Z
    45c6:	48 2f       	mov	r20, r24
    45c8:	8a 81       	ldd	r24, Y+2	; 0x02
    45ca:	28 2f       	mov	r18, r24
    45cc:	30 e0       	ldi	r19, 0x00	; 0
    45ce:	81 e0       	ldi	r24, 0x01	; 1
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	02 2e       	mov	r0, r18
    45d4:	02 c0       	rjmp	.+4      	; 0x45da <DIO_void_Set_Pin_Value+0x32a>
    45d6:	88 0f       	add	r24, r24
    45d8:	99 1f       	adc	r25, r25
    45da:	0a 94       	dec	r0
    45dc:	e2 f7       	brpl	.-8      	; 0x45d6 <DIO_void_Set_Pin_Value+0x326>
    45de:	84 2b       	or	r24, r20
    45e0:	8c 93       	st	X, r24
		}
	}
}
    45e2:	27 96       	adiw	r28, 0x07	; 7
    45e4:	0f b6       	in	r0, 0x3f	; 63
    45e6:	f8 94       	cli
    45e8:	de bf       	out	0x3e, r29	; 62
    45ea:	0f be       	out	0x3f, r0	; 63
    45ec:	cd bf       	out	0x3d, r28	; 61
    45ee:	cf 91       	pop	r28
    45f0:	df 91       	pop	r29
    45f2:	08 95       	ret

000045f4 <DIO_value_type_Get_Pin_Value>:

value_type DIO_value_type_Get_Pin_Value(port_no_type port_no, bit_no_type bit_no)
{
    45f4:	df 93       	push	r29
    45f6:	cf 93       	push	r28
    45f8:	00 d0       	rcall	.+0      	; 0x45fa <DIO_value_type_Get_Pin_Value+0x6>
    45fa:	00 d0       	rcall	.+0      	; 0x45fc <DIO_value_type_Get_Pin_Value+0x8>
    45fc:	0f 92       	push	r0
    45fe:	cd b7       	in	r28, 0x3d	; 61
    4600:	de b7       	in	r29, 0x3e	; 62
    4602:	8a 83       	std	Y+2, r24	; 0x02
    4604:	6b 83       	std	Y+3, r22	; 0x03
	value_type return_value;
	switch(port_no)
    4606:	8a 81       	ldd	r24, Y+2	; 0x02
    4608:	28 2f       	mov	r18, r24
    460a:	30 e0       	ldi	r19, 0x00	; 0
    460c:	3d 83       	std	Y+5, r19	; 0x05
    460e:	2c 83       	std	Y+4, r18	; 0x04
    4610:	4c 81       	ldd	r20, Y+4	; 0x04
    4612:	5d 81       	ldd	r21, Y+5	; 0x05
    4614:	43 30       	cpi	r20, 0x03	; 3
    4616:	51 05       	cpc	r21, r1
    4618:	09 f4       	brne	.+2      	; 0x461c <DIO_value_type_Get_Pin_Value+0x28>
    461a:	5e c0       	rjmp	.+188    	; 0x46d8 <DIO_value_type_Get_Pin_Value+0xe4>
    461c:	8c 81       	ldd	r24, Y+4	; 0x04
    461e:	9d 81       	ldd	r25, Y+5	; 0x05
    4620:	84 30       	cpi	r24, 0x04	; 4
    4622:	91 05       	cpc	r25, r1
    4624:	84 f4       	brge	.+32     	; 0x4646 <DIO_value_type_Get_Pin_Value+0x52>
    4626:	2c 81       	ldd	r18, Y+4	; 0x04
    4628:	3d 81       	ldd	r19, Y+5	; 0x05
    462a:	21 30       	cpi	r18, 0x01	; 1
    462c:	31 05       	cpc	r19, r1
    462e:	81 f1       	breq	.+96     	; 0x4690 <DIO_value_type_Get_Pin_Value+0x9c>
    4630:	4c 81       	ldd	r20, Y+4	; 0x04
    4632:	5d 81       	ldd	r21, Y+5	; 0x05
    4634:	42 30       	cpi	r20, 0x02	; 2
    4636:	51 05       	cpc	r21, r1
    4638:	0c f0       	brlt	.+2      	; 0x463c <DIO_value_type_Get_Pin_Value+0x48>
    463a:	3c c0       	rjmp	.+120    	; 0x46b4 <DIO_value_type_Get_Pin_Value+0xc0>
    463c:	8c 81       	ldd	r24, Y+4	; 0x04
    463e:	9d 81       	ldd	r25, Y+5	; 0x05
    4640:	00 97       	sbiw	r24, 0x00	; 0
    4642:	a1 f0       	breq	.+40     	; 0x466c <DIO_value_type_Get_Pin_Value+0x78>
    4644:	90 c0       	rjmp	.+288    	; 0x4766 <DIO_value_type_Get_Pin_Value+0x172>
    4646:	2c 81       	ldd	r18, Y+4	; 0x04
    4648:	3d 81       	ldd	r19, Y+5	; 0x05
    464a:	25 30       	cpi	r18, 0x05	; 5
    464c:	31 05       	cpc	r19, r1
    464e:	09 f4       	brne	.+2      	; 0x4652 <DIO_value_type_Get_Pin_Value+0x5e>
    4650:	67 c0       	rjmp	.+206    	; 0x4720 <DIO_value_type_Get_Pin_Value+0x12c>
    4652:	4c 81       	ldd	r20, Y+4	; 0x04
    4654:	5d 81       	ldd	r21, Y+5	; 0x05
    4656:	45 30       	cpi	r20, 0x05	; 5
    4658:	51 05       	cpc	r21, r1
    465a:	0c f4       	brge	.+2      	; 0x465e <DIO_value_type_Get_Pin_Value+0x6a>
    465c:	4f c0       	rjmp	.+158    	; 0x46fc <DIO_value_type_Get_Pin_Value+0x108>
    465e:	8c 81       	ldd	r24, Y+4	; 0x04
    4660:	9d 81       	ldd	r25, Y+5	; 0x05
    4662:	86 30       	cpi	r24, 0x06	; 6
    4664:	91 05       	cpc	r25, r1
    4666:	09 f4       	brne	.+2      	; 0x466a <DIO_value_type_Get_Pin_Value+0x76>
    4668:	6d c0       	rjmp	.+218    	; 0x4744 <DIO_value_type_Get_Pin_Value+0x150>
    466a:	7d c0       	rjmp	.+250    	; 0x4766 <DIO_value_type_Get_Pin_Value+0x172>
	{
	case PORTA_ID:return_value = GET_BIT(PINA,bit_no);break;
    466c:	e9 e3       	ldi	r30, 0x39	; 57
    466e:	f0 e0       	ldi	r31, 0x00	; 0
    4670:	80 81       	ld	r24, Z
    4672:	28 2f       	mov	r18, r24
    4674:	30 e0       	ldi	r19, 0x00	; 0
    4676:	8b 81       	ldd	r24, Y+3	; 0x03
    4678:	88 2f       	mov	r24, r24
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	a9 01       	movw	r20, r18
    467e:	02 c0       	rjmp	.+4      	; 0x4684 <DIO_value_type_Get_Pin_Value+0x90>
    4680:	55 95       	asr	r21
    4682:	47 95       	ror	r20
    4684:	8a 95       	dec	r24
    4686:	e2 f7       	brpl	.-8      	; 0x4680 <DIO_value_type_Get_Pin_Value+0x8c>
    4688:	ca 01       	movw	r24, r20
    468a:	81 70       	andi	r24, 0x01	; 1
    468c:	89 83       	std	Y+1, r24	; 0x01
    468e:	6b c0       	rjmp	.+214    	; 0x4766 <DIO_value_type_Get_Pin_Value+0x172>
	case PORTB_ID:return_value = GET_BIT(PINB,bit_no);break;
    4690:	e6 e3       	ldi	r30, 0x36	; 54
    4692:	f0 e0       	ldi	r31, 0x00	; 0
    4694:	80 81       	ld	r24, Z
    4696:	28 2f       	mov	r18, r24
    4698:	30 e0       	ldi	r19, 0x00	; 0
    469a:	8b 81       	ldd	r24, Y+3	; 0x03
    469c:	88 2f       	mov	r24, r24
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	a9 01       	movw	r20, r18
    46a2:	02 c0       	rjmp	.+4      	; 0x46a8 <DIO_value_type_Get_Pin_Value+0xb4>
    46a4:	55 95       	asr	r21
    46a6:	47 95       	ror	r20
    46a8:	8a 95       	dec	r24
    46aa:	e2 f7       	brpl	.-8      	; 0x46a4 <DIO_value_type_Get_Pin_Value+0xb0>
    46ac:	ca 01       	movw	r24, r20
    46ae:	81 70       	andi	r24, 0x01	; 1
    46b0:	89 83       	std	Y+1, r24	; 0x01
    46b2:	59 c0       	rjmp	.+178    	; 0x4766 <DIO_value_type_Get_Pin_Value+0x172>
	case PORTC_ID:return_value = GET_BIT(PINC,bit_no);break;
    46b4:	e3 e3       	ldi	r30, 0x33	; 51
    46b6:	f0 e0       	ldi	r31, 0x00	; 0
    46b8:	80 81       	ld	r24, Z
    46ba:	28 2f       	mov	r18, r24
    46bc:	30 e0       	ldi	r19, 0x00	; 0
    46be:	8b 81       	ldd	r24, Y+3	; 0x03
    46c0:	88 2f       	mov	r24, r24
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	a9 01       	movw	r20, r18
    46c6:	02 c0       	rjmp	.+4      	; 0x46cc <DIO_value_type_Get_Pin_Value+0xd8>
    46c8:	55 95       	asr	r21
    46ca:	47 95       	ror	r20
    46cc:	8a 95       	dec	r24
    46ce:	e2 f7       	brpl	.-8      	; 0x46c8 <DIO_value_type_Get_Pin_Value+0xd4>
    46d0:	ca 01       	movw	r24, r20
    46d2:	81 70       	andi	r24, 0x01	; 1
    46d4:	89 83       	std	Y+1, r24	; 0x01
    46d6:	47 c0       	rjmp	.+142    	; 0x4766 <DIO_value_type_Get_Pin_Value+0x172>
	case PORTD_ID:return_value = GET_BIT(PIND,bit_no);break;
    46d8:	e0 e3       	ldi	r30, 0x30	; 48
    46da:	f0 e0       	ldi	r31, 0x00	; 0
    46dc:	80 81       	ld	r24, Z
    46de:	28 2f       	mov	r18, r24
    46e0:	30 e0       	ldi	r19, 0x00	; 0
    46e2:	8b 81       	ldd	r24, Y+3	; 0x03
    46e4:	88 2f       	mov	r24, r24
    46e6:	90 e0       	ldi	r25, 0x00	; 0
    46e8:	a9 01       	movw	r20, r18
    46ea:	02 c0       	rjmp	.+4      	; 0x46f0 <DIO_value_type_Get_Pin_Value+0xfc>
    46ec:	55 95       	asr	r21
    46ee:	47 95       	ror	r20
    46f0:	8a 95       	dec	r24
    46f2:	e2 f7       	brpl	.-8      	; 0x46ec <DIO_value_type_Get_Pin_Value+0xf8>
    46f4:	ca 01       	movw	r24, r20
    46f6:	81 70       	andi	r24, 0x01	; 1
    46f8:	89 83       	std	Y+1, r24	; 0x01
    46fa:	35 c0       	rjmp	.+106    	; 0x4766 <DIO_value_type_Get_Pin_Value+0x172>
	case PORTE_ID:return_value = GET_BIT(PINE,bit_no);break;
    46fc:	e1 e2       	ldi	r30, 0x21	; 33
    46fe:	f0 e0       	ldi	r31, 0x00	; 0
    4700:	80 81       	ld	r24, Z
    4702:	28 2f       	mov	r18, r24
    4704:	30 e0       	ldi	r19, 0x00	; 0
    4706:	8b 81       	ldd	r24, Y+3	; 0x03
    4708:	88 2f       	mov	r24, r24
    470a:	90 e0       	ldi	r25, 0x00	; 0
    470c:	a9 01       	movw	r20, r18
    470e:	02 c0       	rjmp	.+4      	; 0x4714 <DIO_value_type_Get_Pin_Value+0x120>
    4710:	55 95       	asr	r21
    4712:	47 95       	ror	r20
    4714:	8a 95       	dec	r24
    4716:	e2 f7       	brpl	.-8      	; 0x4710 <DIO_value_type_Get_Pin_Value+0x11c>
    4718:	ca 01       	movw	r24, r20
    471a:	81 70       	andi	r24, 0x01	; 1
    471c:	89 83       	std	Y+1, r24	; 0x01
    471e:	23 c0       	rjmp	.+70     	; 0x4766 <DIO_value_type_Get_Pin_Value+0x172>
	case PORTF_ID:return_value = GET_BIT(PINF,bit_no);break;
    4720:	e0 e2       	ldi	r30, 0x20	; 32
    4722:	f0 e0       	ldi	r31, 0x00	; 0
    4724:	80 81       	ld	r24, Z
    4726:	28 2f       	mov	r18, r24
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	8b 81       	ldd	r24, Y+3	; 0x03
    472c:	88 2f       	mov	r24, r24
    472e:	90 e0       	ldi	r25, 0x00	; 0
    4730:	a9 01       	movw	r20, r18
    4732:	02 c0       	rjmp	.+4      	; 0x4738 <DIO_value_type_Get_Pin_Value+0x144>
    4734:	55 95       	asr	r21
    4736:	47 95       	ror	r20
    4738:	8a 95       	dec	r24
    473a:	e2 f7       	brpl	.-8      	; 0x4734 <DIO_value_type_Get_Pin_Value+0x140>
    473c:	ca 01       	movw	r24, r20
    473e:	81 70       	andi	r24, 0x01	; 1
    4740:	89 83       	std	Y+1, r24	; 0x01
    4742:	11 c0       	rjmp	.+34     	; 0x4766 <DIO_value_type_Get_Pin_Value+0x172>
	case PORTG_ID:return_value = GET_BIT(PING,bit_no);break;
    4744:	e3 e6       	ldi	r30, 0x63	; 99
    4746:	f0 e0       	ldi	r31, 0x00	; 0
    4748:	80 81       	ld	r24, Z
    474a:	28 2f       	mov	r18, r24
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	8b 81       	ldd	r24, Y+3	; 0x03
    4750:	88 2f       	mov	r24, r24
    4752:	90 e0       	ldi	r25, 0x00	; 0
    4754:	a9 01       	movw	r20, r18
    4756:	02 c0       	rjmp	.+4      	; 0x475c <DIO_value_type_Get_Pin_Value+0x168>
    4758:	55 95       	asr	r21
    475a:	47 95       	ror	r20
    475c:	8a 95       	dec	r24
    475e:	e2 f7       	brpl	.-8      	; 0x4758 <DIO_value_type_Get_Pin_Value+0x164>
    4760:	ca 01       	movw	r24, r20
    4762:	81 70       	andi	r24, 0x01	; 1
    4764:	89 83       	std	Y+1, r24	; 0x01
	}

	return return_value;
    4766:	89 81       	ldd	r24, Y+1	; 0x01
}
    4768:	0f 90       	pop	r0
    476a:	0f 90       	pop	r0
    476c:	0f 90       	pop	r0
    476e:	0f 90       	pop	r0
    4770:	0f 90       	pop	r0
    4772:	cf 91       	pop	r28
    4774:	df 91       	pop	r29
    4776:	08 95       	ret

00004778 <DIO_void_Set_Port_Dirction>:

void DIO_void_Set_Port_Dirction(port_no_type port_no, uint8 direction)
{
    4778:	df 93       	push	r29
    477a:	cf 93       	push	r28
    477c:	00 d0       	rcall	.+0      	; 0x477e <DIO_void_Set_Port_Dirction+0x6>
    477e:	00 d0       	rcall	.+0      	; 0x4780 <DIO_void_Set_Port_Dirction+0x8>
    4780:	cd b7       	in	r28, 0x3d	; 61
    4782:	de b7       	in	r29, 0x3e	; 62
    4784:	89 83       	std	Y+1, r24	; 0x01
    4786:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_no)
    4788:	89 81       	ldd	r24, Y+1	; 0x01
    478a:	28 2f       	mov	r18, r24
    478c:	30 e0       	ldi	r19, 0x00	; 0
    478e:	3c 83       	std	Y+4, r19	; 0x04
    4790:	2b 83       	std	Y+3, r18	; 0x03
    4792:	8b 81       	ldd	r24, Y+3	; 0x03
    4794:	9c 81       	ldd	r25, Y+4	; 0x04
    4796:	83 30       	cpi	r24, 0x03	; 3
    4798:	91 05       	cpc	r25, r1
    479a:	99 f1       	breq	.+102    	; 0x4802 <DIO_void_Set_Port_Dirction+0x8a>
    479c:	2b 81       	ldd	r18, Y+3	; 0x03
    479e:	3c 81       	ldd	r19, Y+4	; 0x04
    47a0:	24 30       	cpi	r18, 0x04	; 4
    47a2:	31 05       	cpc	r19, r1
    47a4:	7c f4       	brge	.+30     	; 0x47c4 <DIO_void_Set_Port_Dirction+0x4c>
    47a6:	8b 81       	ldd	r24, Y+3	; 0x03
    47a8:	9c 81       	ldd	r25, Y+4	; 0x04
    47aa:	81 30       	cpi	r24, 0x01	; 1
    47ac:	91 05       	cpc	r25, r1
    47ae:	f9 f0       	breq	.+62     	; 0x47ee <DIO_void_Set_Port_Dirction+0x76>
    47b0:	2b 81       	ldd	r18, Y+3	; 0x03
    47b2:	3c 81       	ldd	r19, Y+4	; 0x04
    47b4:	22 30       	cpi	r18, 0x02	; 2
    47b6:	31 05       	cpc	r19, r1
    47b8:	fc f4       	brge	.+62     	; 0x47f8 <DIO_void_Set_Port_Dirction+0x80>
    47ba:	8b 81       	ldd	r24, Y+3	; 0x03
    47bc:	9c 81       	ldd	r25, Y+4	; 0x04
    47be:	00 97       	sbiw	r24, 0x00	; 0
    47c0:	89 f0       	breq	.+34     	; 0x47e4 <DIO_void_Set_Port_Dirction+0x6c>
    47c2:	32 c0       	rjmp	.+100    	; 0x4828 <DIO_void_Set_Port_Dirction+0xb0>
    47c4:	2b 81       	ldd	r18, Y+3	; 0x03
    47c6:	3c 81       	ldd	r19, Y+4	; 0x04
    47c8:	25 30       	cpi	r18, 0x05	; 5
    47ca:	31 05       	cpc	r19, r1
    47cc:	21 f1       	breq	.+72     	; 0x4816 <DIO_void_Set_Port_Dirction+0x9e>
    47ce:	8b 81       	ldd	r24, Y+3	; 0x03
    47d0:	9c 81       	ldd	r25, Y+4	; 0x04
    47d2:	85 30       	cpi	r24, 0x05	; 5
    47d4:	91 05       	cpc	r25, r1
    47d6:	d4 f0       	brlt	.+52     	; 0x480c <DIO_void_Set_Port_Dirction+0x94>
    47d8:	2b 81       	ldd	r18, Y+3	; 0x03
    47da:	3c 81       	ldd	r19, Y+4	; 0x04
    47dc:	26 30       	cpi	r18, 0x06	; 6
    47de:	31 05       	cpc	r19, r1
    47e0:	f9 f0       	breq	.+62     	; 0x4820 <DIO_void_Set_Port_Dirction+0xa8>
    47e2:	22 c0       	rjmp	.+68     	; 0x4828 <DIO_void_Set_Port_Dirction+0xb0>
	{
	case PORTA_ID: DDRA = direction; break;
    47e4:	ea e3       	ldi	r30, 0x3A	; 58
    47e6:	f0 e0       	ldi	r31, 0x00	; 0
    47e8:	8a 81       	ldd	r24, Y+2	; 0x02
    47ea:	80 83       	st	Z, r24
    47ec:	1d c0       	rjmp	.+58     	; 0x4828 <DIO_void_Set_Port_Dirction+0xb0>
	case PORTB_ID: DDRB = direction; break;
    47ee:	e7 e3       	ldi	r30, 0x37	; 55
    47f0:	f0 e0       	ldi	r31, 0x00	; 0
    47f2:	8a 81       	ldd	r24, Y+2	; 0x02
    47f4:	80 83       	st	Z, r24
    47f6:	18 c0       	rjmp	.+48     	; 0x4828 <DIO_void_Set_Port_Dirction+0xb0>
	case PORTC_ID: DDRC = direction; break;
    47f8:	e4 e3       	ldi	r30, 0x34	; 52
    47fa:	f0 e0       	ldi	r31, 0x00	; 0
    47fc:	8a 81       	ldd	r24, Y+2	; 0x02
    47fe:	80 83       	st	Z, r24
    4800:	13 c0       	rjmp	.+38     	; 0x4828 <DIO_void_Set_Port_Dirction+0xb0>
	case PORTD_ID: DDRD = direction; break;
    4802:	e1 e3       	ldi	r30, 0x31	; 49
    4804:	f0 e0       	ldi	r31, 0x00	; 0
    4806:	8a 81       	ldd	r24, Y+2	; 0x02
    4808:	80 83       	st	Z, r24
    480a:	0e c0       	rjmp	.+28     	; 0x4828 <DIO_void_Set_Port_Dirction+0xb0>
	case PORTE_ID: DDRE = direction; break;
    480c:	e2 e2       	ldi	r30, 0x22	; 34
    480e:	f0 e0       	ldi	r31, 0x00	; 0
    4810:	8a 81       	ldd	r24, Y+2	; 0x02
    4812:	80 83       	st	Z, r24
    4814:	09 c0       	rjmp	.+18     	; 0x4828 <DIO_void_Set_Port_Dirction+0xb0>
	case PORTF_ID: DDRF = direction; break;
    4816:	e1 e6       	ldi	r30, 0x61	; 97
    4818:	f0 e0       	ldi	r31, 0x00	; 0
    481a:	8a 81       	ldd	r24, Y+2	; 0x02
    481c:	80 83       	st	Z, r24
    481e:	04 c0       	rjmp	.+8      	; 0x4828 <DIO_void_Set_Port_Dirction+0xb0>
	case PORTG_ID: DDRG = direction; break;
    4820:	e4 e6       	ldi	r30, 0x64	; 100
    4822:	f0 e0       	ldi	r31, 0x00	; 0
    4824:	8a 81       	ldd	r24, Y+2	; 0x02
    4826:	80 83       	st	Z, r24
	}
}
    4828:	0f 90       	pop	r0
    482a:	0f 90       	pop	r0
    482c:	0f 90       	pop	r0
    482e:	0f 90       	pop	r0
    4830:	cf 91       	pop	r28
    4832:	df 91       	pop	r29
    4834:	08 95       	ret

00004836 <DIO_void_Set_Port_Value>:

void DIO_void_Set_Port_Value(port_no_type port_no, uint8 value)
{
    4836:	df 93       	push	r29
    4838:	cf 93       	push	r28
    483a:	00 d0       	rcall	.+0      	; 0x483c <DIO_void_Set_Port_Value+0x6>
    483c:	00 d0       	rcall	.+0      	; 0x483e <DIO_void_Set_Port_Value+0x8>
    483e:	cd b7       	in	r28, 0x3d	; 61
    4840:	de b7       	in	r29, 0x3e	; 62
    4842:	89 83       	std	Y+1, r24	; 0x01
    4844:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_no)
    4846:	89 81       	ldd	r24, Y+1	; 0x01
    4848:	28 2f       	mov	r18, r24
    484a:	30 e0       	ldi	r19, 0x00	; 0
    484c:	3c 83       	std	Y+4, r19	; 0x04
    484e:	2b 83       	std	Y+3, r18	; 0x03
    4850:	8b 81       	ldd	r24, Y+3	; 0x03
    4852:	9c 81       	ldd	r25, Y+4	; 0x04
    4854:	83 30       	cpi	r24, 0x03	; 3
    4856:	91 05       	cpc	r25, r1
    4858:	99 f1       	breq	.+102    	; 0x48c0 <DIO_void_Set_Port_Value+0x8a>
    485a:	2b 81       	ldd	r18, Y+3	; 0x03
    485c:	3c 81       	ldd	r19, Y+4	; 0x04
    485e:	24 30       	cpi	r18, 0x04	; 4
    4860:	31 05       	cpc	r19, r1
    4862:	7c f4       	brge	.+30     	; 0x4882 <DIO_void_Set_Port_Value+0x4c>
    4864:	8b 81       	ldd	r24, Y+3	; 0x03
    4866:	9c 81       	ldd	r25, Y+4	; 0x04
    4868:	81 30       	cpi	r24, 0x01	; 1
    486a:	91 05       	cpc	r25, r1
    486c:	f9 f0       	breq	.+62     	; 0x48ac <DIO_void_Set_Port_Value+0x76>
    486e:	2b 81       	ldd	r18, Y+3	; 0x03
    4870:	3c 81       	ldd	r19, Y+4	; 0x04
    4872:	22 30       	cpi	r18, 0x02	; 2
    4874:	31 05       	cpc	r19, r1
    4876:	fc f4       	brge	.+62     	; 0x48b6 <DIO_void_Set_Port_Value+0x80>
    4878:	8b 81       	ldd	r24, Y+3	; 0x03
    487a:	9c 81       	ldd	r25, Y+4	; 0x04
    487c:	00 97       	sbiw	r24, 0x00	; 0
    487e:	89 f0       	breq	.+34     	; 0x48a2 <DIO_void_Set_Port_Value+0x6c>
    4880:	32 c0       	rjmp	.+100    	; 0x48e6 <DIO_void_Set_Port_Value+0xb0>
    4882:	2b 81       	ldd	r18, Y+3	; 0x03
    4884:	3c 81       	ldd	r19, Y+4	; 0x04
    4886:	25 30       	cpi	r18, 0x05	; 5
    4888:	31 05       	cpc	r19, r1
    488a:	21 f1       	breq	.+72     	; 0x48d4 <DIO_void_Set_Port_Value+0x9e>
    488c:	8b 81       	ldd	r24, Y+3	; 0x03
    488e:	9c 81       	ldd	r25, Y+4	; 0x04
    4890:	85 30       	cpi	r24, 0x05	; 5
    4892:	91 05       	cpc	r25, r1
    4894:	d4 f0       	brlt	.+52     	; 0x48ca <DIO_void_Set_Port_Value+0x94>
    4896:	2b 81       	ldd	r18, Y+3	; 0x03
    4898:	3c 81       	ldd	r19, Y+4	; 0x04
    489a:	26 30       	cpi	r18, 0x06	; 6
    489c:	31 05       	cpc	r19, r1
    489e:	f9 f0       	breq	.+62     	; 0x48de <DIO_void_Set_Port_Value+0xa8>
    48a0:	22 c0       	rjmp	.+68     	; 0x48e6 <DIO_void_Set_Port_Value+0xb0>
	{
	case PORTA_ID: PORTA = value; break;
    48a2:	eb e3       	ldi	r30, 0x3B	; 59
    48a4:	f0 e0       	ldi	r31, 0x00	; 0
    48a6:	8a 81       	ldd	r24, Y+2	; 0x02
    48a8:	80 83       	st	Z, r24
    48aa:	1d c0       	rjmp	.+58     	; 0x48e6 <DIO_void_Set_Port_Value+0xb0>
	case PORTB_ID: PORTB = value; break;
    48ac:	e8 e3       	ldi	r30, 0x38	; 56
    48ae:	f0 e0       	ldi	r31, 0x00	; 0
    48b0:	8a 81       	ldd	r24, Y+2	; 0x02
    48b2:	80 83       	st	Z, r24
    48b4:	18 c0       	rjmp	.+48     	; 0x48e6 <DIO_void_Set_Port_Value+0xb0>
	case PORTC_ID: PORTC = value; break;
    48b6:	e5 e3       	ldi	r30, 0x35	; 53
    48b8:	f0 e0       	ldi	r31, 0x00	; 0
    48ba:	8a 81       	ldd	r24, Y+2	; 0x02
    48bc:	80 83       	st	Z, r24
    48be:	13 c0       	rjmp	.+38     	; 0x48e6 <DIO_void_Set_Port_Value+0xb0>
	case PORTD_ID: PORTD = value; break;
    48c0:	e2 e3       	ldi	r30, 0x32	; 50
    48c2:	f0 e0       	ldi	r31, 0x00	; 0
    48c4:	8a 81       	ldd	r24, Y+2	; 0x02
    48c6:	80 83       	st	Z, r24
    48c8:	0e c0       	rjmp	.+28     	; 0x48e6 <DIO_void_Set_Port_Value+0xb0>
	case PORTE_ID: PORTE = value; break;
    48ca:	e3 e2       	ldi	r30, 0x23	; 35
    48cc:	f0 e0       	ldi	r31, 0x00	; 0
    48ce:	8a 81       	ldd	r24, Y+2	; 0x02
    48d0:	80 83       	st	Z, r24
    48d2:	09 c0       	rjmp	.+18     	; 0x48e6 <DIO_void_Set_Port_Value+0xb0>
	case PORTF_ID: PORTF = value; break;
    48d4:	e2 e6       	ldi	r30, 0x62	; 98
    48d6:	f0 e0       	ldi	r31, 0x00	; 0
    48d8:	8a 81       	ldd	r24, Y+2	; 0x02
    48da:	80 83       	st	Z, r24
    48dc:	04 c0       	rjmp	.+8      	; 0x48e6 <DIO_void_Set_Port_Value+0xb0>
	case PORTG_ID: PORTG = value; break;
    48de:	e5 e6       	ldi	r30, 0x65	; 101
    48e0:	f0 e0       	ldi	r31, 0x00	; 0
    48e2:	8a 81       	ldd	r24, Y+2	; 0x02
    48e4:	80 83       	st	Z, r24
	}
}
    48e6:	0f 90       	pop	r0
    48e8:	0f 90       	pop	r0
    48ea:	0f 90       	pop	r0
    48ec:	0f 90       	pop	r0
    48ee:	cf 91       	pop	r28
    48f0:	df 91       	pop	r29
    48f2:	08 95       	ret

000048f4 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L>:

void DIO_void_Set_Port_ValueNIPPLE_H_OR_L(port_no_type port_no, uint8 value,NIPPLE_H_OR_L_type nipple)
{
    48f4:	df 93       	push	r29
    48f6:	cf 93       	push	r28
    48f8:	cd b7       	in	r28, 0x3d	; 61
    48fa:	de b7       	in	r29, 0x3e	; 62
    48fc:	27 97       	sbiw	r28, 0x07	; 7
    48fe:	0f b6       	in	r0, 0x3f	; 63
    4900:	f8 94       	cli
    4902:	de bf       	out	0x3e, r29	; 62
    4904:	0f be       	out	0x3f, r0	; 63
    4906:	cd bf       	out	0x3d, r28	; 61
    4908:	89 83       	std	Y+1, r24	; 0x01
    490a:	6a 83       	std	Y+2, r22	; 0x02
    490c:	4b 83       	std	Y+3, r20	; 0x03
	if(nipple==NIPPLEL)
    490e:	8b 81       	ldd	r24, Y+3	; 0x03
    4910:	88 23       	and	r24, r24
    4912:	09 f0       	breq	.+2      	; 0x4916 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x22>
    4914:	85 c0       	rjmp	.+266    	; 0x4a20 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x12c>
	{
		switch(port_no)
    4916:	89 81       	ldd	r24, Y+1	; 0x01
    4918:	28 2f       	mov	r18, r24
    491a:	30 e0       	ldi	r19, 0x00	; 0
    491c:	3f 83       	std	Y+7, r19	; 0x07
    491e:	2e 83       	std	Y+6, r18	; 0x06
    4920:	8e 81       	ldd	r24, Y+6	; 0x06
    4922:	9f 81       	ldd	r25, Y+7	; 0x07
    4924:	83 30       	cpi	r24, 0x03	; 3
    4926:	91 05       	cpc	r25, r1
    4928:	09 f4       	brne	.+2      	; 0x492c <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x38>
    492a:	4a c0       	rjmp	.+148    	; 0x49c0 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0xcc>
    492c:	2e 81       	ldd	r18, Y+6	; 0x06
    492e:	3f 81       	ldd	r19, Y+7	; 0x07
    4930:	24 30       	cpi	r18, 0x04	; 4
    4932:	31 05       	cpc	r19, r1
    4934:	7c f4       	brge	.+30     	; 0x4954 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x60>
    4936:	8e 81       	ldd	r24, Y+6	; 0x06
    4938:	9f 81       	ldd	r25, Y+7	; 0x07
    493a:	81 30       	cpi	r24, 0x01	; 1
    493c:	91 05       	cpc	r25, r1
    493e:	41 f1       	breq	.+80     	; 0x4990 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x9c>
    4940:	2e 81       	ldd	r18, Y+6	; 0x06
    4942:	3f 81       	ldd	r19, Y+7	; 0x07
    4944:	22 30       	cpi	r18, 0x02	; 2
    4946:	31 05       	cpc	r19, r1
    4948:	7c f5       	brge	.+94     	; 0x49a8 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0xb4>
    494a:	8e 81       	ldd	r24, Y+6	; 0x06
    494c:	9f 81       	ldd	r25, Y+7	; 0x07
    494e:	00 97       	sbiw	r24, 0x00	; 0
    4950:	99 f0       	breq	.+38     	; 0x4978 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x84>
    4952:	da c0       	rjmp	.+436    	; 0x4b08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
    4954:	2e 81       	ldd	r18, Y+6	; 0x06
    4956:	3f 81       	ldd	r19, Y+7	; 0x07
    4958:	25 30       	cpi	r18, 0x05	; 5
    495a:	31 05       	cpc	r19, r1
    495c:	09 f4       	brne	.+2      	; 0x4960 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x6c>
    495e:	48 c0       	rjmp	.+144    	; 0x49f0 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0xfc>
    4960:	8e 81       	ldd	r24, Y+6	; 0x06
    4962:	9f 81       	ldd	r25, Y+7	; 0x07
    4964:	85 30       	cpi	r24, 0x05	; 5
    4966:	91 05       	cpc	r25, r1
    4968:	bc f1       	brlt	.+110    	; 0x49d8 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0xe4>
    496a:	2e 81       	ldd	r18, Y+6	; 0x06
    496c:	3f 81       	ldd	r19, Y+7	; 0x07
    496e:	26 30       	cpi	r18, 0x06	; 6
    4970:	31 05       	cpc	r19, r1
    4972:	09 f4       	brne	.+2      	; 0x4976 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x82>
    4974:	49 c0       	rjmp	.+146    	; 0x4a08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x114>
    4976:	c8 c0       	rjmp	.+400    	; 0x4b08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			{
			case PORTA_ID: ASSIGN_NippleL(PORTA,value); break;
    4978:	ab e3       	ldi	r26, 0x3B	; 59
    497a:	b0 e0       	ldi	r27, 0x00	; 0
    497c:	eb e3       	ldi	r30, 0x3B	; 59
    497e:	f0 e0       	ldi	r31, 0x00	; 0
    4980:	80 81       	ld	r24, Z
    4982:	98 2f       	mov	r25, r24
    4984:	90 7f       	andi	r25, 0xF0	; 240
    4986:	8a 81       	ldd	r24, Y+2	; 0x02
    4988:	8f 70       	andi	r24, 0x0F	; 15
    498a:	89 2b       	or	r24, r25
    498c:	8c 93       	st	X, r24
    498e:	bc c0       	rjmp	.+376    	; 0x4b08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTB_ID: ASSIGN_NippleL(PORTB,value);break;
    4990:	a8 e3       	ldi	r26, 0x38	; 56
    4992:	b0 e0       	ldi	r27, 0x00	; 0
    4994:	e8 e3       	ldi	r30, 0x38	; 56
    4996:	f0 e0       	ldi	r31, 0x00	; 0
    4998:	80 81       	ld	r24, Z
    499a:	98 2f       	mov	r25, r24
    499c:	90 7f       	andi	r25, 0xF0	; 240
    499e:	8a 81       	ldd	r24, Y+2	; 0x02
    49a0:	8f 70       	andi	r24, 0x0F	; 15
    49a2:	89 2b       	or	r24, r25
    49a4:	8c 93       	st	X, r24
    49a6:	b0 c0       	rjmp	.+352    	; 0x4b08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTC_ID: ASSIGN_NippleL(PORTC,value); break;
    49a8:	a5 e3       	ldi	r26, 0x35	; 53
    49aa:	b0 e0       	ldi	r27, 0x00	; 0
    49ac:	e5 e3       	ldi	r30, 0x35	; 53
    49ae:	f0 e0       	ldi	r31, 0x00	; 0
    49b0:	80 81       	ld	r24, Z
    49b2:	98 2f       	mov	r25, r24
    49b4:	90 7f       	andi	r25, 0xF0	; 240
    49b6:	8a 81       	ldd	r24, Y+2	; 0x02
    49b8:	8f 70       	andi	r24, 0x0F	; 15
    49ba:	89 2b       	or	r24, r25
    49bc:	8c 93       	st	X, r24
    49be:	a4 c0       	rjmp	.+328    	; 0x4b08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTD_ID: ASSIGN_NippleL(PORTD,value); break;
    49c0:	a2 e3       	ldi	r26, 0x32	; 50
    49c2:	b0 e0       	ldi	r27, 0x00	; 0
    49c4:	e2 e3       	ldi	r30, 0x32	; 50
    49c6:	f0 e0       	ldi	r31, 0x00	; 0
    49c8:	80 81       	ld	r24, Z
    49ca:	98 2f       	mov	r25, r24
    49cc:	90 7f       	andi	r25, 0xF0	; 240
    49ce:	8a 81       	ldd	r24, Y+2	; 0x02
    49d0:	8f 70       	andi	r24, 0x0F	; 15
    49d2:	89 2b       	or	r24, r25
    49d4:	8c 93       	st	X, r24
    49d6:	98 c0       	rjmp	.+304    	; 0x4b08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTE_ID: ASSIGN_NippleL(PORTE,value); break;
    49d8:	a3 e2       	ldi	r26, 0x23	; 35
    49da:	b0 e0       	ldi	r27, 0x00	; 0
    49dc:	e3 e2       	ldi	r30, 0x23	; 35
    49de:	f0 e0       	ldi	r31, 0x00	; 0
    49e0:	80 81       	ld	r24, Z
    49e2:	98 2f       	mov	r25, r24
    49e4:	90 7f       	andi	r25, 0xF0	; 240
    49e6:	8a 81       	ldd	r24, Y+2	; 0x02
    49e8:	8f 70       	andi	r24, 0x0F	; 15
    49ea:	89 2b       	or	r24, r25
    49ec:	8c 93       	st	X, r24
    49ee:	8c c0       	rjmp	.+280    	; 0x4b08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTF_ID: ASSIGN_NippleL(PORTF,value); break;
    49f0:	a2 e6       	ldi	r26, 0x62	; 98
    49f2:	b0 e0       	ldi	r27, 0x00	; 0
    49f4:	e2 e6       	ldi	r30, 0x62	; 98
    49f6:	f0 e0       	ldi	r31, 0x00	; 0
    49f8:	80 81       	ld	r24, Z
    49fa:	98 2f       	mov	r25, r24
    49fc:	90 7f       	andi	r25, 0xF0	; 240
    49fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4a00:	8f 70       	andi	r24, 0x0F	; 15
    4a02:	89 2b       	or	r24, r25
    4a04:	8c 93       	st	X, r24
    4a06:	80 c0       	rjmp	.+256    	; 0x4b08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTG_ID: ASSIGN_NippleL(PORTG,value); break;
    4a08:	a5 e6       	ldi	r26, 0x65	; 101
    4a0a:	b0 e0       	ldi	r27, 0x00	; 0
    4a0c:	e5 e6       	ldi	r30, 0x65	; 101
    4a0e:	f0 e0       	ldi	r31, 0x00	; 0
    4a10:	80 81       	ld	r24, Z
    4a12:	98 2f       	mov	r25, r24
    4a14:	90 7f       	andi	r25, 0xF0	; 240
    4a16:	8a 81       	ldd	r24, Y+2	; 0x02
    4a18:	8f 70       	andi	r24, 0x0F	; 15
    4a1a:	89 2b       	or	r24, r25
    4a1c:	8c 93       	st	X, r24
    4a1e:	74 c0       	rjmp	.+232    	; 0x4b08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			}
	}
	else if(nipple==NIPPLEH)
    4a20:	8b 81       	ldd	r24, Y+3	; 0x03
    4a22:	81 30       	cpi	r24, 0x01	; 1
    4a24:	09 f0       	breq	.+2      	; 0x4a28 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x134>
    4a26:	70 c0       	rjmp	.+224    	; 0x4b08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
	{
		switch(port_no)
    4a28:	89 81       	ldd	r24, Y+1	; 0x01
    4a2a:	28 2f       	mov	r18, r24
    4a2c:	30 e0       	ldi	r19, 0x00	; 0
    4a2e:	3d 83       	std	Y+5, r19	; 0x05
    4a30:	2c 83       	std	Y+4, r18	; 0x04
    4a32:	8c 81       	ldd	r24, Y+4	; 0x04
    4a34:	9d 81       	ldd	r25, Y+5	; 0x05
    4a36:	82 30       	cpi	r24, 0x02	; 2
    4a38:	91 05       	cpc	r25, r1
    4a3a:	b9 f1       	breq	.+110    	; 0x4aaa <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x1b6>
    4a3c:	2c 81       	ldd	r18, Y+4	; 0x04
    4a3e:	3d 81       	ldd	r19, Y+5	; 0x05
    4a40:	23 30       	cpi	r18, 0x03	; 3
    4a42:	31 05       	cpc	r19, r1
    4a44:	54 f4       	brge	.+20     	; 0x4a5a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x166>
    4a46:	8c 81       	ldd	r24, Y+4	; 0x04
    4a48:	9d 81       	ldd	r25, Y+5	; 0x05
    4a4a:	00 97       	sbiw	r24, 0x00	; 0
    4a4c:	b1 f0       	breq	.+44     	; 0x4a7a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x186>
    4a4e:	2c 81       	ldd	r18, Y+4	; 0x04
    4a50:	3d 81       	ldd	r19, Y+5	; 0x05
    4a52:	21 30       	cpi	r18, 0x01	; 1
    4a54:	31 05       	cpc	r19, r1
    4a56:	e9 f0       	breq	.+58     	; 0x4a92 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x19e>
    4a58:	57 c0       	rjmp	.+174    	; 0x4b08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
    4a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    4a5c:	9d 81       	ldd	r25, Y+5	; 0x05
    4a5e:	84 30       	cpi	r24, 0x04	; 4
    4a60:	91 05       	cpc	r25, r1
    4a62:	d9 f1       	breq	.+118    	; 0x4ada <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x1e6>
    4a64:	2c 81       	ldd	r18, Y+4	; 0x04
    4a66:	3d 81       	ldd	r19, Y+5	; 0x05
    4a68:	24 30       	cpi	r18, 0x04	; 4
    4a6a:	31 05       	cpc	r19, r1
    4a6c:	54 f1       	brlt	.+84     	; 0x4ac2 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x1ce>
    4a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    4a70:	9d 81       	ldd	r25, Y+5	; 0x05
    4a72:	85 30       	cpi	r24, 0x05	; 5
    4a74:	91 05       	cpc	r25, r1
    4a76:	e9 f1       	breq	.+122    	; 0x4af2 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x1fe>
    4a78:	47 c0       	rjmp	.+142    	; 0x4b08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					{
					case PORTA_ID: ASSIGN_NippleH(PORTA,value); break;
    4a7a:	ab e3       	ldi	r26, 0x3B	; 59
    4a7c:	b0 e0       	ldi	r27, 0x00	; 0
    4a7e:	eb e3       	ldi	r30, 0x3B	; 59
    4a80:	f0 e0       	ldi	r31, 0x00	; 0
    4a82:	80 81       	ld	r24, Z
    4a84:	98 2f       	mov	r25, r24
    4a86:	9f 70       	andi	r25, 0x0F	; 15
    4a88:	8a 81       	ldd	r24, Y+2	; 0x02
    4a8a:	80 7f       	andi	r24, 0xF0	; 240
    4a8c:	89 2b       	or	r24, r25
    4a8e:	8c 93       	st	X, r24
    4a90:	3b c0       	rjmp	.+118    	; 0x4b08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					case PORTB_ID: ASSIGN_NippleH(PORTB,value);break;
    4a92:	a8 e3       	ldi	r26, 0x38	; 56
    4a94:	b0 e0       	ldi	r27, 0x00	; 0
    4a96:	e8 e3       	ldi	r30, 0x38	; 56
    4a98:	f0 e0       	ldi	r31, 0x00	; 0
    4a9a:	80 81       	ld	r24, Z
    4a9c:	98 2f       	mov	r25, r24
    4a9e:	9f 70       	andi	r25, 0x0F	; 15
    4aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    4aa2:	80 7f       	andi	r24, 0xF0	; 240
    4aa4:	89 2b       	or	r24, r25
    4aa6:	8c 93       	st	X, r24
    4aa8:	2f c0       	rjmp	.+94     	; 0x4b08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					case PORTC_ID: ASSIGN_NippleH(PORTC,value); break;
    4aaa:	a5 e3       	ldi	r26, 0x35	; 53
    4aac:	b0 e0       	ldi	r27, 0x00	; 0
    4aae:	e5 e3       	ldi	r30, 0x35	; 53
    4ab0:	f0 e0       	ldi	r31, 0x00	; 0
    4ab2:	80 81       	ld	r24, Z
    4ab4:	98 2f       	mov	r25, r24
    4ab6:	9f 70       	andi	r25, 0x0F	; 15
    4ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aba:	80 7f       	andi	r24, 0xF0	; 240
    4abc:	89 2b       	or	r24, r25
    4abe:	8c 93       	st	X, r24
    4ac0:	23 c0       	rjmp	.+70     	; 0x4b08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					case PORTD_ID: ASSIGN_NippleH(PORTD,value); break;
    4ac2:	a2 e3       	ldi	r26, 0x32	; 50
    4ac4:	b0 e0       	ldi	r27, 0x00	; 0
    4ac6:	e2 e3       	ldi	r30, 0x32	; 50
    4ac8:	f0 e0       	ldi	r31, 0x00	; 0
    4aca:	80 81       	ld	r24, Z
    4acc:	98 2f       	mov	r25, r24
    4ace:	9f 70       	andi	r25, 0x0F	; 15
    4ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ad2:	80 7f       	andi	r24, 0xF0	; 240
    4ad4:	89 2b       	or	r24, r25
    4ad6:	8c 93       	st	X, r24
    4ad8:	17 c0       	rjmp	.+46     	; 0x4b08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					case PORTE_ID: ASSIGN_NippleH(PORTE,value); break;
    4ada:	a3 e2       	ldi	r26, 0x23	; 35
    4adc:	b0 e0       	ldi	r27, 0x00	; 0
    4ade:	e3 e2       	ldi	r30, 0x23	; 35
    4ae0:	f0 e0       	ldi	r31, 0x00	; 0
    4ae2:	80 81       	ld	r24, Z
    4ae4:	98 2f       	mov	r25, r24
    4ae6:	9f 70       	andi	r25, 0x0F	; 15
    4ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aea:	80 7f       	andi	r24, 0xF0	; 240
    4aec:	89 2b       	or	r24, r25
    4aee:	8c 93       	st	X, r24
    4af0:	0b c0       	rjmp	.+22     	; 0x4b08 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					case PORTF_ID: ASSIGN_NippleH(PORTF,value); break;
    4af2:	a2 e6       	ldi	r26, 0x62	; 98
    4af4:	b0 e0       	ldi	r27, 0x00	; 0
    4af6:	e2 e6       	ldi	r30, 0x62	; 98
    4af8:	f0 e0       	ldi	r31, 0x00	; 0
    4afa:	80 81       	ld	r24, Z
    4afc:	98 2f       	mov	r25, r24
    4afe:	9f 70       	andi	r25, 0x0F	; 15
    4b00:	8a 81       	ldd	r24, Y+2	; 0x02
    4b02:	80 7f       	andi	r24, 0xF0	; 240
    4b04:	89 2b       	or	r24, r25
    4b06:	8c 93       	st	X, r24
					case PORTG_ID:break;
					}
	}
}
    4b08:	27 96       	adiw	r28, 0x07	; 7
    4b0a:	0f b6       	in	r0, 0x3f	; 63
    4b0c:	f8 94       	cli
    4b0e:	de bf       	out	0x3e, r29	; 62
    4b10:	0f be       	out	0x3f, r0	; 63
    4b12:	cd bf       	out	0x3d, r28	; 61
    4b14:	cf 91       	pop	r28
    4b16:	df 91       	pop	r29
    4b18:	08 95       	ret

00004b1a <DIO_uint8_Get_Port_Value>:
uint8 DIO_uint8_Get_Port_Value(port_no_type port_no)
{
    4b1a:	df 93       	push	r29
    4b1c:	cf 93       	push	r28
    4b1e:	00 d0       	rcall	.+0      	; 0x4b20 <DIO_uint8_Get_Port_Value+0x6>
    4b20:	00 d0       	rcall	.+0      	; 0x4b22 <DIO_uint8_Get_Port_Value+0x8>
    4b22:	cd b7       	in	r28, 0x3d	; 61
    4b24:	de b7       	in	r29, 0x3e	; 62
    4b26:	8a 83       	std	Y+2, r24	; 0x02
	uint8 return_value=0;
    4b28:	19 82       	std	Y+1, r1	; 0x01
	switch(port_no)
    4b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b2c:	28 2f       	mov	r18, r24
    4b2e:	30 e0       	ldi	r19, 0x00	; 0
    4b30:	3c 83       	std	Y+4, r19	; 0x04
    4b32:	2b 83       	std	Y+3, r18	; 0x03
    4b34:	8b 81       	ldd	r24, Y+3	; 0x03
    4b36:	9c 81       	ldd	r25, Y+4	; 0x04
    4b38:	83 30       	cpi	r24, 0x03	; 3
    4b3a:	91 05       	cpc	r25, r1
    4b3c:	99 f1       	breq	.+102    	; 0x4ba4 <DIO_uint8_Get_Port_Value+0x8a>
    4b3e:	2b 81       	ldd	r18, Y+3	; 0x03
    4b40:	3c 81       	ldd	r19, Y+4	; 0x04
    4b42:	24 30       	cpi	r18, 0x04	; 4
    4b44:	31 05       	cpc	r19, r1
    4b46:	7c f4       	brge	.+30     	; 0x4b66 <DIO_uint8_Get_Port_Value+0x4c>
    4b48:	8b 81       	ldd	r24, Y+3	; 0x03
    4b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    4b4c:	81 30       	cpi	r24, 0x01	; 1
    4b4e:	91 05       	cpc	r25, r1
    4b50:	f9 f0       	breq	.+62     	; 0x4b90 <DIO_uint8_Get_Port_Value+0x76>
    4b52:	2b 81       	ldd	r18, Y+3	; 0x03
    4b54:	3c 81       	ldd	r19, Y+4	; 0x04
    4b56:	22 30       	cpi	r18, 0x02	; 2
    4b58:	31 05       	cpc	r19, r1
    4b5a:	fc f4       	brge	.+62     	; 0x4b9a <DIO_uint8_Get_Port_Value+0x80>
    4b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b60:	00 97       	sbiw	r24, 0x00	; 0
    4b62:	89 f0       	breq	.+34     	; 0x4b86 <DIO_uint8_Get_Port_Value+0x6c>
    4b64:	32 c0       	rjmp	.+100    	; 0x4bca <DIO_uint8_Get_Port_Value+0xb0>
    4b66:	2b 81       	ldd	r18, Y+3	; 0x03
    4b68:	3c 81       	ldd	r19, Y+4	; 0x04
    4b6a:	25 30       	cpi	r18, 0x05	; 5
    4b6c:	31 05       	cpc	r19, r1
    4b6e:	21 f1       	breq	.+72     	; 0x4bb8 <DIO_uint8_Get_Port_Value+0x9e>
    4b70:	8b 81       	ldd	r24, Y+3	; 0x03
    4b72:	9c 81       	ldd	r25, Y+4	; 0x04
    4b74:	85 30       	cpi	r24, 0x05	; 5
    4b76:	91 05       	cpc	r25, r1
    4b78:	d4 f0       	brlt	.+52     	; 0x4bae <DIO_uint8_Get_Port_Value+0x94>
    4b7a:	2b 81       	ldd	r18, Y+3	; 0x03
    4b7c:	3c 81       	ldd	r19, Y+4	; 0x04
    4b7e:	26 30       	cpi	r18, 0x06	; 6
    4b80:	31 05       	cpc	r19, r1
    4b82:	f9 f0       	breq	.+62     	; 0x4bc2 <DIO_uint8_Get_Port_Value+0xa8>
    4b84:	22 c0       	rjmp	.+68     	; 0x4bca <DIO_uint8_Get_Port_Value+0xb0>
	{
	case PORTA_ID:return_value =PINA;break;
    4b86:	e9 e3       	ldi	r30, 0x39	; 57
    4b88:	f0 e0       	ldi	r31, 0x00	; 0
    4b8a:	80 81       	ld	r24, Z
    4b8c:	89 83       	std	Y+1, r24	; 0x01
    4b8e:	1d c0       	rjmp	.+58     	; 0x4bca <DIO_uint8_Get_Port_Value+0xb0>
	case PORTB_ID:return_value =PINB;break;
    4b90:	e6 e3       	ldi	r30, 0x36	; 54
    4b92:	f0 e0       	ldi	r31, 0x00	; 0
    4b94:	80 81       	ld	r24, Z
    4b96:	89 83       	std	Y+1, r24	; 0x01
    4b98:	18 c0       	rjmp	.+48     	; 0x4bca <DIO_uint8_Get_Port_Value+0xb0>
	case PORTC_ID:return_value =PINC;break;
    4b9a:	e3 e3       	ldi	r30, 0x33	; 51
    4b9c:	f0 e0       	ldi	r31, 0x00	; 0
    4b9e:	80 81       	ld	r24, Z
    4ba0:	89 83       	std	Y+1, r24	; 0x01
    4ba2:	13 c0       	rjmp	.+38     	; 0x4bca <DIO_uint8_Get_Port_Value+0xb0>
	case PORTD_ID:return_value =PIND;break;
    4ba4:	e0 e3       	ldi	r30, 0x30	; 48
    4ba6:	f0 e0       	ldi	r31, 0x00	; 0
    4ba8:	80 81       	ld	r24, Z
    4baa:	89 83       	std	Y+1, r24	; 0x01
    4bac:	0e c0       	rjmp	.+28     	; 0x4bca <DIO_uint8_Get_Port_Value+0xb0>
	case PORTE_ID:return_value =PINE;break;
    4bae:	e1 e2       	ldi	r30, 0x21	; 33
    4bb0:	f0 e0       	ldi	r31, 0x00	; 0
    4bb2:	80 81       	ld	r24, Z
    4bb4:	89 83       	std	Y+1, r24	; 0x01
    4bb6:	09 c0       	rjmp	.+18     	; 0x4bca <DIO_uint8_Get_Port_Value+0xb0>
	case PORTF_ID:return_value =PINF;break;
    4bb8:	e0 e2       	ldi	r30, 0x20	; 32
    4bba:	f0 e0       	ldi	r31, 0x00	; 0
    4bbc:	80 81       	ld	r24, Z
    4bbe:	89 83       	std	Y+1, r24	; 0x01
    4bc0:	04 c0       	rjmp	.+8      	; 0x4bca <DIO_uint8_Get_Port_Value+0xb0>
	case PORTG_ID:return_value =PING;break;
    4bc2:	e3 e6       	ldi	r30, 0x63	; 99
    4bc4:	f0 e0       	ldi	r31, 0x00	; 0
    4bc6:	80 81       	ld	r24, Z
    4bc8:	89 83       	std	Y+1, r24	; 0x01
	}

	return return_value;
    4bca:	89 81       	ldd	r24, Y+1	; 0x01
}
    4bcc:	0f 90       	pop	r0
    4bce:	0f 90       	pop	r0
    4bd0:	0f 90       	pop	r0
    4bd2:	0f 90       	pop	r0
    4bd4:	cf 91       	pop	r28
    4bd6:	df 91       	pop	r29
    4bd8:	08 95       	ret

00004bda <Ultrasonic_init>:
#include"ULTRASONIC.h"
volatile uint8 f=0,c=0;
volatile uint16 t1=0,t2=0;

void Ultrasonic_init(void)
{
    4bda:	df 93       	push	r29
    4bdc:	cf 93       	push	r28
    4bde:	cd b7       	in	r28, 0x3d	; 61
    4be0:	de b7       	in	r29, 0x3e	; 62
	DIO_void_Set_Pin_Dirction(trig_port,trig0,OUTPUT);
    4be2:	80 e0       	ldi	r24, 0x00	; 0
    4be4:	60 e0       	ldi	r22, 0x00	; 0
    4be6:	41 e0       	ldi	r20, 0x01	; 1
    4be8:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
	DIO_void_Set_Pin_Dirction(trig_port,trig1,OUTPUT);
    4bec:	80 e0       	ldi	r24, 0x00	; 0
    4bee:	61 e0       	ldi	r22, 0x01	; 1
    4bf0:	41 e0       	ldi	r20, 0x01	; 1
    4bf2:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
	DIO_void_Set_Pin_Dirction(trig_port,trig2,OUTPUT);
    4bf6:	80 e0       	ldi	r24, 0x00	; 0
    4bf8:	63 e0       	ldi	r22, 0x03	; 3
    4bfa:	41 e0       	ldi	r20, 0x01	; 1
    4bfc:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
	DIO_void_Set_Pin_Dirction(trig_port,trig3,OUTPUT);
    4c00:	80 e0       	ldi	r24, 0x00	; 0
    4c02:	64 e0       	ldi	r22, 0x04	; 4
    4c04:	41 e0       	ldi	r20, 0x01	; 1
    4c06:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
	//TRY TO PUT ICU PIN INPUT
	Timer1_Init(timer1_Normal_mode,timer_scale_8,disconnected_1,disconnected_channel);
    4c0a:	80 e0       	ldi	r24, 0x00	; 0
    4c0c:	62 e0       	ldi	r22, 0x02	; 2
    4c0e:	40 e0       	ldi	r20, 0x00	; 0
    4c10:	20 e0       	ldi	r18, 0x00	; 0
    4c12:	0e 94 d7 19 	call	0x33ae	; 0x33ae <Timer1_Init>
	Timer1_OV_InterruptEnable();
    4c16:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <Timer1_OV_InterruptEnable>
}
    4c1a:	cf 91       	pop	r28
    4c1c:	df 91       	pop	r29
    4c1e:	08 95       	ret

00004c20 <Ultrasonic_front_Get_Distance>:
uint32 Ultrasonic_front_Get_Distance(void)
{
    4c20:	df 93       	push	r29
    4c22:	cf 93       	push	r28
    4c24:	cd b7       	in	r28, 0x3d	; 61
    4c26:	de b7       	in	r29, 0x3e	; 62
    4c28:	a0 97       	sbiw	r28, 0x20	; 32
    4c2a:	0f b6       	in	r0, 0x3f	; 63
    4c2c:	f8 94       	cli
    4c2e:	de bf       	out	0x3e, r29	; 62
    4c30:	0f be       	out	0x3f, r0	; 63
    4c32:	cd bf       	out	0x3d, r28	; 61
	uint32 time=0,distance=0;
    4c34:	1d 8e       	std	Y+29, r1	; 0x1d
    4c36:	1e 8e       	std	Y+30, r1	; 0x1e
    4c38:	1f 8e       	std	Y+31, r1	; 0x1f
    4c3a:	18 a2       	std	Y+32, r1	; 0x20
    4c3c:	19 8e       	std	Y+25, r1	; 0x19
    4c3e:	1a 8e       	std	Y+26, r1	; 0x1a
    4c40:	1b 8e       	std	Y+27, r1	; 0x1b
    4c42:	1c 8e       	std	Y+28, r1	; 0x1c
		c = 0;
    4c44:	10 92 f9 02 	sts	0x02F9, r1
		TCNT1 = 0;
    4c48:	ec e4       	ldi	r30, 0x4C	; 76
    4c4a:	f0 e0       	ldi	r31, 0x00	; 0
    4c4c:	11 82       	std	Z+1, r1	; 0x01
    4c4e:	10 82       	st	Z, r1
		f = 0;
    4c50:	10 92 f8 02 	sts	0x02F8, r1

		DIO_void_Set_Pin_Value(PORTA_ID,trig0,HIGH);
    4c54:	80 e0       	ldi	r24, 0x00	; 0
    4c56:	60 e0       	ldi	r22, 0x00	; 0
    4c58:	41 e0       	ldi	r20, 0x01	; 1
    4c5a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
    4c5e:	80 e0       	ldi	r24, 0x00	; 0
    4c60:	90 e0       	ldi	r25, 0x00	; 0
    4c62:	a0 e2       	ldi	r26, 0x20	; 32
    4c64:	b1 e4       	ldi	r27, 0x41	; 65
    4c66:	8d 8b       	std	Y+21, r24	; 0x15
    4c68:	9e 8b       	std	Y+22, r25	; 0x16
    4c6a:	af 8b       	std	Y+23, r26	; 0x17
    4c6c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4c6e:	6d 89       	ldd	r22, Y+21	; 0x15
    4c70:	7e 89       	ldd	r23, Y+22	; 0x16
    4c72:	8f 89       	ldd	r24, Y+23	; 0x17
    4c74:	98 8d       	ldd	r25, Y+24	; 0x18
    4c76:	2b ea       	ldi	r18, 0xAB	; 171
    4c78:	3a ea       	ldi	r19, 0xAA	; 170
    4c7a:	4a e2       	ldi	r20, 0x2A	; 42
    4c7c:	50 e4       	ldi	r21, 0x40	; 64
    4c7e:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    4c82:	dc 01       	movw	r26, r24
    4c84:	cb 01       	movw	r24, r22
    4c86:	89 8b       	std	Y+17, r24	; 0x11
    4c88:	9a 8b       	std	Y+18, r25	; 0x12
    4c8a:	ab 8b       	std	Y+19, r26	; 0x13
    4c8c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4c8e:	69 89       	ldd	r22, Y+17	; 0x11
    4c90:	7a 89       	ldd	r23, Y+18	; 0x12
    4c92:	8b 89       	ldd	r24, Y+19	; 0x13
    4c94:	9c 89       	ldd	r25, Y+20	; 0x14
    4c96:	20 e0       	ldi	r18, 0x00	; 0
    4c98:	30 e0       	ldi	r19, 0x00	; 0
    4c9a:	40 e8       	ldi	r20, 0x80	; 128
    4c9c:	5f e3       	ldi	r21, 0x3F	; 63
    4c9e:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    4ca2:	88 23       	and	r24, r24
    4ca4:	1c f4       	brge	.+6      	; 0x4cac <Ultrasonic_front_Get_Distance+0x8c>
		__ticks = 1;
    4ca6:	81 e0       	ldi	r24, 0x01	; 1
    4ca8:	88 8b       	std	Y+16, r24	; 0x10
    4caa:	91 c0       	rjmp	.+290    	; 0x4dce <Ultrasonic_front_Get_Distance+0x1ae>
	else if (__tmp > 255)
    4cac:	69 89       	ldd	r22, Y+17	; 0x11
    4cae:	7a 89       	ldd	r23, Y+18	; 0x12
    4cb0:	8b 89       	ldd	r24, Y+19	; 0x13
    4cb2:	9c 89       	ldd	r25, Y+20	; 0x14
    4cb4:	20 e0       	ldi	r18, 0x00	; 0
    4cb6:	30 e0       	ldi	r19, 0x00	; 0
    4cb8:	4f e7       	ldi	r20, 0x7F	; 127
    4cba:	53 e4       	ldi	r21, 0x43	; 67
    4cbc:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    4cc0:	18 16       	cp	r1, r24
    4cc2:	0c f0       	brlt	.+2      	; 0x4cc6 <Ultrasonic_front_Get_Distance+0xa6>
    4cc4:	7b c0       	rjmp	.+246    	; 0x4dbc <Ultrasonic_front_Get_Distance+0x19c>
	{
		_delay_ms(__us / 1000.0);
    4cc6:	6d 89       	ldd	r22, Y+21	; 0x15
    4cc8:	7e 89       	ldd	r23, Y+22	; 0x16
    4cca:	8f 89       	ldd	r24, Y+23	; 0x17
    4ccc:	98 8d       	ldd	r25, Y+24	; 0x18
    4cce:	20 e0       	ldi	r18, 0x00	; 0
    4cd0:	30 e0       	ldi	r19, 0x00	; 0
    4cd2:	4a e7       	ldi	r20, 0x7A	; 122
    4cd4:	54 e4       	ldi	r21, 0x44	; 68
    4cd6:	0e 94 9b 10 	call	0x2136	; 0x2136 <__divsf3>
    4cda:	dc 01       	movw	r26, r24
    4cdc:	cb 01       	movw	r24, r22
    4cde:	8c 87       	std	Y+12, r24	; 0x0c
    4ce0:	9d 87       	std	Y+13, r25	; 0x0d
    4ce2:	ae 87       	std	Y+14, r26	; 0x0e
    4ce4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ce6:	6c 85       	ldd	r22, Y+12	; 0x0c
    4ce8:	7d 85       	ldd	r23, Y+13	; 0x0d
    4cea:	8e 85       	ldd	r24, Y+14	; 0x0e
    4cec:	9f 85       	ldd	r25, Y+15	; 0x0f
    4cee:	20 e0       	ldi	r18, 0x00	; 0
    4cf0:	30 e0       	ldi	r19, 0x00	; 0
    4cf2:	4a ef       	ldi	r20, 0xFA	; 250
    4cf4:	54 e4       	ldi	r21, 0x44	; 68
    4cf6:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    4cfa:	dc 01       	movw	r26, r24
    4cfc:	cb 01       	movw	r24, r22
    4cfe:	88 87       	std	Y+8, r24	; 0x08
    4d00:	99 87       	std	Y+9, r25	; 0x09
    4d02:	aa 87       	std	Y+10, r26	; 0x0a
    4d04:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4d06:	68 85       	ldd	r22, Y+8	; 0x08
    4d08:	79 85       	ldd	r23, Y+9	; 0x09
    4d0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d0e:	20 e0       	ldi	r18, 0x00	; 0
    4d10:	30 e0       	ldi	r19, 0x00	; 0
    4d12:	40 e8       	ldi	r20, 0x80	; 128
    4d14:	5f e3       	ldi	r21, 0x3F	; 63
    4d16:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    4d1a:	88 23       	and	r24, r24
    4d1c:	2c f4       	brge	.+10     	; 0x4d28 <Ultrasonic_front_Get_Distance+0x108>
		__ticks = 1;
    4d1e:	81 e0       	ldi	r24, 0x01	; 1
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	9f 83       	std	Y+7, r25	; 0x07
    4d24:	8e 83       	std	Y+6, r24	; 0x06
    4d26:	3f c0       	rjmp	.+126    	; 0x4da6 <Ultrasonic_front_Get_Distance+0x186>
	else if (__tmp > 65535)
    4d28:	68 85       	ldd	r22, Y+8	; 0x08
    4d2a:	79 85       	ldd	r23, Y+9	; 0x09
    4d2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d30:	20 e0       	ldi	r18, 0x00	; 0
    4d32:	3f ef       	ldi	r19, 0xFF	; 255
    4d34:	4f e7       	ldi	r20, 0x7F	; 127
    4d36:	57 e4       	ldi	r21, 0x47	; 71
    4d38:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    4d3c:	18 16       	cp	r1, r24
    4d3e:	4c f5       	brge	.+82     	; 0x4d92 <Ultrasonic_front_Get_Distance+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d40:	6c 85       	ldd	r22, Y+12	; 0x0c
    4d42:	7d 85       	ldd	r23, Y+13	; 0x0d
    4d44:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d46:	9f 85       	ldd	r25, Y+15	; 0x0f
    4d48:	20 e0       	ldi	r18, 0x00	; 0
    4d4a:	30 e0       	ldi	r19, 0x00	; 0
    4d4c:	40 e2       	ldi	r20, 0x20	; 32
    4d4e:	51 e4       	ldi	r21, 0x41	; 65
    4d50:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    4d54:	dc 01       	movw	r26, r24
    4d56:	cb 01       	movw	r24, r22
    4d58:	bc 01       	movw	r22, r24
    4d5a:	cd 01       	movw	r24, r26
    4d5c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    4d60:	dc 01       	movw	r26, r24
    4d62:	cb 01       	movw	r24, r22
    4d64:	9f 83       	std	Y+7, r25	; 0x07
    4d66:	8e 83       	std	Y+6, r24	; 0x06
    4d68:	0f c0       	rjmp	.+30     	; 0x4d88 <Ultrasonic_front_Get_Distance+0x168>
    4d6a:	88 ec       	ldi	r24, 0xC8	; 200
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	9d 83       	std	Y+5, r25	; 0x05
    4d70:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4d72:	8c 81       	ldd	r24, Y+4	; 0x04
    4d74:	9d 81       	ldd	r25, Y+5	; 0x05
    4d76:	01 97       	sbiw	r24, 0x01	; 1
    4d78:	f1 f7       	brne	.-4      	; 0x4d76 <Ultrasonic_front_Get_Distance+0x156>
    4d7a:	9d 83       	std	Y+5, r25	; 0x05
    4d7c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d7e:	8e 81       	ldd	r24, Y+6	; 0x06
    4d80:	9f 81       	ldd	r25, Y+7	; 0x07
    4d82:	01 97       	sbiw	r24, 0x01	; 1
    4d84:	9f 83       	std	Y+7, r25	; 0x07
    4d86:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d88:	8e 81       	ldd	r24, Y+6	; 0x06
    4d8a:	9f 81       	ldd	r25, Y+7	; 0x07
    4d8c:	00 97       	sbiw	r24, 0x00	; 0
    4d8e:	69 f7       	brne	.-38     	; 0x4d6a <Ultrasonic_front_Get_Distance+0x14a>
    4d90:	24 c0       	rjmp	.+72     	; 0x4dda <Ultrasonic_front_Get_Distance+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d92:	68 85       	ldd	r22, Y+8	; 0x08
    4d94:	79 85       	ldd	r23, Y+9	; 0x09
    4d96:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d98:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d9a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    4d9e:	dc 01       	movw	r26, r24
    4da0:	cb 01       	movw	r24, r22
    4da2:	9f 83       	std	Y+7, r25	; 0x07
    4da4:	8e 83       	std	Y+6, r24	; 0x06
    4da6:	8e 81       	ldd	r24, Y+6	; 0x06
    4da8:	9f 81       	ldd	r25, Y+7	; 0x07
    4daa:	9b 83       	std	Y+3, r25	; 0x03
    4dac:	8a 83       	std	Y+2, r24	; 0x02
    4dae:	8a 81       	ldd	r24, Y+2	; 0x02
    4db0:	9b 81       	ldd	r25, Y+3	; 0x03
    4db2:	01 97       	sbiw	r24, 0x01	; 1
    4db4:	f1 f7       	brne	.-4      	; 0x4db2 <Ultrasonic_front_Get_Distance+0x192>
    4db6:	9b 83       	std	Y+3, r25	; 0x03
    4db8:	8a 83       	std	Y+2, r24	; 0x02
    4dba:	0f c0       	rjmp	.+30     	; 0x4dda <Ultrasonic_front_Get_Distance+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4dbc:	69 89       	ldd	r22, Y+17	; 0x11
    4dbe:	7a 89       	ldd	r23, Y+18	; 0x12
    4dc0:	8b 89       	ldd	r24, Y+19	; 0x13
    4dc2:	9c 89       	ldd	r25, Y+20	; 0x14
    4dc4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    4dc8:	dc 01       	movw	r26, r24
    4dca:	cb 01       	movw	r24, r22
    4dcc:	88 8b       	std	Y+16, r24	; 0x10
    4dce:	88 89       	ldd	r24, Y+16	; 0x10
    4dd0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4dd2:	89 81       	ldd	r24, Y+1	; 0x01
    4dd4:	8a 95       	dec	r24
    4dd6:	f1 f7       	brne	.-4      	; 0x4dd4 <Ultrasonic_front_Get_Distance+0x1b4>
    4dd8:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(10);
		DIO_void_Set_Pin_Value(PORTA_ID,trig0,LOW);
    4dda:	80 e0       	ldi	r24, 0x00	; 0
    4ddc:	60 e0       	ldi	r22, 0x00	; 0
    4dde:	40 e0       	ldi	r20, 0x00	; 0
    4de0:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>

		 Timer1_InputCaptureEdge(Rising);
    4de4:	81 e0       	ldi	r24, 0x01	; 1
    4de6:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Timer1_InputCaptureEdge>
         Timer1_ICU_InterruptEnable();
    4dea:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <Timer1_ICU_InterruptEnable>
		 while(f<2);
    4dee:	80 91 f8 02 	lds	r24, 0x02F8
    4df2:	82 30       	cpi	r24, 0x02	; 2
    4df4:	e0 f3       	brcs	.-8      	; 0x4dee <Ultrasonic_front_Get_Distance+0x1ce>
		 time = (t2-t1);
    4df6:	20 91 fc 02 	lds	r18, 0x02FC
    4dfa:	30 91 fd 02 	lds	r19, 0x02FD
    4dfe:	80 91 fa 02 	lds	r24, 0x02FA
    4e02:	90 91 fb 02 	lds	r25, 0x02FB
    4e06:	a9 01       	movw	r20, r18
    4e08:	48 1b       	sub	r20, r24
    4e0a:	59 0b       	sbc	r21, r25
    4e0c:	ca 01       	movw	r24, r20
    4e0e:	cc 01       	movw	r24, r24
    4e10:	a0 e0       	ldi	r26, 0x00	; 0
    4e12:	b0 e0       	ldi	r27, 0x00	; 0
    4e14:	8d 8f       	std	Y+29, r24	; 0x1d
    4e16:	9e 8f       	std	Y+30, r25	; 0x1e
    4e18:	af 8f       	std	Y+31, r26	; 0x1f
    4e1a:	b8 a3       	std	Y+32, r27	; 0x20
		 distance = time /58;
    4e1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e20:	af 8d       	ldd	r26, Y+31	; 0x1f
    4e22:	b8 a1       	ldd	r27, Y+32	; 0x20
    4e24:	2a e3       	ldi	r18, 0x3A	; 58
    4e26:	30 e0       	ldi	r19, 0x00	; 0
    4e28:	40 e0       	ldi	r20, 0x00	; 0
    4e2a:	50 e0       	ldi	r21, 0x00	; 0
    4e2c:	bc 01       	movw	r22, r24
    4e2e:	cd 01       	movw	r24, r26
    4e30:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    4e34:	da 01       	movw	r26, r20
    4e36:	c9 01       	movw	r24, r18
    4e38:	89 8f       	std	Y+25, r24	; 0x19
    4e3a:	9a 8f       	std	Y+26, r25	; 0x1a
    4e3c:	ab 8f       	std	Y+27, r26	; 0x1b
    4e3e:	bc 8f       	std	Y+28, r27	; 0x1c
		 Timer1_ICU_InterruptDisable();
    4e40:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <Timer1_ICU_InterruptDisable>


		 return distance;
    4e44:	89 8d       	ldd	r24, Y+25	; 0x19
    4e46:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4e48:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4e4a:	bc 8d       	ldd	r27, Y+28	; 0x1c
}
    4e4c:	bc 01       	movw	r22, r24
    4e4e:	cd 01       	movw	r24, r26
    4e50:	a0 96       	adiw	r28, 0x20	; 32
    4e52:	0f b6       	in	r0, 0x3f	; 63
    4e54:	f8 94       	cli
    4e56:	de bf       	out	0x3e, r29	; 62
    4e58:	0f be       	out	0x3f, r0	; 63
    4e5a:	cd bf       	out	0x3d, r28	; 61
    4e5c:	cf 91       	pop	r28
    4e5e:	df 91       	pop	r29
    4e60:	08 95       	ret

00004e62 <Ultrasonic_right_front_Get_Distance>:

uint32 Ultrasonic_right_front_Get_Distance(void)
{
    4e62:	df 93       	push	r29
    4e64:	cf 93       	push	r28
    4e66:	cd b7       	in	r28, 0x3d	; 61
    4e68:	de b7       	in	r29, 0x3e	; 62
    4e6a:	a0 97       	sbiw	r28, 0x20	; 32
    4e6c:	0f b6       	in	r0, 0x3f	; 63
    4e6e:	f8 94       	cli
    4e70:	de bf       	out	0x3e, r29	; 62
    4e72:	0f be       	out	0x3f, r0	; 63
    4e74:	cd bf       	out	0x3d, r28	; 61
	uint32 time=0,distance=0;
    4e76:	1d 8e       	std	Y+29, r1	; 0x1d
    4e78:	1e 8e       	std	Y+30, r1	; 0x1e
    4e7a:	1f 8e       	std	Y+31, r1	; 0x1f
    4e7c:	18 a2       	std	Y+32, r1	; 0x20
    4e7e:	19 8e       	std	Y+25, r1	; 0x19
    4e80:	1a 8e       	std	Y+26, r1	; 0x1a
    4e82:	1b 8e       	std	Y+27, r1	; 0x1b
    4e84:	1c 8e       	std	Y+28, r1	; 0x1c
			c = 0;
    4e86:	10 92 f9 02 	sts	0x02F9, r1
			TCNT1 = 0;
    4e8a:	ec e4       	ldi	r30, 0x4C	; 76
    4e8c:	f0 e0       	ldi	r31, 0x00	; 0
    4e8e:	11 82       	std	Z+1, r1	; 0x01
    4e90:	10 82       	st	Z, r1
			f = 0;
    4e92:	10 92 f8 02 	sts	0x02F8, r1

			DIO_void_Set_Pin_Value(PORTA_ID,trig1,HIGH);
    4e96:	80 e0       	ldi	r24, 0x00	; 0
    4e98:	61 e0       	ldi	r22, 0x01	; 1
    4e9a:	41 e0       	ldi	r20, 0x01	; 1
    4e9c:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
    4ea0:	80 e0       	ldi	r24, 0x00	; 0
    4ea2:	90 e0       	ldi	r25, 0x00	; 0
    4ea4:	a0 e2       	ldi	r26, 0x20	; 32
    4ea6:	b1 e4       	ldi	r27, 0x41	; 65
    4ea8:	8d 8b       	std	Y+21, r24	; 0x15
    4eaa:	9e 8b       	std	Y+22, r25	; 0x16
    4eac:	af 8b       	std	Y+23, r26	; 0x17
    4eae:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4eb0:	6d 89       	ldd	r22, Y+21	; 0x15
    4eb2:	7e 89       	ldd	r23, Y+22	; 0x16
    4eb4:	8f 89       	ldd	r24, Y+23	; 0x17
    4eb6:	98 8d       	ldd	r25, Y+24	; 0x18
    4eb8:	2b ea       	ldi	r18, 0xAB	; 171
    4eba:	3a ea       	ldi	r19, 0xAA	; 170
    4ebc:	4a e2       	ldi	r20, 0x2A	; 42
    4ebe:	50 e4       	ldi	r21, 0x40	; 64
    4ec0:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    4ec4:	dc 01       	movw	r26, r24
    4ec6:	cb 01       	movw	r24, r22
    4ec8:	89 8b       	std	Y+17, r24	; 0x11
    4eca:	9a 8b       	std	Y+18, r25	; 0x12
    4ecc:	ab 8b       	std	Y+19, r26	; 0x13
    4ece:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4ed0:	69 89       	ldd	r22, Y+17	; 0x11
    4ed2:	7a 89       	ldd	r23, Y+18	; 0x12
    4ed4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ed6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ed8:	20 e0       	ldi	r18, 0x00	; 0
    4eda:	30 e0       	ldi	r19, 0x00	; 0
    4edc:	40 e8       	ldi	r20, 0x80	; 128
    4ede:	5f e3       	ldi	r21, 0x3F	; 63
    4ee0:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    4ee4:	88 23       	and	r24, r24
    4ee6:	1c f4       	brge	.+6      	; 0x4eee <Ultrasonic_right_front_Get_Distance+0x8c>
		__ticks = 1;
    4ee8:	81 e0       	ldi	r24, 0x01	; 1
    4eea:	88 8b       	std	Y+16, r24	; 0x10
    4eec:	91 c0       	rjmp	.+290    	; 0x5010 <Ultrasonic_right_front_Get_Distance+0x1ae>
	else if (__tmp > 255)
    4eee:	69 89       	ldd	r22, Y+17	; 0x11
    4ef0:	7a 89       	ldd	r23, Y+18	; 0x12
    4ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    4ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    4ef6:	20 e0       	ldi	r18, 0x00	; 0
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	4f e7       	ldi	r20, 0x7F	; 127
    4efc:	53 e4       	ldi	r21, 0x43	; 67
    4efe:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    4f02:	18 16       	cp	r1, r24
    4f04:	0c f0       	brlt	.+2      	; 0x4f08 <Ultrasonic_right_front_Get_Distance+0xa6>
    4f06:	7b c0       	rjmp	.+246    	; 0x4ffe <Ultrasonic_right_front_Get_Distance+0x19c>
	{
		_delay_ms(__us / 1000.0);
    4f08:	6d 89       	ldd	r22, Y+21	; 0x15
    4f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    4f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    4f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    4f10:	20 e0       	ldi	r18, 0x00	; 0
    4f12:	30 e0       	ldi	r19, 0x00	; 0
    4f14:	4a e7       	ldi	r20, 0x7A	; 122
    4f16:	54 e4       	ldi	r21, 0x44	; 68
    4f18:	0e 94 9b 10 	call	0x2136	; 0x2136 <__divsf3>
    4f1c:	dc 01       	movw	r26, r24
    4f1e:	cb 01       	movw	r24, r22
    4f20:	8c 87       	std	Y+12, r24	; 0x0c
    4f22:	9d 87       	std	Y+13, r25	; 0x0d
    4f24:	ae 87       	std	Y+14, r26	; 0x0e
    4f26:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f28:	6c 85       	ldd	r22, Y+12	; 0x0c
    4f2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    4f2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4f30:	20 e0       	ldi	r18, 0x00	; 0
    4f32:	30 e0       	ldi	r19, 0x00	; 0
    4f34:	4a ef       	ldi	r20, 0xFA	; 250
    4f36:	54 e4       	ldi	r21, 0x44	; 68
    4f38:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    4f3c:	dc 01       	movw	r26, r24
    4f3e:	cb 01       	movw	r24, r22
    4f40:	88 87       	std	Y+8, r24	; 0x08
    4f42:	99 87       	std	Y+9, r25	; 0x09
    4f44:	aa 87       	std	Y+10, r26	; 0x0a
    4f46:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4f48:	68 85       	ldd	r22, Y+8	; 0x08
    4f4a:	79 85       	ldd	r23, Y+9	; 0x09
    4f4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f50:	20 e0       	ldi	r18, 0x00	; 0
    4f52:	30 e0       	ldi	r19, 0x00	; 0
    4f54:	40 e8       	ldi	r20, 0x80	; 128
    4f56:	5f e3       	ldi	r21, 0x3F	; 63
    4f58:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    4f5c:	88 23       	and	r24, r24
    4f5e:	2c f4       	brge	.+10     	; 0x4f6a <Ultrasonic_right_front_Get_Distance+0x108>
		__ticks = 1;
    4f60:	81 e0       	ldi	r24, 0x01	; 1
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	9f 83       	std	Y+7, r25	; 0x07
    4f66:	8e 83       	std	Y+6, r24	; 0x06
    4f68:	3f c0       	rjmp	.+126    	; 0x4fe8 <Ultrasonic_right_front_Get_Distance+0x186>
	else if (__tmp > 65535)
    4f6a:	68 85       	ldd	r22, Y+8	; 0x08
    4f6c:	79 85       	ldd	r23, Y+9	; 0x09
    4f6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f70:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f72:	20 e0       	ldi	r18, 0x00	; 0
    4f74:	3f ef       	ldi	r19, 0xFF	; 255
    4f76:	4f e7       	ldi	r20, 0x7F	; 127
    4f78:	57 e4       	ldi	r21, 0x47	; 71
    4f7a:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    4f7e:	18 16       	cp	r1, r24
    4f80:	4c f5       	brge	.+82     	; 0x4fd4 <Ultrasonic_right_front_Get_Distance+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f82:	6c 85       	ldd	r22, Y+12	; 0x0c
    4f84:	7d 85       	ldd	r23, Y+13	; 0x0d
    4f86:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f88:	9f 85       	ldd	r25, Y+15	; 0x0f
    4f8a:	20 e0       	ldi	r18, 0x00	; 0
    4f8c:	30 e0       	ldi	r19, 0x00	; 0
    4f8e:	40 e2       	ldi	r20, 0x20	; 32
    4f90:	51 e4       	ldi	r21, 0x41	; 65
    4f92:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    4f96:	dc 01       	movw	r26, r24
    4f98:	cb 01       	movw	r24, r22
    4f9a:	bc 01       	movw	r22, r24
    4f9c:	cd 01       	movw	r24, r26
    4f9e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    4fa2:	dc 01       	movw	r26, r24
    4fa4:	cb 01       	movw	r24, r22
    4fa6:	9f 83       	std	Y+7, r25	; 0x07
    4fa8:	8e 83       	std	Y+6, r24	; 0x06
    4faa:	0f c0       	rjmp	.+30     	; 0x4fca <Ultrasonic_right_front_Get_Distance+0x168>
    4fac:	88 ec       	ldi	r24, 0xC8	; 200
    4fae:	90 e0       	ldi	r25, 0x00	; 0
    4fb0:	9d 83       	std	Y+5, r25	; 0x05
    4fb2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    4fb6:	9d 81       	ldd	r25, Y+5	; 0x05
    4fb8:	01 97       	sbiw	r24, 0x01	; 1
    4fba:	f1 f7       	brne	.-4      	; 0x4fb8 <Ultrasonic_right_front_Get_Distance+0x156>
    4fbc:	9d 83       	std	Y+5, r25	; 0x05
    4fbe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fc0:	8e 81       	ldd	r24, Y+6	; 0x06
    4fc2:	9f 81       	ldd	r25, Y+7	; 0x07
    4fc4:	01 97       	sbiw	r24, 0x01	; 1
    4fc6:	9f 83       	std	Y+7, r25	; 0x07
    4fc8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fca:	8e 81       	ldd	r24, Y+6	; 0x06
    4fcc:	9f 81       	ldd	r25, Y+7	; 0x07
    4fce:	00 97       	sbiw	r24, 0x00	; 0
    4fd0:	69 f7       	brne	.-38     	; 0x4fac <Ultrasonic_right_front_Get_Distance+0x14a>
    4fd2:	24 c0       	rjmp	.+72     	; 0x501c <Ultrasonic_right_front_Get_Distance+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fd4:	68 85       	ldd	r22, Y+8	; 0x08
    4fd6:	79 85       	ldd	r23, Y+9	; 0x09
    4fd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4fda:	9b 85       	ldd	r25, Y+11	; 0x0b
    4fdc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    4fe0:	dc 01       	movw	r26, r24
    4fe2:	cb 01       	movw	r24, r22
    4fe4:	9f 83       	std	Y+7, r25	; 0x07
    4fe6:	8e 83       	std	Y+6, r24	; 0x06
    4fe8:	8e 81       	ldd	r24, Y+6	; 0x06
    4fea:	9f 81       	ldd	r25, Y+7	; 0x07
    4fec:	9b 83       	std	Y+3, r25	; 0x03
    4fee:	8a 83       	std	Y+2, r24	; 0x02
    4ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ff4:	01 97       	sbiw	r24, 0x01	; 1
    4ff6:	f1 f7       	brne	.-4      	; 0x4ff4 <Ultrasonic_right_front_Get_Distance+0x192>
    4ff8:	9b 83       	std	Y+3, r25	; 0x03
    4ffa:	8a 83       	std	Y+2, r24	; 0x02
    4ffc:	0f c0       	rjmp	.+30     	; 0x501c <Ultrasonic_right_front_Get_Distance+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4ffe:	69 89       	ldd	r22, Y+17	; 0x11
    5000:	7a 89       	ldd	r23, Y+18	; 0x12
    5002:	8b 89       	ldd	r24, Y+19	; 0x13
    5004:	9c 89       	ldd	r25, Y+20	; 0x14
    5006:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    500a:	dc 01       	movw	r26, r24
    500c:	cb 01       	movw	r24, r22
    500e:	88 8b       	std	Y+16, r24	; 0x10
    5010:	88 89       	ldd	r24, Y+16	; 0x10
    5012:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5014:	89 81       	ldd	r24, Y+1	; 0x01
    5016:	8a 95       	dec	r24
    5018:	f1 f7       	brne	.-4      	; 0x5016 <Ultrasonic_right_front_Get_Distance+0x1b4>
    501a:	89 83       	std	Y+1, r24	; 0x01
			_delay_us(10);
			DIO_void_Set_Pin_Value(PORTA_ID,trig1,LOW);
    501c:	80 e0       	ldi	r24, 0x00	; 0
    501e:	61 e0       	ldi	r22, 0x01	; 1
    5020:	40 e0       	ldi	r20, 0x00	; 0
    5022:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>

			 Timer1_InputCaptureEdge(Rising);
    5026:	81 e0       	ldi	r24, 0x01	; 1
    5028:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Timer1_InputCaptureEdge>
	         Timer1_ICU_InterruptEnable();
    502c:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <Timer1_ICU_InterruptEnable>
			 while(f<2);
    5030:	80 91 f8 02 	lds	r24, 0x02F8
    5034:	82 30       	cpi	r24, 0x02	; 2
    5036:	e0 f3       	brcs	.-8      	; 0x5030 <Ultrasonic_right_front_Get_Distance+0x1ce>
			 time = (t2-t1);
    5038:	20 91 fc 02 	lds	r18, 0x02FC
    503c:	30 91 fd 02 	lds	r19, 0x02FD
    5040:	80 91 fa 02 	lds	r24, 0x02FA
    5044:	90 91 fb 02 	lds	r25, 0x02FB
    5048:	a9 01       	movw	r20, r18
    504a:	48 1b       	sub	r20, r24
    504c:	59 0b       	sbc	r21, r25
    504e:	ca 01       	movw	r24, r20
    5050:	cc 01       	movw	r24, r24
    5052:	a0 e0       	ldi	r26, 0x00	; 0
    5054:	b0 e0       	ldi	r27, 0x00	; 0
    5056:	8d 8f       	std	Y+29, r24	; 0x1d
    5058:	9e 8f       	std	Y+30, r25	; 0x1e
    505a:	af 8f       	std	Y+31, r26	; 0x1f
    505c:	b8 a3       	std	Y+32, r27	; 0x20
			 distance = time /58;
    505e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5060:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5062:	af 8d       	ldd	r26, Y+31	; 0x1f
    5064:	b8 a1       	ldd	r27, Y+32	; 0x20
    5066:	2a e3       	ldi	r18, 0x3A	; 58
    5068:	30 e0       	ldi	r19, 0x00	; 0
    506a:	40 e0       	ldi	r20, 0x00	; 0
    506c:	50 e0       	ldi	r21, 0x00	; 0
    506e:	bc 01       	movw	r22, r24
    5070:	cd 01       	movw	r24, r26
    5072:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    5076:	da 01       	movw	r26, r20
    5078:	c9 01       	movw	r24, r18
    507a:	89 8f       	std	Y+25, r24	; 0x19
    507c:	9a 8f       	std	Y+26, r25	; 0x1a
    507e:	ab 8f       	std	Y+27, r26	; 0x1b
    5080:	bc 8f       	std	Y+28, r27	; 0x1c
			 Timer1_ICU_InterruptDisable();
    5082:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <Timer1_ICU_InterruptDisable>


			 return distance;
    5086:	89 8d       	ldd	r24, Y+25	; 0x19
    5088:	9a 8d       	ldd	r25, Y+26	; 0x1a
    508a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    508c:	bc 8d       	ldd	r27, Y+28	; 0x1c
}
    508e:	bc 01       	movw	r22, r24
    5090:	cd 01       	movw	r24, r26
    5092:	a0 96       	adiw	r28, 0x20	; 32
    5094:	0f b6       	in	r0, 0x3f	; 63
    5096:	f8 94       	cli
    5098:	de bf       	out	0x3e, r29	; 62
    509a:	0f be       	out	0x3f, r0	; 63
    509c:	cd bf       	out	0x3d, r28	; 61
    509e:	cf 91       	pop	r28
    50a0:	df 91       	pop	r29
    50a2:	08 95       	ret

000050a4 <Ultrasonic_right_back_Get_Distance>:
uint32 Ultrasonic_right_back_Get_Distance(void)
{
    50a4:	df 93       	push	r29
    50a6:	cf 93       	push	r28
    50a8:	cd b7       	in	r28, 0x3d	; 61
    50aa:	de b7       	in	r29, 0x3e	; 62
    50ac:	a0 97       	sbiw	r28, 0x20	; 32
    50ae:	0f b6       	in	r0, 0x3f	; 63
    50b0:	f8 94       	cli
    50b2:	de bf       	out	0x3e, r29	; 62
    50b4:	0f be       	out	0x3f, r0	; 63
    50b6:	cd bf       	out	0x3d, r28	; 61
	uint32 time=0,distance=0;
    50b8:	1d 8e       	std	Y+29, r1	; 0x1d
    50ba:	1e 8e       	std	Y+30, r1	; 0x1e
    50bc:	1f 8e       	std	Y+31, r1	; 0x1f
    50be:	18 a2       	std	Y+32, r1	; 0x20
    50c0:	19 8e       	std	Y+25, r1	; 0x19
    50c2:	1a 8e       	std	Y+26, r1	; 0x1a
    50c4:	1b 8e       	std	Y+27, r1	; 0x1b
    50c6:	1c 8e       	std	Y+28, r1	; 0x1c
			c = 0;
    50c8:	10 92 f9 02 	sts	0x02F9, r1
			TCNT1 = 0;
    50cc:	ec e4       	ldi	r30, 0x4C	; 76
    50ce:	f0 e0       	ldi	r31, 0x00	; 0
    50d0:	11 82       	std	Z+1, r1	; 0x01
    50d2:	10 82       	st	Z, r1
			f = 0;
    50d4:	10 92 f8 02 	sts	0x02F8, r1

			DIO_void_Set_Pin_Value(PORTA_ID,trig2,HIGH);
    50d8:	80 e0       	ldi	r24, 0x00	; 0
    50da:	63 e0       	ldi	r22, 0x03	; 3
    50dc:	41 e0       	ldi	r20, 0x01	; 1
    50de:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
    50e2:	80 e0       	ldi	r24, 0x00	; 0
    50e4:	90 e0       	ldi	r25, 0x00	; 0
    50e6:	a0 e2       	ldi	r26, 0x20	; 32
    50e8:	b1 e4       	ldi	r27, 0x41	; 65
    50ea:	8d 8b       	std	Y+21, r24	; 0x15
    50ec:	9e 8b       	std	Y+22, r25	; 0x16
    50ee:	af 8b       	std	Y+23, r26	; 0x17
    50f0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    50f2:	6d 89       	ldd	r22, Y+21	; 0x15
    50f4:	7e 89       	ldd	r23, Y+22	; 0x16
    50f6:	8f 89       	ldd	r24, Y+23	; 0x17
    50f8:	98 8d       	ldd	r25, Y+24	; 0x18
    50fa:	2b ea       	ldi	r18, 0xAB	; 171
    50fc:	3a ea       	ldi	r19, 0xAA	; 170
    50fe:	4a e2       	ldi	r20, 0x2A	; 42
    5100:	50 e4       	ldi	r21, 0x40	; 64
    5102:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    5106:	dc 01       	movw	r26, r24
    5108:	cb 01       	movw	r24, r22
    510a:	89 8b       	std	Y+17, r24	; 0x11
    510c:	9a 8b       	std	Y+18, r25	; 0x12
    510e:	ab 8b       	std	Y+19, r26	; 0x13
    5110:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5112:	69 89       	ldd	r22, Y+17	; 0x11
    5114:	7a 89       	ldd	r23, Y+18	; 0x12
    5116:	8b 89       	ldd	r24, Y+19	; 0x13
    5118:	9c 89       	ldd	r25, Y+20	; 0x14
    511a:	20 e0       	ldi	r18, 0x00	; 0
    511c:	30 e0       	ldi	r19, 0x00	; 0
    511e:	40 e8       	ldi	r20, 0x80	; 128
    5120:	5f e3       	ldi	r21, 0x3F	; 63
    5122:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    5126:	88 23       	and	r24, r24
    5128:	1c f4       	brge	.+6      	; 0x5130 <Ultrasonic_right_back_Get_Distance+0x8c>
		__ticks = 1;
    512a:	81 e0       	ldi	r24, 0x01	; 1
    512c:	88 8b       	std	Y+16, r24	; 0x10
    512e:	91 c0       	rjmp	.+290    	; 0x5252 <Ultrasonic_right_back_Get_Distance+0x1ae>
	else if (__tmp > 255)
    5130:	69 89       	ldd	r22, Y+17	; 0x11
    5132:	7a 89       	ldd	r23, Y+18	; 0x12
    5134:	8b 89       	ldd	r24, Y+19	; 0x13
    5136:	9c 89       	ldd	r25, Y+20	; 0x14
    5138:	20 e0       	ldi	r18, 0x00	; 0
    513a:	30 e0       	ldi	r19, 0x00	; 0
    513c:	4f e7       	ldi	r20, 0x7F	; 127
    513e:	53 e4       	ldi	r21, 0x43	; 67
    5140:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    5144:	18 16       	cp	r1, r24
    5146:	0c f0       	brlt	.+2      	; 0x514a <Ultrasonic_right_back_Get_Distance+0xa6>
    5148:	7b c0       	rjmp	.+246    	; 0x5240 <Ultrasonic_right_back_Get_Distance+0x19c>
	{
		_delay_ms(__us / 1000.0);
    514a:	6d 89       	ldd	r22, Y+21	; 0x15
    514c:	7e 89       	ldd	r23, Y+22	; 0x16
    514e:	8f 89       	ldd	r24, Y+23	; 0x17
    5150:	98 8d       	ldd	r25, Y+24	; 0x18
    5152:	20 e0       	ldi	r18, 0x00	; 0
    5154:	30 e0       	ldi	r19, 0x00	; 0
    5156:	4a e7       	ldi	r20, 0x7A	; 122
    5158:	54 e4       	ldi	r21, 0x44	; 68
    515a:	0e 94 9b 10 	call	0x2136	; 0x2136 <__divsf3>
    515e:	dc 01       	movw	r26, r24
    5160:	cb 01       	movw	r24, r22
    5162:	8c 87       	std	Y+12, r24	; 0x0c
    5164:	9d 87       	std	Y+13, r25	; 0x0d
    5166:	ae 87       	std	Y+14, r26	; 0x0e
    5168:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    516a:	6c 85       	ldd	r22, Y+12	; 0x0c
    516c:	7d 85       	ldd	r23, Y+13	; 0x0d
    516e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5170:	9f 85       	ldd	r25, Y+15	; 0x0f
    5172:	20 e0       	ldi	r18, 0x00	; 0
    5174:	30 e0       	ldi	r19, 0x00	; 0
    5176:	4a ef       	ldi	r20, 0xFA	; 250
    5178:	54 e4       	ldi	r21, 0x44	; 68
    517a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    517e:	dc 01       	movw	r26, r24
    5180:	cb 01       	movw	r24, r22
    5182:	88 87       	std	Y+8, r24	; 0x08
    5184:	99 87       	std	Y+9, r25	; 0x09
    5186:	aa 87       	std	Y+10, r26	; 0x0a
    5188:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    518a:	68 85       	ldd	r22, Y+8	; 0x08
    518c:	79 85       	ldd	r23, Y+9	; 0x09
    518e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5190:	9b 85       	ldd	r25, Y+11	; 0x0b
    5192:	20 e0       	ldi	r18, 0x00	; 0
    5194:	30 e0       	ldi	r19, 0x00	; 0
    5196:	40 e8       	ldi	r20, 0x80	; 128
    5198:	5f e3       	ldi	r21, 0x3F	; 63
    519a:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    519e:	88 23       	and	r24, r24
    51a0:	2c f4       	brge	.+10     	; 0x51ac <Ultrasonic_right_back_Get_Distance+0x108>
		__ticks = 1;
    51a2:	81 e0       	ldi	r24, 0x01	; 1
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	9f 83       	std	Y+7, r25	; 0x07
    51a8:	8e 83       	std	Y+6, r24	; 0x06
    51aa:	3f c0       	rjmp	.+126    	; 0x522a <Ultrasonic_right_back_Get_Distance+0x186>
	else if (__tmp > 65535)
    51ac:	68 85       	ldd	r22, Y+8	; 0x08
    51ae:	79 85       	ldd	r23, Y+9	; 0x09
    51b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    51b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    51b4:	20 e0       	ldi	r18, 0x00	; 0
    51b6:	3f ef       	ldi	r19, 0xFF	; 255
    51b8:	4f e7       	ldi	r20, 0x7F	; 127
    51ba:	57 e4       	ldi	r21, 0x47	; 71
    51bc:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    51c0:	18 16       	cp	r1, r24
    51c2:	4c f5       	brge	.+82     	; 0x5216 <Ultrasonic_right_back_Get_Distance+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51c4:	6c 85       	ldd	r22, Y+12	; 0x0c
    51c6:	7d 85       	ldd	r23, Y+13	; 0x0d
    51c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    51ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    51cc:	20 e0       	ldi	r18, 0x00	; 0
    51ce:	30 e0       	ldi	r19, 0x00	; 0
    51d0:	40 e2       	ldi	r20, 0x20	; 32
    51d2:	51 e4       	ldi	r21, 0x41	; 65
    51d4:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    51d8:	dc 01       	movw	r26, r24
    51da:	cb 01       	movw	r24, r22
    51dc:	bc 01       	movw	r22, r24
    51de:	cd 01       	movw	r24, r26
    51e0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    51e4:	dc 01       	movw	r26, r24
    51e6:	cb 01       	movw	r24, r22
    51e8:	9f 83       	std	Y+7, r25	; 0x07
    51ea:	8e 83       	std	Y+6, r24	; 0x06
    51ec:	0f c0       	rjmp	.+30     	; 0x520c <Ultrasonic_right_back_Get_Distance+0x168>
    51ee:	88 ec       	ldi	r24, 0xC8	; 200
    51f0:	90 e0       	ldi	r25, 0x00	; 0
    51f2:	9d 83       	std	Y+5, r25	; 0x05
    51f4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    51f6:	8c 81       	ldd	r24, Y+4	; 0x04
    51f8:	9d 81       	ldd	r25, Y+5	; 0x05
    51fa:	01 97       	sbiw	r24, 0x01	; 1
    51fc:	f1 f7       	brne	.-4      	; 0x51fa <Ultrasonic_right_back_Get_Distance+0x156>
    51fe:	9d 83       	std	Y+5, r25	; 0x05
    5200:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5202:	8e 81       	ldd	r24, Y+6	; 0x06
    5204:	9f 81       	ldd	r25, Y+7	; 0x07
    5206:	01 97       	sbiw	r24, 0x01	; 1
    5208:	9f 83       	std	Y+7, r25	; 0x07
    520a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    520c:	8e 81       	ldd	r24, Y+6	; 0x06
    520e:	9f 81       	ldd	r25, Y+7	; 0x07
    5210:	00 97       	sbiw	r24, 0x00	; 0
    5212:	69 f7       	brne	.-38     	; 0x51ee <Ultrasonic_right_back_Get_Distance+0x14a>
    5214:	24 c0       	rjmp	.+72     	; 0x525e <Ultrasonic_right_back_Get_Distance+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5216:	68 85       	ldd	r22, Y+8	; 0x08
    5218:	79 85       	ldd	r23, Y+9	; 0x09
    521a:	8a 85       	ldd	r24, Y+10	; 0x0a
    521c:	9b 85       	ldd	r25, Y+11	; 0x0b
    521e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    5222:	dc 01       	movw	r26, r24
    5224:	cb 01       	movw	r24, r22
    5226:	9f 83       	std	Y+7, r25	; 0x07
    5228:	8e 83       	std	Y+6, r24	; 0x06
    522a:	8e 81       	ldd	r24, Y+6	; 0x06
    522c:	9f 81       	ldd	r25, Y+7	; 0x07
    522e:	9b 83       	std	Y+3, r25	; 0x03
    5230:	8a 83       	std	Y+2, r24	; 0x02
    5232:	8a 81       	ldd	r24, Y+2	; 0x02
    5234:	9b 81       	ldd	r25, Y+3	; 0x03
    5236:	01 97       	sbiw	r24, 0x01	; 1
    5238:	f1 f7       	brne	.-4      	; 0x5236 <Ultrasonic_right_back_Get_Distance+0x192>
    523a:	9b 83       	std	Y+3, r25	; 0x03
    523c:	8a 83       	std	Y+2, r24	; 0x02
    523e:	0f c0       	rjmp	.+30     	; 0x525e <Ultrasonic_right_back_Get_Distance+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5240:	69 89       	ldd	r22, Y+17	; 0x11
    5242:	7a 89       	ldd	r23, Y+18	; 0x12
    5244:	8b 89       	ldd	r24, Y+19	; 0x13
    5246:	9c 89       	ldd	r25, Y+20	; 0x14
    5248:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    524c:	dc 01       	movw	r26, r24
    524e:	cb 01       	movw	r24, r22
    5250:	88 8b       	std	Y+16, r24	; 0x10
    5252:	88 89       	ldd	r24, Y+16	; 0x10
    5254:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5256:	89 81       	ldd	r24, Y+1	; 0x01
    5258:	8a 95       	dec	r24
    525a:	f1 f7       	brne	.-4      	; 0x5258 <Ultrasonic_right_back_Get_Distance+0x1b4>
    525c:	89 83       	std	Y+1, r24	; 0x01
			_delay_us(10);
			DIO_void_Set_Pin_Value(PORTA_ID,trig2,LOW);
    525e:	80 e0       	ldi	r24, 0x00	; 0
    5260:	63 e0       	ldi	r22, 0x03	; 3
    5262:	40 e0       	ldi	r20, 0x00	; 0
    5264:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>

			 Timer1_InputCaptureEdge(Rising);
    5268:	81 e0       	ldi	r24, 0x01	; 1
    526a:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Timer1_InputCaptureEdge>
	         Timer1_ICU_InterruptEnable();
    526e:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <Timer1_ICU_InterruptEnable>
			 while(f<2);
    5272:	80 91 f8 02 	lds	r24, 0x02F8
    5276:	82 30       	cpi	r24, 0x02	; 2
    5278:	e0 f3       	brcs	.-8      	; 0x5272 <Ultrasonic_right_back_Get_Distance+0x1ce>
			 time = (t2-t1);
    527a:	20 91 fc 02 	lds	r18, 0x02FC
    527e:	30 91 fd 02 	lds	r19, 0x02FD
    5282:	80 91 fa 02 	lds	r24, 0x02FA
    5286:	90 91 fb 02 	lds	r25, 0x02FB
    528a:	a9 01       	movw	r20, r18
    528c:	48 1b       	sub	r20, r24
    528e:	59 0b       	sbc	r21, r25
    5290:	ca 01       	movw	r24, r20
    5292:	cc 01       	movw	r24, r24
    5294:	a0 e0       	ldi	r26, 0x00	; 0
    5296:	b0 e0       	ldi	r27, 0x00	; 0
    5298:	8d 8f       	std	Y+29, r24	; 0x1d
    529a:	9e 8f       	std	Y+30, r25	; 0x1e
    529c:	af 8f       	std	Y+31, r26	; 0x1f
    529e:	b8 a3       	std	Y+32, r27	; 0x20
			 distance = time /58;
    52a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    52a4:	af 8d       	ldd	r26, Y+31	; 0x1f
    52a6:	b8 a1       	ldd	r27, Y+32	; 0x20
    52a8:	2a e3       	ldi	r18, 0x3A	; 58
    52aa:	30 e0       	ldi	r19, 0x00	; 0
    52ac:	40 e0       	ldi	r20, 0x00	; 0
    52ae:	50 e0       	ldi	r21, 0x00	; 0
    52b0:	bc 01       	movw	r22, r24
    52b2:	cd 01       	movw	r24, r26
    52b4:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    52b8:	da 01       	movw	r26, r20
    52ba:	c9 01       	movw	r24, r18
    52bc:	89 8f       	std	Y+25, r24	; 0x19
    52be:	9a 8f       	std	Y+26, r25	; 0x1a
    52c0:	ab 8f       	std	Y+27, r26	; 0x1b
    52c2:	bc 8f       	std	Y+28, r27	; 0x1c
			 Timer1_ICU_InterruptDisable();
    52c4:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <Timer1_ICU_InterruptDisable>


			 return distance;
    52c8:	89 8d       	ldd	r24, Y+25	; 0x19
    52ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    52cc:	ab 8d       	ldd	r26, Y+27	; 0x1b
    52ce:	bc 8d       	ldd	r27, Y+28	; 0x1c
}
    52d0:	bc 01       	movw	r22, r24
    52d2:	cd 01       	movw	r24, r26
    52d4:	a0 96       	adiw	r28, 0x20	; 32
    52d6:	0f b6       	in	r0, 0x3f	; 63
    52d8:	f8 94       	cli
    52da:	de bf       	out	0x3e, r29	; 62
    52dc:	0f be       	out	0x3f, r0	; 63
    52de:	cd bf       	out	0x3d, r28	; 61
    52e0:	cf 91       	pop	r28
    52e2:	df 91       	pop	r29
    52e4:	08 95       	ret

000052e6 <Ultrasonic_back_Get_Distance>:
uint32 Ultrasonic_back_Get_Distance(void)
{
    52e6:	df 93       	push	r29
    52e8:	cf 93       	push	r28
    52ea:	cd b7       	in	r28, 0x3d	; 61
    52ec:	de b7       	in	r29, 0x3e	; 62
    52ee:	a0 97       	sbiw	r28, 0x20	; 32
    52f0:	0f b6       	in	r0, 0x3f	; 63
    52f2:	f8 94       	cli
    52f4:	de bf       	out	0x3e, r29	; 62
    52f6:	0f be       	out	0x3f, r0	; 63
    52f8:	cd bf       	out	0x3d, r28	; 61
	uint32 time=0,distance=0;
    52fa:	1d 8e       	std	Y+29, r1	; 0x1d
    52fc:	1e 8e       	std	Y+30, r1	; 0x1e
    52fe:	1f 8e       	std	Y+31, r1	; 0x1f
    5300:	18 a2       	std	Y+32, r1	; 0x20
    5302:	19 8e       	std	Y+25, r1	; 0x19
    5304:	1a 8e       	std	Y+26, r1	; 0x1a
    5306:	1b 8e       	std	Y+27, r1	; 0x1b
    5308:	1c 8e       	std	Y+28, r1	; 0x1c
			c = 0;
    530a:	10 92 f9 02 	sts	0x02F9, r1
			TCNT1 = 0;
    530e:	ec e4       	ldi	r30, 0x4C	; 76
    5310:	f0 e0       	ldi	r31, 0x00	; 0
    5312:	11 82       	std	Z+1, r1	; 0x01
    5314:	10 82       	st	Z, r1
			f = 0;
    5316:	10 92 f8 02 	sts	0x02F8, r1

			DIO_void_Set_Pin_Value(PORTA_ID,trig3,HIGH);
    531a:	80 e0       	ldi	r24, 0x00	; 0
    531c:	64 e0       	ldi	r22, 0x04	; 4
    531e:	41 e0       	ldi	r20, 0x01	; 1
    5320:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
    5324:	80 e0       	ldi	r24, 0x00	; 0
    5326:	90 e0       	ldi	r25, 0x00	; 0
    5328:	a0 e2       	ldi	r26, 0x20	; 32
    532a:	b1 e4       	ldi	r27, 0x41	; 65
    532c:	8d 8b       	std	Y+21, r24	; 0x15
    532e:	9e 8b       	std	Y+22, r25	; 0x16
    5330:	af 8b       	std	Y+23, r26	; 0x17
    5332:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5334:	6d 89       	ldd	r22, Y+21	; 0x15
    5336:	7e 89       	ldd	r23, Y+22	; 0x16
    5338:	8f 89       	ldd	r24, Y+23	; 0x17
    533a:	98 8d       	ldd	r25, Y+24	; 0x18
    533c:	2b ea       	ldi	r18, 0xAB	; 171
    533e:	3a ea       	ldi	r19, 0xAA	; 170
    5340:	4a e2       	ldi	r20, 0x2A	; 42
    5342:	50 e4       	ldi	r21, 0x40	; 64
    5344:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    5348:	dc 01       	movw	r26, r24
    534a:	cb 01       	movw	r24, r22
    534c:	89 8b       	std	Y+17, r24	; 0x11
    534e:	9a 8b       	std	Y+18, r25	; 0x12
    5350:	ab 8b       	std	Y+19, r26	; 0x13
    5352:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5354:	69 89       	ldd	r22, Y+17	; 0x11
    5356:	7a 89       	ldd	r23, Y+18	; 0x12
    5358:	8b 89       	ldd	r24, Y+19	; 0x13
    535a:	9c 89       	ldd	r25, Y+20	; 0x14
    535c:	20 e0       	ldi	r18, 0x00	; 0
    535e:	30 e0       	ldi	r19, 0x00	; 0
    5360:	40 e8       	ldi	r20, 0x80	; 128
    5362:	5f e3       	ldi	r21, 0x3F	; 63
    5364:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    5368:	88 23       	and	r24, r24
    536a:	1c f4       	brge	.+6      	; 0x5372 <Ultrasonic_back_Get_Distance+0x8c>
		__ticks = 1;
    536c:	81 e0       	ldi	r24, 0x01	; 1
    536e:	88 8b       	std	Y+16, r24	; 0x10
    5370:	91 c0       	rjmp	.+290    	; 0x5494 <Ultrasonic_back_Get_Distance+0x1ae>
	else if (__tmp > 255)
    5372:	69 89       	ldd	r22, Y+17	; 0x11
    5374:	7a 89       	ldd	r23, Y+18	; 0x12
    5376:	8b 89       	ldd	r24, Y+19	; 0x13
    5378:	9c 89       	ldd	r25, Y+20	; 0x14
    537a:	20 e0       	ldi	r18, 0x00	; 0
    537c:	30 e0       	ldi	r19, 0x00	; 0
    537e:	4f e7       	ldi	r20, 0x7F	; 127
    5380:	53 e4       	ldi	r21, 0x43	; 67
    5382:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    5386:	18 16       	cp	r1, r24
    5388:	0c f0       	brlt	.+2      	; 0x538c <Ultrasonic_back_Get_Distance+0xa6>
    538a:	7b c0       	rjmp	.+246    	; 0x5482 <Ultrasonic_back_Get_Distance+0x19c>
	{
		_delay_ms(__us / 1000.0);
    538c:	6d 89       	ldd	r22, Y+21	; 0x15
    538e:	7e 89       	ldd	r23, Y+22	; 0x16
    5390:	8f 89       	ldd	r24, Y+23	; 0x17
    5392:	98 8d       	ldd	r25, Y+24	; 0x18
    5394:	20 e0       	ldi	r18, 0x00	; 0
    5396:	30 e0       	ldi	r19, 0x00	; 0
    5398:	4a e7       	ldi	r20, 0x7A	; 122
    539a:	54 e4       	ldi	r21, 0x44	; 68
    539c:	0e 94 9b 10 	call	0x2136	; 0x2136 <__divsf3>
    53a0:	dc 01       	movw	r26, r24
    53a2:	cb 01       	movw	r24, r22
    53a4:	8c 87       	std	Y+12, r24	; 0x0c
    53a6:	9d 87       	std	Y+13, r25	; 0x0d
    53a8:	ae 87       	std	Y+14, r26	; 0x0e
    53aa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    53ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    53b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    53b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    53b4:	20 e0       	ldi	r18, 0x00	; 0
    53b6:	30 e0       	ldi	r19, 0x00	; 0
    53b8:	4a ef       	ldi	r20, 0xFA	; 250
    53ba:	54 e4       	ldi	r21, 0x44	; 68
    53bc:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    53c0:	dc 01       	movw	r26, r24
    53c2:	cb 01       	movw	r24, r22
    53c4:	88 87       	std	Y+8, r24	; 0x08
    53c6:	99 87       	std	Y+9, r25	; 0x09
    53c8:	aa 87       	std	Y+10, r26	; 0x0a
    53ca:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    53cc:	68 85       	ldd	r22, Y+8	; 0x08
    53ce:	79 85       	ldd	r23, Y+9	; 0x09
    53d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    53d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    53d4:	20 e0       	ldi	r18, 0x00	; 0
    53d6:	30 e0       	ldi	r19, 0x00	; 0
    53d8:	40 e8       	ldi	r20, 0x80	; 128
    53da:	5f e3       	ldi	r21, 0x3F	; 63
    53dc:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    53e0:	88 23       	and	r24, r24
    53e2:	2c f4       	brge	.+10     	; 0x53ee <Ultrasonic_back_Get_Distance+0x108>
		__ticks = 1;
    53e4:	81 e0       	ldi	r24, 0x01	; 1
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	9f 83       	std	Y+7, r25	; 0x07
    53ea:	8e 83       	std	Y+6, r24	; 0x06
    53ec:	3f c0       	rjmp	.+126    	; 0x546c <Ultrasonic_back_Get_Distance+0x186>
	else if (__tmp > 65535)
    53ee:	68 85       	ldd	r22, Y+8	; 0x08
    53f0:	79 85       	ldd	r23, Y+9	; 0x09
    53f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    53f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    53f6:	20 e0       	ldi	r18, 0x00	; 0
    53f8:	3f ef       	ldi	r19, 0xFF	; 255
    53fa:	4f e7       	ldi	r20, 0x7F	; 127
    53fc:	57 e4       	ldi	r21, 0x47	; 71
    53fe:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    5402:	18 16       	cp	r1, r24
    5404:	4c f5       	brge	.+82     	; 0x5458 <Ultrasonic_back_Get_Distance+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5406:	6c 85       	ldd	r22, Y+12	; 0x0c
    5408:	7d 85       	ldd	r23, Y+13	; 0x0d
    540a:	8e 85       	ldd	r24, Y+14	; 0x0e
    540c:	9f 85       	ldd	r25, Y+15	; 0x0f
    540e:	20 e0       	ldi	r18, 0x00	; 0
    5410:	30 e0       	ldi	r19, 0x00	; 0
    5412:	40 e2       	ldi	r20, 0x20	; 32
    5414:	51 e4       	ldi	r21, 0x41	; 65
    5416:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    541a:	dc 01       	movw	r26, r24
    541c:	cb 01       	movw	r24, r22
    541e:	bc 01       	movw	r22, r24
    5420:	cd 01       	movw	r24, r26
    5422:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    5426:	dc 01       	movw	r26, r24
    5428:	cb 01       	movw	r24, r22
    542a:	9f 83       	std	Y+7, r25	; 0x07
    542c:	8e 83       	std	Y+6, r24	; 0x06
    542e:	0f c0       	rjmp	.+30     	; 0x544e <Ultrasonic_back_Get_Distance+0x168>
    5430:	88 ec       	ldi	r24, 0xC8	; 200
    5432:	90 e0       	ldi	r25, 0x00	; 0
    5434:	9d 83       	std	Y+5, r25	; 0x05
    5436:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5438:	8c 81       	ldd	r24, Y+4	; 0x04
    543a:	9d 81       	ldd	r25, Y+5	; 0x05
    543c:	01 97       	sbiw	r24, 0x01	; 1
    543e:	f1 f7       	brne	.-4      	; 0x543c <Ultrasonic_back_Get_Distance+0x156>
    5440:	9d 83       	std	Y+5, r25	; 0x05
    5442:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5444:	8e 81       	ldd	r24, Y+6	; 0x06
    5446:	9f 81       	ldd	r25, Y+7	; 0x07
    5448:	01 97       	sbiw	r24, 0x01	; 1
    544a:	9f 83       	std	Y+7, r25	; 0x07
    544c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    544e:	8e 81       	ldd	r24, Y+6	; 0x06
    5450:	9f 81       	ldd	r25, Y+7	; 0x07
    5452:	00 97       	sbiw	r24, 0x00	; 0
    5454:	69 f7       	brne	.-38     	; 0x5430 <Ultrasonic_back_Get_Distance+0x14a>
    5456:	24 c0       	rjmp	.+72     	; 0x54a0 <Ultrasonic_back_Get_Distance+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5458:	68 85       	ldd	r22, Y+8	; 0x08
    545a:	79 85       	ldd	r23, Y+9	; 0x09
    545c:	8a 85       	ldd	r24, Y+10	; 0x0a
    545e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5460:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    5464:	dc 01       	movw	r26, r24
    5466:	cb 01       	movw	r24, r22
    5468:	9f 83       	std	Y+7, r25	; 0x07
    546a:	8e 83       	std	Y+6, r24	; 0x06
    546c:	8e 81       	ldd	r24, Y+6	; 0x06
    546e:	9f 81       	ldd	r25, Y+7	; 0x07
    5470:	9b 83       	std	Y+3, r25	; 0x03
    5472:	8a 83       	std	Y+2, r24	; 0x02
    5474:	8a 81       	ldd	r24, Y+2	; 0x02
    5476:	9b 81       	ldd	r25, Y+3	; 0x03
    5478:	01 97       	sbiw	r24, 0x01	; 1
    547a:	f1 f7       	brne	.-4      	; 0x5478 <Ultrasonic_back_Get_Distance+0x192>
    547c:	9b 83       	std	Y+3, r25	; 0x03
    547e:	8a 83       	std	Y+2, r24	; 0x02
    5480:	0f c0       	rjmp	.+30     	; 0x54a0 <Ultrasonic_back_Get_Distance+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5482:	69 89       	ldd	r22, Y+17	; 0x11
    5484:	7a 89       	ldd	r23, Y+18	; 0x12
    5486:	8b 89       	ldd	r24, Y+19	; 0x13
    5488:	9c 89       	ldd	r25, Y+20	; 0x14
    548a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    548e:	dc 01       	movw	r26, r24
    5490:	cb 01       	movw	r24, r22
    5492:	88 8b       	std	Y+16, r24	; 0x10
    5494:	88 89       	ldd	r24, Y+16	; 0x10
    5496:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5498:	89 81       	ldd	r24, Y+1	; 0x01
    549a:	8a 95       	dec	r24
    549c:	f1 f7       	brne	.-4      	; 0x549a <Ultrasonic_back_Get_Distance+0x1b4>
    549e:	89 83       	std	Y+1, r24	; 0x01
			_delay_us(10);
			DIO_void_Set_Pin_Value(PORTA_ID,trig3,LOW);
    54a0:	80 e0       	ldi	r24, 0x00	; 0
    54a2:	64 e0       	ldi	r22, 0x04	; 4
    54a4:	40 e0       	ldi	r20, 0x00	; 0
    54a6:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>

			 Timer1_InputCaptureEdge(Rising);
    54aa:	81 e0       	ldi	r24, 0x01	; 1
    54ac:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Timer1_InputCaptureEdge>
	         Timer1_ICU_InterruptEnable();
    54b0:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <Timer1_ICU_InterruptEnable>
			 while(f<2);
    54b4:	80 91 f8 02 	lds	r24, 0x02F8
    54b8:	82 30       	cpi	r24, 0x02	; 2
    54ba:	e0 f3       	brcs	.-8      	; 0x54b4 <Ultrasonic_back_Get_Distance+0x1ce>
			 time = (t2-t1);
    54bc:	20 91 fc 02 	lds	r18, 0x02FC
    54c0:	30 91 fd 02 	lds	r19, 0x02FD
    54c4:	80 91 fa 02 	lds	r24, 0x02FA
    54c8:	90 91 fb 02 	lds	r25, 0x02FB
    54cc:	a9 01       	movw	r20, r18
    54ce:	48 1b       	sub	r20, r24
    54d0:	59 0b       	sbc	r21, r25
    54d2:	ca 01       	movw	r24, r20
    54d4:	cc 01       	movw	r24, r24
    54d6:	a0 e0       	ldi	r26, 0x00	; 0
    54d8:	b0 e0       	ldi	r27, 0x00	; 0
    54da:	8d 8f       	std	Y+29, r24	; 0x1d
    54dc:	9e 8f       	std	Y+30, r25	; 0x1e
    54de:	af 8f       	std	Y+31, r26	; 0x1f
    54e0:	b8 a3       	std	Y+32, r27	; 0x20
			 distance = time /58;
    54e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    54e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    54e6:	af 8d       	ldd	r26, Y+31	; 0x1f
    54e8:	b8 a1       	ldd	r27, Y+32	; 0x20
    54ea:	2a e3       	ldi	r18, 0x3A	; 58
    54ec:	30 e0       	ldi	r19, 0x00	; 0
    54ee:	40 e0       	ldi	r20, 0x00	; 0
    54f0:	50 e0       	ldi	r21, 0x00	; 0
    54f2:	bc 01       	movw	r22, r24
    54f4:	cd 01       	movw	r24, r26
    54f6:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    54fa:	da 01       	movw	r26, r20
    54fc:	c9 01       	movw	r24, r18
    54fe:	89 8f       	std	Y+25, r24	; 0x19
    5500:	9a 8f       	std	Y+26, r25	; 0x1a
    5502:	ab 8f       	std	Y+27, r26	; 0x1b
    5504:	bc 8f       	std	Y+28, r27	; 0x1c
			 Timer1_ICU_InterruptDisable();
    5506:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <Timer1_ICU_InterruptDisable>


			 return distance;
    550a:	89 8d       	ldd	r24, Y+25	; 0x19
    550c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    550e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    5510:	bc 8d       	ldd	r27, Y+28	; 0x1c
}
    5512:	bc 01       	movw	r22, r24
    5514:	cd 01       	movw	r24, r26
    5516:	a0 96       	adiw	r28, 0x20	; 32
    5518:	0f b6       	in	r0, 0x3f	; 63
    551a:	f8 94       	cli
    551c:	de bf       	out	0x3e, r29	; 62
    551e:	0f be       	out	0x3f, r0	; 63
    5520:	cd bf       	out	0x3d, r28	; 61
    5522:	cf 91       	pop	r28
    5524:	df 91       	pop	r29
    5526:	08 95       	ret

00005528 <Ultrasonic_back2_Get_Distance>:
uint32 Ultrasonic_back2_Get_Distance(void)
{
    5528:	df 93       	push	r29
    552a:	cf 93       	push	r28
    552c:	cd b7       	in	r28, 0x3d	; 61
    552e:	de b7       	in	r29, 0x3e	; 62
    5530:	a0 97       	sbiw	r28, 0x20	; 32
    5532:	0f b6       	in	r0, 0x3f	; 63
    5534:	f8 94       	cli
    5536:	de bf       	out	0x3e, r29	; 62
    5538:	0f be       	out	0x3f, r0	; 63
    553a:	cd bf       	out	0x3d, r28	; 61
	uint32 time=0,distance=0;
    553c:	1d 8e       	std	Y+29, r1	; 0x1d
    553e:	1e 8e       	std	Y+30, r1	; 0x1e
    5540:	1f 8e       	std	Y+31, r1	; 0x1f
    5542:	18 a2       	std	Y+32, r1	; 0x20
    5544:	19 8e       	std	Y+25, r1	; 0x19
    5546:	1a 8e       	std	Y+26, r1	; 0x1a
    5548:	1b 8e       	std	Y+27, r1	; 0x1b
    554a:	1c 8e       	std	Y+28, r1	; 0x1c
				c = 0;
    554c:	10 92 f9 02 	sts	0x02F9, r1
				TCNT1 = 0;
    5550:	ec e4       	ldi	r30, 0x4C	; 76
    5552:	f0 e0       	ldi	r31, 0x00	; 0
    5554:	11 82       	std	Z+1, r1	; 0x01
    5556:	10 82       	st	Z, r1
				f = 0;
    5558:	10 92 f8 02 	sts	0x02F8, r1

				DIO_void_Set_Pin_Value(PORTA_ID,trig4,HIGH);
    555c:	80 e0       	ldi	r24, 0x00	; 0
    555e:	65 e0       	ldi	r22, 0x05	; 5
    5560:	41 e0       	ldi	r20, 0x01	; 1
    5562:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
    5566:	80 e0       	ldi	r24, 0x00	; 0
    5568:	90 e0       	ldi	r25, 0x00	; 0
    556a:	a0 e2       	ldi	r26, 0x20	; 32
    556c:	b1 e4       	ldi	r27, 0x41	; 65
    556e:	8d 8b       	std	Y+21, r24	; 0x15
    5570:	9e 8b       	std	Y+22, r25	; 0x16
    5572:	af 8b       	std	Y+23, r26	; 0x17
    5574:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5576:	6d 89       	ldd	r22, Y+21	; 0x15
    5578:	7e 89       	ldd	r23, Y+22	; 0x16
    557a:	8f 89       	ldd	r24, Y+23	; 0x17
    557c:	98 8d       	ldd	r25, Y+24	; 0x18
    557e:	2b ea       	ldi	r18, 0xAB	; 171
    5580:	3a ea       	ldi	r19, 0xAA	; 170
    5582:	4a e2       	ldi	r20, 0x2A	; 42
    5584:	50 e4       	ldi	r21, 0x40	; 64
    5586:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    558a:	dc 01       	movw	r26, r24
    558c:	cb 01       	movw	r24, r22
    558e:	89 8b       	std	Y+17, r24	; 0x11
    5590:	9a 8b       	std	Y+18, r25	; 0x12
    5592:	ab 8b       	std	Y+19, r26	; 0x13
    5594:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5596:	69 89       	ldd	r22, Y+17	; 0x11
    5598:	7a 89       	ldd	r23, Y+18	; 0x12
    559a:	8b 89       	ldd	r24, Y+19	; 0x13
    559c:	9c 89       	ldd	r25, Y+20	; 0x14
    559e:	20 e0       	ldi	r18, 0x00	; 0
    55a0:	30 e0       	ldi	r19, 0x00	; 0
    55a2:	40 e8       	ldi	r20, 0x80	; 128
    55a4:	5f e3       	ldi	r21, 0x3F	; 63
    55a6:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    55aa:	88 23       	and	r24, r24
    55ac:	1c f4       	brge	.+6      	; 0x55b4 <Ultrasonic_back2_Get_Distance+0x8c>
		__ticks = 1;
    55ae:	81 e0       	ldi	r24, 0x01	; 1
    55b0:	88 8b       	std	Y+16, r24	; 0x10
    55b2:	91 c0       	rjmp	.+290    	; 0x56d6 <Ultrasonic_back2_Get_Distance+0x1ae>
	else if (__tmp > 255)
    55b4:	69 89       	ldd	r22, Y+17	; 0x11
    55b6:	7a 89       	ldd	r23, Y+18	; 0x12
    55b8:	8b 89       	ldd	r24, Y+19	; 0x13
    55ba:	9c 89       	ldd	r25, Y+20	; 0x14
    55bc:	20 e0       	ldi	r18, 0x00	; 0
    55be:	30 e0       	ldi	r19, 0x00	; 0
    55c0:	4f e7       	ldi	r20, 0x7F	; 127
    55c2:	53 e4       	ldi	r21, 0x43	; 67
    55c4:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    55c8:	18 16       	cp	r1, r24
    55ca:	0c f0       	brlt	.+2      	; 0x55ce <Ultrasonic_back2_Get_Distance+0xa6>
    55cc:	7b c0       	rjmp	.+246    	; 0x56c4 <Ultrasonic_back2_Get_Distance+0x19c>
	{
		_delay_ms(__us / 1000.0);
    55ce:	6d 89       	ldd	r22, Y+21	; 0x15
    55d0:	7e 89       	ldd	r23, Y+22	; 0x16
    55d2:	8f 89       	ldd	r24, Y+23	; 0x17
    55d4:	98 8d       	ldd	r25, Y+24	; 0x18
    55d6:	20 e0       	ldi	r18, 0x00	; 0
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	4a e7       	ldi	r20, 0x7A	; 122
    55dc:	54 e4       	ldi	r21, 0x44	; 68
    55de:	0e 94 9b 10 	call	0x2136	; 0x2136 <__divsf3>
    55e2:	dc 01       	movw	r26, r24
    55e4:	cb 01       	movw	r24, r22
    55e6:	8c 87       	std	Y+12, r24	; 0x0c
    55e8:	9d 87       	std	Y+13, r25	; 0x0d
    55ea:	ae 87       	std	Y+14, r26	; 0x0e
    55ec:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    55f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    55f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    55f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    55f6:	20 e0       	ldi	r18, 0x00	; 0
    55f8:	30 e0       	ldi	r19, 0x00	; 0
    55fa:	4a ef       	ldi	r20, 0xFA	; 250
    55fc:	54 e4       	ldi	r21, 0x44	; 68
    55fe:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    5602:	dc 01       	movw	r26, r24
    5604:	cb 01       	movw	r24, r22
    5606:	88 87       	std	Y+8, r24	; 0x08
    5608:	99 87       	std	Y+9, r25	; 0x09
    560a:	aa 87       	std	Y+10, r26	; 0x0a
    560c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    560e:	68 85       	ldd	r22, Y+8	; 0x08
    5610:	79 85       	ldd	r23, Y+9	; 0x09
    5612:	8a 85       	ldd	r24, Y+10	; 0x0a
    5614:	9b 85       	ldd	r25, Y+11	; 0x0b
    5616:	20 e0       	ldi	r18, 0x00	; 0
    5618:	30 e0       	ldi	r19, 0x00	; 0
    561a:	40 e8       	ldi	r20, 0x80	; 128
    561c:	5f e3       	ldi	r21, 0x3F	; 63
    561e:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    5622:	88 23       	and	r24, r24
    5624:	2c f4       	brge	.+10     	; 0x5630 <Ultrasonic_back2_Get_Distance+0x108>
		__ticks = 1;
    5626:	81 e0       	ldi	r24, 0x01	; 1
    5628:	90 e0       	ldi	r25, 0x00	; 0
    562a:	9f 83       	std	Y+7, r25	; 0x07
    562c:	8e 83       	std	Y+6, r24	; 0x06
    562e:	3f c0       	rjmp	.+126    	; 0x56ae <Ultrasonic_back2_Get_Distance+0x186>
	else if (__tmp > 65535)
    5630:	68 85       	ldd	r22, Y+8	; 0x08
    5632:	79 85       	ldd	r23, Y+9	; 0x09
    5634:	8a 85       	ldd	r24, Y+10	; 0x0a
    5636:	9b 85       	ldd	r25, Y+11	; 0x0b
    5638:	20 e0       	ldi	r18, 0x00	; 0
    563a:	3f ef       	ldi	r19, 0xFF	; 255
    563c:	4f e7       	ldi	r20, 0x7F	; 127
    563e:	57 e4       	ldi	r21, 0x47	; 71
    5640:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    5644:	18 16       	cp	r1, r24
    5646:	4c f5       	brge	.+82     	; 0x569a <Ultrasonic_back2_Get_Distance+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5648:	6c 85       	ldd	r22, Y+12	; 0x0c
    564a:	7d 85       	ldd	r23, Y+13	; 0x0d
    564c:	8e 85       	ldd	r24, Y+14	; 0x0e
    564e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5650:	20 e0       	ldi	r18, 0x00	; 0
    5652:	30 e0       	ldi	r19, 0x00	; 0
    5654:	40 e2       	ldi	r20, 0x20	; 32
    5656:	51 e4       	ldi	r21, 0x41	; 65
    5658:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    565c:	dc 01       	movw	r26, r24
    565e:	cb 01       	movw	r24, r22
    5660:	bc 01       	movw	r22, r24
    5662:	cd 01       	movw	r24, r26
    5664:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    5668:	dc 01       	movw	r26, r24
    566a:	cb 01       	movw	r24, r22
    566c:	9f 83       	std	Y+7, r25	; 0x07
    566e:	8e 83       	std	Y+6, r24	; 0x06
    5670:	0f c0       	rjmp	.+30     	; 0x5690 <Ultrasonic_back2_Get_Distance+0x168>
    5672:	88 ec       	ldi	r24, 0xC8	; 200
    5674:	90 e0       	ldi	r25, 0x00	; 0
    5676:	9d 83       	std	Y+5, r25	; 0x05
    5678:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    567a:	8c 81       	ldd	r24, Y+4	; 0x04
    567c:	9d 81       	ldd	r25, Y+5	; 0x05
    567e:	01 97       	sbiw	r24, 0x01	; 1
    5680:	f1 f7       	brne	.-4      	; 0x567e <Ultrasonic_back2_Get_Distance+0x156>
    5682:	9d 83       	std	Y+5, r25	; 0x05
    5684:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5686:	8e 81       	ldd	r24, Y+6	; 0x06
    5688:	9f 81       	ldd	r25, Y+7	; 0x07
    568a:	01 97       	sbiw	r24, 0x01	; 1
    568c:	9f 83       	std	Y+7, r25	; 0x07
    568e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5690:	8e 81       	ldd	r24, Y+6	; 0x06
    5692:	9f 81       	ldd	r25, Y+7	; 0x07
    5694:	00 97       	sbiw	r24, 0x00	; 0
    5696:	69 f7       	brne	.-38     	; 0x5672 <Ultrasonic_back2_Get_Distance+0x14a>
    5698:	24 c0       	rjmp	.+72     	; 0x56e2 <Ultrasonic_back2_Get_Distance+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    569a:	68 85       	ldd	r22, Y+8	; 0x08
    569c:	79 85       	ldd	r23, Y+9	; 0x09
    569e:	8a 85       	ldd	r24, Y+10	; 0x0a
    56a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    56a2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    56a6:	dc 01       	movw	r26, r24
    56a8:	cb 01       	movw	r24, r22
    56aa:	9f 83       	std	Y+7, r25	; 0x07
    56ac:	8e 83       	std	Y+6, r24	; 0x06
    56ae:	8e 81       	ldd	r24, Y+6	; 0x06
    56b0:	9f 81       	ldd	r25, Y+7	; 0x07
    56b2:	9b 83       	std	Y+3, r25	; 0x03
    56b4:	8a 83       	std	Y+2, r24	; 0x02
    56b6:	8a 81       	ldd	r24, Y+2	; 0x02
    56b8:	9b 81       	ldd	r25, Y+3	; 0x03
    56ba:	01 97       	sbiw	r24, 0x01	; 1
    56bc:	f1 f7       	brne	.-4      	; 0x56ba <Ultrasonic_back2_Get_Distance+0x192>
    56be:	9b 83       	std	Y+3, r25	; 0x03
    56c0:	8a 83       	std	Y+2, r24	; 0x02
    56c2:	0f c0       	rjmp	.+30     	; 0x56e2 <Ultrasonic_back2_Get_Distance+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    56c4:	69 89       	ldd	r22, Y+17	; 0x11
    56c6:	7a 89       	ldd	r23, Y+18	; 0x12
    56c8:	8b 89       	ldd	r24, Y+19	; 0x13
    56ca:	9c 89       	ldd	r25, Y+20	; 0x14
    56cc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    56d0:	dc 01       	movw	r26, r24
    56d2:	cb 01       	movw	r24, r22
    56d4:	88 8b       	std	Y+16, r24	; 0x10
    56d6:	88 89       	ldd	r24, Y+16	; 0x10
    56d8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    56da:	89 81       	ldd	r24, Y+1	; 0x01
    56dc:	8a 95       	dec	r24
    56de:	f1 f7       	brne	.-4      	; 0x56dc <Ultrasonic_back2_Get_Distance+0x1b4>
    56e0:	89 83       	std	Y+1, r24	; 0x01
				_delay_us(10);
				DIO_void_Set_Pin_Value(PORTA_ID,trig4,LOW);
    56e2:	80 e0       	ldi	r24, 0x00	; 0
    56e4:	65 e0       	ldi	r22, 0x05	; 5
    56e6:	40 e0       	ldi	r20, 0x00	; 0
    56e8:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>

				 Timer1_InputCaptureEdge(Rising);
    56ec:	81 e0       	ldi	r24, 0x01	; 1
    56ee:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Timer1_InputCaptureEdge>
		         Timer1_ICU_InterruptEnable();
    56f2:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <Timer1_ICU_InterruptEnable>
				 while(f<2);
    56f6:	80 91 f8 02 	lds	r24, 0x02F8
    56fa:	82 30       	cpi	r24, 0x02	; 2
    56fc:	e0 f3       	brcs	.-8      	; 0x56f6 <Ultrasonic_back2_Get_Distance+0x1ce>
				 time = (t2-t1);
    56fe:	20 91 fc 02 	lds	r18, 0x02FC
    5702:	30 91 fd 02 	lds	r19, 0x02FD
    5706:	80 91 fa 02 	lds	r24, 0x02FA
    570a:	90 91 fb 02 	lds	r25, 0x02FB
    570e:	a9 01       	movw	r20, r18
    5710:	48 1b       	sub	r20, r24
    5712:	59 0b       	sbc	r21, r25
    5714:	ca 01       	movw	r24, r20
    5716:	cc 01       	movw	r24, r24
    5718:	a0 e0       	ldi	r26, 0x00	; 0
    571a:	b0 e0       	ldi	r27, 0x00	; 0
    571c:	8d 8f       	std	Y+29, r24	; 0x1d
    571e:	9e 8f       	std	Y+30, r25	; 0x1e
    5720:	af 8f       	std	Y+31, r26	; 0x1f
    5722:	b8 a3       	std	Y+32, r27	; 0x20
				 distance = time /58;
    5724:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5726:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5728:	af 8d       	ldd	r26, Y+31	; 0x1f
    572a:	b8 a1       	ldd	r27, Y+32	; 0x20
    572c:	2a e3       	ldi	r18, 0x3A	; 58
    572e:	30 e0       	ldi	r19, 0x00	; 0
    5730:	40 e0       	ldi	r20, 0x00	; 0
    5732:	50 e0       	ldi	r21, 0x00	; 0
    5734:	bc 01       	movw	r22, r24
    5736:	cd 01       	movw	r24, r26
    5738:	0e 94 8e 55 	call	0xab1c	; 0xab1c <__udivmodsi4>
    573c:	da 01       	movw	r26, r20
    573e:	c9 01       	movw	r24, r18
    5740:	89 8f       	std	Y+25, r24	; 0x19
    5742:	9a 8f       	std	Y+26, r25	; 0x1a
    5744:	ab 8f       	std	Y+27, r26	; 0x1b
    5746:	bc 8f       	std	Y+28, r27	; 0x1c
				 Timer1_ICU_InterruptDisable();
    5748:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <Timer1_ICU_InterruptDisable>


				 return distance;
    574c:	89 8d       	ldd	r24, Y+25	; 0x19
    574e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5750:	ab 8d       	ldd	r26, Y+27	; 0x1b
    5752:	bc 8d       	ldd	r27, Y+28	; 0x1c
}
    5754:	bc 01       	movw	r22, r24
    5756:	cd 01       	movw	r24, r26
    5758:	a0 96       	adiw	r28, 0x20	; 32
    575a:	0f b6       	in	r0, 0x3f	; 63
    575c:	f8 94       	cli
    575e:	de bf       	out	0x3e, r29	; 62
    5760:	0f be       	out	0x3f, r0	; 63
    5762:	cd bf       	out	0x3d, r28	; 61
    5764:	cf 91       	pop	r28
    5766:	df 91       	pop	r29
    5768:	08 95       	ret

0000576a <__vector_11>:
ISR(TIMER1_CAPT_vect)
{
    576a:	1f 92       	push	r1
    576c:	0f 92       	push	r0
    576e:	0f b6       	in	r0, 0x3f	; 63
    5770:	0f 92       	push	r0
    5772:	00 90 5b 00 	lds	r0, 0x005B
    5776:	0f 92       	push	r0
    5778:	11 24       	eor	r1, r1
    577a:	2f 93       	push	r18
    577c:	3f 93       	push	r19
    577e:	4f 93       	push	r20
    5780:	5f 93       	push	r21
    5782:	6f 93       	push	r22
    5784:	7f 93       	push	r23
    5786:	8f 93       	push	r24
    5788:	9f 93       	push	r25
    578a:	af 93       	push	r26
    578c:	bf 93       	push	r27
    578e:	ef 93       	push	r30
    5790:	ff 93       	push	r31
    5792:	df 93       	push	r29
    5794:	cf 93       	push	r28
    5796:	cd b7       	in	r28, 0x3d	; 61
    5798:	de b7       	in	r29, 0x3e	; 62
if(f==0)
    579a:	80 91 f8 02 	lds	r24, 0x02F8
    579e:	88 23       	and	r24, r24
    57a0:	79 f4       	brne	.+30     	; 0x57c0 <__vector_11+0x56>
{
	t1=ICR1;
    57a2:	e6 e4       	ldi	r30, 0x46	; 70
    57a4:	f0 e0       	ldi	r31, 0x00	; 0
    57a6:	80 81       	ld	r24, Z
    57a8:	91 81       	ldd	r25, Z+1	; 0x01
    57aa:	90 93 fb 02 	sts	0x02FB, r25
    57ae:	80 93 fa 02 	sts	0x02FA, r24
	f=1;
    57b2:	81 e0       	ldi	r24, 0x01	; 1
    57b4:	80 93 f8 02 	sts	0x02F8, r24

Timer1_InputCaptureEdge(Falling);
    57b8:	80 e0       	ldi	r24, 0x00	; 0
    57ba:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Timer1_InputCaptureEdge>
    57be:	0f c0       	rjmp	.+30     	; 0x57de <__vector_11+0x74>
}

else if(f==1)
    57c0:	80 91 f8 02 	lds	r24, 0x02F8
    57c4:	81 30       	cpi	r24, 0x01	; 1
    57c6:	59 f4       	brne	.+22     	; 0x57de <__vector_11+0x74>
{
	t2=ICR1;
    57c8:	e6 e4       	ldi	r30, 0x46	; 70
    57ca:	f0 e0       	ldi	r31, 0x00	; 0
    57cc:	80 81       	ld	r24, Z
    57ce:	91 81       	ldd	r25, Z+1	; 0x01
    57d0:	90 93 fd 02 	sts	0x02FD, r25
    57d4:	80 93 fc 02 	sts	0x02FC, r24
	f=2;
    57d8:	82 e0       	ldi	r24, 0x02	; 2
    57da:	80 93 f8 02 	sts	0x02F8, r24

}
}
    57de:	cf 91       	pop	r28
    57e0:	df 91       	pop	r29
    57e2:	ff 91       	pop	r31
    57e4:	ef 91       	pop	r30
    57e6:	bf 91       	pop	r27
    57e8:	af 91       	pop	r26
    57ea:	9f 91       	pop	r25
    57ec:	8f 91       	pop	r24
    57ee:	7f 91       	pop	r23
    57f0:	6f 91       	pop	r22
    57f2:	5f 91       	pop	r21
    57f4:	4f 91       	pop	r20
    57f6:	3f 91       	pop	r19
    57f8:	2f 91       	pop	r18
    57fa:	0f 90       	pop	r0
    57fc:	00 92 5b 00 	sts	0x005B, r0
    5800:	0f 90       	pop	r0
    5802:	0f be       	out	0x3f, r0	; 63
    5804:	0f 90       	pop	r0
    5806:	1f 90       	pop	r1
    5808:	18 95       	reti

0000580a <__vector_14>:


ISR(TIMER1_OVF_vect)
{
    580a:	1f 92       	push	r1
    580c:	0f 92       	push	r0
    580e:	0f b6       	in	r0, 0x3f	; 63
    5810:	0f 92       	push	r0
    5812:	11 24       	eor	r1, r1
    5814:	8f 93       	push	r24
    5816:	df 93       	push	r29
    5818:	cf 93       	push	r28
    581a:	cd b7       	in	r28, 0x3d	; 61
    581c:	de b7       	in	r29, 0x3e	; 62
		c++;
    581e:	80 91 f9 02 	lds	r24, 0x02F9
    5822:	8f 5f       	subi	r24, 0xFF	; 255
    5824:	80 93 f9 02 	sts	0x02F9, r24
}
    5828:	cf 91       	pop	r28
    582a:	df 91       	pop	r29
    582c:	8f 91       	pop	r24
    582e:	0f 90       	pop	r0
    5830:	0f be       	out	0x3f, r0	; 63
    5832:	0f 90       	pop	r0
    5834:	1f 90       	pop	r1
    5836:	18 95       	reti

00005838 <UART_SendString>:

/***********************Send Functions*******************************/
//send string using polling function

void UART_SendString(uint8 *Str)
{
    5838:	df 93       	push	r29
    583a:	cf 93       	push	r28
    583c:	00 d0       	rcall	.+0      	; 0x583e <UART_SendString+0x6>
    583e:	0f 92       	push	r0
    5840:	cd b7       	in	r28, 0x3d	; 61
    5842:	de b7       	in	r29, 0x3e	; 62
    5844:	9b 83       	std	Y+3, r25	; 0x03
    5846:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    5848:	19 82       	std	Y+1, r1	; 0x01
    584a:	0e c0       	rjmp	.+28     	; 0x5868 <UART_SendString+0x30>
	while(Str[i] != '\0'){
		UART_SendData(Str[i]);
    584c:	89 81       	ldd	r24, Y+1	; 0x01
    584e:	28 2f       	mov	r18, r24
    5850:	30 e0       	ldi	r19, 0x00	; 0
    5852:	8a 81       	ldd	r24, Y+2	; 0x02
    5854:	9b 81       	ldd	r25, Y+3	; 0x03
    5856:	fc 01       	movw	r30, r24
    5858:	e2 0f       	add	r30, r18
    585a:	f3 1f       	adc	r31, r19
    585c:	80 81       	ld	r24, Z
    585e:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <UART_SendData>
		i++;
    5862:	89 81       	ldd	r24, Y+1	; 0x01
    5864:	8f 5f       	subi	r24, 0xFF	; 255
    5866:	89 83       	std	Y+1, r24	; 0x01
//send string using polling function

void UART_SendString(uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0'){
    5868:	89 81       	ldd	r24, Y+1	; 0x01
    586a:	28 2f       	mov	r18, r24
    586c:	30 e0       	ldi	r19, 0x00	; 0
    586e:	8a 81       	ldd	r24, Y+2	; 0x02
    5870:	9b 81       	ldd	r25, Y+3	; 0x03
    5872:	fc 01       	movw	r30, r24
    5874:	e2 0f       	add	r30, r18
    5876:	f3 1f       	adc	r31, r19
    5878:	80 81       	ld	r24, Z
    587a:	88 23       	and	r24, r24
    587c:	39 f7       	brne	.-50     	; 0x584c <UART_SendString+0x14>
		UART_SendData(Str[i]);
		i++;

	}
	UART_SendData('\0');
    587e:	80 e0       	ldi	r24, 0x00	; 0
    5880:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <UART_SendData>
}
    5884:	0f 90       	pop	r0
    5886:	0f 90       	pop	r0
    5888:	0f 90       	pop	r0
    588a:	cf 91       	pop	r28
    588c:	df 91       	pop	r29
    588e:	08 95       	ret

00005890 <UART_SendString_Asynch>:
								////////////////////////////////////

void UART_SendString_Asynch(uint8 *Str)
{
    5890:	df 93       	push	r29
    5892:	cf 93       	push	r28
    5894:	00 d0       	rcall	.+0      	; 0x5896 <UART_SendString_Asynch+0x6>
    5896:	cd b7       	in	r28, 0x3d	; 61
    5898:	de b7       	in	r29, 0x3e	; 62
    589a:	9a 83       	std	Y+2, r25	; 0x02
    589c:	89 83       	std	Y+1, r24	; 0x01
	Asynch_Send_Str=Str;
    589e:	89 81       	ldd	r24, Y+1	; 0x01
    58a0:	9a 81       	ldd	r25, Y+2	; 0x02
    58a2:	90 93 01 03 	sts	0x0301, r25
    58a6:	80 93 00 03 	sts	0x0300, r24
	UART_SendByte(Str[0]);
    58aa:	e9 81       	ldd	r30, Y+1	; 0x01
    58ac:	fa 81       	ldd	r31, Y+2	; 0x02
    58ae:	80 81       	ld	r24, Z
    58b0:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <UART_SendByte>

	UART_callback_Trans_Int(Send_Int_Function);
    58b4:	85 e6       	ldi	r24, 0x65	; 101
    58b6:	9c e2       	ldi	r25, 0x2C	; 44
    58b8:	0e 94 96 14 	call	0x292c	; 0x292c <UART_callback_Trans_Int>
	UART_Transmit_Int_Enable();
    58bc:	0e 94 68 14 	call	0x28d0	; 0x28d0 <UART_Transmit_Int_Enable>

}
    58c0:	0f 90       	pop	r0
    58c2:	0f 90       	pop	r0
    58c4:	cf 91       	pop	r28
    58c6:	df 91       	pop	r29
    58c8:	08 95       	ret

000058ca <Send_Int_Function>:

static void Send_Int_Function(void)
{
    58ca:	df 93       	push	r29
    58cc:	cf 93       	push	r28
    58ce:	cd b7       	in	r28, 0x3d	; 61
    58d0:	de b7       	in	r29, 0x3e	; 62
static uint8 i=1;
	if(Asynch_Send_Str[i] !='\0')
    58d2:	20 91 00 03 	lds	r18, 0x0300
    58d6:	30 91 01 03 	lds	r19, 0x0301
    58da:	80 91 f2 02 	lds	r24, 0x02F2
    58de:	88 2f       	mov	r24, r24
    58e0:	90 e0       	ldi	r25, 0x00	; 0
    58e2:	f9 01       	movw	r30, r18
    58e4:	e8 0f       	add	r30, r24
    58e6:	f9 1f       	adc	r31, r25
    58e8:	80 81       	ld	r24, Z
    58ea:	88 23       	and	r24, r24
    58ec:	a1 f0       	breq	.+40     	; 0x5916 <Send_Int_Function+0x4c>
	{
		UART_SendByte(Asynch_Send_Str[i]);
    58ee:	20 91 00 03 	lds	r18, 0x0300
    58f2:	30 91 01 03 	lds	r19, 0x0301
    58f6:	80 91 f2 02 	lds	r24, 0x02F2
    58fa:	88 2f       	mov	r24, r24
    58fc:	90 e0       	ldi	r25, 0x00	; 0
    58fe:	f9 01       	movw	r30, r18
    5900:	e8 0f       	add	r30, r24
    5902:	f9 1f       	adc	r31, r25
    5904:	80 81       	ld	r24, Z
    5906:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <UART_SendByte>
		i++;
    590a:	80 91 f2 02 	lds	r24, 0x02F2
    590e:	8f 5f       	subi	r24, 0xFF	; 255
    5910:	80 93 f2 02 	sts	0x02F2, r24
    5914:	05 c0       	rjmp	.+10     	; 0x5920 <Send_Int_Function+0x56>
	}
	else
		{
		i=1;
    5916:	81 e0       	ldi	r24, 0x01	; 1
    5918:	80 93 f2 02 	sts	0x02F2, r24
		UART_Transmit_Int_Disable();
    591c:	0e 94 76 14 	call	0x28ec	; 0x28ec <UART_Transmit_Int_Disable>
		}
}
    5920:	cf 91       	pop	r28
    5922:	df 91       	pop	r29
    5924:	08 95       	ret

00005926 <UART_SendString_Asynch_NocodeInInt>:
								////////////////////////////////////


void UART_SendString_Asynch_NocodeInInt(uint8 *Str)
{
    5926:	df 93       	push	r29
    5928:	cf 93       	push	r28
    592a:	00 d0       	rcall	.+0      	; 0x592c <UART_SendString_Asynch_NocodeInInt+0x6>
    592c:	cd b7       	in	r28, 0x3d	; 61
    592e:	de b7       	in	r29, 0x3e	; 62
    5930:	9a 83       	std	Y+2, r25	; 0x02
    5932:	89 83       	std	Y+1, r24	; 0x01
	//feh 7aga henna lazm ykon el flag udre
//lesa msh mafhoma
	UART_callback_Trans_Int(Send_Int_Function2);
    5934:	88 ec       	ldi	r24, 0xC8	; 200
    5936:	9c e2       	ldi	r25, 0x2C	; 44
    5938:	0e 94 96 14 	call	0x292c	; 0x292c <UART_callback_Trans_Int>
    UART_Transmit_Int_Enable();
    593c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <UART_Transmit_Int_Enable>
	static	uint8 i=0;
	if(flag)
    5940:	80 91 f1 02 	lds	r24, 0x02F1
    5944:	88 23       	and	r24, r24
    5946:	f9 f0       	breq	.+62     	; 0x5986 <UART_SendString_Asynch_NocodeInInt+0x60>
		{
		if(Str[i])
    5948:	80 91 fe 02 	lds	r24, 0x02FE
    594c:	28 2f       	mov	r18, r24
    594e:	30 e0       	ldi	r19, 0x00	; 0
    5950:	89 81       	ldd	r24, Y+1	; 0x01
    5952:	9a 81       	ldd	r25, Y+2	; 0x02
    5954:	fc 01       	movw	r30, r24
    5956:	e2 0f       	add	r30, r18
    5958:	f3 1f       	adc	r31, r19
    595a:	80 81       	ld	r24, Z
    595c:	88 23       	and	r24, r24
    595e:	99 f0       	breq	.+38     	; 0x5986 <UART_SendString_Asynch_NocodeInInt+0x60>
			{
			UART_SendByte(Str[i]);
    5960:	80 91 fe 02 	lds	r24, 0x02FE
    5964:	28 2f       	mov	r18, r24
    5966:	30 e0       	ldi	r19, 0x00	; 0
    5968:	89 81       	ldd	r24, Y+1	; 0x01
    596a:	9a 81       	ldd	r25, Y+2	; 0x02
    596c:	fc 01       	movw	r30, r24
    596e:	e2 0f       	add	r30, r18
    5970:	f3 1f       	adc	r31, r19
    5972:	80 81       	ld	r24, Z
    5974:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <UART_SendByte>
			i++;
    5978:	80 91 fe 02 	lds	r24, 0x02FE
    597c:	8f 5f       	subi	r24, 0xFF	; 255
    597e:	80 93 fe 02 	sts	0x02FE, r24
			flag=0;
    5982:	10 92 f1 02 	sts	0x02F1, r1
			}

		}

}
    5986:	0f 90       	pop	r0
    5988:	0f 90       	pop	r0
    598a:	cf 91       	pop	r28
    598c:	df 91       	pop	r29
    598e:	08 95       	ret

00005990 <Send_Int_Function2>:
static void Send_Int_Function2(void)
{
    5990:	df 93       	push	r29
    5992:	cf 93       	push	r28
    5994:	cd b7       	in	r28, 0x3d	; 61
    5996:	de b7       	in	r29, 0x3e	; 62
	flag=1;
    5998:	81 e0       	ldi	r24, 0x01	; 1
    599a:	80 93 f1 02 	sts	0x02F1, r24
}
    599e:	cf 91       	pop	r28
    59a0:	df 91       	pop	r29
    59a2:	08 95       	ret

000059a4 <UART_ReceiveString>:


/***************************Receive Functions*****************************/

void UART_ReceiveString(uint8 *Str)       //receive entil  '\0'
{
    59a4:	0f 93       	push	r16
    59a6:	1f 93       	push	r17
    59a8:	df 93       	push	r29
    59aa:	cf 93       	push	r28
    59ac:	00 d0       	rcall	.+0      	; 0x59ae <UART_ReceiveString+0xa>
    59ae:	0f 92       	push	r0
    59b0:	cd b7       	in	r28, 0x3d	; 61
    59b2:	de b7       	in	r29, 0x3e	; 62
    59b4:	9b 83       	std	Y+3, r25	; 0x03
    59b6:	8a 83       	std	Y+2, r24	; 0x02
	//hena hwa ba3t el array ezay mn elmain mesh elmafrod yb3at elsize ???
	uint8 i = 0;
    59b8:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_RecieveData();
    59ba:	89 81       	ldd	r24, Y+1	; 0x01
    59bc:	28 2f       	mov	r18, r24
    59be:	30 e0       	ldi	r19, 0x00	; 0
    59c0:	8a 81       	ldd	r24, Y+2	; 0x02
    59c2:	9b 81       	ldd	r25, Y+3	; 0x03
    59c4:	8c 01       	movw	r16, r24
    59c6:	02 0f       	add	r16, r18
    59c8:	13 1f       	adc	r17, r19
    59ca:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <UART_RecieveData>
    59ce:	f8 01       	movw	r30, r16
    59d0:	80 83       	st	Z, r24
    59d2:	0f c0       	rjmp	.+30     	; 0x59f2 <UART_ReceiveString+0x4e>
	while(Str[i] != '\0')
	{
		i++;
    59d4:	89 81       	ldd	r24, Y+1	; 0x01
    59d6:	8f 5f       	subi	r24, 0xFF	; 255
    59d8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_RecieveData();
    59da:	89 81       	ldd	r24, Y+1	; 0x01
    59dc:	28 2f       	mov	r18, r24
    59de:	30 e0       	ldi	r19, 0x00	; 0
    59e0:	8a 81       	ldd	r24, Y+2	; 0x02
    59e2:	9b 81       	ldd	r25, Y+3	; 0x03
    59e4:	8c 01       	movw	r16, r24
    59e6:	02 0f       	add	r16, r18
    59e8:	13 1f       	adc	r17, r19
    59ea:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <UART_RecieveData>
    59ee:	f8 01       	movw	r30, r16
    59f0:	80 83       	st	Z, r24
void UART_ReceiveString(uint8 *Str)       //receive entil  '\0'
{
	//hena hwa ba3t el array ezay mn elmain mesh elmafrod yb3at elsize ???
	uint8 i = 0;
	Str[i] = UART_RecieveData();
	while(Str[i] != '\0')
    59f2:	89 81       	ldd	r24, Y+1	; 0x01
    59f4:	28 2f       	mov	r18, r24
    59f6:	30 e0       	ldi	r19, 0x00	; 0
    59f8:	8a 81       	ldd	r24, Y+2	; 0x02
    59fa:	9b 81       	ldd	r25, Y+3	; 0x03
    59fc:	fc 01       	movw	r30, r24
    59fe:	e2 0f       	add	r30, r18
    5a00:	f3 1f       	adc	r31, r19
    5a02:	80 81       	ld	r24, Z
    5a04:	88 23       	and	r24, r24
    5a06:	31 f7       	brne	.-52     	; 0x59d4 <UART_ReceiveString+0x30>
	{
		i++;
		Str[i] = UART_RecieveData();
	}
	Str[i] = '\0';
    5a08:	89 81       	ldd	r24, Y+1	; 0x01
    5a0a:	28 2f       	mov	r18, r24
    5a0c:	30 e0       	ldi	r19, 0x00	; 0
    5a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    5a10:	9b 81       	ldd	r25, Y+3	; 0x03
    5a12:	fc 01       	movw	r30, r24
    5a14:	e2 0f       	add	r30, r18
    5a16:	f3 1f       	adc	r31, r19
    5a18:	10 82       	st	Z, r1
}
    5a1a:	0f 90       	pop	r0
    5a1c:	0f 90       	pop	r0
    5a1e:	0f 90       	pop	r0
    5a20:	cf 91       	pop	r28
    5a22:	df 91       	pop	r29
    5a24:	1f 91       	pop	r17
    5a26:	0f 91       	pop	r16
    5a28:	08 95       	ret

00005a2a <UART_ReceiveString_NoBlock>:
								////////////////////////////////////
////////////////////////////////////
// this function block cpu it's just to try "UART_RecieveData_NoBlock"  receive entil  '\0'
void UART_ReceiveString_NoBlock(uint8 *Str)
{
    5a2a:	df 93       	push	r29
    5a2c:	cf 93       	push	r28
    5a2e:	00 d0       	rcall	.+0      	; 0x5a30 <UART_ReceiveString_NoBlock+0x6>
    5a30:	00 d0       	rcall	.+0      	; 0x5a32 <UART_ReceiveString_NoBlock+0x8>
    5a32:	0f 92       	push	r0
    5a34:	cd b7       	in	r28, 0x3d	; 61
    5a36:	de b7       	in	r29, 0x3e	; 62
    5a38:	9d 83       	std	Y+5, r25	; 0x05
    5a3a:	8c 83       	std	Y+4, r24	; 0x04
uint8 i=0,data,statue;
    5a3c:	1a 82       	std	Y+2, r1	; 0x02
do
{
//law hwa estlm f3alen el status hatkon = 1
statue=UART_RecieveData_NoBlock(&data);
    5a3e:	ce 01       	movw	r24, r28
    5a40:	03 96       	adiw	r24, 0x03	; 3
    5a42:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <UART_RecieveData_NoBlock>
    5a46:	89 83       	std	Y+1, r24	; 0x01
if(statue)
    5a48:	89 81       	ldd	r24, Y+1	; 0x01
    5a4a:	88 23       	and	r24, r24
    5a4c:	69 f0       	breq	.+26     	; 0x5a68 <UART_ReceiveString_NoBlock+0x3e>
{
//we s3atha hakhod eldata a7otha fe str
Str[i]=data;
    5a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    5a50:	28 2f       	mov	r18, r24
    5a52:	30 e0       	ldi	r19, 0x00	; 0
    5a54:	8c 81       	ldd	r24, Y+4	; 0x04
    5a56:	9d 81       	ldd	r25, Y+5	; 0x05
    5a58:	fc 01       	movw	r30, r24
    5a5a:	e2 0f       	add	r30, r18
    5a5c:	f3 1f       	adc	r31, r19
    5a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    5a60:	80 83       	st	Z, r24
i++;
    5a62:	8a 81       	ldd	r24, Y+2	; 0x02
    5a64:	8f 5f       	subi	r24, 0xFF	; 255
    5a66:	8a 83       	std	Y+2, r24	; 0x02
}
}while(Str[i-1]!='\0');
    5a68:	8a 81       	ldd	r24, Y+2	; 0x02
    5a6a:	88 2f       	mov	r24, r24
    5a6c:	90 e0       	ldi	r25, 0x00	; 0
    5a6e:	9c 01       	movw	r18, r24
    5a70:	21 50       	subi	r18, 0x01	; 1
    5a72:	30 40       	sbci	r19, 0x00	; 0
    5a74:	8c 81       	ldd	r24, Y+4	; 0x04
    5a76:	9d 81       	ldd	r25, Y+5	; 0x05
    5a78:	fc 01       	movw	r30, r24
    5a7a:	e2 0f       	add	r30, r18
    5a7c:	f3 1f       	adc	r31, r19
    5a7e:	80 81       	ld	r24, Z
    5a80:	88 23       	and	r24, r24
    5a82:	e9 f6       	brne	.-70     	; 0x5a3e <UART_ReceiveString_NoBlock+0x14>
Str[i-1]='\0';
    5a84:	8a 81       	ldd	r24, Y+2	; 0x02
    5a86:	88 2f       	mov	r24, r24
    5a88:	90 e0       	ldi	r25, 0x00	; 0
    5a8a:	9c 01       	movw	r18, r24
    5a8c:	21 50       	subi	r18, 0x01	; 1
    5a8e:	30 40       	sbci	r19, 0x00	; 0
    5a90:	8c 81       	ldd	r24, Y+4	; 0x04
    5a92:	9d 81       	ldd	r25, Y+5	; 0x05
    5a94:	fc 01       	movw	r30, r24
    5a96:	e2 0f       	add	r30, r18
    5a98:	f3 1f       	adc	r31, r19
    5a9a:	10 82       	st	Z, r1
}
    5a9c:	0f 90       	pop	r0
    5a9e:	0f 90       	pop	r0
    5aa0:	0f 90       	pop	r0
    5aa2:	0f 90       	pop	r0
    5aa4:	0f 90       	pop	r0
    5aa6:	cf 91       	pop	r28
    5aa8:	df 91       	pop	r29
    5aaa:	08 95       	ret

00005aac <UART_ReceiveString_Asynch>:


////////////////////////////////////

void UART_ReceiveString_Asynch(uint8 *Str)
{
    5aac:	df 93       	push	r29
    5aae:	cf 93       	push	r28
    5ab0:	00 d0       	rcall	.+0      	; 0x5ab2 <UART_ReceiveString_Asynch+0x6>
    5ab2:	cd b7       	in	r28, 0x3d	; 61
    5ab4:	de b7       	in	r29, 0x3e	; 62
    5ab6:	9a 83       	std	Y+2, r25	; 0x02
    5ab8:	89 83       	std	Y+1, r24	; 0x01
Asynch_receive_str=Str;
    5aba:	89 81       	ldd	r24, Y+1	; 0x01
    5abc:	9a 81       	ldd	r25, Y+2	; 0x02
    5abe:	90 93 03 03 	sts	0x0303, r25
    5ac2:	80 93 02 03 	sts	0x0302, r24
UART_Receiver_Int_Enable();
    5ac6:	0e 94 4c 14 	call	0x2898	; 0x2898 <UART_Receiver_Int_Enable>
UART_callback_Rece_Int(Receive_Int_Function);
    5aca:	8e e6       	ldi	r24, 0x6E	; 110
    5acc:	9d e2       	ldi	r25, 0x2D	; 45
    5ace:	0e 94 84 14 	call	0x2908	; 0x2908 <UART_callback_Rece_Int>

}
    5ad2:	0f 90       	pop	r0
    5ad4:	0f 90       	pop	r0
    5ad6:	cf 91       	pop	r28
    5ad8:	df 91       	pop	r29
    5ada:	08 95       	ret

00005adc <Receive_Int_Function>:

static void Receive_Int_Function(void)
{
    5adc:	0f 93       	push	r16
    5ade:	1f 93       	push	r17
    5ae0:	df 93       	push	r29
    5ae2:	cf 93       	push	r28
    5ae4:	cd b7       	in	r28, 0x3d	; 61
    5ae6:	de b7       	in	r29, 0x3e	; 62
static uint8 i=0;
Asynch_receive_str[i]=UART_RecieveByte();
    5ae8:	20 91 02 03 	lds	r18, 0x0302
    5aec:	30 91 03 03 	lds	r19, 0x0303
    5af0:	80 91 ff 02 	lds	r24, 0x02FF
    5af4:	88 2f       	mov	r24, r24
    5af6:	90 e0       	ldi	r25, 0x00	; 0
    5af8:	89 01       	movw	r16, r18
    5afa:	08 0f       	add	r16, r24
    5afc:	19 1f       	adc	r17, r25
    5afe:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <UART_RecieveByte>
    5b02:	f8 01       	movw	r30, r16
    5b04:	80 83       	st	Z, r24
i++;
    5b06:	80 91 ff 02 	lds	r24, 0x02FF
    5b0a:	8f 5f       	subi	r24, 0xFF	; 255
    5b0c:	80 93 ff 02 	sts	0x02FF, r24

}
    5b10:	cf 91       	pop	r28
    5b12:	df 91       	pop	r29
    5b14:	1f 91       	pop	r17
    5b16:	0f 91       	pop	r16
    5b18:	08 95       	ret

00005b1a <SendString_MYProtocol>:



void SendString_MYProtocol(uint8*str)
{
    5b1a:	df 93       	push	r29
    5b1c:	cf 93       	push	r28
    5b1e:	00 d0       	rcall	.+0      	; 0x5b20 <SendString_MYProtocol+0x6>
    5b20:	00 d0       	rcall	.+0      	; 0x5b22 <SendString_MYProtocol+0x8>
    5b22:	00 d0       	rcall	.+0      	; 0x5b24 <SendString_MYProtocol+0xa>
    5b24:	cd b7       	in	r28, 0x3d	; 61
    5b26:	de b7       	in	r29, 0x3e	; 62
    5b28:	9e 83       	std	Y+6, r25	; 0x06
    5b2a:	8d 83       	std	Y+5, r24	; 0x05
uint8 i=0,l=0;
    5b2c:	1c 82       	std	Y+4, r1	; 0x04
    5b2e:	1b 82       	std	Y+3, r1	; 0x03
uint16 sum=0;
    5b30:	1a 82       	std	Y+2, r1	; 0x02
    5b32:	19 82       	std	Y+1, r1	; 0x01
    5b34:	14 c0       	rjmp	.+40     	; 0x5b5e <SendString_MYProtocol+0x44>
while(str[l])
{

sum+=str[l];
    5b36:	8b 81       	ldd	r24, Y+3	; 0x03
    5b38:	28 2f       	mov	r18, r24
    5b3a:	30 e0       	ldi	r19, 0x00	; 0
    5b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    5b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    5b40:	fc 01       	movw	r30, r24
    5b42:	e2 0f       	add	r30, r18
    5b44:	f3 1f       	adc	r31, r19
    5b46:	80 81       	ld	r24, Z
    5b48:	28 2f       	mov	r18, r24
    5b4a:	30 e0       	ldi	r19, 0x00	; 0
    5b4c:	89 81       	ldd	r24, Y+1	; 0x01
    5b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b50:	82 0f       	add	r24, r18
    5b52:	93 1f       	adc	r25, r19
    5b54:	9a 83       	std	Y+2, r25	; 0x02
    5b56:	89 83       	std	Y+1, r24	; 0x01

l++;
    5b58:	8b 81       	ldd	r24, Y+3	; 0x03
    5b5a:	8f 5f       	subi	r24, 0xFF	; 255
    5b5c:	8b 83       	std	Y+3, r24	; 0x03

void SendString_MYProtocol(uint8*str)
{
uint8 i=0,l=0;
uint16 sum=0;
while(str[l])
    5b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b60:	28 2f       	mov	r18, r24
    5b62:	30 e0       	ldi	r19, 0x00	; 0
    5b64:	8d 81       	ldd	r24, Y+5	; 0x05
    5b66:	9e 81       	ldd	r25, Y+6	; 0x06
    5b68:	fc 01       	movw	r30, r24
    5b6a:	e2 0f       	add	r30, r18
    5b6c:	f3 1f       	adc	r31, r19
    5b6e:	80 81       	ld	r24, Z
    5b70:	88 23       	and	r24, r24
    5b72:	09 f7       	brne	.-62     	; 0x5b36 <SendString_MYProtocol+0x1c>

sum+=str[l];

l++;
}
UART_SendData(l);
    5b74:	8b 81       	ldd	r24, Y+3	; 0x03
    5b76:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <UART_SendData>
for(i=0;i<l;i++)
    5b7a:	1c 82       	std	Y+4, r1	; 0x04
    5b7c:	0e c0       	rjmp	.+28     	; 0x5b9a <SendString_MYProtocol+0x80>
{
UART_SendData(str[i]);
    5b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    5b80:	28 2f       	mov	r18, r24
    5b82:	30 e0       	ldi	r19, 0x00	; 0
    5b84:	8d 81       	ldd	r24, Y+5	; 0x05
    5b86:	9e 81       	ldd	r25, Y+6	; 0x06
    5b88:	fc 01       	movw	r30, r24
    5b8a:	e2 0f       	add	r30, r18
    5b8c:	f3 1f       	adc	r31, r19
    5b8e:	80 81       	ld	r24, Z
    5b90:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <UART_SendData>
sum+=str[l];

l++;
}
UART_SendData(l);
for(i=0;i<l;i++)
    5b94:	8c 81       	ldd	r24, Y+4	; 0x04
    5b96:	8f 5f       	subi	r24, 0xFF	; 255
    5b98:	8c 83       	std	Y+4, r24	; 0x04
    5b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    5b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    5b9e:	98 17       	cp	r25, r24
    5ba0:	70 f3       	brcs	.-36     	; 0x5b7e <SendString_MYProtocol+0x64>
{
UART_SendData(str[i]);
}
UART_SendData((uint8)sum);
    5ba2:	89 81       	ldd	r24, Y+1	; 0x01
    5ba4:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <UART_SendData>
UART_SendData((uint8)(sum>>8));
    5ba8:	89 81       	ldd	r24, Y+1	; 0x01
    5baa:	9a 81       	ldd	r25, Y+2	; 0x02
    5bac:	89 2f       	mov	r24, r25
    5bae:	99 27       	eor	r25, r25
    5bb0:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <UART_SendData>


}
    5bb4:	26 96       	adiw	r28, 0x06	; 6
    5bb6:	0f b6       	in	r0, 0x3f	; 63
    5bb8:	f8 94       	cli
    5bba:	de bf       	out	0x3e, r29	; 62
    5bbc:	0f be       	out	0x3f, r0	; 63
    5bbe:	cd bf       	out	0x3d, r28	; 61
    5bc0:	cf 91       	pop	r28
    5bc2:	df 91       	pop	r29
    5bc4:	08 95       	ret

00005bc6 <ReceiveString_MyProtocol>:
uint8 ReceiveString_MyProtocol(uint8*str)
{
    5bc6:	af 92       	push	r10
    5bc8:	bf 92       	push	r11
    5bca:	cf 92       	push	r12
    5bcc:	df 92       	push	r13
    5bce:	ef 92       	push	r14
    5bd0:	ff 92       	push	r15
    5bd2:	0f 93       	push	r16
    5bd4:	1f 93       	push	r17
    5bd6:	df 93       	push	r29
    5bd8:	cf 93       	push	r28
    5bda:	cd b7       	in	r28, 0x3d	; 61
    5bdc:	de b7       	in	r29, 0x3e	; 62
    5bde:	2b 97       	sbiw	r28, 0x0b	; 11
    5be0:	0f b6       	in	r0, 0x3f	; 63
    5be2:	f8 94       	cli
    5be4:	de bf       	out	0x3e, r29	; 62
    5be6:	0f be       	out	0x3f, r0	; 63
    5be8:	cd bf       	out	0x3d, r28	; 61
    5bea:	9a 87       	std	Y+10, r25	; 0x0a
    5bec:	89 87       	std	Y+9, r24	; 0x09
uint8 i=0,l=0,firstbyte=0,secondbyte=0;
    5bee:	18 86       	std	Y+8, r1	; 0x08
    5bf0:	1f 82       	std	Y+7, r1	; 0x07
    5bf2:	1e 82       	std	Y+6, r1	; 0x06
    5bf4:	1d 82       	std	Y+5, r1	; 0x05
//uint8 str[10];
uint16 sum_send=0,sum_calc=0;
    5bf6:	1c 82       	std	Y+4, r1	; 0x04
    5bf8:	1b 82       	std	Y+3, r1	; 0x03
    5bfa:	1a 82       	std	Y+2, r1	; 0x02
    5bfc:	19 82       	std	Y+1, r1	; 0x01
l=UART_RecieveData();
    5bfe:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <UART_RecieveData>
    5c02:	8f 83       	std	Y+7, r24	; 0x07
for(i=0;i<l;i++)
    5c04:	18 86       	std	Y+8, r1	; 0x08
    5c06:	20 c0       	rjmp	.+64     	; 0x5c48 <ReceiveString_MyProtocol+0x82>
{
str[i]=UART_RecieveData();
    5c08:	88 85       	ldd	r24, Y+8	; 0x08
    5c0a:	28 2f       	mov	r18, r24
    5c0c:	30 e0       	ldi	r19, 0x00	; 0
    5c0e:	89 85       	ldd	r24, Y+9	; 0x09
    5c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c12:	8c 01       	movw	r16, r24
    5c14:	02 0f       	add	r16, r18
    5c16:	13 1f       	adc	r17, r19
    5c18:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <UART_RecieveData>
    5c1c:	f8 01       	movw	r30, r16
    5c1e:	80 83       	st	Z, r24
sum_calc+=str[i];
    5c20:	88 85       	ldd	r24, Y+8	; 0x08
    5c22:	28 2f       	mov	r18, r24
    5c24:	30 e0       	ldi	r19, 0x00	; 0
    5c26:	89 85       	ldd	r24, Y+9	; 0x09
    5c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c2a:	fc 01       	movw	r30, r24
    5c2c:	e2 0f       	add	r30, r18
    5c2e:	f3 1f       	adc	r31, r19
    5c30:	80 81       	ld	r24, Z
    5c32:	28 2f       	mov	r18, r24
    5c34:	30 e0       	ldi	r19, 0x00	; 0
    5c36:	89 81       	ldd	r24, Y+1	; 0x01
    5c38:	9a 81       	ldd	r25, Y+2	; 0x02
    5c3a:	82 0f       	add	r24, r18
    5c3c:	93 1f       	adc	r25, r19
    5c3e:	9a 83       	std	Y+2, r25	; 0x02
    5c40:	89 83       	std	Y+1, r24	; 0x01
{
uint8 i=0,l=0,firstbyte=0,secondbyte=0;
//uint8 str[10];
uint16 sum_send=0,sum_calc=0;
l=UART_RecieveData();
for(i=0;i<l;i++)
    5c42:	88 85       	ldd	r24, Y+8	; 0x08
    5c44:	8f 5f       	subi	r24, 0xFF	; 255
    5c46:	88 87       	std	Y+8, r24	; 0x08
    5c48:	98 85       	ldd	r25, Y+8	; 0x08
    5c4a:	8f 81       	ldd	r24, Y+7	; 0x07
    5c4c:	98 17       	cp	r25, r24
    5c4e:	e0 f2       	brcs	.-72     	; 0x5c08 <ReceiveString_MyProtocol+0x42>
{
str[i]=UART_RecieveData();
sum_calc+=str[i];
}
firstbyte=UART_RecieveData();
    5c50:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <UART_RecieveData>
    5c54:	8e 83       	std	Y+6, r24	; 0x06
secondbyte=UART_RecieveData();
    5c56:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <UART_RecieveData>
    5c5a:	8d 83       	std	Y+5, r24	; 0x05
sum_send=firstbyte|(secondbyte<<8);
    5c5c:	8e 81       	ldd	r24, Y+6	; 0x06
    5c5e:	28 2f       	mov	r18, r24
    5c60:	30 e0       	ldi	r19, 0x00	; 0
    5c62:	8d 81       	ldd	r24, Y+5	; 0x05
    5c64:	88 2f       	mov	r24, r24
    5c66:	90 e0       	ldi	r25, 0x00	; 0
    5c68:	98 2f       	mov	r25, r24
    5c6a:	88 27       	eor	r24, r24
    5c6c:	82 2b       	or	r24, r18
    5c6e:	93 2b       	or	r25, r19
    5c70:	9c 83       	std	Y+4, r25	; 0x04
    5c72:	8b 83       	std	Y+3, r24	; 0x03

LCD_vidWriteUnSignedInteger((uint64)l);
    5c74:	8f 81       	ldd	r24, Y+7	; 0x07
    5c76:	a8 2e       	mov	r10, r24
    5c78:	bb 24       	eor	r11, r11
    5c7a:	cc 24       	eor	r12, r12
    5c7c:	dd 24       	eor	r13, r13
    5c7e:	ee 24       	eor	r14, r14
    5c80:	ff 24       	eor	r15, r15
    5c82:	87 01       	movw	r16, r14
    5c84:	2a 2d       	mov	r18, r10
    5c86:	3b 2d       	mov	r19, r11
    5c88:	4c 2d       	mov	r20, r12
    5c8a:	5d 2d       	mov	r21, r13
    5c8c:	6e 2d       	mov	r22, r14
    5c8e:	7f 2d       	mov	r23, r15
    5c90:	80 2f       	mov	r24, r16
    5c92:	91 2f       	mov	r25, r17
    5c94:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <LCD_vidWriteUnSignedInteger>
LCD_vidWriteCharacter('-');
    5c98:	8d e2       	ldi	r24, 0x2D	; 45
    5c9a:	0e 94 4c 32 	call	0x6498	; 0x6498 <LCD_vidWriteCharacter>
LCD_vidWriteUnSignedInteger((uint64)sum_send);
    5c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    5ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    5ca2:	5c 01       	movw	r10, r24
    5ca4:	cc 24       	eor	r12, r12
    5ca6:	dd 24       	eor	r13, r13
    5ca8:	ee 24       	eor	r14, r14
    5caa:	ff 24       	eor	r15, r15
    5cac:	87 01       	movw	r16, r14
    5cae:	2a 2d       	mov	r18, r10
    5cb0:	3b 2d       	mov	r19, r11
    5cb2:	4c 2d       	mov	r20, r12
    5cb4:	5d 2d       	mov	r21, r13
    5cb6:	6e 2d       	mov	r22, r14
    5cb8:	7f 2d       	mov	r23, r15
    5cba:	80 2f       	mov	r24, r16
    5cbc:	91 2f       	mov	r25, r17
    5cbe:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <LCD_vidWriteUnSignedInteger>
LCD_vidWriteCharacter('-');
    5cc2:	8d e2       	ldi	r24, 0x2D	; 45
    5cc4:	0e 94 4c 32 	call	0x6498	; 0x6498 <LCD_vidWriteCharacter>

if(sum_calc==sum_send)
    5cc8:	29 81       	ldd	r18, Y+1	; 0x01
    5cca:	3a 81       	ldd	r19, Y+2	; 0x02
    5ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    5cce:	9c 81       	ldd	r25, Y+4	; 0x04
    5cd0:	28 17       	cp	r18, r24
    5cd2:	39 07       	cpc	r19, r25
    5cd4:	19 f4       	brne	.+6      	; 0x5cdc <ReceiveString_MyProtocol+0x116>
{
return 1;
    5cd6:	f1 e0       	ldi	r31, 0x01	; 1
    5cd8:	fb 87       	std	Y+11, r31	; 0x0b
    5cda:	01 c0       	rjmp	.+2      	; 0x5cde <ReceiveString_MyProtocol+0x118>
}
else
{
return 0;
    5cdc:	1b 86       	std	Y+11, r1	; 0x0b
    5cde:	8b 85       	ldd	r24, Y+11	; 0x0b
}

}
    5ce0:	2b 96       	adiw	r28, 0x0b	; 11
    5ce2:	0f b6       	in	r0, 0x3f	; 63
    5ce4:	f8 94       	cli
    5ce6:	de bf       	out	0x3e, r29	; 62
    5ce8:	0f be       	out	0x3f, r0	; 63
    5cea:	cd bf       	out	0x3d, r28	; 61
    5cec:	cf 91       	pop	r28
    5cee:	df 91       	pop	r29
    5cf0:	1f 91       	pop	r17
    5cf2:	0f 91       	pop	r16
    5cf4:	ff 90       	pop	r15
    5cf6:	ef 90       	pop	r14
    5cf8:	df 90       	pop	r13
    5cfa:	cf 90       	pop	r12
    5cfc:	bf 90       	pop	r11
    5cfe:	af 90       	pop	r10
    5d00:	08 95       	ret

00005d02 <LCD_vidDirections>:
#include"LCD_V2.h"
void LCD_vidDirections(void)
{
    5d02:	df 93       	push	r29
    5d04:	cf 93       	push	r28
    5d06:	cd b7       	in	r28, 0x3d	; 61
    5d08:	de b7       	in	r29, 0x3e	; 62
//SET LCD_PORT AS OUTPUT FOR DATA OF LCD
DIO_void_Set_Port_Dirction(LCD_PORT,0XFF);
    5d0a:	82 e0       	ldi	r24, 0x02	; 2
    5d0c:	6f ef       	ldi	r22, 0xFF	; 255
    5d0e:	0e 94 bc 23 	call	0x4778	; 0x4778 <DIO_void_Set_Port_Dirction>

//SET  AS O/P FOR RS AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,RS,OUTPUT);
    5d12:	81 e0       	ldi	r24, 0x01	; 1
    5d14:	65 e0       	ldi	r22, 0x05	; 5
    5d16:	41 e0       	ldi	r20, 0x01	; 1
    5d18:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>

//SET  AS O/P FOR R/W AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,RW,OUTPUT);
    5d1c:	81 e0       	ldi	r24, 0x01	; 1
    5d1e:	66 e0       	ldi	r22, 0x06	; 6
    5d20:	41 e0       	ldi	r20, 0x01	; 1
    5d22:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>

//SET AS O/P FOR E AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,E,OUTPUT);
    5d26:	81 e0       	ldi	r24, 0x01	; 1
    5d28:	67 e0       	ldi	r22, 0x07	; 7
    5d2a:	41 e0       	ldi	r20, 0x01	; 1
    5d2c:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
}
    5d30:	cf 91       	pop	r28
    5d32:	df 91       	pop	r29
    5d34:	08 95       	ret

00005d36 <LCD_vidDirections4>:
//..................................................................................

void LCD_vidDirections4(void)
{
    5d36:	df 93       	push	r29
    5d38:	cf 93       	push	r28
    5d3a:	cd b7       	in	r28, 0x3d	; 61
    5d3c:	de b7       	in	r29, 0x3e	; 62
//SET PORTD 4,5,6,7 AS OUTPUT FOR DATA OF LCD
DIO_void_Set_Pin_Dirction( LCD_PORT, Fourbit_4,OUTPUT);
    5d3e:	82 e0       	ldi	r24, 0x02	; 2
    5d40:	64 e0       	ldi	r22, 0x04	; 4
    5d42:	41 e0       	ldi	r20, 0x01	; 1
    5d44:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
DIO_void_Set_Pin_Dirction( LCD_PORT, Fourbit_5,OUTPUT);
    5d48:	82 e0       	ldi	r24, 0x02	; 2
    5d4a:	65 e0       	ldi	r22, 0x05	; 5
    5d4c:	41 e0       	ldi	r20, 0x01	; 1
    5d4e:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
DIO_void_Set_Pin_Dirction( LCD_PORT, Fourbit_6,OUTPUT);
    5d52:	82 e0       	ldi	r24, 0x02	; 2
    5d54:	66 e0       	ldi	r22, 0x06	; 6
    5d56:	41 e0       	ldi	r20, 0x01	; 1
    5d58:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
DIO_void_Set_Pin_Dirction( LCD_PORT, Fourbit_7,OUTPUT);
    5d5c:	82 e0       	ldi	r24, 0x02	; 2
    5d5e:	67 e0       	ldi	r22, 0x07	; 7
    5d60:	41 e0       	ldi	r20, 0x01	; 1
    5d62:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
//SET PIN 0 AS O/P FOR RS AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,RS,OUTPUT);
    5d66:	81 e0       	ldi	r24, 0x01	; 1
    5d68:	65 e0       	ldi	r22, 0x05	; 5
    5d6a:	41 e0       	ldi	r20, 0x01	; 1
    5d6c:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
//SET PIN 1 AS O/P FOR R/W AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,RW,OUTPUT);
    5d70:	81 e0       	ldi	r24, 0x01	; 1
    5d72:	66 e0       	ldi	r22, 0x06	; 6
    5d74:	41 e0       	ldi	r20, 0x01	; 1
    5d76:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>

//SET PIN 2 AS O/P FOR E AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,E,OUTPUT);
    5d7a:	81 e0       	ldi	r24, 0x01	; 1
    5d7c:	67 e0       	ldi	r22, 0x07	; 7
    5d7e:	41 e0       	ldi	r20, 0x01	; 1
    5d80:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
}
    5d84:	cf 91       	pop	r28
    5d86:	df 91       	pop	r29
    5d88:	08 95       	ret

00005d8a <LCD_vidInit>:
//..............................................................
void LCD_vidInit(void)
{
    5d8a:	0f 93       	push	r16
    5d8c:	1f 93       	push	r17
    5d8e:	df 93       	push	r29
    5d90:	cf 93       	push	r28
    5d92:	cd b7       	in	r28, 0x3d	; 61
    5d94:	de b7       	in	r29, 0x3e	; 62
    5d96:	c6 54       	subi	r28, 0x46	; 70
    5d98:	d0 40       	sbci	r29, 0x00	; 0
    5d9a:	0f b6       	in	r0, 0x3f	; 63
    5d9c:	f8 94       	cli
    5d9e:	de bf       	out	0x3e, r29	; 62
    5da0:	0f be       	out	0x3f, r0	; 63
    5da2:	cd bf       	out	0x3d, r28	; 61
    5da4:	fe 01       	movw	r30, r28
    5da6:	ed 5b       	subi	r30, 0xBD	; 189
    5da8:	ff 4f       	sbci	r31, 0xFF	; 255
    5daa:	80 e0       	ldi	r24, 0x00	; 0
    5dac:	90 e0       	ldi	r25, 0x00	; 0
    5dae:	a8 e4       	ldi	r26, 0x48	; 72
    5db0:	b2 e4       	ldi	r27, 0x42	; 66
    5db2:	80 83       	st	Z, r24
    5db4:	91 83       	std	Z+1, r25	; 0x01
    5db6:	a2 83       	std	Z+2, r26	; 0x02
    5db8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5dba:	8e 01       	movw	r16, r28
    5dbc:	01 5c       	subi	r16, 0xC1	; 193
    5dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    5dc0:	fe 01       	movw	r30, r28
    5dc2:	ed 5b       	subi	r30, 0xBD	; 189
    5dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc6:	60 81       	ld	r22, Z
    5dc8:	71 81       	ldd	r23, Z+1	; 0x01
    5dca:	82 81       	ldd	r24, Z+2	; 0x02
    5dcc:	93 81       	ldd	r25, Z+3	; 0x03
    5dce:	20 e0       	ldi	r18, 0x00	; 0
    5dd0:	30 e0       	ldi	r19, 0x00	; 0
    5dd2:	4a ef       	ldi	r20, 0xFA	; 250
    5dd4:	54 e4       	ldi	r21, 0x44	; 68
    5dd6:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    5dda:	dc 01       	movw	r26, r24
    5ddc:	cb 01       	movw	r24, r22
    5dde:	f8 01       	movw	r30, r16
    5de0:	80 83       	st	Z, r24
    5de2:	91 83       	std	Z+1, r25	; 0x01
    5de4:	a2 83       	std	Z+2, r26	; 0x02
    5de6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5de8:	fe 01       	movw	r30, r28
    5dea:	ff 96       	adiw	r30, 0x3f	; 63
    5dec:	60 81       	ld	r22, Z
    5dee:	71 81       	ldd	r23, Z+1	; 0x01
    5df0:	82 81       	ldd	r24, Z+2	; 0x02
    5df2:	93 81       	ldd	r25, Z+3	; 0x03
    5df4:	20 e0       	ldi	r18, 0x00	; 0
    5df6:	30 e0       	ldi	r19, 0x00	; 0
    5df8:	40 e8       	ldi	r20, 0x80	; 128
    5dfa:	5f e3       	ldi	r21, 0x3F	; 63
    5dfc:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    5e00:	88 23       	and	r24, r24
    5e02:	2c f4       	brge	.+10     	; 0x5e0e <LCD_vidInit+0x84>
		__ticks = 1;
    5e04:	81 e0       	ldi	r24, 0x01	; 1
    5e06:	90 e0       	ldi	r25, 0x00	; 0
    5e08:	9e af       	std	Y+62, r25	; 0x3e
    5e0a:	8d af       	std	Y+61, r24	; 0x3d
    5e0c:	46 c0       	rjmp	.+140    	; 0x5e9a <LCD_vidInit+0x110>
	else if (__tmp > 65535)
    5e0e:	fe 01       	movw	r30, r28
    5e10:	ff 96       	adiw	r30, 0x3f	; 63
    5e12:	60 81       	ld	r22, Z
    5e14:	71 81       	ldd	r23, Z+1	; 0x01
    5e16:	82 81       	ldd	r24, Z+2	; 0x02
    5e18:	93 81       	ldd	r25, Z+3	; 0x03
    5e1a:	20 e0       	ldi	r18, 0x00	; 0
    5e1c:	3f ef       	ldi	r19, 0xFF	; 255
    5e1e:	4f e7       	ldi	r20, 0x7F	; 127
    5e20:	57 e4       	ldi	r21, 0x47	; 71
    5e22:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    5e26:	18 16       	cp	r1, r24
    5e28:	64 f5       	brge	.+88     	; 0x5e82 <LCD_vidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e2a:	fe 01       	movw	r30, r28
    5e2c:	ed 5b       	subi	r30, 0xBD	; 189
    5e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e30:	60 81       	ld	r22, Z
    5e32:	71 81       	ldd	r23, Z+1	; 0x01
    5e34:	82 81       	ldd	r24, Z+2	; 0x02
    5e36:	93 81       	ldd	r25, Z+3	; 0x03
    5e38:	20 e0       	ldi	r18, 0x00	; 0
    5e3a:	30 e0       	ldi	r19, 0x00	; 0
    5e3c:	40 e2       	ldi	r20, 0x20	; 32
    5e3e:	51 e4       	ldi	r21, 0x41	; 65
    5e40:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    5e44:	dc 01       	movw	r26, r24
    5e46:	cb 01       	movw	r24, r22
    5e48:	bc 01       	movw	r22, r24
    5e4a:	cd 01       	movw	r24, r26
    5e4c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    5e50:	dc 01       	movw	r26, r24
    5e52:	cb 01       	movw	r24, r22
    5e54:	9e af       	std	Y+62, r25	; 0x3e
    5e56:	8d af       	std	Y+61, r24	; 0x3d
    5e58:	0f c0       	rjmp	.+30     	; 0x5e78 <LCD_vidInit+0xee>
    5e5a:	88 ec       	ldi	r24, 0xC8	; 200
    5e5c:	90 e0       	ldi	r25, 0x00	; 0
    5e5e:	9c af       	std	Y+60, r25	; 0x3c
    5e60:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5e62:	8b ad       	ldd	r24, Y+59	; 0x3b
    5e64:	9c ad       	ldd	r25, Y+60	; 0x3c
    5e66:	01 97       	sbiw	r24, 0x01	; 1
    5e68:	f1 f7       	brne	.-4      	; 0x5e66 <LCD_vidInit+0xdc>
    5e6a:	9c af       	std	Y+60, r25	; 0x3c
    5e6c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e70:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e72:	01 97       	sbiw	r24, 0x01	; 1
    5e74:	9e af       	std	Y+62, r25	; 0x3e
    5e76:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e78:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e7c:	00 97       	sbiw	r24, 0x00	; 0
    5e7e:	69 f7       	brne	.-38     	; 0x5e5a <LCD_vidInit+0xd0>
    5e80:	16 c0       	rjmp	.+44     	; 0x5eae <LCD_vidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e82:	fe 01       	movw	r30, r28
    5e84:	ff 96       	adiw	r30, 0x3f	; 63
    5e86:	60 81       	ld	r22, Z
    5e88:	71 81       	ldd	r23, Z+1	; 0x01
    5e8a:	82 81       	ldd	r24, Z+2	; 0x02
    5e8c:	93 81       	ldd	r25, Z+3	; 0x03
    5e8e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    5e92:	dc 01       	movw	r26, r24
    5e94:	cb 01       	movw	r24, r22
    5e96:	9e af       	std	Y+62, r25	; 0x3e
    5e98:	8d af       	std	Y+61, r24	; 0x3d
    5e9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e9e:	9a af       	std	Y+58, r25	; 0x3a
    5ea0:	89 af       	std	Y+57, r24	; 0x39
    5ea2:	89 ad       	ldd	r24, Y+57	; 0x39
    5ea4:	9a ad       	ldd	r25, Y+58	; 0x3a
    5ea6:	01 97       	sbiw	r24, 0x01	; 1
    5ea8:	f1 f7       	brne	.-4      	; 0x5ea6 <LCD_vidInit+0x11c>
    5eaa:	9a af       	std	Y+58, r25	; 0x3a
    5eac:	89 af       	std	Y+57, r24	; 0x39
	//wait for a time
   _delay_ms(50);
   //function  set
   LCD_vidSendCommand(0b00111000);
    5eae:	88 e3       	ldi	r24, 0x38	; 56
    5eb0:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
    5eb4:	80 e0       	ldi	r24, 0x00	; 0
    5eb6:	90 e0       	ldi	r25, 0x00	; 0
    5eb8:	a0 ea       	ldi	r26, 0xA0	; 160
    5eba:	b1 e4       	ldi	r27, 0x41	; 65
    5ebc:	8d ab       	std	Y+53, r24	; 0x35
    5ebe:	9e ab       	std	Y+54, r25	; 0x36
    5ec0:	af ab       	std	Y+55, r26	; 0x37
    5ec2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ec4:	6d a9       	ldd	r22, Y+53	; 0x35
    5ec6:	7e a9       	ldd	r23, Y+54	; 0x36
    5ec8:	8f a9       	ldd	r24, Y+55	; 0x37
    5eca:	98 ad       	ldd	r25, Y+56	; 0x38
    5ecc:	20 e0       	ldi	r18, 0x00	; 0
    5ece:	30 e0       	ldi	r19, 0x00	; 0
    5ed0:	4a ef       	ldi	r20, 0xFA	; 250
    5ed2:	54 e4       	ldi	r21, 0x44	; 68
    5ed4:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    5ed8:	dc 01       	movw	r26, r24
    5eda:	cb 01       	movw	r24, r22
    5edc:	89 ab       	std	Y+49, r24	; 0x31
    5ede:	9a ab       	std	Y+50, r25	; 0x32
    5ee0:	ab ab       	std	Y+51, r26	; 0x33
    5ee2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5ee4:	69 a9       	ldd	r22, Y+49	; 0x31
    5ee6:	7a a9       	ldd	r23, Y+50	; 0x32
    5ee8:	8b a9       	ldd	r24, Y+51	; 0x33
    5eea:	9c a9       	ldd	r25, Y+52	; 0x34
    5eec:	20 e0       	ldi	r18, 0x00	; 0
    5eee:	30 e0       	ldi	r19, 0x00	; 0
    5ef0:	40 e8       	ldi	r20, 0x80	; 128
    5ef2:	5f e3       	ldi	r21, 0x3F	; 63
    5ef4:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    5ef8:	88 23       	and	r24, r24
    5efa:	2c f4       	brge	.+10     	; 0x5f06 <LCD_vidInit+0x17c>
		__ticks = 1;
    5efc:	81 e0       	ldi	r24, 0x01	; 1
    5efe:	90 e0       	ldi	r25, 0x00	; 0
    5f00:	98 ab       	std	Y+48, r25	; 0x30
    5f02:	8f a7       	std	Y+47, r24	; 0x2f
    5f04:	3f c0       	rjmp	.+126    	; 0x5f84 <LCD_vidInit+0x1fa>
	else if (__tmp > 65535)
    5f06:	69 a9       	ldd	r22, Y+49	; 0x31
    5f08:	7a a9       	ldd	r23, Y+50	; 0x32
    5f0a:	8b a9       	ldd	r24, Y+51	; 0x33
    5f0c:	9c a9       	ldd	r25, Y+52	; 0x34
    5f0e:	20 e0       	ldi	r18, 0x00	; 0
    5f10:	3f ef       	ldi	r19, 0xFF	; 255
    5f12:	4f e7       	ldi	r20, 0x7F	; 127
    5f14:	57 e4       	ldi	r21, 0x47	; 71
    5f16:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    5f1a:	18 16       	cp	r1, r24
    5f1c:	4c f5       	brge	.+82     	; 0x5f70 <LCD_vidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f1e:	6d a9       	ldd	r22, Y+53	; 0x35
    5f20:	7e a9       	ldd	r23, Y+54	; 0x36
    5f22:	8f a9       	ldd	r24, Y+55	; 0x37
    5f24:	98 ad       	ldd	r25, Y+56	; 0x38
    5f26:	20 e0       	ldi	r18, 0x00	; 0
    5f28:	30 e0       	ldi	r19, 0x00	; 0
    5f2a:	40 e2       	ldi	r20, 0x20	; 32
    5f2c:	51 e4       	ldi	r21, 0x41	; 65
    5f2e:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    5f32:	dc 01       	movw	r26, r24
    5f34:	cb 01       	movw	r24, r22
    5f36:	bc 01       	movw	r22, r24
    5f38:	cd 01       	movw	r24, r26
    5f3a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    5f3e:	dc 01       	movw	r26, r24
    5f40:	cb 01       	movw	r24, r22
    5f42:	98 ab       	std	Y+48, r25	; 0x30
    5f44:	8f a7       	std	Y+47, r24	; 0x2f
    5f46:	0f c0       	rjmp	.+30     	; 0x5f66 <LCD_vidInit+0x1dc>
    5f48:	88 ec       	ldi	r24, 0xC8	; 200
    5f4a:	90 e0       	ldi	r25, 0x00	; 0
    5f4c:	9e a7       	std	Y+46, r25	; 0x2e
    5f4e:	8d a7       	std	Y+45, r24	; 0x2d
    5f50:	8d a5       	ldd	r24, Y+45	; 0x2d
    5f52:	9e a5       	ldd	r25, Y+46	; 0x2e
    5f54:	01 97       	sbiw	r24, 0x01	; 1
    5f56:	f1 f7       	brne	.-4      	; 0x5f54 <LCD_vidInit+0x1ca>
    5f58:	9e a7       	std	Y+46, r25	; 0x2e
    5f5a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f5e:	98 a9       	ldd	r25, Y+48	; 0x30
    5f60:	01 97       	sbiw	r24, 0x01	; 1
    5f62:	98 ab       	std	Y+48, r25	; 0x30
    5f64:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f66:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f68:	98 a9       	ldd	r25, Y+48	; 0x30
    5f6a:	00 97       	sbiw	r24, 0x00	; 0
    5f6c:	69 f7       	brne	.-38     	; 0x5f48 <LCD_vidInit+0x1be>
    5f6e:	14 c0       	rjmp	.+40     	; 0x5f98 <LCD_vidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f70:	69 a9       	ldd	r22, Y+49	; 0x31
    5f72:	7a a9       	ldd	r23, Y+50	; 0x32
    5f74:	8b a9       	ldd	r24, Y+51	; 0x33
    5f76:	9c a9       	ldd	r25, Y+52	; 0x34
    5f78:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    5f7c:	dc 01       	movw	r26, r24
    5f7e:	cb 01       	movw	r24, r22
    5f80:	98 ab       	std	Y+48, r25	; 0x30
    5f82:	8f a7       	std	Y+47, r24	; 0x2f
    5f84:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f86:	98 a9       	ldd	r25, Y+48	; 0x30
    5f88:	9c a7       	std	Y+44, r25	; 0x2c
    5f8a:	8b a7       	std	Y+43, r24	; 0x2b
    5f8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    5f8e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5f90:	01 97       	sbiw	r24, 0x01	; 1
    5f92:	f1 f7       	brne	.-4      	; 0x5f90 <LCD_vidInit+0x206>
    5f94:	9c a7       	std	Y+44, r25	; 0x2c
    5f96:	8b a7       	std	Y+43, r24	; 0x2b
   //wait for a time
   _delay_ms(20);
   //display on off
   LCD_vidSendCommand(0b00001100);
    5f98:	8c e0       	ldi	r24, 0x0C	; 12
    5f9a:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
    5f9e:	80 e0       	ldi	r24, 0x00	; 0
    5fa0:	90 e0       	ldi	r25, 0x00	; 0
    5fa2:	a0 ea       	ldi	r26, 0xA0	; 160
    5fa4:	b1 e4       	ldi	r27, 0x41	; 65
    5fa6:	8f a3       	std	Y+39, r24	; 0x27
    5fa8:	98 a7       	std	Y+40, r25	; 0x28
    5faa:	a9 a7       	std	Y+41, r26	; 0x29
    5fac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5fae:	6f a1       	ldd	r22, Y+39	; 0x27
    5fb0:	78 a5       	ldd	r23, Y+40	; 0x28
    5fb2:	89 a5       	ldd	r24, Y+41	; 0x29
    5fb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    5fb6:	20 e0       	ldi	r18, 0x00	; 0
    5fb8:	30 e0       	ldi	r19, 0x00	; 0
    5fba:	4a ef       	ldi	r20, 0xFA	; 250
    5fbc:	54 e4       	ldi	r21, 0x44	; 68
    5fbe:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    5fc2:	dc 01       	movw	r26, r24
    5fc4:	cb 01       	movw	r24, r22
    5fc6:	8b a3       	std	Y+35, r24	; 0x23
    5fc8:	9c a3       	std	Y+36, r25	; 0x24
    5fca:	ad a3       	std	Y+37, r26	; 0x25
    5fcc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5fce:	6b a1       	ldd	r22, Y+35	; 0x23
    5fd0:	7c a1       	ldd	r23, Y+36	; 0x24
    5fd2:	8d a1       	ldd	r24, Y+37	; 0x25
    5fd4:	9e a1       	ldd	r25, Y+38	; 0x26
    5fd6:	20 e0       	ldi	r18, 0x00	; 0
    5fd8:	30 e0       	ldi	r19, 0x00	; 0
    5fda:	40 e8       	ldi	r20, 0x80	; 128
    5fdc:	5f e3       	ldi	r21, 0x3F	; 63
    5fde:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    5fe2:	88 23       	and	r24, r24
    5fe4:	2c f4       	brge	.+10     	; 0x5ff0 <LCD_vidInit+0x266>
		__ticks = 1;
    5fe6:	81 e0       	ldi	r24, 0x01	; 1
    5fe8:	90 e0       	ldi	r25, 0x00	; 0
    5fea:	9a a3       	std	Y+34, r25	; 0x22
    5fec:	89 a3       	std	Y+33, r24	; 0x21
    5fee:	3f c0       	rjmp	.+126    	; 0x606e <LCD_vidInit+0x2e4>
	else if (__tmp > 65535)
    5ff0:	6b a1       	ldd	r22, Y+35	; 0x23
    5ff2:	7c a1       	ldd	r23, Y+36	; 0x24
    5ff4:	8d a1       	ldd	r24, Y+37	; 0x25
    5ff6:	9e a1       	ldd	r25, Y+38	; 0x26
    5ff8:	20 e0       	ldi	r18, 0x00	; 0
    5ffa:	3f ef       	ldi	r19, 0xFF	; 255
    5ffc:	4f e7       	ldi	r20, 0x7F	; 127
    5ffe:	57 e4       	ldi	r21, 0x47	; 71
    6000:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    6004:	18 16       	cp	r1, r24
    6006:	4c f5       	brge	.+82     	; 0x605a <LCD_vidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6008:	6f a1       	ldd	r22, Y+39	; 0x27
    600a:	78 a5       	ldd	r23, Y+40	; 0x28
    600c:	89 a5       	ldd	r24, Y+41	; 0x29
    600e:	9a a5       	ldd	r25, Y+42	; 0x2a
    6010:	20 e0       	ldi	r18, 0x00	; 0
    6012:	30 e0       	ldi	r19, 0x00	; 0
    6014:	40 e2       	ldi	r20, 0x20	; 32
    6016:	51 e4       	ldi	r21, 0x41	; 65
    6018:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    601c:	dc 01       	movw	r26, r24
    601e:	cb 01       	movw	r24, r22
    6020:	bc 01       	movw	r22, r24
    6022:	cd 01       	movw	r24, r26
    6024:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    6028:	dc 01       	movw	r26, r24
    602a:	cb 01       	movw	r24, r22
    602c:	9a a3       	std	Y+34, r25	; 0x22
    602e:	89 a3       	std	Y+33, r24	; 0x21
    6030:	0f c0       	rjmp	.+30     	; 0x6050 <LCD_vidInit+0x2c6>
    6032:	88 ec       	ldi	r24, 0xC8	; 200
    6034:	90 e0       	ldi	r25, 0x00	; 0
    6036:	98 a3       	std	Y+32, r25	; 0x20
    6038:	8f 8f       	std	Y+31, r24	; 0x1f
    603a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    603c:	98 a1       	ldd	r25, Y+32	; 0x20
    603e:	01 97       	sbiw	r24, 0x01	; 1
    6040:	f1 f7       	brne	.-4      	; 0x603e <LCD_vidInit+0x2b4>
    6042:	98 a3       	std	Y+32, r25	; 0x20
    6044:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6046:	89 a1       	ldd	r24, Y+33	; 0x21
    6048:	9a a1       	ldd	r25, Y+34	; 0x22
    604a:	01 97       	sbiw	r24, 0x01	; 1
    604c:	9a a3       	std	Y+34, r25	; 0x22
    604e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6050:	89 a1       	ldd	r24, Y+33	; 0x21
    6052:	9a a1       	ldd	r25, Y+34	; 0x22
    6054:	00 97       	sbiw	r24, 0x00	; 0
    6056:	69 f7       	brne	.-38     	; 0x6032 <LCD_vidInit+0x2a8>
    6058:	14 c0       	rjmp	.+40     	; 0x6082 <LCD_vidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    605a:	6b a1       	ldd	r22, Y+35	; 0x23
    605c:	7c a1       	ldd	r23, Y+36	; 0x24
    605e:	8d a1       	ldd	r24, Y+37	; 0x25
    6060:	9e a1       	ldd	r25, Y+38	; 0x26
    6062:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    6066:	dc 01       	movw	r26, r24
    6068:	cb 01       	movw	r24, r22
    606a:	9a a3       	std	Y+34, r25	; 0x22
    606c:	89 a3       	std	Y+33, r24	; 0x21
    606e:	89 a1       	ldd	r24, Y+33	; 0x21
    6070:	9a a1       	ldd	r25, Y+34	; 0x22
    6072:	9e 8f       	std	Y+30, r25	; 0x1e
    6074:	8d 8f       	std	Y+29, r24	; 0x1d
    6076:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6078:	9e 8d       	ldd	r25, Y+30	; 0x1e
    607a:	01 97       	sbiw	r24, 0x01	; 1
    607c:	f1 f7       	brne	.-4      	; 0x607a <LCD_vidInit+0x2f0>
    607e:	9e 8f       	std	Y+30, r25	; 0x1e
    6080:	8d 8f       	std	Y+29, r24	; 0x1d
   //wait for a time
    _delay_ms(20);
   //display clear
   LCD_vidSendCommand(0b00000001);
    6082:	81 e0       	ldi	r24, 0x01	; 1
    6084:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
    6088:	80 e0       	ldi	r24, 0x00	; 0
    608a:	90 e0       	ldi	r25, 0x00	; 0
    608c:	a0 ea       	ldi	r26, 0xA0	; 160
    608e:	b1 e4       	ldi	r27, 0x41	; 65
    6090:	89 8f       	std	Y+25, r24	; 0x19
    6092:	9a 8f       	std	Y+26, r25	; 0x1a
    6094:	ab 8f       	std	Y+27, r26	; 0x1b
    6096:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6098:	69 8d       	ldd	r22, Y+25	; 0x19
    609a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    609c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    609e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    60a0:	20 e0       	ldi	r18, 0x00	; 0
    60a2:	30 e0       	ldi	r19, 0x00	; 0
    60a4:	4a ef       	ldi	r20, 0xFA	; 250
    60a6:	54 e4       	ldi	r21, 0x44	; 68
    60a8:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    60ac:	dc 01       	movw	r26, r24
    60ae:	cb 01       	movw	r24, r22
    60b0:	8d 8b       	std	Y+21, r24	; 0x15
    60b2:	9e 8b       	std	Y+22, r25	; 0x16
    60b4:	af 8b       	std	Y+23, r26	; 0x17
    60b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    60b8:	6d 89       	ldd	r22, Y+21	; 0x15
    60ba:	7e 89       	ldd	r23, Y+22	; 0x16
    60bc:	8f 89       	ldd	r24, Y+23	; 0x17
    60be:	98 8d       	ldd	r25, Y+24	; 0x18
    60c0:	20 e0       	ldi	r18, 0x00	; 0
    60c2:	30 e0       	ldi	r19, 0x00	; 0
    60c4:	40 e8       	ldi	r20, 0x80	; 128
    60c6:	5f e3       	ldi	r21, 0x3F	; 63
    60c8:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    60cc:	88 23       	and	r24, r24
    60ce:	2c f4       	brge	.+10     	; 0x60da <LCD_vidInit+0x350>
		__ticks = 1;
    60d0:	81 e0       	ldi	r24, 0x01	; 1
    60d2:	90 e0       	ldi	r25, 0x00	; 0
    60d4:	9c 8b       	std	Y+20, r25	; 0x14
    60d6:	8b 8b       	std	Y+19, r24	; 0x13
    60d8:	3f c0       	rjmp	.+126    	; 0x6158 <LCD_vidInit+0x3ce>
	else if (__tmp > 65535)
    60da:	6d 89       	ldd	r22, Y+21	; 0x15
    60dc:	7e 89       	ldd	r23, Y+22	; 0x16
    60de:	8f 89       	ldd	r24, Y+23	; 0x17
    60e0:	98 8d       	ldd	r25, Y+24	; 0x18
    60e2:	20 e0       	ldi	r18, 0x00	; 0
    60e4:	3f ef       	ldi	r19, 0xFF	; 255
    60e6:	4f e7       	ldi	r20, 0x7F	; 127
    60e8:	57 e4       	ldi	r21, 0x47	; 71
    60ea:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    60ee:	18 16       	cp	r1, r24
    60f0:	4c f5       	brge	.+82     	; 0x6144 <LCD_vidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60f2:	69 8d       	ldd	r22, Y+25	; 0x19
    60f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    60f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    60f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    60fa:	20 e0       	ldi	r18, 0x00	; 0
    60fc:	30 e0       	ldi	r19, 0x00	; 0
    60fe:	40 e2       	ldi	r20, 0x20	; 32
    6100:	51 e4       	ldi	r21, 0x41	; 65
    6102:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    6106:	dc 01       	movw	r26, r24
    6108:	cb 01       	movw	r24, r22
    610a:	bc 01       	movw	r22, r24
    610c:	cd 01       	movw	r24, r26
    610e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    6112:	dc 01       	movw	r26, r24
    6114:	cb 01       	movw	r24, r22
    6116:	9c 8b       	std	Y+20, r25	; 0x14
    6118:	8b 8b       	std	Y+19, r24	; 0x13
    611a:	0f c0       	rjmp	.+30     	; 0x613a <LCD_vidInit+0x3b0>
    611c:	88 ec       	ldi	r24, 0xC8	; 200
    611e:	90 e0       	ldi	r25, 0x00	; 0
    6120:	9a 8b       	std	Y+18, r25	; 0x12
    6122:	89 8b       	std	Y+17, r24	; 0x11
    6124:	89 89       	ldd	r24, Y+17	; 0x11
    6126:	9a 89       	ldd	r25, Y+18	; 0x12
    6128:	01 97       	sbiw	r24, 0x01	; 1
    612a:	f1 f7       	brne	.-4      	; 0x6128 <LCD_vidInit+0x39e>
    612c:	9a 8b       	std	Y+18, r25	; 0x12
    612e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6130:	8b 89       	ldd	r24, Y+19	; 0x13
    6132:	9c 89       	ldd	r25, Y+20	; 0x14
    6134:	01 97       	sbiw	r24, 0x01	; 1
    6136:	9c 8b       	std	Y+20, r25	; 0x14
    6138:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    613a:	8b 89       	ldd	r24, Y+19	; 0x13
    613c:	9c 89       	ldd	r25, Y+20	; 0x14
    613e:	00 97       	sbiw	r24, 0x00	; 0
    6140:	69 f7       	brne	.-38     	; 0x611c <LCD_vidInit+0x392>
    6142:	14 c0       	rjmp	.+40     	; 0x616c <LCD_vidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6144:	6d 89       	ldd	r22, Y+21	; 0x15
    6146:	7e 89       	ldd	r23, Y+22	; 0x16
    6148:	8f 89       	ldd	r24, Y+23	; 0x17
    614a:	98 8d       	ldd	r25, Y+24	; 0x18
    614c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    6150:	dc 01       	movw	r26, r24
    6152:	cb 01       	movw	r24, r22
    6154:	9c 8b       	std	Y+20, r25	; 0x14
    6156:	8b 8b       	std	Y+19, r24	; 0x13
    6158:	8b 89       	ldd	r24, Y+19	; 0x13
    615a:	9c 89       	ldd	r25, Y+20	; 0x14
    615c:	98 8b       	std	Y+16, r25	; 0x10
    615e:	8f 87       	std	Y+15, r24	; 0x0f
    6160:	8f 85       	ldd	r24, Y+15	; 0x0f
    6162:	98 89       	ldd	r25, Y+16	; 0x10
    6164:	01 97       	sbiw	r24, 0x01	; 1
    6166:	f1 f7       	brne	.-4      	; 0x6164 <LCD_vidInit+0x3da>
    6168:	98 8b       	std	Y+16, r25	; 0x10
    616a:	8f 87       	std	Y+15, r24	; 0x0f
   //wait for a time
    _delay_ms(20);
    //entry mode set
    LCD_vidSendCommand(0b00000110);
    616c:	86 e0       	ldi	r24, 0x06	; 6
    616e:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
    6172:	80 e0       	ldi	r24, 0x00	; 0
    6174:	90 e0       	ldi	r25, 0x00	; 0
    6176:	a0 ea       	ldi	r26, 0xA0	; 160
    6178:	b1 e4       	ldi	r27, 0x41	; 65
    617a:	8b 87       	std	Y+11, r24	; 0x0b
    617c:	9c 87       	std	Y+12, r25	; 0x0c
    617e:	ad 87       	std	Y+13, r26	; 0x0d
    6180:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6182:	6b 85       	ldd	r22, Y+11	; 0x0b
    6184:	7c 85       	ldd	r23, Y+12	; 0x0c
    6186:	8d 85       	ldd	r24, Y+13	; 0x0d
    6188:	9e 85       	ldd	r25, Y+14	; 0x0e
    618a:	20 e0       	ldi	r18, 0x00	; 0
    618c:	30 e0       	ldi	r19, 0x00	; 0
    618e:	4a ef       	ldi	r20, 0xFA	; 250
    6190:	54 e4       	ldi	r21, 0x44	; 68
    6192:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    6196:	dc 01       	movw	r26, r24
    6198:	cb 01       	movw	r24, r22
    619a:	8f 83       	std	Y+7, r24	; 0x07
    619c:	98 87       	std	Y+8, r25	; 0x08
    619e:	a9 87       	std	Y+9, r26	; 0x09
    61a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    61a2:	6f 81       	ldd	r22, Y+7	; 0x07
    61a4:	78 85       	ldd	r23, Y+8	; 0x08
    61a6:	89 85       	ldd	r24, Y+9	; 0x09
    61a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    61aa:	20 e0       	ldi	r18, 0x00	; 0
    61ac:	30 e0       	ldi	r19, 0x00	; 0
    61ae:	40 e8       	ldi	r20, 0x80	; 128
    61b0:	5f e3       	ldi	r21, 0x3F	; 63
    61b2:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    61b6:	88 23       	and	r24, r24
    61b8:	2c f4       	brge	.+10     	; 0x61c4 <LCD_vidInit+0x43a>
		__ticks = 1;
    61ba:	81 e0       	ldi	r24, 0x01	; 1
    61bc:	90 e0       	ldi	r25, 0x00	; 0
    61be:	9e 83       	std	Y+6, r25	; 0x06
    61c0:	8d 83       	std	Y+5, r24	; 0x05
    61c2:	3f c0       	rjmp	.+126    	; 0x6242 <LCD_vidInit+0x4b8>
	else if (__tmp > 65535)
    61c4:	6f 81       	ldd	r22, Y+7	; 0x07
    61c6:	78 85       	ldd	r23, Y+8	; 0x08
    61c8:	89 85       	ldd	r24, Y+9	; 0x09
    61ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    61cc:	20 e0       	ldi	r18, 0x00	; 0
    61ce:	3f ef       	ldi	r19, 0xFF	; 255
    61d0:	4f e7       	ldi	r20, 0x7F	; 127
    61d2:	57 e4       	ldi	r21, 0x47	; 71
    61d4:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    61d8:	18 16       	cp	r1, r24
    61da:	4c f5       	brge	.+82     	; 0x622e <LCD_vidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    61de:	7c 85       	ldd	r23, Y+12	; 0x0c
    61e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    61e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    61e4:	20 e0       	ldi	r18, 0x00	; 0
    61e6:	30 e0       	ldi	r19, 0x00	; 0
    61e8:	40 e2       	ldi	r20, 0x20	; 32
    61ea:	51 e4       	ldi	r21, 0x41	; 65
    61ec:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    61f0:	dc 01       	movw	r26, r24
    61f2:	cb 01       	movw	r24, r22
    61f4:	bc 01       	movw	r22, r24
    61f6:	cd 01       	movw	r24, r26
    61f8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    61fc:	dc 01       	movw	r26, r24
    61fe:	cb 01       	movw	r24, r22
    6200:	9e 83       	std	Y+6, r25	; 0x06
    6202:	8d 83       	std	Y+5, r24	; 0x05
    6204:	0f c0       	rjmp	.+30     	; 0x6224 <LCD_vidInit+0x49a>
    6206:	88 ec       	ldi	r24, 0xC8	; 200
    6208:	90 e0       	ldi	r25, 0x00	; 0
    620a:	9c 83       	std	Y+4, r25	; 0x04
    620c:	8b 83       	std	Y+3, r24	; 0x03
    620e:	8b 81       	ldd	r24, Y+3	; 0x03
    6210:	9c 81       	ldd	r25, Y+4	; 0x04
    6212:	01 97       	sbiw	r24, 0x01	; 1
    6214:	f1 f7       	brne	.-4      	; 0x6212 <LCD_vidInit+0x488>
    6216:	9c 83       	std	Y+4, r25	; 0x04
    6218:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    621a:	8d 81       	ldd	r24, Y+5	; 0x05
    621c:	9e 81       	ldd	r25, Y+6	; 0x06
    621e:	01 97       	sbiw	r24, 0x01	; 1
    6220:	9e 83       	std	Y+6, r25	; 0x06
    6222:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6224:	8d 81       	ldd	r24, Y+5	; 0x05
    6226:	9e 81       	ldd	r25, Y+6	; 0x06
    6228:	00 97       	sbiw	r24, 0x00	; 0
    622a:	69 f7       	brne	.-38     	; 0x6206 <LCD_vidInit+0x47c>
    622c:	14 c0       	rjmp	.+40     	; 0x6256 <LCD_vidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    622e:	6f 81       	ldd	r22, Y+7	; 0x07
    6230:	78 85       	ldd	r23, Y+8	; 0x08
    6232:	89 85       	ldd	r24, Y+9	; 0x09
    6234:	9a 85       	ldd	r25, Y+10	; 0x0a
    6236:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    623a:	dc 01       	movw	r26, r24
    623c:	cb 01       	movw	r24, r22
    623e:	9e 83       	std	Y+6, r25	; 0x06
    6240:	8d 83       	std	Y+5, r24	; 0x05
    6242:	8d 81       	ldd	r24, Y+5	; 0x05
    6244:	9e 81       	ldd	r25, Y+6	; 0x06
    6246:	9a 83       	std	Y+2, r25	; 0x02
    6248:	89 83       	std	Y+1, r24	; 0x01
    624a:	89 81       	ldd	r24, Y+1	; 0x01
    624c:	9a 81       	ldd	r25, Y+2	; 0x02
    624e:	01 97       	sbiw	r24, 0x01	; 1
    6250:	f1 f7       	brne	.-4      	; 0x624e <LCD_vidInit+0x4c4>
    6252:	9a 83       	std	Y+2, r25	; 0x02
    6254:	89 83       	std	Y+1, r24	; 0x01
    //wait for a time
     _delay_ms(20);
}
    6256:	ca 5b       	subi	r28, 0xBA	; 186
    6258:	df 4f       	sbci	r29, 0xFF	; 255
    625a:	0f b6       	in	r0, 0x3f	; 63
    625c:	f8 94       	cli
    625e:	de bf       	out	0x3e, r29	; 62
    6260:	0f be       	out	0x3f, r0	; 63
    6262:	cd bf       	out	0x3d, r28	; 61
    6264:	cf 91       	pop	r28
    6266:	df 91       	pop	r29
    6268:	1f 91       	pop	r17
    626a:	0f 91       	pop	r16
    626c:	08 95       	ret

0000626e <LCD_vidSendCommand>:
//.........................................................................................
void LCD_vidSendCommand(uint8 u8CommandCpy)
{
    626e:	df 93       	push	r29
    6270:	cf 93       	push	r28
    6272:	cd b7       	in	r28, 0x3d	; 61
    6274:	de b7       	in	r29, 0x3e	; 62
    6276:	6d 97       	sbiw	r28, 0x1d	; 29
    6278:	0f b6       	in	r0, 0x3f	; 63
    627a:	f8 94       	cli
    627c:	de bf       	out	0x3e, r29	; 62
    627e:	0f be       	out	0x3f, r0	; 63
    6280:	cd bf       	out	0x3d, r28	; 61
    6282:	8d 8f       	std	Y+29, r24	; 0x1d
	//put RS TO LOW TO WRITE OPERATION
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,RS,LOW);
    6284:	81 e0       	ldi	r24, 0x01	; 1
    6286:	65 e0       	ldi	r22, 0x05	; 5
    6288:	40 e0       	ldi	r20, 0x00	; 0
    628a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
	//PUT R/W TO LOW TO WRITE OPERATION
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,RW,LOW);
    628e:	81 e0       	ldi	r24, 0x01	; 1
    6290:	66 e0       	ldi	r22, 0x06	; 6
    6292:	40 e0       	ldi	r20, 0x00	; 0
    6294:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
	//PUT E TO HIGH TO ENABLE
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,HIGH);
    6298:	81 e0       	ldi	r24, 0x01	; 1
    629a:	67 e0       	ldi	r22, 0x07	; 7
    629c:	41 e0       	ldi	r20, 0x01	; 1
    629e:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>

	DIO_void_Set_Port_Value(LCD_PORT,u8CommandCpy);
    62a2:	82 e0       	ldi	r24, 0x02	; 2
    62a4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    62a6:	0e 94 1b 24 	call	0x4836	; 0x4836 <DIO_void_Set_Port_Value>

	//PUT E TO LOW TO COMPLETE SEND THE COMMAND
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,LOW);
    62aa:	81 e0       	ldi	r24, 0x01	; 1
    62ac:	67 e0       	ldi	r22, 0x07	; 7
    62ae:	40 e0       	ldi	r20, 0x00	; 0
    62b0:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
    62b4:	80 e0       	ldi	r24, 0x00	; 0
    62b6:	90 e0       	ldi	r25, 0x00	; 0
    62b8:	a0 e8       	ldi	r26, 0x80	; 128
    62ba:	bf e3       	ldi	r27, 0x3F	; 63
    62bc:	89 8f       	std	Y+25, r24	; 0x19
    62be:	9a 8f       	std	Y+26, r25	; 0x1a
    62c0:	ab 8f       	std	Y+27, r26	; 0x1b
    62c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62c4:	69 8d       	ldd	r22, Y+25	; 0x19
    62c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    62c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    62ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    62cc:	20 e0       	ldi	r18, 0x00	; 0
    62ce:	30 e0       	ldi	r19, 0x00	; 0
    62d0:	4a ef       	ldi	r20, 0xFA	; 250
    62d2:	54 e4       	ldi	r21, 0x44	; 68
    62d4:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    62d8:	dc 01       	movw	r26, r24
    62da:	cb 01       	movw	r24, r22
    62dc:	8d 8b       	std	Y+21, r24	; 0x15
    62de:	9e 8b       	std	Y+22, r25	; 0x16
    62e0:	af 8b       	std	Y+23, r26	; 0x17
    62e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    62e4:	6d 89       	ldd	r22, Y+21	; 0x15
    62e6:	7e 89       	ldd	r23, Y+22	; 0x16
    62e8:	8f 89       	ldd	r24, Y+23	; 0x17
    62ea:	98 8d       	ldd	r25, Y+24	; 0x18
    62ec:	20 e0       	ldi	r18, 0x00	; 0
    62ee:	30 e0       	ldi	r19, 0x00	; 0
    62f0:	40 e8       	ldi	r20, 0x80	; 128
    62f2:	5f e3       	ldi	r21, 0x3F	; 63
    62f4:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    62f8:	88 23       	and	r24, r24
    62fa:	2c f4       	brge	.+10     	; 0x6306 <LCD_vidSendCommand+0x98>
		__ticks = 1;
    62fc:	81 e0       	ldi	r24, 0x01	; 1
    62fe:	90 e0       	ldi	r25, 0x00	; 0
    6300:	9c 8b       	std	Y+20, r25	; 0x14
    6302:	8b 8b       	std	Y+19, r24	; 0x13
    6304:	3f c0       	rjmp	.+126    	; 0x6384 <LCD_vidSendCommand+0x116>
	else if (__tmp > 65535)
    6306:	6d 89       	ldd	r22, Y+21	; 0x15
    6308:	7e 89       	ldd	r23, Y+22	; 0x16
    630a:	8f 89       	ldd	r24, Y+23	; 0x17
    630c:	98 8d       	ldd	r25, Y+24	; 0x18
    630e:	20 e0       	ldi	r18, 0x00	; 0
    6310:	3f ef       	ldi	r19, 0xFF	; 255
    6312:	4f e7       	ldi	r20, 0x7F	; 127
    6314:	57 e4       	ldi	r21, 0x47	; 71
    6316:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    631a:	18 16       	cp	r1, r24
    631c:	4c f5       	brge	.+82     	; 0x6370 <LCD_vidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    631e:	69 8d       	ldd	r22, Y+25	; 0x19
    6320:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6322:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6324:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6326:	20 e0       	ldi	r18, 0x00	; 0
    6328:	30 e0       	ldi	r19, 0x00	; 0
    632a:	40 e2       	ldi	r20, 0x20	; 32
    632c:	51 e4       	ldi	r21, 0x41	; 65
    632e:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    6332:	dc 01       	movw	r26, r24
    6334:	cb 01       	movw	r24, r22
    6336:	bc 01       	movw	r22, r24
    6338:	cd 01       	movw	r24, r26
    633a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    633e:	dc 01       	movw	r26, r24
    6340:	cb 01       	movw	r24, r22
    6342:	9c 8b       	std	Y+20, r25	; 0x14
    6344:	8b 8b       	std	Y+19, r24	; 0x13
    6346:	0f c0       	rjmp	.+30     	; 0x6366 <LCD_vidSendCommand+0xf8>
    6348:	88 ec       	ldi	r24, 0xC8	; 200
    634a:	90 e0       	ldi	r25, 0x00	; 0
    634c:	9a 8b       	std	Y+18, r25	; 0x12
    634e:	89 8b       	std	Y+17, r24	; 0x11
    6350:	89 89       	ldd	r24, Y+17	; 0x11
    6352:	9a 89       	ldd	r25, Y+18	; 0x12
    6354:	01 97       	sbiw	r24, 0x01	; 1
    6356:	f1 f7       	brne	.-4      	; 0x6354 <LCD_vidSendCommand+0xe6>
    6358:	9a 8b       	std	Y+18, r25	; 0x12
    635a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    635c:	8b 89       	ldd	r24, Y+19	; 0x13
    635e:	9c 89       	ldd	r25, Y+20	; 0x14
    6360:	01 97       	sbiw	r24, 0x01	; 1
    6362:	9c 8b       	std	Y+20, r25	; 0x14
    6364:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6366:	8b 89       	ldd	r24, Y+19	; 0x13
    6368:	9c 89       	ldd	r25, Y+20	; 0x14
    636a:	00 97       	sbiw	r24, 0x00	; 0
    636c:	69 f7       	brne	.-38     	; 0x6348 <LCD_vidSendCommand+0xda>
    636e:	14 c0       	rjmp	.+40     	; 0x6398 <LCD_vidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6370:	6d 89       	ldd	r22, Y+21	; 0x15
    6372:	7e 89       	ldd	r23, Y+22	; 0x16
    6374:	8f 89       	ldd	r24, Y+23	; 0x17
    6376:	98 8d       	ldd	r25, Y+24	; 0x18
    6378:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    637c:	dc 01       	movw	r26, r24
    637e:	cb 01       	movw	r24, r22
    6380:	9c 8b       	std	Y+20, r25	; 0x14
    6382:	8b 8b       	std	Y+19, r24	; 0x13
    6384:	8b 89       	ldd	r24, Y+19	; 0x13
    6386:	9c 89       	ldd	r25, Y+20	; 0x14
    6388:	98 8b       	std	Y+16, r25	; 0x10
    638a:	8f 87       	std	Y+15, r24	; 0x0f
    638c:	8f 85       	ldd	r24, Y+15	; 0x0f
    638e:	98 89       	ldd	r25, Y+16	; 0x10
    6390:	01 97       	sbiw	r24, 0x01	; 1
    6392:	f1 f7       	brne	.-4      	; 0x6390 <LCD_vidSendCommand+0x122>
    6394:	98 8b       	std	Y+16, r25	; 0x10
    6396:	8f 87       	std	Y+15, r24	; 0x0f
	//wait tc time
	_delay_ms(1);
	//put Eto high
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,HIGH);
    6398:	81 e0       	ldi	r24, 0x01	; 1
    639a:	67 e0       	ldi	r22, 0x07	; 7
    639c:	41 e0       	ldi	r20, 0x01	; 1
    639e:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
    63a2:	80 e0       	ldi	r24, 0x00	; 0
    63a4:	90 e0       	ldi	r25, 0x00	; 0
    63a6:	a0 e4       	ldi	r26, 0x40	; 64
    63a8:	b0 e4       	ldi	r27, 0x40	; 64
    63aa:	8b 87       	std	Y+11, r24	; 0x0b
    63ac:	9c 87       	std	Y+12, r25	; 0x0c
    63ae:	ad 87       	std	Y+13, r26	; 0x0d
    63b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    63b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    63b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    63b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    63ba:	20 e0       	ldi	r18, 0x00	; 0
    63bc:	30 e0       	ldi	r19, 0x00	; 0
    63be:	4a ef       	ldi	r20, 0xFA	; 250
    63c0:	54 e4       	ldi	r21, 0x44	; 68
    63c2:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    63c6:	dc 01       	movw	r26, r24
    63c8:	cb 01       	movw	r24, r22
    63ca:	8f 83       	std	Y+7, r24	; 0x07
    63cc:	98 87       	std	Y+8, r25	; 0x08
    63ce:	a9 87       	std	Y+9, r26	; 0x09
    63d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    63d2:	6f 81       	ldd	r22, Y+7	; 0x07
    63d4:	78 85       	ldd	r23, Y+8	; 0x08
    63d6:	89 85       	ldd	r24, Y+9	; 0x09
    63d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    63da:	20 e0       	ldi	r18, 0x00	; 0
    63dc:	30 e0       	ldi	r19, 0x00	; 0
    63de:	40 e8       	ldi	r20, 0x80	; 128
    63e0:	5f e3       	ldi	r21, 0x3F	; 63
    63e2:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    63e6:	88 23       	and	r24, r24
    63e8:	2c f4       	brge	.+10     	; 0x63f4 <LCD_vidSendCommand+0x186>
		__ticks = 1;
    63ea:	81 e0       	ldi	r24, 0x01	; 1
    63ec:	90 e0       	ldi	r25, 0x00	; 0
    63ee:	9e 83       	std	Y+6, r25	; 0x06
    63f0:	8d 83       	std	Y+5, r24	; 0x05
    63f2:	3f c0       	rjmp	.+126    	; 0x6472 <LCD_vidSendCommand+0x204>
	else if (__tmp > 65535)
    63f4:	6f 81       	ldd	r22, Y+7	; 0x07
    63f6:	78 85       	ldd	r23, Y+8	; 0x08
    63f8:	89 85       	ldd	r24, Y+9	; 0x09
    63fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    63fc:	20 e0       	ldi	r18, 0x00	; 0
    63fe:	3f ef       	ldi	r19, 0xFF	; 255
    6400:	4f e7       	ldi	r20, 0x7F	; 127
    6402:	57 e4       	ldi	r21, 0x47	; 71
    6404:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    6408:	18 16       	cp	r1, r24
    640a:	4c f5       	brge	.+82     	; 0x645e <LCD_vidSendCommand+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    640c:	6b 85       	ldd	r22, Y+11	; 0x0b
    640e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6410:	8d 85       	ldd	r24, Y+13	; 0x0d
    6412:	9e 85       	ldd	r25, Y+14	; 0x0e
    6414:	20 e0       	ldi	r18, 0x00	; 0
    6416:	30 e0       	ldi	r19, 0x00	; 0
    6418:	40 e2       	ldi	r20, 0x20	; 32
    641a:	51 e4       	ldi	r21, 0x41	; 65
    641c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    6420:	dc 01       	movw	r26, r24
    6422:	cb 01       	movw	r24, r22
    6424:	bc 01       	movw	r22, r24
    6426:	cd 01       	movw	r24, r26
    6428:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    642c:	dc 01       	movw	r26, r24
    642e:	cb 01       	movw	r24, r22
    6430:	9e 83       	std	Y+6, r25	; 0x06
    6432:	8d 83       	std	Y+5, r24	; 0x05
    6434:	0f c0       	rjmp	.+30     	; 0x6454 <LCD_vidSendCommand+0x1e6>
    6436:	88 ec       	ldi	r24, 0xC8	; 200
    6438:	90 e0       	ldi	r25, 0x00	; 0
    643a:	9c 83       	std	Y+4, r25	; 0x04
    643c:	8b 83       	std	Y+3, r24	; 0x03
    643e:	8b 81       	ldd	r24, Y+3	; 0x03
    6440:	9c 81       	ldd	r25, Y+4	; 0x04
    6442:	01 97       	sbiw	r24, 0x01	; 1
    6444:	f1 f7       	brne	.-4      	; 0x6442 <LCD_vidSendCommand+0x1d4>
    6446:	9c 83       	std	Y+4, r25	; 0x04
    6448:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    644a:	8d 81       	ldd	r24, Y+5	; 0x05
    644c:	9e 81       	ldd	r25, Y+6	; 0x06
    644e:	01 97       	sbiw	r24, 0x01	; 1
    6450:	9e 83       	std	Y+6, r25	; 0x06
    6452:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6454:	8d 81       	ldd	r24, Y+5	; 0x05
    6456:	9e 81       	ldd	r25, Y+6	; 0x06
    6458:	00 97       	sbiw	r24, 0x00	; 0
    645a:	69 f7       	brne	.-38     	; 0x6436 <LCD_vidSendCommand+0x1c8>
    645c:	14 c0       	rjmp	.+40     	; 0x6486 <LCD_vidSendCommand+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    645e:	6f 81       	ldd	r22, Y+7	; 0x07
    6460:	78 85       	ldd	r23, Y+8	; 0x08
    6462:	89 85       	ldd	r24, Y+9	; 0x09
    6464:	9a 85       	ldd	r25, Y+10	; 0x0a
    6466:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    646a:	dc 01       	movw	r26, r24
    646c:	cb 01       	movw	r24, r22
    646e:	9e 83       	std	Y+6, r25	; 0x06
    6470:	8d 83       	std	Y+5, r24	; 0x05
    6472:	8d 81       	ldd	r24, Y+5	; 0x05
    6474:	9e 81       	ldd	r25, Y+6	; 0x06
    6476:	9a 83       	std	Y+2, r25	; 0x02
    6478:	89 83       	std	Y+1, r24	; 0x01
    647a:	89 81       	ldd	r24, Y+1	; 0x01
    647c:	9a 81       	ldd	r25, Y+2	; 0x02
    647e:	01 97       	sbiw	r24, 0x01	; 1
    6480:	f1 f7       	brne	.-4      	; 0x647e <LCD_vidSendCommand+0x210>
    6482:	9a 83       	std	Y+2, r25	; 0x02
    6484:	89 83       	std	Y+1, r24	; 0x01
	//wait to let lcd excute the command
	_delay_ms(3);
}
    6486:	6d 96       	adiw	r28, 0x1d	; 29
    6488:	0f b6       	in	r0, 0x3f	; 63
    648a:	f8 94       	cli
    648c:	de bf       	out	0x3e, r29	; 62
    648e:	0f be       	out	0x3f, r0	; 63
    6490:	cd bf       	out	0x3d, r28	; 61
    6492:	cf 91       	pop	r28
    6494:	df 91       	pop	r29
    6496:	08 95       	ret

00006498 <LCD_vidWriteCharacter>:
//....................................................................
void LCD_vidWriteCharacter(uint8 u8DataCpy)
{
    6498:	df 93       	push	r29
    649a:	cf 93       	push	r28
    649c:	cd b7       	in	r28, 0x3d	; 61
    649e:	de b7       	in	r29, 0x3e	; 62
    64a0:	6d 97       	sbiw	r28, 0x1d	; 29
    64a2:	0f b6       	in	r0, 0x3f	; 63
    64a4:	f8 94       	cli
    64a6:	de bf       	out	0x3e, r29	; 62
    64a8:	0f be       	out	0x3f, r0	; 63
    64aa:	cd bf       	out	0x3d, r28	; 61
    64ac:	8d 8f       	std	Y+29, r24	; 0x1d
	//put RS TO LOW TO WRITE OPERATION
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,RS,HIGH);
    64ae:	81 e0       	ldi	r24, 0x01	; 1
    64b0:	65 e0       	ldi	r22, 0x05	; 5
    64b2:	41 e0       	ldi	r20, 0x01	; 1
    64b4:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
    //PUT R/W TO LOW TO WRITE OPERATION
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,RW,LOW);
    64b8:	81 e0       	ldi	r24, 0x01	; 1
    64ba:	66 e0       	ldi	r22, 0x06	; 6
    64bc:	40 e0       	ldi	r20, 0x00	; 0
    64be:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
	//PUT E TO HIGH TO ENABLE
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,HIGH);
    64c2:	81 e0       	ldi	r24, 0x01	; 1
    64c4:	67 e0       	ldi	r22, 0x07	; 7
    64c6:	41 e0       	ldi	r20, 0x01	; 1
    64c8:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>

	DIO_void_Set_Port_Value(LCD_PORT,u8DataCpy);
    64cc:	82 e0       	ldi	r24, 0x02	; 2
    64ce:	6d 8d       	ldd	r22, Y+29	; 0x1d
    64d0:	0e 94 1b 24 	call	0x4836	; 0x4836 <DIO_void_Set_Port_Value>

	//PUT E TO LOW TO COMPLETE SEND THE COMMAND
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,LOW);
    64d4:	81 e0       	ldi	r24, 0x01	; 1
    64d6:	67 e0       	ldi	r22, 0x07	; 7
    64d8:	40 e0       	ldi	r20, 0x00	; 0
    64da:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
    64de:	80 e0       	ldi	r24, 0x00	; 0
    64e0:	90 e0       	ldi	r25, 0x00	; 0
    64e2:	a0 e8       	ldi	r26, 0x80	; 128
    64e4:	bf e3       	ldi	r27, 0x3F	; 63
    64e6:	89 8f       	std	Y+25, r24	; 0x19
    64e8:	9a 8f       	std	Y+26, r25	; 0x1a
    64ea:	ab 8f       	std	Y+27, r26	; 0x1b
    64ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64ee:	69 8d       	ldd	r22, Y+25	; 0x19
    64f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    64f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    64f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    64f6:	20 e0       	ldi	r18, 0x00	; 0
    64f8:	30 e0       	ldi	r19, 0x00	; 0
    64fa:	4a ef       	ldi	r20, 0xFA	; 250
    64fc:	54 e4       	ldi	r21, 0x44	; 68
    64fe:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    6502:	dc 01       	movw	r26, r24
    6504:	cb 01       	movw	r24, r22
    6506:	8d 8b       	std	Y+21, r24	; 0x15
    6508:	9e 8b       	std	Y+22, r25	; 0x16
    650a:	af 8b       	std	Y+23, r26	; 0x17
    650c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    650e:	6d 89       	ldd	r22, Y+21	; 0x15
    6510:	7e 89       	ldd	r23, Y+22	; 0x16
    6512:	8f 89       	ldd	r24, Y+23	; 0x17
    6514:	98 8d       	ldd	r25, Y+24	; 0x18
    6516:	20 e0       	ldi	r18, 0x00	; 0
    6518:	30 e0       	ldi	r19, 0x00	; 0
    651a:	40 e8       	ldi	r20, 0x80	; 128
    651c:	5f e3       	ldi	r21, 0x3F	; 63
    651e:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    6522:	88 23       	and	r24, r24
    6524:	2c f4       	brge	.+10     	; 0x6530 <LCD_vidWriteCharacter+0x98>
		__ticks = 1;
    6526:	81 e0       	ldi	r24, 0x01	; 1
    6528:	90 e0       	ldi	r25, 0x00	; 0
    652a:	9c 8b       	std	Y+20, r25	; 0x14
    652c:	8b 8b       	std	Y+19, r24	; 0x13
    652e:	3f c0       	rjmp	.+126    	; 0x65ae <LCD_vidWriteCharacter+0x116>
	else if (__tmp > 65535)
    6530:	6d 89       	ldd	r22, Y+21	; 0x15
    6532:	7e 89       	ldd	r23, Y+22	; 0x16
    6534:	8f 89       	ldd	r24, Y+23	; 0x17
    6536:	98 8d       	ldd	r25, Y+24	; 0x18
    6538:	20 e0       	ldi	r18, 0x00	; 0
    653a:	3f ef       	ldi	r19, 0xFF	; 255
    653c:	4f e7       	ldi	r20, 0x7F	; 127
    653e:	57 e4       	ldi	r21, 0x47	; 71
    6540:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    6544:	18 16       	cp	r1, r24
    6546:	4c f5       	brge	.+82     	; 0x659a <LCD_vidWriteCharacter+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6548:	69 8d       	ldd	r22, Y+25	; 0x19
    654a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    654c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    654e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6550:	20 e0       	ldi	r18, 0x00	; 0
    6552:	30 e0       	ldi	r19, 0x00	; 0
    6554:	40 e2       	ldi	r20, 0x20	; 32
    6556:	51 e4       	ldi	r21, 0x41	; 65
    6558:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    655c:	dc 01       	movw	r26, r24
    655e:	cb 01       	movw	r24, r22
    6560:	bc 01       	movw	r22, r24
    6562:	cd 01       	movw	r24, r26
    6564:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    6568:	dc 01       	movw	r26, r24
    656a:	cb 01       	movw	r24, r22
    656c:	9c 8b       	std	Y+20, r25	; 0x14
    656e:	8b 8b       	std	Y+19, r24	; 0x13
    6570:	0f c0       	rjmp	.+30     	; 0x6590 <LCD_vidWriteCharacter+0xf8>
    6572:	88 ec       	ldi	r24, 0xC8	; 200
    6574:	90 e0       	ldi	r25, 0x00	; 0
    6576:	9a 8b       	std	Y+18, r25	; 0x12
    6578:	89 8b       	std	Y+17, r24	; 0x11
    657a:	89 89       	ldd	r24, Y+17	; 0x11
    657c:	9a 89       	ldd	r25, Y+18	; 0x12
    657e:	01 97       	sbiw	r24, 0x01	; 1
    6580:	f1 f7       	brne	.-4      	; 0x657e <LCD_vidWriteCharacter+0xe6>
    6582:	9a 8b       	std	Y+18, r25	; 0x12
    6584:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6586:	8b 89       	ldd	r24, Y+19	; 0x13
    6588:	9c 89       	ldd	r25, Y+20	; 0x14
    658a:	01 97       	sbiw	r24, 0x01	; 1
    658c:	9c 8b       	std	Y+20, r25	; 0x14
    658e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6590:	8b 89       	ldd	r24, Y+19	; 0x13
    6592:	9c 89       	ldd	r25, Y+20	; 0x14
    6594:	00 97       	sbiw	r24, 0x00	; 0
    6596:	69 f7       	brne	.-38     	; 0x6572 <LCD_vidWriteCharacter+0xda>
    6598:	14 c0       	rjmp	.+40     	; 0x65c2 <LCD_vidWriteCharacter+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    659a:	6d 89       	ldd	r22, Y+21	; 0x15
    659c:	7e 89       	ldd	r23, Y+22	; 0x16
    659e:	8f 89       	ldd	r24, Y+23	; 0x17
    65a0:	98 8d       	ldd	r25, Y+24	; 0x18
    65a2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    65a6:	dc 01       	movw	r26, r24
    65a8:	cb 01       	movw	r24, r22
    65aa:	9c 8b       	std	Y+20, r25	; 0x14
    65ac:	8b 8b       	std	Y+19, r24	; 0x13
    65ae:	8b 89       	ldd	r24, Y+19	; 0x13
    65b0:	9c 89       	ldd	r25, Y+20	; 0x14
    65b2:	98 8b       	std	Y+16, r25	; 0x10
    65b4:	8f 87       	std	Y+15, r24	; 0x0f
    65b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    65b8:	98 89       	ldd	r25, Y+16	; 0x10
    65ba:	01 97       	sbiw	r24, 0x01	; 1
    65bc:	f1 f7       	brne	.-4      	; 0x65ba <LCD_vidWriteCharacter+0x122>
    65be:	98 8b       	std	Y+16, r25	; 0x10
    65c0:	8f 87       	std	Y+15, r24	; 0x0f
	//wait tc time
	_delay_ms(1);
	//put E to high
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,HIGH);
    65c2:	81 e0       	ldi	r24, 0x01	; 1
    65c4:	67 e0       	ldi	r22, 0x07	; 7
    65c6:	41 e0       	ldi	r20, 0x01	; 1
    65c8:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
    65cc:	80 e0       	ldi	r24, 0x00	; 0
    65ce:	90 e0       	ldi	r25, 0x00	; 0
    65d0:	a0 e4       	ldi	r26, 0x40	; 64
    65d2:	b0 e4       	ldi	r27, 0x40	; 64
    65d4:	8b 87       	std	Y+11, r24	; 0x0b
    65d6:	9c 87       	std	Y+12, r25	; 0x0c
    65d8:	ad 87       	std	Y+13, r26	; 0x0d
    65da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    65de:	7c 85       	ldd	r23, Y+12	; 0x0c
    65e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    65e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    65e4:	20 e0       	ldi	r18, 0x00	; 0
    65e6:	30 e0       	ldi	r19, 0x00	; 0
    65e8:	4a ef       	ldi	r20, 0xFA	; 250
    65ea:	54 e4       	ldi	r21, 0x44	; 68
    65ec:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    65f0:	dc 01       	movw	r26, r24
    65f2:	cb 01       	movw	r24, r22
    65f4:	8f 83       	std	Y+7, r24	; 0x07
    65f6:	98 87       	std	Y+8, r25	; 0x08
    65f8:	a9 87       	std	Y+9, r26	; 0x09
    65fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    65fc:	6f 81       	ldd	r22, Y+7	; 0x07
    65fe:	78 85       	ldd	r23, Y+8	; 0x08
    6600:	89 85       	ldd	r24, Y+9	; 0x09
    6602:	9a 85       	ldd	r25, Y+10	; 0x0a
    6604:	20 e0       	ldi	r18, 0x00	; 0
    6606:	30 e0       	ldi	r19, 0x00	; 0
    6608:	40 e8       	ldi	r20, 0x80	; 128
    660a:	5f e3       	ldi	r21, 0x3F	; 63
    660c:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    6610:	88 23       	and	r24, r24
    6612:	2c f4       	brge	.+10     	; 0x661e <LCD_vidWriteCharacter+0x186>
		__ticks = 1;
    6614:	81 e0       	ldi	r24, 0x01	; 1
    6616:	90 e0       	ldi	r25, 0x00	; 0
    6618:	9e 83       	std	Y+6, r25	; 0x06
    661a:	8d 83       	std	Y+5, r24	; 0x05
    661c:	3f c0       	rjmp	.+126    	; 0x669c <LCD_vidWriteCharacter+0x204>
	else if (__tmp > 65535)
    661e:	6f 81       	ldd	r22, Y+7	; 0x07
    6620:	78 85       	ldd	r23, Y+8	; 0x08
    6622:	89 85       	ldd	r24, Y+9	; 0x09
    6624:	9a 85       	ldd	r25, Y+10	; 0x0a
    6626:	20 e0       	ldi	r18, 0x00	; 0
    6628:	3f ef       	ldi	r19, 0xFF	; 255
    662a:	4f e7       	ldi	r20, 0x7F	; 127
    662c:	57 e4       	ldi	r21, 0x47	; 71
    662e:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    6632:	18 16       	cp	r1, r24
    6634:	4c f5       	brge	.+82     	; 0x6688 <LCD_vidWriteCharacter+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6636:	6b 85       	ldd	r22, Y+11	; 0x0b
    6638:	7c 85       	ldd	r23, Y+12	; 0x0c
    663a:	8d 85       	ldd	r24, Y+13	; 0x0d
    663c:	9e 85       	ldd	r25, Y+14	; 0x0e
    663e:	20 e0       	ldi	r18, 0x00	; 0
    6640:	30 e0       	ldi	r19, 0x00	; 0
    6642:	40 e2       	ldi	r20, 0x20	; 32
    6644:	51 e4       	ldi	r21, 0x41	; 65
    6646:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    664a:	dc 01       	movw	r26, r24
    664c:	cb 01       	movw	r24, r22
    664e:	bc 01       	movw	r22, r24
    6650:	cd 01       	movw	r24, r26
    6652:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    6656:	dc 01       	movw	r26, r24
    6658:	cb 01       	movw	r24, r22
    665a:	9e 83       	std	Y+6, r25	; 0x06
    665c:	8d 83       	std	Y+5, r24	; 0x05
    665e:	0f c0       	rjmp	.+30     	; 0x667e <LCD_vidWriteCharacter+0x1e6>
    6660:	88 ec       	ldi	r24, 0xC8	; 200
    6662:	90 e0       	ldi	r25, 0x00	; 0
    6664:	9c 83       	std	Y+4, r25	; 0x04
    6666:	8b 83       	std	Y+3, r24	; 0x03
    6668:	8b 81       	ldd	r24, Y+3	; 0x03
    666a:	9c 81       	ldd	r25, Y+4	; 0x04
    666c:	01 97       	sbiw	r24, 0x01	; 1
    666e:	f1 f7       	brne	.-4      	; 0x666c <LCD_vidWriteCharacter+0x1d4>
    6670:	9c 83       	std	Y+4, r25	; 0x04
    6672:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6674:	8d 81       	ldd	r24, Y+5	; 0x05
    6676:	9e 81       	ldd	r25, Y+6	; 0x06
    6678:	01 97       	sbiw	r24, 0x01	; 1
    667a:	9e 83       	std	Y+6, r25	; 0x06
    667c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    667e:	8d 81       	ldd	r24, Y+5	; 0x05
    6680:	9e 81       	ldd	r25, Y+6	; 0x06
    6682:	00 97       	sbiw	r24, 0x00	; 0
    6684:	69 f7       	brne	.-38     	; 0x6660 <LCD_vidWriteCharacter+0x1c8>
    6686:	14 c0       	rjmp	.+40     	; 0x66b0 <LCD_vidWriteCharacter+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6688:	6f 81       	ldd	r22, Y+7	; 0x07
    668a:	78 85       	ldd	r23, Y+8	; 0x08
    668c:	89 85       	ldd	r24, Y+9	; 0x09
    668e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6690:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    6694:	dc 01       	movw	r26, r24
    6696:	cb 01       	movw	r24, r22
    6698:	9e 83       	std	Y+6, r25	; 0x06
    669a:	8d 83       	std	Y+5, r24	; 0x05
    669c:	8d 81       	ldd	r24, Y+5	; 0x05
    669e:	9e 81       	ldd	r25, Y+6	; 0x06
    66a0:	9a 83       	std	Y+2, r25	; 0x02
    66a2:	89 83       	std	Y+1, r24	; 0x01
    66a4:	89 81       	ldd	r24, Y+1	; 0x01
    66a6:	9a 81       	ldd	r25, Y+2	; 0x02
    66a8:	01 97       	sbiw	r24, 0x01	; 1
    66aa:	f1 f7       	brne	.-4      	; 0x66a8 <LCD_vidWriteCharacter+0x210>
    66ac:	9a 83       	std	Y+2, r25	; 0x02
    66ae:	89 83       	std	Y+1, r24	; 0x01
	//wait to let lcd excute the command
	_delay_ms(3);
}
    66b0:	6d 96       	adiw	r28, 0x1d	; 29
    66b2:	0f b6       	in	r0, 0x3f	; 63
    66b4:	f8 94       	cli
    66b6:	de bf       	out	0x3e, r29	; 62
    66b8:	0f be       	out	0x3f, r0	; 63
    66ba:	cd bf       	out	0x3d, r28	; 61
    66bc:	cf 91       	pop	r28
    66be:	df 91       	pop	r29
    66c0:	08 95       	ret

000066c2 <LCD_vidSendCommand4>:

//....................................................................

void LCD_vidSendCommand4(uint8 u8CommandCpy)
{
    66c2:	df 93       	push	r29
    66c4:	cf 93       	push	r28
    66c6:	0f 92       	push	r0
    66c8:	cd b7       	in	r28, 0x3d	; 61
    66ca:	de b7       	in	r29, 0x3e	; 62
    66cc:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidSendCommand( ( GET_NippleH(u8CommandCpy))<<4 );
    66ce:	89 81       	ldd	r24, Y+1	; 0x01
    66d0:	80 7f       	andi	r24, 0xF0	; 240
    66d2:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
	LCD_vidSendCommand(  (GET_NippleL(u8CommandCpy))<<4 );
    66d6:	89 81       	ldd	r24, Y+1	; 0x01
    66d8:	88 2f       	mov	r24, r24
    66da:	90 e0       	ldi	r25, 0x00	; 0
    66dc:	82 95       	swap	r24
    66de:	92 95       	swap	r25
    66e0:	90 7f       	andi	r25, 0xF0	; 240
    66e2:	98 27       	eor	r25, r24
    66e4:	80 7f       	andi	r24, 0xF0	; 240
    66e6:	98 27       	eor	r25, r24
    66e8:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
}
    66ec:	0f 90       	pop	r0
    66ee:	cf 91       	pop	r28
    66f0:	df 91       	pop	r29
    66f2:	08 95       	ret

000066f4 <LCD_vidInit4>:
//........................................................................................
\
void LCD_vidInit4(void)
{
    66f4:	0f 93       	push	r16
    66f6:	1f 93       	push	r17
    66f8:	df 93       	push	r29
    66fa:	cf 93       	push	r28
    66fc:	cd b7       	in	r28, 0x3d	; 61
    66fe:	de b7       	in	r29, 0x3e	; 62
    6700:	c6 54       	subi	r28, 0x46	; 70
    6702:	d0 40       	sbci	r29, 0x00	; 0
    6704:	0f b6       	in	r0, 0x3f	; 63
    6706:	f8 94       	cli
    6708:	de bf       	out	0x3e, r29	; 62
    670a:	0f be       	out	0x3f, r0	; 63
    670c:	cd bf       	out	0x3d, r28	; 61
    670e:	fe 01       	movw	r30, r28
    6710:	ed 5b       	subi	r30, 0xBD	; 189
    6712:	ff 4f       	sbci	r31, 0xFF	; 255
    6714:	80 e0       	ldi	r24, 0x00	; 0
    6716:	90 e0       	ldi	r25, 0x00	; 0
    6718:	a8 e4       	ldi	r26, 0x48	; 72
    671a:	b2 e4       	ldi	r27, 0x42	; 66
    671c:	80 83       	st	Z, r24
    671e:	91 83       	std	Z+1, r25	; 0x01
    6720:	a2 83       	std	Z+2, r26	; 0x02
    6722:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6724:	8e 01       	movw	r16, r28
    6726:	01 5c       	subi	r16, 0xC1	; 193
    6728:	1f 4f       	sbci	r17, 0xFF	; 255
    672a:	fe 01       	movw	r30, r28
    672c:	ed 5b       	subi	r30, 0xBD	; 189
    672e:	ff 4f       	sbci	r31, 0xFF	; 255
    6730:	60 81       	ld	r22, Z
    6732:	71 81       	ldd	r23, Z+1	; 0x01
    6734:	82 81       	ldd	r24, Z+2	; 0x02
    6736:	93 81       	ldd	r25, Z+3	; 0x03
    6738:	20 e0       	ldi	r18, 0x00	; 0
    673a:	30 e0       	ldi	r19, 0x00	; 0
    673c:	4a ef       	ldi	r20, 0xFA	; 250
    673e:	54 e4       	ldi	r21, 0x44	; 68
    6740:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    6744:	dc 01       	movw	r26, r24
    6746:	cb 01       	movw	r24, r22
    6748:	f8 01       	movw	r30, r16
    674a:	80 83       	st	Z, r24
    674c:	91 83       	std	Z+1, r25	; 0x01
    674e:	a2 83       	std	Z+2, r26	; 0x02
    6750:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6752:	fe 01       	movw	r30, r28
    6754:	ff 96       	adiw	r30, 0x3f	; 63
    6756:	60 81       	ld	r22, Z
    6758:	71 81       	ldd	r23, Z+1	; 0x01
    675a:	82 81       	ldd	r24, Z+2	; 0x02
    675c:	93 81       	ldd	r25, Z+3	; 0x03
    675e:	20 e0       	ldi	r18, 0x00	; 0
    6760:	30 e0       	ldi	r19, 0x00	; 0
    6762:	40 e8       	ldi	r20, 0x80	; 128
    6764:	5f e3       	ldi	r21, 0x3F	; 63
    6766:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    676a:	88 23       	and	r24, r24
    676c:	2c f4       	brge	.+10     	; 0x6778 <LCD_vidInit4+0x84>
		__ticks = 1;
    676e:	81 e0       	ldi	r24, 0x01	; 1
    6770:	90 e0       	ldi	r25, 0x00	; 0
    6772:	9e af       	std	Y+62, r25	; 0x3e
    6774:	8d af       	std	Y+61, r24	; 0x3d
    6776:	46 c0       	rjmp	.+140    	; 0x6804 <LCD_vidInit4+0x110>
	else if (__tmp > 65535)
    6778:	fe 01       	movw	r30, r28
    677a:	ff 96       	adiw	r30, 0x3f	; 63
    677c:	60 81       	ld	r22, Z
    677e:	71 81       	ldd	r23, Z+1	; 0x01
    6780:	82 81       	ldd	r24, Z+2	; 0x02
    6782:	93 81       	ldd	r25, Z+3	; 0x03
    6784:	20 e0       	ldi	r18, 0x00	; 0
    6786:	3f ef       	ldi	r19, 0xFF	; 255
    6788:	4f e7       	ldi	r20, 0x7F	; 127
    678a:	57 e4       	ldi	r21, 0x47	; 71
    678c:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    6790:	18 16       	cp	r1, r24
    6792:	64 f5       	brge	.+88     	; 0x67ec <LCD_vidInit4+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6794:	fe 01       	movw	r30, r28
    6796:	ed 5b       	subi	r30, 0xBD	; 189
    6798:	ff 4f       	sbci	r31, 0xFF	; 255
    679a:	60 81       	ld	r22, Z
    679c:	71 81       	ldd	r23, Z+1	; 0x01
    679e:	82 81       	ldd	r24, Z+2	; 0x02
    67a0:	93 81       	ldd	r25, Z+3	; 0x03
    67a2:	20 e0       	ldi	r18, 0x00	; 0
    67a4:	30 e0       	ldi	r19, 0x00	; 0
    67a6:	40 e2       	ldi	r20, 0x20	; 32
    67a8:	51 e4       	ldi	r21, 0x41	; 65
    67aa:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    67ae:	dc 01       	movw	r26, r24
    67b0:	cb 01       	movw	r24, r22
    67b2:	bc 01       	movw	r22, r24
    67b4:	cd 01       	movw	r24, r26
    67b6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    67ba:	dc 01       	movw	r26, r24
    67bc:	cb 01       	movw	r24, r22
    67be:	9e af       	std	Y+62, r25	; 0x3e
    67c0:	8d af       	std	Y+61, r24	; 0x3d
    67c2:	0f c0       	rjmp	.+30     	; 0x67e2 <LCD_vidInit4+0xee>
    67c4:	88 ec       	ldi	r24, 0xC8	; 200
    67c6:	90 e0       	ldi	r25, 0x00	; 0
    67c8:	9c af       	std	Y+60, r25	; 0x3c
    67ca:	8b af       	std	Y+59, r24	; 0x3b
    67cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    67ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    67d0:	01 97       	sbiw	r24, 0x01	; 1
    67d2:	f1 f7       	brne	.-4      	; 0x67d0 <LCD_vidInit4+0xdc>
    67d4:	9c af       	std	Y+60, r25	; 0x3c
    67d6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    67da:	9e ad       	ldd	r25, Y+62	; 0x3e
    67dc:	01 97       	sbiw	r24, 0x01	; 1
    67de:	9e af       	std	Y+62, r25	; 0x3e
    67e0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    67e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    67e6:	00 97       	sbiw	r24, 0x00	; 0
    67e8:	69 f7       	brne	.-38     	; 0x67c4 <LCD_vidInit4+0xd0>
    67ea:	16 c0       	rjmp	.+44     	; 0x6818 <LCD_vidInit4+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67ec:	fe 01       	movw	r30, r28
    67ee:	ff 96       	adiw	r30, 0x3f	; 63
    67f0:	60 81       	ld	r22, Z
    67f2:	71 81       	ldd	r23, Z+1	; 0x01
    67f4:	82 81       	ldd	r24, Z+2	; 0x02
    67f6:	93 81       	ldd	r25, Z+3	; 0x03
    67f8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    67fc:	dc 01       	movw	r26, r24
    67fe:	cb 01       	movw	r24, r22
    6800:	9e af       	std	Y+62, r25	; 0x3e
    6802:	8d af       	std	Y+61, r24	; 0x3d
    6804:	8d ad       	ldd	r24, Y+61	; 0x3d
    6806:	9e ad       	ldd	r25, Y+62	; 0x3e
    6808:	9a af       	std	Y+58, r25	; 0x3a
    680a:	89 af       	std	Y+57, r24	; 0x39
    680c:	89 ad       	ldd	r24, Y+57	; 0x39
    680e:	9a ad       	ldd	r25, Y+58	; 0x3a
    6810:	01 97       	sbiw	r24, 0x01	; 1
    6812:	f1 f7       	brne	.-4      	; 0x6810 <LCD_vidInit4+0x11c>
    6814:	9a af       	std	Y+58, r25	; 0x3a
    6816:	89 af       	std	Y+57, r24	; 0x39
	 //wait for a time
	  _delay_ms(50);

	  //function  set
	  LCD_vidSendCommand(0b00100000);
    6818:	80 e2       	ldi	r24, 0x20	; 32
    681a:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
	  LCD_vidSendCommand(0b00100000);
    681e:	80 e2       	ldi	r24, 0x20	; 32
    6820:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
	  LCD_vidSendCommand(0b11000000);
    6824:	80 ec       	ldi	r24, 0xC0	; 192
    6826:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
    682a:	80 e0       	ldi	r24, 0x00	; 0
    682c:	90 e0       	ldi	r25, 0x00	; 0
    682e:	a8 e4       	ldi	r26, 0x48	; 72
    6830:	b2 e4       	ldi	r27, 0x42	; 66
    6832:	8d ab       	std	Y+53, r24	; 0x35
    6834:	9e ab       	std	Y+54, r25	; 0x36
    6836:	af ab       	std	Y+55, r26	; 0x37
    6838:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    683a:	6d a9       	ldd	r22, Y+53	; 0x35
    683c:	7e a9       	ldd	r23, Y+54	; 0x36
    683e:	8f a9       	ldd	r24, Y+55	; 0x37
    6840:	98 ad       	ldd	r25, Y+56	; 0x38
    6842:	20 e0       	ldi	r18, 0x00	; 0
    6844:	30 e0       	ldi	r19, 0x00	; 0
    6846:	4a ef       	ldi	r20, 0xFA	; 250
    6848:	54 e4       	ldi	r21, 0x44	; 68
    684a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    684e:	dc 01       	movw	r26, r24
    6850:	cb 01       	movw	r24, r22
    6852:	89 ab       	std	Y+49, r24	; 0x31
    6854:	9a ab       	std	Y+50, r25	; 0x32
    6856:	ab ab       	std	Y+51, r26	; 0x33
    6858:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    685a:	69 a9       	ldd	r22, Y+49	; 0x31
    685c:	7a a9       	ldd	r23, Y+50	; 0x32
    685e:	8b a9       	ldd	r24, Y+51	; 0x33
    6860:	9c a9       	ldd	r25, Y+52	; 0x34
    6862:	20 e0       	ldi	r18, 0x00	; 0
    6864:	30 e0       	ldi	r19, 0x00	; 0
    6866:	40 e8       	ldi	r20, 0x80	; 128
    6868:	5f e3       	ldi	r21, 0x3F	; 63
    686a:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    686e:	88 23       	and	r24, r24
    6870:	2c f4       	brge	.+10     	; 0x687c <LCD_vidInit4+0x188>
		__ticks = 1;
    6872:	81 e0       	ldi	r24, 0x01	; 1
    6874:	90 e0       	ldi	r25, 0x00	; 0
    6876:	98 ab       	std	Y+48, r25	; 0x30
    6878:	8f a7       	std	Y+47, r24	; 0x2f
    687a:	3f c0       	rjmp	.+126    	; 0x68fa <LCD_vidInit4+0x206>
	else if (__tmp > 65535)
    687c:	69 a9       	ldd	r22, Y+49	; 0x31
    687e:	7a a9       	ldd	r23, Y+50	; 0x32
    6880:	8b a9       	ldd	r24, Y+51	; 0x33
    6882:	9c a9       	ldd	r25, Y+52	; 0x34
    6884:	20 e0       	ldi	r18, 0x00	; 0
    6886:	3f ef       	ldi	r19, 0xFF	; 255
    6888:	4f e7       	ldi	r20, 0x7F	; 127
    688a:	57 e4       	ldi	r21, 0x47	; 71
    688c:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    6890:	18 16       	cp	r1, r24
    6892:	4c f5       	brge	.+82     	; 0x68e6 <LCD_vidInit4+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6894:	6d a9       	ldd	r22, Y+53	; 0x35
    6896:	7e a9       	ldd	r23, Y+54	; 0x36
    6898:	8f a9       	ldd	r24, Y+55	; 0x37
    689a:	98 ad       	ldd	r25, Y+56	; 0x38
    689c:	20 e0       	ldi	r18, 0x00	; 0
    689e:	30 e0       	ldi	r19, 0x00	; 0
    68a0:	40 e2       	ldi	r20, 0x20	; 32
    68a2:	51 e4       	ldi	r21, 0x41	; 65
    68a4:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    68a8:	dc 01       	movw	r26, r24
    68aa:	cb 01       	movw	r24, r22
    68ac:	bc 01       	movw	r22, r24
    68ae:	cd 01       	movw	r24, r26
    68b0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    68b4:	dc 01       	movw	r26, r24
    68b6:	cb 01       	movw	r24, r22
    68b8:	98 ab       	std	Y+48, r25	; 0x30
    68ba:	8f a7       	std	Y+47, r24	; 0x2f
    68bc:	0f c0       	rjmp	.+30     	; 0x68dc <LCD_vidInit4+0x1e8>
    68be:	88 ec       	ldi	r24, 0xC8	; 200
    68c0:	90 e0       	ldi	r25, 0x00	; 0
    68c2:	9e a7       	std	Y+46, r25	; 0x2e
    68c4:	8d a7       	std	Y+45, r24	; 0x2d
    68c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    68c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    68ca:	01 97       	sbiw	r24, 0x01	; 1
    68cc:	f1 f7       	brne	.-4      	; 0x68ca <LCD_vidInit4+0x1d6>
    68ce:	9e a7       	std	Y+46, r25	; 0x2e
    68d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    68d4:	98 a9       	ldd	r25, Y+48	; 0x30
    68d6:	01 97       	sbiw	r24, 0x01	; 1
    68d8:	98 ab       	std	Y+48, r25	; 0x30
    68da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    68de:	98 a9       	ldd	r25, Y+48	; 0x30
    68e0:	00 97       	sbiw	r24, 0x00	; 0
    68e2:	69 f7       	brne	.-38     	; 0x68be <LCD_vidInit4+0x1ca>
    68e4:	14 c0       	rjmp	.+40     	; 0x690e <LCD_vidInit4+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68e6:	69 a9       	ldd	r22, Y+49	; 0x31
    68e8:	7a a9       	ldd	r23, Y+50	; 0x32
    68ea:	8b a9       	ldd	r24, Y+51	; 0x33
    68ec:	9c a9       	ldd	r25, Y+52	; 0x34
    68ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    68f2:	dc 01       	movw	r26, r24
    68f4:	cb 01       	movw	r24, r22
    68f6:	98 ab       	std	Y+48, r25	; 0x30
    68f8:	8f a7       	std	Y+47, r24	; 0x2f
    68fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    68fc:	98 a9       	ldd	r25, Y+48	; 0x30
    68fe:	9c a7       	std	Y+44, r25	; 0x2c
    6900:	8b a7       	std	Y+43, r24	; 0x2b
    6902:	8b a5       	ldd	r24, Y+43	; 0x2b
    6904:	9c a5       	ldd	r25, Y+44	; 0x2c
    6906:	01 97       	sbiw	r24, 0x01	; 1
    6908:	f1 f7       	brne	.-4      	; 0x6906 <LCD_vidInit4+0x212>
    690a:	9c a7       	std	Y+44, r25	; 0x2c
    690c:	8b a7       	std	Y+43, r24	; 0x2b

	  //wait for a time
	  _delay_ms(50);

	  //display on off
	  LCD_vidSendCommand(0b00000000);
    690e:	80 e0       	ldi	r24, 0x00	; 0
    6910:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
	  LCD_vidSendCommand(0b11100000);
    6914:	80 ee       	ldi	r24, 0xE0	; 224
    6916:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
    691a:	80 e0       	ldi	r24, 0x00	; 0
    691c:	90 e0       	ldi	r25, 0x00	; 0
    691e:	a0 ef       	ldi	r26, 0xF0	; 240
    6920:	b1 e4       	ldi	r27, 0x41	; 65
    6922:	8f a3       	std	Y+39, r24	; 0x27
    6924:	98 a7       	std	Y+40, r25	; 0x28
    6926:	a9 a7       	std	Y+41, r26	; 0x29
    6928:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    692a:	6f a1       	ldd	r22, Y+39	; 0x27
    692c:	78 a5       	ldd	r23, Y+40	; 0x28
    692e:	89 a5       	ldd	r24, Y+41	; 0x29
    6930:	9a a5       	ldd	r25, Y+42	; 0x2a
    6932:	20 e0       	ldi	r18, 0x00	; 0
    6934:	30 e0       	ldi	r19, 0x00	; 0
    6936:	4a ef       	ldi	r20, 0xFA	; 250
    6938:	54 e4       	ldi	r21, 0x44	; 68
    693a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    693e:	dc 01       	movw	r26, r24
    6940:	cb 01       	movw	r24, r22
    6942:	8b a3       	std	Y+35, r24	; 0x23
    6944:	9c a3       	std	Y+36, r25	; 0x24
    6946:	ad a3       	std	Y+37, r26	; 0x25
    6948:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    694a:	6b a1       	ldd	r22, Y+35	; 0x23
    694c:	7c a1       	ldd	r23, Y+36	; 0x24
    694e:	8d a1       	ldd	r24, Y+37	; 0x25
    6950:	9e a1       	ldd	r25, Y+38	; 0x26
    6952:	20 e0       	ldi	r18, 0x00	; 0
    6954:	30 e0       	ldi	r19, 0x00	; 0
    6956:	40 e8       	ldi	r20, 0x80	; 128
    6958:	5f e3       	ldi	r21, 0x3F	; 63
    695a:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    695e:	88 23       	and	r24, r24
    6960:	2c f4       	brge	.+10     	; 0x696c <LCD_vidInit4+0x278>
		__ticks = 1;
    6962:	81 e0       	ldi	r24, 0x01	; 1
    6964:	90 e0       	ldi	r25, 0x00	; 0
    6966:	9a a3       	std	Y+34, r25	; 0x22
    6968:	89 a3       	std	Y+33, r24	; 0x21
    696a:	3f c0       	rjmp	.+126    	; 0x69ea <LCD_vidInit4+0x2f6>
	else if (__tmp > 65535)
    696c:	6b a1       	ldd	r22, Y+35	; 0x23
    696e:	7c a1       	ldd	r23, Y+36	; 0x24
    6970:	8d a1       	ldd	r24, Y+37	; 0x25
    6972:	9e a1       	ldd	r25, Y+38	; 0x26
    6974:	20 e0       	ldi	r18, 0x00	; 0
    6976:	3f ef       	ldi	r19, 0xFF	; 255
    6978:	4f e7       	ldi	r20, 0x7F	; 127
    697a:	57 e4       	ldi	r21, 0x47	; 71
    697c:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    6980:	18 16       	cp	r1, r24
    6982:	4c f5       	brge	.+82     	; 0x69d6 <LCD_vidInit4+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6984:	6f a1       	ldd	r22, Y+39	; 0x27
    6986:	78 a5       	ldd	r23, Y+40	; 0x28
    6988:	89 a5       	ldd	r24, Y+41	; 0x29
    698a:	9a a5       	ldd	r25, Y+42	; 0x2a
    698c:	20 e0       	ldi	r18, 0x00	; 0
    698e:	30 e0       	ldi	r19, 0x00	; 0
    6990:	40 e2       	ldi	r20, 0x20	; 32
    6992:	51 e4       	ldi	r21, 0x41	; 65
    6994:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    6998:	dc 01       	movw	r26, r24
    699a:	cb 01       	movw	r24, r22
    699c:	bc 01       	movw	r22, r24
    699e:	cd 01       	movw	r24, r26
    69a0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    69a4:	dc 01       	movw	r26, r24
    69a6:	cb 01       	movw	r24, r22
    69a8:	9a a3       	std	Y+34, r25	; 0x22
    69aa:	89 a3       	std	Y+33, r24	; 0x21
    69ac:	0f c0       	rjmp	.+30     	; 0x69cc <LCD_vidInit4+0x2d8>
    69ae:	88 ec       	ldi	r24, 0xC8	; 200
    69b0:	90 e0       	ldi	r25, 0x00	; 0
    69b2:	98 a3       	std	Y+32, r25	; 0x20
    69b4:	8f 8f       	std	Y+31, r24	; 0x1f
    69b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    69b8:	98 a1       	ldd	r25, Y+32	; 0x20
    69ba:	01 97       	sbiw	r24, 0x01	; 1
    69bc:	f1 f7       	brne	.-4      	; 0x69ba <LCD_vidInit4+0x2c6>
    69be:	98 a3       	std	Y+32, r25	; 0x20
    69c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    69c2:	89 a1       	ldd	r24, Y+33	; 0x21
    69c4:	9a a1       	ldd	r25, Y+34	; 0x22
    69c6:	01 97       	sbiw	r24, 0x01	; 1
    69c8:	9a a3       	std	Y+34, r25	; 0x22
    69ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69cc:	89 a1       	ldd	r24, Y+33	; 0x21
    69ce:	9a a1       	ldd	r25, Y+34	; 0x22
    69d0:	00 97       	sbiw	r24, 0x00	; 0
    69d2:	69 f7       	brne	.-38     	; 0x69ae <LCD_vidInit4+0x2ba>
    69d4:	14 c0       	rjmp	.+40     	; 0x69fe <LCD_vidInit4+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    69d6:	6b a1       	ldd	r22, Y+35	; 0x23
    69d8:	7c a1       	ldd	r23, Y+36	; 0x24
    69da:	8d a1       	ldd	r24, Y+37	; 0x25
    69dc:	9e a1       	ldd	r25, Y+38	; 0x26
    69de:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    69e2:	dc 01       	movw	r26, r24
    69e4:	cb 01       	movw	r24, r22
    69e6:	9a a3       	std	Y+34, r25	; 0x22
    69e8:	89 a3       	std	Y+33, r24	; 0x21
    69ea:	89 a1       	ldd	r24, Y+33	; 0x21
    69ec:	9a a1       	ldd	r25, Y+34	; 0x22
    69ee:	9e 8f       	std	Y+30, r25	; 0x1e
    69f0:	8d 8f       	std	Y+29, r24	; 0x1d
    69f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    69f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    69f6:	01 97       	sbiw	r24, 0x01	; 1
    69f8:	f1 f7       	brne	.-4      	; 0x69f6 <LCD_vidInit4+0x302>
    69fa:	9e 8f       	std	Y+30, r25	; 0x1e
    69fc:	8d 8f       	std	Y+29, r24	; 0x1d

	  //wait for a time
	  _delay_ms(30);

	  //display clear
	  LCD_vidSendCommand(0b00000000);
    69fe:	80 e0       	ldi	r24, 0x00	; 0
    6a00:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
	  LCD_vidSendCommand(0b00010000);
    6a04:	80 e1       	ldi	r24, 0x10	; 16
    6a06:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
    6a0a:	80 e0       	ldi	r24, 0x00	; 0
    6a0c:	90 e0       	ldi	r25, 0x00	; 0
    6a0e:	a0 ef       	ldi	r26, 0xF0	; 240
    6a10:	b1 e4       	ldi	r27, 0x41	; 65
    6a12:	89 8f       	std	Y+25, r24	; 0x19
    6a14:	9a 8f       	std	Y+26, r25	; 0x1a
    6a16:	ab 8f       	std	Y+27, r26	; 0x1b
    6a18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a1a:	69 8d       	ldd	r22, Y+25	; 0x19
    6a1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6a1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6a20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6a22:	20 e0       	ldi	r18, 0x00	; 0
    6a24:	30 e0       	ldi	r19, 0x00	; 0
    6a26:	4a ef       	ldi	r20, 0xFA	; 250
    6a28:	54 e4       	ldi	r21, 0x44	; 68
    6a2a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    6a2e:	dc 01       	movw	r26, r24
    6a30:	cb 01       	movw	r24, r22
    6a32:	8d 8b       	std	Y+21, r24	; 0x15
    6a34:	9e 8b       	std	Y+22, r25	; 0x16
    6a36:	af 8b       	std	Y+23, r26	; 0x17
    6a38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6a3a:	6d 89       	ldd	r22, Y+21	; 0x15
    6a3c:	7e 89       	ldd	r23, Y+22	; 0x16
    6a3e:	8f 89       	ldd	r24, Y+23	; 0x17
    6a40:	98 8d       	ldd	r25, Y+24	; 0x18
    6a42:	20 e0       	ldi	r18, 0x00	; 0
    6a44:	30 e0       	ldi	r19, 0x00	; 0
    6a46:	40 e8       	ldi	r20, 0x80	; 128
    6a48:	5f e3       	ldi	r21, 0x3F	; 63
    6a4a:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    6a4e:	88 23       	and	r24, r24
    6a50:	2c f4       	brge	.+10     	; 0x6a5c <LCD_vidInit4+0x368>
		__ticks = 1;
    6a52:	81 e0       	ldi	r24, 0x01	; 1
    6a54:	90 e0       	ldi	r25, 0x00	; 0
    6a56:	9c 8b       	std	Y+20, r25	; 0x14
    6a58:	8b 8b       	std	Y+19, r24	; 0x13
    6a5a:	3f c0       	rjmp	.+126    	; 0x6ada <LCD_vidInit4+0x3e6>
	else if (__tmp > 65535)
    6a5c:	6d 89       	ldd	r22, Y+21	; 0x15
    6a5e:	7e 89       	ldd	r23, Y+22	; 0x16
    6a60:	8f 89       	ldd	r24, Y+23	; 0x17
    6a62:	98 8d       	ldd	r25, Y+24	; 0x18
    6a64:	20 e0       	ldi	r18, 0x00	; 0
    6a66:	3f ef       	ldi	r19, 0xFF	; 255
    6a68:	4f e7       	ldi	r20, 0x7F	; 127
    6a6a:	57 e4       	ldi	r21, 0x47	; 71
    6a6c:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    6a70:	18 16       	cp	r1, r24
    6a72:	4c f5       	brge	.+82     	; 0x6ac6 <LCD_vidInit4+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a74:	69 8d       	ldd	r22, Y+25	; 0x19
    6a76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6a78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6a7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6a7c:	20 e0       	ldi	r18, 0x00	; 0
    6a7e:	30 e0       	ldi	r19, 0x00	; 0
    6a80:	40 e2       	ldi	r20, 0x20	; 32
    6a82:	51 e4       	ldi	r21, 0x41	; 65
    6a84:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    6a88:	dc 01       	movw	r26, r24
    6a8a:	cb 01       	movw	r24, r22
    6a8c:	bc 01       	movw	r22, r24
    6a8e:	cd 01       	movw	r24, r26
    6a90:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    6a94:	dc 01       	movw	r26, r24
    6a96:	cb 01       	movw	r24, r22
    6a98:	9c 8b       	std	Y+20, r25	; 0x14
    6a9a:	8b 8b       	std	Y+19, r24	; 0x13
    6a9c:	0f c0       	rjmp	.+30     	; 0x6abc <LCD_vidInit4+0x3c8>
    6a9e:	88 ec       	ldi	r24, 0xC8	; 200
    6aa0:	90 e0       	ldi	r25, 0x00	; 0
    6aa2:	9a 8b       	std	Y+18, r25	; 0x12
    6aa4:	89 8b       	std	Y+17, r24	; 0x11
    6aa6:	89 89       	ldd	r24, Y+17	; 0x11
    6aa8:	9a 89       	ldd	r25, Y+18	; 0x12
    6aaa:	01 97       	sbiw	r24, 0x01	; 1
    6aac:	f1 f7       	brne	.-4      	; 0x6aaa <LCD_vidInit4+0x3b6>
    6aae:	9a 8b       	std	Y+18, r25	; 0x12
    6ab0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ab2:	8b 89       	ldd	r24, Y+19	; 0x13
    6ab4:	9c 89       	ldd	r25, Y+20	; 0x14
    6ab6:	01 97       	sbiw	r24, 0x01	; 1
    6ab8:	9c 8b       	std	Y+20, r25	; 0x14
    6aba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6abc:	8b 89       	ldd	r24, Y+19	; 0x13
    6abe:	9c 89       	ldd	r25, Y+20	; 0x14
    6ac0:	00 97       	sbiw	r24, 0x00	; 0
    6ac2:	69 f7       	brne	.-38     	; 0x6a9e <LCD_vidInit4+0x3aa>
    6ac4:	14 c0       	rjmp	.+40     	; 0x6aee <LCD_vidInit4+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ac6:	6d 89       	ldd	r22, Y+21	; 0x15
    6ac8:	7e 89       	ldd	r23, Y+22	; 0x16
    6aca:	8f 89       	ldd	r24, Y+23	; 0x17
    6acc:	98 8d       	ldd	r25, Y+24	; 0x18
    6ace:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    6ad2:	dc 01       	movw	r26, r24
    6ad4:	cb 01       	movw	r24, r22
    6ad6:	9c 8b       	std	Y+20, r25	; 0x14
    6ad8:	8b 8b       	std	Y+19, r24	; 0x13
    6ada:	8b 89       	ldd	r24, Y+19	; 0x13
    6adc:	9c 89       	ldd	r25, Y+20	; 0x14
    6ade:	98 8b       	std	Y+16, r25	; 0x10
    6ae0:	8f 87       	std	Y+15, r24	; 0x0f
    6ae2:	8f 85       	ldd	r24, Y+15	; 0x0f
    6ae4:	98 89       	ldd	r25, Y+16	; 0x10
    6ae6:	01 97       	sbiw	r24, 0x01	; 1
    6ae8:	f1 f7       	brne	.-4      	; 0x6ae6 <LCD_vidInit4+0x3f2>
    6aea:	98 8b       	std	Y+16, r25	; 0x10
    6aec:	8f 87       	std	Y+15, r24	; 0x0f

	  //wait for a time
	  _delay_ms(30);

	  //entry mode set
	 LCD_vidSendCommand(0b00000000);
    6aee:	80 e0       	ldi	r24, 0x00	; 0
    6af0:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
	  LCD_vidSendCommand(0b01100000);
    6af4:	80 e6       	ldi	r24, 0x60	; 96
    6af6:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
    6afa:	80 e0       	ldi	r24, 0x00	; 0
    6afc:	90 e0       	ldi	r25, 0x00	; 0
    6afe:	a0 ef       	ldi	r26, 0xF0	; 240
    6b00:	b1 e4       	ldi	r27, 0x41	; 65
    6b02:	8b 87       	std	Y+11, r24	; 0x0b
    6b04:	9c 87       	std	Y+12, r25	; 0x0c
    6b06:	ad 87       	std	Y+13, r26	; 0x0d
    6b08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b12:	20 e0       	ldi	r18, 0x00	; 0
    6b14:	30 e0       	ldi	r19, 0x00	; 0
    6b16:	4a ef       	ldi	r20, 0xFA	; 250
    6b18:	54 e4       	ldi	r21, 0x44	; 68
    6b1a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    6b1e:	dc 01       	movw	r26, r24
    6b20:	cb 01       	movw	r24, r22
    6b22:	8f 83       	std	Y+7, r24	; 0x07
    6b24:	98 87       	std	Y+8, r25	; 0x08
    6b26:	a9 87       	std	Y+9, r26	; 0x09
    6b28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    6b2c:	78 85       	ldd	r23, Y+8	; 0x08
    6b2e:	89 85       	ldd	r24, Y+9	; 0x09
    6b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b32:	20 e0       	ldi	r18, 0x00	; 0
    6b34:	30 e0       	ldi	r19, 0x00	; 0
    6b36:	40 e8       	ldi	r20, 0x80	; 128
    6b38:	5f e3       	ldi	r21, 0x3F	; 63
    6b3a:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    6b3e:	88 23       	and	r24, r24
    6b40:	2c f4       	brge	.+10     	; 0x6b4c <LCD_vidInit4+0x458>
		__ticks = 1;
    6b42:	81 e0       	ldi	r24, 0x01	; 1
    6b44:	90 e0       	ldi	r25, 0x00	; 0
    6b46:	9e 83       	std	Y+6, r25	; 0x06
    6b48:	8d 83       	std	Y+5, r24	; 0x05
    6b4a:	3f c0       	rjmp	.+126    	; 0x6bca <LCD_vidInit4+0x4d6>
	else if (__tmp > 65535)
    6b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    6b4e:	78 85       	ldd	r23, Y+8	; 0x08
    6b50:	89 85       	ldd	r24, Y+9	; 0x09
    6b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b54:	20 e0       	ldi	r18, 0x00	; 0
    6b56:	3f ef       	ldi	r19, 0xFF	; 255
    6b58:	4f e7       	ldi	r20, 0x7F	; 127
    6b5a:	57 e4       	ldi	r21, 0x47	; 71
    6b5c:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    6b60:	18 16       	cp	r1, r24
    6b62:	4c f5       	brge	.+82     	; 0x6bb6 <LCD_vidInit4+0x4c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b64:	6b 85       	ldd	r22, Y+11	; 0x0b
    6b66:	7c 85       	ldd	r23, Y+12	; 0x0c
    6b68:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b6c:	20 e0       	ldi	r18, 0x00	; 0
    6b6e:	30 e0       	ldi	r19, 0x00	; 0
    6b70:	40 e2       	ldi	r20, 0x20	; 32
    6b72:	51 e4       	ldi	r21, 0x41	; 65
    6b74:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    6b78:	dc 01       	movw	r26, r24
    6b7a:	cb 01       	movw	r24, r22
    6b7c:	bc 01       	movw	r22, r24
    6b7e:	cd 01       	movw	r24, r26
    6b80:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    6b84:	dc 01       	movw	r26, r24
    6b86:	cb 01       	movw	r24, r22
    6b88:	9e 83       	std	Y+6, r25	; 0x06
    6b8a:	8d 83       	std	Y+5, r24	; 0x05
    6b8c:	0f c0       	rjmp	.+30     	; 0x6bac <LCD_vidInit4+0x4b8>
    6b8e:	88 ec       	ldi	r24, 0xC8	; 200
    6b90:	90 e0       	ldi	r25, 0x00	; 0
    6b92:	9c 83       	std	Y+4, r25	; 0x04
    6b94:	8b 83       	std	Y+3, r24	; 0x03
    6b96:	8b 81       	ldd	r24, Y+3	; 0x03
    6b98:	9c 81       	ldd	r25, Y+4	; 0x04
    6b9a:	01 97       	sbiw	r24, 0x01	; 1
    6b9c:	f1 f7       	brne	.-4      	; 0x6b9a <LCD_vidInit4+0x4a6>
    6b9e:	9c 83       	std	Y+4, r25	; 0x04
    6ba0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    6ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    6ba6:	01 97       	sbiw	r24, 0x01	; 1
    6ba8:	9e 83       	std	Y+6, r25	; 0x06
    6baa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6bac:	8d 81       	ldd	r24, Y+5	; 0x05
    6bae:	9e 81       	ldd	r25, Y+6	; 0x06
    6bb0:	00 97       	sbiw	r24, 0x00	; 0
    6bb2:	69 f7       	brne	.-38     	; 0x6b8e <LCD_vidInit4+0x49a>
    6bb4:	14 c0       	rjmp	.+40     	; 0x6bde <LCD_vidInit4+0x4ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    6bb8:	78 85       	ldd	r23, Y+8	; 0x08
    6bba:	89 85       	ldd	r24, Y+9	; 0x09
    6bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bbe:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    6bc2:	dc 01       	movw	r26, r24
    6bc4:	cb 01       	movw	r24, r22
    6bc6:	9e 83       	std	Y+6, r25	; 0x06
    6bc8:	8d 83       	std	Y+5, r24	; 0x05
    6bca:	8d 81       	ldd	r24, Y+5	; 0x05
    6bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    6bce:	9a 83       	std	Y+2, r25	; 0x02
    6bd0:	89 83       	std	Y+1, r24	; 0x01
    6bd2:	89 81       	ldd	r24, Y+1	; 0x01
    6bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    6bd6:	01 97       	sbiw	r24, 0x01	; 1
    6bd8:	f1 f7       	brne	.-4      	; 0x6bd6 <LCD_vidInit4+0x4e2>
    6bda:	9a 83       	std	Y+2, r25	; 0x02
    6bdc:	89 83       	std	Y+1, r24	; 0x01

	  //wait for a time
	  _delay_ms(30);
}
    6bde:	ca 5b       	subi	r28, 0xBA	; 186
    6be0:	df 4f       	sbci	r29, 0xFF	; 255
    6be2:	0f b6       	in	r0, 0x3f	; 63
    6be4:	f8 94       	cli
    6be6:	de bf       	out	0x3e, r29	; 62
    6be8:	0f be       	out	0x3f, r0	; 63
    6bea:	cd bf       	out	0x3d, r28	; 61
    6bec:	cf 91       	pop	r28
    6bee:	df 91       	pop	r29
    6bf0:	1f 91       	pop	r17
    6bf2:	0f 91       	pop	r16
    6bf4:	08 95       	ret

00006bf6 <LCD_vidWriteCharacter4>:

//....................................................................

void LCD_vidWriteCharacter4(uint8 u8DataCpy)
{
    6bf6:	df 93       	push	r29
    6bf8:	cf 93       	push	r28
    6bfa:	0f 92       	push	r0
    6bfc:	cd b7       	in	r28, 0x3d	; 61
    6bfe:	de b7       	in	r29, 0x3e	; 62
    6c00:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidWriteCharacter((GET_NippleH(u8DataCpy))<<4);
    6c02:	89 81       	ldd	r24, Y+1	; 0x01
    6c04:	80 7f       	andi	r24, 0xF0	; 240
    6c06:	0e 94 4c 32 	call	0x6498	; 0x6498 <LCD_vidWriteCharacter>
	LCD_vidWriteCharacter((GET_NippleL(u8DataCpy))<<4);
    6c0a:	89 81       	ldd	r24, Y+1	; 0x01
    6c0c:	88 2f       	mov	r24, r24
    6c0e:	90 e0       	ldi	r25, 0x00	; 0
    6c10:	82 95       	swap	r24
    6c12:	92 95       	swap	r25
    6c14:	90 7f       	andi	r25, 0xF0	; 240
    6c16:	98 27       	eor	r25, r24
    6c18:	80 7f       	andi	r24, 0xF0	; 240
    6c1a:	98 27       	eor	r25, r24
    6c1c:	0e 94 4c 32 	call	0x6498	; 0x6498 <LCD_vidWriteCharacter>
}
    6c20:	0f 90       	pop	r0
    6c22:	cf 91       	pop	r28
    6c24:	df 91       	pop	r29
    6c26:	08 95       	ret

00006c28 <LCD_vidWriteString>:


void LCD_vidWriteString(uint8 *pu8StringCpy)
{
    6c28:	df 93       	push	r29
    6c2a:	cf 93       	push	r28
    6c2c:	cd b7       	in	r28, 0x3d	; 61
    6c2e:	de b7       	in	r29, 0x3e	; 62
    6c30:	61 97       	sbiw	r28, 0x11	; 17
    6c32:	0f b6       	in	r0, 0x3f	; 63
    6c34:	f8 94       	cli
    6c36:	de bf       	out	0x3e, r29	; 62
    6c38:	0f be       	out	0x3f, r0	; 63
    6c3a:	cd bf       	out	0x3d, r28	; 61
    6c3c:	99 8b       	std	Y+17, r25	; 0x11
    6c3e:	88 8b       	std	Y+16, r24	; 0x10
	uint8 u8_index=0;
    6c40:	1f 86       	std	Y+15, r1	; 0x0f
    6c42:	80 c0       	rjmp	.+256    	; 0x6d44 <LCD_vidWriteString+0x11c>

	while(pu8StringCpy[u8_index]!='\0')

	{
		LCD_vidWriteCharacter(pu8StringCpy[u8_index]);
    6c44:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c46:	28 2f       	mov	r18, r24
    6c48:	30 e0       	ldi	r19, 0x00	; 0
    6c4a:	88 89       	ldd	r24, Y+16	; 0x10
    6c4c:	99 89       	ldd	r25, Y+17	; 0x11
    6c4e:	fc 01       	movw	r30, r24
    6c50:	e2 0f       	add	r30, r18
    6c52:	f3 1f       	adc	r31, r19
    6c54:	80 81       	ld	r24, Z
    6c56:	0e 94 4c 32 	call	0x6498	; 0x6498 <LCD_vidWriteCharacter>
		u8_index++;
    6c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c5c:	8f 5f       	subi	r24, 0xFF	; 255
    6c5e:	8f 87       	std	Y+15, r24	; 0x0f
    6c60:	80 e0       	ldi	r24, 0x00	; 0
    6c62:	90 e0       	ldi	r25, 0x00	; 0
    6c64:	a0 e0       	ldi	r26, 0x00	; 0
    6c66:	b0 e4       	ldi	r27, 0x40	; 64
    6c68:	8b 87       	std	Y+11, r24	; 0x0b
    6c6a:	9c 87       	std	Y+12, r25	; 0x0c
    6c6c:	ad 87       	std	Y+13, r26	; 0x0d
    6c6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6c70:	6b 85       	ldd	r22, Y+11	; 0x0b
    6c72:	7c 85       	ldd	r23, Y+12	; 0x0c
    6c74:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c76:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c78:	20 e0       	ldi	r18, 0x00	; 0
    6c7a:	30 e0       	ldi	r19, 0x00	; 0
    6c7c:	4a ef       	ldi	r20, 0xFA	; 250
    6c7e:	54 e4       	ldi	r21, 0x44	; 68
    6c80:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    6c84:	dc 01       	movw	r26, r24
    6c86:	cb 01       	movw	r24, r22
    6c88:	8f 83       	std	Y+7, r24	; 0x07
    6c8a:	98 87       	std	Y+8, r25	; 0x08
    6c8c:	a9 87       	std	Y+9, r26	; 0x09
    6c8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6c90:	6f 81       	ldd	r22, Y+7	; 0x07
    6c92:	78 85       	ldd	r23, Y+8	; 0x08
    6c94:	89 85       	ldd	r24, Y+9	; 0x09
    6c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c98:	20 e0       	ldi	r18, 0x00	; 0
    6c9a:	30 e0       	ldi	r19, 0x00	; 0
    6c9c:	40 e8       	ldi	r20, 0x80	; 128
    6c9e:	5f e3       	ldi	r21, 0x3F	; 63
    6ca0:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    6ca4:	88 23       	and	r24, r24
    6ca6:	2c f4       	brge	.+10     	; 0x6cb2 <LCD_vidWriteString+0x8a>
		__ticks = 1;
    6ca8:	81 e0       	ldi	r24, 0x01	; 1
    6caa:	90 e0       	ldi	r25, 0x00	; 0
    6cac:	9e 83       	std	Y+6, r25	; 0x06
    6cae:	8d 83       	std	Y+5, r24	; 0x05
    6cb0:	3f c0       	rjmp	.+126    	; 0x6d30 <LCD_vidWriteString+0x108>
	else if (__tmp > 65535)
    6cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    6cb4:	78 85       	ldd	r23, Y+8	; 0x08
    6cb6:	89 85       	ldd	r24, Y+9	; 0x09
    6cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cba:	20 e0       	ldi	r18, 0x00	; 0
    6cbc:	3f ef       	ldi	r19, 0xFF	; 255
    6cbe:	4f e7       	ldi	r20, 0x7F	; 127
    6cc0:	57 e4       	ldi	r21, 0x47	; 71
    6cc2:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    6cc6:	18 16       	cp	r1, r24
    6cc8:	4c f5       	brge	.+82     	; 0x6d1c <LCD_vidWriteString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6cca:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
    6cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    6cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    6cd2:	20 e0       	ldi	r18, 0x00	; 0
    6cd4:	30 e0       	ldi	r19, 0x00	; 0
    6cd6:	40 e2       	ldi	r20, 0x20	; 32
    6cd8:	51 e4       	ldi	r21, 0x41	; 65
    6cda:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    6cde:	dc 01       	movw	r26, r24
    6ce0:	cb 01       	movw	r24, r22
    6ce2:	bc 01       	movw	r22, r24
    6ce4:	cd 01       	movw	r24, r26
    6ce6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    6cea:	dc 01       	movw	r26, r24
    6cec:	cb 01       	movw	r24, r22
    6cee:	9e 83       	std	Y+6, r25	; 0x06
    6cf0:	8d 83       	std	Y+5, r24	; 0x05
    6cf2:	0f c0       	rjmp	.+30     	; 0x6d12 <LCD_vidWriteString+0xea>
    6cf4:	88 ec       	ldi	r24, 0xC8	; 200
    6cf6:	90 e0       	ldi	r25, 0x00	; 0
    6cf8:	9c 83       	std	Y+4, r25	; 0x04
    6cfa:	8b 83       	std	Y+3, r24	; 0x03
    6cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    6cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    6d00:	01 97       	sbiw	r24, 0x01	; 1
    6d02:	f1 f7       	brne	.-4      	; 0x6d00 <LCD_vidWriteString+0xd8>
    6d04:	9c 83       	std	Y+4, r25	; 0x04
    6d06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d08:	8d 81       	ldd	r24, Y+5	; 0x05
    6d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    6d0c:	01 97       	sbiw	r24, 0x01	; 1
    6d0e:	9e 83       	std	Y+6, r25	; 0x06
    6d10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d12:	8d 81       	ldd	r24, Y+5	; 0x05
    6d14:	9e 81       	ldd	r25, Y+6	; 0x06
    6d16:	00 97       	sbiw	r24, 0x00	; 0
    6d18:	69 f7       	brne	.-38     	; 0x6cf4 <LCD_vidWriteString+0xcc>
    6d1a:	14 c0       	rjmp	.+40     	; 0x6d44 <LCD_vidWriteString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    6d1e:	78 85       	ldd	r23, Y+8	; 0x08
    6d20:	89 85       	ldd	r24, Y+9	; 0x09
    6d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d24:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    6d28:	dc 01       	movw	r26, r24
    6d2a:	cb 01       	movw	r24, r22
    6d2c:	9e 83       	std	Y+6, r25	; 0x06
    6d2e:	8d 83       	std	Y+5, r24	; 0x05
    6d30:	8d 81       	ldd	r24, Y+5	; 0x05
    6d32:	9e 81       	ldd	r25, Y+6	; 0x06
    6d34:	9a 83       	std	Y+2, r25	; 0x02
    6d36:	89 83       	std	Y+1, r24	; 0x01
    6d38:	89 81       	ldd	r24, Y+1	; 0x01
    6d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    6d3c:	01 97       	sbiw	r24, 0x01	; 1
    6d3e:	f1 f7       	brne	.-4      	; 0x6d3c <LCD_vidWriteString+0x114>
    6d40:	9a 83       	std	Y+2, r25	; 0x02
    6d42:	89 83       	std	Y+1, r24	; 0x01

void LCD_vidWriteString(uint8 *pu8StringCpy)
{
	uint8 u8_index=0;

	while(pu8StringCpy[u8_index]!='\0')
    6d44:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d46:	28 2f       	mov	r18, r24
    6d48:	30 e0       	ldi	r19, 0x00	; 0
    6d4a:	88 89       	ldd	r24, Y+16	; 0x10
    6d4c:	99 89       	ldd	r25, Y+17	; 0x11
    6d4e:	fc 01       	movw	r30, r24
    6d50:	e2 0f       	add	r30, r18
    6d52:	f3 1f       	adc	r31, r19
    6d54:	80 81       	ld	r24, Z
    6d56:	88 23       	and	r24, r24
    6d58:	09 f0       	breq	.+2      	; 0x6d5c <LCD_vidWriteString+0x134>
    6d5a:	74 cf       	rjmp	.-280    	; 0x6c44 <LCD_vidWriteString+0x1c>
	{
		LCD_vidWriteCharacter(pu8StringCpy[u8_index]);
		u8_index++;
		_delay_ms(2);
	}
}
    6d5c:	61 96       	adiw	r28, 0x11	; 17
    6d5e:	0f b6       	in	r0, 0x3f	; 63
    6d60:	f8 94       	cli
    6d62:	de bf       	out	0x3e, r29	; 62
    6d64:	0f be       	out	0x3f, r0	; 63
    6d66:	cd bf       	out	0x3d, r28	; 61
    6d68:	cf 91       	pop	r28
    6d6a:	df 91       	pop	r29
    6d6c:	08 95       	ret

00006d6e <LCD_vidWriteString4>:
//...................................................................................
void LCD_vidWriteString4(uint8 *pu8StringCpy)
{
    6d6e:	df 93       	push	r29
    6d70:	cf 93       	push	r28
    6d72:	cd b7       	in	r28, 0x3d	; 61
    6d74:	de b7       	in	r29, 0x3e	; 62
    6d76:	61 97       	sbiw	r28, 0x11	; 17
    6d78:	0f b6       	in	r0, 0x3f	; 63
    6d7a:	f8 94       	cli
    6d7c:	de bf       	out	0x3e, r29	; 62
    6d7e:	0f be       	out	0x3f, r0	; 63
    6d80:	cd bf       	out	0x3d, r28	; 61
    6d82:	99 8b       	std	Y+17, r25	; 0x11
    6d84:	88 8b       	std	Y+16, r24	; 0x10
	uint8 u8_index=0;
    6d86:	1f 86       	std	Y+15, r1	; 0x0f
    6d88:	80 c0       	rjmp	.+256    	; 0x6e8a <LCD_vidWriteString4+0x11c>

		while(pu8StringCpy[u8_index]!='\0')

		{
			LCD_vidWriteCharacter4(pu8StringCpy[u8_index]);
    6d8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d8c:	28 2f       	mov	r18, r24
    6d8e:	30 e0       	ldi	r19, 0x00	; 0
    6d90:	88 89       	ldd	r24, Y+16	; 0x10
    6d92:	99 89       	ldd	r25, Y+17	; 0x11
    6d94:	fc 01       	movw	r30, r24
    6d96:	e2 0f       	add	r30, r18
    6d98:	f3 1f       	adc	r31, r19
    6d9a:	80 81       	ld	r24, Z
    6d9c:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <LCD_vidWriteCharacter4>
			u8_index++;
    6da0:	8f 85       	ldd	r24, Y+15	; 0x0f
    6da2:	8f 5f       	subi	r24, 0xFF	; 255
    6da4:	8f 87       	std	Y+15, r24	; 0x0f
    6da6:	80 e0       	ldi	r24, 0x00	; 0
    6da8:	90 e0       	ldi	r25, 0x00	; 0
    6daa:	a0 e8       	ldi	r26, 0x80	; 128
    6dac:	bf e3       	ldi	r27, 0x3F	; 63
    6dae:	8b 87       	std	Y+11, r24	; 0x0b
    6db0:	9c 87       	std	Y+12, r25	; 0x0c
    6db2:	ad 87       	std	Y+13, r26	; 0x0d
    6db4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6db6:	6b 85       	ldd	r22, Y+11	; 0x0b
    6db8:	7c 85       	ldd	r23, Y+12	; 0x0c
    6dba:	8d 85       	ldd	r24, Y+13	; 0x0d
    6dbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    6dbe:	20 e0       	ldi	r18, 0x00	; 0
    6dc0:	30 e0       	ldi	r19, 0x00	; 0
    6dc2:	4a ef       	ldi	r20, 0xFA	; 250
    6dc4:	54 e4       	ldi	r21, 0x44	; 68
    6dc6:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    6dca:	dc 01       	movw	r26, r24
    6dcc:	cb 01       	movw	r24, r22
    6dce:	8f 83       	std	Y+7, r24	; 0x07
    6dd0:	98 87       	std	Y+8, r25	; 0x08
    6dd2:	a9 87       	std	Y+9, r26	; 0x09
    6dd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6dd6:	6f 81       	ldd	r22, Y+7	; 0x07
    6dd8:	78 85       	ldd	r23, Y+8	; 0x08
    6dda:	89 85       	ldd	r24, Y+9	; 0x09
    6ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6dde:	20 e0       	ldi	r18, 0x00	; 0
    6de0:	30 e0       	ldi	r19, 0x00	; 0
    6de2:	40 e8       	ldi	r20, 0x80	; 128
    6de4:	5f e3       	ldi	r21, 0x3F	; 63
    6de6:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    6dea:	88 23       	and	r24, r24
    6dec:	2c f4       	brge	.+10     	; 0x6df8 <LCD_vidWriteString4+0x8a>
		__ticks = 1;
    6dee:	81 e0       	ldi	r24, 0x01	; 1
    6df0:	90 e0       	ldi	r25, 0x00	; 0
    6df2:	9e 83       	std	Y+6, r25	; 0x06
    6df4:	8d 83       	std	Y+5, r24	; 0x05
    6df6:	3f c0       	rjmp	.+126    	; 0x6e76 <LCD_vidWriteString4+0x108>
	else if (__tmp > 65535)
    6df8:	6f 81       	ldd	r22, Y+7	; 0x07
    6dfa:	78 85       	ldd	r23, Y+8	; 0x08
    6dfc:	89 85       	ldd	r24, Y+9	; 0x09
    6dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e00:	20 e0       	ldi	r18, 0x00	; 0
    6e02:	3f ef       	ldi	r19, 0xFF	; 255
    6e04:	4f e7       	ldi	r20, 0x7F	; 127
    6e06:	57 e4       	ldi	r21, 0x47	; 71
    6e08:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    6e0c:	18 16       	cp	r1, r24
    6e0e:	4c f5       	brge	.+82     	; 0x6e62 <LCD_vidWriteString4+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e10:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e12:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e14:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e16:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e18:	20 e0       	ldi	r18, 0x00	; 0
    6e1a:	30 e0       	ldi	r19, 0x00	; 0
    6e1c:	40 e2       	ldi	r20, 0x20	; 32
    6e1e:	51 e4       	ldi	r21, 0x41	; 65
    6e20:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    6e24:	dc 01       	movw	r26, r24
    6e26:	cb 01       	movw	r24, r22
    6e28:	bc 01       	movw	r22, r24
    6e2a:	cd 01       	movw	r24, r26
    6e2c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    6e30:	dc 01       	movw	r26, r24
    6e32:	cb 01       	movw	r24, r22
    6e34:	9e 83       	std	Y+6, r25	; 0x06
    6e36:	8d 83       	std	Y+5, r24	; 0x05
    6e38:	0f c0       	rjmp	.+30     	; 0x6e58 <LCD_vidWriteString4+0xea>
    6e3a:	88 ec       	ldi	r24, 0xC8	; 200
    6e3c:	90 e0       	ldi	r25, 0x00	; 0
    6e3e:	9c 83       	std	Y+4, r25	; 0x04
    6e40:	8b 83       	std	Y+3, r24	; 0x03
    6e42:	8b 81       	ldd	r24, Y+3	; 0x03
    6e44:	9c 81       	ldd	r25, Y+4	; 0x04
    6e46:	01 97       	sbiw	r24, 0x01	; 1
    6e48:	f1 f7       	brne	.-4      	; 0x6e46 <LCD_vidWriteString4+0xd8>
    6e4a:	9c 83       	std	Y+4, r25	; 0x04
    6e4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    6e50:	9e 81       	ldd	r25, Y+6	; 0x06
    6e52:	01 97       	sbiw	r24, 0x01	; 1
    6e54:	9e 83       	std	Y+6, r25	; 0x06
    6e56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6e58:	8d 81       	ldd	r24, Y+5	; 0x05
    6e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    6e5c:	00 97       	sbiw	r24, 0x00	; 0
    6e5e:	69 f7       	brne	.-38     	; 0x6e3a <LCD_vidWriteString4+0xcc>
    6e60:	14 c0       	rjmp	.+40     	; 0x6e8a <LCD_vidWriteString4+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e62:	6f 81       	ldd	r22, Y+7	; 0x07
    6e64:	78 85       	ldd	r23, Y+8	; 0x08
    6e66:	89 85       	ldd	r24, Y+9	; 0x09
    6e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e6a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    6e6e:	dc 01       	movw	r26, r24
    6e70:	cb 01       	movw	r24, r22
    6e72:	9e 83       	std	Y+6, r25	; 0x06
    6e74:	8d 83       	std	Y+5, r24	; 0x05
    6e76:	8d 81       	ldd	r24, Y+5	; 0x05
    6e78:	9e 81       	ldd	r25, Y+6	; 0x06
    6e7a:	9a 83       	std	Y+2, r25	; 0x02
    6e7c:	89 83       	std	Y+1, r24	; 0x01
    6e7e:	89 81       	ldd	r24, Y+1	; 0x01
    6e80:	9a 81       	ldd	r25, Y+2	; 0x02
    6e82:	01 97       	sbiw	r24, 0x01	; 1
    6e84:	f1 f7       	brne	.-4      	; 0x6e82 <LCD_vidWriteString4+0x114>
    6e86:	9a 83       	std	Y+2, r25	; 0x02
    6e88:	89 83       	std	Y+1, r24	; 0x01
//...................................................................................
void LCD_vidWriteString4(uint8 *pu8StringCpy)
{
	uint8 u8_index=0;

		while(pu8StringCpy[u8_index]!='\0')
    6e8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6e8c:	28 2f       	mov	r18, r24
    6e8e:	30 e0       	ldi	r19, 0x00	; 0
    6e90:	88 89       	ldd	r24, Y+16	; 0x10
    6e92:	99 89       	ldd	r25, Y+17	; 0x11
    6e94:	fc 01       	movw	r30, r24
    6e96:	e2 0f       	add	r30, r18
    6e98:	f3 1f       	adc	r31, r19
    6e9a:	80 81       	ld	r24, Z
    6e9c:	88 23       	and	r24, r24
    6e9e:	09 f0       	breq	.+2      	; 0x6ea2 <LCD_vidWriteString4+0x134>
    6ea0:	74 cf       	rjmp	.-280    	; 0x6d8a <LCD_vidWriteString4+0x1c>
		{
			LCD_vidWriteCharacter4(pu8StringCpy[u8_index]);
			u8_index++;
			_delay_ms(1);
		}
}
    6ea2:	61 96       	adiw	r28, 0x11	; 17
    6ea4:	0f b6       	in	r0, 0x3f	; 63
    6ea6:	f8 94       	cli
    6ea8:	de bf       	out	0x3e, r29	; 62
    6eaa:	0f be       	out	0x3f, r0	; 63
    6eac:	cd bf       	out	0x3d, r28	; 61
    6eae:	cf 91       	pop	r28
    6eb0:	df 91       	pop	r29
    6eb2:	08 95       	ret

00006eb4 <LCD_vidWriteUnSignedInteger>:
//..........................................................................................
void LCD_vidWriteUnSignedInteger(uint64 number)
{
    6eb4:	8f 92       	push	r8
    6eb6:	9f 92       	push	r9
    6eb8:	af 92       	push	r10
    6eba:	bf 92       	push	r11
    6ebc:	cf 92       	push	r12
    6ebe:	df 92       	push	r13
    6ec0:	ef 92       	push	r14
    6ec2:	ff 92       	push	r15
    6ec4:	0f 93       	push	r16
    6ec6:	1f 93       	push	r17
    6ec8:	df 93       	push	r29
    6eca:	cf 93       	push	r28
    6ecc:	cd b7       	in	r28, 0x3d	; 61
    6ece:	de b7       	in	r29, 0x3e	; 62
    6ed0:	6d 97       	sbiw	r28, 0x1d	; 29
    6ed2:	0f b6       	in	r0, 0x3f	; 63
    6ed4:	f8 94       	cli
    6ed6:	de bf       	out	0x3e, r29	; 62
    6ed8:	0f be       	out	0x3f, r0	; 63
    6eda:	cd bf       	out	0x3d, r28	; 61
    6edc:	2e 8b       	std	Y+22, r18	; 0x16
    6ede:	3f 8b       	std	Y+23, r19	; 0x17
    6ee0:	48 8f       	std	Y+24, r20	; 0x18
    6ee2:	59 8f       	std	Y+25, r21	; 0x19
    6ee4:	6a 8f       	std	Y+26, r22	; 0x1a
    6ee6:	7b 8f       	std	Y+27, r23	; 0x1b
    6ee8:	8c 8f       	std	Y+28, r24	; 0x1c
    6eea:	9d 8f       	std	Y+29, r25	; 0x1d
	uint8 arr[20]={};
    6eec:	84 e1       	ldi	r24, 0x14	; 20
    6eee:	fe 01       	movw	r30, r28
    6ef0:	32 96       	adiw	r30, 0x02	; 2
    6ef2:	df 01       	movw	r26, r30
    6ef4:	98 2f       	mov	r25, r24
    6ef6:	1d 92       	st	X+, r1
    6ef8:	9a 95       	dec	r25
    6efa:	e9 f7       	brne	.-6      	; 0x6ef6 <LCD_vidWriteUnSignedInteger+0x42>
    uint8 i=0;
    6efc:	19 82       	std	Y+1, r1	; 0x01

    if(number==0)
    6efe:	8e 89       	ldd	r24, Y+22	; 0x16
    6f00:	9f 89       	ldd	r25, Y+23	; 0x17
    6f02:	89 2b       	or	r24, r25
    6f04:	98 8d       	ldd	r25, Y+24	; 0x18
    6f06:	89 2b       	or	r24, r25
    6f08:	99 8d       	ldd	r25, Y+25	; 0x19
    6f0a:	89 2b       	or	r24, r25
    6f0c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6f0e:	89 2b       	or	r24, r25
    6f10:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6f12:	89 2b       	or	r24, r25
    6f14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6f16:	89 2b       	or	r24, r25
    6f18:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6f1a:	89 2b       	or	r24, r25
    6f1c:	88 23       	and	r24, r24
    6f1e:	09 f0       	breq	.+2      	; 0x6f22 <LCD_vidWriteUnSignedInteger+0x6e>
    6f20:	6b c0       	rjmp	.+214    	; 0x6ff8 <LCD_vidWriteUnSignedInteger+0x144>
    {
    	LCD_vidWriteCharacter(number+48);
    6f22:	8e 89       	ldd	r24, Y+22	; 0x16
    6f24:	80 5d       	subi	r24, 0xD0	; 208
    6f26:	0e 94 4c 32 	call	0x6498	; 0x6498 <LCD_vidWriteCharacter>
    6f2a:	8e c0       	rjmp	.+284    	; 0x7048 <LCD_vidWriteUnSignedInteger+0x194>
    }
    else{
   while((i<20)&&(number!=0))
   {   arr[i++]=number%10;
    6f2c:	89 81       	ldd	r24, Y+1	; 0x01
    6f2e:	88 2e       	mov	r8, r24
    6f30:	99 24       	eor	r9, r9
    6f32:	ae 88       	ldd	r10, Y+22	; 0x16
    6f34:	bf 88       	ldd	r11, Y+23	; 0x17
    6f36:	c8 8c       	ldd	r12, Y+24	; 0x18
    6f38:	d9 8c       	ldd	r13, Y+25	; 0x19
    6f3a:	ea 8c       	ldd	r14, Y+26	; 0x1a
    6f3c:	fb 8c       	ldd	r15, Y+27	; 0x1b
    6f3e:	0c 8d       	ldd	r16, Y+28	; 0x1c
    6f40:	1d 8d       	ldd	r17, Y+29	; 0x1d
    6f42:	2a 2d       	mov	r18, r10
    6f44:	3b 2d       	mov	r19, r11
    6f46:	4c 2d       	mov	r20, r12
    6f48:	5d 2d       	mov	r21, r13
    6f4a:	6e 2d       	mov	r22, r14
    6f4c:	7f 2d       	mov	r23, r15
    6f4e:	80 2f       	mov	r24, r16
    6f50:	91 2f       	mov	r25, r17
    6f52:	0f 2e       	mov	r0, r31
    6f54:	fa e0       	ldi	r31, 0x0A	; 10
    6f56:	af 2e       	mov	r10, r31
    6f58:	f0 2d       	mov	r31, r0
    6f5a:	bb 24       	eor	r11, r11
    6f5c:	cc 24       	eor	r12, r12
    6f5e:	dd 24       	eor	r13, r13
    6f60:	ee 24       	eor	r14, r14
    6f62:	ff 24       	eor	r15, r15
    6f64:	00 e0       	ldi	r16, 0x00	; 0
    6f66:	10 e0       	ldi	r17, 0x00	; 0
    6f68:	0e 94 87 07 	call	0xf0e	; 0xf0e <__umoddi3>
    6f6c:	a2 2e       	mov	r10, r18
    6f6e:	b3 2e       	mov	r11, r19
    6f70:	c4 2e       	mov	r12, r20
    6f72:	d5 2e       	mov	r13, r21
    6f74:	e6 2e       	mov	r14, r22
    6f76:	f7 2e       	mov	r15, r23
    6f78:	08 2f       	mov	r16, r24
    6f7a:	19 2f       	mov	r17, r25
    6f7c:	2a 2d       	mov	r18, r10
    6f7e:	3b 2d       	mov	r19, r11
    6f80:	4c 2d       	mov	r20, r12
    6f82:	5d 2d       	mov	r21, r13
    6f84:	6e 2d       	mov	r22, r14
    6f86:	7f 2d       	mov	r23, r15
    6f88:	80 2f       	mov	r24, r16
    6f8a:	91 2f       	mov	r25, r17
    6f8c:	ce 01       	movw	r24, r28
    6f8e:	02 96       	adiw	r24, 0x02	; 2
    6f90:	fc 01       	movw	r30, r24
    6f92:	e8 0d       	add	r30, r8
    6f94:	f9 1d       	adc	r31, r9
    6f96:	20 83       	st	Z, r18
    6f98:	89 81       	ldd	r24, Y+1	; 0x01
    6f9a:	8f 5f       	subi	r24, 0xFF	; 255
    6f9c:	89 83       	std	Y+1, r24	; 0x01

	       number/=10;
    6f9e:	ae 88       	ldd	r10, Y+22	; 0x16
    6fa0:	bf 88       	ldd	r11, Y+23	; 0x17
    6fa2:	c8 8c       	ldd	r12, Y+24	; 0x18
    6fa4:	d9 8c       	ldd	r13, Y+25	; 0x19
    6fa6:	ea 8c       	ldd	r14, Y+26	; 0x1a
    6fa8:	fb 8c       	ldd	r15, Y+27	; 0x1b
    6faa:	0c 8d       	ldd	r16, Y+28	; 0x1c
    6fac:	1d 8d       	ldd	r17, Y+29	; 0x1d
    6fae:	2a 2d       	mov	r18, r10
    6fb0:	3b 2d       	mov	r19, r11
    6fb2:	4c 2d       	mov	r20, r12
    6fb4:	5d 2d       	mov	r21, r13
    6fb6:	6e 2d       	mov	r22, r14
    6fb8:	7f 2d       	mov	r23, r15
    6fba:	80 2f       	mov	r24, r16
    6fbc:	91 2f       	mov	r25, r17
    6fbe:	0f 2e       	mov	r0, r31
    6fc0:	fa e0       	ldi	r31, 0x0A	; 10
    6fc2:	af 2e       	mov	r10, r31
    6fc4:	f0 2d       	mov	r31, r0
    6fc6:	bb 24       	eor	r11, r11
    6fc8:	cc 24       	eor	r12, r12
    6fca:	dd 24       	eor	r13, r13
    6fcc:	ee 24       	eor	r14, r14
    6fce:	ff 24       	eor	r15, r15
    6fd0:	00 e0       	ldi	r16, 0x00	; 0
    6fd2:	10 e0       	ldi	r17, 0x00	; 0
    6fd4:	0e 94 12 01 	call	0x224	; 0x224 <__udivdi3>
    6fd8:	a2 2e       	mov	r10, r18
    6fda:	b3 2e       	mov	r11, r19
    6fdc:	c4 2e       	mov	r12, r20
    6fde:	d5 2e       	mov	r13, r21
    6fe0:	e6 2e       	mov	r14, r22
    6fe2:	f7 2e       	mov	r15, r23
    6fe4:	08 2f       	mov	r16, r24
    6fe6:	19 2f       	mov	r17, r25
    6fe8:	ae 8a       	std	Y+22, r10	; 0x16
    6fea:	bf 8a       	std	Y+23, r11	; 0x17
    6fec:	c8 8e       	std	Y+24, r12	; 0x18
    6fee:	d9 8e       	std	Y+25, r13	; 0x19
    6ff0:	ea 8e       	std	Y+26, r14	; 0x1a
    6ff2:	fb 8e       	std	Y+27, r15	; 0x1b
    6ff4:	0c 8f       	std	Y+28, r16	; 0x1c
    6ff6:	1d 8f       	std	Y+29, r17	; 0x1d
    if(number==0)
    {
    	LCD_vidWriteCharacter(number+48);
    }
    else{
   while((i<20)&&(number!=0))
    6ff8:	89 81       	ldd	r24, Y+1	; 0x01
    6ffa:	84 31       	cpi	r24, 0x14	; 20
    6ffc:	10 f5       	brcc	.+68     	; 0x7042 <LCD_vidWriteUnSignedInteger+0x18e>
    6ffe:	8e 89       	ldd	r24, Y+22	; 0x16
    7000:	9f 89       	ldd	r25, Y+23	; 0x17
    7002:	89 2b       	or	r24, r25
    7004:	98 8d       	ldd	r25, Y+24	; 0x18
    7006:	89 2b       	or	r24, r25
    7008:	99 8d       	ldd	r25, Y+25	; 0x19
    700a:	89 2b       	or	r24, r25
    700c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    700e:	89 2b       	or	r24, r25
    7010:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7012:	89 2b       	or	r24, r25
    7014:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7016:	89 2b       	or	r24, r25
    7018:	9d 8d       	ldd	r25, Y+29	; 0x1d
    701a:	89 2b       	or	r24, r25
    701c:	88 23       	and	r24, r24
    701e:	09 f0       	breq	.+2      	; 0x7022 <LCD_vidWriteUnSignedInteger+0x16e>
    7020:	85 cf       	rjmp	.-246    	; 0x6f2c <LCD_vidWriteUnSignedInteger+0x78>
    7022:	0f c0       	rjmp	.+30     	; 0x7042 <LCD_vidWriteUnSignedInteger+0x18e>
	       number/=10;

   }

       while(i!=0){
    	LCD_vidWriteCharacter(arr[--i]+48);
    7024:	89 81       	ldd	r24, Y+1	; 0x01
    7026:	81 50       	subi	r24, 0x01	; 1
    7028:	89 83       	std	Y+1, r24	; 0x01
    702a:	89 81       	ldd	r24, Y+1	; 0x01
    702c:	28 2f       	mov	r18, r24
    702e:	30 e0       	ldi	r19, 0x00	; 0
    7030:	ce 01       	movw	r24, r28
    7032:	02 96       	adiw	r24, 0x02	; 2
    7034:	fc 01       	movw	r30, r24
    7036:	e2 0f       	add	r30, r18
    7038:	f3 1f       	adc	r31, r19
    703a:	80 81       	ld	r24, Z
    703c:	80 5d       	subi	r24, 0xD0	; 208
    703e:	0e 94 4c 32 	call	0x6498	; 0x6498 <LCD_vidWriteCharacter>

	       number/=10;

   }

       while(i!=0){
    7042:	89 81       	ldd	r24, Y+1	; 0x01
    7044:	88 23       	and	r24, r24
    7046:	71 f7       	brne	.-36     	; 0x7024 <LCD_vidWriteUnSignedInteger+0x170>
    	LCD_vidWriteCharacter(arr[--i]+48);

       }
    }
}
    7048:	6d 96       	adiw	r28, 0x1d	; 29
    704a:	0f b6       	in	r0, 0x3f	; 63
    704c:	f8 94       	cli
    704e:	de bf       	out	0x3e, r29	; 62
    7050:	0f be       	out	0x3f, r0	; 63
    7052:	cd bf       	out	0x3d, r28	; 61
    7054:	cf 91       	pop	r28
    7056:	df 91       	pop	r29
    7058:	1f 91       	pop	r17
    705a:	0f 91       	pop	r16
    705c:	ff 90       	pop	r15
    705e:	ef 90       	pop	r14
    7060:	df 90       	pop	r13
    7062:	cf 90       	pop	r12
    7064:	bf 90       	pop	r11
    7066:	af 90       	pop	r10
    7068:	9f 90       	pop	r9
    706a:	8f 90       	pop	r8
    706c:	08 95       	ret

0000706e <LCD_vidWriteUnSignedInteger4>:
//............................................................................................
void LCD_vidWriteUnSignedInteger4(uint64 number)
{
    706e:	8f 92       	push	r8
    7070:	9f 92       	push	r9
    7072:	af 92       	push	r10
    7074:	bf 92       	push	r11
    7076:	cf 92       	push	r12
    7078:	df 92       	push	r13
    707a:	ef 92       	push	r14
    707c:	ff 92       	push	r15
    707e:	0f 93       	push	r16
    7080:	1f 93       	push	r17
    7082:	df 93       	push	r29
    7084:	cf 93       	push	r28
    7086:	cd b7       	in	r28, 0x3d	; 61
    7088:	de b7       	in	r29, 0x3e	; 62
    708a:	6d 97       	sbiw	r28, 0x1d	; 29
    708c:	0f b6       	in	r0, 0x3f	; 63
    708e:	f8 94       	cli
    7090:	de bf       	out	0x3e, r29	; 62
    7092:	0f be       	out	0x3f, r0	; 63
    7094:	cd bf       	out	0x3d, r28	; 61
    7096:	2e 8b       	std	Y+22, r18	; 0x16
    7098:	3f 8b       	std	Y+23, r19	; 0x17
    709a:	48 8f       	std	Y+24, r20	; 0x18
    709c:	59 8f       	std	Y+25, r21	; 0x19
    709e:	6a 8f       	std	Y+26, r22	; 0x1a
    70a0:	7b 8f       	std	Y+27, r23	; 0x1b
    70a2:	8c 8f       	std	Y+28, r24	; 0x1c
    70a4:	9d 8f       	std	Y+29, r25	; 0x1d
	uint8 arr[20]={};
    70a6:	84 e1       	ldi	r24, 0x14	; 20
    70a8:	fe 01       	movw	r30, r28
    70aa:	32 96       	adiw	r30, 0x02	; 2
    70ac:	df 01       	movw	r26, r30
    70ae:	98 2f       	mov	r25, r24
    70b0:	1d 92       	st	X+, r1
    70b2:	9a 95       	dec	r25
    70b4:	e9 f7       	brne	.-6      	; 0x70b0 <LCD_vidWriteUnSignedInteger4+0x42>
    uint8 i=0;
    70b6:	19 82       	std	Y+1, r1	; 0x01

    if(number==0)
    70b8:	8e 89       	ldd	r24, Y+22	; 0x16
    70ba:	9f 89       	ldd	r25, Y+23	; 0x17
    70bc:	89 2b       	or	r24, r25
    70be:	98 8d       	ldd	r25, Y+24	; 0x18
    70c0:	89 2b       	or	r24, r25
    70c2:	99 8d       	ldd	r25, Y+25	; 0x19
    70c4:	89 2b       	or	r24, r25
    70c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    70c8:	89 2b       	or	r24, r25
    70ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    70cc:	89 2b       	or	r24, r25
    70ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    70d0:	89 2b       	or	r24, r25
    70d2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    70d4:	89 2b       	or	r24, r25
    70d6:	88 23       	and	r24, r24
    70d8:	09 f0       	breq	.+2      	; 0x70dc <LCD_vidWriteUnSignedInteger4+0x6e>
    70da:	6b c0       	rjmp	.+214    	; 0x71b2 <LCD_vidWriteUnSignedInteger4+0x144>
    {
    	LCD_vidWriteCharacter4(number+48);
    70dc:	8e 89       	ldd	r24, Y+22	; 0x16
    70de:	80 5d       	subi	r24, 0xD0	; 208
    70e0:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <LCD_vidWriteCharacter4>
    70e4:	8e c0       	rjmp	.+284    	; 0x7202 <LCD_vidWriteUnSignedInteger4+0x194>
    }
    else{
   while((i<20)&&(number!=0))
   {   arr[i++]=number%10;
    70e6:	89 81       	ldd	r24, Y+1	; 0x01
    70e8:	88 2e       	mov	r8, r24
    70ea:	99 24       	eor	r9, r9
    70ec:	ae 88       	ldd	r10, Y+22	; 0x16
    70ee:	bf 88       	ldd	r11, Y+23	; 0x17
    70f0:	c8 8c       	ldd	r12, Y+24	; 0x18
    70f2:	d9 8c       	ldd	r13, Y+25	; 0x19
    70f4:	ea 8c       	ldd	r14, Y+26	; 0x1a
    70f6:	fb 8c       	ldd	r15, Y+27	; 0x1b
    70f8:	0c 8d       	ldd	r16, Y+28	; 0x1c
    70fa:	1d 8d       	ldd	r17, Y+29	; 0x1d
    70fc:	2a 2d       	mov	r18, r10
    70fe:	3b 2d       	mov	r19, r11
    7100:	4c 2d       	mov	r20, r12
    7102:	5d 2d       	mov	r21, r13
    7104:	6e 2d       	mov	r22, r14
    7106:	7f 2d       	mov	r23, r15
    7108:	80 2f       	mov	r24, r16
    710a:	91 2f       	mov	r25, r17
    710c:	0f 2e       	mov	r0, r31
    710e:	fa e0       	ldi	r31, 0x0A	; 10
    7110:	af 2e       	mov	r10, r31
    7112:	f0 2d       	mov	r31, r0
    7114:	bb 24       	eor	r11, r11
    7116:	cc 24       	eor	r12, r12
    7118:	dd 24       	eor	r13, r13
    711a:	ee 24       	eor	r14, r14
    711c:	ff 24       	eor	r15, r15
    711e:	00 e0       	ldi	r16, 0x00	; 0
    7120:	10 e0       	ldi	r17, 0x00	; 0
    7122:	0e 94 87 07 	call	0xf0e	; 0xf0e <__umoddi3>
    7126:	a2 2e       	mov	r10, r18
    7128:	b3 2e       	mov	r11, r19
    712a:	c4 2e       	mov	r12, r20
    712c:	d5 2e       	mov	r13, r21
    712e:	e6 2e       	mov	r14, r22
    7130:	f7 2e       	mov	r15, r23
    7132:	08 2f       	mov	r16, r24
    7134:	19 2f       	mov	r17, r25
    7136:	2a 2d       	mov	r18, r10
    7138:	3b 2d       	mov	r19, r11
    713a:	4c 2d       	mov	r20, r12
    713c:	5d 2d       	mov	r21, r13
    713e:	6e 2d       	mov	r22, r14
    7140:	7f 2d       	mov	r23, r15
    7142:	80 2f       	mov	r24, r16
    7144:	91 2f       	mov	r25, r17
    7146:	ce 01       	movw	r24, r28
    7148:	02 96       	adiw	r24, 0x02	; 2
    714a:	fc 01       	movw	r30, r24
    714c:	e8 0d       	add	r30, r8
    714e:	f9 1d       	adc	r31, r9
    7150:	20 83       	st	Z, r18
    7152:	89 81       	ldd	r24, Y+1	; 0x01
    7154:	8f 5f       	subi	r24, 0xFF	; 255
    7156:	89 83       	std	Y+1, r24	; 0x01

	       number/=10;
    7158:	ae 88       	ldd	r10, Y+22	; 0x16
    715a:	bf 88       	ldd	r11, Y+23	; 0x17
    715c:	c8 8c       	ldd	r12, Y+24	; 0x18
    715e:	d9 8c       	ldd	r13, Y+25	; 0x19
    7160:	ea 8c       	ldd	r14, Y+26	; 0x1a
    7162:	fb 8c       	ldd	r15, Y+27	; 0x1b
    7164:	0c 8d       	ldd	r16, Y+28	; 0x1c
    7166:	1d 8d       	ldd	r17, Y+29	; 0x1d
    7168:	2a 2d       	mov	r18, r10
    716a:	3b 2d       	mov	r19, r11
    716c:	4c 2d       	mov	r20, r12
    716e:	5d 2d       	mov	r21, r13
    7170:	6e 2d       	mov	r22, r14
    7172:	7f 2d       	mov	r23, r15
    7174:	80 2f       	mov	r24, r16
    7176:	91 2f       	mov	r25, r17
    7178:	0f 2e       	mov	r0, r31
    717a:	fa e0       	ldi	r31, 0x0A	; 10
    717c:	af 2e       	mov	r10, r31
    717e:	f0 2d       	mov	r31, r0
    7180:	bb 24       	eor	r11, r11
    7182:	cc 24       	eor	r12, r12
    7184:	dd 24       	eor	r13, r13
    7186:	ee 24       	eor	r14, r14
    7188:	ff 24       	eor	r15, r15
    718a:	00 e0       	ldi	r16, 0x00	; 0
    718c:	10 e0       	ldi	r17, 0x00	; 0
    718e:	0e 94 12 01 	call	0x224	; 0x224 <__udivdi3>
    7192:	a2 2e       	mov	r10, r18
    7194:	b3 2e       	mov	r11, r19
    7196:	c4 2e       	mov	r12, r20
    7198:	d5 2e       	mov	r13, r21
    719a:	e6 2e       	mov	r14, r22
    719c:	f7 2e       	mov	r15, r23
    719e:	08 2f       	mov	r16, r24
    71a0:	19 2f       	mov	r17, r25
    71a2:	ae 8a       	std	Y+22, r10	; 0x16
    71a4:	bf 8a       	std	Y+23, r11	; 0x17
    71a6:	c8 8e       	std	Y+24, r12	; 0x18
    71a8:	d9 8e       	std	Y+25, r13	; 0x19
    71aa:	ea 8e       	std	Y+26, r14	; 0x1a
    71ac:	fb 8e       	std	Y+27, r15	; 0x1b
    71ae:	0c 8f       	std	Y+28, r16	; 0x1c
    71b0:	1d 8f       	std	Y+29, r17	; 0x1d
    if(number==0)
    {
    	LCD_vidWriteCharacter4(number+48);
    }
    else{
   while((i<20)&&(number!=0))
    71b2:	89 81       	ldd	r24, Y+1	; 0x01
    71b4:	84 31       	cpi	r24, 0x14	; 20
    71b6:	10 f5       	brcc	.+68     	; 0x71fc <LCD_vidWriteUnSignedInteger4+0x18e>
    71b8:	8e 89       	ldd	r24, Y+22	; 0x16
    71ba:	9f 89       	ldd	r25, Y+23	; 0x17
    71bc:	89 2b       	or	r24, r25
    71be:	98 8d       	ldd	r25, Y+24	; 0x18
    71c0:	89 2b       	or	r24, r25
    71c2:	99 8d       	ldd	r25, Y+25	; 0x19
    71c4:	89 2b       	or	r24, r25
    71c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    71c8:	89 2b       	or	r24, r25
    71ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    71cc:	89 2b       	or	r24, r25
    71ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    71d0:	89 2b       	or	r24, r25
    71d2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    71d4:	89 2b       	or	r24, r25
    71d6:	88 23       	and	r24, r24
    71d8:	09 f0       	breq	.+2      	; 0x71dc <LCD_vidWriteUnSignedInteger4+0x16e>
    71da:	85 cf       	rjmp	.-246    	; 0x70e6 <LCD_vidWriteUnSignedInteger4+0x78>
    71dc:	0f c0       	rjmp	.+30     	; 0x71fc <LCD_vidWriteUnSignedInteger4+0x18e>
	       number/=10;

   }

       while(i!=0){
    	LCD_vidWriteCharacter4(arr[--i]+48);
    71de:	89 81       	ldd	r24, Y+1	; 0x01
    71e0:	81 50       	subi	r24, 0x01	; 1
    71e2:	89 83       	std	Y+1, r24	; 0x01
    71e4:	89 81       	ldd	r24, Y+1	; 0x01
    71e6:	28 2f       	mov	r18, r24
    71e8:	30 e0       	ldi	r19, 0x00	; 0
    71ea:	ce 01       	movw	r24, r28
    71ec:	02 96       	adiw	r24, 0x02	; 2
    71ee:	fc 01       	movw	r30, r24
    71f0:	e2 0f       	add	r30, r18
    71f2:	f3 1f       	adc	r31, r19
    71f4:	80 81       	ld	r24, Z
    71f6:	80 5d       	subi	r24, 0xD0	; 208
    71f8:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <LCD_vidWriteCharacter4>

	       number/=10;

   }

       while(i!=0){
    71fc:	89 81       	ldd	r24, Y+1	; 0x01
    71fe:	88 23       	and	r24, r24
    7200:	71 f7       	brne	.-36     	; 0x71de <LCD_vidWriteUnSignedInteger4+0x170>
    	LCD_vidWriteCharacter4(arr[--i]+48);

       }
    }
}
    7202:	6d 96       	adiw	r28, 0x1d	; 29
    7204:	0f b6       	in	r0, 0x3f	; 63
    7206:	f8 94       	cli
    7208:	de bf       	out	0x3e, r29	; 62
    720a:	0f be       	out	0x3f, r0	; 63
    720c:	cd bf       	out	0x3d, r28	; 61
    720e:	cf 91       	pop	r28
    7210:	df 91       	pop	r29
    7212:	1f 91       	pop	r17
    7214:	0f 91       	pop	r16
    7216:	ff 90       	pop	r15
    7218:	ef 90       	pop	r14
    721a:	df 90       	pop	r13
    721c:	cf 90       	pop	r12
    721e:	bf 90       	pop	r11
    7220:	af 90       	pop	r10
    7222:	9f 90       	pop	r9
    7224:	8f 90       	pop	r8
    7226:	08 95       	ret

00007228 <LCD_vidWriteSignedInteger>:
//......................................................................................
void LCD_vidWriteSignedInteger(sint64 s64SignedNumCpy)
{
    7228:	af 92       	push	r10
    722a:	bf 92       	push	r11
    722c:	cf 92       	push	r12
    722e:	df 92       	push	r13
    7230:	ef 92       	push	r14
    7232:	ff 92       	push	r15
    7234:	0f 93       	push	r16
    7236:	1f 93       	push	r17
    7238:	df 93       	push	r29
    723a:	cf 93       	push	r28
    723c:	cd b7       	in	r28, 0x3d	; 61
    723e:	de b7       	in	r29, 0x3e	; 62
    7240:	ec 97       	sbiw	r28, 0x3c	; 60
    7242:	0f b6       	in	r0, 0x3f	; 63
    7244:	f8 94       	cli
    7246:	de bf       	out	0x3e, r29	; 62
    7248:	0f be       	out	0x3f, r0	; 63
    724a:	cd bf       	out	0x3d, r28	; 61
    724c:	29 87       	std	Y+9, r18	; 0x09
    724e:	3a 87       	std	Y+10, r19	; 0x0a
    7250:	4b 87       	std	Y+11, r20	; 0x0b
    7252:	5c 87       	std	Y+12, r21	; 0x0c
    7254:	6d 87       	std	Y+13, r22	; 0x0d
    7256:	7e 87       	std	Y+14, r23	; 0x0e
    7258:	8f 87       	std	Y+15, r24	; 0x0f
    725a:	98 8b       	std	Y+16, r25	; 0x10
	uint64 u64UnsignedNumCpy=0;
    725c:	19 82       	std	Y+1, r1	; 0x01
    725e:	1a 82       	std	Y+2, r1	; 0x02
    7260:	1b 82       	std	Y+3, r1	; 0x03
    7262:	1c 82       	std	Y+4, r1	; 0x04
    7264:	1d 82       	std	Y+5, r1	; 0x05
    7266:	1e 82       	std	Y+6, r1	; 0x06
    7268:	1f 82       	std	Y+7, r1	; 0x07
    726a:	18 86       	std	Y+8, r1	; 0x08
	if(s64SignedNumCpy<(sint64)0)
    726c:	88 89       	ldd	r24, Y+16	; 0x10
    726e:	88 23       	and	r24, r24
    7270:	d4 f0       	brlt	.+52     	; 0x72a6 <LCD_vidWriteSignedInteger+0x7e>
    7272:	88 89       	ldd	r24, Y+16	; 0x10
    7274:	88 23       	and	r24, r24
    7276:	09 f0       	breq	.+2      	; 0x727a <LCD_vidWriteSignedInteger+0x52>
    7278:	fd c0       	rjmp	.+506    	; 0x7474 <LCD_vidWriteSignedInteger+0x24c>
    727a:	8f 85       	ldd	r24, Y+15	; 0x0f
    727c:	88 23       	and	r24, r24
    727e:	09 f0       	breq	.+2      	; 0x7282 <LCD_vidWriteSignedInteger+0x5a>
    7280:	f9 c0       	rjmp	.+498    	; 0x7474 <LCD_vidWriteSignedInteger+0x24c>
    7282:	8e 85       	ldd	r24, Y+14	; 0x0e
    7284:	88 23       	and	r24, r24
    7286:	09 f0       	breq	.+2      	; 0x728a <LCD_vidWriteSignedInteger+0x62>
    7288:	f5 c0       	rjmp	.+490    	; 0x7474 <LCD_vidWriteSignedInteger+0x24c>
    728a:	8d 85       	ldd	r24, Y+13	; 0x0d
    728c:	88 23       	and	r24, r24
    728e:	09 f0       	breq	.+2      	; 0x7292 <LCD_vidWriteSignedInteger+0x6a>
    7290:	f1 c0       	rjmp	.+482    	; 0x7474 <LCD_vidWriteSignedInteger+0x24c>
    7292:	8c 85       	ldd	r24, Y+12	; 0x0c
    7294:	88 23       	and	r24, r24
    7296:	09 f0       	breq	.+2      	; 0x729a <LCD_vidWriteSignedInteger+0x72>
    7298:	ed c0       	rjmp	.+474    	; 0x7474 <LCD_vidWriteSignedInteger+0x24c>
    729a:	8b 85       	ldd	r24, Y+11	; 0x0b
    729c:	88 23       	and	r24, r24
    729e:	09 f0       	breq	.+2      	; 0x72a2 <LCD_vidWriteSignedInteger+0x7a>
    72a0:	e9 c0       	rjmp	.+466    	; 0x7474 <LCD_vidWriteSignedInteger+0x24c>
    72a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    72a4:	e7 c0       	rjmp	.+462    	; 0x7474 <LCD_vidWriteSignedInteger+0x24c>
	{
		u64UnsignedNumCpy=s64SignedNumCpy*(-1);
    72a6:	1a 8a       	std	Y+18, r1	; 0x12
    72a8:	1b 8a       	std	Y+19, r1	; 0x13
    72aa:	1c 8a       	std	Y+20, r1	; 0x14
    72ac:	1d 8a       	std	Y+21, r1	; 0x15
    72ae:	1e 8a       	std	Y+22, r1	; 0x16
    72b0:	1f 8a       	std	Y+23, r1	; 0x17
    72b2:	18 8e       	std	Y+24, r1	; 0x18
    72b4:	19 8e       	std	Y+25, r1	; 0x19
    72b6:	99 85       	ldd	r25, Y+9	; 0x09
    72b8:	9a 8f       	std	Y+26, r25	; 0x1a
    72ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    72bc:	8b 8f       	std	Y+27, r24	; 0x1b
    72be:	9b 85       	ldd	r25, Y+11	; 0x0b
    72c0:	9c 8f       	std	Y+28, r25	; 0x1c
    72c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    72c4:	8d 8f       	std	Y+29, r24	; 0x1d
    72c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    72c8:	9e 8f       	std	Y+30, r25	; 0x1e
    72ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    72cc:	8f 8f       	std	Y+31, r24	; 0x1f
    72ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    72d0:	98 a3       	std	Y+32, r25	; 0x20
    72d2:	88 89       	ldd	r24, Y+16	; 0x10
    72d4:	89 a3       	std	Y+33, r24	; 0x21
    72d6:	9a 89       	ldd	r25, Y+18	; 0x12
    72d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    72da:	98 1b       	sub	r25, r24
    72dc:	9a a3       	std	Y+34, r25	; 0x22
    72de:	91 e0       	ldi	r25, 0x01	; 1
    72e0:	9a a7       	std	Y+42, r25	; 0x2a
    72e2:	8a a1       	ldd	r24, Y+34	; 0x22
    72e4:	9a 89       	ldd	r25, Y+18	; 0x12
    72e6:	98 17       	cp	r25, r24
    72e8:	08 f0       	brcs	.+2      	; 0x72ec <LCD_vidWriteSignedInteger+0xc4>
    72ea:	1a a6       	std	Y+42, r1	; 0x2a
    72ec:	8b 89       	ldd	r24, Y+19	; 0x13
    72ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    72f0:	89 1b       	sub	r24, r25
    72f2:	8b a3       	std	Y+35, r24	; 0x23
    72f4:	81 e0       	ldi	r24, 0x01	; 1
    72f6:	8b a7       	std	Y+43, r24	; 0x2b
    72f8:	9b a1       	ldd	r25, Y+35	; 0x23
    72fa:	8b 89       	ldd	r24, Y+19	; 0x13
    72fc:	89 17       	cp	r24, r25
    72fe:	08 f0       	brcs	.+2      	; 0x7302 <LCD_vidWriteSignedInteger+0xda>
    7300:	1b a6       	std	Y+43, r1	; 0x2b
    7302:	9b a1       	ldd	r25, Y+35	; 0x23
    7304:	8a a5       	ldd	r24, Y+42	; 0x2a
    7306:	98 1b       	sub	r25, r24
    7308:	9c a7       	std	Y+44, r25	; 0x2c
    730a:	91 e0       	ldi	r25, 0x01	; 1
    730c:	9d a7       	std	Y+45, r25	; 0x2d
    730e:	8c a5       	ldd	r24, Y+44	; 0x2c
    7310:	9b a1       	ldd	r25, Y+35	; 0x23
    7312:	98 17       	cp	r25, r24
    7314:	08 f0       	brcs	.+2      	; 0x7318 <LCD_vidWriteSignedInteger+0xf0>
    7316:	1d a6       	std	Y+45, r1	; 0x2d
    7318:	8b a5       	ldd	r24, Y+43	; 0x2b
    731a:	9d a5       	ldd	r25, Y+45	; 0x2d
    731c:	89 2b       	or	r24, r25
    731e:	8b a7       	std	Y+43, r24	; 0x2b
    7320:	8c a5       	ldd	r24, Y+44	; 0x2c
    7322:	8b a3       	std	Y+35, r24	; 0x23
    7324:	9c 89       	ldd	r25, Y+20	; 0x14
    7326:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7328:	98 1b       	sub	r25, r24
    732a:	9c a3       	std	Y+36, r25	; 0x24
    732c:	91 e0       	ldi	r25, 0x01	; 1
    732e:	9e a7       	std	Y+46, r25	; 0x2e
    7330:	8c a1       	ldd	r24, Y+36	; 0x24
    7332:	9c 89       	ldd	r25, Y+20	; 0x14
    7334:	98 17       	cp	r25, r24
    7336:	08 f0       	brcs	.+2      	; 0x733a <LCD_vidWriteSignedInteger+0x112>
    7338:	1e a6       	std	Y+46, r1	; 0x2e
    733a:	8c a1       	ldd	r24, Y+36	; 0x24
    733c:	9b a5       	ldd	r25, Y+43	; 0x2b
    733e:	89 1b       	sub	r24, r25
    7340:	8f a7       	std	Y+47, r24	; 0x2f
    7342:	81 e0       	ldi	r24, 0x01	; 1
    7344:	88 ab       	std	Y+48, r24	; 0x30
    7346:	9f a5       	ldd	r25, Y+47	; 0x2f
    7348:	8c a1       	ldd	r24, Y+36	; 0x24
    734a:	89 17       	cp	r24, r25
    734c:	08 f0       	brcs	.+2      	; 0x7350 <LCD_vidWriteSignedInteger+0x128>
    734e:	18 aa       	std	Y+48, r1	; 0x30
    7350:	9e a5       	ldd	r25, Y+46	; 0x2e
    7352:	88 a9       	ldd	r24, Y+48	; 0x30
    7354:	98 2b       	or	r25, r24
    7356:	9e a7       	std	Y+46, r25	; 0x2e
    7358:	9f a5       	ldd	r25, Y+47	; 0x2f
    735a:	9c a3       	std	Y+36, r25	; 0x24
    735c:	8d 89       	ldd	r24, Y+21	; 0x15
    735e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7360:	89 1b       	sub	r24, r25
    7362:	8d a3       	std	Y+37, r24	; 0x25
    7364:	81 e0       	ldi	r24, 0x01	; 1
    7366:	89 ab       	std	Y+49, r24	; 0x31
    7368:	9d a1       	ldd	r25, Y+37	; 0x25
    736a:	8d 89       	ldd	r24, Y+21	; 0x15
    736c:	89 17       	cp	r24, r25
    736e:	08 f0       	brcs	.+2      	; 0x7372 <LCD_vidWriteSignedInteger+0x14a>
    7370:	19 aa       	std	Y+49, r1	; 0x31
    7372:	9d a1       	ldd	r25, Y+37	; 0x25
    7374:	8e a5       	ldd	r24, Y+46	; 0x2e
    7376:	98 1b       	sub	r25, r24
    7378:	9a ab       	std	Y+50, r25	; 0x32
    737a:	91 e0       	ldi	r25, 0x01	; 1
    737c:	9b ab       	std	Y+51, r25	; 0x33
    737e:	8a a9       	ldd	r24, Y+50	; 0x32
    7380:	9d a1       	ldd	r25, Y+37	; 0x25
    7382:	98 17       	cp	r25, r24
    7384:	08 f0       	brcs	.+2      	; 0x7388 <LCD_vidWriteSignedInteger+0x160>
    7386:	1b aa       	std	Y+51, r1	; 0x33
    7388:	89 a9       	ldd	r24, Y+49	; 0x31
    738a:	9b a9       	ldd	r25, Y+51	; 0x33
    738c:	89 2b       	or	r24, r25
    738e:	89 ab       	std	Y+49, r24	; 0x31
    7390:	8a a9       	ldd	r24, Y+50	; 0x32
    7392:	8d a3       	std	Y+37, r24	; 0x25
    7394:	9e 89       	ldd	r25, Y+22	; 0x16
    7396:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7398:	98 1b       	sub	r25, r24
    739a:	9e a3       	std	Y+38, r25	; 0x26
    739c:	91 e0       	ldi	r25, 0x01	; 1
    739e:	9c ab       	std	Y+52, r25	; 0x34
    73a0:	8e a1       	ldd	r24, Y+38	; 0x26
    73a2:	9e 89       	ldd	r25, Y+22	; 0x16
    73a4:	98 17       	cp	r25, r24
    73a6:	08 f0       	brcs	.+2      	; 0x73aa <LCD_vidWriteSignedInteger+0x182>
    73a8:	1c aa       	std	Y+52, r1	; 0x34
    73aa:	8e a1       	ldd	r24, Y+38	; 0x26
    73ac:	99 a9       	ldd	r25, Y+49	; 0x31
    73ae:	89 1b       	sub	r24, r25
    73b0:	8d ab       	std	Y+53, r24	; 0x35
    73b2:	81 e0       	ldi	r24, 0x01	; 1
    73b4:	8e ab       	std	Y+54, r24	; 0x36
    73b6:	9d a9       	ldd	r25, Y+53	; 0x35
    73b8:	8e a1       	ldd	r24, Y+38	; 0x26
    73ba:	89 17       	cp	r24, r25
    73bc:	08 f0       	brcs	.+2      	; 0x73c0 <LCD_vidWriteSignedInteger+0x198>
    73be:	1e aa       	std	Y+54, r1	; 0x36
    73c0:	9c a9       	ldd	r25, Y+52	; 0x34
    73c2:	8e a9       	ldd	r24, Y+54	; 0x36
    73c4:	98 2b       	or	r25, r24
    73c6:	9c ab       	std	Y+52, r25	; 0x34
    73c8:	9d a9       	ldd	r25, Y+53	; 0x35
    73ca:	9e a3       	std	Y+38, r25	; 0x26
    73cc:	8f 89       	ldd	r24, Y+23	; 0x17
    73ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    73d0:	89 1b       	sub	r24, r25
    73d2:	8f a3       	std	Y+39, r24	; 0x27
    73d4:	81 e0       	ldi	r24, 0x01	; 1
    73d6:	8f ab       	std	Y+55, r24	; 0x37
    73d8:	9f a1       	ldd	r25, Y+39	; 0x27
    73da:	8f 89       	ldd	r24, Y+23	; 0x17
    73dc:	89 17       	cp	r24, r25
    73de:	08 f0       	brcs	.+2      	; 0x73e2 <LCD_vidWriteSignedInteger+0x1ba>
    73e0:	1f aa       	std	Y+55, r1	; 0x37
    73e2:	9f a1       	ldd	r25, Y+39	; 0x27
    73e4:	8c a9       	ldd	r24, Y+52	; 0x34
    73e6:	98 1b       	sub	r25, r24
    73e8:	98 af       	std	Y+56, r25	; 0x38
    73ea:	91 e0       	ldi	r25, 0x01	; 1
    73ec:	99 af       	std	Y+57, r25	; 0x39
    73ee:	88 ad       	ldd	r24, Y+56	; 0x38
    73f0:	9f a1       	ldd	r25, Y+39	; 0x27
    73f2:	98 17       	cp	r25, r24
    73f4:	08 f0       	brcs	.+2      	; 0x73f8 <LCD_vidWriteSignedInteger+0x1d0>
    73f6:	19 ae       	std	Y+57, r1	; 0x39
    73f8:	8f a9       	ldd	r24, Y+55	; 0x37
    73fa:	99 ad       	ldd	r25, Y+57	; 0x39
    73fc:	89 2b       	or	r24, r25
    73fe:	8f ab       	std	Y+55, r24	; 0x37
    7400:	88 ad       	ldd	r24, Y+56	; 0x38
    7402:	8f a3       	std	Y+39, r24	; 0x27
    7404:	98 8d       	ldd	r25, Y+24	; 0x18
    7406:	88 a1       	ldd	r24, Y+32	; 0x20
    7408:	98 1b       	sub	r25, r24
    740a:	98 a7       	std	Y+40, r25	; 0x28
    740c:	91 e0       	ldi	r25, 0x01	; 1
    740e:	9a af       	std	Y+58, r25	; 0x3a
    7410:	88 a5       	ldd	r24, Y+40	; 0x28
    7412:	98 8d       	ldd	r25, Y+24	; 0x18
    7414:	98 17       	cp	r25, r24
    7416:	08 f0       	brcs	.+2      	; 0x741a <LCD_vidWriteSignedInteger+0x1f2>
    7418:	1a ae       	std	Y+58, r1	; 0x3a
    741a:	88 a5       	ldd	r24, Y+40	; 0x28
    741c:	9f a9       	ldd	r25, Y+55	; 0x37
    741e:	89 1b       	sub	r24, r25
    7420:	8b af       	std	Y+59, r24	; 0x3b
    7422:	81 e0       	ldi	r24, 0x01	; 1
    7424:	8c af       	std	Y+60, r24	; 0x3c
    7426:	9b ad       	ldd	r25, Y+59	; 0x3b
    7428:	88 a5       	ldd	r24, Y+40	; 0x28
    742a:	89 17       	cp	r24, r25
    742c:	08 f0       	brcs	.+2      	; 0x7430 <LCD_vidWriteSignedInteger+0x208>
    742e:	1c ae       	std	Y+60, r1	; 0x3c
    7430:	9a ad       	ldd	r25, Y+58	; 0x3a
    7432:	8c ad       	ldd	r24, Y+60	; 0x3c
    7434:	98 2b       	or	r25, r24
    7436:	9a af       	std	Y+58, r25	; 0x3a
    7438:	9b ad       	ldd	r25, Y+59	; 0x3b
    743a:	98 a7       	std	Y+40, r25	; 0x28
    743c:	89 8d       	ldd	r24, Y+25	; 0x19
    743e:	99 a1       	ldd	r25, Y+33	; 0x21
    7440:	89 1b       	sub	r24, r25
    7442:	89 a7       	std	Y+41, r24	; 0x29
    7444:	89 a5       	ldd	r24, Y+41	; 0x29
    7446:	9a ad       	ldd	r25, Y+58	; 0x3a
    7448:	89 1b       	sub	r24, r25
    744a:	89 a7       	std	Y+41, r24	; 0x29
    744c:	2a a1       	ldd	r18, Y+34	; 0x22
    744e:	3b a1       	ldd	r19, Y+35	; 0x23
    7450:	4c a1       	ldd	r20, Y+36	; 0x24
    7452:	5d a1       	ldd	r21, Y+37	; 0x25
    7454:	6e a1       	ldd	r22, Y+38	; 0x26
    7456:	7f a1       	ldd	r23, Y+39	; 0x27
    7458:	88 a5       	ldd	r24, Y+40	; 0x28
    745a:	99 a5       	ldd	r25, Y+41	; 0x29
    745c:	29 83       	std	Y+1, r18	; 0x01
    745e:	3a 83       	std	Y+2, r19	; 0x02
    7460:	4b 83       	std	Y+3, r20	; 0x03
    7462:	5c 83       	std	Y+4, r21	; 0x04
    7464:	6d 83       	std	Y+5, r22	; 0x05
    7466:	7e 83       	std	Y+6, r23	; 0x06
    7468:	8f 83       	std	Y+7, r24	; 0x07
    746a:	98 87       	std	Y+8, r25	; 0x08
        LCD_vidWriteCharacter('-');
    746c:	8d e2       	ldi	r24, 0x2D	; 45
    746e:	0e 94 4c 32 	call	0x6498	; 0x6498 <LCD_vidWriteCharacter>
    7472:	10 c0       	rjmp	.+32     	; 0x7494 <LCD_vidWriteSignedInteger+0x26c>
	}
	else
	{
		u64UnsignedNumCpy=s64SignedNumCpy;
    7474:	89 85       	ldd	r24, Y+9	; 0x09
    7476:	89 83       	std	Y+1, r24	; 0x01
    7478:	8a 85       	ldd	r24, Y+10	; 0x0a
    747a:	8a 83       	std	Y+2, r24	; 0x02
    747c:	8b 85       	ldd	r24, Y+11	; 0x0b
    747e:	8b 83       	std	Y+3, r24	; 0x03
    7480:	8c 85       	ldd	r24, Y+12	; 0x0c
    7482:	8c 83       	std	Y+4, r24	; 0x04
    7484:	8d 85       	ldd	r24, Y+13	; 0x0d
    7486:	8d 83       	std	Y+5, r24	; 0x05
    7488:	8e 85       	ldd	r24, Y+14	; 0x0e
    748a:	8e 83       	std	Y+6, r24	; 0x06
    748c:	8f 85       	ldd	r24, Y+15	; 0x0f
    748e:	8f 83       	std	Y+7, r24	; 0x07
    7490:	88 89       	ldd	r24, Y+16	; 0x10
    7492:	88 87       	std	Y+8, r24	; 0x08
	}

	LCD_vidWriteUnSignedInteger(u64UnsignedNumCpy);
    7494:	a9 80       	ldd	r10, Y+1	; 0x01
    7496:	ba 80       	ldd	r11, Y+2	; 0x02
    7498:	cb 80       	ldd	r12, Y+3	; 0x03
    749a:	dc 80       	ldd	r13, Y+4	; 0x04
    749c:	ed 80       	ldd	r14, Y+5	; 0x05
    749e:	fe 80       	ldd	r15, Y+6	; 0x06
    74a0:	0f 81       	ldd	r16, Y+7	; 0x07
    74a2:	18 85       	ldd	r17, Y+8	; 0x08
    74a4:	2a 2d       	mov	r18, r10
    74a6:	3b 2d       	mov	r19, r11
    74a8:	4c 2d       	mov	r20, r12
    74aa:	5d 2d       	mov	r21, r13
    74ac:	6e 2d       	mov	r22, r14
    74ae:	7f 2d       	mov	r23, r15
    74b0:	80 2f       	mov	r24, r16
    74b2:	91 2f       	mov	r25, r17
    74b4:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <LCD_vidWriteUnSignedInteger>


}
    74b8:	ec 96       	adiw	r28, 0x3c	; 60
    74ba:	0f b6       	in	r0, 0x3f	; 63
    74bc:	f8 94       	cli
    74be:	de bf       	out	0x3e, r29	; 62
    74c0:	0f be       	out	0x3f, r0	; 63
    74c2:	cd bf       	out	0x3d, r28	; 61
    74c4:	cf 91       	pop	r28
    74c6:	df 91       	pop	r29
    74c8:	1f 91       	pop	r17
    74ca:	0f 91       	pop	r16
    74cc:	ff 90       	pop	r15
    74ce:	ef 90       	pop	r14
    74d0:	df 90       	pop	r13
    74d2:	cf 90       	pop	r12
    74d4:	bf 90       	pop	r11
    74d6:	af 90       	pop	r10
    74d8:	08 95       	ret

000074da <LCD_vidWriteSignedInteger4>:
//......................................................................................
void LCD_vidWriteSignedInteger4(sint64 s64SignedNumCpy)
{
    74da:	af 92       	push	r10
    74dc:	bf 92       	push	r11
    74de:	cf 92       	push	r12
    74e0:	df 92       	push	r13
    74e2:	ef 92       	push	r14
    74e4:	ff 92       	push	r15
    74e6:	0f 93       	push	r16
    74e8:	1f 93       	push	r17
    74ea:	df 93       	push	r29
    74ec:	cf 93       	push	r28
    74ee:	cd b7       	in	r28, 0x3d	; 61
    74f0:	de b7       	in	r29, 0x3e	; 62
    74f2:	ec 97       	sbiw	r28, 0x3c	; 60
    74f4:	0f b6       	in	r0, 0x3f	; 63
    74f6:	f8 94       	cli
    74f8:	de bf       	out	0x3e, r29	; 62
    74fa:	0f be       	out	0x3f, r0	; 63
    74fc:	cd bf       	out	0x3d, r28	; 61
    74fe:	29 87       	std	Y+9, r18	; 0x09
    7500:	3a 87       	std	Y+10, r19	; 0x0a
    7502:	4b 87       	std	Y+11, r20	; 0x0b
    7504:	5c 87       	std	Y+12, r21	; 0x0c
    7506:	6d 87       	std	Y+13, r22	; 0x0d
    7508:	7e 87       	std	Y+14, r23	; 0x0e
    750a:	8f 87       	std	Y+15, r24	; 0x0f
    750c:	98 8b       	std	Y+16, r25	; 0x10
	uint64 u64UnsignedNumCpy=0;
    750e:	19 82       	std	Y+1, r1	; 0x01
    7510:	1a 82       	std	Y+2, r1	; 0x02
    7512:	1b 82       	std	Y+3, r1	; 0x03
    7514:	1c 82       	std	Y+4, r1	; 0x04
    7516:	1d 82       	std	Y+5, r1	; 0x05
    7518:	1e 82       	std	Y+6, r1	; 0x06
    751a:	1f 82       	std	Y+7, r1	; 0x07
    751c:	18 86       	std	Y+8, r1	; 0x08
		if(s64SignedNumCpy<(sint64)0)
    751e:	88 89       	ldd	r24, Y+16	; 0x10
    7520:	88 23       	and	r24, r24
    7522:	d4 f0       	brlt	.+52     	; 0x7558 <LCD_vidWriteSignedInteger4+0x7e>
    7524:	88 89       	ldd	r24, Y+16	; 0x10
    7526:	88 23       	and	r24, r24
    7528:	09 f0       	breq	.+2      	; 0x752c <LCD_vidWriteSignedInteger4+0x52>
    752a:	fd c0       	rjmp	.+506    	; 0x7726 <LCD_vidWriteSignedInteger4+0x24c>
    752c:	8f 85       	ldd	r24, Y+15	; 0x0f
    752e:	88 23       	and	r24, r24
    7530:	09 f0       	breq	.+2      	; 0x7534 <LCD_vidWriteSignedInteger4+0x5a>
    7532:	f9 c0       	rjmp	.+498    	; 0x7726 <LCD_vidWriteSignedInteger4+0x24c>
    7534:	8e 85       	ldd	r24, Y+14	; 0x0e
    7536:	88 23       	and	r24, r24
    7538:	09 f0       	breq	.+2      	; 0x753c <LCD_vidWriteSignedInteger4+0x62>
    753a:	f5 c0       	rjmp	.+490    	; 0x7726 <LCD_vidWriteSignedInteger4+0x24c>
    753c:	8d 85       	ldd	r24, Y+13	; 0x0d
    753e:	88 23       	and	r24, r24
    7540:	09 f0       	breq	.+2      	; 0x7544 <LCD_vidWriteSignedInteger4+0x6a>
    7542:	f1 c0       	rjmp	.+482    	; 0x7726 <LCD_vidWriteSignedInteger4+0x24c>
    7544:	8c 85       	ldd	r24, Y+12	; 0x0c
    7546:	88 23       	and	r24, r24
    7548:	09 f0       	breq	.+2      	; 0x754c <LCD_vidWriteSignedInteger4+0x72>
    754a:	ed c0       	rjmp	.+474    	; 0x7726 <LCD_vidWriteSignedInteger4+0x24c>
    754c:	8b 85       	ldd	r24, Y+11	; 0x0b
    754e:	88 23       	and	r24, r24
    7550:	09 f0       	breq	.+2      	; 0x7554 <LCD_vidWriteSignedInteger4+0x7a>
    7552:	e9 c0       	rjmp	.+466    	; 0x7726 <LCD_vidWriteSignedInteger4+0x24c>
    7554:	8a 85       	ldd	r24, Y+10	; 0x0a
    7556:	e7 c0       	rjmp	.+462    	; 0x7726 <LCD_vidWriteSignedInteger4+0x24c>
		{
			u64UnsignedNumCpy=s64SignedNumCpy*(-1);
    7558:	1a 8a       	std	Y+18, r1	; 0x12
    755a:	1b 8a       	std	Y+19, r1	; 0x13
    755c:	1c 8a       	std	Y+20, r1	; 0x14
    755e:	1d 8a       	std	Y+21, r1	; 0x15
    7560:	1e 8a       	std	Y+22, r1	; 0x16
    7562:	1f 8a       	std	Y+23, r1	; 0x17
    7564:	18 8e       	std	Y+24, r1	; 0x18
    7566:	19 8e       	std	Y+25, r1	; 0x19
    7568:	99 85       	ldd	r25, Y+9	; 0x09
    756a:	9a 8f       	std	Y+26, r25	; 0x1a
    756c:	8a 85       	ldd	r24, Y+10	; 0x0a
    756e:	8b 8f       	std	Y+27, r24	; 0x1b
    7570:	9b 85       	ldd	r25, Y+11	; 0x0b
    7572:	9c 8f       	std	Y+28, r25	; 0x1c
    7574:	8c 85       	ldd	r24, Y+12	; 0x0c
    7576:	8d 8f       	std	Y+29, r24	; 0x1d
    7578:	9d 85       	ldd	r25, Y+13	; 0x0d
    757a:	9e 8f       	std	Y+30, r25	; 0x1e
    757c:	8e 85       	ldd	r24, Y+14	; 0x0e
    757e:	8f 8f       	std	Y+31, r24	; 0x1f
    7580:	9f 85       	ldd	r25, Y+15	; 0x0f
    7582:	98 a3       	std	Y+32, r25	; 0x20
    7584:	88 89       	ldd	r24, Y+16	; 0x10
    7586:	89 a3       	std	Y+33, r24	; 0x21
    7588:	9a 89       	ldd	r25, Y+18	; 0x12
    758a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    758c:	98 1b       	sub	r25, r24
    758e:	9a a3       	std	Y+34, r25	; 0x22
    7590:	91 e0       	ldi	r25, 0x01	; 1
    7592:	9a a7       	std	Y+42, r25	; 0x2a
    7594:	8a a1       	ldd	r24, Y+34	; 0x22
    7596:	9a 89       	ldd	r25, Y+18	; 0x12
    7598:	98 17       	cp	r25, r24
    759a:	08 f0       	brcs	.+2      	; 0x759e <LCD_vidWriteSignedInteger4+0xc4>
    759c:	1a a6       	std	Y+42, r1	; 0x2a
    759e:	8b 89       	ldd	r24, Y+19	; 0x13
    75a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    75a2:	89 1b       	sub	r24, r25
    75a4:	8b a3       	std	Y+35, r24	; 0x23
    75a6:	81 e0       	ldi	r24, 0x01	; 1
    75a8:	8b a7       	std	Y+43, r24	; 0x2b
    75aa:	9b a1       	ldd	r25, Y+35	; 0x23
    75ac:	8b 89       	ldd	r24, Y+19	; 0x13
    75ae:	89 17       	cp	r24, r25
    75b0:	08 f0       	brcs	.+2      	; 0x75b4 <LCD_vidWriteSignedInteger4+0xda>
    75b2:	1b a6       	std	Y+43, r1	; 0x2b
    75b4:	9b a1       	ldd	r25, Y+35	; 0x23
    75b6:	8a a5       	ldd	r24, Y+42	; 0x2a
    75b8:	98 1b       	sub	r25, r24
    75ba:	9c a7       	std	Y+44, r25	; 0x2c
    75bc:	91 e0       	ldi	r25, 0x01	; 1
    75be:	9d a7       	std	Y+45, r25	; 0x2d
    75c0:	8c a5       	ldd	r24, Y+44	; 0x2c
    75c2:	9b a1       	ldd	r25, Y+35	; 0x23
    75c4:	98 17       	cp	r25, r24
    75c6:	08 f0       	brcs	.+2      	; 0x75ca <LCD_vidWriteSignedInteger4+0xf0>
    75c8:	1d a6       	std	Y+45, r1	; 0x2d
    75ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    75cc:	9d a5       	ldd	r25, Y+45	; 0x2d
    75ce:	89 2b       	or	r24, r25
    75d0:	8b a7       	std	Y+43, r24	; 0x2b
    75d2:	8c a5       	ldd	r24, Y+44	; 0x2c
    75d4:	8b a3       	std	Y+35, r24	; 0x23
    75d6:	9c 89       	ldd	r25, Y+20	; 0x14
    75d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    75da:	98 1b       	sub	r25, r24
    75dc:	9c a3       	std	Y+36, r25	; 0x24
    75de:	91 e0       	ldi	r25, 0x01	; 1
    75e0:	9e a7       	std	Y+46, r25	; 0x2e
    75e2:	8c a1       	ldd	r24, Y+36	; 0x24
    75e4:	9c 89       	ldd	r25, Y+20	; 0x14
    75e6:	98 17       	cp	r25, r24
    75e8:	08 f0       	brcs	.+2      	; 0x75ec <LCD_vidWriteSignedInteger4+0x112>
    75ea:	1e a6       	std	Y+46, r1	; 0x2e
    75ec:	8c a1       	ldd	r24, Y+36	; 0x24
    75ee:	9b a5       	ldd	r25, Y+43	; 0x2b
    75f0:	89 1b       	sub	r24, r25
    75f2:	8f a7       	std	Y+47, r24	; 0x2f
    75f4:	81 e0       	ldi	r24, 0x01	; 1
    75f6:	88 ab       	std	Y+48, r24	; 0x30
    75f8:	9f a5       	ldd	r25, Y+47	; 0x2f
    75fa:	8c a1       	ldd	r24, Y+36	; 0x24
    75fc:	89 17       	cp	r24, r25
    75fe:	08 f0       	brcs	.+2      	; 0x7602 <LCD_vidWriteSignedInteger4+0x128>
    7600:	18 aa       	std	Y+48, r1	; 0x30
    7602:	9e a5       	ldd	r25, Y+46	; 0x2e
    7604:	88 a9       	ldd	r24, Y+48	; 0x30
    7606:	98 2b       	or	r25, r24
    7608:	9e a7       	std	Y+46, r25	; 0x2e
    760a:	9f a5       	ldd	r25, Y+47	; 0x2f
    760c:	9c a3       	std	Y+36, r25	; 0x24
    760e:	8d 89       	ldd	r24, Y+21	; 0x15
    7610:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7612:	89 1b       	sub	r24, r25
    7614:	8d a3       	std	Y+37, r24	; 0x25
    7616:	81 e0       	ldi	r24, 0x01	; 1
    7618:	89 ab       	std	Y+49, r24	; 0x31
    761a:	9d a1       	ldd	r25, Y+37	; 0x25
    761c:	8d 89       	ldd	r24, Y+21	; 0x15
    761e:	89 17       	cp	r24, r25
    7620:	08 f0       	brcs	.+2      	; 0x7624 <LCD_vidWriteSignedInteger4+0x14a>
    7622:	19 aa       	std	Y+49, r1	; 0x31
    7624:	9d a1       	ldd	r25, Y+37	; 0x25
    7626:	8e a5       	ldd	r24, Y+46	; 0x2e
    7628:	98 1b       	sub	r25, r24
    762a:	9a ab       	std	Y+50, r25	; 0x32
    762c:	91 e0       	ldi	r25, 0x01	; 1
    762e:	9b ab       	std	Y+51, r25	; 0x33
    7630:	8a a9       	ldd	r24, Y+50	; 0x32
    7632:	9d a1       	ldd	r25, Y+37	; 0x25
    7634:	98 17       	cp	r25, r24
    7636:	08 f0       	brcs	.+2      	; 0x763a <LCD_vidWriteSignedInteger4+0x160>
    7638:	1b aa       	std	Y+51, r1	; 0x33
    763a:	89 a9       	ldd	r24, Y+49	; 0x31
    763c:	9b a9       	ldd	r25, Y+51	; 0x33
    763e:	89 2b       	or	r24, r25
    7640:	89 ab       	std	Y+49, r24	; 0x31
    7642:	8a a9       	ldd	r24, Y+50	; 0x32
    7644:	8d a3       	std	Y+37, r24	; 0x25
    7646:	9e 89       	ldd	r25, Y+22	; 0x16
    7648:	8e 8d       	ldd	r24, Y+30	; 0x1e
    764a:	98 1b       	sub	r25, r24
    764c:	9e a3       	std	Y+38, r25	; 0x26
    764e:	91 e0       	ldi	r25, 0x01	; 1
    7650:	9c ab       	std	Y+52, r25	; 0x34
    7652:	8e a1       	ldd	r24, Y+38	; 0x26
    7654:	9e 89       	ldd	r25, Y+22	; 0x16
    7656:	98 17       	cp	r25, r24
    7658:	08 f0       	brcs	.+2      	; 0x765c <LCD_vidWriteSignedInteger4+0x182>
    765a:	1c aa       	std	Y+52, r1	; 0x34
    765c:	8e a1       	ldd	r24, Y+38	; 0x26
    765e:	99 a9       	ldd	r25, Y+49	; 0x31
    7660:	89 1b       	sub	r24, r25
    7662:	8d ab       	std	Y+53, r24	; 0x35
    7664:	81 e0       	ldi	r24, 0x01	; 1
    7666:	8e ab       	std	Y+54, r24	; 0x36
    7668:	9d a9       	ldd	r25, Y+53	; 0x35
    766a:	8e a1       	ldd	r24, Y+38	; 0x26
    766c:	89 17       	cp	r24, r25
    766e:	08 f0       	brcs	.+2      	; 0x7672 <LCD_vidWriteSignedInteger4+0x198>
    7670:	1e aa       	std	Y+54, r1	; 0x36
    7672:	9c a9       	ldd	r25, Y+52	; 0x34
    7674:	8e a9       	ldd	r24, Y+54	; 0x36
    7676:	98 2b       	or	r25, r24
    7678:	9c ab       	std	Y+52, r25	; 0x34
    767a:	9d a9       	ldd	r25, Y+53	; 0x35
    767c:	9e a3       	std	Y+38, r25	; 0x26
    767e:	8f 89       	ldd	r24, Y+23	; 0x17
    7680:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7682:	89 1b       	sub	r24, r25
    7684:	8f a3       	std	Y+39, r24	; 0x27
    7686:	81 e0       	ldi	r24, 0x01	; 1
    7688:	8f ab       	std	Y+55, r24	; 0x37
    768a:	9f a1       	ldd	r25, Y+39	; 0x27
    768c:	8f 89       	ldd	r24, Y+23	; 0x17
    768e:	89 17       	cp	r24, r25
    7690:	08 f0       	brcs	.+2      	; 0x7694 <LCD_vidWriteSignedInteger4+0x1ba>
    7692:	1f aa       	std	Y+55, r1	; 0x37
    7694:	9f a1       	ldd	r25, Y+39	; 0x27
    7696:	8c a9       	ldd	r24, Y+52	; 0x34
    7698:	98 1b       	sub	r25, r24
    769a:	98 af       	std	Y+56, r25	; 0x38
    769c:	91 e0       	ldi	r25, 0x01	; 1
    769e:	99 af       	std	Y+57, r25	; 0x39
    76a0:	88 ad       	ldd	r24, Y+56	; 0x38
    76a2:	9f a1       	ldd	r25, Y+39	; 0x27
    76a4:	98 17       	cp	r25, r24
    76a6:	08 f0       	brcs	.+2      	; 0x76aa <LCD_vidWriteSignedInteger4+0x1d0>
    76a8:	19 ae       	std	Y+57, r1	; 0x39
    76aa:	8f a9       	ldd	r24, Y+55	; 0x37
    76ac:	99 ad       	ldd	r25, Y+57	; 0x39
    76ae:	89 2b       	or	r24, r25
    76b0:	8f ab       	std	Y+55, r24	; 0x37
    76b2:	88 ad       	ldd	r24, Y+56	; 0x38
    76b4:	8f a3       	std	Y+39, r24	; 0x27
    76b6:	98 8d       	ldd	r25, Y+24	; 0x18
    76b8:	88 a1       	ldd	r24, Y+32	; 0x20
    76ba:	98 1b       	sub	r25, r24
    76bc:	98 a7       	std	Y+40, r25	; 0x28
    76be:	91 e0       	ldi	r25, 0x01	; 1
    76c0:	9a af       	std	Y+58, r25	; 0x3a
    76c2:	88 a5       	ldd	r24, Y+40	; 0x28
    76c4:	98 8d       	ldd	r25, Y+24	; 0x18
    76c6:	98 17       	cp	r25, r24
    76c8:	08 f0       	brcs	.+2      	; 0x76cc <LCD_vidWriteSignedInteger4+0x1f2>
    76ca:	1a ae       	std	Y+58, r1	; 0x3a
    76cc:	88 a5       	ldd	r24, Y+40	; 0x28
    76ce:	9f a9       	ldd	r25, Y+55	; 0x37
    76d0:	89 1b       	sub	r24, r25
    76d2:	8b af       	std	Y+59, r24	; 0x3b
    76d4:	81 e0       	ldi	r24, 0x01	; 1
    76d6:	8c af       	std	Y+60, r24	; 0x3c
    76d8:	9b ad       	ldd	r25, Y+59	; 0x3b
    76da:	88 a5       	ldd	r24, Y+40	; 0x28
    76dc:	89 17       	cp	r24, r25
    76de:	08 f0       	brcs	.+2      	; 0x76e2 <LCD_vidWriteSignedInteger4+0x208>
    76e0:	1c ae       	std	Y+60, r1	; 0x3c
    76e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    76e4:	8c ad       	ldd	r24, Y+60	; 0x3c
    76e6:	98 2b       	or	r25, r24
    76e8:	9a af       	std	Y+58, r25	; 0x3a
    76ea:	9b ad       	ldd	r25, Y+59	; 0x3b
    76ec:	98 a7       	std	Y+40, r25	; 0x28
    76ee:	89 8d       	ldd	r24, Y+25	; 0x19
    76f0:	99 a1       	ldd	r25, Y+33	; 0x21
    76f2:	89 1b       	sub	r24, r25
    76f4:	89 a7       	std	Y+41, r24	; 0x29
    76f6:	89 a5       	ldd	r24, Y+41	; 0x29
    76f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    76fa:	89 1b       	sub	r24, r25
    76fc:	89 a7       	std	Y+41, r24	; 0x29
    76fe:	2a a1       	ldd	r18, Y+34	; 0x22
    7700:	3b a1       	ldd	r19, Y+35	; 0x23
    7702:	4c a1       	ldd	r20, Y+36	; 0x24
    7704:	5d a1       	ldd	r21, Y+37	; 0x25
    7706:	6e a1       	ldd	r22, Y+38	; 0x26
    7708:	7f a1       	ldd	r23, Y+39	; 0x27
    770a:	88 a5       	ldd	r24, Y+40	; 0x28
    770c:	99 a5       	ldd	r25, Y+41	; 0x29
    770e:	29 83       	std	Y+1, r18	; 0x01
    7710:	3a 83       	std	Y+2, r19	; 0x02
    7712:	4b 83       	std	Y+3, r20	; 0x03
    7714:	5c 83       	std	Y+4, r21	; 0x04
    7716:	6d 83       	std	Y+5, r22	; 0x05
    7718:	7e 83       	std	Y+6, r23	; 0x06
    771a:	8f 83       	std	Y+7, r24	; 0x07
    771c:	98 87       	std	Y+8, r25	; 0x08
	        LCD_vidWriteCharacter4('-');
    771e:	8d e2       	ldi	r24, 0x2D	; 45
    7720:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <LCD_vidWriteCharacter4>
    7724:	10 c0       	rjmp	.+32     	; 0x7746 <LCD_vidWriteSignedInteger4+0x26c>
		}
		else
		{
			u64UnsignedNumCpy=s64SignedNumCpy;
    7726:	89 85       	ldd	r24, Y+9	; 0x09
    7728:	89 83       	std	Y+1, r24	; 0x01
    772a:	8a 85       	ldd	r24, Y+10	; 0x0a
    772c:	8a 83       	std	Y+2, r24	; 0x02
    772e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7730:	8b 83       	std	Y+3, r24	; 0x03
    7732:	8c 85       	ldd	r24, Y+12	; 0x0c
    7734:	8c 83       	std	Y+4, r24	; 0x04
    7736:	8d 85       	ldd	r24, Y+13	; 0x0d
    7738:	8d 83       	std	Y+5, r24	; 0x05
    773a:	8e 85       	ldd	r24, Y+14	; 0x0e
    773c:	8e 83       	std	Y+6, r24	; 0x06
    773e:	8f 85       	ldd	r24, Y+15	; 0x0f
    7740:	8f 83       	std	Y+7, r24	; 0x07
    7742:	88 89       	ldd	r24, Y+16	; 0x10
    7744:	88 87       	std	Y+8, r24	; 0x08
		}

		LCD_vidWriteUnSignedInteger4(u64UnsignedNumCpy);
    7746:	a9 80       	ldd	r10, Y+1	; 0x01
    7748:	ba 80       	ldd	r11, Y+2	; 0x02
    774a:	cb 80       	ldd	r12, Y+3	; 0x03
    774c:	dc 80       	ldd	r13, Y+4	; 0x04
    774e:	ed 80       	ldd	r14, Y+5	; 0x05
    7750:	fe 80       	ldd	r15, Y+6	; 0x06
    7752:	0f 81       	ldd	r16, Y+7	; 0x07
    7754:	18 85       	ldd	r17, Y+8	; 0x08
    7756:	2a 2d       	mov	r18, r10
    7758:	3b 2d       	mov	r19, r11
    775a:	4c 2d       	mov	r20, r12
    775c:	5d 2d       	mov	r21, r13
    775e:	6e 2d       	mov	r22, r14
    7760:	7f 2d       	mov	r23, r15
    7762:	80 2f       	mov	r24, r16
    7764:	91 2f       	mov	r25, r17
    7766:	0e 94 37 38 	call	0x706e	; 0x706e <LCD_vidWriteUnSignedInteger4>

}
    776a:	ec 96       	adiw	r28, 0x3c	; 60
    776c:	0f b6       	in	r0, 0x3f	; 63
    776e:	f8 94       	cli
    7770:	de bf       	out	0x3e, r29	; 62
    7772:	0f be       	out	0x3f, r0	; 63
    7774:	cd bf       	out	0x3d, r28	; 61
    7776:	cf 91       	pop	r28
    7778:	df 91       	pop	r29
    777a:	1f 91       	pop	r17
    777c:	0f 91       	pop	r16
    777e:	ff 90       	pop	r15
    7780:	ef 90       	pop	r14
    7782:	df 90       	pop	r13
    7784:	cf 90       	pop	r12
    7786:	bf 90       	pop	r11
    7788:	af 90       	pop	r10
    778a:	08 95       	ret

0000778c <LCD_vidGotoxy>:



//...............................................................................................
void LCD_vidGotoxy(uint8 u8Numx,uint8 u8Numy)
{
    778c:	df 93       	push	r29
    778e:	cf 93       	push	r28
    7790:	00 d0       	rcall	.+0      	; 0x7792 <LCD_vidGotoxy+0x6>
    7792:	00 d0       	rcall	.+0      	; 0x7794 <LCD_vidGotoxy+0x8>
    7794:	cd b7       	in	r28, 0x3d	; 61
    7796:	de b7       	in	r29, 0x3e	; 62
    7798:	89 83       	std	Y+1, r24	; 0x01
    779a:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8Numy)
    779c:	8a 81       	ldd	r24, Y+2	; 0x02
    779e:	28 2f       	mov	r18, r24
    77a0:	30 e0       	ldi	r19, 0x00	; 0
    77a2:	3c 83       	std	Y+4, r19	; 0x04
    77a4:	2b 83       	std	Y+3, r18	; 0x03
    77a6:	8b 81       	ldd	r24, Y+3	; 0x03
    77a8:	9c 81       	ldd	r25, Y+4	; 0x04
    77aa:	00 97       	sbiw	r24, 0x00	; 0
    77ac:	31 f0       	breq	.+12     	; 0x77ba <LCD_vidGotoxy+0x2e>
    77ae:	2b 81       	ldd	r18, Y+3	; 0x03
    77b0:	3c 81       	ldd	r19, Y+4	; 0x04
    77b2:	21 30       	cpi	r18, 0x01	; 1
    77b4:	31 05       	cpc	r19, r1
    77b6:	49 f0       	breq	.+18     	; 0x77ca <LCD_vidGotoxy+0x3e>
    77b8:	0f c0       	rjmp	.+30     	; 0x77d8 <LCD_vidGotoxy+0x4c>
	{
	case 0 : if((u8Numx<16)&&(u8Numx>=0))
    77ba:	89 81       	ldd	r24, Y+1	; 0x01
    77bc:	80 31       	cpi	r24, 0x10	; 16
    77be:	60 f4       	brcc	.+24     	; 0x77d8 <LCD_vidGotoxy+0x4c>
		    LCD_vidSendCommand(0x80+u8Numx);
    77c0:	89 81       	ldd	r24, Y+1	; 0x01
    77c2:	80 58       	subi	r24, 0x80	; 128
    77c4:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
    77c8:	07 c0       	rjmp	.+14     	; 0x77d8 <LCD_vidGotoxy+0x4c>
	        break;

	case 1:if((u8Numx<16)&&(u8Numx>=0))
    77ca:	89 81       	ldd	r24, Y+1	; 0x01
    77cc:	80 31       	cpi	r24, 0x10	; 16
    77ce:	20 f4       	brcc	.+8      	; 0x77d8 <LCD_vidGotoxy+0x4c>
	          LCD_vidSendCommand(0xc0+u8Numx);
    77d0:	89 81       	ldd	r24, Y+1	; 0x01
    77d2:	80 54       	subi	r24, 0x40	; 64
    77d4:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
                break;
	}
}
    77d8:	0f 90       	pop	r0
    77da:	0f 90       	pop	r0
    77dc:	0f 90       	pop	r0
    77de:	0f 90       	pop	r0
    77e0:	cf 91       	pop	r28
    77e2:	df 91       	pop	r29
    77e4:	08 95       	ret

000077e6 <LCD_vidGotoxy4>:
//...........................................................................................
void LCD_vidGotoxy4(uint8 u8Numx,uint8 u8Numy)
{
    77e6:	df 93       	push	r29
    77e8:	cf 93       	push	r28
    77ea:	00 d0       	rcall	.+0      	; 0x77ec <LCD_vidGotoxy4+0x6>
    77ec:	00 d0       	rcall	.+0      	; 0x77ee <LCD_vidGotoxy4+0x8>
    77ee:	cd b7       	in	r28, 0x3d	; 61
    77f0:	de b7       	in	r29, 0x3e	; 62
    77f2:	89 83       	std	Y+1, r24	; 0x01
    77f4:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8Numy)
    77f6:	8a 81       	ldd	r24, Y+2	; 0x02
    77f8:	28 2f       	mov	r18, r24
    77fa:	30 e0       	ldi	r19, 0x00	; 0
    77fc:	3c 83       	std	Y+4, r19	; 0x04
    77fe:	2b 83       	std	Y+3, r18	; 0x03
    7800:	8b 81       	ldd	r24, Y+3	; 0x03
    7802:	9c 81       	ldd	r25, Y+4	; 0x04
    7804:	00 97       	sbiw	r24, 0x00	; 0
    7806:	31 f0       	breq	.+12     	; 0x7814 <LCD_vidGotoxy4+0x2e>
    7808:	2b 81       	ldd	r18, Y+3	; 0x03
    780a:	3c 81       	ldd	r19, Y+4	; 0x04
    780c:	21 30       	cpi	r18, 0x01	; 1
    780e:	31 05       	cpc	r19, r1
    7810:	49 f0       	breq	.+18     	; 0x7824 <LCD_vidGotoxy4+0x3e>
    7812:	0f c0       	rjmp	.+30     	; 0x7832 <LCD_vidGotoxy4+0x4c>
		{
		case 0 : if((u8Numx<16)&&(u8Numx>=0))
    7814:	89 81       	ldd	r24, Y+1	; 0x01
    7816:	80 31       	cpi	r24, 0x10	; 16
    7818:	60 f4       	brcc	.+24     	; 0x7832 <LCD_vidGotoxy4+0x4c>
			LCD_vidSendCommand4(0x80+u8Numx);
    781a:	89 81       	ldd	r24, Y+1	; 0x01
    781c:	80 58       	subi	r24, 0x80	; 128
    781e:	0e 94 61 33 	call	0x66c2	; 0x66c2 <LCD_vidSendCommand4>
    7822:	07 c0       	rjmp	.+14     	; 0x7832 <LCD_vidGotoxy4+0x4c>
		        break;

		case 1:if((u8Numx<16)&&(u8Numx>=0))
    7824:	89 81       	ldd	r24, Y+1	; 0x01
    7826:	80 31       	cpi	r24, 0x10	; 16
    7828:	20 f4       	brcc	.+8      	; 0x7832 <LCD_vidGotoxy4+0x4c>
			LCD_vidSendCommand4(0xc0+u8Numx);
    782a:	89 81       	ldd	r24, Y+1	; 0x01
    782c:	80 54       	subi	r24, 0x40	; 64
    782e:	0e 94 61 33 	call	0x66c2	; 0x66c2 <LCD_vidSendCommand4>
	                break;
		}


}
    7832:	0f 90       	pop	r0
    7834:	0f 90       	pop	r0
    7836:	0f 90       	pop	r0
    7838:	0f 90       	pop	r0
    783a:	cf 91       	pop	r28
    783c:	df 91       	pop	r29
    783e:	08 95       	ret

00007840 <LCD_vidShiftDisplayCursor>:

//.........................................................................................
void LCD_vidShiftDisplayCursor(uint8 u8Direction,uint8 u8ShiftNumber,uint8 u8DisplayOrcursor)

{   uint8 u8CommandValue=0x10;
    7840:	df 93       	push	r29
    7842:	cf 93       	push	r28
    7844:	cd b7       	in	r28, 0x3d	; 61
    7846:	de b7       	in	r29, 0x3e	; 62
    7848:	66 97       	sbiw	r28, 0x16	; 22
    784a:	0f b6       	in	r0, 0x3f	; 63
    784c:	f8 94       	cli
    784e:	de bf       	out	0x3e, r29	; 62
    7850:	0f be       	out	0x3f, r0	; 63
    7852:	cd bf       	out	0x3d, r28	; 61
    7854:	88 8b       	std	Y+16, r24	; 0x10
    7856:	69 8b       	std	Y+17, r22	; 0x11
    7858:	4a 8b       	std	Y+18, r20	; 0x12
    785a:	80 e1       	ldi	r24, 0x10	; 16
    785c:	8f 87       	std	Y+15, r24	; 0x0f
	switch(u8Direction)
    785e:	88 89       	ldd	r24, Y+16	; 0x10
    7860:	28 2f       	mov	r18, r24
    7862:	30 e0       	ldi	r19, 0x00	; 0
    7864:	3e 8b       	std	Y+22, r19	; 0x16
    7866:	2d 8b       	std	Y+21, r18	; 0x15
    7868:	8d 89       	ldd	r24, Y+21	; 0x15
    786a:	9e 89       	ldd	r25, Y+22	; 0x16
    786c:	00 97       	sbiw	r24, 0x00	; 0
    786e:	49 f0       	breq	.+18     	; 0x7882 <LCD_vidShiftDisplayCursor+0x42>
    7870:	2d 89       	ldd	r18, Y+21	; 0x15
    7872:	3e 89       	ldd	r19, Y+22	; 0x16
    7874:	21 30       	cpi	r18, 0x01	; 1
    7876:	31 05       	cpc	r19, r1
    7878:	39 f4       	brne	.+14     	; 0x7888 <LCD_vidShiftDisplayCursor+0x48>
	{
	case Right:SET_BIT(u8CommandValue,2);
    787a:	8f 85       	ldd	r24, Y+15	; 0x0f
    787c:	84 60       	ori	r24, 0x04	; 4
    787e:	8f 87       	std	Y+15, r24	; 0x0f
    7880:	03 c0       	rjmp	.+6      	; 0x7888 <LCD_vidShiftDisplayCursor+0x48>
	            break;

	case Left:CLR_BIT(u8CommandValue,2);
    7882:	8f 85       	ldd	r24, Y+15	; 0x0f
    7884:	8b 7f       	andi	r24, 0xFB	; 251
    7886:	8f 87       	std	Y+15, r24	; 0x0f
	          break;

	}

	switch(u8DisplayOrcursor)
    7888:	8a 89       	ldd	r24, Y+18	; 0x12
    788a:	28 2f       	mov	r18, r24
    788c:	30 e0       	ldi	r19, 0x00	; 0
    788e:	3c 8b       	std	Y+20, r19	; 0x14
    7890:	2b 8b       	std	Y+19, r18	; 0x13
    7892:	8b 89       	ldd	r24, Y+19	; 0x13
    7894:	9c 89       	ldd	r25, Y+20	; 0x14
    7896:	00 97       	sbiw	r24, 0x00	; 0
    7898:	51 f0       	breq	.+20     	; 0x78ae <LCD_vidShiftDisplayCursor+0x6e>
    789a:	2b 89       	ldd	r18, Y+19	; 0x13
    789c:	3c 89       	ldd	r19, Y+20	; 0x14
    789e:	21 30       	cpi	r18, 0x01	; 1
    78a0:	31 05       	cpc	r19, r1
    78a2:	09 f0       	breq	.+2      	; 0x78a6 <LCD_vidShiftDisplayCursor+0x66>
    78a4:	80 c0       	rjmp	.+256    	; 0x79a6 <LCD_vidShiftDisplayCursor+0x166>
	{
	case Display:SET_BIT(u8CommandValue,3);
    78a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    78a8:	88 60       	ori	r24, 0x08	; 8
    78aa:	8f 87       	std	Y+15, r24	; 0x0f
    78ac:	7c c0       	rjmp	.+248    	; 0x79a6 <LCD_vidShiftDisplayCursor+0x166>
	               break;
	case Cursor:CLR_BIT(u8CommandValue,3);
    78ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    78b0:	87 7f       	andi	r24, 0xF7	; 247
    78b2:	8f 87       	std	Y+15, r24	; 0x0f
    78b4:	78 c0       	rjmp	.+240    	; 0x79a6 <LCD_vidShiftDisplayCursor+0x166>
                 break;
	}

	while(u8ShiftNumber!=0)
	{
		 LCD_vidSendCommand(u8CommandValue);
    78b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    78b8:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
		 u8ShiftNumber--;
    78bc:	89 89       	ldd	r24, Y+17	; 0x11
    78be:	81 50       	subi	r24, 0x01	; 1
    78c0:	89 8b       	std	Y+17, r24	; 0x11
    78c2:	80 e0       	ldi	r24, 0x00	; 0
    78c4:	90 e0       	ldi	r25, 0x00	; 0
    78c6:	a0 e2       	ldi	r26, 0x20	; 32
    78c8:	b1 e4       	ldi	r27, 0x41	; 65
    78ca:	8b 87       	std	Y+11, r24	; 0x0b
    78cc:	9c 87       	std	Y+12, r25	; 0x0c
    78ce:	ad 87       	std	Y+13, r26	; 0x0d
    78d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    78d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    78d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    78d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    78d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    78da:	20 e0       	ldi	r18, 0x00	; 0
    78dc:	30 e0       	ldi	r19, 0x00	; 0
    78de:	4a ef       	ldi	r20, 0xFA	; 250
    78e0:	54 e4       	ldi	r21, 0x44	; 68
    78e2:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    78e6:	dc 01       	movw	r26, r24
    78e8:	cb 01       	movw	r24, r22
    78ea:	8f 83       	std	Y+7, r24	; 0x07
    78ec:	98 87       	std	Y+8, r25	; 0x08
    78ee:	a9 87       	std	Y+9, r26	; 0x09
    78f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    78f2:	6f 81       	ldd	r22, Y+7	; 0x07
    78f4:	78 85       	ldd	r23, Y+8	; 0x08
    78f6:	89 85       	ldd	r24, Y+9	; 0x09
    78f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    78fa:	20 e0       	ldi	r18, 0x00	; 0
    78fc:	30 e0       	ldi	r19, 0x00	; 0
    78fe:	40 e8       	ldi	r20, 0x80	; 128
    7900:	5f e3       	ldi	r21, 0x3F	; 63
    7902:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    7906:	88 23       	and	r24, r24
    7908:	2c f4       	brge	.+10     	; 0x7914 <LCD_vidShiftDisplayCursor+0xd4>
		__ticks = 1;
    790a:	81 e0       	ldi	r24, 0x01	; 1
    790c:	90 e0       	ldi	r25, 0x00	; 0
    790e:	9e 83       	std	Y+6, r25	; 0x06
    7910:	8d 83       	std	Y+5, r24	; 0x05
    7912:	3f c0       	rjmp	.+126    	; 0x7992 <LCD_vidShiftDisplayCursor+0x152>
	else if (__tmp > 65535)
    7914:	6f 81       	ldd	r22, Y+7	; 0x07
    7916:	78 85       	ldd	r23, Y+8	; 0x08
    7918:	89 85       	ldd	r24, Y+9	; 0x09
    791a:	9a 85       	ldd	r25, Y+10	; 0x0a
    791c:	20 e0       	ldi	r18, 0x00	; 0
    791e:	3f ef       	ldi	r19, 0xFF	; 255
    7920:	4f e7       	ldi	r20, 0x7F	; 127
    7922:	57 e4       	ldi	r21, 0x47	; 71
    7924:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    7928:	18 16       	cp	r1, r24
    792a:	4c f5       	brge	.+82     	; 0x797e <LCD_vidShiftDisplayCursor+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    792c:	6b 85       	ldd	r22, Y+11	; 0x0b
    792e:	7c 85       	ldd	r23, Y+12	; 0x0c
    7930:	8d 85       	ldd	r24, Y+13	; 0x0d
    7932:	9e 85       	ldd	r25, Y+14	; 0x0e
    7934:	20 e0       	ldi	r18, 0x00	; 0
    7936:	30 e0       	ldi	r19, 0x00	; 0
    7938:	40 e2       	ldi	r20, 0x20	; 32
    793a:	51 e4       	ldi	r21, 0x41	; 65
    793c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    7940:	dc 01       	movw	r26, r24
    7942:	cb 01       	movw	r24, r22
    7944:	bc 01       	movw	r22, r24
    7946:	cd 01       	movw	r24, r26
    7948:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    794c:	dc 01       	movw	r26, r24
    794e:	cb 01       	movw	r24, r22
    7950:	9e 83       	std	Y+6, r25	; 0x06
    7952:	8d 83       	std	Y+5, r24	; 0x05
    7954:	0f c0       	rjmp	.+30     	; 0x7974 <LCD_vidShiftDisplayCursor+0x134>
    7956:	88 ec       	ldi	r24, 0xC8	; 200
    7958:	90 e0       	ldi	r25, 0x00	; 0
    795a:	9c 83       	std	Y+4, r25	; 0x04
    795c:	8b 83       	std	Y+3, r24	; 0x03
    795e:	8b 81       	ldd	r24, Y+3	; 0x03
    7960:	9c 81       	ldd	r25, Y+4	; 0x04
    7962:	01 97       	sbiw	r24, 0x01	; 1
    7964:	f1 f7       	brne	.-4      	; 0x7962 <LCD_vidShiftDisplayCursor+0x122>
    7966:	9c 83       	std	Y+4, r25	; 0x04
    7968:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    796a:	8d 81       	ldd	r24, Y+5	; 0x05
    796c:	9e 81       	ldd	r25, Y+6	; 0x06
    796e:	01 97       	sbiw	r24, 0x01	; 1
    7970:	9e 83       	std	Y+6, r25	; 0x06
    7972:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7974:	8d 81       	ldd	r24, Y+5	; 0x05
    7976:	9e 81       	ldd	r25, Y+6	; 0x06
    7978:	00 97       	sbiw	r24, 0x00	; 0
    797a:	69 f7       	brne	.-38     	; 0x7956 <LCD_vidShiftDisplayCursor+0x116>
    797c:	14 c0       	rjmp	.+40     	; 0x79a6 <LCD_vidShiftDisplayCursor+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    797e:	6f 81       	ldd	r22, Y+7	; 0x07
    7980:	78 85       	ldd	r23, Y+8	; 0x08
    7982:	89 85       	ldd	r24, Y+9	; 0x09
    7984:	9a 85       	ldd	r25, Y+10	; 0x0a
    7986:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    798a:	dc 01       	movw	r26, r24
    798c:	cb 01       	movw	r24, r22
    798e:	9e 83       	std	Y+6, r25	; 0x06
    7990:	8d 83       	std	Y+5, r24	; 0x05
    7992:	8d 81       	ldd	r24, Y+5	; 0x05
    7994:	9e 81       	ldd	r25, Y+6	; 0x06
    7996:	9a 83       	std	Y+2, r25	; 0x02
    7998:	89 83       	std	Y+1, r24	; 0x01
    799a:	89 81       	ldd	r24, Y+1	; 0x01
    799c:	9a 81       	ldd	r25, Y+2	; 0x02
    799e:	01 97       	sbiw	r24, 0x01	; 1
    79a0:	f1 f7       	brne	.-4      	; 0x799e <LCD_vidShiftDisplayCursor+0x15e>
    79a2:	9a 83       	std	Y+2, r25	; 0x02
    79a4:	89 83       	std	Y+1, r24	; 0x01
	               break;
	case Cursor:CLR_BIT(u8CommandValue,3);
                 break;
	}

	while(u8ShiftNumber!=0)
    79a6:	89 89       	ldd	r24, Y+17	; 0x11
    79a8:	88 23       	and	r24, r24
    79aa:	09 f0       	breq	.+2      	; 0x79ae <LCD_vidShiftDisplayCursor+0x16e>
    79ac:	84 cf       	rjmp	.-248    	; 0x78b6 <LCD_vidShiftDisplayCursor+0x76>
		 LCD_vidSendCommand(u8CommandValue);
		 u8ShiftNumber--;
		 _delay_ms(10);
	}

}
    79ae:	66 96       	adiw	r28, 0x16	; 22
    79b0:	0f b6       	in	r0, 0x3f	; 63
    79b2:	f8 94       	cli
    79b4:	de bf       	out	0x3e, r29	; 62
    79b6:	0f be       	out	0x3f, r0	; 63
    79b8:	cd bf       	out	0x3d, r28	; 61
    79ba:	cf 91       	pop	r28
    79bc:	df 91       	pop	r29
    79be:	08 95       	ret

000079c0 <LCD_vidShiftDisplayCursor4>:

//.....................................................................................
void LCD_vidShiftDisplayCursor4(uint8 u8Direction,uint8 u8ShiftNumber,uint8 u8DisplayOrcursor)
{
    79c0:	df 93       	push	r29
    79c2:	cf 93       	push	r28
    79c4:	cd b7       	in	r28, 0x3d	; 61
    79c6:	de b7       	in	r29, 0x3e	; 62
    79c8:	28 97       	sbiw	r28, 0x08	; 8
    79ca:	0f b6       	in	r0, 0x3f	; 63
    79cc:	f8 94       	cli
    79ce:	de bf       	out	0x3e, r29	; 62
    79d0:	0f be       	out	0x3f, r0	; 63
    79d2:	cd bf       	out	0x3d, r28	; 61
    79d4:	8a 83       	std	Y+2, r24	; 0x02
    79d6:	6b 83       	std	Y+3, r22	; 0x03
    79d8:	4c 83       	std	Y+4, r20	; 0x04
	 uint8 u8CommandValue=0x10;
    79da:	80 e1       	ldi	r24, 0x10	; 16
    79dc:	89 83       	std	Y+1, r24	; 0x01
		switch( u8Direction)
    79de:	8a 81       	ldd	r24, Y+2	; 0x02
    79e0:	28 2f       	mov	r18, r24
    79e2:	30 e0       	ldi	r19, 0x00	; 0
    79e4:	38 87       	std	Y+8, r19	; 0x08
    79e6:	2f 83       	std	Y+7, r18	; 0x07
    79e8:	8f 81       	ldd	r24, Y+7	; 0x07
    79ea:	98 85       	ldd	r25, Y+8	; 0x08
    79ec:	00 97       	sbiw	r24, 0x00	; 0
    79ee:	49 f0       	breq	.+18     	; 0x7a02 <LCD_vidShiftDisplayCursor4+0x42>
    79f0:	2f 81       	ldd	r18, Y+7	; 0x07
    79f2:	38 85       	ldd	r19, Y+8	; 0x08
    79f4:	21 30       	cpi	r18, 0x01	; 1
    79f6:	31 05       	cpc	r19, r1
    79f8:	39 f4       	brne	.+14     	; 0x7a08 <LCD_vidShiftDisplayCursor4+0x48>
		{
		case Right:SET_BIT(u8CommandValue,2);
    79fa:	89 81       	ldd	r24, Y+1	; 0x01
    79fc:	84 60       	ori	r24, 0x04	; 4
    79fe:	89 83       	std	Y+1, r24	; 0x01
    7a00:	03 c0       	rjmp	.+6      	; 0x7a08 <LCD_vidShiftDisplayCursor4+0x48>
		            break;

		case Left:CLR_BIT(u8CommandValue,2);
    7a02:	89 81       	ldd	r24, Y+1	; 0x01
    7a04:	8b 7f       	andi	r24, 0xFB	; 251
    7a06:	89 83       	std	Y+1, r24	; 0x01
		          break;

		}

		switch( u8DisplayOrcursor)
    7a08:	8c 81       	ldd	r24, Y+4	; 0x04
    7a0a:	28 2f       	mov	r18, r24
    7a0c:	30 e0       	ldi	r19, 0x00	; 0
    7a0e:	3e 83       	std	Y+6, r19	; 0x06
    7a10:	2d 83       	std	Y+5, r18	; 0x05
    7a12:	8d 81       	ldd	r24, Y+5	; 0x05
    7a14:	9e 81       	ldd	r25, Y+6	; 0x06
    7a16:	00 97       	sbiw	r24, 0x00	; 0
    7a18:	49 f0       	breq	.+18     	; 0x7a2c <LCD_vidShiftDisplayCursor4+0x6c>
    7a1a:	2d 81       	ldd	r18, Y+5	; 0x05
    7a1c:	3e 81       	ldd	r19, Y+6	; 0x06
    7a1e:	21 30       	cpi	r18, 0x01	; 1
    7a20:	31 05       	cpc	r19, r1
    7a22:	71 f4       	brne	.+28     	; 0x7a40 <LCD_vidShiftDisplayCursor4+0x80>
		{
		case Display:SET_BIT(u8CommandValue,3);
    7a24:	89 81       	ldd	r24, Y+1	; 0x01
    7a26:	88 60       	ori	r24, 0x08	; 8
    7a28:	89 83       	std	Y+1, r24	; 0x01
    7a2a:	0a c0       	rjmp	.+20     	; 0x7a40 <LCD_vidShiftDisplayCursor4+0x80>
		               break;
		case Cursor:CLR_BIT(u8CommandValue,3);
    7a2c:	89 81       	ldd	r24, Y+1	; 0x01
    7a2e:	87 7f       	andi	r24, 0xF7	; 247
    7a30:	89 83       	std	Y+1, r24	; 0x01
    7a32:	06 c0       	rjmp	.+12     	; 0x7a40 <LCD_vidShiftDisplayCursor4+0x80>
	                 break;
		}
		while(u8ShiftNumber!=0)
		{
			 LCD_vidSendCommand4(u8CommandValue);
    7a34:	89 81       	ldd	r24, Y+1	; 0x01
    7a36:	0e 94 61 33 	call	0x66c2	; 0x66c2 <LCD_vidSendCommand4>
			 u8ShiftNumber--;
    7a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    7a3c:	81 50       	subi	r24, 0x01	; 1
    7a3e:	8b 83       	std	Y+3, r24	; 0x03
		case Display:SET_BIT(u8CommandValue,3);
		               break;
		case Cursor:CLR_BIT(u8CommandValue,3);
	                 break;
		}
		while(u8ShiftNumber!=0)
    7a40:	8b 81       	ldd	r24, Y+3	; 0x03
    7a42:	88 23       	and	r24, r24
    7a44:	b9 f7       	brne	.-18     	; 0x7a34 <LCD_vidShiftDisplayCursor4+0x74>
		{
			 LCD_vidSendCommand4(u8CommandValue);
			 u8ShiftNumber--;
		}

}
    7a46:	28 96       	adiw	r28, 0x08	; 8
    7a48:	0f b6       	in	r0, 0x3f	; 63
    7a4a:	f8 94       	cli
    7a4c:	de bf       	out	0x3e, r29	; 62
    7a4e:	0f be       	out	0x3f, r0	; 63
    7a50:	cd bf       	out	0x3d, r28	; 61
    7a52:	cf 91       	pop	r28
    7a54:	df 91       	pop	r29
    7a56:	08 95       	ret

00007a58 <LCD_vidPrint>:

//.......................................................................................
void LCD_vidPrint(uint8 str[])
{
    7a58:	df 93       	push	r29
    7a5a:	cf 93       	push	r28
    7a5c:	00 d0       	rcall	.+0      	; 0x7a5e <LCD_vidPrint+0x6>
    7a5e:	0f 92       	push	r0
    7a60:	cd b7       	in	r28, 0x3d	; 61
    7a62:	de b7       	in	r29, 0x3e	; 62
    7a64:	9b 83       	std	Y+3, r25	; 0x03
    7a66:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    7a68:	19 82       	std	Y+1, r1	; 0x01
    7a6a:	0f c0       	rjmp	.+30     	; 0x7a8a <LCD_vidPrint+0x32>
	while(str[i]!=0)
	{
		LCD_vidWriteCharacter(str[i++]);
    7a6c:	89 81       	ldd	r24, Y+1	; 0x01
    7a6e:	28 2f       	mov	r18, r24
    7a70:	30 e0       	ldi	r19, 0x00	; 0
    7a72:	8a 81       	ldd	r24, Y+2	; 0x02
    7a74:	9b 81       	ldd	r25, Y+3	; 0x03
    7a76:	fc 01       	movw	r30, r24
    7a78:	e2 0f       	add	r30, r18
    7a7a:	f3 1f       	adc	r31, r19
    7a7c:	90 81       	ld	r25, Z
    7a7e:	89 81       	ldd	r24, Y+1	; 0x01
    7a80:	8f 5f       	subi	r24, 0xFF	; 255
    7a82:	89 83       	std	Y+1, r24	; 0x01
    7a84:	89 2f       	mov	r24, r25
    7a86:	0e 94 4c 32 	call	0x6498	; 0x6498 <LCD_vidWriteCharacter>

//.......................................................................................
void LCD_vidPrint(uint8 str[])
{
	uint8 i=0;
	while(str[i]!=0)
    7a8a:	89 81       	ldd	r24, Y+1	; 0x01
    7a8c:	28 2f       	mov	r18, r24
    7a8e:	30 e0       	ldi	r19, 0x00	; 0
    7a90:	8a 81       	ldd	r24, Y+2	; 0x02
    7a92:	9b 81       	ldd	r25, Y+3	; 0x03
    7a94:	fc 01       	movw	r30, r24
    7a96:	e2 0f       	add	r30, r18
    7a98:	f3 1f       	adc	r31, r19
    7a9a:	80 81       	ld	r24, Z
    7a9c:	88 23       	and	r24, r24
    7a9e:	31 f7       	brne	.-52     	; 0x7a6c <LCD_vidPrint+0x14>
	{
		LCD_vidWriteCharacter(str[i++]);
	}
}
    7aa0:	0f 90       	pop	r0
    7aa2:	0f 90       	pop	r0
    7aa4:	0f 90       	pop	r0
    7aa6:	cf 91       	pop	r28
    7aa8:	df 91       	pop	r29
    7aaa:	08 95       	ret

00007aac <LCD_vidPrintInTwoLines>:
//.........................................................................................
void LCD_vidPrintInTwoLines(uint8 str[])
{
    7aac:	df 93       	push	r29
    7aae:	cf 93       	push	r28
    7ab0:	00 d0       	rcall	.+0      	; 0x7ab2 <LCD_vidPrintInTwoLines+0x6>
    7ab2:	0f 92       	push	r0
    7ab4:	cd b7       	in	r28, 0x3d	; 61
    7ab6:	de b7       	in	r29, 0x3e	; 62
    7ab8:	9b 83       	std	Y+3, r25	; 0x03
    7aba:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i=0;
    7abc:	19 82       	std	Y+1, r1	; 0x01
    7abe:	5b c0       	rjmp	.+182    	; 0x7b76 <LCD_vidPrintInTwoLines+0xca>
		while(str[i]!=0)
		{
			if(i<=15){
    7ac0:	89 81       	ldd	r24, Y+1	; 0x01
    7ac2:	80 31       	cpi	r24, 0x10	; 16
    7ac4:	a0 f4       	brcc	.+40     	; 0x7aee <LCD_vidPrintInTwoLines+0x42>

			LCD_vidGotoxy(i,0);
    7ac6:	89 81       	ldd	r24, Y+1	; 0x01
    7ac8:	60 e0       	ldi	r22, 0x00	; 0
    7aca:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
			LCD_vidWriteCharacter(str[i++]);
    7ace:	89 81       	ldd	r24, Y+1	; 0x01
    7ad0:	28 2f       	mov	r18, r24
    7ad2:	30 e0       	ldi	r19, 0x00	; 0
    7ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    7ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    7ad8:	fc 01       	movw	r30, r24
    7ada:	e2 0f       	add	r30, r18
    7adc:	f3 1f       	adc	r31, r19
    7ade:	90 81       	ld	r25, Z
    7ae0:	89 81       	ldd	r24, Y+1	; 0x01
    7ae2:	8f 5f       	subi	r24, 0xFF	; 255
    7ae4:	89 83       	std	Y+1, r24	; 0x01
    7ae6:	89 2f       	mov	r24, r25
    7ae8:	0e 94 4c 32 	call	0x6498	; 0x6498 <LCD_vidWriteCharacter>
    7aec:	44 c0       	rjmp	.+136    	; 0x7b76 <LCD_vidPrintInTwoLines+0xca>
		}
			else if(i<=31)
    7aee:	89 81       	ldd	r24, Y+1	; 0x01
    7af0:	80 32       	cpi	r24, 0x20	; 32
    7af2:	a8 f4       	brcc	.+42     	; 0x7b1e <LCD_vidPrintInTwoLines+0x72>
			{

				LCD_vidGotoxy(i-16,1);
    7af4:	89 81       	ldd	r24, Y+1	; 0x01
    7af6:	80 51       	subi	r24, 0x10	; 16
    7af8:	61 e0       	ldi	r22, 0x01	; 1
    7afa:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
				LCD_vidWriteCharacter(str[i++]);
    7afe:	89 81       	ldd	r24, Y+1	; 0x01
    7b00:	28 2f       	mov	r18, r24
    7b02:	30 e0       	ldi	r19, 0x00	; 0
    7b04:	8a 81       	ldd	r24, Y+2	; 0x02
    7b06:	9b 81       	ldd	r25, Y+3	; 0x03
    7b08:	fc 01       	movw	r30, r24
    7b0a:	e2 0f       	add	r30, r18
    7b0c:	f3 1f       	adc	r31, r19
    7b0e:	90 81       	ld	r25, Z
    7b10:	89 81       	ldd	r24, Y+1	; 0x01
    7b12:	8f 5f       	subi	r24, 0xFF	; 255
    7b14:	89 83       	std	Y+1, r24	; 0x01
    7b16:	89 2f       	mov	r24, r25
    7b18:	0e 94 4c 32 	call	0x6498	; 0x6498 <LCD_vidWriteCharacter>
    7b1c:	2c c0       	rjmp	.+88     	; 0x7b76 <LCD_vidPrintInTwoLines+0xca>

			}
			else if(i>31)
    7b1e:	89 81       	ldd	r24, Y+1	; 0x01
    7b20:	80 32       	cpi	r24, 0x20	; 32
    7b22:	a8 f0       	brcs	.+42     	; 0x7b4e <LCD_vidPrintInTwoLines+0xa2>
				{
					LCD_vidGotoxy(i-32,0);
    7b24:	89 81       	ldd	r24, Y+1	; 0x01
    7b26:	80 52       	subi	r24, 0x20	; 32
    7b28:	60 e0       	ldi	r22, 0x00	; 0
    7b2a:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
					LCD_vidWriteCharacter(str[i++]);
    7b2e:	89 81       	ldd	r24, Y+1	; 0x01
    7b30:	28 2f       	mov	r18, r24
    7b32:	30 e0       	ldi	r19, 0x00	; 0
    7b34:	8a 81       	ldd	r24, Y+2	; 0x02
    7b36:	9b 81       	ldd	r25, Y+3	; 0x03
    7b38:	fc 01       	movw	r30, r24
    7b3a:	e2 0f       	add	r30, r18
    7b3c:	f3 1f       	adc	r31, r19
    7b3e:	90 81       	ld	r25, Z
    7b40:	89 81       	ldd	r24, Y+1	; 0x01
    7b42:	8f 5f       	subi	r24, 0xFF	; 255
    7b44:	89 83       	std	Y+1, r24	; 0x01
    7b46:	89 2f       	mov	r24, r25
    7b48:	0e 94 4c 32 	call	0x6498	; 0x6498 <LCD_vidWriteCharacter>
    7b4c:	14 c0       	rjmp	.+40     	; 0x7b76 <LCD_vidPrintInTwoLines+0xca>
				}
			else
			{

				LCD_vidGotoxy(i-64,1);
    7b4e:	89 81       	ldd	r24, Y+1	; 0x01
    7b50:	80 54       	subi	r24, 0x40	; 64
    7b52:	61 e0       	ldi	r22, 0x01	; 1
    7b54:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
				LCD_vidWriteCharacter(str[i++]);
    7b58:	89 81       	ldd	r24, Y+1	; 0x01
    7b5a:	28 2f       	mov	r18, r24
    7b5c:	30 e0       	ldi	r19, 0x00	; 0
    7b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    7b60:	9b 81       	ldd	r25, Y+3	; 0x03
    7b62:	fc 01       	movw	r30, r24
    7b64:	e2 0f       	add	r30, r18
    7b66:	f3 1f       	adc	r31, r19
    7b68:	90 81       	ld	r25, Z
    7b6a:	89 81       	ldd	r24, Y+1	; 0x01
    7b6c:	8f 5f       	subi	r24, 0xFF	; 255
    7b6e:	89 83       	std	Y+1, r24	; 0x01
    7b70:	89 2f       	mov	r24, r25
    7b72:	0e 94 4c 32 	call	0x6498	; 0x6498 <LCD_vidWriteCharacter>
//.........................................................................................
void LCD_vidPrintInTwoLines(uint8 str[])
{

	uint8 i=0;
		while(str[i]!=0)
    7b76:	89 81       	ldd	r24, Y+1	; 0x01
    7b78:	28 2f       	mov	r18, r24
    7b7a:	30 e0       	ldi	r19, 0x00	; 0
    7b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    7b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    7b80:	fc 01       	movw	r30, r24
    7b82:	e2 0f       	add	r30, r18
    7b84:	f3 1f       	adc	r31, r19
    7b86:	80 81       	ld	r24, Z
    7b88:	88 23       	and	r24, r24
    7b8a:	09 f0       	breq	.+2      	; 0x7b8e <LCD_vidPrintInTwoLines+0xe2>
    7b8c:	99 cf       	rjmp	.-206    	; 0x7ac0 <LCD_vidPrintInTwoLines+0x14>

				}

}

}
    7b8e:	0f 90       	pop	r0
    7b90:	0f 90       	pop	r0
    7b92:	0f 90       	pop	r0
    7b94:	cf 91       	pop	r28
    7b96:	df 91       	pop	r29
    7b98:	08 95       	ret

00007b9a <LCD_vidPrint4>:
//.........................................................................................
void LCD_vidPrint4(uint8 str[])
{
    7b9a:	df 93       	push	r29
    7b9c:	cf 93       	push	r28
    7b9e:	00 d0       	rcall	.+0      	; 0x7ba0 <LCD_vidPrint4+0x6>
    7ba0:	0f 92       	push	r0
    7ba2:	cd b7       	in	r28, 0x3d	; 61
    7ba4:	de b7       	in	r29, 0x3e	; 62
    7ba6:	9b 83       	std	Y+3, r25	; 0x03
    7ba8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    7baa:	19 82       	std	Y+1, r1	; 0x01
    7bac:	0f c0       	rjmp	.+30     	; 0x7bcc <LCD_vidPrint4+0x32>
	while(str[i]!=0)
	{
		LCD_vidWriteCharacter4(str[i++]);
    7bae:	89 81       	ldd	r24, Y+1	; 0x01
    7bb0:	28 2f       	mov	r18, r24
    7bb2:	30 e0       	ldi	r19, 0x00	; 0
    7bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    7bb6:	9b 81       	ldd	r25, Y+3	; 0x03
    7bb8:	fc 01       	movw	r30, r24
    7bba:	e2 0f       	add	r30, r18
    7bbc:	f3 1f       	adc	r31, r19
    7bbe:	90 81       	ld	r25, Z
    7bc0:	89 81       	ldd	r24, Y+1	; 0x01
    7bc2:	8f 5f       	subi	r24, 0xFF	; 255
    7bc4:	89 83       	std	Y+1, r24	; 0x01
    7bc6:	89 2f       	mov	r24, r25
    7bc8:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <LCD_vidWriteCharacter4>
}
//.........................................................................................
void LCD_vidPrint4(uint8 str[])
{
	uint8 i=0;
	while(str[i]!=0)
    7bcc:	89 81       	ldd	r24, Y+1	; 0x01
    7bce:	28 2f       	mov	r18, r24
    7bd0:	30 e0       	ldi	r19, 0x00	; 0
    7bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    7bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    7bd6:	fc 01       	movw	r30, r24
    7bd8:	e2 0f       	add	r30, r18
    7bda:	f3 1f       	adc	r31, r19
    7bdc:	80 81       	ld	r24, Z
    7bde:	88 23       	and	r24, r24
    7be0:	31 f7       	brne	.-52     	; 0x7bae <LCD_vidPrint4+0x14>
	{
		LCD_vidWriteCharacter4(str[i++]);
	}
}
    7be2:	0f 90       	pop	r0
    7be4:	0f 90       	pop	r0
    7be6:	0f 90       	pop	r0
    7be8:	cf 91       	pop	r28
    7bea:	df 91       	pop	r29
    7bec:	08 95       	ret

00007bee <LCD_vidPrintInTwoLines4>:

//......................................................................................
void LCD_vidPrintInTwoLines4(uint8 str[])
{
    7bee:	df 93       	push	r29
    7bf0:	cf 93       	push	r28
    7bf2:	00 d0       	rcall	.+0      	; 0x7bf4 <LCD_vidPrintInTwoLines4+0x6>
    7bf4:	0f 92       	push	r0
    7bf6:	cd b7       	in	r28, 0x3d	; 61
    7bf8:	de b7       	in	r29, 0x3e	; 62
    7bfa:	9b 83       	std	Y+3, r25	; 0x03
    7bfc:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i=0;
    7bfe:	19 82       	std	Y+1, r1	; 0x01
    7c00:	2b c0       	rjmp	.+86     	; 0x7c58 <LCD_vidPrintInTwoLines4+0x6a>
		while(str[i]!=0)
		{
			if(i<=15)
    7c02:	89 81       	ldd	r24, Y+1	; 0x01
    7c04:	80 31       	cpi	r24, 0x10	; 16
    7c06:	a0 f4       	brcc	.+40     	; 0x7c30 <LCD_vidPrintInTwoLines4+0x42>
			{

			LCD_vidGotoxy4(i,0);
    7c08:	89 81       	ldd	r24, Y+1	; 0x01
    7c0a:	60 e0       	ldi	r22, 0x00	; 0
    7c0c:	0e 94 f3 3b 	call	0x77e6	; 0x77e6 <LCD_vidGotoxy4>
			LCD_vidWriteCharacter4(str[i++]);
    7c10:	89 81       	ldd	r24, Y+1	; 0x01
    7c12:	28 2f       	mov	r18, r24
    7c14:	30 e0       	ldi	r19, 0x00	; 0
    7c16:	8a 81       	ldd	r24, Y+2	; 0x02
    7c18:	9b 81       	ldd	r25, Y+3	; 0x03
    7c1a:	fc 01       	movw	r30, r24
    7c1c:	e2 0f       	add	r30, r18
    7c1e:	f3 1f       	adc	r31, r19
    7c20:	90 81       	ld	r25, Z
    7c22:	89 81       	ldd	r24, Y+1	; 0x01
    7c24:	8f 5f       	subi	r24, 0xFF	; 255
    7c26:	89 83       	std	Y+1, r24	; 0x01
    7c28:	89 2f       	mov	r24, r25
    7c2a:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <LCD_vidWriteCharacter4>
    7c2e:	14 c0       	rjmp	.+40     	; 0x7c58 <LCD_vidPrintInTwoLines4+0x6a>
		}
			else
			{
				LCD_vidGotoxy4(i-16,1);
    7c30:	89 81       	ldd	r24, Y+1	; 0x01
    7c32:	80 51       	subi	r24, 0x10	; 16
    7c34:	61 e0       	ldi	r22, 0x01	; 1
    7c36:	0e 94 f3 3b 	call	0x77e6	; 0x77e6 <LCD_vidGotoxy4>
				LCD_vidWriteCharacter4(str[i++]);
    7c3a:	89 81       	ldd	r24, Y+1	; 0x01
    7c3c:	28 2f       	mov	r18, r24
    7c3e:	30 e0       	ldi	r19, 0x00	; 0
    7c40:	8a 81       	ldd	r24, Y+2	; 0x02
    7c42:	9b 81       	ldd	r25, Y+3	; 0x03
    7c44:	fc 01       	movw	r30, r24
    7c46:	e2 0f       	add	r30, r18
    7c48:	f3 1f       	adc	r31, r19
    7c4a:	90 81       	ld	r25, Z
    7c4c:	89 81       	ldd	r24, Y+1	; 0x01
    7c4e:	8f 5f       	subi	r24, 0xFF	; 255
    7c50:	89 83       	std	Y+1, r24	; 0x01
    7c52:	89 2f       	mov	r24, r25
    7c54:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <LCD_vidWriteCharacter4>
//......................................................................................
void LCD_vidPrintInTwoLines4(uint8 str[])
{

	uint8 i=0;
		while(str[i]!=0)
    7c58:	89 81       	ldd	r24, Y+1	; 0x01
    7c5a:	28 2f       	mov	r18, r24
    7c5c:	30 e0       	ldi	r19, 0x00	; 0
    7c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    7c60:	9b 81       	ldd	r25, Y+3	; 0x03
    7c62:	fc 01       	movw	r30, r24
    7c64:	e2 0f       	add	r30, r18
    7c66:	f3 1f       	adc	r31, r19
    7c68:	80 81       	ld	r24, Z
    7c6a:	88 23       	and	r24, r24
    7c6c:	51 f6       	brne	.-108    	; 0x7c02 <LCD_vidPrintInTwoLines4+0x14>

			}

		}

}
    7c6e:	0f 90       	pop	r0
    7c70:	0f 90       	pop	r0
    7c72:	0f 90       	pop	r0
    7c74:	cf 91       	pop	r28
    7c76:	df 91       	pop	r29
    7c78:	08 95       	ret

00007c7a <Buzzer_Init>:
#include"BUZZER.h"

void Buzzer_Init(void)
{
    7c7a:	df 93       	push	r29
    7c7c:	cf 93       	push	r28
    7c7e:	cd b7       	in	r28, 0x3d	; 61
    7c80:	de b7       	in	r29, 0x3e	; 62
	DIO_void_Set_Pin_Dirction(BUZZER_PORT,BUZZER_PIN,OUTPUT);
    7c82:	84 e0       	ldi	r24, 0x04	; 4
    7c84:	67 e0       	ldi	r22, 0x07	; 7
    7c86:	41 e0       	ldi	r20, 0x01	; 1
    7c88:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
}
    7c8c:	cf 91       	pop	r28
    7c8e:	df 91       	pop	r29
    7c90:	08 95       	ret

00007c92 <Buzzer_On>:
void Buzzer_On(void)
{
    7c92:	df 93       	push	r29
    7c94:	cf 93       	push	r28
    7c96:	cd b7       	in	r28, 0x3d	; 61
    7c98:	de b7       	in	r29, 0x3e	; 62
DIO_void_Set_Pin_Value(BUZZER_PORT,BUZZER_PIN,HIGH);
    7c9a:	84 e0       	ldi	r24, 0x04	; 4
    7c9c:	67 e0       	ldi	r22, 0x07	; 7
    7c9e:	41 e0       	ldi	r20, 0x01	; 1
    7ca0:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
}
    7ca4:	cf 91       	pop	r28
    7ca6:	df 91       	pop	r29
    7ca8:	08 95       	ret

00007caa <Buzzer_Off>:

void Buzzer_Off(void)
{
    7caa:	df 93       	push	r29
    7cac:	cf 93       	push	r28
    7cae:	cd b7       	in	r28, 0x3d	; 61
    7cb0:	de b7       	in	r29, 0x3e	; 62
	DIO_void_Set_Pin_Value(BUZZER_PORT,BUZZER_PIN,LOW);
    7cb2:	84 e0       	ldi	r24, 0x04	; 4
    7cb4:	67 e0       	ldi	r22, 0x07	; 7
    7cb6:	40 e0       	ldi	r20, 0x00	; 0
    7cb8:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
}
    7cbc:	cf 91       	pop	r28
    7cbe:	df 91       	pop	r29
    7cc0:	08 95       	ret

00007cc2 <project_init>:
volatile uint8 flag_check=0;
volatile uint64 length_rf,length_rb;
volatile uint64 time_rf,time_rb;
volatile uint64 t_rf,t_rb,c_rf,c_rb;
void project_init(void)
{
    7cc2:	df 93       	push	r29
    7cc4:	cf 93       	push	r28
    7cc6:	cd b7       	in	r28, 0x3d	; 61
    7cc8:	de b7       	in	r29, 0x3e	; 62
	//AUTOPARK
   DIO_void_Set_Pin_Dirction(auto_park_port,auto_park_pin,INPUT);
    7cca:	83 e0       	ldi	r24, 0x03	; 3
    7ccc:	60 e0       	ldi	r22, 0x00	; 0
    7cce:	40 e0       	ldi	r20, 0x00	; 0
    7cd0:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
   DIO_void_Set_Pin_Value(auto_park_port,auto_park_pin,HIGH);
    7cd4:	83 e0       	ldi	r24, 0x03	; 3
    7cd6:	60 e0       	ldi	r22, 0x00	; 0
    7cd8:	41 e0       	ldi	r20, 0x01	; 1
    7cda:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
   //LCD INIT
   LCD_vidDirections();
    7cde:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <LCD_vidDirections>
   LCD_vidInit();
    7ce2:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <LCD_vidInit>
   LCD_LIGHT();
    7ce6:	0e 94 5f 55 	call	0xaabe	; 0xaabe <LCD_LIGHT>
   //...........................
   Ultrasonic_init();
    7cea:	0e 94 ed 25 	call	0x4bda	; 0x4bda <Ultrasonic_init>
   //...........................
   //CAR CONTROL
   DIO_void_Set_Pin_Dirction(car_control,forward,OUTPUT);
    7cee:	84 e0       	ldi	r24, 0x04	; 4
    7cf0:	63 e0       	ldi	r22, 0x03	; 3
    7cf2:	41 e0       	ldi	r20, 0x01	; 1
    7cf4:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
   DIO_void_Set_Pin_Dirction(car_control,backword,OUTPUT);
    7cf8:	84 e0       	ldi	r24, 0x04	; 4
    7cfa:	65 e0       	ldi	r22, 0x05	; 5
    7cfc:	41 e0       	ldi	r20, 0x01	; 1
    7cfe:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
   DIO_void_Set_Pin_Dirction(car_control,left_wheel,OUTPUT);
    7d02:	84 e0       	ldi	r24, 0x04	; 4
    7d04:	60 e0       	ldi	r22, 0x00	; 0
    7d06:	41 e0       	ldi	r20, 0x01	; 1
    7d08:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
   DIO_void_Set_Pin_Dirction(car_control,right_wheel,OUTPUT);
    7d0c:	84 e0       	ldi	r24, 0x04	; 4
    7d0e:	61 e0       	ldi	r22, 0x01	; 1
    7d10:	41 e0       	ldi	r20, 0x01	; 1
    7d12:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
   DIO_void_Set_Pin_Dirction(car_control,stop,OUTPUT);
    7d16:	84 e0       	ldi	r24, 0x04	; 4
    7d18:	62 e0       	ldi	r22, 0x02	; 2
    7d1a:	41 e0       	ldi	r20, 0x01	; 1
    7d1c:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>

   DIO_void_Set_Pin_Value(car_control,forward,HIGH);
    7d20:	84 e0       	ldi	r24, 0x04	; 4
    7d22:	63 e0       	ldi	r22, 0x03	; 3
    7d24:	41 e0       	ldi	r20, 0x01	; 1
    7d26:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
   DIO_void_Set_Pin_Value(car_control,backword,HIGH);
    7d2a:	84 e0       	ldi	r24, 0x04	; 4
    7d2c:	65 e0       	ldi	r22, 0x05	; 5
    7d2e:	41 e0       	ldi	r20, 0x01	; 1
    7d30:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
   DIO_void_Set_Pin_Value(car_control,left_wheel,HIGH);
    7d34:	84 e0       	ldi	r24, 0x04	; 4
    7d36:	60 e0       	ldi	r22, 0x00	; 0
    7d38:	41 e0       	ldi	r20, 0x01	; 1
    7d3a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
   DIO_void_Set_Pin_Value(car_control,right_wheel,HIGH);
    7d3e:	84 e0       	ldi	r24, 0x04	; 4
    7d40:	61 e0       	ldi	r22, 0x01	; 1
    7d42:	41 e0       	ldi	r20, 0x01	; 1
    7d44:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
   DIO_void_Set_Pin_Value(car_control,stop,HIGH);
    7d48:	84 e0       	ldi	r24, 0x04	; 4
    7d4a:	62 e0       	ldi	r22, 0x02	; 2
    7d4c:	41 e0       	ldi	r20, 0x01	; 1
    7d4e:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
   //
   sei();
    7d52:	78 94       	sei
   Buzzer_Init();
    7d54:	0e 94 3d 3e 	call	0x7c7a	; 0x7c7a <Buzzer_Init>
   //
   Timer0_OVInterrupt_Enable();
    7d58:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <Timer0_OVInterrupt_Enable>
   LCD_vidPrintInTwoLines((uint8*)"PUSH BUTTON IF U NEED TO PARK");
    7d5c:	80 e0       	ldi	r24, 0x00	; 0
    7d5e:	91 e0       	ldi	r25, 0x01	; 1
    7d60:	0e 94 56 3d 	call	0x7aac	; 0x7aac <LCD_vidPrintInTwoLines>
}
    7d64:	cf 91       	pop	r28
    7d66:	df 91       	pop	r29
    7d68:	08 95       	ret

00007d6a <Button_Check>:


void Button_Check(void)
{
    7d6a:	df 93       	push	r29
    7d6c:	cf 93       	push	r28
    7d6e:	cd b7       	in	r28, 0x3d	; 61
    7d70:	de b7       	in	r29, 0x3e	; 62
    7d72:	2f 97       	sbiw	r28, 0x0f	; 15
    7d74:	0f b6       	in	r0, 0x3f	; 63
    7d76:	f8 94       	cli
    7d78:	de bf       	out	0x3e, r29	; 62
    7d7a:	0f be       	out	0x3f, r0	; 63
    7d7c:	cd bf       	out	0x3d, r28	; 61
 uint8 Button=1;
    7d7e:	81 e0       	ldi	r24, 0x01	; 1
    7d80:	8f 87       	std	Y+15, r24	; 0x0f
    7d82:	05 c0       	rjmp	.+10     	; 0x7d8e <Button_Check+0x24>
	while(Button==1)
	{
		Button= DIO_value_type_Get_Pin_Value(auto_park_port ,auto_park_pin);
    7d84:	83 e0       	ldi	r24, 0x03	; 3
    7d86:	60 e0       	ldi	r22, 0x00	; 0
    7d88:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <DIO_value_type_Get_Pin_Value>
    7d8c:	8f 87       	std	Y+15, r24	; 0x0f


void Button_Check(void)
{
 uint8 Button=1;
	while(Button==1)
    7d8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    7d90:	81 30       	cpi	r24, 0x01	; 1
    7d92:	c1 f3       	breq	.-16     	; 0x7d84 <Button_Check+0x1a>
	{
		Button= DIO_value_type_Get_Pin_Value(auto_park_port ,auto_park_pin);
	}
	LCD_vidSendCommand(1);
    7d94:	81 e0       	ldi	r24, 0x01	; 1
    7d96:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
 LCD_vidGotoxy(0,0);
    7d9a:	80 e0       	ldi	r24, 0x00	; 0
    7d9c:	60 e0       	ldi	r22, 0x00	; 0
    7d9e:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
 LCD_vidWriteString("AUTOPARKING");
    7da2:	8e e1       	ldi	r24, 0x1E	; 30
    7da4:	91 e0       	ldi	r25, 0x01	; 1
    7da6:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>
    7daa:	80 e0       	ldi	r24, 0x00	; 0
    7dac:	90 e0       	ldi	r25, 0x00	; 0
    7dae:	aa ef       	ldi	r26, 0xFA	; 250
    7db0:	b3 e4       	ldi	r27, 0x43	; 67
    7db2:	8b 87       	std	Y+11, r24	; 0x0b
    7db4:	9c 87       	std	Y+12, r25	; 0x0c
    7db6:	ad 87       	std	Y+13, r26	; 0x0d
    7db8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7dba:	6b 85       	ldd	r22, Y+11	; 0x0b
    7dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    7dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    7dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    7dc2:	20 e0       	ldi	r18, 0x00	; 0
    7dc4:	30 e0       	ldi	r19, 0x00	; 0
    7dc6:	4a ef       	ldi	r20, 0xFA	; 250
    7dc8:	54 e4       	ldi	r21, 0x44	; 68
    7dca:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    7dce:	dc 01       	movw	r26, r24
    7dd0:	cb 01       	movw	r24, r22
    7dd2:	8f 83       	std	Y+7, r24	; 0x07
    7dd4:	98 87       	std	Y+8, r25	; 0x08
    7dd6:	a9 87       	std	Y+9, r26	; 0x09
    7dd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7dda:	6f 81       	ldd	r22, Y+7	; 0x07
    7ddc:	78 85       	ldd	r23, Y+8	; 0x08
    7dde:	89 85       	ldd	r24, Y+9	; 0x09
    7de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    7de2:	20 e0       	ldi	r18, 0x00	; 0
    7de4:	30 e0       	ldi	r19, 0x00	; 0
    7de6:	40 e8       	ldi	r20, 0x80	; 128
    7de8:	5f e3       	ldi	r21, 0x3F	; 63
    7dea:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    7dee:	88 23       	and	r24, r24
    7df0:	2c f4       	brge	.+10     	; 0x7dfc <Button_Check+0x92>
		__ticks = 1;
    7df2:	81 e0       	ldi	r24, 0x01	; 1
    7df4:	90 e0       	ldi	r25, 0x00	; 0
    7df6:	9e 83       	std	Y+6, r25	; 0x06
    7df8:	8d 83       	std	Y+5, r24	; 0x05
    7dfa:	3f c0       	rjmp	.+126    	; 0x7e7a <Button_Check+0x110>
	else if (__tmp > 65535)
    7dfc:	6f 81       	ldd	r22, Y+7	; 0x07
    7dfe:	78 85       	ldd	r23, Y+8	; 0x08
    7e00:	89 85       	ldd	r24, Y+9	; 0x09
    7e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    7e04:	20 e0       	ldi	r18, 0x00	; 0
    7e06:	3f ef       	ldi	r19, 0xFF	; 255
    7e08:	4f e7       	ldi	r20, 0x7F	; 127
    7e0a:	57 e4       	ldi	r21, 0x47	; 71
    7e0c:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    7e10:	18 16       	cp	r1, r24
    7e12:	4c f5       	brge	.+82     	; 0x7e66 <Button_Check+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7e14:	6b 85       	ldd	r22, Y+11	; 0x0b
    7e16:	7c 85       	ldd	r23, Y+12	; 0x0c
    7e18:	8d 85       	ldd	r24, Y+13	; 0x0d
    7e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    7e1c:	20 e0       	ldi	r18, 0x00	; 0
    7e1e:	30 e0       	ldi	r19, 0x00	; 0
    7e20:	40 e2       	ldi	r20, 0x20	; 32
    7e22:	51 e4       	ldi	r21, 0x41	; 65
    7e24:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    7e28:	dc 01       	movw	r26, r24
    7e2a:	cb 01       	movw	r24, r22
    7e2c:	bc 01       	movw	r22, r24
    7e2e:	cd 01       	movw	r24, r26
    7e30:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    7e34:	dc 01       	movw	r26, r24
    7e36:	cb 01       	movw	r24, r22
    7e38:	9e 83       	std	Y+6, r25	; 0x06
    7e3a:	8d 83       	std	Y+5, r24	; 0x05
    7e3c:	0f c0       	rjmp	.+30     	; 0x7e5c <Button_Check+0xf2>
    7e3e:	88 ec       	ldi	r24, 0xC8	; 200
    7e40:	90 e0       	ldi	r25, 0x00	; 0
    7e42:	9c 83       	std	Y+4, r25	; 0x04
    7e44:	8b 83       	std	Y+3, r24	; 0x03
    7e46:	8b 81       	ldd	r24, Y+3	; 0x03
    7e48:	9c 81       	ldd	r25, Y+4	; 0x04
    7e4a:	01 97       	sbiw	r24, 0x01	; 1
    7e4c:	f1 f7       	brne	.-4      	; 0x7e4a <Button_Check+0xe0>
    7e4e:	9c 83       	std	Y+4, r25	; 0x04
    7e50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7e52:	8d 81       	ldd	r24, Y+5	; 0x05
    7e54:	9e 81       	ldd	r25, Y+6	; 0x06
    7e56:	01 97       	sbiw	r24, 0x01	; 1
    7e58:	9e 83       	std	Y+6, r25	; 0x06
    7e5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    7e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    7e60:	00 97       	sbiw	r24, 0x00	; 0
    7e62:	69 f7       	brne	.-38     	; 0x7e3e <Button_Check+0xd4>
    7e64:	14 c0       	rjmp	.+40     	; 0x7e8e <Button_Check+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7e66:	6f 81       	ldd	r22, Y+7	; 0x07
    7e68:	78 85       	ldd	r23, Y+8	; 0x08
    7e6a:	89 85       	ldd	r24, Y+9	; 0x09
    7e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    7e6e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    7e72:	dc 01       	movw	r26, r24
    7e74:	cb 01       	movw	r24, r22
    7e76:	9e 83       	std	Y+6, r25	; 0x06
    7e78:	8d 83       	std	Y+5, r24	; 0x05
    7e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    7e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    7e7e:	9a 83       	std	Y+2, r25	; 0x02
    7e80:	89 83       	std	Y+1, r24	; 0x01
    7e82:	89 81       	ldd	r24, Y+1	; 0x01
    7e84:	9a 81       	ldd	r25, Y+2	; 0x02
    7e86:	01 97       	sbiw	r24, 0x01	; 1
    7e88:	f1 f7       	brne	.-4      	; 0x7e86 <Button_Check+0x11c>
    7e8a:	9a 83       	std	Y+2, r25	; 0x02
    7e8c:	89 83       	std	Y+1, r24	; 0x01
 _delay_ms(500);
}
    7e8e:	2f 96       	adiw	r28, 0x0f	; 15
    7e90:	0f b6       	in	r0, 0x3f	; 63
    7e92:	f8 94       	cli
    7e94:	de bf       	out	0x3e, r29	; 62
    7e96:	0f be       	out	0x3f, r0	; 63
    7e98:	cd bf       	out	0x3d, r28	; 61
    7e9a:	cf 91       	pop	r28
    7e9c:	df 91       	pop	r29
    7e9e:	08 95       	ret

00007ea0 <CAR_Width_Check>:

void CAR_Width_Check(void)
{
    7ea0:	af 92       	push	r10
    7ea2:	bf 92       	push	r11
    7ea4:	cf 92       	push	r12
    7ea6:	df 92       	push	r13
    7ea8:	ef 92       	push	r14
    7eaa:	ff 92       	push	r15
    7eac:	0f 93       	push	r16
    7eae:	1f 93       	push	r17
    7eb0:	df 93       	push	r29
    7eb2:	cf 93       	push	r28
    7eb4:	cd b7       	in	r28, 0x3d	; 61
    7eb6:	de b7       	in	r29, 0x3e	; 62
	//MOVE FORWARD
    forward_move();
    7eb8:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <forward_move>
    LCD_vidSendCommand(1);
    7ebc:	81 e0       	ldi	r24, 0x01	; 1
    7ebe:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>

    	do{
    	   LCD_vidGotoxy(0,0);
    7ec2:	80 e0       	ldi	r24, 0x00	; 0
    7ec4:	60 e0       	ldi	r22, 0x00	; 0
    7ec6:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
    	   LCD_vidWriteString("CAR CHECK WIDTH");
    7eca:	8a e2       	ldi	r24, 0x2A	; 42
    7ecc:	91 e0       	ldi	r25, 0x01	; 1
    7ece:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>
    	   ultra_right_front=Ultrasonic_right_front_Get_Distance();
    7ed2:	0e 94 31 27 	call	0x4e62	; 0x4e62 <Ultrasonic_right_front_Get_Distance>
    7ed6:	dc 01       	movw	r26, r24
    7ed8:	cb 01       	movw	r24, r22
    7eda:	80 93 0e 03 	sts	0x030E, r24
    7ede:	90 93 0f 03 	sts	0x030F, r25
    7ee2:	a0 93 10 03 	sts	0x0310, r26
    7ee6:	b0 93 11 03 	sts	0x0311, r27
    	   LCD_vidGotoxy(0,1);
    7eea:	80 e0       	ldi	r24, 0x00	; 0
    7eec:	61 e0       	ldi	r22, 0x01	; 1
    7eee:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
    	   LCD_vidWriteString("DISTANCE:");
    7ef2:	8a e3       	ldi	r24, 0x3A	; 58
    7ef4:	91 e0       	ldi	r25, 0x01	; 1
    7ef6:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>
    	   LCD_vidGotoxy(10,1);
    7efa:	8a e0       	ldi	r24, 0x0A	; 10
    7efc:	61 e0       	ldi	r22, 0x01	; 1
    7efe:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
    	   LCD_vidWriteUnSignedInteger(ultra_right_front);
    7f02:	80 91 0e 03 	lds	r24, 0x030E
    7f06:	90 91 0f 03 	lds	r25, 0x030F
    7f0a:	a0 91 10 03 	lds	r26, 0x0310
    7f0e:	b0 91 11 03 	lds	r27, 0x0311
    7f12:	5c 01       	movw	r10, r24
    7f14:	6d 01       	movw	r12, r26
    7f16:	ee 24       	eor	r14, r14
    7f18:	ff 24       	eor	r15, r15
    7f1a:	87 01       	movw	r16, r14
    7f1c:	2a 2d       	mov	r18, r10
    7f1e:	3b 2d       	mov	r19, r11
    7f20:	4c 2d       	mov	r20, r12
    7f22:	5d 2d       	mov	r21, r13
    7f24:	6e 2d       	mov	r22, r14
    7f26:	7f 2d       	mov	r23, r15
    7f28:	80 2f       	mov	r24, r16
    7f2a:	91 2f       	mov	r25, r17
    7f2c:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <LCD_vidWriteUnSignedInteger>

    	}while(Ultrasonic_right_front_Get_Distance()<100);
    7f30:	0e 94 31 27 	call	0x4e62	; 0x4e62 <Ultrasonic_right_front_Get_Distance>
    7f34:	dc 01       	movw	r26, r24
    7f36:	cb 01       	movw	r24, r22
    7f38:	84 36       	cpi	r24, 0x64	; 100
    7f3a:	91 05       	cpc	r25, r1
    7f3c:	a1 05       	cpc	r26, r1
    7f3e:	b1 05       	cpc	r27, r1
    7f40:	08 f4       	brcc	.+2      	; 0x7f44 <CAR_Width_Check+0xa4>
    7f42:	bf cf       	rjmp	.-130    	; 0x7ec2 <CAR_Width_Check+0x22>

}
    7f44:	cf 91       	pop	r28
    7f46:	df 91       	pop	r29
    7f48:	1f 91       	pop	r17
    7f4a:	0f 91       	pop	r16
    7f4c:	ff 90       	pop	r15
    7f4e:	ef 90       	pop	r14
    7f50:	df 90       	pop	r13
    7f52:	cf 90       	pop	r12
    7f54:	bf 90       	pop	r11
    7f56:	af 90       	pop	r10
    7f58:	08 95       	ret

00007f5a <distance_rf>:
uint64 distance_rf(void)
{
    7f5a:	af 92       	push	r10
    7f5c:	bf 92       	push	r11
    7f5e:	cf 92       	push	r12
    7f60:	df 92       	push	r13
    7f62:	ef 92       	push	r14
    7f64:	ff 92       	push	r15
    7f66:	0f 93       	push	r16
    7f68:	1f 93       	push	r17
    7f6a:	df 93       	push	r29
    7f6c:	cf 93       	push	r28
    7f6e:	cd b7       	in	r28, 0x3d	; 61
    7f70:	de b7       	in	r29, 0x3e	; 62
    7f72:	c9 57       	subi	r28, 0x79	; 121
    7f74:	d0 40       	sbci	r29, 0x00	; 0
    7f76:	0f b6       	in	r0, 0x3f	; 63
    7f78:	f8 94       	cli
    7f7a:	de bf       	out	0x3e, r29	; 62
    7f7c:	0f be       	out	0x3f, r0	; 63
    7f7e:	cd bf       	out	0x3d, r28	; 61
  t_rf=TCNT0;
    7f80:	e2 e5       	ldi	r30, 0x52	; 82
    7f82:	f0 e0       	ldi	r31, 0x00	; 0
    7f84:	80 81       	ld	r24, Z
    7f86:	28 2f       	mov	r18, r24
    7f88:	30 e0       	ldi	r19, 0x00	; 0
    7f8a:	40 e0       	ldi	r20, 0x00	; 0
    7f8c:	50 e0       	ldi	r21, 0x00	; 0
    7f8e:	60 e0       	ldi	r22, 0x00	; 0
    7f90:	70 e0       	ldi	r23, 0x00	; 0
    7f92:	80 e0       	ldi	r24, 0x00	; 0
    7f94:	90 e0       	ldi	r25, 0x00	; 0
    7f96:	20 93 2f 03 	sts	0x032F, r18
    7f9a:	30 93 30 03 	sts	0x0330, r19
    7f9e:	40 93 31 03 	sts	0x0331, r20
    7fa2:	50 93 32 03 	sts	0x0332, r21
    7fa6:	60 93 33 03 	sts	0x0333, r22
    7faa:	70 93 34 03 	sts	0x0334, r23
    7fae:	80 93 35 03 	sts	0x0335, r24
    7fb2:	90 93 36 03 	sts	0x0336, r25
  c_rf=count_right_front;
    7fb6:	80 91 04 03 	lds	r24, 0x0304
    7fba:	90 91 05 03 	lds	r25, 0x0305
    7fbe:	9c 01       	movw	r18, r24
    7fc0:	40 e0       	ldi	r20, 0x00	; 0
    7fc2:	50 e0       	ldi	r21, 0x00	; 0
    7fc4:	60 e0       	ldi	r22, 0x00	; 0
    7fc6:	70 e0       	ldi	r23, 0x00	; 0
    7fc8:	80 e0       	ldi	r24, 0x00	; 0
    7fca:	90 e0       	ldi	r25, 0x00	; 0
    7fcc:	20 93 37 03 	sts	0x0337, r18
    7fd0:	30 93 38 03 	sts	0x0338, r19
    7fd4:	40 93 39 03 	sts	0x0339, r20
    7fd8:	50 93 3a 03 	sts	0x033A, r21
    7fdc:	60 93 3b 03 	sts	0x033B, r22
    7fe0:	70 93 3c 03 	sts	0x033C, r23
    7fe4:	80 93 3d 03 	sts	0x033D, r24
    7fe8:	90 93 3e 03 	sts	0x033E, r25
  time_rf=(uint64)t_rf+((uint64)c_rf*256);
    7fec:	a0 90 37 03 	lds	r10, 0x0337
    7ff0:	b0 90 38 03 	lds	r11, 0x0338
    7ff4:	c0 90 39 03 	lds	r12, 0x0339
    7ff8:	d0 90 3a 03 	lds	r13, 0x033A
    7ffc:	e0 90 3b 03 	lds	r14, 0x033B
    8000:	f0 90 3c 03 	lds	r15, 0x033C
    8004:	00 91 3d 03 	lds	r16, 0x033D
    8008:	10 91 3e 03 	lds	r17, 0x033E
    800c:	2a 2d       	mov	r18, r10
    800e:	3b 2d       	mov	r19, r11
    8010:	4c 2d       	mov	r20, r12
    8012:	5d 2d       	mov	r21, r13
    8014:	6e 2d       	mov	r22, r14
    8016:	7f 2d       	mov	r23, r15
    8018:	80 2f       	mov	r24, r16
    801a:	91 2f       	mov	r25, r17
    801c:	08 e0       	ldi	r16, 0x08	; 8
    801e:	0e 94 67 00 	call	0xce	; 0xce <__ashldi3>
    8022:	a2 2e       	mov	r10, r18
    8024:	b3 2e       	mov	r11, r19
    8026:	c4 2e       	mov	r12, r20
    8028:	d5 2e       	mov	r13, r21
    802a:	e6 2e       	mov	r14, r22
    802c:	f7 2e       	mov	r15, r23
    802e:	08 2f       	mov	r16, r24
    8030:	19 2f       	mov	r17, r25
    8032:	a9 8a       	std	Y+17, r10	; 0x11
    8034:	ba 8a       	std	Y+18, r11	; 0x12
    8036:	cb 8a       	std	Y+19, r12	; 0x13
    8038:	dc 8a       	std	Y+20, r13	; 0x14
    803a:	ed 8a       	std	Y+21, r14	; 0x15
    803c:	fe 8a       	std	Y+22, r15	; 0x16
    803e:	0f 8b       	std	Y+23, r16	; 0x17
    8040:	18 8f       	std	Y+24, r17	; 0x18
    8042:	80 91 2f 03 	lds	r24, 0x032F
    8046:	89 87       	std	Y+9, r24	; 0x09
    8048:	90 91 30 03 	lds	r25, 0x0330
    804c:	9a 87       	std	Y+10, r25	; 0x0a
    804e:	80 91 31 03 	lds	r24, 0x0331
    8052:	8b 87       	std	Y+11, r24	; 0x0b
    8054:	90 91 32 03 	lds	r25, 0x0332
    8058:	9c 87       	std	Y+12, r25	; 0x0c
    805a:	80 91 33 03 	lds	r24, 0x0333
    805e:	8d 87       	std	Y+13, r24	; 0x0d
    8060:	90 91 34 03 	lds	r25, 0x0334
    8064:	9e 87       	std	Y+14, r25	; 0x0e
    8066:	80 91 35 03 	lds	r24, 0x0335
    806a:	8f 87       	std	Y+15, r24	; 0x0f
    806c:	90 91 36 03 	lds	r25, 0x0336
    8070:	98 8b       	std	Y+16, r25	; 0x10
    8072:	89 89       	ldd	r24, Y+17	; 0x11
    8074:	99 85       	ldd	r25, Y+9	; 0x09
    8076:	89 0f       	add	r24, r25
    8078:	89 8f       	std	Y+25, r24	; 0x19
    807a:	81 e0       	ldi	r24, 0x01	; 1
    807c:	89 a3       	std	Y+33, r24	; 0x21
    807e:	99 8d       	ldd	r25, Y+25	; 0x19
    8080:	89 89       	ldd	r24, Y+17	; 0x11
    8082:	98 17       	cp	r25, r24
    8084:	08 f0       	brcs	.+2      	; 0x8088 <distance_rf+0x12e>
    8086:	19 a2       	std	Y+33, r1	; 0x21
    8088:	9a 89       	ldd	r25, Y+18	; 0x12
    808a:	8a 85       	ldd	r24, Y+10	; 0x0a
    808c:	98 0f       	add	r25, r24
    808e:	9a 8f       	std	Y+26, r25	; 0x1a
    8090:	91 e0       	ldi	r25, 0x01	; 1
    8092:	9a a3       	std	Y+34, r25	; 0x22
    8094:	8a 8d       	ldd	r24, Y+26	; 0x1a
    8096:	9a 89       	ldd	r25, Y+18	; 0x12
    8098:	89 17       	cp	r24, r25
    809a:	08 f0       	brcs	.+2      	; 0x809e <distance_rf+0x144>
    809c:	1a a2       	std	Y+34, r1	; 0x22
    809e:	89 a1       	ldd	r24, Y+33	; 0x21
    80a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    80a2:	89 0f       	add	r24, r25
    80a4:	8b a3       	std	Y+35, r24	; 0x23
    80a6:	81 e0       	ldi	r24, 0x01	; 1
    80a8:	8c a3       	std	Y+36, r24	; 0x24
    80aa:	9b a1       	ldd	r25, Y+35	; 0x23
    80ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    80ae:	98 17       	cp	r25, r24
    80b0:	08 f0       	brcs	.+2      	; 0x80b4 <distance_rf+0x15a>
    80b2:	1c a2       	std	Y+36, r1	; 0x24
    80b4:	9a a1       	ldd	r25, Y+34	; 0x22
    80b6:	8c a1       	ldd	r24, Y+36	; 0x24
    80b8:	98 2b       	or	r25, r24
    80ba:	9a a3       	std	Y+34, r25	; 0x22
    80bc:	9b a1       	ldd	r25, Y+35	; 0x23
    80be:	9a 8f       	std	Y+26, r25	; 0x1a
    80c0:	8b 89       	ldd	r24, Y+19	; 0x13
    80c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    80c4:	89 0f       	add	r24, r25
    80c6:	8b 8f       	std	Y+27, r24	; 0x1b
    80c8:	81 e0       	ldi	r24, 0x01	; 1
    80ca:	8d a3       	std	Y+37, r24	; 0x25
    80cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    80ce:	8b 89       	ldd	r24, Y+19	; 0x13
    80d0:	98 17       	cp	r25, r24
    80d2:	08 f0       	brcs	.+2      	; 0x80d6 <distance_rf+0x17c>
    80d4:	1d a2       	std	Y+37, r1	; 0x25
    80d6:	9a a1       	ldd	r25, Y+34	; 0x22
    80d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    80da:	98 0f       	add	r25, r24
    80dc:	9e a3       	std	Y+38, r25	; 0x26
    80de:	91 e0       	ldi	r25, 0x01	; 1
    80e0:	9f a3       	std	Y+39, r25	; 0x27
    80e2:	8e a1       	ldd	r24, Y+38	; 0x26
    80e4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    80e6:	89 17       	cp	r24, r25
    80e8:	08 f0       	brcs	.+2      	; 0x80ec <distance_rf+0x192>
    80ea:	1f a2       	std	Y+39, r1	; 0x27
    80ec:	8d a1       	ldd	r24, Y+37	; 0x25
    80ee:	9f a1       	ldd	r25, Y+39	; 0x27
    80f0:	89 2b       	or	r24, r25
    80f2:	8d a3       	std	Y+37, r24	; 0x25
    80f4:	8e a1       	ldd	r24, Y+38	; 0x26
    80f6:	8b 8f       	std	Y+27, r24	; 0x1b
    80f8:	9c 89       	ldd	r25, Y+20	; 0x14
    80fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    80fc:	98 0f       	add	r25, r24
    80fe:	9c 8f       	std	Y+28, r25	; 0x1c
    8100:	91 e0       	ldi	r25, 0x01	; 1
    8102:	98 a7       	std	Y+40, r25	; 0x28
    8104:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8106:	9c 89       	ldd	r25, Y+20	; 0x14
    8108:	89 17       	cp	r24, r25
    810a:	08 f0       	brcs	.+2      	; 0x810e <distance_rf+0x1b4>
    810c:	18 a6       	std	Y+40, r1	; 0x28
    810e:	8d a1       	ldd	r24, Y+37	; 0x25
    8110:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8112:	89 0f       	add	r24, r25
    8114:	89 a7       	std	Y+41, r24	; 0x29
    8116:	81 e0       	ldi	r24, 0x01	; 1
    8118:	8a a7       	std	Y+42, r24	; 0x2a
    811a:	99 a5       	ldd	r25, Y+41	; 0x29
    811c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    811e:	98 17       	cp	r25, r24
    8120:	08 f0       	brcs	.+2      	; 0x8124 <distance_rf+0x1ca>
    8122:	1a a6       	std	Y+42, r1	; 0x2a
    8124:	98 a5       	ldd	r25, Y+40	; 0x28
    8126:	8a a5       	ldd	r24, Y+42	; 0x2a
    8128:	98 2b       	or	r25, r24
    812a:	98 a7       	std	Y+40, r25	; 0x28
    812c:	99 a5       	ldd	r25, Y+41	; 0x29
    812e:	9c 8f       	std	Y+28, r25	; 0x1c
    8130:	8d 89       	ldd	r24, Y+21	; 0x15
    8132:	9d 85       	ldd	r25, Y+13	; 0x0d
    8134:	89 0f       	add	r24, r25
    8136:	8d 8f       	std	Y+29, r24	; 0x1d
    8138:	81 e0       	ldi	r24, 0x01	; 1
    813a:	8b a7       	std	Y+43, r24	; 0x2b
    813c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    813e:	8d 89       	ldd	r24, Y+21	; 0x15
    8140:	98 17       	cp	r25, r24
    8142:	08 f0       	brcs	.+2      	; 0x8146 <distance_rf+0x1ec>
    8144:	1b a6       	std	Y+43, r1	; 0x2b
    8146:	98 a5       	ldd	r25, Y+40	; 0x28
    8148:	8d 8d       	ldd	r24, Y+29	; 0x1d
    814a:	98 0f       	add	r25, r24
    814c:	9c a7       	std	Y+44, r25	; 0x2c
    814e:	91 e0       	ldi	r25, 0x01	; 1
    8150:	9d a7       	std	Y+45, r25	; 0x2d
    8152:	8c a5       	ldd	r24, Y+44	; 0x2c
    8154:	9d 8d       	ldd	r25, Y+29	; 0x1d
    8156:	89 17       	cp	r24, r25
    8158:	08 f0       	brcs	.+2      	; 0x815c <distance_rf+0x202>
    815a:	1d a6       	std	Y+45, r1	; 0x2d
    815c:	8b a5       	ldd	r24, Y+43	; 0x2b
    815e:	9d a5       	ldd	r25, Y+45	; 0x2d
    8160:	89 2b       	or	r24, r25
    8162:	8b a7       	std	Y+43, r24	; 0x2b
    8164:	8c a5       	ldd	r24, Y+44	; 0x2c
    8166:	8d 8f       	std	Y+29, r24	; 0x1d
    8168:	9e 89       	ldd	r25, Y+22	; 0x16
    816a:	8e 85       	ldd	r24, Y+14	; 0x0e
    816c:	98 0f       	add	r25, r24
    816e:	9e 8f       	std	Y+30, r25	; 0x1e
    8170:	91 e0       	ldi	r25, 0x01	; 1
    8172:	9e a7       	std	Y+46, r25	; 0x2e
    8174:	8e 8d       	ldd	r24, Y+30	; 0x1e
    8176:	9e 89       	ldd	r25, Y+22	; 0x16
    8178:	89 17       	cp	r24, r25
    817a:	08 f0       	brcs	.+2      	; 0x817e <distance_rf+0x224>
    817c:	1e a6       	std	Y+46, r1	; 0x2e
    817e:	8b a5       	ldd	r24, Y+43	; 0x2b
    8180:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8182:	89 0f       	add	r24, r25
    8184:	8f a7       	std	Y+47, r24	; 0x2f
    8186:	81 e0       	ldi	r24, 0x01	; 1
    8188:	88 ab       	std	Y+48, r24	; 0x30
    818a:	9f a5       	ldd	r25, Y+47	; 0x2f
    818c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    818e:	98 17       	cp	r25, r24
    8190:	08 f0       	brcs	.+2      	; 0x8194 <distance_rf+0x23a>
    8192:	18 aa       	std	Y+48, r1	; 0x30
    8194:	9e a5       	ldd	r25, Y+46	; 0x2e
    8196:	88 a9       	ldd	r24, Y+48	; 0x30
    8198:	98 2b       	or	r25, r24
    819a:	9e a7       	std	Y+46, r25	; 0x2e
    819c:	9f a5       	ldd	r25, Y+47	; 0x2f
    819e:	9e 8f       	std	Y+30, r25	; 0x1e
    81a0:	8f 89       	ldd	r24, Y+23	; 0x17
    81a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    81a4:	89 0f       	add	r24, r25
    81a6:	8f 8f       	std	Y+31, r24	; 0x1f
    81a8:	81 e0       	ldi	r24, 0x01	; 1
    81aa:	89 ab       	std	Y+49, r24	; 0x31
    81ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    81ae:	8f 89       	ldd	r24, Y+23	; 0x17
    81b0:	98 17       	cp	r25, r24
    81b2:	08 f0       	brcs	.+2      	; 0x81b6 <distance_rf+0x25c>
    81b4:	19 aa       	std	Y+49, r1	; 0x31
    81b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    81b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    81ba:	98 0f       	add	r25, r24
    81bc:	9a ab       	std	Y+50, r25	; 0x32
    81be:	91 e0       	ldi	r25, 0x01	; 1
    81c0:	9b ab       	std	Y+51, r25	; 0x33
    81c2:	8a a9       	ldd	r24, Y+50	; 0x32
    81c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    81c6:	89 17       	cp	r24, r25
    81c8:	08 f0       	brcs	.+2      	; 0x81cc <distance_rf+0x272>
    81ca:	1b aa       	std	Y+51, r1	; 0x33
    81cc:	89 a9       	ldd	r24, Y+49	; 0x31
    81ce:	9b a9       	ldd	r25, Y+51	; 0x33
    81d0:	89 2b       	or	r24, r25
    81d2:	89 ab       	std	Y+49, r24	; 0x31
    81d4:	8a a9       	ldd	r24, Y+50	; 0x32
    81d6:	8f 8f       	std	Y+31, r24	; 0x1f
    81d8:	98 8d       	ldd	r25, Y+24	; 0x18
    81da:	88 89       	ldd	r24, Y+16	; 0x10
    81dc:	98 0f       	add	r25, r24
    81de:	98 a3       	std	Y+32, r25	; 0x20
    81e0:	89 a9       	ldd	r24, Y+49	; 0x31
    81e2:	98 a1       	ldd	r25, Y+32	; 0x20
    81e4:	89 0f       	add	r24, r25
    81e6:	88 a3       	std	Y+32, r24	; 0x20
    81e8:	29 8d       	ldd	r18, Y+25	; 0x19
    81ea:	3a 8d       	ldd	r19, Y+26	; 0x1a
    81ec:	4b 8d       	ldd	r20, Y+27	; 0x1b
    81ee:	5c 8d       	ldd	r21, Y+28	; 0x1c
    81f0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    81f2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    81f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    81f6:	98 a1       	ldd	r25, Y+32	; 0x20
    81f8:	20 93 3f 03 	sts	0x033F, r18
    81fc:	30 93 40 03 	sts	0x0340, r19
    8200:	40 93 41 03 	sts	0x0341, r20
    8204:	50 93 42 03 	sts	0x0342, r21
    8208:	60 93 43 03 	sts	0x0343, r22
    820c:	70 93 44 03 	sts	0x0344, r23
    8210:	80 93 45 03 	sts	0x0345, r24
    8214:	90 93 46 03 	sts	0x0346, r25
  length_rf=((((uint64)time_rf*13))/1000000);
    8218:	80 91 3f 03 	lds	r24, 0x033F
    821c:	89 83       	std	Y+1, r24	; 0x01
    821e:	90 91 40 03 	lds	r25, 0x0340
    8222:	9a 83       	std	Y+2, r25	; 0x02
    8224:	80 91 41 03 	lds	r24, 0x0341
    8228:	8b 83       	std	Y+3, r24	; 0x03
    822a:	90 91 42 03 	lds	r25, 0x0342
    822e:	9c 83       	std	Y+4, r25	; 0x04
    8230:	80 91 43 03 	lds	r24, 0x0343
    8234:	8d 83       	std	Y+5, r24	; 0x05
    8236:	90 91 44 03 	lds	r25, 0x0344
    823a:	9e 83       	std	Y+6, r25	; 0x06
    823c:	80 91 45 03 	lds	r24, 0x0345
    8240:	8f 83       	std	Y+7, r24	; 0x07
    8242:	90 91 46 03 	lds	r25, 0x0346
    8246:	98 87       	std	Y+8, r25	; 0x08
    8248:	a9 80       	ldd	r10, Y+1	; 0x01
    824a:	ba 80       	ldd	r11, Y+2	; 0x02
    824c:	cb 80       	ldd	r12, Y+3	; 0x03
    824e:	dc 80       	ldd	r13, Y+4	; 0x04
    8250:	ed 80       	ldd	r14, Y+5	; 0x05
    8252:	fe 80       	ldd	r15, Y+6	; 0x06
    8254:	0f 81       	ldd	r16, Y+7	; 0x07
    8256:	18 85       	ldd	r17, Y+8	; 0x08
    8258:	2a 2d       	mov	r18, r10
    825a:	3b 2d       	mov	r19, r11
    825c:	4c 2d       	mov	r20, r12
    825e:	5d 2d       	mov	r21, r13
    8260:	6e 2d       	mov	r22, r14
    8262:	7f 2d       	mov	r23, r15
    8264:	80 2f       	mov	r24, r16
    8266:	91 2f       	mov	r25, r17
    8268:	02 e0       	ldi	r16, 0x02	; 2
    826a:	0e 94 67 00 	call	0xce	; 0xce <__ashldi3>
    826e:	2c ab       	std	Y+52, r18	; 0x34
    8270:	3d ab       	std	Y+53, r19	; 0x35
    8272:	4e ab       	std	Y+54, r20	; 0x36
    8274:	5f ab       	std	Y+55, r21	; 0x37
    8276:	68 af       	std	Y+56, r22	; 0x38
    8278:	79 af       	std	Y+57, r23	; 0x39
    827a:	8a af       	std	Y+58, r24	; 0x3a
    827c:	9b af       	std	Y+59, r25	; 0x3b
    827e:	2c a9       	ldd	r18, Y+52	; 0x34
    8280:	3d a9       	ldd	r19, Y+53	; 0x35
    8282:	4e a9       	ldd	r20, Y+54	; 0x36
    8284:	5f a9       	ldd	r21, Y+55	; 0x37
    8286:	68 ad       	ldd	r22, Y+56	; 0x38
    8288:	79 ad       	ldd	r23, Y+57	; 0x39
    828a:	8a ad       	ldd	r24, Y+58	; 0x3a
    828c:	9b ad       	ldd	r25, Y+59	; 0x3b
    828e:	02 e0       	ldi	r16, 0x02	; 2
    8290:	0e 94 67 00 	call	0xce	; 0xce <__ashldi3>
    8294:	2c af       	std	Y+60, r18	; 0x3c
    8296:	3d af       	std	Y+61, r19	; 0x3d
    8298:	4e af       	std	Y+62, r20	; 0x3e
    829a:	5f af       	std	Y+63, r21	; 0x3f
    829c:	21 96       	adiw	r28, 0x01	; 1
    829e:	6f af       	std	Y+63, r22	; 0x3f
    82a0:	21 97       	sbiw	r28, 0x01	; 1
    82a2:	22 96       	adiw	r28, 0x02	; 2
    82a4:	7f af       	std	Y+63, r23	; 0x3f
    82a6:	22 97       	sbiw	r28, 0x02	; 2
    82a8:	23 96       	adiw	r28, 0x03	; 3
    82aa:	8f af       	std	Y+63, r24	; 0x3f
    82ac:	23 97       	sbiw	r28, 0x03	; 3
    82ae:	24 96       	adiw	r28, 0x04	; 4
    82b0:	9f af       	std	Y+63, r25	; 0x3f
    82b2:	24 97       	sbiw	r28, 0x04	; 4
    82b4:	8c ad       	ldd	r24, Y+60	; 0x3c
    82b6:	9c a9       	ldd	r25, Y+52	; 0x34
    82b8:	89 1b       	sub	r24, r25
    82ba:	25 96       	adiw	r28, 0x05	; 5
    82bc:	8f af       	std	Y+63, r24	; 0x3f
    82be:	25 97       	sbiw	r28, 0x05	; 5
    82c0:	81 e0       	ldi	r24, 0x01	; 1
    82c2:	2d 96       	adiw	r28, 0x0d	; 13
    82c4:	8f af       	std	Y+63, r24	; 0x3f
    82c6:	2d 97       	sbiw	r28, 0x0d	; 13
    82c8:	25 96       	adiw	r28, 0x05	; 5
    82ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    82cc:	25 97       	sbiw	r28, 0x05	; 5
    82ce:	8c ad       	ldd	r24, Y+60	; 0x3c
    82d0:	89 17       	cp	r24, r25
    82d2:	18 f0       	brcs	.+6      	; 0x82da <distance_rf+0x380>
    82d4:	2d 96       	adiw	r28, 0x0d	; 13
    82d6:	1f ae       	std	Y+63, r1	; 0x3f
    82d8:	2d 97       	sbiw	r28, 0x0d	; 13
    82da:	9d ad       	ldd	r25, Y+61	; 0x3d
    82dc:	8d a9       	ldd	r24, Y+53	; 0x35
    82de:	98 1b       	sub	r25, r24
    82e0:	26 96       	adiw	r28, 0x06	; 6
    82e2:	9f af       	std	Y+63, r25	; 0x3f
    82e4:	26 97       	sbiw	r28, 0x06	; 6
    82e6:	91 e0       	ldi	r25, 0x01	; 1
    82e8:	2e 96       	adiw	r28, 0x0e	; 14
    82ea:	9f af       	std	Y+63, r25	; 0x3f
    82ec:	2e 97       	sbiw	r28, 0x0e	; 14
    82ee:	26 96       	adiw	r28, 0x06	; 6
    82f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    82f2:	26 97       	sbiw	r28, 0x06	; 6
    82f4:	9d ad       	ldd	r25, Y+61	; 0x3d
    82f6:	98 17       	cp	r25, r24
    82f8:	18 f0       	brcs	.+6      	; 0x8300 <distance_rf+0x3a6>
    82fa:	2e 96       	adiw	r28, 0x0e	; 14
    82fc:	1f ae       	std	Y+63, r1	; 0x3f
    82fe:	2e 97       	sbiw	r28, 0x0e	; 14
    8300:	26 96       	adiw	r28, 0x06	; 6
    8302:	8f ad       	ldd	r24, Y+63	; 0x3f
    8304:	26 97       	sbiw	r28, 0x06	; 6
    8306:	2d 96       	adiw	r28, 0x0d	; 13
    8308:	9f ad       	ldd	r25, Y+63	; 0x3f
    830a:	2d 97       	sbiw	r28, 0x0d	; 13
    830c:	89 1b       	sub	r24, r25
    830e:	2f 96       	adiw	r28, 0x0f	; 15
    8310:	8f af       	std	Y+63, r24	; 0x3f
    8312:	2f 97       	sbiw	r28, 0x0f	; 15
    8314:	81 e0       	ldi	r24, 0x01	; 1
    8316:	60 96       	adiw	r28, 0x10	; 16
    8318:	8f af       	std	Y+63, r24	; 0x3f
    831a:	60 97       	sbiw	r28, 0x10	; 16
    831c:	2f 96       	adiw	r28, 0x0f	; 15
    831e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8320:	2f 97       	sbiw	r28, 0x0f	; 15
    8322:	26 96       	adiw	r28, 0x06	; 6
    8324:	8f ad       	ldd	r24, Y+63	; 0x3f
    8326:	26 97       	sbiw	r28, 0x06	; 6
    8328:	89 17       	cp	r24, r25
    832a:	18 f0       	brcs	.+6      	; 0x8332 <distance_rf+0x3d8>
    832c:	60 96       	adiw	r28, 0x10	; 16
    832e:	1f ae       	std	Y+63, r1	; 0x3f
    8330:	60 97       	sbiw	r28, 0x10	; 16
    8332:	2e 96       	adiw	r28, 0x0e	; 14
    8334:	9f ad       	ldd	r25, Y+63	; 0x3f
    8336:	2e 97       	sbiw	r28, 0x0e	; 14
    8338:	60 96       	adiw	r28, 0x10	; 16
    833a:	8f ad       	ldd	r24, Y+63	; 0x3f
    833c:	60 97       	sbiw	r28, 0x10	; 16
    833e:	98 2b       	or	r25, r24
    8340:	2e 96       	adiw	r28, 0x0e	; 14
    8342:	9f af       	std	Y+63, r25	; 0x3f
    8344:	2e 97       	sbiw	r28, 0x0e	; 14
    8346:	2f 96       	adiw	r28, 0x0f	; 15
    8348:	9f ad       	ldd	r25, Y+63	; 0x3f
    834a:	2f 97       	sbiw	r28, 0x0f	; 15
    834c:	26 96       	adiw	r28, 0x06	; 6
    834e:	9f af       	std	Y+63, r25	; 0x3f
    8350:	26 97       	sbiw	r28, 0x06	; 6
    8352:	8e ad       	ldd	r24, Y+62	; 0x3e
    8354:	9e a9       	ldd	r25, Y+54	; 0x36
    8356:	89 1b       	sub	r24, r25
    8358:	27 96       	adiw	r28, 0x07	; 7
    835a:	8f af       	std	Y+63, r24	; 0x3f
    835c:	27 97       	sbiw	r28, 0x07	; 7
    835e:	81 e0       	ldi	r24, 0x01	; 1
    8360:	61 96       	adiw	r28, 0x11	; 17
    8362:	8f af       	std	Y+63, r24	; 0x3f
    8364:	61 97       	sbiw	r28, 0x11	; 17
    8366:	27 96       	adiw	r28, 0x07	; 7
    8368:	9f ad       	ldd	r25, Y+63	; 0x3f
    836a:	27 97       	sbiw	r28, 0x07	; 7
    836c:	8e ad       	ldd	r24, Y+62	; 0x3e
    836e:	89 17       	cp	r24, r25
    8370:	18 f0       	brcs	.+6      	; 0x8378 <distance_rf+0x41e>
    8372:	61 96       	adiw	r28, 0x11	; 17
    8374:	1f ae       	std	Y+63, r1	; 0x3f
    8376:	61 97       	sbiw	r28, 0x11	; 17
    8378:	27 96       	adiw	r28, 0x07	; 7
    837a:	9f ad       	ldd	r25, Y+63	; 0x3f
    837c:	27 97       	sbiw	r28, 0x07	; 7
    837e:	2e 96       	adiw	r28, 0x0e	; 14
    8380:	8f ad       	ldd	r24, Y+63	; 0x3f
    8382:	2e 97       	sbiw	r28, 0x0e	; 14
    8384:	98 1b       	sub	r25, r24
    8386:	62 96       	adiw	r28, 0x12	; 18
    8388:	9f af       	std	Y+63, r25	; 0x3f
    838a:	62 97       	sbiw	r28, 0x12	; 18
    838c:	91 e0       	ldi	r25, 0x01	; 1
    838e:	63 96       	adiw	r28, 0x13	; 19
    8390:	9f af       	std	Y+63, r25	; 0x3f
    8392:	63 97       	sbiw	r28, 0x13	; 19
    8394:	62 96       	adiw	r28, 0x12	; 18
    8396:	8f ad       	ldd	r24, Y+63	; 0x3f
    8398:	62 97       	sbiw	r28, 0x12	; 18
    839a:	27 96       	adiw	r28, 0x07	; 7
    839c:	9f ad       	ldd	r25, Y+63	; 0x3f
    839e:	27 97       	sbiw	r28, 0x07	; 7
    83a0:	98 17       	cp	r25, r24
    83a2:	18 f0       	brcs	.+6      	; 0x83aa <distance_rf+0x450>
    83a4:	63 96       	adiw	r28, 0x13	; 19
    83a6:	1f ae       	std	Y+63, r1	; 0x3f
    83a8:	63 97       	sbiw	r28, 0x13	; 19
    83aa:	61 96       	adiw	r28, 0x11	; 17
    83ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    83ae:	61 97       	sbiw	r28, 0x11	; 17
    83b0:	63 96       	adiw	r28, 0x13	; 19
    83b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    83b4:	63 97       	sbiw	r28, 0x13	; 19
    83b6:	89 2b       	or	r24, r25
    83b8:	61 96       	adiw	r28, 0x11	; 17
    83ba:	8f af       	std	Y+63, r24	; 0x3f
    83bc:	61 97       	sbiw	r28, 0x11	; 17
    83be:	62 96       	adiw	r28, 0x12	; 18
    83c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    83c2:	62 97       	sbiw	r28, 0x12	; 18
    83c4:	27 96       	adiw	r28, 0x07	; 7
    83c6:	8f af       	std	Y+63, r24	; 0x3f
    83c8:	27 97       	sbiw	r28, 0x07	; 7
    83ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    83cc:	8f a9       	ldd	r24, Y+55	; 0x37
    83ce:	98 1b       	sub	r25, r24
    83d0:	28 96       	adiw	r28, 0x08	; 8
    83d2:	9f af       	std	Y+63, r25	; 0x3f
    83d4:	28 97       	sbiw	r28, 0x08	; 8
    83d6:	91 e0       	ldi	r25, 0x01	; 1
    83d8:	64 96       	adiw	r28, 0x14	; 20
    83da:	9f af       	std	Y+63, r25	; 0x3f
    83dc:	64 97       	sbiw	r28, 0x14	; 20
    83de:	28 96       	adiw	r28, 0x08	; 8
    83e0:	8f ad       	ldd	r24, Y+63	; 0x3f
    83e2:	28 97       	sbiw	r28, 0x08	; 8
    83e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    83e6:	98 17       	cp	r25, r24
    83e8:	18 f0       	brcs	.+6      	; 0x83f0 <distance_rf+0x496>
    83ea:	64 96       	adiw	r28, 0x14	; 20
    83ec:	1f ae       	std	Y+63, r1	; 0x3f
    83ee:	64 97       	sbiw	r28, 0x14	; 20
    83f0:	28 96       	adiw	r28, 0x08	; 8
    83f2:	8f ad       	ldd	r24, Y+63	; 0x3f
    83f4:	28 97       	sbiw	r28, 0x08	; 8
    83f6:	61 96       	adiw	r28, 0x11	; 17
    83f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    83fa:	61 97       	sbiw	r28, 0x11	; 17
    83fc:	89 1b       	sub	r24, r25
    83fe:	65 96       	adiw	r28, 0x15	; 21
    8400:	8f af       	std	Y+63, r24	; 0x3f
    8402:	65 97       	sbiw	r28, 0x15	; 21
    8404:	81 e0       	ldi	r24, 0x01	; 1
    8406:	66 96       	adiw	r28, 0x16	; 22
    8408:	8f af       	std	Y+63, r24	; 0x3f
    840a:	66 97       	sbiw	r28, 0x16	; 22
    840c:	65 96       	adiw	r28, 0x15	; 21
    840e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8410:	65 97       	sbiw	r28, 0x15	; 21
    8412:	28 96       	adiw	r28, 0x08	; 8
    8414:	8f ad       	ldd	r24, Y+63	; 0x3f
    8416:	28 97       	sbiw	r28, 0x08	; 8
    8418:	89 17       	cp	r24, r25
    841a:	18 f0       	brcs	.+6      	; 0x8422 <distance_rf+0x4c8>
    841c:	66 96       	adiw	r28, 0x16	; 22
    841e:	1f ae       	std	Y+63, r1	; 0x3f
    8420:	66 97       	sbiw	r28, 0x16	; 22
    8422:	64 96       	adiw	r28, 0x14	; 20
    8424:	9f ad       	ldd	r25, Y+63	; 0x3f
    8426:	64 97       	sbiw	r28, 0x14	; 20
    8428:	66 96       	adiw	r28, 0x16	; 22
    842a:	8f ad       	ldd	r24, Y+63	; 0x3f
    842c:	66 97       	sbiw	r28, 0x16	; 22
    842e:	98 2b       	or	r25, r24
    8430:	64 96       	adiw	r28, 0x14	; 20
    8432:	9f af       	std	Y+63, r25	; 0x3f
    8434:	64 97       	sbiw	r28, 0x14	; 20
    8436:	65 96       	adiw	r28, 0x15	; 21
    8438:	9f ad       	ldd	r25, Y+63	; 0x3f
    843a:	65 97       	sbiw	r28, 0x15	; 21
    843c:	28 96       	adiw	r28, 0x08	; 8
    843e:	9f af       	std	Y+63, r25	; 0x3f
    8440:	28 97       	sbiw	r28, 0x08	; 8
    8442:	21 96       	adiw	r28, 0x01	; 1
    8444:	8f ad       	ldd	r24, Y+63	; 0x3f
    8446:	21 97       	sbiw	r28, 0x01	; 1
    8448:	98 ad       	ldd	r25, Y+56	; 0x38
    844a:	89 1b       	sub	r24, r25
    844c:	29 96       	adiw	r28, 0x09	; 9
    844e:	8f af       	std	Y+63, r24	; 0x3f
    8450:	29 97       	sbiw	r28, 0x09	; 9
    8452:	81 e0       	ldi	r24, 0x01	; 1
    8454:	67 96       	adiw	r28, 0x17	; 23
    8456:	8f af       	std	Y+63, r24	; 0x3f
    8458:	67 97       	sbiw	r28, 0x17	; 23
    845a:	29 96       	adiw	r28, 0x09	; 9
    845c:	9f ad       	ldd	r25, Y+63	; 0x3f
    845e:	29 97       	sbiw	r28, 0x09	; 9
    8460:	21 96       	adiw	r28, 0x01	; 1
    8462:	8f ad       	ldd	r24, Y+63	; 0x3f
    8464:	21 97       	sbiw	r28, 0x01	; 1
    8466:	89 17       	cp	r24, r25
    8468:	18 f0       	brcs	.+6      	; 0x8470 <distance_rf+0x516>
    846a:	67 96       	adiw	r28, 0x17	; 23
    846c:	1f ae       	std	Y+63, r1	; 0x3f
    846e:	67 97       	sbiw	r28, 0x17	; 23
    8470:	29 96       	adiw	r28, 0x09	; 9
    8472:	9f ad       	ldd	r25, Y+63	; 0x3f
    8474:	29 97       	sbiw	r28, 0x09	; 9
    8476:	64 96       	adiw	r28, 0x14	; 20
    8478:	8f ad       	ldd	r24, Y+63	; 0x3f
    847a:	64 97       	sbiw	r28, 0x14	; 20
    847c:	98 1b       	sub	r25, r24
    847e:	68 96       	adiw	r28, 0x18	; 24
    8480:	9f af       	std	Y+63, r25	; 0x3f
    8482:	68 97       	sbiw	r28, 0x18	; 24
    8484:	91 e0       	ldi	r25, 0x01	; 1
    8486:	69 96       	adiw	r28, 0x19	; 25
    8488:	9f af       	std	Y+63, r25	; 0x3f
    848a:	69 97       	sbiw	r28, 0x19	; 25
    848c:	68 96       	adiw	r28, 0x18	; 24
    848e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8490:	68 97       	sbiw	r28, 0x18	; 24
    8492:	29 96       	adiw	r28, 0x09	; 9
    8494:	9f ad       	ldd	r25, Y+63	; 0x3f
    8496:	29 97       	sbiw	r28, 0x09	; 9
    8498:	98 17       	cp	r25, r24
    849a:	18 f0       	brcs	.+6      	; 0x84a2 <distance_rf+0x548>
    849c:	69 96       	adiw	r28, 0x19	; 25
    849e:	1f ae       	std	Y+63, r1	; 0x3f
    84a0:	69 97       	sbiw	r28, 0x19	; 25
    84a2:	67 96       	adiw	r28, 0x17	; 23
    84a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    84a6:	67 97       	sbiw	r28, 0x17	; 23
    84a8:	69 96       	adiw	r28, 0x19	; 25
    84aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    84ac:	69 97       	sbiw	r28, 0x19	; 25
    84ae:	89 2b       	or	r24, r25
    84b0:	67 96       	adiw	r28, 0x17	; 23
    84b2:	8f af       	std	Y+63, r24	; 0x3f
    84b4:	67 97       	sbiw	r28, 0x17	; 23
    84b6:	68 96       	adiw	r28, 0x18	; 24
    84b8:	8f ad       	ldd	r24, Y+63	; 0x3f
    84ba:	68 97       	sbiw	r28, 0x18	; 24
    84bc:	29 96       	adiw	r28, 0x09	; 9
    84be:	8f af       	std	Y+63, r24	; 0x3f
    84c0:	29 97       	sbiw	r28, 0x09	; 9
    84c2:	22 96       	adiw	r28, 0x02	; 2
    84c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    84c6:	22 97       	sbiw	r28, 0x02	; 2
    84c8:	89 ad       	ldd	r24, Y+57	; 0x39
    84ca:	98 1b       	sub	r25, r24
    84cc:	2a 96       	adiw	r28, 0x0a	; 10
    84ce:	9f af       	std	Y+63, r25	; 0x3f
    84d0:	2a 97       	sbiw	r28, 0x0a	; 10
    84d2:	91 e0       	ldi	r25, 0x01	; 1
    84d4:	6a 96       	adiw	r28, 0x1a	; 26
    84d6:	9f af       	std	Y+63, r25	; 0x3f
    84d8:	6a 97       	sbiw	r28, 0x1a	; 26
    84da:	2a 96       	adiw	r28, 0x0a	; 10
    84dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    84de:	2a 97       	sbiw	r28, 0x0a	; 10
    84e0:	22 96       	adiw	r28, 0x02	; 2
    84e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    84e4:	22 97       	sbiw	r28, 0x02	; 2
    84e6:	98 17       	cp	r25, r24
    84e8:	18 f0       	brcs	.+6      	; 0x84f0 <distance_rf+0x596>
    84ea:	6a 96       	adiw	r28, 0x1a	; 26
    84ec:	1f ae       	std	Y+63, r1	; 0x3f
    84ee:	6a 97       	sbiw	r28, 0x1a	; 26
    84f0:	2a 96       	adiw	r28, 0x0a	; 10
    84f2:	8f ad       	ldd	r24, Y+63	; 0x3f
    84f4:	2a 97       	sbiw	r28, 0x0a	; 10
    84f6:	67 96       	adiw	r28, 0x17	; 23
    84f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    84fa:	67 97       	sbiw	r28, 0x17	; 23
    84fc:	89 1b       	sub	r24, r25
    84fe:	6b 96       	adiw	r28, 0x1b	; 27
    8500:	8f af       	std	Y+63, r24	; 0x3f
    8502:	6b 97       	sbiw	r28, 0x1b	; 27
    8504:	81 e0       	ldi	r24, 0x01	; 1
    8506:	6c 96       	adiw	r28, 0x1c	; 28
    8508:	8f af       	std	Y+63, r24	; 0x3f
    850a:	6c 97       	sbiw	r28, 0x1c	; 28
    850c:	6b 96       	adiw	r28, 0x1b	; 27
    850e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8510:	6b 97       	sbiw	r28, 0x1b	; 27
    8512:	2a 96       	adiw	r28, 0x0a	; 10
    8514:	8f ad       	ldd	r24, Y+63	; 0x3f
    8516:	2a 97       	sbiw	r28, 0x0a	; 10
    8518:	89 17       	cp	r24, r25
    851a:	18 f0       	brcs	.+6      	; 0x8522 <distance_rf+0x5c8>
    851c:	6c 96       	adiw	r28, 0x1c	; 28
    851e:	1f ae       	std	Y+63, r1	; 0x3f
    8520:	6c 97       	sbiw	r28, 0x1c	; 28
    8522:	6a 96       	adiw	r28, 0x1a	; 26
    8524:	9f ad       	ldd	r25, Y+63	; 0x3f
    8526:	6a 97       	sbiw	r28, 0x1a	; 26
    8528:	6c 96       	adiw	r28, 0x1c	; 28
    852a:	8f ad       	ldd	r24, Y+63	; 0x3f
    852c:	6c 97       	sbiw	r28, 0x1c	; 28
    852e:	98 2b       	or	r25, r24
    8530:	6a 96       	adiw	r28, 0x1a	; 26
    8532:	9f af       	std	Y+63, r25	; 0x3f
    8534:	6a 97       	sbiw	r28, 0x1a	; 26
    8536:	6b 96       	adiw	r28, 0x1b	; 27
    8538:	9f ad       	ldd	r25, Y+63	; 0x3f
    853a:	6b 97       	sbiw	r28, 0x1b	; 27
    853c:	2a 96       	adiw	r28, 0x0a	; 10
    853e:	9f af       	std	Y+63, r25	; 0x3f
    8540:	2a 97       	sbiw	r28, 0x0a	; 10
    8542:	23 96       	adiw	r28, 0x03	; 3
    8544:	8f ad       	ldd	r24, Y+63	; 0x3f
    8546:	23 97       	sbiw	r28, 0x03	; 3
    8548:	9a ad       	ldd	r25, Y+58	; 0x3a
    854a:	89 1b       	sub	r24, r25
    854c:	2b 96       	adiw	r28, 0x0b	; 11
    854e:	8f af       	std	Y+63, r24	; 0x3f
    8550:	2b 97       	sbiw	r28, 0x0b	; 11
    8552:	81 e0       	ldi	r24, 0x01	; 1
    8554:	6d 96       	adiw	r28, 0x1d	; 29
    8556:	8f af       	std	Y+63, r24	; 0x3f
    8558:	6d 97       	sbiw	r28, 0x1d	; 29
    855a:	2b 96       	adiw	r28, 0x0b	; 11
    855c:	9f ad       	ldd	r25, Y+63	; 0x3f
    855e:	2b 97       	sbiw	r28, 0x0b	; 11
    8560:	23 96       	adiw	r28, 0x03	; 3
    8562:	8f ad       	ldd	r24, Y+63	; 0x3f
    8564:	23 97       	sbiw	r28, 0x03	; 3
    8566:	89 17       	cp	r24, r25
    8568:	18 f0       	brcs	.+6      	; 0x8570 <distance_rf+0x616>
    856a:	6d 96       	adiw	r28, 0x1d	; 29
    856c:	1f ae       	std	Y+63, r1	; 0x3f
    856e:	6d 97       	sbiw	r28, 0x1d	; 29
    8570:	2b 96       	adiw	r28, 0x0b	; 11
    8572:	9f ad       	ldd	r25, Y+63	; 0x3f
    8574:	2b 97       	sbiw	r28, 0x0b	; 11
    8576:	6a 96       	adiw	r28, 0x1a	; 26
    8578:	8f ad       	ldd	r24, Y+63	; 0x3f
    857a:	6a 97       	sbiw	r28, 0x1a	; 26
    857c:	98 1b       	sub	r25, r24
    857e:	6e 96       	adiw	r28, 0x1e	; 30
    8580:	9f af       	std	Y+63, r25	; 0x3f
    8582:	6e 97       	sbiw	r28, 0x1e	; 30
    8584:	91 e0       	ldi	r25, 0x01	; 1
    8586:	6f 96       	adiw	r28, 0x1f	; 31
    8588:	9f af       	std	Y+63, r25	; 0x3f
    858a:	6f 97       	sbiw	r28, 0x1f	; 31
    858c:	6e 96       	adiw	r28, 0x1e	; 30
    858e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8590:	6e 97       	sbiw	r28, 0x1e	; 30
    8592:	2b 96       	adiw	r28, 0x0b	; 11
    8594:	9f ad       	ldd	r25, Y+63	; 0x3f
    8596:	2b 97       	sbiw	r28, 0x0b	; 11
    8598:	98 17       	cp	r25, r24
    859a:	18 f0       	brcs	.+6      	; 0x85a2 <distance_rf+0x648>
    859c:	6f 96       	adiw	r28, 0x1f	; 31
    859e:	1f ae       	std	Y+63, r1	; 0x3f
    85a0:	6f 97       	sbiw	r28, 0x1f	; 31
    85a2:	6d 96       	adiw	r28, 0x1d	; 29
    85a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    85a6:	6d 97       	sbiw	r28, 0x1d	; 29
    85a8:	6f 96       	adiw	r28, 0x1f	; 31
    85aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    85ac:	6f 97       	sbiw	r28, 0x1f	; 31
    85ae:	89 2b       	or	r24, r25
    85b0:	6d 96       	adiw	r28, 0x1d	; 29
    85b2:	8f af       	std	Y+63, r24	; 0x3f
    85b4:	6d 97       	sbiw	r28, 0x1d	; 29
    85b6:	6e 96       	adiw	r28, 0x1e	; 30
    85b8:	8f ad       	ldd	r24, Y+63	; 0x3f
    85ba:	6e 97       	sbiw	r28, 0x1e	; 30
    85bc:	2b 96       	adiw	r28, 0x0b	; 11
    85be:	8f af       	std	Y+63, r24	; 0x3f
    85c0:	2b 97       	sbiw	r28, 0x0b	; 11
    85c2:	24 96       	adiw	r28, 0x04	; 4
    85c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    85c6:	24 97       	sbiw	r28, 0x04	; 4
    85c8:	8b ad       	ldd	r24, Y+59	; 0x3b
    85ca:	98 1b       	sub	r25, r24
    85cc:	2c 96       	adiw	r28, 0x0c	; 12
    85ce:	9f af       	std	Y+63, r25	; 0x3f
    85d0:	2c 97       	sbiw	r28, 0x0c	; 12
    85d2:	2c 96       	adiw	r28, 0x0c	; 12
    85d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    85d6:	2c 97       	sbiw	r28, 0x0c	; 12
    85d8:	6d 96       	adiw	r28, 0x1d	; 29
    85da:	9f ad       	ldd	r25, Y+63	; 0x3f
    85dc:	6d 97       	sbiw	r28, 0x1d	; 29
    85de:	89 1b       	sub	r24, r25
    85e0:	2c 96       	adiw	r28, 0x0c	; 12
    85e2:	8f af       	std	Y+63, r24	; 0x3f
    85e4:	2c 97       	sbiw	r28, 0x0c	; 12
    85e6:	25 96       	adiw	r28, 0x05	; 5
    85e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    85ea:	25 97       	sbiw	r28, 0x05	; 5
    85ec:	8c af       	std	Y+60, r24	; 0x3c
    85ee:	26 96       	adiw	r28, 0x06	; 6
    85f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    85f2:	26 97       	sbiw	r28, 0x06	; 6
    85f4:	9d af       	std	Y+61, r25	; 0x3d
    85f6:	27 96       	adiw	r28, 0x07	; 7
    85f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    85fa:	27 97       	sbiw	r28, 0x07	; 7
    85fc:	8e af       	std	Y+62, r24	; 0x3e
    85fe:	28 96       	adiw	r28, 0x08	; 8
    8600:	9f ad       	ldd	r25, Y+63	; 0x3f
    8602:	28 97       	sbiw	r28, 0x08	; 8
    8604:	9f af       	std	Y+63, r25	; 0x3f
    8606:	29 96       	adiw	r28, 0x09	; 9
    8608:	8f ad       	ldd	r24, Y+63	; 0x3f
    860a:	29 97       	sbiw	r28, 0x09	; 9
    860c:	21 96       	adiw	r28, 0x01	; 1
    860e:	8f af       	std	Y+63, r24	; 0x3f
    8610:	21 97       	sbiw	r28, 0x01	; 1
    8612:	2a 96       	adiw	r28, 0x0a	; 10
    8614:	9f ad       	ldd	r25, Y+63	; 0x3f
    8616:	2a 97       	sbiw	r28, 0x0a	; 10
    8618:	22 96       	adiw	r28, 0x02	; 2
    861a:	9f af       	std	Y+63, r25	; 0x3f
    861c:	22 97       	sbiw	r28, 0x02	; 2
    861e:	2b 96       	adiw	r28, 0x0b	; 11
    8620:	8f ad       	ldd	r24, Y+63	; 0x3f
    8622:	2b 97       	sbiw	r28, 0x0b	; 11
    8624:	23 96       	adiw	r28, 0x03	; 3
    8626:	8f af       	std	Y+63, r24	; 0x3f
    8628:	23 97       	sbiw	r28, 0x03	; 3
    862a:	2c 96       	adiw	r28, 0x0c	; 12
    862c:	9f ad       	ldd	r25, Y+63	; 0x3f
    862e:	2c 97       	sbiw	r28, 0x0c	; 12
    8630:	24 96       	adiw	r28, 0x04	; 4
    8632:	9f af       	std	Y+63, r25	; 0x3f
    8634:	24 97       	sbiw	r28, 0x04	; 4
    8636:	8c ad       	ldd	r24, Y+60	; 0x3c
    8638:	99 81       	ldd	r25, Y+1	; 0x01
    863a:	89 0f       	add	r24, r25
    863c:	a0 96       	adiw	r28, 0x20	; 32
    863e:	8f af       	std	Y+63, r24	; 0x3f
    8640:	a0 97       	sbiw	r28, 0x20	; 32
    8642:	81 e0       	ldi	r24, 0x01	; 1
    8644:	a8 96       	adiw	r28, 0x28	; 40
    8646:	8f af       	std	Y+63, r24	; 0x3f
    8648:	a8 97       	sbiw	r28, 0x28	; 40
    864a:	a0 96       	adiw	r28, 0x20	; 32
    864c:	9f ad       	ldd	r25, Y+63	; 0x3f
    864e:	a0 97       	sbiw	r28, 0x20	; 32
    8650:	8c ad       	ldd	r24, Y+60	; 0x3c
    8652:	98 17       	cp	r25, r24
    8654:	18 f0       	brcs	.+6      	; 0x865c <distance_rf+0x702>
    8656:	a8 96       	adiw	r28, 0x28	; 40
    8658:	1f ae       	std	Y+63, r1	; 0x3f
    865a:	a8 97       	sbiw	r28, 0x28	; 40
    865c:	9d ad       	ldd	r25, Y+61	; 0x3d
    865e:	8a 81       	ldd	r24, Y+2	; 0x02
    8660:	98 0f       	add	r25, r24
    8662:	a1 96       	adiw	r28, 0x21	; 33
    8664:	9f af       	std	Y+63, r25	; 0x3f
    8666:	a1 97       	sbiw	r28, 0x21	; 33
    8668:	91 e0       	ldi	r25, 0x01	; 1
    866a:	a9 96       	adiw	r28, 0x29	; 41
    866c:	9f af       	std	Y+63, r25	; 0x3f
    866e:	a9 97       	sbiw	r28, 0x29	; 41
    8670:	a1 96       	adiw	r28, 0x21	; 33
    8672:	8f ad       	ldd	r24, Y+63	; 0x3f
    8674:	a1 97       	sbiw	r28, 0x21	; 33
    8676:	9d ad       	ldd	r25, Y+61	; 0x3d
    8678:	89 17       	cp	r24, r25
    867a:	18 f0       	brcs	.+6      	; 0x8682 <distance_rf+0x728>
    867c:	a9 96       	adiw	r28, 0x29	; 41
    867e:	1f ae       	std	Y+63, r1	; 0x3f
    8680:	a9 97       	sbiw	r28, 0x29	; 41
    8682:	a8 96       	adiw	r28, 0x28	; 40
    8684:	8f ad       	ldd	r24, Y+63	; 0x3f
    8686:	a8 97       	sbiw	r28, 0x28	; 40
    8688:	a1 96       	adiw	r28, 0x21	; 33
    868a:	9f ad       	ldd	r25, Y+63	; 0x3f
    868c:	a1 97       	sbiw	r28, 0x21	; 33
    868e:	89 0f       	add	r24, r25
    8690:	aa 96       	adiw	r28, 0x2a	; 42
    8692:	8f af       	std	Y+63, r24	; 0x3f
    8694:	aa 97       	sbiw	r28, 0x2a	; 42
    8696:	81 e0       	ldi	r24, 0x01	; 1
    8698:	ab 96       	adiw	r28, 0x2b	; 43
    869a:	8f af       	std	Y+63, r24	; 0x3f
    869c:	ab 97       	sbiw	r28, 0x2b	; 43
    869e:	aa 96       	adiw	r28, 0x2a	; 42
    86a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    86a2:	aa 97       	sbiw	r28, 0x2a	; 42
    86a4:	a1 96       	adiw	r28, 0x21	; 33
    86a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    86a8:	a1 97       	sbiw	r28, 0x21	; 33
    86aa:	98 17       	cp	r25, r24
    86ac:	18 f0       	brcs	.+6      	; 0x86b4 <distance_rf+0x75a>
    86ae:	ab 96       	adiw	r28, 0x2b	; 43
    86b0:	1f ae       	std	Y+63, r1	; 0x3f
    86b2:	ab 97       	sbiw	r28, 0x2b	; 43
    86b4:	a9 96       	adiw	r28, 0x29	; 41
    86b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    86b8:	a9 97       	sbiw	r28, 0x29	; 41
    86ba:	ab 96       	adiw	r28, 0x2b	; 43
    86bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    86be:	ab 97       	sbiw	r28, 0x2b	; 43
    86c0:	98 2b       	or	r25, r24
    86c2:	a9 96       	adiw	r28, 0x29	; 41
    86c4:	9f af       	std	Y+63, r25	; 0x3f
    86c6:	a9 97       	sbiw	r28, 0x29	; 41
    86c8:	aa 96       	adiw	r28, 0x2a	; 42
    86ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    86cc:	aa 97       	sbiw	r28, 0x2a	; 42
    86ce:	a1 96       	adiw	r28, 0x21	; 33
    86d0:	9f af       	std	Y+63, r25	; 0x3f
    86d2:	a1 97       	sbiw	r28, 0x21	; 33
    86d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    86d6:	9b 81       	ldd	r25, Y+3	; 0x03
    86d8:	89 0f       	add	r24, r25
    86da:	a2 96       	adiw	r28, 0x22	; 34
    86dc:	8f af       	std	Y+63, r24	; 0x3f
    86de:	a2 97       	sbiw	r28, 0x22	; 34
    86e0:	81 e0       	ldi	r24, 0x01	; 1
    86e2:	ac 96       	adiw	r28, 0x2c	; 44
    86e4:	8f af       	std	Y+63, r24	; 0x3f
    86e6:	ac 97       	sbiw	r28, 0x2c	; 44
    86e8:	a2 96       	adiw	r28, 0x22	; 34
    86ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    86ec:	a2 97       	sbiw	r28, 0x22	; 34
    86ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    86f0:	98 17       	cp	r25, r24
    86f2:	18 f0       	brcs	.+6      	; 0x86fa <distance_rf+0x7a0>
    86f4:	ac 96       	adiw	r28, 0x2c	; 44
    86f6:	1f ae       	std	Y+63, r1	; 0x3f
    86f8:	ac 97       	sbiw	r28, 0x2c	; 44
    86fa:	a9 96       	adiw	r28, 0x29	; 41
    86fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    86fe:	a9 97       	sbiw	r28, 0x29	; 41
    8700:	a2 96       	adiw	r28, 0x22	; 34
    8702:	8f ad       	ldd	r24, Y+63	; 0x3f
    8704:	a2 97       	sbiw	r28, 0x22	; 34
    8706:	98 0f       	add	r25, r24
    8708:	ad 96       	adiw	r28, 0x2d	; 45
    870a:	9f af       	std	Y+63, r25	; 0x3f
    870c:	ad 97       	sbiw	r28, 0x2d	; 45
    870e:	91 e0       	ldi	r25, 0x01	; 1
    8710:	ae 96       	adiw	r28, 0x2e	; 46
    8712:	9f af       	std	Y+63, r25	; 0x3f
    8714:	ae 97       	sbiw	r28, 0x2e	; 46
    8716:	ad 96       	adiw	r28, 0x2d	; 45
    8718:	8f ad       	ldd	r24, Y+63	; 0x3f
    871a:	ad 97       	sbiw	r28, 0x2d	; 45
    871c:	a2 96       	adiw	r28, 0x22	; 34
    871e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8720:	a2 97       	sbiw	r28, 0x22	; 34
    8722:	89 17       	cp	r24, r25
    8724:	18 f0       	brcs	.+6      	; 0x872c <distance_rf+0x7d2>
    8726:	ae 96       	adiw	r28, 0x2e	; 46
    8728:	1f ae       	std	Y+63, r1	; 0x3f
    872a:	ae 97       	sbiw	r28, 0x2e	; 46
    872c:	ac 96       	adiw	r28, 0x2c	; 44
    872e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8730:	ac 97       	sbiw	r28, 0x2c	; 44
    8732:	ae 96       	adiw	r28, 0x2e	; 46
    8734:	9f ad       	ldd	r25, Y+63	; 0x3f
    8736:	ae 97       	sbiw	r28, 0x2e	; 46
    8738:	89 2b       	or	r24, r25
    873a:	ac 96       	adiw	r28, 0x2c	; 44
    873c:	8f af       	std	Y+63, r24	; 0x3f
    873e:	ac 97       	sbiw	r28, 0x2c	; 44
    8740:	ad 96       	adiw	r28, 0x2d	; 45
    8742:	8f ad       	ldd	r24, Y+63	; 0x3f
    8744:	ad 97       	sbiw	r28, 0x2d	; 45
    8746:	a2 96       	adiw	r28, 0x22	; 34
    8748:	8f af       	std	Y+63, r24	; 0x3f
    874a:	a2 97       	sbiw	r28, 0x22	; 34
    874c:	9f ad       	ldd	r25, Y+63	; 0x3f
    874e:	8c 81       	ldd	r24, Y+4	; 0x04
    8750:	98 0f       	add	r25, r24
    8752:	a3 96       	adiw	r28, 0x23	; 35
    8754:	9f af       	std	Y+63, r25	; 0x3f
    8756:	a3 97       	sbiw	r28, 0x23	; 35
    8758:	91 e0       	ldi	r25, 0x01	; 1
    875a:	af 96       	adiw	r28, 0x2f	; 47
    875c:	9f af       	std	Y+63, r25	; 0x3f
    875e:	af 97       	sbiw	r28, 0x2f	; 47
    8760:	a3 96       	adiw	r28, 0x23	; 35
    8762:	8f ad       	ldd	r24, Y+63	; 0x3f
    8764:	a3 97       	sbiw	r28, 0x23	; 35
    8766:	9f ad       	ldd	r25, Y+63	; 0x3f
    8768:	89 17       	cp	r24, r25
    876a:	18 f0       	brcs	.+6      	; 0x8772 <distance_rf+0x818>
    876c:	af 96       	adiw	r28, 0x2f	; 47
    876e:	1f ae       	std	Y+63, r1	; 0x3f
    8770:	af 97       	sbiw	r28, 0x2f	; 47
    8772:	ac 96       	adiw	r28, 0x2c	; 44
    8774:	8f ad       	ldd	r24, Y+63	; 0x3f
    8776:	ac 97       	sbiw	r28, 0x2c	; 44
    8778:	a3 96       	adiw	r28, 0x23	; 35
    877a:	9f ad       	ldd	r25, Y+63	; 0x3f
    877c:	a3 97       	sbiw	r28, 0x23	; 35
    877e:	89 0f       	add	r24, r25
    8780:	e0 96       	adiw	r28, 0x30	; 48
    8782:	8f af       	std	Y+63, r24	; 0x3f
    8784:	e0 97       	sbiw	r28, 0x30	; 48
    8786:	81 e0       	ldi	r24, 0x01	; 1
    8788:	e1 96       	adiw	r28, 0x31	; 49
    878a:	8f af       	std	Y+63, r24	; 0x3f
    878c:	e1 97       	sbiw	r28, 0x31	; 49
    878e:	e0 96       	adiw	r28, 0x30	; 48
    8790:	9f ad       	ldd	r25, Y+63	; 0x3f
    8792:	e0 97       	sbiw	r28, 0x30	; 48
    8794:	a3 96       	adiw	r28, 0x23	; 35
    8796:	8f ad       	ldd	r24, Y+63	; 0x3f
    8798:	a3 97       	sbiw	r28, 0x23	; 35
    879a:	98 17       	cp	r25, r24
    879c:	18 f0       	brcs	.+6      	; 0x87a4 <distance_rf+0x84a>
    879e:	e1 96       	adiw	r28, 0x31	; 49
    87a0:	1f ae       	std	Y+63, r1	; 0x3f
    87a2:	e1 97       	sbiw	r28, 0x31	; 49
    87a4:	af 96       	adiw	r28, 0x2f	; 47
    87a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    87a8:	af 97       	sbiw	r28, 0x2f	; 47
    87aa:	e1 96       	adiw	r28, 0x31	; 49
    87ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    87ae:	e1 97       	sbiw	r28, 0x31	; 49
    87b0:	98 2b       	or	r25, r24
    87b2:	af 96       	adiw	r28, 0x2f	; 47
    87b4:	9f af       	std	Y+63, r25	; 0x3f
    87b6:	af 97       	sbiw	r28, 0x2f	; 47
    87b8:	e0 96       	adiw	r28, 0x30	; 48
    87ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    87bc:	e0 97       	sbiw	r28, 0x30	; 48
    87be:	a3 96       	adiw	r28, 0x23	; 35
    87c0:	9f af       	std	Y+63, r25	; 0x3f
    87c2:	a3 97       	sbiw	r28, 0x23	; 35
    87c4:	21 96       	adiw	r28, 0x01	; 1
    87c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    87c8:	21 97       	sbiw	r28, 0x01	; 1
    87ca:	9d 81       	ldd	r25, Y+5	; 0x05
    87cc:	89 0f       	add	r24, r25
    87ce:	a4 96       	adiw	r28, 0x24	; 36
    87d0:	8f af       	std	Y+63, r24	; 0x3f
    87d2:	a4 97       	sbiw	r28, 0x24	; 36
    87d4:	81 e0       	ldi	r24, 0x01	; 1
    87d6:	e2 96       	adiw	r28, 0x32	; 50
    87d8:	8f af       	std	Y+63, r24	; 0x3f
    87da:	e2 97       	sbiw	r28, 0x32	; 50
    87dc:	a4 96       	adiw	r28, 0x24	; 36
    87de:	9f ad       	ldd	r25, Y+63	; 0x3f
    87e0:	a4 97       	sbiw	r28, 0x24	; 36
    87e2:	21 96       	adiw	r28, 0x01	; 1
    87e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    87e6:	21 97       	sbiw	r28, 0x01	; 1
    87e8:	98 17       	cp	r25, r24
    87ea:	18 f0       	brcs	.+6      	; 0x87f2 <distance_rf+0x898>
    87ec:	e2 96       	adiw	r28, 0x32	; 50
    87ee:	1f ae       	std	Y+63, r1	; 0x3f
    87f0:	e2 97       	sbiw	r28, 0x32	; 50
    87f2:	af 96       	adiw	r28, 0x2f	; 47
    87f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    87f6:	af 97       	sbiw	r28, 0x2f	; 47
    87f8:	a4 96       	adiw	r28, 0x24	; 36
    87fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    87fc:	a4 97       	sbiw	r28, 0x24	; 36
    87fe:	98 0f       	add	r25, r24
    8800:	e3 96       	adiw	r28, 0x33	; 51
    8802:	9f af       	std	Y+63, r25	; 0x3f
    8804:	e3 97       	sbiw	r28, 0x33	; 51
    8806:	91 e0       	ldi	r25, 0x01	; 1
    8808:	e4 96       	adiw	r28, 0x34	; 52
    880a:	9f af       	std	Y+63, r25	; 0x3f
    880c:	e4 97       	sbiw	r28, 0x34	; 52
    880e:	e3 96       	adiw	r28, 0x33	; 51
    8810:	8f ad       	ldd	r24, Y+63	; 0x3f
    8812:	e3 97       	sbiw	r28, 0x33	; 51
    8814:	a4 96       	adiw	r28, 0x24	; 36
    8816:	9f ad       	ldd	r25, Y+63	; 0x3f
    8818:	a4 97       	sbiw	r28, 0x24	; 36
    881a:	89 17       	cp	r24, r25
    881c:	18 f0       	brcs	.+6      	; 0x8824 <distance_rf+0x8ca>
    881e:	e4 96       	adiw	r28, 0x34	; 52
    8820:	1f ae       	std	Y+63, r1	; 0x3f
    8822:	e4 97       	sbiw	r28, 0x34	; 52
    8824:	e2 96       	adiw	r28, 0x32	; 50
    8826:	8f ad       	ldd	r24, Y+63	; 0x3f
    8828:	e2 97       	sbiw	r28, 0x32	; 50
    882a:	e4 96       	adiw	r28, 0x34	; 52
    882c:	9f ad       	ldd	r25, Y+63	; 0x3f
    882e:	e4 97       	sbiw	r28, 0x34	; 52
    8830:	89 2b       	or	r24, r25
    8832:	e2 96       	adiw	r28, 0x32	; 50
    8834:	8f af       	std	Y+63, r24	; 0x3f
    8836:	e2 97       	sbiw	r28, 0x32	; 50
    8838:	e3 96       	adiw	r28, 0x33	; 51
    883a:	8f ad       	ldd	r24, Y+63	; 0x3f
    883c:	e3 97       	sbiw	r28, 0x33	; 51
    883e:	a4 96       	adiw	r28, 0x24	; 36
    8840:	8f af       	std	Y+63, r24	; 0x3f
    8842:	a4 97       	sbiw	r28, 0x24	; 36
    8844:	22 96       	adiw	r28, 0x02	; 2
    8846:	9f ad       	ldd	r25, Y+63	; 0x3f
    8848:	22 97       	sbiw	r28, 0x02	; 2
    884a:	8e 81       	ldd	r24, Y+6	; 0x06
    884c:	98 0f       	add	r25, r24
    884e:	a5 96       	adiw	r28, 0x25	; 37
    8850:	9f af       	std	Y+63, r25	; 0x3f
    8852:	a5 97       	sbiw	r28, 0x25	; 37
    8854:	91 e0       	ldi	r25, 0x01	; 1
    8856:	e5 96       	adiw	r28, 0x35	; 53
    8858:	9f af       	std	Y+63, r25	; 0x3f
    885a:	e5 97       	sbiw	r28, 0x35	; 53
    885c:	a5 96       	adiw	r28, 0x25	; 37
    885e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8860:	a5 97       	sbiw	r28, 0x25	; 37
    8862:	22 96       	adiw	r28, 0x02	; 2
    8864:	9f ad       	ldd	r25, Y+63	; 0x3f
    8866:	22 97       	sbiw	r28, 0x02	; 2
    8868:	89 17       	cp	r24, r25
    886a:	18 f0       	brcs	.+6      	; 0x8872 <distance_rf+0x918>
    886c:	e5 96       	adiw	r28, 0x35	; 53
    886e:	1f ae       	std	Y+63, r1	; 0x3f
    8870:	e5 97       	sbiw	r28, 0x35	; 53
    8872:	e2 96       	adiw	r28, 0x32	; 50
    8874:	8f ad       	ldd	r24, Y+63	; 0x3f
    8876:	e2 97       	sbiw	r28, 0x32	; 50
    8878:	a5 96       	adiw	r28, 0x25	; 37
    887a:	9f ad       	ldd	r25, Y+63	; 0x3f
    887c:	a5 97       	sbiw	r28, 0x25	; 37
    887e:	89 0f       	add	r24, r25
    8880:	e6 96       	adiw	r28, 0x36	; 54
    8882:	8f af       	std	Y+63, r24	; 0x3f
    8884:	e6 97       	sbiw	r28, 0x36	; 54
    8886:	81 e0       	ldi	r24, 0x01	; 1
    8888:	e7 96       	adiw	r28, 0x37	; 55
    888a:	8f af       	std	Y+63, r24	; 0x3f
    888c:	e7 97       	sbiw	r28, 0x37	; 55
    888e:	e6 96       	adiw	r28, 0x36	; 54
    8890:	9f ad       	ldd	r25, Y+63	; 0x3f
    8892:	e6 97       	sbiw	r28, 0x36	; 54
    8894:	a5 96       	adiw	r28, 0x25	; 37
    8896:	8f ad       	ldd	r24, Y+63	; 0x3f
    8898:	a5 97       	sbiw	r28, 0x25	; 37
    889a:	98 17       	cp	r25, r24
    889c:	18 f0       	brcs	.+6      	; 0x88a4 <distance_rf+0x94a>
    889e:	e7 96       	adiw	r28, 0x37	; 55
    88a0:	1f ae       	std	Y+63, r1	; 0x3f
    88a2:	e7 97       	sbiw	r28, 0x37	; 55
    88a4:	e5 96       	adiw	r28, 0x35	; 53
    88a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    88a8:	e5 97       	sbiw	r28, 0x35	; 53
    88aa:	e7 96       	adiw	r28, 0x37	; 55
    88ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    88ae:	e7 97       	sbiw	r28, 0x37	; 55
    88b0:	98 2b       	or	r25, r24
    88b2:	e5 96       	adiw	r28, 0x35	; 53
    88b4:	9f af       	std	Y+63, r25	; 0x3f
    88b6:	e5 97       	sbiw	r28, 0x35	; 53
    88b8:	e6 96       	adiw	r28, 0x36	; 54
    88ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    88bc:	e6 97       	sbiw	r28, 0x36	; 54
    88be:	a5 96       	adiw	r28, 0x25	; 37
    88c0:	9f af       	std	Y+63, r25	; 0x3f
    88c2:	a5 97       	sbiw	r28, 0x25	; 37
    88c4:	23 96       	adiw	r28, 0x03	; 3
    88c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    88c8:	23 97       	sbiw	r28, 0x03	; 3
    88ca:	9f 81       	ldd	r25, Y+7	; 0x07
    88cc:	89 0f       	add	r24, r25
    88ce:	a6 96       	adiw	r28, 0x26	; 38
    88d0:	8f af       	std	Y+63, r24	; 0x3f
    88d2:	a6 97       	sbiw	r28, 0x26	; 38
    88d4:	81 e0       	ldi	r24, 0x01	; 1
    88d6:	e8 96       	adiw	r28, 0x38	; 56
    88d8:	8f af       	std	Y+63, r24	; 0x3f
    88da:	e8 97       	sbiw	r28, 0x38	; 56
    88dc:	a6 96       	adiw	r28, 0x26	; 38
    88de:	9f ad       	ldd	r25, Y+63	; 0x3f
    88e0:	a6 97       	sbiw	r28, 0x26	; 38
    88e2:	23 96       	adiw	r28, 0x03	; 3
    88e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    88e6:	23 97       	sbiw	r28, 0x03	; 3
    88e8:	98 17       	cp	r25, r24
    88ea:	18 f0       	brcs	.+6      	; 0x88f2 <distance_rf+0x998>
    88ec:	e8 96       	adiw	r28, 0x38	; 56
    88ee:	1f ae       	std	Y+63, r1	; 0x3f
    88f0:	e8 97       	sbiw	r28, 0x38	; 56
    88f2:	e5 96       	adiw	r28, 0x35	; 53
    88f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    88f6:	e5 97       	sbiw	r28, 0x35	; 53
    88f8:	a6 96       	adiw	r28, 0x26	; 38
    88fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    88fc:	a6 97       	sbiw	r28, 0x26	; 38
    88fe:	98 0f       	add	r25, r24
    8900:	e9 96       	adiw	r28, 0x39	; 57
    8902:	9f af       	std	Y+63, r25	; 0x3f
    8904:	e9 97       	sbiw	r28, 0x39	; 57
    8906:	91 e0       	ldi	r25, 0x01	; 1
    8908:	ea 96       	adiw	r28, 0x3a	; 58
    890a:	9f af       	std	Y+63, r25	; 0x3f
    890c:	ea 97       	sbiw	r28, 0x3a	; 58
    890e:	e9 96       	adiw	r28, 0x39	; 57
    8910:	8f ad       	ldd	r24, Y+63	; 0x3f
    8912:	e9 97       	sbiw	r28, 0x39	; 57
    8914:	a6 96       	adiw	r28, 0x26	; 38
    8916:	9f ad       	ldd	r25, Y+63	; 0x3f
    8918:	a6 97       	sbiw	r28, 0x26	; 38
    891a:	89 17       	cp	r24, r25
    891c:	18 f0       	brcs	.+6      	; 0x8924 <distance_rf+0x9ca>
    891e:	ea 96       	adiw	r28, 0x3a	; 58
    8920:	1f ae       	std	Y+63, r1	; 0x3f
    8922:	ea 97       	sbiw	r28, 0x3a	; 58
    8924:	e8 96       	adiw	r28, 0x38	; 56
    8926:	8f ad       	ldd	r24, Y+63	; 0x3f
    8928:	e8 97       	sbiw	r28, 0x38	; 56
    892a:	ea 96       	adiw	r28, 0x3a	; 58
    892c:	9f ad       	ldd	r25, Y+63	; 0x3f
    892e:	ea 97       	sbiw	r28, 0x3a	; 58
    8930:	89 2b       	or	r24, r25
    8932:	e8 96       	adiw	r28, 0x38	; 56
    8934:	8f af       	std	Y+63, r24	; 0x3f
    8936:	e8 97       	sbiw	r28, 0x38	; 56
    8938:	e9 96       	adiw	r28, 0x39	; 57
    893a:	8f ad       	ldd	r24, Y+63	; 0x3f
    893c:	e9 97       	sbiw	r28, 0x39	; 57
    893e:	a6 96       	adiw	r28, 0x26	; 38
    8940:	8f af       	std	Y+63, r24	; 0x3f
    8942:	a6 97       	sbiw	r28, 0x26	; 38
    8944:	24 96       	adiw	r28, 0x04	; 4
    8946:	9f ad       	ldd	r25, Y+63	; 0x3f
    8948:	24 97       	sbiw	r28, 0x04	; 4
    894a:	88 85       	ldd	r24, Y+8	; 0x08
    894c:	98 0f       	add	r25, r24
    894e:	a7 96       	adiw	r28, 0x27	; 39
    8950:	9f af       	std	Y+63, r25	; 0x3f
    8952:	a7 97       	sbiw	r28, 0x27	; 39
    8954:	e8 96       	adiw	r28, 0x38	; 56
    8956:	8f ad       	ldd	r24, Y+63	; 0x3f
    8958:	e8 97       	sbiw	r28, 0x38	; 56
    895a:	a7 96       	adiw	r28, 0x27	; 39
    895c:	9f ad       	ldd	r25, Y+63	; 0x3f
    895e:	a7 97       	sbiw	r28, 0x27	; 39
    8960:	89 0f       	add	r24, r25
    8962:	a7 96       	adiw	r28, 0x27	; 39
    8964:	8f af       	std	Y+63, r24	; 0x3f
    8966:	a7 97       	sbiw	r28, 0x27	; 39
    8968:	a0 96       	adiw	r28, 0x20	; 32
    896a:	af ac       	ldd	r10, Y+63	; 0x3f
    896c:	a0 97       	sbiw	r28, 0x20	; 32
    896e:	a1 96       	adiw	r28, 0x21	; 33
    8970:	bf ac       	ldd	r11, Y+63	; 0x3f
    8972:	a1 97       	sbiw	r28, 0x21	; 33
    8974:	a2 96       	adiw	r28, 0x22	; 34
    8976:	cf ac       	ldd	r12, Y+63	; 0x3f
    8978:	a2 97       	sbiw	r28, 0x22	; 34
    897a:	a3 96       	adiw	r28, 0x23	; 35
    897c:	df ac       	ldd	r13, Y+63	; 0x3f
    897e:	a3 97       	sbiw	r28, 0x23	; 35
    8980:	a4 96       	adiw	r28, 0x24	; 36
    8982:	ef ac       	ldd	r14, Y+63	; 0x3f
    8984:	a4 97       	sbiw	r28, 0x24	; 36
    8986:	a5 96       	adiw	r28, 0x25	; 37
    8988:	ff ac       	ldd	r15, Y+63	; 0x3f
    898a:	a5 97       	sbiw	r28, 0x25	; 37
    898c:	a6 96       	adiw	r28, 0x26	; 38
    898e:	0f ad       	ldd	r16, Y+63	; 0x3f
    8990:	a6 97       	sbiw	r28, 0x26	; 38
    8992:	a7 96       	adiw	r28, 0x27	; 39
    8994:	1f ad       	ldd	r17, Y+63	; 0x3f
    8996:	a7 97       	sbiw	r28, 0x27	; 39
    8998:	2a 2d       	mov	r18, r10
    899a:	3b 2d       	mov	r19, r11
    899c:	4c 2d       	mov	r20, r12
    899e:	5d 2d       	mov	r21, r13
    89a0:	6e 2d       	mov	r22, r14
    89a2:	7f 2d       	mov	r23, r15
    89a4:	80 2f       	mov	r24, r16
    89a6:	91 2f       	mov	r25, r17
    89a8:	aa 24       	eor	r10, r10
    89aa:	68 94       	set
    89ac:	a6 f8       	bld	r10, 6
    89ae:	0f 2e       	mov	r0, r31
    89b0:	f2 e4       	ldi	r31, 0x42	; 66
    89b2:	bf 2e       	mov	r11, r31
    89b4:	f0 2d       	mov	r31, r0
    89b6:	0f 2e       	mov	r0, r31
    89b8:	ff e0       	ldi	r31, 0x0F	; 15
    89ba:	cf 2e       	mov	r12, r31
    89bc:	f0 2d       	mov	r31, r0
    89be:	dd 24       	eor	r13, r13
    89c0:	ee 24       	eor	r14, r14
    89c2:	ff 24       	eor	r15, r15
    89c4:	00 e0       	ldi	r16, 0x00	; 0
    89c6:	10 e0       	ldi	r17, 0x00	; 0
    89c8:	0e 94 12 01 	call	0x224	; 0x224 <__udivdi3>
    89cc:	a2 2e       	mov	r10, r18
    89ce:	b3 2e       	mov	r11, r19
    89d0:	c4 2e       	mov	r12, r20
    89d2:	d5 2e       	mov	r13, r21
    89d4:	e6 2e       	mov	r14, r22
    89d6:	f7 2e       	mov	r15, r23
    89d8:	08 2f       	mov	r16, r24
    89da:	19 2f       	mov	r17, r25
    89dc:	2a 2d       	mov	r18, r10
    89de:	3b 2d       	mov	r19, r11
    89e0:	4c 2d       	mov	r20, r12
    89e2:	5d 2d       	mov	r21, r13
    89e4:	6e 2d       	mov	r22, r14
    89e6:	7f 2d       	mov	r23, r15
    89e8:	80 2f       	mov	r24, r16
    89ea:	91 2f       	mov	r25, r17
    89ec:	20 93 4f 03 	sts	0x034F, r18
    89f0:	30 93 50 03 	sts	0x0350, r19
    89f4:	40 93 51 03 	sts	0x0351, r20
    89f8:	50 93 52 03 	sts	0x0352, r21
    89fc:	60 93 53 03 	sts	0x0353, r22
    8a00:	70 93 54 03 	sts	0x0354, r23
    8a04:	80 93 55 03 	sts	0x0355, r24
    8a08:	90 93 56 03 	sts	0x0356, r25
  return length_rf;
    8a0c:	20 91 4f 03 	lds	r18, 0x034F
    8a10:	30 91 50 03 	lds	r19, 0x0350
    8a14:	40 91 51 03 	lds	r20, 0x0351
    8a18:	50 91 52 03 	lds	r21, 0x0352
    8a1c:	60 91 53 03 	lds	r22, 0x0353
    8a20:	70 91 54 03 	lds	r23, 0x0354
    8a24:	80 91 55 03 	lds	r24, 0x0355
    8a28:	90 91 56 03 	lds	r25, 0x0356
    8a2c:	a2 2e       	mov	r10, r18
    8a2e:	b3 2e       	mov	r11, r19
    8a30:	c4 2e       	mov	r12, r20
    8a32:	d5 2e       	mov	r13, r21
    8a34:	e6 2e       	mov	r14, r22
    8a36:	f7 2e       	mov	r15, r23
    8a38:	08 2f       	mov	r16, r24
    8a3a:	19 2f       	mov	r17, r25
}
    8a3c:	2a 2d       	mov	r18, r10
    8a3e:	3b 2d       	mov	r19, r11
    8a40:	4c 2d       	mov	r20, r12
    8a42:	5d 2d       	mov	r21, r13
    8a44:	6e 2d       	mov	r22, r14
    8a46:	7f 2d       	mov	r23, r15
    8a48:	80 2f       	mov	r24, r16
    8a4a:	91 2f       	mov	r25, r17
    8a4c:	c7 58       	subi	r28, 0x87	; 135
    8a4e:	df 4f       	sbci	r29, 0xFF	; 255
    8a50:	0f b6       	in	r0, 0x3f	; 63
    8a52:	f8 94       	cli
    8a54:	de bf       	out	0x3e, r29	; 62
    8a56:	0f be       	out	0x3f, r0	; 63
    8a58:	cd bf       	out	0x3d, r28	; 61
    8a5a:	cf 91       	pop	r28
    8a5c:	df 91       	pop	r29
    8a5e:	1f 91       	pop	r17
    8a60:	0f 91       	pop	r16
    8a62:	ff 90       	pop	r15
    8a64:	ef 90       	pop	r14
    8a66:	df 90       	pop	r13
    8a68:	cf 90       	pop	r12
    8a6a:	bf 90       	pop	r11
    8a6c:	af 90       	pop	r10
    8a6e:	08 95       	ret

00008a70 <distance_rb>:
uint64 distance_rb(void)
{
    8a70:	af 92       	push	r10
    8a72:	bf 92       	push	r11
    8a74:	cf 92       	push	r12
    8a76:	df 92       	push	r13
    8a78:	ef 92       	push	r14
    8a7a:	ff 92       	push	r15
    8a7c:	0f 93       	push	r16
    8a7e:	1f 93       	push	r17
    8a80:	df 93       	push	r29
    8a82:	cf 93       	push	r28
    8a84:	cd b7       	in	r28, 0x3d	; 61
    8a86:	de b7       	in	r29, 0x3e	; 62
    8a88:	c9 57       	subi	r28, 0x79	; 121
    8a8a:	d0 40       	sbci	r29, 0x00	; 0
    8a8c:	0f b6       	in	r0, 0x3f	; 63
    8a8e:	f8 94       	cli
    8a90:	de bf       	out	0x3e, r29	; 62
    8a92:	0f be       	out	0x3f, r0	; 63
    8a94:	cd bf       	out	0x3d, r28	; 61
t_rb=TCNT0;
    8a96:	e2 e5       	ldi	r30, 0x52	; 82
    8a98:	f0 e0       	ldi	r31, 0x00	; 0
    8a9a:	80 81       	ld	r24, Z
    8a9c:	28 2f       	mov	r18, r24
    8a9e:	30 e0       	ldi	r19, 0x00	; 0
    8aa0:	40 e0       	ldi	r20, 0x00	; 0
    8aa2:	50 e0       	ldi	r21, 0x00	; 0
    8aa4:	60 e0       	ldi	r22, 0x00	; 0
    8aa6:	70 e0       	ldi	r23, 0x00	; 0
    8aa8:	80 e0       	ldi	r24, 0x00	; 0
    8aaa:	90 e0       	ldi	r25, 0x00	; 0
    8aac:	20 93 57 03 	sts	0x0357, r18
    8ab0:	30 93 58 03 	sts	0x0358, r19
    8ab4:	40 93 59 03 	sts	0x0359, r20
    8ab8:	50 93 5a 03 	sts	0x035A, r21
    8abc:	60 93 5b 03 	sts	0x035B, r22
    8ac0:	70 93 5c 03 	sts	0x035C, r23
    8ac4:	80 93 5d 03 	sts	0x035D, r24
    8ac8:	90 93 5e 03 	sts	0x035E, r25
c_rb=count_right_back2;
    8acc:	80 91 0c 03 	lds	r24, 0x030C
    8ad0:	90 91 0d 03 	lds	r25, 0x030D
    8ad4:	9c 01       	movw	r18, r24
    8ad6:	40 e0       	ldi	r20, 0x00	; 0
    8ad8:	50 e0       	ldi	r21, 0x00	; 0
    8ada:	60 e0       	ldi	r22, 0x00	; 0
    8adc:	70 e0       	ldi	r23, 0x00	; 0
    8ade:	80 e0       	ldi	r24, 0x00	; 0
    8ae0:	90 e0       	ldi	r25, 0x00	; 0
    8ae2:	20 93 1f 03 	sts	0x031F, r18
    8ae6:	30 93 20 03 	sts	0x0320, r19
    8aea:	40 93 21 03 	sts	0x0321, r20
    8aee:	50 93 22 03 	sts	0x0322, r21
    8af2:	60 93 23 03 	sts	0x0323, r22
    8af6:	70 93 24 03 	sts	0x0324, r23
    8afa:	80 93 25 03 	sts	0x0325, r24
    8afe:	90 93 26 03 	sts	0x0326, r25
time_rb=(uint64)t_rb+((uint64)c_rb*256);
    8b02:	a0 90 1f 03 	lds	r10, 0x031F
    8b06:	b0 90 20 03 	lds	r11, 0x0320
    8b0a:	c0 90 21 03 	lds	r12, 0x0321
    8b0e:	d0 90 22 03 	lds	r13, 0x0322
    8b12:	e0 90 23 03 	lds	r14, 0x0323
    8b16:	f0 90 24 03 	lds	r15, 0x0324
    8b1a:	00 91 25 03 	lds	r16, 0x0325
    8b1e:	10 91 26 03 	lds	r17, 0x0326
    8b22:	2a 2d       	mov	r18, r10
    8b24:	3b 2d       	mov	r19, r11
    8b26:	4c 2d       	mov	r20, r12
    8b28:	5d 2d       	mov	r21, r13
    8b2a:	6e 2d       	mov	r22, r14
    8b2c:	7f 2d       	mov	r23, r15
    8b2e:	80 2f       	mov	r24, r16
    8b30:	91 2f       	mov	r25, r17
    8b32:	08 e0       	ldi	r16, 0x08	; 8
    8b34:	0e 94 67 00 	call	0xce	; 0xce <__ashldi3>
    8b38:	a2 2e       	mov	r10, r18
    8b3a:	b3 2e       	mov	r11, r19
    8b3c:	c4 2e       	mov	r12, r20
    8b3e:	d5 2e       	mov	r13, r21
    8b40:	e6 2e       	mov	r14, r22
    8b42:	f7 2e       	mov	r15, r23
    8b44:	08 2f       	mov	r16, r24
    8b46:	19 2f       	mov	r17, r25
    8b48:	a9 8a       	std	Y+17, r10	; 0x11
    8b4a:	ba 8a       	std	Y+18, r11	; 0x12
    8b4c:	cb 8a       	std	Y+19, r12	; 0x13
    8b4e:	dc 8a       	std	Y+20, r13	; 0x14
    8b50:	ed 8a       	std	Y+21, r14	; 0x15
    8b52:	fe 8a       	std	Y+22, r15	; 0x16
    8b54:	0f 8b       	std	Y+23, r16	; 0x17
    8b56:	18 8f       	std	Y+24, r17	; 0x18
    8b58:	80 91 57 03 	lds	r24, 0x0357
    8b5c:	89 87       	std	Y+9, r24	; 0x09
    8b5e:	90 91 58 03 	lds	r25, 0x0358
    8b62:	9a 87       	std	Y+10, r25	; 0x0a
    8b64:	80 91 59 03 	lds	r24, 0x0359
    8b68:	8b 87       	std	Y+11, r24	; 0x0b
    8b6a:	90 91 5a 03 	lds	r25, 0x035A
    8b6e:	9c 87       	std	Y+12, r25	; 0x0c
    8b70:	80 91 5b 03 	lds	r24, 0x035B
    8b74:	8d 87       	std	Y+13, r24	; 0x0d
    8b76:	90 91 5c 03 	lds	r25, 0x035C
    8b7a:	9e 87       	std	Y+14, r25	; 0x0e
    8b7c:	80 91 5d 03 	lds	r24, 0x035D
    8b80:	8f 87       	std	Y+15, r24	; 0x0f
    8b82:	90 91 5e 03 	lds	r25, 0x035E
    8b86:	98 8b       	std	Y+16, r25	; 0x10
    8b88:	89 89       	ldd	r24, Y+17	; 0x11
    8b8a:	99 85       	ldd	r25, Y+9	; 0x09
    8b8c:	89 0f       	add	r24, r25
    8b8e:	89 8f       	std	Y+25, r24	; 0x19
    8b90:	81 e0       	ldi	r24, 0x01	; 1
    8b92:	89 a3       	std	Y+33, r24	; 0x21
    8b94:	99 8d       	ldd	r25, Y+25	; 0x19
    8b96:	89 89       	ldd	r24, Y+17	; 0x11
    8b98:	98 17       	cp	r25, r24
    8b9a:	08 f0       	brcs	.+2      	; 0x8b9e <distance_rb+0x12e>
    8b9c:	19 a2       	std	Y+33, r1	; 0x21
    8b9e:	9a 89       	ldd	r25, Y+18	; 0x12
    8ba0:	8a 85       	ldd	r24, Y+10	; 0x0a
    8ba2:	98 0f       	add	r25, r24
    8ba4:	9a 8f       	std	Y+26, r25	; 0x1a
    8ba6:	91 e0       	ldi	r25, 0x01	; 1
    8ba8:	9a a3       	std	Y+34, r25	; 0x22
    8baa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    8bac:	9a 89       	ldd	r25, Y+18	; 0x12
    8bae:	89 17       	cp	r24, r25
    8bb0:	08 f0       	brcs	.+2      	; 0x8bb4 <distance_rb+0x144>
    8bb2:	1a a2       	std	Y+34, r1	; 0x22
    8bb4:	89 a1       	ldd	r24, Y+33	; 0x21
    8bb6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    8bb8:	89 0f       	add	r24, r25
    8bba:	8b a3       	std	Y+35, r24	; 0x23
    8bbc:	81 e0       	ldi	r24, 0x01	; 1
    8bbe:	8c a3       	std	Y+36, r24	; 0x24
    8bc0:	9b a1       	ldd	r25, Y+35	; 0x23
    8bc2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    8bc4:	98 17       	cp	r25, r24
    8bc6:	08 f0       	brcs	.+2      	; 0x8bca <distance_rb+0x15a>
    8bc8:	1c a2       	std	Y+36, r1	; 0x24
    8bca:	9a a1       	ldd	r25, Y+34	; 0x22
    8bcc:	8c a1       	ldd	r24, Y+36	; 0x24
    8bce:	98 2b       	or	r25, r24
    8bd0:	9a a3       	std	Y+34, r25	; 0x22
    8bd2:	9b a1       	ldd	r25, Y+35	; 0x23
    8bd4:	9a 8f       	std	Y+26, r25	; 0x1a
    8bd6:	8b 89       	ldd	r24, Y+19	; 0x13
    8bd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    8bda:	89 0f       	add	r24, r25
    8bdc:	8b 8f       	std	Y+27, r24	; 0x1b
    8bde:	81 e0       	ldi	r24, 0x01	; 1
    8be0:	8d a3       	std	Y+37, r24	; 0x25
    8be2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    8be4:	8b 89       	ldd	r24, Y+19	; 0x13
    8be6:	98 17       	cp	r25, r24
    8be8:	08 f0       	brcs	.+2      	; 0x8bec <distance_rb+0x17c>
    8bea:	1d a2       	std	Y+37, r1	; 0x25
    8bec:	9a a1       	ldd	r25, Y+34	; 0x22
    8bee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8bf0:	98 0f       	add	r25, r24
    8bf2:	9e a3       	std	Y+38, r25	; 0x26
    8bf4:	91 e0       	ldi	r25, 0x01	; 1
    8bf6:	9f a3       	std	Y+39, r25	; 0x27
    8bf8:	8e a1       	ldd	r24, Y+38	; 0x26
    8bfa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    8bfc:	89 17       	cp	r24, r25
    8bfe:	08 f0       	brcs	.+2      	; 0x8c02 <distance_rb+0x192>
    8c00:	1f a2       	std	Y+39, r1	; 0x27
    8c02:	8d a1       	ldd	r24, Y+37	; 0x25
    8c04:	9f a1       	ldd	r25, Y+39	; 0x27
    8c06:	89 2b       	or	r24, r25
    8c08:	8d a3       	std	Y+37, r24	; 0x25
    8c0a:	8e a1       	ldd	r24, Y+38	; 0x26
    8c0c:	8b 8f       	std	Y+27, r24	; 0x1b
    8c0e:	9c 89       	ldd	r25, Y+20	; 0x14
    8c10:	8c 85       	ldd	r24, Y+12	; 0x0c
    8c12:	98 0f       	add	r25, r24
    8c14:	9c 8f       	std	Y+28, r25	; 0x1c
    8c16:	91 e0       	ldi	r25, 0x01	; 1
    8c18:	98 a7       	std	Y+40, r25	; 0x28
    8c1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    8c1e:	89 17       	cp	r24, r25
    8c20:	08 f0       	brcs	.+2      	; 0x8c24 <distance_rb+0x1b4>
    8c22:	18 a6       	std	Y+40, r1	; 0x28
    8c24:	8d a1       	ldd	r24, Y+37	; 0x25
    8c26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8c28:	89 0f       	add	r24, r25
    8c2a:	89 a7       	std	Y+41, r24	; 0x29
    8c2c:	81 e0       	ldi	r24, 0x01	; 1
    8c2e:	8a a7       	std	Y+42, r24	; 0x2a
    8c30:	99 a5       	ldd	r25, Y+41	; 0x29
    8c32:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8c34:	98 17       	cp	r25, r24
    8c36:	08 f0       	brcs	.+2      	; 0x8c3a <distance_rb+0x1ca>
    8c38:	1a a6       	std	Y+42, r1	; 0x2a
    8c3a:	98 a5       	ldd	r25, Y+40	; 0x28
    8c3c:	8a a5       	ldd	r24, Y+42	; 0x2a
    8c3e:	98 2b       	or	r25, r24
    8c40:	98 a7       	std	Y+40, r25	; 0x28
    8c42:	99 a5       	ldd	r25, Y+41	; 0x29
    8c44:	9c 8f       	std	Y+28, r25	; 0x1c
    8c46:	8d 89       	ldd	r24, Y+21	; 0x15
    8c48:	9d 85       	ldd	r25, Y+13	; 0x0d
    8c4a:	89 0f       	add	r24, r25
    8c4c:	8d 8f       	std	Y+29, r24	; 0x1d
    8c4e:	81 e0       	ldi	r24, 0x01	; 1
    8c50:	8b a7       	std	Y+43, r24	; 0x2b
    8c52:	9d 8d       	ldd	r25, Y+29	; 0x1d
    8c54:	8d 89       	ldd	r24, Y+21	; 0x15
    8c56:	98 17       	cp	r25, r24
    8c58:	08 f0       	brcs	.+2      	; 0x8c5c <distance_rb+0x1ec>
    8c5a:	1b a6       	std	Y+43, r1	; 0x2b
    8c5c:	98 a5       	ldd	r25, Y+40	; 0x28
    8c5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8c60:	98 0f       	add	r25, r24
    8c62:	9c a7       	std	Y+44, r25	; 0x2c
    8c64:	91 e0       	ldi	r25, 0x01	; 1
    8c66:	9d a7       	std	Y+45, r25	; 0x2d
    8c68:	8c a5       	ldd	r24, Y+44	; 0x2c
    8c6a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    8c6c:	89 17       	cp	r24, r25
    8c6e:	08 f0       	brcs	.+2      	; 0x8c72 <distance_rb+0x202>
    8c70:	1d a6       	std	Y+45, r1	; 0x2d
    8c72:	8b a5       	ldd	r24, Y+43	; 0x2b
    8c74:	9d a5       	ldd	r25, Y+45	; 0x2d
    8c76:	89 2b       	or	r24, r25
    8c78:	8b a7       	std	Y+43, r24	; 0x2b
    8c7a:	8c a5       	ldd	r24, Y+44	; 0x2c
    8c7c:	8d 8f       	std	Y+29, r24	; 0x1d
    8c7e:	9e 89       	ldd	r25, Y+22	; 0x16
    8c80:	8e 85       	ldd	r24, Y+14	; 0x0e
    8c82:	98 0f       	add	r25, r24
    8c84:	9e 8f       	std	Y+30, r25	; 0x1e
    8c86:	91 e0       	ldi	r25, 0x01	; 1
    8c88:	9e a7       	std	Y+46, r25	; 0x2e
    8c8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    8c8c:	9e 89       	ldd	r25, Y+22	; 0x16
    8c8e:	89 17       	cp	r24, r25
    8c90:	08 f0       	brcs	.+2      	; 0x8c94 <distance_rb+0x224>
    8c92:	1e a6       	std	Y+46, r1	; 0x2e
    8c94:	8b a5       	ldd	r24, Y+43	; 0x2b
    8c96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8c98:	89 0f       	add	r24, r25
    8c9a:	8f a7       	std	Y+47, r24	; 0x2f
    8c9c:	81 e0       	ldi	r24, 0x01	; 1
    8c9e:	88 ab       	std	Y+48, r24	; 0x30
    8ca0:	9f a5       	ldd	r25, Y+47	; 0x2f
    8ca2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    8ca4:	98 17       	cp	r25, r24
    8ca6:	08 f0       	brcs	.+2      	; 0x8caa <distance_rb+0x23a>
    8ca8:	18 aa       	std	Y+48, r1	; 0x30
    8caa:	9e a5       	ldd	r25, Y+46	; 0x2e
    8cac:	88 a9       	ldd	r24, Y+48	; 0x30
    8cae:	98 2b       	or	r25, r24
    8cb0:	9e a7       	std	Y+46, r25	; 0x2e
    8cb2:	9f a5       	ldd	r25, Y+47	; 0x2f
    8cb4:	9e 8f       	std	Y+30, r25	; 0x1e
    8cb6:	8f 89       	ldd	r24, Y+23	; 0x17
    8cb8:	9f 85       	ldd	r25, Y+15	; 0x0f
    8cba:	89 0f       	add	r24, r25
    8cbc:	8f 8f       	std	Y+31, r24	; 0x1f
    8cbe:	81 e0       	ldi	r24, 0x01	; 1
    8cc0:	89 ab       	std	Y+49, r24	; 0x31
    8cc2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    8cc4:	8f 89       	ldd	r24, Y+23	; 0x17
    8cc6:	98 17       	cp	r25, r24
    8cc8:	08 f0       	brcs	.+2      	; 0x8ccc <distance_rb+0x25c>
    8cca:	19 aa       	std	Y+49, r1	; 0x31
    8ccc:	9e a5       	ldd	r25, Y+46	; 0x2e
    8cce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8cd0:	98 0f       	add	r25, r24
    8cd2:	9a ab       	std	Y+50, r25	; 0x32
    8cd4:	91 e0       	ldi	r25, 0x01	; 1
    8cd6:	9b ab       	std	Y+51, r25	; 0x33
    8cd8:	8a a9       	ldd	r24, Y+50	; 0x32
    8cda:	9f 8d       	ldd	r25, Y+31	; 0x1f
    8cdc:	89 17       	cp	r24, r25
    8cde:	08 f0       	brcs	.+2      	; 0x8ce2 <distance_rb+0x272>
    8ce0:	1b aa       	std	Y+51, r1	; 0x33
    8ce2:	89 a9       	ldd	r24, Y+49	; 0x31
    8ce4:	9b a9       	ldd	r25, Y+51	; 0x33
    8ce6:	89 2b       	or	r24, r25
    8ce8:	89 ab       	std	Y+49, r24	; 0x31
    8cea:	8a a9       	ldd	r24, Y+50	; 0x32
    8cec:	8f 8f       	std	Y+31, r24	; 0x1f
    8cee:	98 8d       	ldd	r25, Y+24	; 0x18
    8cf0:	88 89       	ldd	r24, Y+16	; 0x10
    8cf2:	98 0f       	add	r25, r24
    8cf4:	98 a3       	std	Y+32, r25	; 0x20
    8cf6:	89 a9       	ldd	r24, Y+49	; 0x31
    8cf8:	98 a1       	ldd	r25, Y+32	; 0x20
    8cfa:	89 0f       	add	r24, r25
    8cfc:	88 a3       	std	Y+32, r24	; 0x20
    8cfe:	29 8d       	ldd	r18, Y+25	; 0x19
    8d00:	3a 8d       	ldd	r19, Y+26	; 0x1a
    8d02:	4b 8d       	ldd	r20, Y+27	; 0x1b
    8d04:	5c 8d       	ldd	r21, Y+28	; 0x1c
    8d06:	6d 8d       	ldd	r22, Y+29	; 0x1d
    8d08:	7e 8d       	ldd	r23, Y+30	; 0x1e
    8d0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8d0c:	98 a1       	ldd	r25, Y+32	; 0x20
    8d0e:	20 93 27 03 	sts	0x0327, r18
    8d12:	30 93 28 03 	sts	0x0328, r19
    8d16:	40 93 29 03 	sts	0x0329, r20
    8d1a:	50 93 2a 03 	sts	0x032A, r21
    8d1e:	60 93 2b 03 	sts	0x032B, r22
    8d22:	70 93 2c 03 	sts	0x032C, r23
    8d26:	80 93 2d 03 	sts	0x032D, r24
    8d2a:	90 93 2e 03 	sts	0x032E, r25
length_rb=((((uint64)time_rb*13))/1000000);
    8d2e:	80 91 27 03 	lds	r24, 0x0327
    8d32:	89 83       	std	Y+1, r24	; 0x01
    8d34:	90 91 28 03 	lds	r25, 0x0328
    8d38:	9a 83       	std	Y+2, r25	; 0x02
    8d3a:	80 91 29 03 	lds	r24, 0x0329
    8d3e:	8b 83       	std	Y+3, r24	; 0x03
    8d40:	90 91 2a 03 	lds	r25, 0x032A
    8d44:	9c 83       	std	Y+4, r25	; 0x04
    8d46:	80 91 2b 03 	lds	r24, 0x032B
    8d4a:	8d 83       	std	Y+5, r24	; 0x05
    8d4c:	90 91 2c 03 	lds	r25, 0x032C
    8d50:	9e 83       	std	Y+6, r25	; 0x06
    8d52:	80 91 2d 03 	lds	r24, 0x032D
    8d56:	8f 83       	std	Y+7, r24	; 0x07
    8d58:	90 91 2e 03 	lds	r25, 0x032E
    8d5c:	98 87       	std	Y+8, r25	; 0x08
    8d5e:	a9 80       	ldd	r10, Y+1	; 0x01
    8d60:	ba 80       	ldd	r11, Y+2	; 0x02
    8d62:	cb 80       	ldd	r12, Y+3	; 0x03
    8d64:	dc 80       	ldd	r13, Y+4	; 0x04
    8d66:	ed 80       	ldd	r14, Y+5	; 0x05
    8d68:	fe 80       	ldd	r15, Y+6	; 0x06
    8d6a:	0f 81       	ldd	r16, Y+7	; 0x07
    8d6c:	18 85       	ldd	r17, Y+8	; 0x08
    8d6e:	2a 2d       	mov	r18, r10
    8d70:	3b 2d       	mov	r19, r11
    8d72:	4c 2d       	mov	r20, r12
    8d74:	5d 2d       	mov	r21, r13
    8d76:	6e 2d       	mov	r22, r14
    8d78:	7f 2d       	mov	r23, r15
    8d7a:	80 2f       	mov	r24, r16
    8d7c:	91 2f       	mov	r25, r17
    8d7e:	02 e0       	ldi	r16, 0x02	; 2
    8d80:	0e 94 67 00 	call	0xce	; 0xce <__ashldi3>
    8d84:	2c ab       	std	Y+52, r18	; 0x34
    8d86:	3d ab       	std	Y+53, r19	; 0x35
    8d88:	4e ab       	std	Y+54, r20	; 0x36
    8d8a:	5f ab       	std	Y+55, r21	; 0x37
    8d8c:	68 af       	std	Y+56, r22	; 0x38
    8d8e:	79 af       	std	Y+57, r23	; 0x39
    8d90:	8a af       	std	Y+58, r24	; 0x3a
    8d92:	9b af       	std	Y+59, r25	; 0x3b
    8d94:	2c a9       	ldd	r18, Y+52	; 0x34
    8d96:	3d a9       	ldd	r19, Y+53	; 0x35
    8d98:	4e a9       	ldd	r20, Y+54	; 0x36
    8d9a:	5f a9       	ldd	r21, Y+55	; 0x37
    8d9c:	68 ad       	ldd	r22, Y+56	; 0x38
    8d9e:	79 ad       	ldd	r23, Y+57	; 0x39
    8da0:	8a ad       	ldd	r24, Y+58	; 0x3a
    8da2:	9b ad       	ldd	r25, Y+59	; 0x3b
    8da4:	02 e0       	ldi	r16, 0x02	; 2
    8da6:	0e 94 67 00 	call	0xce	; 0xce <__ashldi3>
    8daa:	2c af       	std	Y+60, r18	; 0x3c
    8dac:	3d af       	std	Y+61, r19	; 0x3d
    8dae:	4e af       	std	Y+62, r20	; 0x3e
    8db0:	5f af       	std	Y+63, r21	; 0x3f
    8db2:	21 96       	adiw	r28, 0x01	; 1
    8db4:	6f af       	std	Y+63, r22	; 0x3f
    8db6:	21 97       	sbiw	r28, 0x01	; 1
    8db8:	22 96       	adiw	r28, 0x02	; 2
    8dba:	7f af       	std	Y+63, r23	; 0x3f
    8dbc:	22 97       	sbiw	r28, 0x02	; 2
    8dbe:	23 96       	adiw	r28, 0x03	; 3
    8dc0:	8f af       	std	Y+63, r24	; 0x3f
    8dc2:	23 97       	sbiw	r28, 0x03	; 3
    8dc4:	24 96       	adiw	r28, 0x04	; 4
    8dc6:	9f af       	std	Y+63, r25	; 0x3f
    8dc8:	24 97       	sbiw	r28, 0x04	; 4
    8dca:	8c ad       	ldd	r24, Y+60	; 0x3c
    8dcc:	9c a9       	ldd	r25, Y+52	; 0x34
    8dce:	89 1b       	sub	r24, r25
    8dd0:	25 96       	adiw	r28, 0x05	; 5
    8dd2:	8f af       	std	Y+63, r24	; 0x3f
    8dd4:	25 97       	sbiw	r28, 0x05	; 5
    8dd6:	81 e0       	ldi	r24, 0x01	; 1
    8dd8:	2d 96       	adiw	r28, 0x0d	; 13
    8dda:	8f af       	std	Y+63, r24	; 0x3f
    8ddc:	2d 97       	sbiw	r28, 0x0d	; 13
    8dde:	25 96       	adiw	r28, 0x05	; 5
    8de0:	9f ad       	ldd	r25, Y+63	; 0x3f
    8de2:	25 97       	sbiw	r28, 0x05	; 5
    8de4:	8c ad       	ldd	r24, Y+60	; 0x3c
    8de6:	89 17       	cp	r24, r25
    8de8:	18 f0       	brcs	.+6      	; 0x8df0 <distance_rb+0x380>
    8dea:	2d 96       	adiw	r28, 0x0d	; 13
    8dec:	1f ae       	std	Y+63, r1	; 0x3f
    8dee:	2d 97       	sbiw	r28, 0x0d	; 13
    8df0:	9d ad       	ldd	r25, Y+61	; 0x3d
    8df2:	8d a9       	ldd	r24, Y+53	; 0x35
    8df4:	98 1b       	sub	r25, r24
    8df6:	26 96       	adiw	r28, 0x06	; 6
    8df8:	9f af       	std	Y+63, r25	; 0x3f
    8dfa:	26 97       	sbiw	r28, 0x06	; 6
    8dfc:	91 e0       	ldi	r25, 0x01	; 1
    8dfe:	2e 96       	adiw	r28, 0x0e	; 14
    8e00:	9f af       	std	Y+63, r25	; 0x3f
    8e02:	2e 97       	sbiw	r28, 0x0e	; 14
    8e04:	26 96       	adiw	r28, 0x06	; 6
    8e06:	8f ad       	ldd	r24, Y+63	; 0x3f
    8e08:	26 97       	sbiw	r28, 0x06	; 6
    8e0a:	9d ad       	ldd	r25, Y+61	; 0x3d
    8e0c:	98 17       	cp	r25, r24
    8e0e:	18 f0       	brcs	.+6      	; 0x8e16 <distance_rb+0x3a6>
    8e10:	2e 96       	adiw	r28, 0x0e	; 14
    8e12:	1f ae       	std	Y+63, r1	; 0x3f
    8e14:	2e 97       	sbiw	r28, 0x0e	; 14
    8e16:	26 96       	adiw	r28, 0x06	; 6
    8e18:	8f ad       	ldd	r24, Y+63	; 0x3f
    8e1a:	26 97       	sbiw	r28, 0x06	; 6
    8e1c:	2d 96       	adiw	r28, 0x0d	; 13
    8e1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8e20:	2d 97       	sbiw	r28, 0x0d	; 13
    8e22:	89 1b       	sub	r24, r25
    8e24:	2f 96       	adiw	r28, 0x0f	; 15
    8e26:	8f af       	std	Y+63, r24	; 0x3f
    8e28:	2f 97       	sbiw	r28, 0x0f	; 15
    8e2a:	81 e0       	ldi	r24, 0x01	; 1
    8e2c:	60 96       	adiw	r28, 0x10	; 16
    8e2e:	8f af       	std	Y+63, r24	; 0x3f
    8e30:	60 97       	sbiw	r28, 0x10	; 16
    8e32:	2f 96       	adiw	r28, 0x0f	; 15
    8e34:	9f ad       	ldd	r25, Y+63	; 0x3f
    8e36:	2f 97       	sbiw	r28, 0x0f	; 15
    8e38:	26 96       	adiw	r28, 0x06	; 6
    8e3a:	8f ad       	ldd	r24, Y+63	; 0x3f
    8e3c:	26 97       	sbiw	r28, 0x06	; 6
    8e3e:	89 17       	cp	r24, r25
    8e40:	18 f0       	brcs	.+6      	; 0x8e48 <distance_rb+0x3d8>
    8e42:	60 96       	adiw	r28, 0x10	; 16
    8e44:	1f ae       	std	Y+63, r1	; 0x3f
    8e46:	60 97       	sbiw	r28, 0x10	; 16
    8e48:	2e 96       	adiw	r28, 0x0e	; 14
    8e4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8e4c:	2e 97       	sbiw	r28, 0x0e	; 14
    8e4e:	60 96       	adiw	r28, 0x10	; 16
    8e50:	8f ad       	ldd	r24, Y+63	; 0x3f
    8e52:	60 97       	sbiw	r28, 0x10	; 16
    8e54:	98 2b       	or	r25, r24
    8e56:	2e 96       	adiw	r28, 0x0e	; 14
    8e58:	9f af       	std	Y+63, r25	; 0x3f
    8e5a:	2e 97       	sbiw	r28, 0x0e	; 14
    8e5c:	2f 96       	adiw	r28, 0x0f	; 15
    8e5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8e60:	2f 97       	sbiw	r28, 0x0f	; 15
    8e62:	26 96       	adiw	r28, 0x06	; 6
    8e64:	9f af       	std	Y+63, r25	; 0x3f
    8e66:	26 97       	sbiw	r28, 0x06	; 6
    8e68:	8e ad       	ldd	r24, Y+62	; 0x3e
    8e6a:	9e a9       	ldd	r25, Y+54	; 0x36
    8e6c:	89 1b       	sub	r24, r25
    8e6e:	27 96       	adiw	r28, 0x07	; 7
    8e70:	8f af       	std	Y+63, r24	; 0x3f
    8e72:	27 97       	sbiw	r28, 0x07	; 7
    8e74:	81 e0       	ldi	r24, 0x01	; 1
    8e76:	61 96       	adiw	r28, 0x11	; 17
    8e78:	8f af       	std	Y+63, r24	; 0x3f
    8e7a:	61 97       	sbiw	r28, 0x11	; 17
    8e7c:	27 96       	adiw	r28, 0x07	; 7
    8e7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8e80:	27 97       	sbiw	r28, 0x07	; 7
    8e82:	8e ad       	ldd	r24, Y+62	; 0x3e
    8e84:	89 17       	cp	r24, r25
    8e86:	18 f0       	brcs	.+6      	; 0x8e8e <distance_rb+0x41e>
    8e88:	61 96       	adiw	r28, 0x11	; 17
    8e8a:	1f ae       	std	Y+63, r1	; 0x3f
    8e8c:	61 97       	sbiw	r28, 0x11	; 17
    8e8e:	27 96       	adiw	r28, 0x07	; 7
    8e90:	9f ad       	ldd	r25, Y+63	; 0x3f
    8e92:	27 97       	sbiw	r28, 0x07	; 7
    8e94:	2e 96       	adiw	r28, 0x0e	; 14
    8e96:	8f ad       	ldd	r24, Y+63	; 0x3f
    8e98:	2e 97       	sbiw	r28, 0x0e	; 14
    8e9a:	98 1b       	sub	r25, r24
    8e9c:	62 96       	adiw	r28, 0x12	; 18
    8e9e:	9f af       	std	Y+63, r25	; 0x3f
    8ea0:	62 97       	sbiw	r28, 0x12	; 18
    8ea2:	91 e0       	ldi	r25, 0x01	; 1
    8ea4:	63 96       	adiw	r28, 0x13	; 19
    8ea6:	9f af       	std	Y+63, r25	; 0x3f
    8ea8:	63 97       	sbiw	r28, 0x13	; 19
    8eaa:	62 96       	adiw	r28, 0x12	; 18
    8eac:	8f ad       	ldd	r24, Y+63	; 0x3f
    8eae:	62 97       	sbiw	r28, 0x12	; 18
    8eb0:	27 96       	adiw	r28, 0x07	; 7
    8eb2:	9f ad       	ldd	r25, Y+63	; 0x3f
    8eb4:	27 97       	sbiw	r28, 0x07	; 7
    8eb6:	98 17       	cp	r25, r24
    8eb8:	18 f0       	brcs	.+6      	; 0x8ec0 <distance_rb+0x450>
    8eba:	63 96       	adiw	r28, 0x13	; 19
    8ebc:	1f ae       	std	Y+63, r1	; 0x3f
    8ebe:	63 97       	sbiw	r28, 0x13	; 19
    8ec0:	61 96       	adiw	r28, 0x11	; 17
    8ec2:	8f ad       	ldd	r24, Y+63	; 0x3f
    8ec4:	61 97       	sbiw	r28, 0x11	; 17
    8ec6:	63 96       	adiw	r28, 0x13	; 19
    8ec8:	9f ad       	ldd	r25, Y+63	; 0x3f
    8eca:	63 97       	sbiw	r28, 0x13	; 19
    8ecc:	89 2b       	or	r24, r25
    8ece:	61 96       	adiw	r28, 0x11	; 17
    8ed0:	8f af       	std	Y+63, r24	; 0x3f
    8ed2:	61 97       	sbiw	r28, 0x11	; 17
    8ed4:	62 96       	adiw	r28, 0x12	; 18
    8ed6:	8f ad       	ldd	r24, Y+63	; 0x3f
    8ed8:	62 97       	sbiw	r28, 0x12	; 18
    8eda:	27 96       	adiw	r28, 0x07	; 7
    8edc:	8f af       	std	Y+63, r24	; 0x3f
    8ede:	27 97       	sbiw	r28, 0x07	; 7
    8ee0:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ee2:	8f a9       	ldd	r24, Y+55	; 0x37
    8ee4:	98 1b       	sub	r25, r24
    8ee6:	28 96       	adiw	r28, 0x08	; 8
    8ee8:	9f af       	std	Y+63, r25	; 0x3f
    8eea:	28 97       	sbiw	r28, 0x08	; 8
    8eec:	91 e0       	ldi	r25, 0x01	; 1
    8eee:	64 96       	adiw	r28, 0x14	; 20
    8ef0:	9f af       	std	Y+63, r25	; 0x3f
    8ef2:	64 97       	sbiw	r28, 0x14	; 20
    8ef4:	28 96       	adiw	r28, 0x08	; 8
    8ef6:	8f ad       	ldd	r24, Y+63	; 0x3f
    8ef8:	28 97       	sbiw	r28, 0x08	; 8
    8efa:	9f ad       	ldd	r25, Y+63	; 0x3f
    8efc:	98 17       	cp	r25, r24
    8efe:	18 f0       	brcs	.+6      	; 0x8f06 <distance_rb+0x496>
    8f00:	64 96       	adiw	r28, 0x14	; 20
    8f02:	1f ae       	std	Y+63, r1	; 0x3f
    8f04:	64 97       	sbiw	r28, 0x14	; 20
    8f06:	28 96       	adiw	r28, 0x08	; 8
    8f08:	8f ad       	ldd	r24, Y+63	; 0x3f
    8f0a:	28 97       	sbiw	r28, 0x08	; 8
    8f0c:	61 96       	adiw	r28, 0x11	; 17
    8f0e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8f10:	61 97       	sbiw	r28, 0x11	; 17
    8f12:	89 1b       	sub	r24, r25
    8f14:	65 96       	adiw	r28, 0x15	; 21
    8f16:	8f af       	std	Y+63, r24	; 0x3f
    8f18:	65 97       	sbiw	r28, 0x15	; 21
    8f1a:	81 e0       	ldi	r24, 0x01	; 1
    8f1c:	66 96       	adiw	r28, 0x16	; 22
    8f1e:	8f af       	std	Y+63, r24	; 0x3f
    8f20:	66 97       	sbiw	r28, 0x16	; 22
    8f22:	65 96       	adiw	r28, 0x15	; 21
    8f24:	9f ad       	ldd	r25, Y+63	; 0x3f
    8f26:	65 97       	sbiw	r28, 0x15	; 21
    8f28:	28 96       	adiw	r28, 0x08	; 8
    8f2a:	8f ad       	ldd	r24, Y+63	; 0x3f
    8f2c:	28 97       	sbiw	r28, 0x08	; 8
    8f2e:	89 17       	cp	r24, r25
    8f30:	18 f0       	brcs	.+6      	; 0x8f38 <distance_rb+0x4c8>
    8f32:	66 96       	adiw	r28, 0x16	; 22
    8f34:	1f ae       	std	Y+63, r1	; 0x3f
    8f36:	66 97       	sbiw	r28, 0x16	; 22
    8f38:	64 96       	adiw	r28, 0x14	; 20
    8f3a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8f3c:	64 97       	sbiw	r28, 0x14	; 20
    8f3e:	66 96       	adiw	r28, 0x16	; 22
    8f40:	8f ad       	ldd	r24, Y+63	; 0x3f
    8f42:	66 97       	sbiw	r28, 0x16	; 22
    8f44:	98 2b       	or	r25, r24
    8f46:	64 96       	adiw	r28, 0x14	; 20
    8f48:	9f af       	std	Y+63, r25	; 0x3f
    8f4a:	64 97       	sbiw	r28, 0x14	; 20
    8f4c:	65 96       	adiw	r28, 0x15	; 21
    8f4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8f50:	65 97       	sbiw	r28, 0x15	; 21
    8f52:	28 96       	adiw	r28, 0x08	; 8
    8f54:	9f af       	std	Y+63, r25	; 0x3f
    8f56:	28 97       	sbiw	r28, 0x08	; 8
    8f58:	21 96       	adiw	r28, 0x01	; 1
    8f5a:	8f ad       	ldd	r24, Y+63	; 0x3f
    8f5c:	21 97       	sbiw	r28, 0x01	; 1
    8f5e:	98 ad       	ldd	r25, Y+56	; 0x38
    8f60:	89 1b       	sub	r24, r25
    8f62:	29 96       	adiw	r28, 0x09	; 9
    8f64:	8f af       	std	Y+63, r24	; 0x3f
    8f66:	29 97       	sbiw	r28, 0x09	; 9
    8f68:	81 e0       	ldi	r24, 0x01	; 1
    8f6a:	67 96       	adiw	r28, 0x17	; 23
    8f6c:	8f af       	std	Y+63, r24	; 0x3f
    8f6e:	67 97       	sbiw	r28, 0x17	; 23
    8f70:	29 96       	adiw	r28, 0x09	; 9
    8f72:	9f ad       	ldd	r25, Y+63	; 0x3f
    8f74:	29 97       	sbiw	r28, 0x09	; 9
    8f76:	21 96       	adiw	r28, 0x01	; 1
    8f78:	8f ad       	ldd	r24, Y+63	; 0x3f
    8f7a:	21 97       	sbiw	r28, 0x01	; 1
    8f7c:	89 17       	cp	r24, r25
    8f7e:	18 f0       	brcs	.+6      	; 0x8f86 <distance_rb+0x516>
    8f80:	67 96       	adiw	r28, 0x17	; 23
    8f82:	1f ae       	std	Y+63, r1	; 0x3f
    8f84:	67 97       	sbiw	r28, 0x17	; 23
    8f86:	29 96       	adiw	r28, 0x09	; 9
    8f88:	9f ad       	ldd	r25, Y+63	; 0x3f
    8f8a:	29 97       	sbiw	r28, 0x09	; 9
    8f8c:	64 96       	adiw	r28, 0x14	; 20
    8f8e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8f90:	64 97       	sbiw	r28, 0x14	; 20
    8f92:	98 1b       	sub	r25, r24
    8f94:	68 96       	adiw	r28, 0x18	; 24
    8f96:	9f af       	std	Y+63, r25	; 0x3f
    8f98:	68 97       	sbiw	r28, 0x18	; 24
    8f9a:	91 e0       	ldi	r25, 0x01	; 1
    8f9c:	69 96       	adiw	r28, 0x19	; 25
    8f9e:	9f af       	std	Y+63, r25	; 0x3f
    8fa0:	69 97       	sbiw	r28, 0x19	; 25
    8fa2:	68 96       	adiw	r28, 0x18	; 24
    8fa4:	8f ad       	ldd	r24, Y+63	; 0x3f
    8fa6:	68 97       	sbiw	r28, 0x18	; 24
    8fa8:	29 96       	adiw	r28, 0x09	; 9
    8faa:	9f ad       	ldd	r25, Y+63	; 0x3f
    8fac:	29 97       	sbiw	r28, 0x09	; 9
    8fae:	98 17       	cp	r25, r24
    8fb0:	18 f0       	brcs	.+6      	; 0x8fb8 <distance_rb+0x548>
    8fb2:	69 96       	adiw	r28, 0x19	; 25
    8fb4:	1f ae       	std	Y+63, r1	; 0x3f
    8fb6:	69 97       	sbiw	r28, 0x19	; 25
    8fb8:	67 96       	adiw	r28, 0x17	; 23
    8fba:	8f ad       	ldd	r24, Y+63	; 0x3f
    8fbc:	67 97       	sbiw	r28, 0x17	; 23
    8fbe:	69 96       	adiw	r28, 0x19	; 25
    8fc0:	9f ad       	ldd	r25, Y+63	; 0x3f
    8fc2:	69 97       	sbiw	r28, 0x19	; 25
    8fc4:	89 2b       	or	r24, r25
    8fc6:	67 96       	adiw	r28, 0x17	; 23
    8fc8:	8f af       	std	Y+63, r24	; 0x3f
    8fca:	67 97       	sbiw	r28, 0x17	; 23
    8fcc:	68 96       	adiw	r28, 0x18	; 24
    8fce:	8f ad       	ldd	r24, Y+63	; 0x3f
    8fd0:	68 97       	sbiw	r28, 0x18	; 24
    8fd2:	29 96       	adiw	r28, 0x09	; 9
    8fd4:	8f af       	std	Y+63, r24	; 0x3f
    8fd6:	29 97       	sbiw	r28, 0x09	; 9
    8fd8:	22 96       	adiw	r28, 0x02	; 2
    8fda:	9f ad       	ldd	r25, Y+63	; 0x3f
    8fdc:	22 97       	sbiw	r28, 0x02	; 2
    8fde:	89 ad       	ldd	r24, Y+57	; 0x39
    8fe0:	98 1b       	sub	r25, r24
    8fe2:	2a 96       	adiw	r28, 0x0a	; 10
    8fe4:	9f af       	std	Y+63, r25	; 0x3f
    8fe6:	2a 97       	sbiw	r28, 0x0a	; 10
    8fe8:	91 e0       	ldi	r25, 0x01	; 1
    8fea:	6a 96       	adiw	r28, 0x1a	; 26
    8fec:	9f af       	std	Y+63, r25	; 0x3f
    8fee:	6a 97       	sbiw	r28, 0x1a	; 26
    8ff0:	2a 96       	adiw	r28, 0x0a	; 10
    8ff2:	8f ad       	ldd	r24, Y+63	; 0x3f
    8ff4:	2a 97       	sbiw	r28, 0x0a	; 10
    8ff6:	22 96       	adiw	r28, 0x02	; 2
    8ff8:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ffa:	22 97       	sbiw	r28, 0x02	; 2
    8ffc:	98 17       	cp	r25, r24
    8ffe:	18 f0       	brcs	.+6      	; 0x9006 <distance_rb+0x596>
    9000:	6a 96       	adiw	r28, 0x1a	; 26
    9002:	1f ae       	std	Y+63, r1	; 0x3f
    9004:	6a 97       	sbiw	r28, 0x1a	; 26
    9006:	2a 96       	adiw	r28, 0x0a	; 10
    9008:	8f ad       	ldd	r24, Y+63	; 0x3f
    900a:	2a 97       	sbiw	r28, 0x0a	; 10
    900c:	67 96       	adiw	r28, 0x17	; 23
    900e:	9f ad       	ldd	r25, Y+63	; 0x3f
    9010:	67 97       	sbiw	r28, 0x17	; 23
    9012:	89 1b       	sub	r24, r25
    9014:	6b 96       	adiw	r28, 0x1b	; 27
    9016:	8f af       	std	Y+63, r24	; 0x3f
    9018:	6b 97       	sbiw	r28, 0x1b	; 27
    901a:	81 e0       	ldi	r24, 0x01	; 1
    901c:	6c 96       	adiw	r28, 0x1c	; 28
    901e:	8f af       	std	Y+63, r24	; 0x3f
    9020:	6c 97       	sbiw	r28, 0x1c	; 28
    9022:	6b 96       	adiw	r28, 0x1b	; 27
    9024:	9f ad       	ldd	r25, Y+63	; 0x3f
    9026:	6b 97       	sbiw	r28, 0x1b	; 27
    9028:	2a 96       	adiw	r28, 0x0a	; 10
    902a:	8f ad       	ldd	r24, Y+63	; 0x3f
    902c:	2a 97       	sbiw	r28, 0x0a	; 10
    902e:	89 17       	cp	r24, r25
    9030:	18 f0       	brcs	.+6      	; 0x9038 <distance_rb+0x5c8>
    9032:	6c 96       	adiw	r28, 0x1c	; 28
    9034:	1f ae       	std	Y+63, r1	; 0x3f
    9036:	6c 97       	sbiw	r28, 0x1c	; 28
    9038:	6a 96       	adiw	r28, 0x1a	; 26
    903a:	9f ad       	ldd	r25, Y+63	; 0x3f
    903c:	6a 97       	sbiw	r28, 0x1a	; 26
    903e:	6c 96       	adiw	r28, 0x1c	; 28
    9040:	8f ad       	ldd	r24, Y+63	; 0x3f
    9042:	6c 97       	sbiw	r28, 0x1c	; 28
    9044:	98 2b       	or	r25, r24
    9046:	6a 96       	adiw	r28, 0x1a	; 26
    9048:	9f af       	std	Y+63, r25	; 0x3f
    904a:	6a 97       	sbiw	r28, 0x1a	; 26
    904c:	6b 96       	adiw	r28, 0x1b	; 27
    904e:	9f ad       	ldd	r25, Y+63	; 0x3f
    9050:	6b 97       	sbiw	r28, 0x1b	; 27
    9052:	2a 96       	adiw	r28, 0x0a	; 10
    9054:	9f af       	std	Y+63, r25	; 0x3f
    9056:	2a 97       	sbiw	r28, 0x0a	; 10
    9058:	23 96       	adiw	r28, 0x03	; 3
    905a:	8f ad       	ldd	r24, Y+63	; 0x3f
    905c:	23 97       	sbiw	r28, 0x03	; 3
    905e:	9a ad       	ldd	r25, Y+58	; 0x3a
    9060:	89 1b       	sub	r24, r25
    9062:	2b 96       	adiw	r28, 0x0b	; 11
    9064:	8f af       	std	Y+63, r24	; 0x3f
    9066:	2b 97       	sbiw	r28, 0x0b	; 11
    9068:	81 e0       	ldi	r24, 0x01	; 1
    906a:	6d 96       	adiw	r28, 0x1d	; 29
    906c:	8f af       	std	Y+63, r24	; 0x3f
    906e:	6d 97       	sbiw	r28, 0x1d	; 29
    9070:	2b 96       	adiw	r28, 0x0b	; 11
    9072:	9f ad       	ldd	r25, Y+63	; 0x3f
    9074:	2b 97       	sbiw	r28, 0x0b	; 11
    9076:	23 96       	adiw	r28, 0x03	; 3
    9078:	8f ad       	ldd	r24, Y+63	; 0x3f
    907a:	23 97       	sbiw	r28, 0x03	; 3
    907c:	89 17       	cp	r24, r25
    907e:	18 f0       	brcs	.+6      	; 0x9086 <distance_rb+0x616>
    9080:	6d 96       	adiw	r28, 0x1d	; 29
    9082:	1f ae       	std	Y+63, r1	; 0x3f
    9084:	6d 97       	sbiw	r28, 0x1d	; 29
    9086:	2b 96       	adiw	r28, 0x0b	; 11
    9088:	9f ad       	ldd	r25, Y+63	; 0x3f
    908a:	2b 97       	sbiw	r28, 0x0b	; 11
    908c:	6a 96       	adiw	r28, 0x1a	; 26
    908e:	8f ad       	ldd	r24, Y+63	; 0x3f
    9090:	6a 97       	sbiw	r28, 0x1a	; 26
    9092:	98 1b       	sub	r25, r24
    9094:	6e 96       	adiw	r28, 0x1e	; 30
    9096:	9f af       	std	Y+63, r25	; 0x3f
    9098:	6e 97       	sbiw	r28, 0x1e	; 30
    909a:	91 e0       	ldi	r25, 0x01	; 1
    909c:	6f 96       	adiw	r28, 0x1f	; 31
    909e:	9f af       	std	Y+63, r25	; 0x3f
    90a0:	6f 97       	sbiw	r28, 0x1f	; 31
    90a2:	6e 96       	adiw	r28, 0x1e	; 30
    90a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    90a6:	6e 97       	sbiw	r28, 0x1e	; 30
    90a8:	2b 96       	adiw	r28, 0x0b	; 11
    90aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    90ac:	2b 97       	sbiw	r28, 0x0b	; 11
    90ae:	98 17       	cp	r25, r24
    90b0:	18 f0       	brcs	.+6      	; 0x90b8 <distance_rb+0x648>
    90b2:	6f 96       	adiw	r28, 0x1f	; 31
    90b4:	1f ae       	std	Y+63, r1	; 0x3f
    90b6:	6f 97       	sbiw	r28, 0x1f	; 31
    90b8:	6d 96       	adiw	r28, 0x1d	; 29
    90ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    90bc:	6d 97       	sbiw	r28, 0x1d	; 29
    90be:	6f 96       	adiw	r28, 0x1f	; 31
    90c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    90c2:	6f 97       	sbiw	r28, 0x1f	; 31
    90c4:	89 2b       	or	r24, r25
    90c6:	6d 96       	adiw	r28, 0x1d	; 29
    90c8:	8f af       	std	Y+63, r24	; 0x3f
    90ca:	6d 97       	sbiw	r28, 0x1d	; 29
    90cc:	6e 96       	adiw	r28, 0x1e	; 30
    90ce:	8f ad       	ldd	r24, Y+63	; 0x3f
    90d0:	6e 97       	sbiw	r28, 0x1e	; 30
    90d2:	2b 96       	adiw	r28, 0x0b	; 11
    90d4:	8f af       	std	Y+63, r24	; 0x3f
    90d6:	2b 97       	sbiw	r28, 0x0b	; 11
    90d8:	24 96       	adiw	r28, 0x04	; 4
    90da:	9f ad       	ldd	r25, Y+63	; 0x3f
    90dc:	24 97       	sbiw	r28, 0x04	; 4
    90de:	8b ad       	ldd	r24, Y+59	; 0x3b
    90e0:	98 1b       	sub	r25, r24
    90e2:	2c 96       	adiw	r28, 0x0c	; 12
    90e4:	9f af       	std	Y+63, r25	; 0x3f
    90e6:	2c 97       	sbiw	r28, 0x0c	; 12
    90e8:	2c 96       	adiw	r28, 0x0c	; 12
    90ea:	8f ad       	ldd	r24, Y+63	; 0x3f
    90ec:	2c 97       	sbiw	r28, 0x0c	; 12
    90ee:	6d 96       	adiw	r28, 0x1d	; 29
    90f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    90f2:	6d 97       	sbiw	r28, 0x1d	; 29
    90f4:	89 1b       	sub	r24, r25
    90f6:	2c 96       	adiw	r28, 0x0c	; 12
    90f8:	8f af       	std	Y+63, r24	; 0x3f
    90fa:	2c 97       	sbiw	r28, 0x0c	; 12
    90fc:	25 96       	adiw	r28, 0x05	; 5
    90fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    9100:	25 97       	sbiw	r28, 0x05	; 5
    9102:	8c af       	std	Y+60, r24	; 0x3c
    9104:	26 96       	adiw	r28, 0x06	; 6
    9106:	9f ad       	ldd	r25, Y+63	; 0x3f
    9108:	26 97       	sbiw	r28, 0x06	; 6
    910a:	9d af       	std	Y+61, r25	; 0x3d
    910c:	27 96       	adiw	r28, 0x07	; 7
    910e:	8f ad       	ldd	r24, Y+63	; 0x3f
    9110:	27 97       	sbiw	r28, 0x07	; 7
    9112:	8e af       	std	Y+62, r24	; 0x3e
    9114:	28 96       	adiw	r28, 0x08	; 8
    9116:	9f ad       	ldd	r25, Y+63	; 0x3f
    9118:	28 97       	sbiw	r28, 0x08	; 8
    911a:	9f af       	std	Y+63, r25	; 0x3f
    911c:	29 96       	adiw	r28, 0x09	; 9
    911e:	8f ad       	ldd	r24, Y+63	; 0x3f
    9120:	29 97       	sbiw	r28, 0x09	; 9
    9122:	21 96       	adiw	r28, 0x01	; 1
    9124:	8f af       	std	Y+63, r24	; 0x3f
    9126:	21 97       	sbiw	r28, 0x01	; 1
    9128:	2a 96       	adiw	r28, 0x0a	; 10
    912a:	9f ad       	ldd	r25, Y+63	; 0x3f
    912c:	2a 97       	sbiw	r28, 0x0a	; 10
    912e:	22 96       	adiw	r28, 0x02	; 2
    9130:	9f af       	std	Y+63, r25	; 0x3f
    9132:	22 97       	sbiw	r28, 0x02	; 2
    9134:	2b 96       	adiw	r28, 0x0b	; 11
    9136:	8f ad       	ldd	r24, Y+63	; 0x3f
    9138:	2b 97       	sbiw	r28, 0x0b	; 11
    913a:	23 96       	adiw	r28, 0x03	; 3
    913c:	8f af       	std	Y+63, r24	; 0x3f
    913e:	23 97       	sbiw	r28, 0x03	; 3
    9140:	2c 96       	adiw	r28, 0x0c	; 12
    9142:	9f ad       	ldd	r25, Y+63	; 0x3f
    9144:	2c 97       	sbiw	r28, 0x0c	; 12
    9146:	24 96       	adiw	r28, 0x04	; 4
    9148:	9f af       	std	Y+63, r25	; 0x3f
    914a:	24 97       	sbiw	r28, 0x04	; 4
    914c:	8c ad       	ldd	r24, Y+60	; 0x3c
    914e:	99 81       	ldd	r25, Y+1	; 0x01
    9150:	89 0f       	add	r24, r25
    9152:	a0 96       	adiw	r28, 0x20	; 32
    9154:	8f af       	std	Y+63, r24	; 0x3f
    9156:	a0 97       	sbiw	r28, 0x20	; 32
    9158:	81 e0       	ldi	r24, 0x01	; 1
    915a:	a8 96       	adiw	r28, 0x28	; 40
    915c:	8f af       	std	Y+63, r24	; 0x3f
    915e:	a8 97       	sbiw	r28, 0x28	; 40
    9160:	a0 96       	adiw	r28, 0x20	; 32
    9162:	9f ad       	ldd	r25, Y+63	; 0x3f
    9164:	a0 97       	sbiw	r28, 0x20	; 32
    9166:	8c ad       	ldd	r24, Y+60	; 0x3c
    9168:	98 17       	cp	r25, r24
    916a:	18 f0       	brcs	.+6      	; 0x9172 <distance_rb+0x702>
    916c:	a8 96       	adiw	r28, 0x28	; 40
    916e:	1f ae       	std	Y+63, r1	; 0x3f
    9170:	a8 97       	sbiw	r28, 0x28	; 40
    9172:	9d ad       	ldd	r25, Y+61	; 0x3d
    9174:	8a 81       	ldd	r24, Y+2	; 0x02
    9176:	98 0f       	add	r25, r24
    9178:	a1 96       	adiw	r28, 0x21	; 33
    917a:	9f af       	std	Y+63, r25	; 0x3f
    917c:	a1 97       	sbiw	r28, 0x21	; 33
    917e:	91 e0       	ldi	r25, 0x01	; 1
    9180:	a9 96       	adiw	r28, 0x29	; 41
    9182:	9f af       	std	Y+63, r25	; 0x3f
    9184:	a9 97       	sbiw	r28, 0x29	; 41
    9186:	a1 96       	adiw	r28, 0x21	; 33
    9188:	8f ad       	ldd	r24, Y+63	; 0x3f
    918a:	a1 97       	sbiw	r28, 0x21	; 33
    918c:	9d ad       	ldd	r25, Y+61	; 0x3d
    918e:	89 17       	cp	r24, r25
    9190:	18 f0       	brcs	.+6      	; 0x9198 <distance_rb+0x728>
    9192:	a9 96       	adiw	r28, 0x29	; 41
    9194:	1f ae       	std	Y+63, r1	; 0x3f
    9196:	a9 97       	sbiw	r28, 0x29	; 41
    9198:	a8 96       	adiw	r28, 0x28	; 40
    919a:	8f ad       	ldd	r24, Y+63	; 0x3f
    919c:	a8 97       	sbiw	r28, 0x28	; 40
    919e:	a1 96       	adiw	r28, 0x21	; 33
    91a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    91a2:	a1 97       	sbiw	r28, 0x21	; 33
    91a4:	89 0f       	add	r24, r25
    91a6:	aa 96       	adiw	r28, 0x2a	; 42
    91a8:	8f af       	std	Y+63, r24	; 0x3f
    91aa:	aa 97       	sbiw	r28, 0x2a	; 42
    91ac:	81 e0       	ldi	r24, 0x01	; 1
    91ae:	ab 96       	adiw	r28, 0x2b	; 43
    91b0:	8f af       	std	Y+63, r24	; 0x3f
    91b2:	ab 97       	sbiw	r28, 0x2b	; 43
    91b4:	aa 96       	adiw	r28, 0x2a	; 42
    91b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    91b8:	aa 97       	sbiw	r28, 0x2a	; 42
    91ba:	a1 96       	adiw	r28, 0x21	; 33
    91bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    91be:	a1 97       	sbiw	r28, 0x21	; 33
    91c0:	98 17       	cp	r25, r24
    91c2:	18 f0       	brcs	.+6      	; 0x91ca <distance_rb+0x75a>
    91c4:	ab 96       	adiw	r28, 0x2b	; 43
    91c6:	1f ae       	std	Y+63, r1	; 0x3f
    91c8:	ab 97       	sbiw	r28, 0x2b	; 43
    91ca:	a9 96       	adiw	r28, 0x29	; 41
    91cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    91ce:	a9 97       	sbiw	r28, 0x29	; 41
    91d0:	ab 96       	adiw	r28, 0x2b	; 43
    91d2:	8f ad       	ldd	r24, Y+63	; 0x3f
    91d4:	ab 97       	sbiw	r28, 0x2b	; 43
    91d6:	98 2b       	or	r25, r24
    91d8:	a9 96       	adiw	r28, 0x29	; 41
    91da:	9f af       	std	Y+63, r25	; 0x3f
    91dc:	a9 97       	sbiw	r28, 0x29	; 41
    91de:	aa 96       	adiw	r28, 0x2a	; 42
    91e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    91e2:	aa 97       	sbiw	r28, 0x2a	; 42
    91e4:	a1 96       	adiw	r28, 0x21	; 33
    91e6:	9f af       	std	Y+63, r25	; 0x3f
    91e8:	a1 97       	sbiw	r28, 0x21	; 33
    91ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    91ec:	9b 81       	ldd	r25, Y+3	; 0x03
    91ee:	89 0f       	add	r24, r25
    91f0:	a2 96       	adiw	r28, 0x22	; 34
    91f2:	8f af       	std	Y+63, r24	; 0x3f
    91f4:	a2 97       	sbiw	r28, 0x22	; 34
    91f6:	81 e0       	ldi	r24, 0x01	; 1
    91f8:	ac 96       	adiw	r28, 0x2c	; 44
    91fa:	8f af       	std	Y+63, r24	; 0x3f
    91fc:	ac 97       	sbiw	r28, 0x2c	; 44
    91fe:	a2 96       	adiw	r28, 0x22	; 34
    9200:	9f ad       	ldd	r25, Y+63	; 0x3f
    9202:	a2 97       	sbiw	r28, 0x22	; 34
    9204:	8e ad       	ldd	r24, Y+62	; 0x3e
    9206:	98 17       	cp	r25, r24
    9208:	18 f0       	brcs	.+6      	; 0x9210 <distance_rb+0x7a0>
    920a:	ac 96       	adiw	r28, 0x2c	; 44
    920c:	1f ae       	std	Y+63, r1	; 0x3f
    920e:	ac 97       	sbiw	r28, 0x2c	; 44
    9210:	a9 96       	adiw	r28, 0x29	; 41
    9212:	9f ad       	ldd	r25, Y+63	; 0x3f
    9214:	a9 97       	sbiw	r28, 0x29	; 41
    9216:	a2 96       	adiw	r28, 0x22	; 34
    9218:	8f ad       	ldd	r24, Y+63	; 0x3f
    921a:	a2 97       	sbiw	r28, 0x22	; 34
    921c:	98 0f       	add	r25, r24
    921e:	ad 96       	adiw	r28, 0x2d	; 45
    9220:	9f af       	std	Y+63, r25	; 0x3f
    9222:	ad 97       	sbiw	r28, 0x2d	; 45
    9224:	91 e0       	ldi	r25, 0x01	; 1
    9226:	ae 96       	adiw	r28, 0x2e	; 46
    9228:	9f af       	std	Y+63, r25	; 0x3f
    922a:	ae 97       	sbiw	r28, 0x2e	; 46
    922c:	ad 96       	adiw	r28, 0x2d	; 45
    922e:	8f ad       	ldd	r24, Y+63	; 0x3f
    9230:	ad 97       	sbiw	r28, 0x2d	; 45
    9232:	a2 96       	adiw	r28, 0x22	; 34
    9234:	9f ad       	ldd	r25, Y+63	; 0x3f
    9236:	a2 97       	sbiw	r28, 0x22	; 34
    9238:	89 17       	cp	r24, r25
    923a:	18 f0       	brcs	.+6      	; 0x9242 <distance_rb+0x7d2>
    923c:	ae 96       	adiw	r28, 0x2e	; 46
    923e:	1f ae       	std	Y+63, r1	; 0x3f
    9240:	ae 97       	sbiw	r28, 0x2e	; 46
    9242:	ac 96       	adiw	r28, 0x2c	; 44
    9244:	8f ad       	ldd	r24, Y+63	; 0x3f
    9246:	ac 97       	sbiw	r28, 0x2c	; 44
    9248:	ae 96       	adiw	r28, 0x2e	; 46
    924a:	9f ad       	ldd	r25, Y+63	; 0x3f
    924c:	ae 97       	sbiw	r28, 0x2e	; 46
    924e:	89 2b       	or	r24, r25
    9250:	ac 96       	adiw	r28, 0x2c	; 44
    9252:	8f af       	std	Y+63, r24	; 0x3f
    9254:	ac 97       	sbiw	r28, 0x2c	; 44
    9256:	ad 96       	adiw	r28, 0x2d	; 45
    9258:	8f ad       	ldd	r24, Y+63	; 0x3f
    925a:	ad 97       	sbiw	r28, 0x2d	; 45
    925c:	a2 96       	adiw	r28, 0x22	; 34
    925e:	8f af       	std	Y+63, r24	; 0x3f
    9260:	a2 97       	sbiw	r28, 0x22	; 34
    9262:	9f ad       	ldd	r25, Y+63	; 0x3f
    9264:	8c 81       	ldd	r24, Y+4	; 0x04
    9266:	98 0f       	add	r25, r24
    9268:	a3 96       	adiw	r28, 0x23	; 35
    926a:	9f af       	std	Y+63, r25	; 0x3f
    926c:	a3 97       	sbiw	r28, 0x23	; 35
    926e:	91 e0       	ldi	r25, 0x01	; 1
    9270:	af 96       	adiw	r28, 0x2f	; 47
    9272:	9f af       	std	Y+63, r25	; 0x3f
    9274:	af 97       	sbiw	r28, 0x2f	; 47
    9276:	a3 96       	adiw	r28, 0x23	; 35
    9278:	8f ad       	ldd	r24, Y+63	; 0x3f
    927a:	a3 97       	sbiw	r28, 0x23	; 35
    927c:	9f ad       	ldd	r25, Y+63	; 0x3f
    927e:	89 17       	cp	r24, r25
    9280:	18 f0       	brcs	.+6      	; 0x9288 <distance_rb+0x818>
    9282:	af 96       	adiw	r28, 0x2f	; 47
    9284:	1f ae       	std	Y+63, r1	; 0x3f
    9286:	af 97       	sbiw	r28, 0x2f	; 47
    9288:	ac 96       	adiw	r28, 0x2c	; 44
    928a:	8f ad       	ldd	r24, Y+63	; 0x3f
    928c:	ac 97       	sbiw	r28, 0x2c	; 44
    928e:	a3 96       	adiw	r28, 0x23	; 35
    9290:	9f ad       	ldd	r25, Y+63	; 0x3f
    9292:	a3 97       	sbiw	r28, 0x23	; 35
    9294:	89 0f       	add	r24, r25
    9296:	e0 96       	adiw	r28, 0x30	; 48
    9298:	8f af       	std	Y+63, r24	; 0x3f
    929a:	e0 97       	sbiw	r28, 0x30	; 48
    929c:	81 e0       	ldi	r24, 0x01	; 1
    929e:	e1 96       	adiw	r28, 0x31	; 49
    92a0:	8f af       	std	Y+63, r24	; 0x3f
    92a2:	e1 97       	sbiw	r28, 0x31	; 49
    92a4:	e0 96       	adiw	r28, 0x30	; 48
    92a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    92a8:	e0 97       	sbiw	r28, 0x30	; 48
    92aa:	a3 96       	adiw	r28, 0x23	; 35
    92ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    92ae:	a3 97       	sbiw	r28, 0x23	; 35
    92b0:	98 17       	cp	r25, r24
    92b2:	18 f0       	brcs	.+6      	; 0x92ba <distance_rb+0x84a>
    92b4:	e1 96       	adiw	r28, 0x31	; 49
    92b6:	1f ae       	std	Y+63, r1	; 0x3f
    92b8:	e1 97       	sbiw	r28, 0x31	; 49
    92ba:	af 96       	adiw	r28, 0x2f	; 47
    92bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    92be:	af 97       	sbiw	r28, 0x2f	; 47
    92c0:	e1 96       	adiw	r28, 0x31	; 49
    92c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    92c4:	e1 97       	sbiw	r28, 0x31	; 49
    92c6:	98 2b       	or	r25, r24
    92c8:	af 96       	adiw	r28, 0x2f	; 47
    92ca:	9f af       	std	Y+63, r25	; 0x3f
    92cc:	af 97       	sbiw	r28, 0x2f	; 47
    92ce:	e0 96       	adiw	r28, 0x30	; 48
    92d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    92d2:	e0 97       	sbiw	r28, 0x30	; 48
    92d4:	a3 96       	adiw	r28, 0x23	; 35
    92d6:	9f af       	std	Y+63, r25	; 0x3f
    92d8:	a3 97       	sbiw	r28, 0x23	; 35
    92da:	21 96       	adiw	r28, 0x01	; 1
    92dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    92de:	21 97       	sbiw	r28, 0x01	; 1
    92e0:	9d 81       	ldd	r25, Y+5	; 0x05
    92e2:	89 0f       	add	r24, r25
    92e4:	a4 96       	adiw	r28, 0x24	; 36
    92e6:	8f af       	std	Y+63, r24	; 0x3f
    92e8:	a4 97       	sbiw	r28, 0x24	; 36
    92ea:	81 e0       	ldi	r24, 0x01	; 1
    92ec:	e2 96       	adiw	r28, 0x32	; 50
    92ee:	8f af       	std	Y+63, r24	; 0x3f
    92f0:	e2 97       	sbiw	r28, 0x32	; 50
    92f2:	a4 96       	adiw	r28, 0x24	; 36
    92f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    92f6:	a4 97       	sbiw	r28, 0x24	; 36
    92f8:	21 96       	adiw	r28, 0x01	; 1
    92fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    92fc:	21 97       	sbiw	r28, 0x01	; 1
    92fe:	98 17       	cp	r25, r24
    9300:	18 f0       	brcs	.+6      	; 0x9308 <distance_rb+0x898>
    9302:	e2 96       	adiw	r28, 0x32	; 50
    9304:	1f ae       	std	Y+63, r1	; 0x3f
    9306:	e2 97       	sbiw	r28, 0x32	; 50
    9308:	af 96       	adiw	r28, 0x2f	; 47
    930a:	9f ad       	ldd	r25, Y+63	; 0x3f
    930c:	af 97       	sbiw	r28, 0x2f	; 47
    930e:	a4 96       	adiw	r28, 0x24	; 36
    9310:	8f ad       	ldd	r24, Y+63	; 0x3f
    9312:	a4 97       	sbiw	r28, 0x24	; 36
    9314:	98 0f       	add	r25, r24
    9316:	e3 96       	adiw	r28, 0x33	; 51
    9318:	9f af       	std	Y+63, r25	; 0x3f
    931a:	e3 97       	sbiw	r28, 0x33	; 51
    931c:	91 e0       	ldi	r25, 0x01	; 1
    931e:	e4 96       	adiw	r28, 0x34	; 52
    9320:	9f af       	std	Y+63, r25	; 0x3f
    9322:	e4 97       	sbiw	r28, 0x34	; 52
    9324:	e3 96       	adiw	r28, 0x33	; 51
    9326:	8f ad       	ldd	r24, Y+63	; 0x3f
    9328:	e3 97       	sbiw	r28, 0x33	; 51
    932a:	a4 96       	adiw	r28, 0x24	; 36
    932c:	9f ad       	ldd	r25, Y+63	; 0x3f
    932e:	a4 97       	sbiw	r28, 0x24	; 36
    9330:	89 17       	cp	r24, r25
    9332:	18 f0       	brcs	.+6      	; 0x933a <distance_rb+0x8ca>
    9334:	e4 96       	adiw	r28, 0x34	; 52
    9336:	1f ae       	std	Y+63, r1	; 0x3f
    9338:	e4 97       	sbiw	r28, 0x34	; 52
    933a:	e2 96       	adiw	r28, 0x32	; 50
    933c:	8f ad       	ldd	r24, Y+63	; 0x3f
    933e:	e2 97       	sbiw	r28, 0x32	; 50
    9340:	e4 96       	adiw	r28, 0x34	; 52
    9342:	9f ad       	ldd	r25, Y+63	; 0x3f
    9344:	e4 97       	sbiw	r28, 0x34	; 52
    9346:	89 2b       	or	r24, r25
    9348:	e2 96       	adiw	r28, 0x32	; 50
    934a:	8f af       	std	Y+63, r24	; 0x3f
    934c:	e2 97       	sbiw	r28, 0x32	; 50
    934e:	e3 96       	adiw	r28, 0x33	; 51
    9350:	8f ad       	ldd	r24, Y+63	; 0x3f
    9352:	e3 97       	sbiw	r28, 0x33	; 51
    9354:	a4 96       	adiw	r28, 0x24	; 36
    9356:	8f af       	std	Y+63, r24	; 0x3f
    9358:	a4 97       	sbiw	r28, 0x24	; 36
    935a:	22 96       	adiw	r28, 0x02	; 2
    935c:	9f ad       	ldd	r25, Y+63	; 0x3f
    935e:	22 97       	sbiw	r28, 0x02	; 2
    9360:	8e 81       	ldd	r24, Y+6	; 0x06
    9362:	98 0f       	add	r25, r24
    9364:	a5 96       	adiw	r28, 0x25	; 37
    9366:	9f af       	std	Y+63, r25	; 0x3f
    9368:	a5 97       	sbiw	r28, 0x25	; 37
    936a:	91 e0       	ldi	r25, 0x01	; 1
    936c:	e5 96       	adiw	r28, 0x35	; 53
    936e:	9f af       	std	Y+63, r25	; 0x3f
    9370:	e5 97       	sbiw	r28, 0x35	; 53
    9372:	a5 96       	adiw	r28, 0x25	; 37
    9374:	8f ad       	ldd	r24, Y+63	; 0x3f
    9376:	a5 97       	sbiw	r28, 0x25	; 37
    9378:	22 96       	adiw	r28, 0x02	; 2
    937a:	9f ad       	ldd	r25, Y+63	; 0x3f
    937c:	22 97       	sbiw	r28, 0x02	; 2
    937e:	89 17       	cp	r24, r25
    9380:	18 f0       	brcs	.+6      	; 0x9388 <distance_rb+0x918>
    9382:	e5 96       	adiw	r28, 0x35	; 53
    9384:	1f ae       	std	Y+63, r1	; 0x3f
    9386:	e5 97       	sbiw	r28, 0x35	; 53
    9388:	e2 96       	adiw	r28, 0x32	; 50
    938a:	8f ad       	ldd	r24, Y+63	; 0x3f
    938c:	e2 97       	sbiw	r28, 0x32	; 50
    938e:	a5 96       	adiw	r28, 0x25	; 37
    9390:	9f ad       	ldd	r25, Y+63	; 0x3f
    9392:	a5 97       	sbiw	r28, 0x25	; 37
    9394:	89 0f       	add	r24, r25
    9396:	e6 96       	adiw	r28, 0x36	; 54
    9398:	8f af       	std	Y+63, r24	; 0x3f
    939a:	e6 97       	sbiw	r28, 0x36	; 54
    939c:	81 e0       	ldi	r24, 0x01	; 1
    939e:	e7 96       	adiw	r28, 0x37	; 55
    93a0:	8f af       	std	Y+63, r24	; 0x3f
    93a2:	e7 97       	sbiw	r28, 0x37	; 55
    93a4:	e6 96       	adiw	r28, 0x36	; 54
    93a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    93a8:	e6 97       	sbiw	r28, 0x36	; 54
    93aa:	a5 96       	adiw	r28, 0x25	; 37
    93ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    93ae:	a5 97       	sbiw	r28, 0x25	; 37
    93b0:	98 17       	cp	r25, r24
    93b2:	18 f0       	brcs	.+6      	; 0x93ba <distance_rb+0x94a>
    93b4:	e7 96       	adiw	r28, 0x37	; 55
    93b6:	1f ae       	std	Y+63, r1	; 0x3f
    93b8:	e7 97       	sbiw	r28, 0x37	; 55
    93ba:	e5 96       	adiw	r28, 0x35	; 53
    93bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    93be:	e5 97       	sbiw	r28, 0x35	; 53
    93c0:	e7 96       	adiw	r28, 0x37	; 55
    93c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    93c4:	e7 97       	sbiw	r28, 0x37	; 55
    93c6:	98 2b       	or	r25, r24
    93c8:	e5 96       	adiw	r28, 0x35	; 53
    93ca:	9f af       	std	Y+63, r25	; 0x3f
    93cc:	e5 97       	sbiw	r28, 0x35	; 53
    93ce:	e6 96       	adiw	r28, 0x36	; 54
    93d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    93d2:	e6 97       	sbiw	r28, 0x36	; 54
    93d4:	a5 96       	adiw	r28, 0x25	; 37
    93d6:	9f af       	std	Y+63, r25	; 0x3f
    93d8:	a5 97       	sbiw	r28, 0x25	; 37
    93da:	23 96       	adiw	r28, 0x03	; 3
    93dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    93de:	23 97       	sbiw	r28, 0x03	; 3
    93e0:	9f 81       	ldd	r25, Y+7	; 0x07
    93e2:	89 0f       	add	r24, r25
    93e4:	a6 96       	adiw	r28, 0x26	; 38
    93e6:	8f af       	std	Y+63, r24	; 0x3f
    93e8:	a6 97       	sbiw	r28, 0x26	; 38
    93ea:	81 e0       	ldi	r24, 0x01	; 1
    93ec:	e8 96       	adiw	r28, 0x38	; 56
    93ee:	8f af       	std	Y+63, r24	; 0x3f
    93f0:	e8 97       	sbiw	r28, 0x38	; 56
    93f2:	a6 96       	adiw	r28, 0x26	; 38
    93f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    93f6:	a6 97       	sbiw	r28, 0x26	; 38
    93f8:	23 96       	adiw	r28, 0x03	; 3
    93fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    93fc:	23 97       	sbiw	r28, 0x03	; 3
    93fe:	98 17       	cp	r25, r24
    9400:	18 f0       	brcs	.+6      	; 0x9408 <distance_rb+0x998>
    9402:	e8 96       	adiw	r28, 0x38	; 56
    9404:	1f ae       	std	Y+63, r1	; 0x3f
    9406:	e8 97       	sbiw	r28, 0x38	; 56
    9408:	e5 96       	adiw	r28, 0x35	; 53
    940a:	9f ad       	ldd	r25, Y+63	; 0x3f
    940c:	e5 97       	sbiw	r28, 0x35	; 53
    940e:	a6 96       	adiw	r28, 0x26	; 38
    9410:	8f ad       	ldd	r24, Y+63	; 0x3f
    9412:	a6 97       	sbiw	r28, 0x26	; 38
    9414:	98 0f       	add	r25, r24
    9416:	e9 96       	adiw	r28, 0x39	; 57
    9418:	9f af       	std	Y+63, r25	; 0x3f
    941a:	e9 97       	sbiw	r28, 0x39	; 57
    941c:	91 e0       	ldi	r25, 0x01	; 1
    941e:	ea 96       	adiw	r28, 0x3a	; 58
    9420:	9f af       	std	Y+63, r25	; 0x3f
    9422:	ea 97       	sbiw	r28, 0x3a	; 58
    9424:	e9 96       	adiw	r28, 0x39	; 57
    9426:	8f ad       	ldd	r24, Y+63	; 0x3f
    9428:	e9 97       	sbiw	r28, 0x39	; 57
    942a:	a6 96       	adiw	r28, 0x26	; 38
    942c:	9f ad       	ldd	r25, Y+63	; 0x3f
    942e:	a6 97       	sbiw	r28, 0x26	; 38
    9430:	89 17       	cp	r24, r25
    9432:	18 f0       	brcs	.+6      	; 0x943a <distance_rb+0x9ca>
    9434:	ea 96       	adiw	r28, 0x3a	; 58
    9436:	1f ae       	std	Y+63, r1	; 0x3f
    9438:	ea 97       	sbiw	r28, 0x3a	; 58
    943a:	e8 96       	adiw	r28, 0x38	; 56
    943c:	8f ad       	ldd	r24, Y+63	; 0x3f
    943e:	e8 97       	sbiw	r28, 0x38	; 56
    9440:	ea 96       	adiw	r28, 0x3a	; 58
    9442:	9f ad       	ldd	r25, Y+63	; 0x3f
    9444:	ea 97       	sbiw	r28, 0x3a	; 58
    9446:	89 2b       	or	r24, r25
    9448:	e8 96       	adiw	r28, 0x38	; 56
    944a:	8f af       	std	Y+63, r24	; 0x3f
    944c:	e8 97       	sbiw	r28, 0x38	; 56
    944e:	e9 96       	adiw	r28, 0x39	; 57
    9450:	8f ad       	ldd	r24, Y+63	; 0x3f
    9452:	e9 97       	sbiw	r28, 0x39	; 57
    9454:	a6 96       	adiw	r28, 0x26	; 38
    9456:	8f af       	std	Y+63, r24	; 0x3f
    9458:	a6 97       	sbiw	r28, 0x26	; 38
    945a:	24 96       	adiw	r28, 0x04	; 4
    945c:	9f ad       	ldd	r25, Y+63	; 0x3f
    945e:	24 97       	sbiw	r28, 0x04	; 4
    9460:	88 85       	ldd	r24, Y+8	; 0x08
    9462:	98 0f       	add	r25, r24
    9464:	a7 96       	adiw	r28, 0x27	; 39
    9466:	9f af       	std	Y+63, r25	; 0x3f
    9468:	a7 97       	sbiw	r28, 0x27	; 39
    946a:	e8 96       	adiw	r28, 0x38	; 56
    946c:	8f ad       	ldd	r24, Y+63	; 0x3f
    946e:	e8 97       	sbiw	r28, 0x38	; 56
    9470:	a7 96       	adiw	r28, 0x27	; 39
    9472:	9f ad       	ldd	r25, Y+63	; 0x3f
    9474:	a7 97       	sbiw	r28, 0x27	; 39
    9476:	89 0f       	add	r24, r25
    9478:	a7 96       	adiw	r28, 0x27	; 39
    947a:	8f af       	std	Y+63, r24	; 0x3f
    947c:	a7 97       	sbiw	r28, 0x27	; 39
    947e:	a0 96       	adiw	r28, 0x20	; 32
    9480:	af ac       	ldd	r10, Y+63	; 0x3f
    9482:	a0 97       	sbiw	r28, 0x20	; 32
    9484:	a1 96       	adiw	r28, 0x21	; 33
    9486:	bf ac       	ldd	r11, Y+63	; 0x3f
    9488:	a1 97       	sbiw	r28, 0x21	; 33
    948a:	a2 96       	adiw	r28, 0x22	; 34
    948c:	cf ac       	ldd	r12, Y+63	; 0x3f
    948e:	a2 97       	sbiw	r28, 0x22	; 34
    9490:	a3 96       	adiw	r28, 0x23	; 35
    9492:	df ac       	ldd	r13, Y+63	; 0x3f
    9494:	a3 97       	sbiw	r28, 0x23	; 35
    9496:	a4 96       	adiw	r28, 0x24	; 36
    9498:	ef ac       	ldd	r14, Y+63	; 0x3f
    949a:	a4 97       	sbiw	r28, 0x24	; 36
    949c:	a5 96       	adiw	r28, 0x25	; 37
    949e:	ff ac       	ldd	r15, Y+63	; 0x3f
    94a0:	a5 97       	sbiw	r28, 0x25	; 37
    94a2:	a6 96       	adiw	r28, 0x26	; 38
    94a4:	0f ad       	ldd	r16, Y+63	; 0x3f
    94a6:	a6 97       	sbiw	r28, 0x26	; 38
    94a8:	a7 96       	adiw	r28, 0x27	; 39
    94aa:	1f ad       	ldd	r17, Y+63	; 0x3f
    94ac:	a7 97       	sbiw	r28, 0x27	; 39
    94ae:	2a 2d       	mov	r18, r10
    94b0:	3b 2d       	mov	r19, r11
    94b2:	4c 2d       	mov	r20, r12
    94b4:	5d 2d       	mov	r21, r13
    94b6:	6e 2d       	mov	r22, r14
    94b8:	7f 2d       	mov	r23, r15
    94ba:	80 2f       	mov	r24, r16
    94bc:	91 2f       	mov	r25, r17
    94be:	aa 24       	eor	r10, r10
    94c0:	68 94       	set
    94c2:	a6 f8       	bld	r10, 6
    94c4:	0f 2e       	mov	r0, r31
    94c6:	f2 e4       	ldi	r31, 0x42	; 66
    94c8:	bf 2e       	mov	r11, r31
    94ca:	f0 2d       	mov	r31, r0
    94cc:	0f 2e       	mov	r0, r31
    94ce:	ff e0       	ldi	r31, 0x0F	; 15
    94d0:	cf 2e       	mov	r12, r31
    94d2:	f0 2d       	mov	r31, r0
    94d4:	dd 24       	eor	r13, r13
    94d6:	ee 24       	eor	r14, r14
    94d8:	ff 24       	eor	r15, r15
    94da:	00 e0       	ldi	r16, 0x00	; 0
    94dc:	10 e0       	ldi	r17, 0x00	; 0
    94de:	0e 94 12 01 	call	0x224	; 0x224 <__udivdi3>
    94e2:	a2 2e       	mov	r10, r18
    94e4:	b3 2e       	mov	r11, r19
    94e6:	c4 2e       	mov	r12, r20
    94e8:	d5 2e       	mov	r13, r21
    94ea:	e6 2e       	mov	r14, r22
    94ec:	f7 2e       	mov	r15, r23
    94ee:	08 2f       	mov	r16, r24
    94f0:	19 2f       	mov	r17, r25
    94f2:	2a 2d       	mov	r18, r10
    94f4:	3b 2d       	mov	r19, r11
    94f6:	4c 2d       	mov	r20, r12
    94f8:	5d 2d       	mov	r21, r13
    94fa:	6e 2d       	mov	r22, r14
    94fc:	7f 2d       	mov	r23, r15
    94fe:	80 2f       	mov	r24, r16
    9500:	91 2f       	mov	r25, r17
    9502:	20 93 47 03 	sts	0x0347, r18
    9506:	30 93 48 03 	sts	0x0348, r19
    950a:	40 93 49 03 	sts	0x0349, r20
    950e:	50 93 4a 03 	sts	0x034A, r21
    9512:	60 93 4b 03 	sts	0x034B, r22
    9516:	70 93 4c 03 	sts	0x034C, r23
    951a:	80 93 4d 03 	sts	0x034D, r24
    951e:	90 93 4e 03 	sts	0x034E, r25
 return length_rb;
    9522:	20 91 47 03 	lds	r18, 0x0347
    9526:	30 91 48 03 	lds	r19, 0x0348
    952a:	40 91 49 03 	lds	r20, 0x0349
    952e:	50 91 4a 03 	lds	r21, 0x034A
    9532:	60 91 4b 03 	lds	r22, 0x034B
    9536:	70 91 4c 03 	lds	r23, 0x034C
    953a:	80 91 4d 03 	lds	r24, 0x034D
    953e:	90 91 4e 03 	lds	r25, 0x034E
    9542:	a2 2e       	mov	r10, r18
    9544:	b3 2e       	mov	r11, r19
    9546:	c4 2e       	mov	r12, r20
    9548:	d5 2e       	mov	r13, r21
    954a:	e6 2e       	mov	r14, r22
    954c:	f7 2e       	mov	r15, r23
    954e:	08 2f       	mov	r16, r24
    9550:	19 2f       	mov	r17, r25
}
    9552:	2a 2d       	mov	r18, r10
    9554:	3b 2d       	mov	r19, r11
    9556:	4c 2d       	mov	r20, r12
    9558:	5d 2d       	mov	r21, r13
    955a:	6e 2d       	mov	r22, r14
    955c:	7f 2d       	mov	r23, r15
    955e:	80 2f       	mov	r24, r16
    9560:	91 2f       	mov	r25, r17
    9562:	c7 58       	subi	r28, 0x87	; 135
    9564:	df 4f       	sbci	r29, 0xFF	; 255
    9566:	0f b6       	in	r0, 0x3f	; 63
    9568:	f8 94       	cli
    956a:	de bf       	out	0x3e, r29	; 62
    956c:	0f be       	out	0x3f, r0	; 63
    956e:	cd bf       	out	0x3d, r28	; 61
    9570:	cf 91       	pop	r28
    9572:	df 91       	pop	r29
    9574:	1f 91       	pop	r17
    9576:	0f 91       	pop	r16
    9578:	ff 90       	pop	r15
    957a:	ef 90       	pop	r14
    957c:	df 90       	pop	r13
    957e:	cf 90       	pop	r12
    9580:	bf 90       	pop	r11
    9582:	af 90       	pop	r10
    9584:	08 95       	ret

00009586 <CAR_Length_Check>:

uint8 CAR_Length_Check(void)
{
    9586:	af 92       	push	r10
    9588:	bf 92       	push	r11
    958a:	cf 92       	push	r12
    958c:	df 92       	push	r13
    958e:	ef 92       	push	r14
    9590:	ff 92       	push	r15
    9592:	0f 93       	push	r16
    9594:	1f 93       	push	r17
    9596:	df 93       	push	r29
    9598:	cf 93       	push	r28
    959a:	cd b7       	in	r28, 0x3d	; 61
    959c:	de b7       	in	r29, 0x3e	; 62
    959e:	6f 97       	sbiw	r28, 0x1f	; 31
    95a0:	0f b6       	in	r0, 0x3f	; 63
    95a2:	f8 94       	cli
    95a4:	de bf       	out	0x3e, r29	; 62
    95a6:	0f be       	out	0x3f, r0	; 63
    95a8:	cd bf       	out	0x3d, r28	; 61
	 uint8 ret_val=1;
    95aa:	81 e0       	ldi	r24, 0x01	; 1
    95ac:	8f 87       	std	Y+15, r24	; 0x0f
	Timer3_Init(timer3_Fast_PWM_10_bit,timer3_stop,Non_inverting_clr_oc0_oncompare_set_on_bottom_3,disconnected_channel_3);
    95ae:	87 e0       	ldi	r24, 0x07	; 7
    95b0:	60 e0       	ldi	r22, 0x00	; 0
    95b2:	42 e0       	ldi	r20, 0x02	; 2
    95b4:	20 e0       	ldi	r18, 0x00	; 0
    95b6:	0e 94 78 15 	call	0x2af0	; 0x2af0 <Timer3_Init>
	DIO_void_Set_Pin_Value(car_control,forward,HIGH);
    95ba:	84 e0       	ldi	r24, 0x04	; 4
    95bc:	63 e0       	ldi	r22, 0x03	; 3
    95be:	41 e0       	ldi	r20, 0x01	; 1
    95c0:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
	CLR_BIT(TCCR3A,COM3A0);
    95c4:	ab e8       	ldi	r26, 0x8B	; 139
    95c6:	b0 e0       	ldi	r27, 0x00	; 0
    95c8:	eb e8       	ldi	r30, 0x8B	; 139
    95ca:	f0 e0       	ldi	r31, 0x00	; 0
    95cc:	80 81       	ld	r24, Z
    95ce:	8f 7b       	andi	r24, 0xBF	; 191
    95d0:	8c 93       	st	X, r24
	CLR_BIT(TCCR3A,COM3A1);
    95d2:	ab e8       	ldi	r26, 0x8B	; 139
    95d4:	b0 e0       	ldi	r27, 0x00	; 0
    95d6:	eb e8       	ldi	r30, 0x8B	; 139
    95d8:	f0 e0       	ldi	r31, 0x00	; 0
    95da:	80 81       	ld	r24, Z
    95dc:	8f 77       	andi	r24, 0x7F	; 127
    95de:	8c 93       	st	X, r24
	LCD_vidSendCommand(1);
    95e0:	81 e0       	ldi	r24, 0x01	; 1
    95e2:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>
	forward_move();
    95e6:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <forward_move>
	Timer0_Init(Normal_mode,timer0_scale_8,disconnected);
    95ea:	80 e0       	ldi	r24, 0x00	; 0
    95ec:	62 e0       	ldi	r22, 0x02	; 2
    95ee:	40 e0       	ldi	r20, 0x00	; 0
    95f0:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <Timer0_Init>
	TCNT0=0;
    95f4:	e2 e5       	ldi	r30, 0x52	; 82
    95f6:	f0 e0       	ldi	r31, 0x00	; 0
    95f8:	10 82       	st	Z, r1
	c_rf=0;
    95fa:	10 92 37 03 	sts	0x0337, r1
    95fe:	10 92 38 03 	sts	0x0338, r1
    9602:	10 92 39 03 	sts	0x0339, r1
    9606:	10 92 3a 03 	sts	0x033A, r1
    960a:	10 92 3b 03 	sts	0x033B, r1
    960e:	10 92 3c 03 	sts	0x033C, r1
    9612:	10 92 3d 03 	sts	0x033D, r1
    9616:	10 92 3e 03 	sts	0x033E, r1
    do
    {
    LCD_vidGotoxy(0,0);
    961a:	80 e0       	ldi	r24, 0x00	; 0
    961c:	60 e0       	ldi	r22, 0x00	; 0
    961e:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
    LCD_vidWriteString("DISTANCE:");
    9622:	8a e3       	ldi	r24, 0x3A	; 58
    9624:	91 e0       	ldi	r25, 0x01	; 1
    9626:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>
    LCD_vidGotoxy(10,0);
    962a:	8a e0       	ldi	r24, 0x0A	; 10
    962c:	60 e0       	ldi	r22, 0x00	; 0
    962e:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
    LCD_vidWriteUnSignedInteger(ultra_right_front);
    9632:	80 91 0e 03 	lds	r24, 0x030E
    9636:	90 91 0f 03 	lds	r25, 0x030F
    963a:	a0 91 10 03 	lds	r26, 0x0310
    963e:	b0 91 11 03 	lds	r27, 0x0311
    9642:	5c 01       	movw	r10, r24
    9644:	6d 01       	movw	r12, r26
    9646:	ee 24       	eor	r14, r14
    9648:	ff 24       	eor	r15, r15
    964a:	87 01       	movw	r16, r14
    964c:	2a 2d       	mov	r18, r10
    964e:	3b 2d       	mov	r19, r11
    9650:	4c 2d       	mov	r20, r12
    9652:	5d 2d       	mov	r21, r13
    9654:	6e 2d       	mov	r22, r14
    9656:	7f 2d       	mov	r23, r15
    9658:	80 2f       	mov	r24, r16
    965a:	91 2f       	mov	r25, r17
    965c:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <LCD_vidWriteUnSignedInteger>
     //heya mashya forward
     length_rf=distance_rf();
    9660:	0e 94 ad 3f 	call	0x7f5a	; 0x7f5a <distance_rf>
    9664:	a2 2e       	mov	r10, r18
    9666:	b3 2e       	mov	r11, r19
    9668:	c4 2e       	mov	r12, r20
    966a:	d5 2e       	mov	r13, r21
    966c:	e6 2e       	mov	r14, r22
    966e:	f7 2e       	mov	r15, r23
    9670:	08 2f       	mov	r16, r24
    9672:	19 2f       	mov	r17, r25
    9674:	a0 92 4f 03 	sts	0x034F, r10
    9678:	b0 92 50 03 	sts	0x0350, r11
    967c:	c0 92 51 03 	sts	0x0351, r12
    9680:	d0 92 52 03 	sts	0x0352, r13
    9684:	e0 92 53 03 	sts	0x0353, r14
    9688:	f0 92 54 03 	sts	0x0354, r15
    968c:	00 93 55 03 	sts	0x0355, r16
    9690:	10 93 56 03 	sts	0x0356, r17
     LCD_vidGotoxy(0,1);
    9694:	80 e0       	ldi	r24, 0x00	; 0
    9696:	61 e0       	ldi	r22, 0x01	; 1
    9698:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
     LCD_vidWriteString("LENGTH:");
    969c:	84 e4       	ldi	r24, 0x44	; 68
    969e:	91 e0       	ldi	r25, 0x01	; 1
    96a0:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>
     LCD_vidGotoxy(8,1);
    96a4:	88 e0       	ldi	r24, 0x08	; 8
    96a6:	61 e0       	ldi	r22, 0x01	; 1
    96a8:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
     LCD_vidWriteUnSignedInteger((uint64)length_rf);
    96ac:	a0 90 4f 03 	lds	r10, 0x034F
    96b0:	b0 90 50 03 	lds	r11, 0x0350
    96b4:	c0 90 51 03 	lds	r12, 0x0351
    96b8:	d0 90 52 03 	lds	r13, 0x0352
    96bc:	e0 90 53 03 	lds	r14, 0x0353
    96c0:	f0 90 54 03 	lds	r15, 0x0354
    96c4:	00 91 55 03 	lds	r16, 0x0355
    96c8:	10 91 56 03 	lds	r17, 0x0356
    96cc:	2a 2d       	mov	r18, r10
    96ce:	3b 2d       	mov	r19, r11
    96d0:	4c 2d       	mov	r20, r12
    96d2:	5d 2d       	mov	r21, r13
    96d4:	6e 2d       	mov	r22, r14
    96d6:	7f 2d       	mov	r23, r15
    96d8:	80 2f       	mov	r24, r16
    96da:	91 2f       	mov	r25, r17
    96dc:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <LCD_vidWriteUnSignedInteger>
    if(length_rf>=165)
    96e0:	80 91 4f 03 	lds	r24, 0x034F
    96e4:	88 8f       	std	Y+24, r24	; 0x18
    96e6:	80 91 50 03 	lds	r24, 0x0350
    96ea:	89 8f       	std	Y+25, r24	; 0x19
    96ec:	80 91 51 03 	lds	r24, 0x0351
    96f0:	8a 8f       	std	Y+26, r24	; 0x1a
    96f2:	80 91 52 03 	lds	r24, 0x0352
    96f6:	8b 8f       	std	Y+27, r24	; 0x1b
    96f8:	80 91 53 03 	lds	r24, 0x0353
    96fc:	8c 8f       	std	Y+28, r24	; 0x1c
    96fe:	80 91 54 03 	lds	r24, 0x0354
    9702:	8d 8f       	std	Y+29, r24	; 0x1d
    9704:	80 91 55 03 	lds	r24, 0x0355
    9708:	8e 8f       	std	Y+30, r24	; 0x1e
    970a:	80 91 56 03 	lds	r24, 0x0356
    970e:	8f 8f       	std	Y+31, r24	; 0x1f
    9710:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9712:	88 23       	and	r24, r24
    9714:	91 f5       	brne	.+100    	; 0x977a <CAR_Length_Check+0x1f4>
    9716:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9718:	88 23       	and	r24, r24
    971a:	09 f0       	breq	.+2      	; 0x971e <CAR_Length_Check+0x198>
    971c:	c8 c0       	rjmp	.+400    	; 0x98ae <CAR_Length_Check+0x328>
    971e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    9720:	88 23       	and	r24, r24
    9722:	59 f5       	brne	.+86     	; 0x977a <CAR_Length_Check+0x1f4>
    9724:	8e 8d       	ldd	r24, Y+30	; 0x1e
    9726:	88 23       	and	r24, r24
    9728:	09 f0       	breq	.+2      	; 0x972c <CAR_Length_Check+0x1a6>
    972a:	c1 c0       	rjmp	.+386    	; 0x98ae <CAR_Length_Check+0x328>
    972c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    972e:	88 23       	and	r24, r24
    9730:	21 f5       	brne	.+72     	; 0x977a <CAR_Length_Check+0x1f4>
    9732:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9734:	88 23       	and	r24, r24
    9736:	09 f0       	breq	.+2      	; 0x973a <CAR_Length_Check+0x1b4>
    9738:	ba c0       	rjmp	.+372    	; 0x98ae <CAR_Length_Check+0x328>
    973a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    973c:	88 23       	and	r24, r24
    973e:	e9 f4       	brne	.+58     	; 0x977a <CAR_Length_Check+0x1f4>
    9740:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9742:	88 23       	and	r24, r24
    9744:	09 f0       	breq	.+2      	; 0x9748 <CAR_Length_Check+0x1c2>
    9746:	b3 c0       	rjmp	.+358    	; 0x98ae <CAR_Length_Check+0x328>
    9748:	8b 8d       	ldd	r24, Y+27	; 0x1b
    974a:	88 23       	and	r24, r24
    974c:	b1 f4       	brne	.+44     	; 0x977a <CAR_Length_Check+0x1f4>
    974e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9750:	88 23       	and	r24, r24
    9752:	09 f0       	breq	.+2      	; 0x9756 <CAR_Length_Check+0x1d0>
    9754:	ac c0       	rjmp	.+344    	; 0x98ae <CAR_Length_Check+0x328>
    9756:	8a 8d       	ldd	r24, Y+26	; 0x1a
    9758:	88 23       	and	r24, r24
    975a:	79 f4       	brne	.+30     	; 0x977a <CAR_Length_Check+0x1f4>
    975c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    975e:	88 23       	and	r24, r24
    9760:	09 f0       	breq	.+2      	; 0x9764 <CAR_Length_Check+0x1de>
    9762:	a5 c0       	rjmp	.+330    	; 0x98ae <CAR_Length_Check+0x328>
    9764:	89 8d       	ldd	r24, Y+25	; 0x19
    9766:	88 23       	and	r24, r24
    9768:	41 f4       	brne	.+16     	; 0x977a <CAR_Length_Check+0x1f4>
    976a:	89 8d       	ldd	r24, Y+25	; 0x19
    976c:	88 23       	and	r24, r24
    976e:	09 f0       	breq	.+2      	; 0x9772 <CAR_Length_Check+0x1ec>
    9770:	9e c0       	rjmp	.+316    	; 0x98ae <CAR_Length_Check+0x328>
    9772:	88 8d       	ldd	r24, Y+24	; 0x18
    9774:	85 3a       	cpi	r24, 0xA5	; 165
    9776:	08 f4       	brcc	.+2      	; 0x977a <CAR_Length_Check+0x1f4>
    9778:	9a c0       	rjmp	.+308    	; 0x98ae <CAR_Length_Check+0x328>
    {
     //STOP CAR
     DIO_void_Set_Pin_Value(car_control,forward,HIGH);
    977a:	84 e0       	ldi	r24, 0x04	; 4
    977c:	63 e0       	ldi	r22, 0x03	; 3
    977e:	41 e0       	ldi	r20, 0x01	; 1
    9780:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
     Timer3_Init(timer3_Fast_PWM_10_bit,timer3_stop,Non_inverting_clr_oc0_oncompare_set_on_bottom_3,disconnected_channel_3);
    9784:	87 e0       	ldi	r24, 0x07	; 7
    9786:	60 e0       	ldi	r22, 0x00	; 0
    9788:	42 e0       	ldi	r20, 0x02	; 2
    978a:	20 e0       	ldi	r18, 0x00	; 0
    978c:	0e 94 78 15 	call	0x2af0	; 0x2af0 <Timer3_Init>
     CLR_BIT(TCCR3A,COM3A0);
    9790:	ab e8       	ldi	r26, 0x8B	; 139
    9792:	b0 e0       	ldi	r27, 0x00	; 0
    9794:	eb e8       	ldi	r30, 0x8B	; 139
    9796:	f0 e0       	ldi	r31, 0x00	; 0
    9798:	80 81       	ld	r24, Z
    979a:	8f 7b       	andi	r24, 0xBF	; 191
    979c:	8c 93       	st	X, r24
     CLR_BIT(TCCR3A,COM3A1);
    979e:	ab e8       	ldi	r26, 0x8B	; 139
    97a0:	b0 e0       	ldi	r27, 0x00	; 0
    97a2:	eb e8       	ldi	r30, 0x8B	; 139
    97a4:	f0 e0       	ldi	r31, 0x00	; 0
    97a6:	80 81       	ld	r24, Z
    97a8:	8f 77       	andi	r24, 0x7F	; 127
    97aa:	8c 93       	st	X, r24
     Buzzer_On();
    97ac:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <Buzzer_On>
     LCD_vidGotoxy(0,1);
    97b0:	80 e0       	ldi	r24, 0x00	; 0
    97b2:	61 e0       	ldi	r22, 0x01	; 1
    97b4:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
     LCD_vidWriteString((uint8*)"Spot found");
    97b8:	8c e4       	ldi	r24, 0x4C	; 76
    97ba:	91 e0       	ldi	r25, 0x01	; 1
    97bc:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>
    97c0:	80 e0       	ldi	r24, 0x00	; 0
    97c2:	90 e0       	ldi	r25, 0x00	; 0
    97c4:	aa e7       	ldi	r26, 0x7A	; 122
    97c6:	b4 e4       	ldi	r27, 0x44	; 68
    97c8:	8b 87       	std	Y+11, r24	; 0x0b
    97ca:	9c 87       	std	Y+12, r25	; 0x0c
    97cc:	ad 87       	std	Y+13, r26	; 0x0d
    97ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    97d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    97d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    97d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    97d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    97d8:	20 e0       	ldi	r18, 0x00	; 0
    97da:	30 e0       	ldi	r19, 0x00	; 0
    97dc:	4a ef       	ldi	r20, 0xFA	; 250
    97de:	54 e4       	ldi	r21, 0x44	; 68
    97e0:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    97e4:	dc 01       	movw	r26, r24
    97e6:	cb 01       	movw	r24, r22
    97e8:	8f 83       	std	Y+7, r24	; 0x07
    97ea:	98 87       	std	Y+8, r25	; 0x08
    97ec:	a9 87       	std	Y+9, r26	; 0x09
    97ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    97f0:	6f 81       	ldd	r22, Y+7	; 0x07
    97f2:	78 85       	ldd	r23, Y+8	; 0x08
    97f4:	89 85       	ldd	r24, Y+9	; 0x09
    97f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    97f8:	20 e0       	ldi	r18, 0x00	; 0
    97fa:	30 e0       	ldi	r19, 0x00	; 0
    97fc:	40 e8       	ldi	r20, 0x80	; 128
    97fe:	5f e3       	ldi	r21, 0x3F	; 63
    9800:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    9804:	88 23       	and	r24, r24
    9806:	2c f4       	brge	.+10     	; 0x9812 <CAR_Length_Check+0x28c>
		__ticks = 1;
    9808:	81 e0       	ldi	r24, 0x01	; 1
    980a:	90 e0       	ldi	r25, 0x00	; 0
    980c:	9e 83       	std	Y+6, r25	; 0x06
    980e:	8d 83       	std	Y+5, r24	; 0x05
    9810:	3f c0       	rjmp	.+126    	; 0x9890 <CAR_Length_Check+0x30a>
	else if (__tmp > 65535)
    9812:	6f 81       	ldd	r22, Y+7	; 0x07
    9814:	78 85       	ldd	r23, Y+8	; 0x08
    9816:	89 85       	ldd	r24, Y+9	; 0x09
    9818:	9a 85       	ldd	r25, Y+10	; 0x0a
    981a:	20 e0       	ldi	r18, 0x00	; 0
    981c:	3f ef       	ldi	r19, 0xFF	; 255
    981e:	4f e7       	ldi	r20, 0x7F	; 127
    9820:	57 e4       	ldi	r21, 0x47	; 71
    9822:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    9826:	18 16       	cp	r1, r24
    9828:	4c f5       	brge	.+82     	; 0x987c <CAR_Length_Check+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    982a:	6b 85       	ldd	r22, Y+11	; 0x0b
    982c:	7c 85       	ldd	r23, Y+12	; 0x0c
    982e:	8d 85       	ldd	r24, Y+13	; 0x0d
    9830:	9e 85       	ldd	r25, Y+14	; 0x0e
    9832:	20 e0       	ldi	r18, 0x00	; 0
    9834:	30 e0       	ldi	r19, 0x00	; 0
    9836:	40 e2       	ldi	r20, 0x20	; 32
    9838:	51 e4       	ldi	r21, 0x41	; 65
    983a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    983e:	dc 01       	movw	r26, r24
    9840:	cb 01       	movw	r24, r22
    9842:	bc 01       	movw	r22, r24
    9844:	cd 01       	movw	r24, r26
    9846:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    984a:	dc 01       	movw	r26, r24
    984c:	cb 01       	movw	r24, r22
    984e:	9e 83       	std	Y+6, r25	; 0x06
    9850:	8d 83       	std	Y+5, r24	; 0x05
    9852:	0f c0       	rjmp	.+30     	; 0x9872 <CAR_Length_Check+0x2ec>
    9854:	88 ec       	ldi	r24, 0xC8	; 200
    9856:	90 e0       	ldi	r25, 0x00	; 0
    9858:	9c 83       	std	Y+4, r25	; 0x04
    985a:	8b 83       	std	Y+3, r24	; 0x03
    985c:	8b 81       	ldd	r24, Y+3	; 0x03
    985e:	9c 81       	ldd	r25, Y+4	; 0x04
    9860:	01 97       	sbiw	r24, 0x01	; 1
    9862:	f1 f7       	brne	.-4      	; 0x9860 <CAR_Length_Check+0x2da>
    9864:	9c 83       	std	Y+4, r25	; 0x04
    9866:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9868:	8d 81       	ldd	r24, Y+5	; 0x05
    986a:	9e 81       	ldd	r25, Y+6	; 0x06
    986c:	01 97       	sbiw	r24, 0x01	; 1
    986e:	9e 83       	std	Y+6, r25	; 0x06
    9870:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9872:	8d 81       	ldd	r24, Y+5	; 0x05
    9874:	9e 81       	ldd	r25, Y+6	; 0x06
    9876:	00 97       	sbiw	r24, 0x00	; 0
    9878:	69 f7       	brne	.-38     	; 0x9854 <CAR_Length_Check+0x2ce>
    987a:	14 c0       	rjmp	.+40     	; 0x98a4 <CAR_Length_Check+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    987c:	6f 81       	ldd	r22, Y+7	; 0x07
    987e:	78 85       	ldd	r23, Y+8	; 0x08
    9880:	89 85       	ldd	r24, Y+9	; 0x09
    9882:	9a 85       	ldd	r25, Y+10	; 0x0a
    9884:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    9888:	dc 01       	movw	r26, r24
    988a:	cb 01       	movw	r24, r22
    988c:	9e 83       	std	Y+6, r25	; 0x06
    988e:	8d 83       	std	Y+5, r24	; 0x05
    9890:	8d 81       	ldd	r24, Y+5	; 0x05
    9892:	9e 81       	ldd	r25, Y+6	; 0x06
    9894:	9a 83       	std	Y+2, r25	; 0x02
    9896:	89 83       	std	Y+1, r24	; 0x01
    9898:	89 81       	ldd	r24, Y+1	; 0x01
    989a:	9a 81       	ldd	r25, Y+2	; 0x02
    989c:	01 97       	sbiw	r24, 0x01	; 1
    989e:	f1 f7       	brne	.-4      	; 0x989c <CAR_Length_Check+0x316>
    98a0:	9a 83       	std	Y+2, r25	; 0x02
    98a2:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(1000);
     Buzzer_Off();
    98a4:	0e 94 55 3e 	call	0x7caa	; 0x7caa <Buzzer_Off>
    flag_check=1;
    98a8:	81 e0       	ldi	r24, 0x01	; 1
    98aa:	80 93 1e 03 	sts	0x031E, r24
   }

  }while((Ultrasonic_right_front_Get_Distance()>=100)&&(length_rf<165));
    98ae:	0e 94 31 27 	call	0x4e62	; 0x4e62 <Ultrasonic_right_front_Get_Distance>
    98b2:	dc 01       	movw	r26, r24
    98b4:	cb 01       	movw	r24, r22
    98b6:	84 36       	cpi	r24, 0x64	; 100
    98b8:	91 05       	cpc	r25, r1
    98ba:	a1 05       	cpc	r26, r1
    98bc:	b1 05       	cpc	r27, r1
    98be:	08 f4       	brcc	.+2      	; 0x98c2 <CAR_Length_Check+0x33c>
    98c0:	4d c0       	rjmp	.+154    	; 0x995c <CAR_Length_Check+0x3d6>
    98c2:	80 91 4f 03 	lds	r24, 0x034F
    98c6:	88 8b       	std	Y+16, r24	; 0x10
    98c8:	80 91 50 03 	lds	r24, 0x0350
    98cc:	89 8b       	std	Y+17, r24	; 0x11
    98ce:	80 91 51 03 	lds	r24, 0x0351
    98d2:	8a 8b       	std	Y+18, r24	; 0x12
    98d4:	80 91 52 03 	lds	r24, 0x0352
    98d8:	8b 8b       	std	Y+19, r24	; 0x13
    98da:	80 91 53 03 	lds	r24, 0x0353
    98de:	8c 8b       	std	Y+20, r24	; 0x14
    98e0:	80 91 54 03 	lds	r24, 0x0354
    98e4:	8d 8b       	std	Y+21, r24	; 0x15
    98e6:	80 91 55 03 	lds	r24, 0x0355
    98ea:	8e 8b       	std	Y+22, r24	; 0x16
    98ec:	80 91 56 03 	lds	r24, 0x0356
    98f0:	8f 8b       	std	Y+23, r24	; 0x17
    98f2:	8f 89       	ldd	r24, Y+23	; 0x17
    98f4:	88 23       	and	r24, r24
    98f6:	91 f5       	brne	.+100    	; 0x995c <CAR_Length_Check+0x3d6>
    98f8:	8f 89       	ldd	r24, Y+23	; 0x17
    98fa:	88 23       	and	r24, r24
    98fc:	09 f0       	breq	.+2      	; 0x9900 <CAR_Length_Check+0x37a>
    98fe:	8d ce       	rjmp	.-742    	; 0x961a <CAR_Length_Check+0x94>
    9900:	8e 89       	ldd	r24, Y+22	; 0x16
    9902:	88 23       	and	r24, r24
    9904:	59 f5       	brne	.+86     	; 0x995c <CAR_Length_Check+0x3d6>
    9906:	8e 89       	ldd	r24, Y+22	; 0x16
    9908:	88 23       	and	r24, r24
    990a:	09 f0       	breq	.+2      	; 0x990e <CAR_Length_Check+0x388>
    990c:	86 ce       	rjmp	.-756    	; 0x961a <CAR_Length_Check+0x94>
    990e:	8d 89       	ldd	r24, Y+21	; 0x15
    9910:	88 23       	and	r24, r24
    9912:	21 f5       	brne	.+72     	; 0x995c <CAR_Length_Check+0x3d6>
    9914:	8d 89       	ldd	r24, Y+21	; 0x15
    9916:	88 23       	and	r24, r24
    9918:	09 f0       	breq	.+2      	; 0x991c <CAR_Length_Check+0x396>
    991a:	7f ce       	rjmp	.-770    	; 0x961a <CAR_Length_Check+0x94>
    991c:	8c 89       	ldd	r24, Y+20	; 0x14
    991e:	88 23       	and	r24, r24
    9920:	e9 f4       	brne	.+58     	; 0x995c <CAR_Length_Check+0x3d6>
    9922:	8c 89       	ldd	r24, Y+20	; 0x14
    9924:	88 23       	and	r24, r24
    9926:	09 f0       	breq	.+2      	; 0x992a <CAR_Length_Check+0x3a4>
    9928:	78 ce       	rjmp	.-784    	; 0x961a <CAR_Length_Check+0x94>
    992a:	8b 89       	ldd	r24, Y+19	; 0x13
    992c:	88 23       	and	r24, r24
    992e:	b1 f4       	brne	.+44     	; 0x995c <CAR_Length_Check+0x3d6>
    9930:	8b 89       	ldd	r24, Y+19	; 0x13
    9932:	88 23       	and	r24, r24
    9934:	09 f0       	breq	.+2      	; 0x9938 <CAR_Length_Check+0x3b2>
    9936:	71 ce       	rjmp	.-798    	; 0x961a <CAR_Length_Check+0x94>
    9938:	8a 89       	ldd	r24, Y+18	; 0x12
    993a:	88 23       	and	r24, r24
    993c:	79 f4       	brne	.+30     	; 0x995c <CAR_Length_Check+0x3d6>
    993e:	8a 89       	ldd	r24, Y+18	; 0x12
    9940:	88 23       	and	r24, r24
    9942:	09 f0       	breq	.+2      	; 0x9946 <CAR_Length_Check+0x3c0>
    9944:	6a ce       	rjmp	.-812    	; 0x961a <CAR_Length_Check+0x94>
    9946:	89 89       	ldd	r24, Y+17	; 0x11
    9948:	88 23       	and	r24, r24
    994a:	41 f4       	brne	.+16     	; 0x995c <CAR_Length_Check+0x3d6>
    994c:	89 89       	ldd	r24, Y+17	; 0x11
    994e:	88 23       	and	r24, r24
    9950:	09 f0       	breq	.+2      	; 0x9954 <CAR_Length_Check+0x3ce>
    9952:	63 ce       	rjmp	.-826    	; 0x961a <CAR_Length_Check+0x94>
    9954:	88 89       	ldd	r24, Y+16	; 0x10
    9956:	85 3a       	cpi	r24, 0xA5	; 165
    9958:	08 f4       	brcc	.+2      	; 0x995c <CAR_Length_Check+0x3d6>
    995a:	5f ce       	rjmp	.-834    	; 0x961a <CAR_Length_Check+0x94>
 if(flag_check!=1)
    995c:	80 91 1e 03 	lds	r24, 0x031E
    9960:	81 30       	cpi	r24, 0x01	; 1
    9962:	09 f0       	breq	.+2      	; 0x9966 <CAR_Length_Check+0x3e0>
   ret_val=0;
    9964:	1f 86       	std	Y+15, r1	; 0x0f
   return ret_val;
    9966:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    9968:	6f 96       	adiw	r28, 0x1f	; 31
    996a:	0f b6       	in	r0, 0x3f	; 63
    996c:	f8 94       	cli
    996e:	de bf       	out	0x3e, r29	; 62
    9970:	0f be       	out	0x3f, r0	; 63
    9972:	cd bf       	out	0x3d, r28	; 61
    9974:	cf 91       	pop	r28
    9976:	df 91       	pop	r29
    9978:	1f 91       	pop	r17
    997a:	0f 91       	pop	r16
    997c:	ff 90       	pop	r15
    997e:	ef 90       	pop	r14
    9980:	df 90       	pop	r13
    9982:	cf 90       	pop	r12
    9984:	bf 90       	pop	r11
    9986:	af 90       	pop	r10
    9988:	08 95       	ret

0000998a <CAR_Length_Check2>:
void CAR_Length_Check2(void)
{
    998a:	af 92       	push	r10
    998c:	bf 92       	push	r11
    998e:	cf 92       	push	r12
    9990:	df 92       	push	r13
    9992:	ef 92       	push	r14
    9994:	ff 92       	push	r15
    9996:	0f 93       	push	r16
    9998:	1f 93       	push	r17
    999a:	df 93       	push	r29
    999c:	cf 93       	push	r28
    999e:	cd b7       	in	r28, 0x3d	; 61
    99a0:	de b7       	in	r29, 0x3e	; 62
LCD_vidGotoxy(0,1);
    99a2:	80 e0       	ldi	r24, 0x00	; 0
    99a4:	61 e0       	ldi	r22, 0x01	; 1
    99a6:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
LCD_vidWriteString("distance found");
    99aa:	87 e5       	ldi	r24, 0x57	; 87
    99ac:	91 e0       	ldi	r25, 0x01	; 1
    99ae:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>

forward_move();
    99b2:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <forward_move>
LCD_vidSendCommand(1);
    99b6:	81 e0       	ldi	r24, 0x01	; 1
    99b8:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>

do{

  LCD_vidGotoxy(0,1);
    99bc:	80 e0       	ldi	r24, 0x00	; 0
    99be:	61 e0       	ldi	r22, 0x01	; 1
    99c0:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
  LCD_vidWriteString("distance:");
    99c4:	86 e6       	ldi	r24, 0x66	; 102
    99c6:	91 e0       	ldi	r25, 0x01	; 1
    99c8:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>
  ultra_right_back=Ultrasonic_right_back_Get_Distance();
    99cc:	0e 94 52 28 	call	0x50a4	; 0x50a4 <Ultrasonic_right_back_Get_Distance>
    99d0:	dc 01       	movw	r26, r24
    99d2:	cb 01       	movw	r24, r22
    99d4:	80 93 1a 03 	sts	0x031A, r24
    99d8:	90 93 1b 03 	sts	0x031B, r25
    99dc:	a0 93 1c 03 	sts	0x031C, r26
    99e0:	b0 93 1d 03 	sts	0x031D, r27
  LCD_vidGotoxy(10,1);
    99e4:	8a e0       	ldi	r24, 0x0A	; 10
    99e6:	61 e0       	ldi	r22, 0x01	; 1
    99e8:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
  LCD_vidWriteUnSignedInteger(ultra_right_back);
    99ec:	80 91 1a 03 	lds	r24, 0x031A
    99f0:	90 91 1b 03 	lds	r25, 0x031B
    99f4:	a0 91 1c 03 	lds	r26, 0x031C
    99f8:	b0 91 1d 03 	lds	r27, 0x031D
    99fc:	5c 01       	movw	r10, r24
    99fe:	6d 01       	movw	r12, r26
    9a00:	ee 24       	eor	r14, r14
    9a02:	ff 24       	eor	r15, r15
    9a04:	87 01       	movw	r16, r14
    9a06:	2a 2d       	mov	r18, r10
    9a08:	3b 2d       	mov	r19, r11
    9a0a:	4c 2d       	mov	r20, r12
    9a0c:	5d 2d       	mov	r21, r13
    9a0e:	6e 2d       	mov	r22, r14
    9a10:	7f 2d       	mov	r23, r15
    9a12:	80 2f       	mov	r24, r16
    9a14:	91 2f       	mov	r25, r17
    9a16:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <LCD_vidWriteUnSignedInteger>

}while(Ultrasonic_right_back_Get_Distance()>=100);
    9a1a:	0e 94 52 28 	call	0x50a4	; 0x50a4 <Ultrasonic_right_back_Get_Distance>
    9a1e:	dc 01       	movw	r26, r24
    9a20:	cb 01       	movw	r24, r22
    9a22:	84 36       	cpi	r24, 0x64	; 100
    9a24:	91 05       	cpc	r25, r1
    9a26:	a1 05       	cpc	r26, r1
    9a28:	b1 05       	cpc	r27, r1
    9a2a:	40 f6       	brcc	.-112    	; 0x99bc <CAR_Length_Check2+0x32>
//STOP CAR
DIO_void_Set_Pin_Value(car_control,forward,HIGH);
    9a2c:	84 e0       	ldi	r24, 0x04	; 4
    9a2e:	63 e0       	ldi	r22, 0x03	; 3
    9a30:	41 e0       	ldi	r20, 0x01	; 1
    9a32:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
Timer3_Init(timer3_Fast_PWM_10_bit,timer3_stop,Non_inverting_clr_oc0_oncompare_set_on_bottom_3,disconnected_channel_3);
    9a36:	87 e0       	ldi	r24, 0x07	; 7
    9a38:	60 e0       	ldi	r22, 0x00	; 0
    9a3a:	42 e0       	ldi	r20, 0x02	; 2
    9a3c:	20 e0       	ldi	r18, 0x00	; 0
    9a3e:	0e 94 78 15 	call	0x2af0	; 0x2af0 <Timer3_Init>
CLR_BIT(TCCR3A,COM3A0);
    9a42:	ab e8       	ldi	r26, 0x8B	; 139
    9a44:	b0 e0       	ldi	r27, 0x00	; 0
    9a46:	eb e8       	ldi	r30, 0x8B	; 139
    9a48:	f0 e0       	ldi	r31, 0x00	; 0
    9a4a:	80 81       	ld	r24, Z
    9a4c:	8f 7b       	andi	r24, 0xBF	; 191
    9a4e:	8c 93       	st	X, r24
CLR_BIT(TCCR3A,COM3A1);
    9a50:	ab e8       	ldi	r26, 0x8B	; 139
    9a52:	b0 e0       	ldi	r27, 0x00	; 0
    9a54:	eb e8       	ldi	r30, 0x8B	; 139
    9a56:	f0 e0       	ldi	r31, 0x00	; 0
    9a58:	80 81       	ld	r24, Z
    9a5a:	8f 77       	andi	r24, 0x7F	; 127
    9a5c:	8c 93       	st	X, r24
}
    9a5e:	cf 91       	pop	r28
    9a60:	df 91       	pop	r29
    9a62:	1f 91       	pop	r17
    9a64:	0f 91       	pop	r16
    9a66:	ff 90       	pop	r15
    9a68:	ef 90       	pop	r14
    9a6a:	df 90       	pop	r13
    9a6c:	cf 90       	pop	r12
    9a6e:	bf 90       	pop	r11
    9a70:	af 90       	pop	r10
    9a72:	08 95       	ret

00009a74 <CAR_Length_Check3>:
void CAR_Length_Check3(void)
{
    9a74:	af 92       	push	r10
    9a76:	bf 92       	push	r11
    9a78:	cf 92       	push	r12
    9a7a:	df 92       	push	r13
    9a7c:	ef 92       	push	r14
    9a7e:	ff 92       	push	r15
    9a80:	0f 93       	push	r16
    9a82:	1f 93       	push	r17
    9a84:	df 93       	push	r29
    9a86:	cf 93       	push	r28
    9a88:	cd b7       	in	r28, 0x3d	; 61
    9a8a:	de b7       	in	r29, 0x3e	; 62
    9a8c:	6e 97       	sbiw	r28, 0x1e	; 30
    9a8e:	0f b6       	in	r0, 0x3f	; 63
    9a90:	f8 94       	cli
    9a92:	de bf       	out	0x3e, r29	; 62
    9a94:	0f be       	out	0x3f, r0	; 63
    9a96:	cd bf       	out	0x3d, r28	; 61
	flag_check=2;
    9a98:	82 e0       	ldi	r24, 0x02	; 2
    9a9a:	80 93 1e 03 	sts	0x031E, r24
    Timer0_Init(Normal_mode,timer0_scale_8,disconnected);
    9a9e:	80 e0       	ldi	r24, 0x00	; 0
    9aa0:	62 e0       	ldi	r22, 0x02	; 2
    9aa2:	40 e0       	ldi	r20, 0x00	; 0
    9aa4:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <Timer0_Init>
	forward_move();
    9aa8:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <forward_move>
	TCNT0=0;
    9aac:	e2 e5       	ldi	r30, 0x52	; 82
    9aae:	f0 e0       	ldi	r31, 0x00	; 0
    9ab0:	10 82       	st	Z, r1
	c_rb=0;
    9ab2:	10 92 1f 03 	sts	0x031F, r1
    9ab6:	10 92 20 03 	sts	0x0320, r1
    9aba:	10 92 21 03 	sts	0x0321, r1
    9abe:	10 92 22 03 	sts	0x0322, r1
    9ac2:	10 92 23 03 	sts	0x0323, r1
    9ac6:	10 92 24 03 	sts	0x0324, r1
    9aca:	10 92 25 03 	sts	0x0325, r1
    9ace:	10 92 26 03 	sts	0x0326, r1
	t_rb=0;
    9ad2:	10 92 57 03 	sts	0x0357, r1
    9ad6:	10 92 58 03 	sts	0x0358, r1
    9ada:	10 92 59 03 	sts	0x0359, r1
    9ade:	10 92 5a 03 	sts	0x035A, r1
    9ae2:	10 92 5b 03 	sts	0x035B, r1
    9ae6:	10 92 5c 03 	sts	0x035C, r1
    9aea:	10 92 5d 03 	sts	0x035D, r1
    9aee:	10 92 5e 03 	sts	0x035E, r1
	length_rb=0;
    9af2:	10 92 47 03 	sts	0x0347, r1
    9af6:	10 92 48 03 	sts	0x0348, r1
    9afa:	10 92 49 03 	sts	0x0349, r1
    9afe:	10 92 4a 03 	sts	0x034A, r1
    9b02:	10 92 4b 03 	sts	0x034B, r1
    9b06:	10 92 4c 03 	sts	0x034C, r1
    9b0a:	10 92 4d 03 	sts	0x034D, r1
    9b0e:	10 92 4e 03 	sts	0x034E, r1
	count_right_back2=0;
    9b12:	10 92 0d 03 	sts	0x030D, r1
    9b16:	10 92 0c 03 	sts	0x030C, r1
		 do{
		    //heya mashya forward
		  length_rb=distance_rb();
    9b1a:	0e 94 38 45 	call	0x8a70	; 0x8a70 <distance_rb>
    9b1e:	a2 2e       	mov	r10, r18
    9b20:	b3 2e       	mov	r11, r19
    9b22:	c4 2e       	mov	r12, r20
    9b24:	d5 2e       	mov	r13, r21
    9b26:	e6 2e       	mov	r14, r22
    9b28:	f7 2e       	mov	r15, r23
    9b2a:	08 2f       	mov	r16, r24
    9b2c:	19 2f       	mov	r17, r25
    9b2e:	a0 92 47 03 	sts	0x0347, r10
    9b32:	b0 92 48 03 	sts	0x0348, r11
    9b36:	c0 92 49 03 	sts	0x0349, r12
    9b3a:	d0 92 4a 03 	sts	0x034A, r13
    9b3e:	e0 92 4b 03 	sts	0x034B, r14
    9b42:	f0 92 4c 03 	sts	0x034C, r15
    9b46:	00 93 4d 03 	sts	0x034D, r16
    9b4a:	10 93 4e 03 	sts	0x034E, r17
		  LCD_vidGotoxy(0,0);
    9b4e:	80 e0       	ldi	r24, 0x00	; 0
    9b50:	60 e0       	ldi	r22, 0x00	; 0
    9b52:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
		  LCD_vidWriteString("length:");
    9b56:	80 e7       	ldi	r24, 0x70	; 112
    9b58:	91 e0       	ldi	r25, 0x01	; 1
    9b5a:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>
		  LCD_vidGotoxy(10,0);
    9b5e:	8a e0       	ldi	r24, 0x0A	; 10
    9b60:	60 e0       	ldi	r22, 0x00	; 0
    9b62:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
		  LCD_vidWriteUnSignedInteger(length_rb);
    9b66:	a0 90 47 03 	lds	r10, 0x0347
    9b6a:	b0 90 48 03 	lds	r11, 0x0348
    9b6e:	c0 90 49 03 	lds	r12, 0x0349
    9b72:	d0 90 4a 03 	lds	r13, 0x034A
    9b76:	e0 90 4b 03 	lds	r14, 0x034B
    9b7a:	f0 90 4c 03 	lds	r15, 0x034C
    9b7e:	00 91 4d 03 	lds	r16, 0x034D
    9b82:	10 91 4e 03 	lds	r17, 0x034E
    9b86:	2a 2d       	mov	r18, r10
    9b88:	3b 2d       	mov	r19, r11
    9b8a:	4c 2d       	mov	r20, r12
    9b8c:	5d 2d       	mov	r21, r13
    9b8e:	6e 2d       	mov	r22, r14
    9b90:	7f 2d       	mov	r23, r15
    9b92:	80 2f       	mov	r24, r16
    9b94:	91 2f       	mov	r25, r17
    9b96:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <LCD_vidWriteUnSignedInteger>
		  if(length_rb>=50)
    9b9a:	80 91 47 03 	lds	r24, 0x0347
    9b9e:	8f 8b       	std	Y+23, r24	; 0x17
    9ba0:	80 91 48 03 	lds	r24, 0x0348
    9ba4:	88 8f       	std	Y+24, r24	; 0x18
    9ba6:	80 91 49 03 	lds	r24, 0x0349
    9baa:	89 8f       	std	Y+25, r24	; 0x19
    9bac:	80 91 4a 03 	lds	r24, 0x034A
    9bb0:	8a 8f       	std	Y+26, r24	; 0x1a
    9bb2:	80 91 4b 03 	lds	r24, 0x034B
    9bb6:	8b 8f       	std	Y+27, r24	; 0x1b
    9bb8:	80 91 4c 03 	lds	r24, 0x034C
    9bbc:	8c 8f       	std	Y+28, r24	; 0x1c
    9bbe:	80 91 4d 03 	lds	r24, 0x034D
    9bc2:	8d 8f       	std	Y+29, r24	; 0x1d
    9bc4:	80 91 4e 03 	lds	r24, 0x034E
    9bc8:	8e 8f       	std	Y+30, r24	; 0x1e
    9bca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    9bcc:	88 23       	and	r24, r24
    9bce:	91 f5       	brne	.+100    	; 0x9c34 <CAR_Length_Check3+0x1c0>
    9bd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    9bd2:	88 23       	and	r24, r24
    9bd4:	09 f0       	breq	.+2      	; 0x9bd8 <CAR_Length_Check3+0x164>
    9bd6:	c5 c0       	rjmp	.+394    	; 0x9d62 <CAR_Length_Check3+0x2ee>
    9bd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9bda:	88 23       	and	r24, r24
    9bdc:	59 f5       	brne	.+86     	; 0x9c34 <CAR_Length_Check3+0x1c0>
    9bde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9be0:	88 23       	and	r24, r24
    9be2:	09 f0       	breq	.+2      	; 0x9be6 <CAR_Length_Check3+0x172>
    9be4:	be c0       	rjmp	.+380    	; 0x9d62 <CAR_Length_Check3+0x2ee>
    9be6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9be8:	88 23       	and	r24, r24
    9bea:	21 f5       	brne	.+72     	; 0x9c34 <CAR_Length_Check3+0x1c0>
    9bec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9bee:	88 23       	and	r24, r24
    9bf0:	09 f0       	breq	.+2      	; 0x9bf4 <CAR_Length_Check3+0x180>
    9bf2:	b7 c0       	rjmp	.+366    	; 0x9d62 <CAR_Length_Check3+0x2ee>
    9bf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9bf6:	88 23       	and	r24, r24
    9bf8:	e9 f4       	brne	.+58     	; 0x9c34 <CAR_Length_Check3+0x1c0>
    9bfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9bfc:	88 23       	and	r24, r24
    9bfe:	09 f0       	breq	.+2      	; 0x9c02 <CAR_Length_Check3+0x18e>
    9c00:	b0 c0       	rjmp	.+352    	; 0x9d62 <CAR_Length_Check3+0x2ee>
    9c02:	8a 8d       	ldd	r24, Y+26	; 0x1a
    9c04:	88 23       	and	r24, r24
    9c06:	b1 f4       	brne	.+44     	; 0x9c34 <CAR_Length_Check3+0x1c0>
    9c08:	8a 8d       	ldd	r24, Y+26	; 0x1a
    9c0a:	88 23       	and	r24, r24
    9c0c:	09 f0       	breq	.+2      	; 0x9c10 <CAR_Length_Check3+0x19c>
    9c0e:	a9 c0       	rjmp	.+338    	; 0x9d62 <CAR_Length_Check3+0x2ee>
    9c10:	89 8d       	ldd	r24, Y+25	; 0x19
    9c12:	88 23       	and	r24, r24
    9c14:	79 f4       	brne	.+30     	; 0x9c34 <CAR_Length_Check3+0x1c0>
    9c16:	89 8d       	ldd	r24, Y+25	; 0x19
    9c18:	88 23       	and	r24, r24
    9c1a:	09 f0       	breq	.+2      	; 0x9c1e <CAR_Length_Check3+0x1aa>
    9c1c:	a2 c0       	rjmp	.+324    	; 0x9d62 <CAR_Length_Check3+0x2ee>
    9c1e:	88 8d       	ldd	r24, Y+24	; 0x18
    9c20:	88 23       	and	r24, r24
    9c22:	41 f4       	brne	.+16     	; 0x9c34 <CAR_Length_Check3+0x1c0>
    9c24:	88 8d       	ldd	r24, Y+24	; 0x18
    9c26:	88 23       	and	r24, r24
    9c28:	09 f0       	breq	.+2      	; 0x9c2c <CAR_Length_Check3+0x1b8>
    9c2a:	9b c0       	rjmp	.+310    	; 0x9d62 <CAR_Length_Check3+0x2ee>
    9c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    9c2e:	82 33       	cpi	r24, 0x32	; 50
    9c30:	08 f4       	brcc	.+2      	; 0x9c34 <CAR_Length_Check3+0x1c0>
    9c32:	97 c0       	rjmp	.+302    	; 0x9d62 <CAR_Length_Check3+0x2ee>
		   {
		     //STOP CAR
		   DIO_void_Set_Pin_Value(car_control,forward,HIGH);
    9c34:	84 e0       	ldi	r24, 0x04	; 4
    9c36:	63 e0       	ldi	r22, 0x03	; 3
    9c38:	41 e0       	ldi	r20, 0x01	; 1
    9c3a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
		   Timer3_Init(timer3_Fast_PWM_10_bit,timer3_stop,Non_inverting_clr_oc0_oncompare_set_on_bottom_3,disconnected_channel_3);
    9c3e:	87 e0       	ldi	r24, 0x07	; 7
    9c40:	60 e0       	ldi	r22, 0x00	; 0
    9c42:	42 e0       	ldi	r20, 0x02	; 2
    9c44:	20 e0       	ldi	r18, 0x00	; 0
    9c46:	0e 94 78 15 	call	0x2af0	; 0x2af0 <Timer3_Init>
		   CLR_BIT(TCCR3A,COM3A0);
    9c4a:	ab e8       	ldi	r26, 0x8B	; 139
    9c4c:	b0 e0       	ldi	r27, 0x00	; 0
    9c4e:	eb e8       	ldi	r30, 0x8B	; 139
    9c50:	f0 e0       	ldi	r31, 0x00	; 0
    9c52:	80 81       	ld	r24, Z
    9c54:	8f 7b       	andi	r24, 0xBF	; 191
    9c56:	8c 93       	st	X, r24
		   CLR_BIT(TCCR3A,COM3A1);
    9c58:	ab e8       	ldi	r26, 0x8B	; 139
    9c5a:	b0 e0       	ldi	r27, 0x00	; 0
    9c5c:	eb e8       	ldi	r30, 0x8B	; 139
    9c5e:	f0 e0       	ldi	r31, 0x00	; 0
    9c60:	80 81       	ld	r24, Z
    9c62:	8f 77       	andi	r24, 0x7F	; 127
    9c64:	8c 93       	st	X, r24
		    Buzzer_On();
    9c66:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <Buzzer_On>
		   LCD_vidGotoxy(0,1);
    9c6a:	80 e0       	ldi	r24, 0x00	; 0
    9c6c:	61 e0       	ldi	r22, 0x01	; 1
    9c6e:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
		   LCD_vidWriteString((uint8*)"yala start park");
    9c72:	88 e7       	ldi	r24, 0x78	; 120
    9c74:	91 e0       	ldi	r25, 0x01	; 1
    9c76:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>
    9c7a:	80 e0       	ldi	r24, 0x00	; 0
    9c7c:	90 e0       	ldi	r25, 0x00	; 0
    9c7e:	aa e7       	ldi	r26, 0x7A	; 122
    9c80:	b4 e4       	ldi	r27, 0x44	; 68
    9c82:	8b 87       	std	Y+11, r24	; 0x0b
    9c84:	9c 87       	std	Y+12, r25	; 0x0c
    9c86:	ad 87       	std	Y+13, r26	; 0x0d
    9c88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    9c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    9c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    9c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    9c90:	9e 85       	ldd	r25, Y+14	; 0x0e
    9c92:	20 e0       	ldi	r18, 0x00	; 0
    9c94:	30 e0       	ldi	r19, 0x00	; 0
    9c96:	4a ef       	ldi	r20, 0xFA	; 250
    9c98:	54 e4       	ldi	r21, 0x44	; 68
    9c9a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    9c9e:	dc 01       	movw	r26, r24
    9ca0:	cb 01       	movw	r24, r22
    9ca2:	8f 83       	std	Y+7, r24	; 0x07
    9ca4:	98 87       	std	Y+8, r25	; 0x08
    9ca6:	a9 87       	std	Y+9, r26	; 0x09
    9ca8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    9caa:	6f 81       	ldd	r22, Y+7	; 0x07
    9cac:	78 85       	ldd	r23, Y+8	; 0x08
    9cae:	89 85       	ldd	r24, Y+9	; 0x09
    9cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    9cb2:	20 e0       	ldi	r18, 0x00	; 0
    9cb4:	30 e0       	ldi	r19, 0x00	; 0
    9cb6:	40 e8       	ldi	r20, 0x80	; 128
    9cb8:	5f e3       	ldi	r21, 0x3F	; 63
    9cba:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    9cbe:	88 23       	and	r24, r24
    9cc0:	2c f4       	brge	.+10     	; 0x9ccc <CAR_Length_Check3+0x258>
		__ticks = 1;
    9cc2:	81 e0       	ldi	r24, 0x01	; 1
    9cc4:	90 e0       	ldi	r25, 0x00	; 0
    9cc6:	9e 83       	std	Y+6, r25	; 0x06
    9cc8:	8d 83       	std	Y+5, r24	; 0x05
    9cca:	3f c0       	rjmp	.+126    	; 0x9d4a <CAR_Length_Check3+0x2d6>
	else if (__tmp > 65535)
    9ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    9cce:	78 85       	ldd	r23, Y+8	; 0x08
    9cd0:	89 85       	ldd	r24, Y+9	; 0x09
    9cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    9cd4:	20 e0       	ldi	r18, 0x00	; 0
    9cd6:	3f ef       	ldi	r19, 0xFF	; 255
    9cd8:	4f e7       	ldi	r20, 0x7F	; 127
    9cda:	57 e4       	ldi	r21, 0x47	; 71
    9cdc:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    9ce0:	18 16       	cp	r1, r24
    9ce2:	4c f5       	brge	.+82     	; 0x9d36 <CAR_Length_Check3+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    9ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    9ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    9cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    9cec:	20 e0       	ldi	r18, 0x00	; 0
    9cee:	30 e0       	ldi	r19, 0x00	; 0
    9cf0:	40 e2       	ldi	r20, 0x20	; 32
    9cf2:	51 e4       	ldi	r21, 0x41	; 65
    9cf4:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    9cf8:	dc 01       	movw	r26, r24
    9cfa:	cb 01       	movw	r24, r22
    9cfc:	bc 01       	movw	r22, r24
    9cfe:	cd 01       	movw	r24, r26
    9d00:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    9d04:	dc 01       	movw	r26, r24
    9d06:	cb 01       	movw	r24, r22
    9d08:	9e 83       	std	Y+6, r25	; 0x06
    9d0a:	8d 83       	std	Y+5, r24	; 0x05
    9d0c:	0f c0       	rjmp	.+30     	; 0x9d2c <CAR_Length_Check3+0x2b8>
    9d0e:	88 ec       	ldi	r24, 0xC8	; 200
    9d10:	90 e0       	ldi	r25, 0x00	; 0
    9d12:	9c 83       	std	Y+4, r25	; 0x04
    9d14:	8b 83       	std	Y+3, r24	; 0x03
    9d16:	8b 81       	ldd	r24, Y+3	; 0x03
    9d18:	9c 81       	ldd	r25, Y+4	; 0x04
    9d1a:	01 97       	sbiw	r24, 0x01	; 1
    9d1c:	f1 f7       	brne	.-4      	; 0x9d1a <CAR_Length_Check3+0x2a6>
    9d1e:	9c 83       	std	Y+4, r25	; 0x04
    9d20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9d22:	8d 81       	ldd	r24, Y+5	; 0x05
    9d24:	9e 81       	ldd	r25, Y+6	; 0x06
    9d26:	01 97       	sbiw	r24, 0x01	; 1
    9d28:	9e 83       	std	Y+6, r25	; 0x06
    9d2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    9d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    9d30:	00 97       	sbiw	r24, 0x00	; 0
    9d32:	69 f7       	brne	.-38     	; 0x9d0e <CAR_Length_Check3+0x29a>
    9d34:	14 c0       	rjmp	.+40     	; 0x9d5e <CAR_Length_Check3+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9d36:	6f 81       	ldd	r22, Y+7	; 0x07
    9d38:	78 85       	ldd	r23, Y+8	; 0x08
    9d3a:	89 85       	ldd	r24, Y+9	; 0x09
    9d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    9d3e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    9d42:	dc 01       	movw	r26, r24
    9d44:	cb 01       	movw	r24, r22
    9d46:	9e 83       	std	Y+6, r25	; 0x06
    9d48:	8d 83       	std	Y+5, r24	; 0x05
    9d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    9d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    9d4e:	9a 83       	std	Y+2, r25	; 0x02
    9d50:	89 83       	std	Y+1, r24	; 0x01
    9d52:	89 81       	ldd	r24, Y+1	; 0x01
    9d54:	9a 81       	ldd	r25, Y+2	; 0x02
    9d56:	01 97       	sbiw	r24, 0x01	; 1
    9d58:	f1 f7       	brne	.-4      	; 0x9d56 <CAR_Length_Check3+0x2e2>
    9d5a:	9a 83       	std	Y+2, r25	; 0x02
    9d5c:	89 83       	std	Y+1, r24	; 0x01
		   _delay_ms(1000);
		   Buzzer_Off();
    9d5e:	0e 94 55 3e 	call	0x7caa	; 0x7caa <Buzzer_Off>
		   }
           }while(length_rb<50);
    9d62:	80 91 47 03 	lds	r24, 0x0347
    9d66:	8f 87       	std	Y+15, r24	; 0x0f
    9d68:	80 91 48 03 	lds	r24, 0x0348
    9d6c:	88 8b       	std	Y+16, r24	; 0x10
    9d6e:	80 91 49 03 	lds	r24, 0x0349
    9d72:	89 8b       	std	Y+17, r24	; 0x11
    9d74:	80 91 4a 03 	lds	r24, 0x034A
    9d78:	8a 8b       	std	Y+18, r24	; 0x12
    9d7a:	80 91 4b 03 	lds	r24, 0x034B
    9d7e:	8b 8b       	std	Y+19, r24	; 0x13
    9d80:	80 91 4c 03 	lds	r24, 0x034C
    9d84:	8c 8b       	std	Y+20, r24	; 0x14
    9d86:	80 91 4d 03 	lds	r24, 0x034D
    9d8a:	8d 8b       	std	Y+21, r24	; 0x15
    9d8c:	80 91 4e 03 	lds	r24, 0x034E
    9d90:	8e 8b       	std	Y+22, r24	; 0x16
    9d92:	8e 89       	ldd	r24, Y+22	; 0x16
    9d94:	88 23       	and	r24, r24
    9d96:	91 f5       	brne	.+100    	; 0x9dfc <CAR_Length_Check3+0x388>
    9d98:	8e 89       	ldd	r24, Y+22	; 0x16
    9d9a:	88 23       	and	r24, r24
    9d9c:	09 f0       	breq	.+2      	; 0x9da0 <CAR_Length_Check3+0x32c>
    9d9e:	bd ce       	rjmp	.-646    	; 0x9b1a <CAR_Length_Check3+0xa6>
    9da0:	8d 89       	ldd	r24, Y+21	; 0x15
    9da2:	88 23       	and	r24, r24
    9da4:	59 f5       	brne	.+86     	; 0x9dfc <CAR_Length_Check3+0x388>
    9da6:	8d 89       	ldd	r24, Y+21	; 0x15
    9da8:	88 23       	and	r24, r24
    9daa:	09 f0       	breq	.+2      	; 0x9dae <CAR_Length_Check3+0x33a>
    9dac:	b6 ce       	rjmp	.-660    	; 0x9b1a <CAR_Length_Check3+0xa6>
    9dae:	8c 89       	ldd	r24, Y+20	; 0x14
    9db0:	88 23       	and	r24, r24
    9db2:	21 f5       	brne	.+72     	; 0x9dfc <CAR_Length_Check3+0x388>
    9db4:	8c 89       	ldd	r24, Y+20	; 0x14
    9db6:	88 23       	and	r24, r24
    9db8:	09 f0       	breq	.+2      	; 0x9dbc <CAR_Length_Check3+0x348>
    9dba:	af ce       	rjmp	.-674    	; 0x9b1a <CAR_Length_Check3+0xa6>
    9dbc:	8b 89       	ldd	r24, Y+19	; 0x13
    9dbe:	88 23       	and	r24, r24
    9dc0:	e9 f4       	brne	.+58     	; 0x9dfc <CAR_Length_Check3+0x388>
    9dc2:	8b 89       	ldd	r24, Y+19	; 0x13
    9dc4:	88 23       	and	r24, r24
    9dc6:	09 f0       	breq	.+2      	; 0x9dca <CAR_Length_Check3+0x356>
    9dc8:	a8 ce       	rjmp	.-688    	; 0x9b1a <CAR_Length_Check3+0xa6>
    9dca:	8a 89       	ldd	r24, Y+18	; 0x12
    9dcc:	88 23       	and	r24, r24
    9dce:	b1 f4       	brne	.+44     	; 0x9dfc <CAR_Length_Check3+0x388>
    9dd0:	8a 89       	ldd	r24, Y+18	; 0x12
    9dd2:	88 23       	and	r24, r24
    9dd4:	09 f0       	breq	.+2      	; 0x9dd8 <CAR_Length_Check3+0x364>
    9dd6:	a1 ce       	rjmp	.-702    	; 0x9b1a <CAR_Length_Check3+0xa6>
    9dd8:	89 89       	ldd	r24, Y+17	; 0x11
    9dda:	88 23       	and	r24, r24
    9ddc:	79 f4       	brne	.+30     	; 0x9dfc <CAR_Length_Check3+0x388>
    9dde:	89 89       	ldd	r24, Y+17	; 0x11
    9de0:	88 23       	and	r24, r24
    9de2:	09 f0       	breq	.+2      	; 0x9de6 <CAR_Length_Check3+0x372>
    9de4:	9a ce       	rjmp	.-716    	; 0x9b1a <CAR_Length_Check3+0xa6>
    9de6:	88 89       	ldd	r24, Y+16	; 0x10
    9de8:	88 23       	and	r24, r24
    9dea:	41 f4       	brne	.+16     	; 0x9dfc <CAR_Length_Check3+0x388>
    9dec:	88 89       	ldd	r24, Y+16	; 0x10
    9dee:	88 23       	and	r24, r24
    9df0:	09 f0       	breq	.+2      	; 0x9df4 <CAR_Length_Check3+0x380>
    9df2:	93 ce       	rjmp	.-730    	; 0x9b1a <CAR_Length_Check3+0xa6>
    9df4:	8f 85       	ldd	r24, Y+15	; 0x0f
    9df6:	82 33       	cpi	r24, 0x32	; 50
    9df8:	08 f4       	brcc	.+2      	; 0x9dfc <CAR_Length_Check3+0x388>
    9dfa:	8f ce       	rjmp	.-738    	; 0x9b1a <CAR_Length_Check3+0xa6>
}
    9dfc:	6e 96       	adiw	r28, 0x1e	; 30
    9dfe:	0f b6       	in	r0, 0x3f	; 63
    9e00:	f8 94       	cli
    9e02:	de bf       	out	0x3e, r29	; 62
    9e04:	0f be       	out	0x3f, r0	; 63
    9e06:	cd bf       	out	0x3d, r28	; 61
    9e08:	cf 91       	pop	r28
    9e0a:	df 91       	pop	r29
    9e0c:	1f 91       	pop	r17
    9e0e:	0f 91       	pop	r16
    9e10:	ff 90       	pop	r15
    9e12:	ef 90       	pop	r14
    9e14:	df 90       	pop	r13
    9e16:	cf 90       	pop	r12
    9e18:	bf 90       	pop	r11
    9e1a:	af 90       	pop	r10
    9e1c:	08 95       	ret

00009e1e <forward_move>:


void forward_move(void)
{
    9e1e:	df 93       	push	r29
    9e20:	cf 93       	push	r28
    9e22:	cd b7       	in	r28, 0x3d	; 61
    9e24:	de b7       	in	r29, 0x3e	; 62
	//TO DISCONNECT CHANNEL C
   Timer3_Init(timer3_Fast_PWM_10_bit,timer3_stop,Non_inverting_clr_oc0_oncompare_set_on_bottom_3,disconnected_channel_3);
    9e26:	87 e0       	ldi	r24, 0x07	; 7
    9e28:	60 e0       	ldi	r22, 0x00	; 0
    9e2a:	42 e0       	ldi	r20, 0x02	; 2
    9e2c:	20 e0       	ldi	r18, 0x00	; 0
    9e2e:	0e 94 78 15 	call	0x2af0	; 0x2af0 <Timer3_Init>
   DIO_void_Set_Pin_Value(car_control, backword,HIGH);
    9e32:	84 e0       	ldi	r24, 0x04	; 4
    9e34:	65 e0       	ldi	r22, 0x05	; 5
    9e36:	41 e0       	ldi	r20, 0x01	; 1
    9e38:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
   CLR_BIT(TCCR3A,COM3C0);
    9e3c:	ab e8       	ldi	r26, 0x8B	; 139
    9e3e:	b0 e0       	ldi	r27, 0x00	; 0
    9e40:	eb e8       	ldi	r30, 0x8B	; 139
    9e42:	f0 e0       	ldi	r31, 0x00	; 0
    9e44:	80 81       	ld	r24, Z
    9e46:	8b 7f       	andi	r24, 0xFB	; 251
    9e48:	8c 93       	st	X, r24
   CLR_BIT(TCCR3A,COM3C1);
    9e4a:	ab e8       	ldi	r26, 0x8B	; 139
    9e4c:	b0 e0       	ldi	r27, 0x00	; 0
    9e4e:	eb e8       	ldi	r30, 0x8B	; 139
    9e50:	f0 e0       	ldi	r31, 0x00	; 0
    9e52:	80 81       	ld	r24, Z
    9e54:	87 7f       	andi	r24, 0xF7	; 247
    9e56:	8c 93       	st	X, r24

   Timer3_Init(timer3_Fast_PWM_10_bit,timer3_scale_1024,Non_inverting_clr_oc0_oncompare_set_on_bottom_3,A_Channel_3);
    9e58:	87 e0       	ldi	r24, 0x07	; 7
    9e5a:	65 e0       	ldi	r22, 0x05	; 5
    9e5c:	42 e0       	ldi	r20, 0x02	; 2
    9e5e:	21 e0       	ldi	r18, 0x01	; 1
    9e60:	0e 94 78 15 	call	0x2af0	; 0x2af0 <Timer3_Init>
   DIO_void_Set_Pin_Dirction(car_control, forward,OUTPUT);
    9e64:	84 e0       	ldi	r24, 0x04	; 4
    9e66:	63 e0       	ldi	r22, 0x03	; 3
    9e68:	41 e0       	ldi	r20, 0x01	; 1
    9e6a:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
   TMR3_void_Set_OCR_TimerValue(100,A_Channel_3);
    9e6e:	84 e6       	ldi	r24, 0x64	; 100
    9e70:	90 e0       	ldi	r25, 0x00	; 0
    9e72:	61 e0       	ldi	r22, 0x01	; 1
    9e74:	0e 94 88 19 	call	0x3310	; 0x3310 <TMR3_void_Set_OCR_TimerValue>
}
    9e78:	cf 91       	pop	r28
    9e7a:	df 91       	pop	r29
    9e7c:	08 95       	ret

00009e7e <backward_move>:

void backward_move(void)
{
    9e7e:	df 93       	push	r29
    9e80:	cf 93       	push	r28
    9e82:	cd b7       	in	r28, 0x3d	; 61
    9e84:	de b7       	in	r29, 0x3e	; 62
	    Timer3_Init(timer3_Fast_PWM_10_bit,timer3_stop,Non_inverting_clr_oc0_oncompare_set_on_bottom_3,disconnected_channel_3);
    9e86:	87 e0       	ldi	r24, 0x07	; 7
    9e88:	60 e0       	ldi	r22, 0x00	; 0
    9e8a:	42 e0       	ldi	r20, 0x02	; 2
    9e8c:	20 e0       	ldi	r18, 0x00	; 0
    9e8e:	0e 94 78 15 	call	0x2af0	; 0x2af0 <Timer3_Init>
	    DIO_void_Set_Pin_Value(car_control,forward,HIGH);
    9e92:	84 e0       	ldi	r24, 0x04	; 4
    9e94:	63 e0       	ldi	r22, 0x03	; 3
    9e96:	41 e0       	ldi	r20, 0x01	; 1
    9e98:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
	    CLR_BIT(TCCR3A,COM3A0);
    9e9c:	ab e8       	ldi	r26, 0x8B	; 139
    9e9e:	b0 e0       	ldi	r27, 0x00	; 0
    9ea0:	eb e8       	ldi	r30, 0x8B	; 139
    9ea2:	f0 e0       	ldi	r31, 0x00	; 0
    9ea4:	80 81       	ld	r24, Z
    9ea6:	8f 7b       	andi	r24, 0xBF	; 191
    9ea8:	8c 93       	st	X, r24
	    CLR_BIT(TCCR3A,COM3A1);
    9eaa:	ab e8       	ldi	r26, 0x8B	; 139
    9eac:	b0 e0       	ldi	r27, 0x00	; 0
    9eae:	eb e8       	ldi	r30, 0x8B	; 139
    9eb0:	f0 e0       	ldi	r31, 0x00	; 0
    9eb2:	80 81       	ld	r24, Z
    9eb4:	8f 77       	andi	r24, 0x7F	; 127
    9eb6:	8c 93       	st	X, r24
		Timer3_Init( timer3_Fast_PWM_10_bit,timer3_scale_1024,Non_inverting_clr_oc0_oncompare_set_on_bottom_3,C_Channel_3);
    9eb8:	87 e0       	ldi	r24, 0x07	; 7
    9eba:	65 e0       	ldi	r22, 0x05	; 5
    9ebc:	42 e0       	ldi	r20, 0x02	; 2
    9ebe:	23 e0       	ldi	r18, 0x03	; 3
    9ec0:	0e 94 78 15 	call	0x2af0	; 0x2af0 <Timer3_Init>
        DIO_void_Set_Pin_Dirction(car_control,backword,OUTPUT);
    9ec4:	84 e0       	ldi	r24, 0x04	; 4
    9ec6:	65 e0       	ldi	r22, 0x05	; 5
    9ec8:	41 e0       	ldi	r20, 0x01	; 1
    9eca:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
		TMR3_void_Set_OCR_TimerValue(100,C_Channel_3);
    9ece:	84 e6       	ldi	r24, 0x64	; 100
    9ed0:	90 e0       	ldi	r25, 0x00	; 0
    9ed2:	63 e0       	ldi	r22, 0x03	; 3
    9ed4:	0e 94 88 19 	call	0x3310	; 0x3310 <TMR3_void_Set_OCR_TimerValue>

}
    9ed8:	cf 91       	pop	r28
    9eda:	df 91       	pop	r29
    9edc:	08 95       	ret

00009ede <right_move>:


void right_move(void)
{
    9ede:	df 93       	push	r29
    9ee0:	cf 93       	push	r28
    9ee2:	cd b7       	in	r28, 0x3d	; 61
    9ee4:	de b7       	in	r29, 0x3e	; 62
    9ee6:	2e 97       	sbiw	r28, 0x0e	; 14
    9ee8:	0f b6       	in	r0, 0x3f	; 63
    9eea:	f8 94       	cli
    9eec:	de bf       	out	0x3e, r29	; 62
    9eee:	0f be       	out	0x3f, r0	; 63
    9ef0:	cd bf       	out	0x3d, r28	; 61
	DIO_void_Set_Pin_Value(car_control,left_wheel,HIGH);
    9ef2:	84 e0       	ldi	r24, 0x04	; 4
    9ef4:	60 e0       	ldi	r22, 0x00	; 0
    9ef6:	41 e0       	ldi	r20, 0x01	; 1
    9ef8:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
	DIO_void_Set_Pin_Value(car_control,right_wheel,LOW);
    9efc:	84 e0       	ldi	r24, 0x04	; 4
    9efe:	61 e0       	ldi	r22, 0x01	; 1
    9f00:	40 e0       	ldi	r20, 0x00	; 0
    9f02:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
    9f06:	80 e0       	ldi	r24, 0x00	; 0
    9f08:	90 e0       	ldi	r25, 0x00	; 0
    9f0a:	a6 e9       	ldi	r26, 0x96	; 150
    9f0c:	b4 e4       	ldi	r27, 0x44	; 68
    9f0e:	8b 87       	std	Y+11, r24	; 0x0b
    9f10:	9c 87       	std	Y+12, r25	; 0x0c
    9f12:	ad 87       	std	Y+13, r26	; 0x0d
    9f14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    9f16:	6b 85       	ldd	r22, Y+11	; 0x0b
    9f18:	7c 85       	ldd	r23, Y+12	; 0x0c
    9f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    9f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    9f1e:	20 e0       	ldi	r18, 0x00	; 0
    9f20:	30 e0       	ldi	r19, 0x00	; 0
    9f22:	4a ef       	ldi	r20, 0xFA	; 250
    9f24:	54 e4       	ldi	r21, 0x44	; 68
    9f26:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    9f2a:	dc 01       	movw	r26, r24
    9f2c:	cb 01       	movw	r24, r22
    9f2e:	8f 83       	std	Y+7, r24	; 0x07
    9f30:	98 87       	std	Y+8, r25	; 0x08
    9f32:	a9 87       	std	Y+9, r26	; 0x09
    9f34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    9f36:	6f 81       	ldd	r22, Y+7	; 0x07
    9f38:	78 85       	ldd	r23, Y+8	; 0x08
    9f3a:	89 85       	ldd	r24, Y+9	; 0x09
    9f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    9f3e:	20 e0       	ldi	r18, 0x00	; 0
    9f40:	30 e0       	ldi	r19, 0x00	; 0
    9f42:	40 e8       	ldi	r20, 0x80	; 128
    9f44:	5f e3       	ldi	r21, 0x3F	; 63
    9f46:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    9f4a:	88 23       	and	r24, r24
    9f4c:	2c f4       	brge	.+10     	; 0x9f58 <right_move+0x7a>
		__ticks = 1;
    9f4e:	81 e0       	ldi	r24, 0x01	; 1
    9f50:	90 e0       	ldi	r25, 0x00	; 0
    9f52:	9e 83       	std	Y+6, r25	; 0x06
    9f54:	8d 83       	std	Y+5, r24	; 0x05
    9f56:	3f c0       	rjmp	.+126    	; 0x9fd6 <right_move+0xf8>
	else if (__tmp > 65535)
    9f58:	6f 81       	ldd	r22, Y+7	; 0x07
    9f5a:	78 85       	ldd	r23, Y+8	; 0x08
    9f5c:	89 85       	ldd	r24, Y+9	; 0x09
    9f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    9f60:	20 e0       	ldi	r18, 0x00	; 0
    9f62:	3f ef       	ldi	r19, 0xFF	; 255
    9f64:	4f e7       	ldi	r20, 0x7F	; 127
    9f66:	57 e4       	ldi	r21, 0x47	; 71
    9f68:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    9f6c:	18 16       	cp	r1, r24
    9f6e:	4c f5       	brge	.+82     	; 0x9fc2 <right_move+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    9f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    9f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    9f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    9f78:	20 e0       	ldi	r18, 0x00	; 0
    9f7a:	30 e0       	ldi	r19, 0x00	; 0
    9f7c:	40 e2       	ldi	r20, 0x20	; 32
    9f7e:	51 e4       	ldi	r21, 0x41	; 65
    9f80:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    9f84:	dc 01       	movw	r26, r24
    9f86:	cb 01       	movw	r24, r22
    9f88:	bc 01       	movw	r22, r24
    9f8a:	cd 01       	movw	r24, r26
    9f8c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    9f90:	dc 01       	movw	r26, r24
    9f92:	cb 01       	movw	r24, r22
    9f94:	9e 83       	std	Y+6, r25	; 0x06
    9f96:	8d 83       	std	Y+5, r24	; 0x05
    9f98:	0f c0       	rjmp	.+30     	; 0x9fb8 <right_move+0xda>
    9f9a:	88 ec       	ldi	r24, 0xC8	; 200
    9f9c:	90 e0       	ldi	r25, 0x00	; 0
    9f9e:	9c 83       	std	Y+4, r25	; 0x04
    9fa0:	8b 83       	std	Y+3, r24	; 0x03
    9fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    9fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    9fa6:	01 97       	sbiw	r24, 0x01	; 1
    9fa8:	f1 f7       	brne	.-4      	; 0x9fa6 <right_move+0xc8>
    9faa:	9c 83       	std	Y+4, r25	; 0x04
    9fac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9fae:	8d 81       	ldd	r24, Y+5	; 0x05
    9fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    9fb2:	01 97       	sbiw	r24, 0x01	; 1
    9fb4:	9e 83       	std	Y+6, r25	; 0x06
    9fb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    9fba:	9e 81       	ldd	r25, Y+6	; 0x06
    9fbc:	00 97       	sbiw	r24, 0x00	; 0
    9fbe:	69 f7       	brne	.-38     	; 0x9f9a <right_move+0xbc>
    9fc0:	14 c0       	rjmp	.+40     	; 0x9fea <right_move+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9fc2:	6f 81       	ldd	r22, Y+7	; 0x07
    9fc4:	78 85       	ldd	r23, Y+8	; 0x08
    9fc6:	89 85       	ldd	r24, Y+9	; 0x09
    9fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    9fca:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    9fce:	dc 01       	movw	r26, r24
    9fd0:	cb 01       	movw	r24, r22
    9fd2:	9e 83       	std	Y+6, r25	; 0x06
    9fd4:	8d 83       	std	Y+5, r24	; 0x05
    9fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    9fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    9fda:	9a 83       	std	Y+2, r25	; 0x02
    9fdc:	89 83       	std	Y+1, r24	; 0x01
    9fde:	89 81       	ldd	r24, Y+1	; 0x01
    9fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    9fe2:	01 97       	sbiw	r24, 0x01	; 1
    9fe4:	f1 f7       	brne	.-4      	; 0x9fe2 <right_move+0x104>
    9fe6:	9a 83       	std	Y+2, r25	; 0x02
    9fe8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1200);
	DIO_void_Set_Pin_Value(car_control,right_wheel,HIGH);
    9fea:	84 e0       	ldi	r24, 0x04	; 4
    9fec:	61 e0       	ldi	r22, 0x01	; 1
    9fee:	41 e0       	ldi	r20, 0x01	; 1
    9ff0:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
}
    9ff4:	2e 96       	adiw	r28, 0x0e	; 14
    9ff6:	0f b6       	in	r0, 0x3f	; 63
    9ff8:	f8 94       	cli
    9ffa:	de bf       	out	0x3e, r29	; 62
    9ffc:	0f be       	out	0x3f, r0	; 63
    9ffe:	cd bf       	out	0x3d, r28	; 61
    a000:	cf 91       	pop	r28
    a002:	df 91       	pop	r29
    a004:	08 95       	ret

0000a006 <right_half_move>:
void right_half_move(void)
{
    a006:	df 93       	push	r29
    a008:	cf 93       	push	r28
    a00a:	cd b7       	in	r28, 0x3d	; 61
    a00c:	de b7       	in	r29, 0x3e	; 62
    a00e:	2e 97       	sbiw	r28, 0x0e	; 14
    a010:	0f b6       	in	r0, 0x3f	; 63
    a012:	f8 94       	cli
    a014:	de bf       	out	0x3e, r29	; 62
    a016:	0f be       	out	0x3f, r0	; 63
    a018:	cd bf       	out	0x3d, r28	; 61
	DIO_void_Set_Pin_Value(car_control,left_wheel,HIGH);
    a01a:	84 e0       	ldi	r24, 0x04	; 4
    a01c:	60 e0       	ldi	r22, 0x00	; 0
    a01e:	41 e0       	ldi	r20, 0x01	; 1
    a020:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
	DIO_void_Set_Pin_Value(car_control,right_wheel,LOW);
    a024:	84 e0       	ldi	r24, 0x04	; 4
    a026:	61 e0       	ldi	r22, 0x01	; 1
    a028:	40 e0       	ldi	r20, 0x00	; 0
    a02a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
    a02e:	80 e0       	ldi	r24, 0x00	; 0
    a030:	90 e0       	ldi	r25, 0x00	; 0
    a032:	aa ef       	ldi	r26, 0xFA	; 250
    a034:	b3 e4       	ldi	r27, 0x43	; 67
    a036:	8b 87       	std	Y+11, r24	; 0x0b
    a038:	9c 87       	std	Y+12, r25	; 0x0c
    a03a:	ad 87       	std	Y+13, r26	; 0x0d
    a03c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    a03e:	6b 85       	ldd	r22, Y+11	; 0x0b
    a040:	7c 85       	ldd	r23, Y+12	; 0x0c
    a042:	8d 85       	ldd	r24, Y+13	; 0x0d
    a044:	9e 85       	ldd	r25, Y+14	; 0x0e
    a046:	20 e0       	ldi	r18, 0x00	; 0
    a048:	30 e0       	ldi	r19, 0x00	; 0
    a04a:	4a ef       	ldi	r20, 0xFA	; 250
    a04c:	54 e4       	ldi	r21, 0x44	; 68
    a04e:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    a052:	dc 01       	movw	r26, r24
    a054:	cb 01       	movw	r24, r22
    a056:	8f 83       	std	Y+7, r24	; 0x07
    a058:	98 87       	std	Y+8, r25	; 0x08
    a05a:	a9 87       	std	Y+9, r26	; 0x09
    a05c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    a05e:	6f 81       	ldd	r22, Y+7	; 0x07
    a060:	78 85       	ldd	r23, Y+8	; 0x08
    a062:	89 85       	ldd	r24, Y+9	; 0x09
    a064:	9a 85       	ldd	r25, Y+10	; 0x0a
    a066:	20 e0       	ldi	r18, 0x00	; 0
    a068:	30 e0       	ldi	r19, 0x00	; 0
    a06a:	40 e8       	ldi	r20, 0x80	; 128
    a06c:	5f e3       	ldi	r21, 0x3F	; 63
    a06e:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    a072:	88 23       	and	r24, r24
    a074:	2c f4       	brge	.+10     	; 0xa080 <right_half_move+0x7a>
		__ticks = 1;
    a076:	81 e0       	ldi	r24, 0x01	; 1
    a078:	90 e0       	ldi	r25, 0x00	; 0
    a07a:	9e 83       	std	Y+6, r25	; 0x06
    a07c:	8d 83       	std	Y+5, r24	; 0x05
    a07e:	3f c0       	rjmp	.+126    	; 0xa0fe <right_half_move+0xf8>
	else if (__tmp > 65535)
    a080:	6f 81       	ldd	r22, Y+7	; 0x07
    a082:	78 85       	ldd	r23, Y+8	; 0x08
    a084:	89 85       	ldd	r24, Y+9	; 0x09
    a086:	9a 85       	ldd	r25, Y+10	; 0x0a
    a088:	20 e0       	ldi	r18, 0x00	; 0
    a08a:	3f ef       	ldi	r19, 0xFF	; 255
    a08c:	4f e7       	ldi	r20, 0x7F	; 127
    a08e:	57 e4       	ldi	r21, 0x47	; 71
    a090:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    a094:	18 16       	cp	r1, r24
    a096:	4c f5       	brge	.+82     	; 0xa0ea <right_half_move+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a098:	6b 85       	ldd	r22, Y+11	; 0x0b
    a09a:	7c 85       	ldd	r23, Y+12	; 0x0c
    a09c:	8d 85       	ldd	r24, Y+13	; 0x0d
    a09e:	9e 85       	ldd	r25, Y+14	; 0x0e
    a0a0:	20 e0       	ldi	r18, 0x00	; 0
    a0a2:	30 e0       	ldi	r19, 0x00	; 0
    a0a4:	40 e2       	ldi	r20, 0x20	; 32
    a0a6:	51 e4       	ldi	r21, 0x41	; 65
    a0a8:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    a0ac:	dc 01       	movw	r26, r24
    a0ae:	cb 01       	movw	r24, r22
    a0b0:	bc 01       	movw	r22, r24
    a0b2:	cd 01       	movw	r24, r26
    a0b4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    a0b8:	dc 01       	movw	r26, r24
    a0ba:	cb 01       	movw	r24, r22
    a0bc:	9e 83       	std	Y+6, r25	; 0x06
    a0be:	8d 83       	std	Y+5, r24	; 0x05
    a0c0:	0f c0       	rjmp	.+30     	; 0xa0e0 <right_half_move+0xda>
    a0c2:	88 ec       	ldi	r24, 0xC8	; 200
    a0c4:	90 e0       	ldi	r25, 0x00	; 0
    a0c6:	9c 83       	std	Y+4, r25	; 0x04
    a0c8:	8b 83       	std	Y+3, r24	; 0x03
    a0ca:	8b 81       	ldd	r24, Y+3	; 0x03
    a0cc:	9c 81       	ldd	r25, Y+4	; 0x04
    a0ce:	01 97       	sbiw	r24, 0x01	; 1
    a0d0:	f1 f7       	brne	.-4      	; 0xa0ce <right_half_move+0xc8>
    a0d2:	9c 83       	std	Y+4, r25	; 0x04
    a0d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a0d6:	8d 81       	ldd	r24, Y+5	; 0x05
    a0d8:	9e 81       	ldd	r25, Y+6	; 0x06
    a0da:	01 97       	sbiw	r24, 0x01	; 1
    a0dc:	9e 83       	std	Y+6, r25	; 0x06
    a0de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a0e0:	8d 81       	ldd	r24, Y+5	; 0x05
    a0e2:	9e 81       	ldd	r25, Y+6	; 0x06
    a0e4:	00 97       	sbiw	r24, 0x00	; 0
    a0e6:	69 f7       	brne	.-38     	; 0xa0c2 <right_half_move+0xbc>
    a0e8:	14 c0       	rjmp	.+40     	; 0xa112 <right_half_move+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a0ea:	6f 81       	ldd	r22, Y+7	; 0x07
    a0ec:	78 85       	ldd	r23, Y+8	; 0x08
    a0ee:	89 85       	ldd	r24, Y+9	; 0x09
    a0f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    a0f2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    a0f6:	dc 01       	movw	r26, r24
    a0f8:	cb 01       	movw	r24, r22
    a0fa:	9e 83       	std	Y+6, r25	; 0x06
    a0fc:	8d 83       	std	Y+5, r24	; 0x05
    a0fe:	8d 81       	ldd	r24, Y+5	; 0x05
    a100:	9e 81       	ldd	r25, Y+6	; 0x06
    a102:	9a 83       	std	Y+2, r25	; 0x02
    a104:	89 83       	std	Y+1, r24	; 0x01
    a106:	89 81       	ldd	r24, Y+1	; 0x01
    a108:	9a 81       	ldd	r25, Y+2	; 0x02
    a10a:	01 97       	sbiw	r24, 0x01	; 1
    a10c:	f1 f7       	brne	.-4      	; 0xa10a <right_half_move+0x104>
    a10e:	9a 83       	std	Y+2, r25	; 0x02
    a110:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	DIO_void_Set_Pin_Value(car_control,right_wheel,HIGH);
    a112:	84 e0       	ldi	r24, 0x04	; 4
    a114:	61 e0       	ldi	r22, 0x01	; 1
    a116:	41 e0       	ldi	r20, 0x01	; 1
    a118:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
}
    a11c:	2e 96       	adiw	r28, 0x0e	; 14
    a11e:	0f b6       	in	r0, 0x3f	; 63
    a120:	f8 94       	cli
    a122:	de bf       	out	0x3e, r29	; 62
    a124:	0f be       	out	0x3f, r0	; 63
    a126:	cd bf       	out	0x3d, r28	; 61
    a128:	cf 91       	pop	r28
    a12a:	df 91       	pop	r29
    a12c:	08 95       	ret

0000a12e <left_move>:

void left_move(void)
{
    a12e:	df 93       	push	r29
    a130:	cf 93       	push	r28
    a132:	cd b7       	in	r28, 0x3d	; 61
    a134:	de b7       	in	r29, 0x3e	; 62
    a136:	2e 97       	sbiw	r28, 0x0e	; 14
    a138:	0f b6       	in	r0, 0x3f	; 63
    a13a:	f8 94       	cli
    a13c:	de bf       	out	0x3e, r29	; 62
    a13e:	0f be       	out	0x3f, r0	; 63
    a140:	cd bf       	out	0x3d, r28	; 61
	DIO_void_Set_Pin_Value(car_control,right_wheel,HIGH);
    a142:	84 e0       	ldi	r24, 0x04	; 4
    a144:	61 e0       	ldi	r22, 0x01	; 1
    a146:	41 e0       	ldi	r20, 0x01	; 1
    a148:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
	DIO_void_Set_Pin_Value(car_control,left_wheel,LOW);
    a14c:	84 e0       	ldi	r24, 0x04	; 4
    a14e:	60 e0       	ldi	r22, 0x00	; 0
    a150:	40 e0       	ldi	r20, 0x00	; 0
    a152:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
    a156:	80 e0       	ldi	r24, 0x00	; 0
    a158:	90 e0       	ldi	r25, 0x00	; 0
    a15a:	a6 e9       	ldi	r26, 0x96	; 150
    a15c:	b4 e4       	ldi	r27, 0x44	; 68
    a15e:	8b 87       	std	Y+11, r24	; 0x0b
    a160:	9c 87       	std	Y+12, r25	; 0x0c
    a162:	ad 87       	std	Y+13, r26	; 0x0d
    a164:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    a166:	6b 85       	ldd	r22, Y+11	; 0x0b
    a168:	7c 85       	ldd	r23, Y+12	; 0x0c
    a16a:	8d 85       	ldd	r24, Y+13	; 0x0d
    a16c:	9e 85       	ldd	r25, Y+14	; 0x0e
    a16e:	20 e0       	ldi	r18, 0x00	; 0
    a170:	30 e0       	ldi	r19, 0x00	; 0
    a172:	4a ef       	ldi	r20, 0xFA	; 250
    a174:	54 e4       	ldi	r21, 0x44	; 68
    a176:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    a17a:	dc 01       	movw	r26, r24
    a17c:	cb 01       	movw	r24, r22
    a17e:	8f 83       	std	Y+7, r24	; 0x07
    a180:	98 87       	std	Y+8, r25	; 0x08
    a182:	a9 87       	std	Y+9, r26	; 0x09
    a184:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    a186:	6f 81       	ldd	r22, Y+7	; 0x07
    a188:	78 85       	ldd	r23, Y+8	; 0x08
    a18a:	89 85       	ldd	r24, Y+9	; 0x09
    a18c:	9a 85       	ldd	r25, Y+10	; 0x0a
    a18e:	20 e0       	ldi	r18, 0x00	; 0
    a190:	30 e0       	ldi	r19, 0x00	; 0
    a192:	40 e8       	ldi	r20, 0x80	; 128
    a194:	5f e3       	ldi	r21, 0x3F	; 63
    a196:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    a19a:	88 23       	and	r24, r24
    a19c:	2c f4       	brge	.+10     	; 0xa1a8 <left_move+0x7a>
		__ticks = 1;
    a19e:	81 e0       	ldi	r24, 0x01	; 1
    a1a0:	90 e0       	ldi	r25, 0x00	; 0
    a1a2:	9e 83       	std	Y+6, r25	; 0x06
    a1a4:	8d 83       	std	Y+5, r24	; 0x05
    a1a6:	3f c0       	rjmp	.+126    	; 0xa226 <left_move+0xf8>
	else if (__tmp > 65535)
    a1a8:	6f 81       	ldd	r22, Y+7	; 0x07
    a1aa:	78 85       	ldd	r23, Y+8	; 0x08
    a1ac:	89 85       	ldd	r24, Y+9	; 0x09
    a1ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    a1b0:	20 e0       	ldi	r18, 0x00	; 0
    a1b2:	3f ef       	ldi	r19, 0xFF	; 255
    a1b4:	4f e7       	ldi	r20, 0x7F	; 127
    a1b6:	57 e4       	ldi	r21, 0x47	; 71
    a1b8:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    a1bc:	18 16       	cp	r1, r24
    a1be:	4c f5       	brge	.+82     	; 0xa212 <left_move+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a1c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    a1c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    a1c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    a1c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    a1c8:	20 e0       	ldi	r18, 0x00	; 0
    a1ca:	30 e0       	ldi	r19, 0x00	; 0
    a1cc:	40 e2       	ldi	r20, 0x20	; 32
    a1ce:	51 e4       	ldi	r21, 0x41	; 65
    a1d0:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    a1d4:	dc 01       	movw	r26, r24
    a1d6:	cb 01       	movw	r24, r22
    a1d8:	bc 01       	movw	r22, r24
    a1da:	cd 01       	movw	r24, r26
    a1dc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    a1e0:	dc 01       	movw	r26, r24
    a1e2:	cb 01       	movw	r24, r22
    a1e4:	9e 83       	std	Y+6, r25	; 0x06
    a1e6:	8d 83       	std	Y+5, r24	; 0x05
    a1e8:	0f c0       	rjmp	.+30     	; 0xa208 <left_move+0xda>
    a1ea:	88 ec       	ldi	r24, 0xC8	; 200
    a1ec:	90 e0       	ldi	r25, 0x00	; 0
    a1ee:	9c 83       	std	Y+4, r25	; 0x04
    a1f0:	8b 83       	std	Y+3, r24	; 0x03
    a1f2:	8b 81       	ldd	r24, Y+3	; 0x03
    a1f4:	9c 81       	ldd	r25, Y+4	; 0x04
    a1f6:	01 97       	sbiw	r24, 0x01	; 1
    a1f8:	f1 f7       	brne	.-4      	; 0xa1f6 <left_move+0xc8>
    a1fa:	9c 83       	std	Y+4, r25	; 0x04
    a1fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a1fe:	8d 81       	ldd	r24, Y+5	; 0x05
    a200:	9e 81       	ldd	r25, Y+6	; 0x06
    a202:	01 97       	sbiw	r24, 0x01	; 1
    a204:	9e 83       	std	Y+6, r25	; 0x06
    a206:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a208:	8d 81       	ldd	r24, Y+5	; 0x05
    a20a:	9e 81       	ldd	r25, Y+6	; 0x06
    a20c:	00 97       	sbiw	r24, 0x00	; 0
    a20e:	69 f7       	brne	.-38     	; 0xa1ea <left_move+0xbc>
    a210:	14 c0       	rjmp	.+40     	; 0xa23a <left_move+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a212:	6f 81       	ldd	r22, Y+7	; 0x07
    a214:	78 85       	ldd	r23, Y+8	; 0x08
    a216:	89 85       	ldd	r24, Y+9	; 0x09
    a218:	9a 85       	ldd	r25, Y+10	; 0x0a
    a21a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    a21e:	dc 01       	movw	r26, r24
    a220:	cb 01       	movw	r24, r22
    a222:	9e 83       	std	Y+6, r25	; 0x06
    a224:	8d 83       	std	Y+5, r24	; 0x05
    a226:	8d 81       	ldd	r24, Y+5	; 0x05
    a228:	9e 81       	ldd	r25, Y+6	; 0x06
    a22a:	9a 83       	std	Y+2, r25	; 0x02
    a22c:	89 83       	std	Y+1, r24	; 0x01
    a22e:	89 81       	ldd	r24, Y+1	; 0x01
    a230:	9a 81       	ldd	r25, Y+2	; 0x02
    a232:	01 97       	sbiw	r24, 0x01	; 1
    a234:	f1 f7       	brne	.-4      	; 0xa232 <left_move+0x104>
    a236:	9a 83       	std	Y+2, r25	; 0x02
    a238:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1200);
	DIO_void_Set_Pin_Value(car_control,left_wheel,HIGH);
    a23a:	84 e0       	ldi	r24, 0x04	; 4
    a23c:	60 e0       	ldi	r22, 0x00	; 0
    a23e:	41 e0       	ldi	r20, 0x01	; 1
    a240:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
}
    a244:	2e 96       	adiw	r28, 0x0e	; 14
    a246:	0f b6       	in	r0, 0x3f	; 63
    a248:	f8 94       	cli
    a24a:	de bf       	out	0x3e, r29	; 62
    a24c:	0f be       	out	0x3f, r0	; 63
    a24e:	cd bf       	out	0x3d, r28	; 61
    a250:	cf 91       	pop	r28
    a252:	df 91       	pop	r29
    a254:	08 95       	ret

0000a256 <left_half_move>:
void left_half_move(void)
{
    a256:	df 93       	push	r29
    a258:	cf 93       	push	r28
    a25a:	cd b7       	in	r28, 0x3d	; 61
    a25c:	de b7       	in	r29, 0x3e	; 62
    a25e:	2e 97       	sbiw	r28, 0x0e	; 14
    a260:	0f b6       	in	r0, 0x3f	; 63
    a262:	f8 94       	cli
    a264:	de bf       	out	0x3e, r29	; 62
    a266:	0f be       	out	0x3f, r0	; 63
    a268:	cd bf       	out	0x3d, r28	; 61
	DIO_void_Set_Pin_Value(car_control,right_wheel,HIGH);
    a26a:	84 e0       	ldi	r24, 0x04	; 4
    a26c:	61 e0       	ldi	r22, 0x01	; 1
    a26e:	41 e0       	ldi	r20, 0x01	; 1
    a270:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
	DIO_void_Set_Pin_Value(car_control,left_wheel,LOW);
    a274:	84 e0       	ldi	r24, 0x04	; 4
    a276:	60 e0       	ldi	r22, 0x00	; 0
    a278:	40 e0       	ldi	r20, 0x00	; 0
    a27a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
    a27e:	80 e0       	ldi	r24, 0x00	; 0
    a280:	90 e0       	ldi	r25, 0x00	; 0
    a282:	aa ef       	ldi	r26, 0xFA	; 250
    a284:	b3 e4       	ldi	r27, 0x43	; 67
    a286:	8b 87       	std	Y+11, r24	; 0x0b
    a288:	9c 87       	std	Y+12, r25	; 0x0c
    a28a:	ad 87       	std	Y+13, r26	; 0x0d
    a28c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    a28e:	6b 85       	ldd	r22, Y+11	; 0x0b
    a290:	7c 85       	ldd	r23, Y+12	; 0x0c
    a292:	8d 85       	ldd	r24, Y+13	; 0x0d
    a294:	9e 85       	ldd	r25, Y+14	; 0x0e
    a296:	20 e0       	ldi	r18, 0x00	; 0
    a298:	30 e0       	ldi	r19, 0x00	; 0
    a29a:	4a ef       	ldi	r20, 0xFA	; 250
    a29c:	54 e4       	ldi	r21, 0x44	; 68
    a29e:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    a2a2:	dc 01       	movw	r26, r24
    a2a4:	cb 01       	movw	r24, r22
    a2a6:	8f 83       	std	Y+7, r24	; 0x07
    a2a8:	98 87       	std	Y+8, r25	; 0x08
    a2aa:	a9 87       	std	Y+9, r26	; 0x09
    a2ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    a2ae:	6f 81       	ldd	r22, Y+7	; 0x07
    a2b0:	78 85       	ldd	r23, Y+8	; 0x08
    a2b2:	89 85       	ldd	r24, Y+9	; 0x09
    a2b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    a2b6:	20 e0       	ldi	r18, 0x00	; 0
    a2b8:	30 e0       	ldi	r19, 0x00	; 0
    a2ba:	40 e8       	ldi	r20, 0x80	; 128
    a2bc:	5f e3       	ldi	r21, 0x3F	; 63
    a2be:	0e 94 a7 11 	call	0x234e	; 0x234e <__ltsf2>
    a2c2:	88 23       	and	r24, r24
    a2c4:	2c f4       	brge	.+10     	; 0xa2d0 <left_half_move+0x7a>
		__ticks = 1;
    a2c6:	81 e0       	ldi	r24, 0x01	; 1
    a2c8:	90 e0       	ldi	r25, 0x00	; 0
    a2ca:	9e 83       	std	Y+6, r25	; 0x06
    a2cc:	8d 83       	std	Y+5, r24	; 0x05
    a2ce:	3f c0       	rjmp	.+126    	; 0xa34e <left_half_move+0xf8>
	else if (__tmp > 65535)
    a2d0:	6f 81       	ldd	r22, Y+7	; 0x07
    a2d2:	78 85       	ldd	r23, Y+8	; 0x08
    a2d4:	89 85       	ldd	r24, Y+9	; 0x09
    a2d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    a2d8:	20 e0       	ldi	r18, 0x00	; 0
    a2da:	3f ef       	ldi	r19, 0xFF	; 255
    a2dc:	4f e7       	ldi	r20, 0x7F	; 127
    a2de:	57 e4       	ldi	r21, 0x47	; 71
    a2e0:	0e 94 47 11 	call	0x228e	; 0x228e <__gtsf2>
    a2e4:	18 16       	cp	r1, r24
    a2e6:	4c f5       	brge	.+82     	; 0xa33a <left_half_move+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a2e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    a2ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    a2ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    a2ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    a2f0:	20 e0       	ldi	r18, 0x00	; 0
    a2f2:	30 e0       	ldi	r19, 0x00	; 0
    a2f4:	40 e2       	ldi	r20, 0x20	; 32
    a2f6:	51 e4       	ldi	r21, 0x41	; 65
    a2f8:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulsf3>
    a2fc:	dc 01       	movw	r26, r24
    a2fe:	cb 01       	movw	r24, r22
    a300:	bc 01       	movw	r22, r24
    a302:	cd 01       	movw	r24, r26
    a304:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    a308:	dc 01       	movw	r26, r24
    a30a:	cb 01       	movw	r24, r22
    a30c:	9e 83       	std	Y+6, r25	; 0x06
    a30e:	8d 83       	std	Y+5, r24	; 0x05
    a310:	0f c0       	rjmp	.+30     	; 0xa330 <left_half_move+0xda>
    a312:	88 ec       	ldi	r24, 0xC8	; 200
    a314:	90 e0       	ldi	r25, 0x00	; 0
    a316:	9c 83       	std	Y+4, r25	; 0x04
    a318:	8b 83       	std	Y+3, r24	; 0x03
    a31a:	8b 81       	ldd	r24, Y+3	; 0x03
    a31c:	9c 81       	ldd	r25, Y+4	; 0x04
    a31e:	01 97       	sbiw	r24, 0x01	; 1
    a320:	f1 f7       	brne	.-4      	; 0xa31e <left_half_move+0xc8>
    a322:	9c 83       	std	Y+4, r25	; 0x04
    a324:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a326:	8d 81       	ldd	r24, Y+5	; 0x05
    a328:	9e 81       	ldd	r25, Y+6	; 0x06
    a32a:	01 97       	sbiw	r24, 0x01	; 1
    a32c:	9e 83       	std	Y+6, r25	; 0x06
    a32e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a330:	8d 81       	ldd	r24, Y+5	; 0x05
    a332:	9e 81       	ldd	r25, Y+6	; 0x06
    a334:	00 97       	sbiw	r24, 0x00	; 0
    a336:	69 f7       	brne	.-38     	; 0xa312 <left_half_move+0xbc>
    a338:	14 c0       	rjmp	.+40     	; 0xa362 <left_half_move+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a33a:	6f 81       	ldd	r22, Y+7	; 0x07
    a33c:	78 85       	ldd	r23, Y+8	; 0x08
    a33e:	89 85       	ldd	r24, Y+9	; 0x09
    a340:	9a 85       	ldd	r25, Y+10	; 0x0a
    a342:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__fixunssfsi>
    a346:	dc 01       	movw	r26, r24
    a348:	cb 01       	movw	r24, r22
    a34a:	9e 83       	std	Y+6, r25	; 0x06
    a34c:	8d 83       	std	Y+5, r24	; 0x05
    a34e:	8d 81       	ldd	r24, Y+5	; 0x05
    a350:	9e 81       	ldd	r25, Y+6	; 0x06
    a352:	9a 83       	std	Y+2, r25	; 0x02
    a354:	89 83       	std	Y+1, r24	; 0x01
    a356:	89 81       	ldd	r24, Y+1	; 0x01
    a358:	9a 81       	ldd	r25, Y+2	; 0x02
    a35a:	01 97       	sbiw	r24, 0x01	; 1
    a35c:	f1 f7       	brne	.-4      	; 0xa35a <left_half_move+0x104>
    a35e:	9a 83       	std	Y+2, r25	; 0x02
    a360:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(500);
	DIO_void_Set_Pin_Value(car_control,left_wheel,HIGH);
    a362:	84 e0       	ldi	r24, 0x04	; 4
    a364:	60 e0       	ldi	r22, 0x00	; 0
    a366:	41 e0       	ldi	r20, 0x01	; 1
    a368:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
}
    a36c:	2e 96       	adiw	r28, 0x0e	; 14
    a36e:	0f b6       	in	r0, 0x3f	; 63
    a370:	f8 94       	cli
    a372:	de bf       	out	0x3e, r29	; 62
    a374:	0f be       	out	0x3f, r0	; 63
    a376:	cd bf       	out	0x3d, r28	; 61
    a378:	cf 91       	pop	r28
    a37a:	df 91       	pop	r29
    a37c:	08 95       	ret

0000a37e <start_parking>:


void start_parking(void)
{
    a37e:	af 92       	push	r10
    a380:	bf 92       	push	r11
    a382:	cf 92       	push	r12
    a384:	df 92       	push	r13
    a386:	ef 92       	push	r14
    a388:	ff 92       	push	r15
    a38a:	0f 93       	push	r16
    a38c:	1f 93       	push	r17
    a38e:	df 93       	push	r29
    a390:	cf 93       	push	r28
    a392:	cd b7       	in	r28, 0x3d	; 61
    a394:	de b7       	in	r29, 0x3e	; 62

LCD_vidPrintInTwoLines("RIGHT WHEEL CAR MOVE BACKWORD");
    a396:	88 e8       	ldi	r24, 0x88	; 136
    a398:	91 e0       	ldi	r25, 0x01	; 1
    a39a:	0e 94 56 3d 	call	0x7aac	; 0x7aac <LCD_vidPrintInTwoLines>
right_move();
    a39e:	0e 94 6f 4f 	call	0x9ede	; 0x9ede <right_move>
backward_move();
    a3a2:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <backward_move>
LCD_vidSendCommand(1);
    a3a6:	81 e0       	ldi	r24, 0x01	; 1
    a3a8:	0e 94 37 31 	call	0x626e	; 0x626e <LCD_vidSendCommand>

do {
	LCD_vidGotoxy(0,1);
    a3ac:	80 e0       	ldi	r24, 0x00	; 0
    a3ae:	61 e0       	ldi	r22, 0x01	; 1
    a3b0:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
	 ultra_back=Ultrasonic_back2_Get_Distance();
    a3b4:	0e 94 94 2a 	call	0x5528	; 0x5528 <Ultrasonic_back2_Get_Distance>
    a3b8:	dc 01       	movw	r26, r24
    a3ba:	cb 01       	movw	r24, r22
    a3bc:	80 93 12 03 	sts	0x0312, r24
    a3c0:	90 93 13 03 	sts	0x0313, r25
    a3c4:	a0 93 14 03 	sts	0x0314, r26
    a3c8:	b0 93 15 03 	sts	0x0315, r27
	 LCD_vidWriteUnSignedInteger(ultra_back);
    a3cc:	80 91 12 03 	lds	r24, 0x0312
    a3d0:	90 91 13 03 	lds	r25, 0x0313
    a3d4:	a0 91 14 03 	lds	r26, 0x0314
    a3d8:	b0 91 15 03 	lds	r27, 0x0315
    a3dc:	5c 01       	movw	r10, r24
    a3de:	6d 01       	movw	r12, r26
    a3e0:	ee 24       	eor	r14, r14
    a3e2:	ff 24       	eor	r15, r15
    a3e4:	87 01       	movw	r16, r14
    a3e6:	2a 2d       	mov	r18, r10
    a3e8:	3b 2d       	mov	r19, r11
    a3ea:	4c 2d       	mov	r20, r12
    a3ec:	5d 2d       	mov	r21, r13
    a3ee:	6e 2d       	mov	r22, r14
    a3f0:	7f 2d       	mov	r23, r15
    a3f2:	80 2f       	mov	r24, r16
    a3f4:	91 2f       	mov	r25, r17
    a3f6:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <LCD_vidWriteUnSignedInteger>
     LCD_vidGotoxy(0,0);
    a3fa:	80 e0       	ldi	r24, 0x00	; 0
    a3fc:	60 e0       	ldi	r22, 0x00	; 0
    a3fe:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
     LCD_vidWriteString("back DISTANCE");
    a402:	86 ea       	ldi	r24, 0xA6	; 166
    a404:	91 e0       	ldi	r25, 0x01	; 1
    a406:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>

if(ultra_back>200)
    a40a:	80 91 12 03 	lds	r24, 0x0312
    a40e:	90 91 13 03 	lds	r25, 0x0313
    a412:	a0 91 14 03 	lds	r26, 0x0314
    a416:	b0 91 15 03 	lds	r27, 0x0315
    a41a:	89 3c       	cpi	r24, 0xC9	; 201
    a41c:	91 05       	cpc	r25, r1
    a41e:	a1 05       	cpc	r26, r1
    a420:	b1 05       	cpc	r27, r1
    a422:	68 f0       	brcs	.+26     	; 0xa43e <start_parking+0xc0>
	   	{
	      	ultra_back=200;
    a424:	88 ec       	ldi	r24, 0xC8	; 200
    a426:	90 e0       	ldi	r25, 0x00	; 0
    a428:	a0 e0       	ldi	r26, 0x00	; 0
    a42a:	b0 e0       	ldi	r27, 0x00	; 0
    a42c:	80 93 12 03 	sts	0x0312, r24
    a430:	90 93 13 03 	sts	0x0313, r25
    a434:	a0 93 14 03 	sts	0x0314, r26
    a438:	b0 93 15 03 	sts	0x0315, r27
    a43c:	19 c0       	rjmp	.+50     	; 0xa470 <start_parking+0xf2>
	      }
else if(ultra_back<6)
    a43e:	80 91 12 03 	lds	r24, 0x0312
    a442:	90 91 13 03 	lds	r25, 0x0313
    a446:	a0 91 14 03 	lds	r26, 0x0314
    a44a:	b0 91 15 03 	lds	r27, 0x0315
    a44e:	86 30       	cpi	r24, 0x06	; 6
    a450:	91 05       	cpc	r25, r1
    a452:	a1 05       	cpc	r26, r1
    a454:	b1 05       	cpc	r27, r1
    a456:	60 f4       	brcc	.+24     	; 0xa470 <start_parking+0xf2>
	    {
	        	ultra_back=5;
    a458:	85 e0       	ldi	r24, 0x05	; 5
    a45a:	90 e0       	ldi	r25, 0x00	; 0
    a45c:	a0 e0       	ldi	r26, 0x00	; 0
    a45e:	b0 e0       	ldi	r27, 0x00	; 0
    a460:	80 93 12 03 	sts	0x0312, r24
    a464:	90 93 13 03 	sts	0x0313, r25
    a468:	a0 93 14 03 	sts	0x0314, r26
    a46c:	b0 93 15 03 	sts	0x0315, r27
	   }
LCD_vidGotoxy(0,1);
    a470:	80 e0       	ldi	r24, 0x00	; 0
    a472:	61 e0       	ldi	r22, 0x01	; 1
    a474:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
LCD_vidWriteString("       ");
    a478:	84 eb       	ldi	r24, 0xB4	; 180
    a47a:	91 e0       	ldi	r25, 0x01	; 1
    a47c:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>
 } while(Ultrasonic_back2_Get_Distance()>80);
    a480:	0e 94 94 2a 	call	0x5528	; 0x5528 <Ultrasonic_back2_Get_Distance>
    a484:	dc 01       	movw	r26, r24
    a486:	cb 01       	movw	r24, r22
    a488:	81 35       	cpi	r24, 0x51	; 81
    a48a:	91 05       	cpc	r25, r1
    a48c:	a1 05       	cpc	r26, r1
    a48e:	b1 05       	cpc	r27, r1
    a490:	08 f0       	brcs	.+2      	; 0xa494 <start_parking+0x116>
    a492:	8c cf       	rjmp	.-232    	; 0xa3ac <start_parking+0x2e>
	//....................................
	Timer3_Init(timer3_Fast_PWM_10_bit,timer3_stop,Non_inverting_clr_oc0_oncompare_set_on_bottom_3,disconnected_channel_3);
    a494:	87 e0       	ldi	r24, 0x07	; 7
    a496:	60 e0       	ldi	r22, 0x00	; 0
    a498:	42 e0       	ldi	r20, 0x02	; 2
    a49a:	20 e0       	ldi	r18, 0x00	; 0
    a49c:	0e 94 78 15 	call	0x2af0	; 0x2af0 <Timer3_Init>
	DIO_void_Set_Pin_Value(car_control, backword,HIGH);
    a4a0:	84 e0       	ldi	r24, 0x04	; 4
    a4a2:	65 e0       	ldi	r22, 0x05	; 5
    a4a4:	41 e0       	ldi	r20, 0x01	; 1
    a4a6:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
    //TO DISCONNECT CHANNEL C
    CLR_BIT(TCCR3A,COM3C0);
    a4aa:	ab e8       	ldi	r26, 0x8B	; 139
    a4ac:	b0 e0       	ldi	r27, 0x00	; 0
    a4ae:	eb e8       	ldi	r30, 0x8B	; 139
    a4b0:	f0 e0       	ldi	r31, 0x00	; 0
    a4b2:	80 81       	ld	r24, Z
    a4b4:	8b 7f       	andi	r24, 0xFB	; 251
    a4b6:	8c 93       	st	X, r24
    CLR_BIT(TCCR3A,COM3C1);
    a4b8:	ab e8       	ldi	r26, 0x8B	; 139
    a4ba:	b0 e0       	ldi	r27, 0x00	; 0
    a4bc:	eb e8       	ldi	r30, 0x8B	; 139
    a4be:	f0 e0       	ldi	r31, 0x00	; 0
    a4c0:	80 81       	ld	r24, Z
    a4c2:	87 7f       	andi	r24, 0xF7	; 247
    a4c4:	8c 93       	st	X, r24

 //...................................................
    left_move();
    a4c6:	0e 94 97 50 	call	0xa12e	; 0xa12e <left_move>
    backward_move();
    a4ca:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <backward_move>

    	do {
    	    LCD_vidGotoxy(0,1);
    a4ce:	80 e0       	ldi	r24, 0x00	; 0
    a4d0:	61 e0       	ldi	r22, 0x01	; 1
    a4d2:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
    		  	    ultra_back=Ultrasonic_back_Get_Distance();
    a4d6:	0e 94 73 29 	call	0x52e6	; 0x52e6 <Ultrasonic_back_Get_Distance>
    a4da:	dc 01       	movw	r26, r24
    a4dc:	cb 01       	movw	r24, r22
    a4de:	80 93 12 03 	sts	0x0312, r24
    a4e2:	90 93 13 03 	sts	0x0313, r25
    a4e6:	a0 93 14 03 	sts	0x0314, r26
    a4ea:	b0 93 15 03 	sts	0x0315, r27
    		  	   LCD_vidWriteUnSignedInteger(ultra_back);
    a4ee:	80 91 12 03 	lds	r24, 0x0312
    a4f2:	90 91 13 03 	lds	r25, 0x0313
    a4f6:	a0 91 14 03 	lds	r26, 0x0314
    a4fa:	b0 91 15 03 	lds	r27, 0x0315
    a4fe:	5c 01       	movw	r10, r24
    a500:	6d 01       	movw	r12, r26
    a502:	ee 24       	eor	r14, r14
    a504:	ff 24       	eor	r15, r15
    a506:	87 01       	movw	r16, r14
    a508:	2a 2d       	mov	r18, r10
    a50a:	3b 2d       	mov	r19, r11
    a50c:	4c 2d       	mov	r20, r12
    a50e:	5d 2d       	mov	r21, r13
    a510:	6e 2d       	mov	r22, r14
    a512:	7f 2d       	mov	r23, r15
    a514:	80 2f       	mov	r24, r16
    a516:	91 2f       	mov	r25, r17
    a518:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <LCD_vidWriteUnSignedInteger>
    	    LCD_vidGotoxy(0,0);
    a51c:	80 e0       	ldi	r24, 0x00	; 0
    a51e:	60 e0       	ldi	r22, 0x00	; 0
    a520:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
    	    LCD_vidWriteString("back DISTANCE");
    a524:	86 ea       	ldi	r24, 0xA6	; 166
    a526:	91 e0       	ldi	r25, 0x01	; 1
    a528:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>

    	    if(ultra_back>200)
    a52c:	80 91 12 03 	lds	r24, 0x0312
    a530:	90 91 13 03 	lds	r25, 0x0313
    a534:	a0 91 14 03 	lds	r26, 0x0314
    a538:	b0 91 15 03 	lds	r27, 0x0315
    a53c:	89 3c       	cpi	r24, 0xC9	; 201
    a53e:	91 05       	cpc	r25, r1
    a540:	a1 05       	cpc	r26, r1
    a542:	b1 05       	cpc	r27, r1
    a544:	68 f0       	brcs	.+26     	; 0xa560 <start_parking+0x1e2>
    		   	{
    		      	ultra_back=200;
    a546:	88 ec       	ldi	r24, 0xC8	; 200
    a548:	90 e0       	ldi	r25, 0x00	; 0
    a54a:	a0 e0       	ldi	r26, 0x00	; 0
    a54c:	b0 e0       	ldi	r27, 0x00	; 0
    a54e:	80 93 12 03 	sts	0x0312, r24
    a552:	90 93 13 03 	sts	0x0313, r25
    a556:	a0 93 14 03 	sts	0x0314, r26
    a55a:	b0 93 15 03 	sts	0x0315, r27
    a55e:	19 c0       	rjmp	.+50     	; 0xa592 <start_parking+0x214>
    		      }
    	    else if(ultra_back<6)
    a560:	80 91 12 03 	lds	r24, 0x0312
    a564:	90 91 13 03 	lds	r25, 0x0313
    a568:	a0 91 14 03 	lds	r26, 0x0314
    a56c:	b0 91 15 03 	lds	r27, 0x0315
    a570:	86 30       	cpi	r24, 0x06	; 6
    a572:	91 05       	cpc	r25, r1
    a574:	a1 05       	cpc	r26, r1
    a576:	b1 05       	cpc	r27, r1
    a578:	60 f4       	brcc	.+24     	; 0xa592 <start_parking+0x214>
    		    {
    		        	ultra_back=5;
    a57a:	85 e0       	ldi	r24, 0x05	; 5
    a57c:	90 e0       	ldi	r25, 0x00	; 0
    a57e:	a0 e0       	ldi	r26, 0x00	; 0
    a580:	b0 e0       	ldi	r27, 0x00	; 0
    a582:	80 93 12 03 	sts	0x0312, r24
    a586:	90 93 13 03 	sts	0x0313, r25
    a58a:	a0 93 14 03 	sts	0x0314, r26
    a58e:	b0 93 15 03 	sts	0x0315, r27
    		   }
    	LCD_vidGotoxy(0,1);
    a592:	80 e0       	ldi	r24, 0x00	; 0
    a594:	61 e0       	ldi	r22, 0x01	; 1
    a596:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
    	LCD_vidWriteString("       ");
    a59a:	84 eb       	ldi	r24, 0xB4	; 180
    a59c:	91 e0       	ldi	r25, 0x01	; 1
    a59e:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>
    	 } while(Ultrasonic_back_Get_Distance()>12);
    a5a2:	0e 94 73 29 	call	0x52e6	; 0x52e6 <Ultrasonic_back_Get_Distance>
    a5a6:	dc 01       	movw	r26, r24
    a5a8:	cb 01       	movw	r24, r22
    a5aa:	8d 30       	cpi	r24, 0x0D	; 13
    a5ac:	91 05       	cpc	r25, r1
    a5ae:	a1 05       	cpc	r26, r1
    a5b0:	b1 05       	cpc	r27, r1
    a5b2:	08 f0       	brcs	.+2      	; 0xa5b6 <start_parking+0x238>
    a5b4:	8c cf       	rjmp	.-232    	; 0xa4ce <start_parking+0x150>

  //stop car
 Timer3_Init(timer3_Fast_PWM_10_bit,timer3_stop,Non_inverting_clr_oc0_oncompare_set_on_bottom_3,disconnected_channel_3);
    a5b6:	87 e0       	ldi	r24, 0x07	; 7
    a5b8:	60 e0       	ldi	r22, 0x00	; 0
    a5ba:	42 e0       	ldi	r20, 0x02	; 2
    a5bc:	20 e0       	ldi	r18, 0x00	; 0
    a5be:	0e 94 78 15 	call	0x2af0	; 0x2af0 <Timer3_Init>
 DIO_void_Set_Pin_Value(car_control, backword,HIGH);
    a5c2:	84 e0       	ldi	r24, 0x04	; 4
    a5c4:	65 e0       	ldi	r22, 0x05	; 5
    a5c6:	41 e0       	ldi	r20, 0x01	; 1
    a5c8:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
  //TO DISCONNECT CHANNEL C
  CLR_BIT(TCCR3A,COM3C0);
    a5cc:	ab e8       	ldi	r26, 0x8B	; 139
    a5ce:	b0 e0       	ldi	r27, 0x00	; 0
    a5d0:	eb e8       	ldi	r30, 0x8B	; 139
    a5d2:	f0 e0       	ldi	r31, 0x00	; 0
    a5d4:	80 81       	ld	r24, Z
    a5d6:	8b 7f       	andi	r24, 0xFB	; 251
    a5d8:	8c 93       	st	X, r24
  CLR_BIT(TCCR3A,COM3C1);
    a5da:	ab e8       	ldi	r26, 0x8B	; 139
    a5dc:	b0 e0       	ldi	r27, 0x00	; 0
    a5de:	eb e8       	ldi	r30, 0x8B	; 139
    a5e0:	f0 e0       	ldi	r31, 0x00	; 0
    a5e2:	80 81       	ld	r24, Z
    a5e4:	87 7f       	andi	r24, 0xF7	; 247
    a5e6:	8c 93       	st	X, r24

   //........................................
   right_move();
    a5e8:	0e 94 6f 4f 	call	0x9ede	; 0x9ede <right_move>
   forward_move();
    a5ec:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <forward_move>

  do{
      LCD_vidGotoxy(0,0);
    a5f0:	80 e0       	ldi	r24, 0x00	; 0
    a5f2:	60 e0       	ldi	r22, 0x00	; 0
    a5f4:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
       LCD_vidWriteString("front DISTANCE");
    a5f8:	8c eb       	ldi	r24, 0xBC	; 188
    a5fa:	91 e0       	ldi	r25, 0x01	; 1
    a5fc:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>
      ultra_front=Ultrasonic_front_Get_Distance();
    a600:	0e 94 10 26 	call	0x4c20	; 0x4c20 <Ultrasonic_front_Get_Distance>
    a604:	dc 01       	movw	r26, r24
    a606:	cb 01       	movw	r24, r22
    a608:	80 93 16 03 	sts	0x0316, r24
    a60c:	90 93 17 03 	sts	0x0317, r25
    a610:	a0 93 18 03 	sts	0x0318, r26
    a614:	b0 93 19 03 	sts	0x0319, r27
      LCD_vidGotoxy(0,1);
    a618:	80 e0       	ldi	r24, 0x00	; 0
    a61a:	61 e0       	ldi	r22, 0x01	; 1
    a61c:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
       LCD_vidWriteUnSignedInteger(ultra_front);
    a620:	80 91 16 03 	lds	r24, 0x0316
    a624:	90 91 17 03 	lds	r25, 0x0317
    a628:	a0 91 18 03 	lds	r26, 0x0318
    a62c:	b0 91 19 03 	lds	r27, 0x0319
    a630:	5c 01       	movw	r10, r24
    a632:	6d 01       	movw	r12, r26
    a634:	ee 24       	eor	r14, r14
    a636:	ff 24       	eor	r15, r15
    a638:	87 01       	movw	r16, r14
    a63a:	2a 2d       	mov	r18, r10
    a63c:	3b 2d       	mov	r19, r11
    a63e:	4c 2d       	mov	r20, r12
    a640:	5d 2d       	mov	r21, r13
    a642:	6e 2d       	mov	r22, r14
    a644:	7f 2d       	mov	r23, r15
    a646:	80 2f       	mov	r24, r16
    a648:	91 2f       	mov	r25, r17
    a64a:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <LCD_vidWriteUnSignedInteger>
       if(ultra_front>200)
    a64e:	80 91 16 03 	lds	r24, 0x0316
    a652:	90 91 17 03 	lds	r25, 0x0317
    a656:	a0 91 18 03 	lds	r26, 0x0318
    a65a:	b0 91 19 03 	lds	r27, 0x0319
    a65e:	89 3c       	cpi	r24, 0xC9	; 201
    a660:	91 05       	cpc	r25, r1
    a662:	a1 05       	cpc	r26, r1
    a664:	b1 05       	cpc	r27, r1
    a666:	68 f0       	brcs	.+26     	; 0xa682 <start_parking+0x304>
      	{
           ultra_front=200;
    a668:	88 ec       	ldi	r24, 0xC8	; 200
    a66a:	90 e0       	ldi	r25, 0x00	; 0
    a66c:	a0 e0       	ldi	r26, 0x00	; 0
    a66e:	b0 e0       	ldi	r27, 0x00	; 0
    a670:	80 93 16 03 	sts	0x0316, r24
    a674:	90 93 17 03 	sts	0x0317, r25
    a678:	a0 93 18 03 	sts	0x0318, r26
    a67c:	b0 93 19 03 	sts	0x0319, r27
    a680:	18 c0       	rjmp	.+48     	; 0xa6b2 <start_parking+0x334>
         }
       else if(ultra_front)
    a682:	80 91 16 03 	lds	r24, 0x0316
    a686:	90 91 17 03 	lds	r25, 0x0317
    a68a:	a0 91 18 03 	lds	r26, 0x0318
    a68e:	b0 91 19 03 	lds	r27, 0x0319
    a692:	00 97       	sbiw	r24, 0x00	; 0
    a694:	a1 05       	cpc	r26, r1
    a696:	b1 05       	cpc	r27, r1
    a698:	61 f0       	breq	.+24     	; 0xa6b2 <start_parking+0x334>
         {
             	ultra_front=5;
    a69a:	85 e0       	ldi	r24, 0x05	; 5
    a69c:	90 e0       	ldi	r25, 0x00	; 0
    a69e:	a0 e0       	ldi	r26, 0x00	; 0
    a6a0:	b0 e0       	ldi	r27, 0x00	; 0
    a6a2:	80 93 16 03 	sts	0x0316, r24
    a6a6:	90 93 17 03 	sts	0x0317, r25
    a6aa:	a0 93 18 03 	sts	0x0318, r26
    a6ae:	b0 93 19 03 	sts	0x0319, r27
         }
        	}while(Ultrasonic_front_Get_Distance()>10);
    a6b2:	0e 94 10 26 	call	0x4c20	; 0x4c20 <Ultrasonic_front_Get_Distance>
    a6b6:	dc 01       	movw	r26, r24
    a6b8:	cb 01       	movw	r24, r22
    a6ba:	8b 30       	cpi	r24, 0x0B	; 11
    a6bc:	91 05       	cpc	r25, r1
    a6be:	a1 05       	cpc	r26, r1
    a6c0:	b1 05       	cpc	r27, r1
    a6c2:	08 f0       	brcs	.+2      	; 0xa6c6 <start_parking+0x348>
    a6c4:	95 cf       	rjmp	.-214    	; 0xa5f0 <start_parking+0x272>
        //stop
	    Timer3_Init(timer3_Fast_PWM_10_bit,timer3_stop,Non_inverting_clr_oc0_oncompare_set_on_bottom_3,disconnected_channel_3);
    a6c6:	87 e0       	ldi	r24, 0x07	; 7
    a6c8:	60 e0       	ldi	r22, 0x00	; 0
    a6ca:	42 e0       	ldi	r20, 0x02	; 2
    a6cc:	20 e0       	ldi	r18, 0x00	; 0
    a6ce:	0e 94 78 15 	call	0x2af0	; 0x2af0 <Timer3_Init>
	    DIO_void_Set_Pin_Value(car_control,forward,HIGH);
    a6d2:	84 e0       	ldi	r24, 0x04	; 4
    a6d4:	63 e0       	ldi	r22, 0x03	; 3
    a6d6:	41 e0       	ldi	r20, 0x01	; 1
    a6d8:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
	    CLR_BIT(TCCR3A,COM3A0);
    a6dc:	ab e8       	ldi	r26, 0x8B	; 139
    a6de:	b0 e0       	ldi	r27, 0x00	; 0
    a6e0:	eb e8       	ldi	r30, 0x8B	; 139
    a6e2:	f0 e0       	ldi	r31, 0x00	; 0
    a6e4:	80 81       	ld	r24, Z
    a6e6:	8f 7b       	andi	r24, 0xBF	; 191
    a6e8:	8c 93       	st	X, r24
	    CLR_BIT(TCCR3A,COM3A1);
    a6ea:	ab e8       	ldi	r26, 0x8B	; 139
    a6ec:	b0 e0       	ldi	r27, 0x00	; 0
    a6ee:	eb e8       	ldi	r30, 0x8B	; 139
    a6f0:	f0 e0       	ldi	r31, 0x00	; 0
    a6f2:	80 81       	ld	r24, Z
    a6f4:	8f 77       	andi	r24, 0x7F	; 127
    a6f6:	8c 93       	st	X, r24
//..................................................................................
left_move();
    a6f8:	0e 94 97 50 	call	0xa12e	; 0xa12e <left_move>
backward_move();
    a6fc:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <backward_move>
do {
	   LCD_vidGotoxy(0,1);
    a700:	80 e0       	ldi	r24, 0x00	; 0
    a702:	61 e0       	ldi	r22, 0x01	; 1
    a704:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
	  	    ultra_back=Ultrasonic_back_Get_Distance();
    a708:	0e 94 73 29 	call	0x52e6	; 0x52e6 <Ultrasonic_back_Get_Distance>
    a70c:	dc 01       	movw	r26, r24
    a70e:	cb 01       	movw	r24, r22
    a710:	80 93 12 03 	sts	0x0312, r24
    a714:	90 93 13 03 	sts	0x0313, r25
    a718:	a0 93 14 03 	sts	0x0314, r26
    a71c:	b0 93 15 03 	sts	0x0315, r27
	  	   LCD_vidWriteUnSignedInteger(ultra_back);
    a720:	80 91 12 03 	lds	r24, 0x0312
    a724:	90 91 13 03 	lds	r25, 0x0313
    a728:	a0 91 14 03 	lds	r26, 0x0314
    a72c:	b0 91 15 03 	lds	r27, 0x0315
    a730:	5c 01       	movw	r10, r24
    a732:	6d 01       	movw	r12, r26
    a734:	ee 24       	eor	r14, r14
    a736:	ff 24       	eor	r15, r15
    a738:	87 01       	movw	r16, r14
    a73a:	2a 2d       	mov	r18, r10
    a73c:	3b 2d       	mov	r19, r11
    a73e:	4c 2d       	mov	r20, r12
    a740:	5d 2d       	mov	r21, r13
    a742:	6e 2d       	mov	r22, r14
    a744:	7f 2d       	mov	r23, r15
    a746:	80 2f       	mov	r24, r16
    a748:	91 2f       	mov	r25, r17
    a74a:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <LCD_vidWriteUnSignedInteger>
 LCD_vidGotoxy(0,0);
    a74e:	80 e0       	ldi	r24, 0x00	; 0
    a750:	60 e0       	ldi	r22, 0x00	; 0
    a752:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
  LCD_vidWriteString("back DISTANCE");
    a756:	86 ea       	ldi	r24, 0xA6	; 166
    a758:	91 e0       	ldi	r25, 0x01	; 1
    a75a:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>

if(ultra_back>200)
    a75e:	80 91 12 03 	lds	r24, 0x0312
    a762:	90 91 13 03 	lds	r25, 0x0313
    a766:	a0 91 14 03 	lds	r26, 0x0314
    a76a:	b0 91 15 03 	lds	r27, 0x0315
    a76e:	89 3c       	cpi	r24, 0xC9	; 201
    a770:	91 05       	cpc	r25, r1
    a772:	a1 05       	cpc	r26, r1
    a774:	b1 05       	cpc	r27, r1
    a776:	68 f0       	brcs	.+26     	; 0xa792 <start_parking+0x414>
	   	{
	      	ultra_back=200;
    a778:	88 ec       	ldi	r24, 0xC8	; 200
    a77a:	90 e0       	ldi	r25, 0x00	; 0
    a77c:	a0 e0       	ldi	r26, 0x00	; 0
    a77e:	b0 e0       	ldi	r27, 0x00	; 0
    a780:	80 93 12 03 	sts	0x0312, r24
    a784:	90 93 13 03 	sts	0x0313, r25
    a788:	a0 93 14 03 	sts	0x0314, r26
    a78c:	b0 93 15 03 	sts	0x0315, r27
    a790:	19 c0       	rjmp	.+50     	; 0xa7c4 <start_parking+0x446>
	      }
else if(ultra_back<6)
    a792:	80 91 12 03 	lds	r24, 0x0312
    a796:	90 91 13 03 	lds	r25, 0x0313
    a79a:	a0 91 14 03 	lds	r26, 0x0314
    a79e:	b0 91 15 03 	lds	r27, 0x0315
    a7a2:	86 30       	cpi	r24, 0x06	; 6
    a7a4:	91 05       	cpc	r25, r1
    a7a6:	a1 05       	cpc	r26, r1
    a7a8:	b1 05       	cpc	r27, r1
    a7aa:	60 f4       	brcc	.+24     	; 0xa7c4 <start_parking+0x446>
	    {
	        	ultra_back=5;
    a7ac:	85 e0       	ldi	r24, 0x05	; 5
    a7ae:	90 e0       	ldi	r25, 0x00	; 0
    a7b0:	a0 e0       	ldi	r26, 0x00	; 0
    a7b2:	b0 e0       	ldi	r27, 0x00	; 0
    a7b4:	80 93 12 03 	sts	0x0312, r24
    a7b8:	90 93 13 03 	sts	0x0313, r25
    a7bc:	a0 93 14 03 	sts	0x0314, r26
    a7c0:	b0 93 15 03 	sts	0x0315, r27
	   }
LCD_vidGotoxy(0,1);
    a7c4:	80 e0       	ldi	r24, 0x00	; 0
    a7c6:	61 e0       	ldi	r22, 0x01	; 1
    a7c8:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
LCD_vidWriteString("       ");
    a7cc:	84 eb       	ldi	r24, 0xB4	; 180
    a7ce:	91 e0       	ldi	r25, 0x01	; 1
    a7d0:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>
 } while(Ultrasonic_back_Get_Distance()>10);
    a7d4:	0e 94 73 29 	call	0x52e6	; 0x52e6 <Ultrasonic_back_Get_Distance>
    a7d8:	dc 01       	movw	r26, r24
    a7da:	cb 01       	movw	r24, r22
    a7dc:	8b 30       	cpi	r24, 0x0B	; 11
    a7de:	91 05       	cpc	r25, r1
    a7e0:	a1 05       	cpc	r26, r1
    a7e2:	b1 05       	cpc	r27, r1
    a7e4:	08 f0       	brcs	.+2      	; 0xa7e8 <start_parking+0x46a>
    a7e6:	8c cf       	rjmp	.-232    	; 0xa700 <start_parking+0x382>


	    //stop back
	    Timer3_Init(timer3_Fast_PWM_10_bit,timer3_stop,Non_inverting_clr_oc0_oncompare_set_on_bottom_3,disconnected_channel_3);
    a7e8:	87 e0       	ldi	r24, 0x07	; 7
    a7ea:	60 e0       	ldi	r22, 0x00	; 0
    a7ec:	42 e0       	ldi	r20, 0x02	; 2
    a7ee:	20 e0       	ldi	r18, 0x00	; 0
    a7f0:	0e 94 78 15 	call	0x2af0	; 0x2af0 <Timer3_Init>
	        	DIO_void_Set_Pin_Value(car_control, backword,HIGH);
    a7f4:	84 e0       	ldi	r24, 0x04	; 4
    a7f6:	65 e0       	ldi	r22, 0x05	; 5
    a7f8:	41 e0       	ldi	r20, 0x01	; 1
    a7fa:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
	            //TO DISCONNECT CHANNEL C
	            CLR_BIT(TCCR3A,COM3C0);
    a7fe:	ab e8       	ldi	r26, 0x8B	; 139
    a800:	b0 e0       	ldi	r27, 0x00	; 0
    a802:	eb e8       	ldi	r30, 0x8B	; 139
    a804:	f0 e0       	ldi	r31, 0x00	; 0
    a806:	80 81       	ld	r24, Z
    a808:	8b 7f       	andi	r24, 0xFB	; 251
    a80a:	8c 93       	st	X, r24
	            CLR_BIT(TCCR3A,COM3C1);
    a80c:	ab e8       	ldi	r26, 0x8B	; 139
    a80e:	b0 e0       	ldi	r27, 0x00	; 0
    a810:	eb e8       	ldi	r30, 0x8B	; 139
    a812:	f0 e0       	ldi	r31, 0x00	; 0
    a814:	80 81       	ld	r24, Z
    a816:	87 7f       	andi	r24, 0xF7	; 247
    a818:	8c 93       	st	X, r24
//.........................................................
right_half_move();
    a81a:	0e 94 03 50 	call	0xa006	; 0xa006 <right_half_move>
forward_move();
    a81e:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <forward_move>
do{
	ultra_front=Ultrasonic_front_Get_Distance();
    a822:	0e 94 10 26 	call	0x4c20	; 0x4c20 <Ultrasonic_front_Get_Distance>
    a826:	dc 01       	movw	r26, r24
    a828:	cb 01       	movw	r24, r22
    a82a:	80 93 16 03 	sts	0x0316, r24
    a82e:	90 93 17 03 	sts	0x0317, r25
    a832:	a0 93 18 03 	sts	0x0318, r26
    a836:	b0 93 19 03 	sts	0x0319, r27
	LCD_vidGotoxy(0,0);
    a83a:	80 e0       	ldi	r24, 0x00	; 0
    a83c:	60 e0       	ldi	r22, 0x00	; 0
    a83e:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
	LCD_vidWriteString("front DISTANCE");
    a842:	8c eb       	ldi	r24, 0xBC	; 188
    a844:	91 e0       	ldi	r25, 0x01	; 1
    a846:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>
	LCD_vidGotoxy(0,1);
    a84a:	80 e0       	ldi	r24, 0x00	; 0
    a84c:	61 e0       	ldi	r22, 0x01	; 1
    a84e:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
	LCD_vidWriteUnSignedInteger(ultra_front);
    a852:	80 91 16 03 	lds	r24, 0x0316
    a856:	90 91 17 03 	lds	r25, 0x0317
    a85a:	a0 91 18 03 	lds	r26, 0x0318
    a85e:	b0 91 19 03 	lds	r27, 0x0319
    a862:	5c 01       	movw	r10, r24
    a864:	6d 01       	movw	r12, r26
    a866:	ee 24       	eor	r14, r14
    a868:	ff 24       	eor	r15, r15
    a86a:	87 01       	movw	r16, r14
    a86c:	2a 2d       	mov	r18, r10
    a86e:	3b 2d       	mov	r19, r11
    a870:	4c 2d       	mov	r20, r12
    a872:	5d 2d       	mov	r21, r13
    a874:	6e 2d       	mov	r22, r14
    a876:	7f 2d       	mov	r23, r15
    a878:	80 2f       	mov	r24, r16
    a87a:	91 2f       	mov	r25, r17
    a87c:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <LCD_vidWriteUnSignedInteger>
	if(ultra_front>200)
    a880:	80 91 16 03 	lds	r24, 0x0316
    a884:	90 91 17 03 	lds	r25, 0x0317
    a888:	a0 91 18 03 	lds	r26, 0x0318
    a88c:	b0 91 19 03 	lds	r27, 0x0319
    a890:	89 3c       	cpi	r24, 0xC9	; 201
    a892:	91 05       	cpc	r25, r1
    a894:	a1 05       	cpc	r26, r1
    a896:	b1 05       	cpc	r27, r1
    a898:	68 f0       	brcs	.+26     	; 0xa8b4 <start_parking+0x536>
	 {
	  ultra_front=200;
    a89a:	88 ec       	ldi	r24, 0xC8	; 200
    a89c:	90 e0       	ldi	r25, 0x00	; 0
    a89e:	a0 e0       	ldi	r26, 0x00	; 0
    a8a0:	b0 e0       	ldi	r27, 0x00	; 0
    a8a2:	80 93 16 03 	sts	0x0316, r24
    a8a6:	90 93 17 03 	sts	0x0317, r25
    a8aa:	a0 93 18 03 	sts	0x0318, r26
    a8ae:	b0 93 19 03 	sts	0x0319, r27
    a8b2:	18 c0       	rjmp	.+48     	; 0xa8e4 <start_parking+0x566>
	}
	else if(ultra_front)
    a8b4:	80 91 16 03 	lds	r24, 0x0316
    a8b8:	90 91 17 03 	lds	r25, 0x0317
    a8bc:	a0 91 18 03 	lds	r26, 0x0318
    a8c0:	b0 91 19 03 	lds	r27, 0x0319
    a8c4:	00 97       	sbiw	r24, 0x00	; 0
    a8c6:	a1 05       	cpc	r26, r1
    a8c8:	b1 05       	cpc	r27, r1
    a8ca:	61 f0       	breq	.+24     	; 0xa8e4 <start_parking+0x566>
	{
	  ultra_front=5;
    a8cc:	85 e0       	ldi	r24, 0x05	; 5
    a8ce:	90 e0       	ldi	r25, 0x00	; 0
    a8d0:	a0 e0       	ldi	r26, 0x00	; 0
    a8d2:	b0 e0       	ldi	r27, 0x00	; 0
    a8d4:	80 93 16 03 	sts	0x0316, r24
    a8d8:	90 93 17 03 	sts	0x0317, r25
    a8dc:	a0 93 18 03 	sts	0x0318, r26
    a8e0:	b0 93 19 03 	sts	0x0319, r27
   }
} while(Ultrasonic_front_Get_Distance()>15);
    a8e4:	0e 94 10 26 	call	0x4c20	; 0x4c20 <Ultrasonic_front_Get_Distance>
    a8e8:	dc 01       	movw	r26, r24
    a8ea:	cb 01       	movw	r24, r22
    a8ec:	80 31       	cpi	r24, 0x10	; 16
    a8ee:	91 05       	cpc	r25, r1
    a8f0:	a1 05       	cpc	r26, r1
    a8f2:	b1 05       	cpc	r27, r1
    a8f4:	08 f0       	brcs	.+2      	; 0xa8f8 <start_parking+0x57a>
    a8f6:	95 cf       	rjmp	.-214    	; 0xa822 <start_parking+0x4a4>
	      Timer3_Init(timer3_Fast_PWM_10_bit,timer3_stop,Non_inverting_clr_oc0_oncompare_set_on_bottom_3,disconnected_channel_3);
    a8f8:	87 e0       	ldi	r24, 0x07	; 7
    a8fa:	60 e0       	ldi	r22, 0x00	; 0
    a8fc:	42 e0       	ldi	r20, 0x02	; 2
    a8fe:	20 e0       	ldi	r18, 0x00	; 0
    a900:	0e 94 78 15 	call	0x2af0	; 0x2af0 <Timer3_Init>
	    	    DIO_void_Set_Pin_Value(car_control,forward,HIGH);
    a904:	84 e0       	ldi	r24, 0x04	; 4
    a906:	63 e0       	ldi	r22, 0x03	; 3
    a908:	41 e0       	ldi	r20, 0x01	; 1
    a90a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
	    	    CLR_BIT(TCCR3A,COM3A0);
    a90e:	ab e8       	ldi	r26, 0x8B	; 139
    a910:	b0 e0       	ldi	r27, 0x00	; 0
    a912:	eb e8       	ldi	r30, 0x8B	; 139
    a914:	f0 e0       	ldi	r31, 0x00	; 0
    a916:	80 81       	ld	r24, Z
    a918:	8f 7b       	andi	r24, 0xBF	; 191
    a91a:	8c 93       	st	X, r24
	    	    CLR_BIT(TCCR3A,COM3A1);
    a91c:	ab e8       	ldi	r26, 0x8B	; 139
    a91e:	b0 e0       	ldi	r27, 0x00	; 0
    a920:	eb e8       	ldi	r30, 0x8B	; 139
    a922:	f0 e0       	ldi	r31, 0x00	; 0
    a924:	80 81       	ld	r24, Z
    a926:	8f 77       	andi	r24, 0x7F	; 127
    a928:	8c 93       	st	X, r24
//..................................................................................................
backward_move();
    a92a:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <backward_move>
left_half_move();
    a92e:	0e 94 2b 51 	call	0xa256	; 0xa256 <left_half_move>
do {
	   LCD_vidGotoxy(0,1);
    a932:	80 e0       	ldi	r24, 0x00	; 0
    a934:	61 e0       	ldi	r22, 0x01	; 1
    a936:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
	  	    ultra_back=Ultrasonic_back_Get_Distance();
    a93a:	0e 94 73 29 	call	0x52e6	; 0x52e6 <Ultrasonic_back_Get_Distance>
    a93e:	dc 01       	movw	r26, r24
    a940:	cb 01       	movw	r24, r22
    a942:	80 93 12 03 	sts	0x0312, r24
    a946:	90 93 13 03 	sts	0x0313, r25
    a94a:	a0 93 14 03 	sts	0x0314, r26
    a94e:	b0 93 15 03 	sts	0x0315, r27
	  	   LCD_vidWriteUnSignedInteger(ultra_back);
    a952:	80 91 12 03 	lds	r24, 0x0312
    a956:	90 91 13 03 	lds	r25, 0x0313
    a95a:	a0 91 14 03 	lds	r26, 0x0314
    a95e:	b0 91 15 03 	lds	r27, 0x0315
    a962:	5c 01       	movw	r10, r24
    a964:	6d 01       	movw	r12, r26
    a966:	ee 24       	eor	r14, r14
    a968:	ff 24       	eor	r15, r15
    a96a:	87 01       	movw	r16, r14
    a96c:	2a 2d       	mov	r18, r10
    a96e:	3b 2d       	mov	r19, r11
    a970:	4c 2d       	mov	r20, r12
    a972:	5d 2d       	mov	r21, r13
    a974:	6e 2d       	mov	r22, r14
    a976:	7f 2d       	mov	r23, r15
    a978:	80 2f       	mov	r24, r16
    a97a:	91 2f       	mov	r25, r17
    a97c:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <LCD_vidWriteUnSignedInteger>
 LCD_vidGotoxy(0,0);
    a980:	80 e0       	ldi	r24, 0x00	; 0
    a982:	60 e0       	ldi	r22, 0x00	; 0
    a984:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
  LCD_vidWriteString("back DISTANCE");
    a988:	86 ea       	ldi	r24, 0xA6	; 166
    a98a:	91 e0       	ldi	r25, 0x01	; 1
    a98c:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>

if(ultra_back>200)
    a990:	80 91 12 03 	lds	r24, 0x0312
    a994:	90 91 13 03 	lds	r25, 0x0313
    a998:	a0 91 14 03 	lds	r26, 0x0314
    a99c:	b0 91 15 03 	lds	r27, 0x0315
    a9a0:	89 3c       	cpi	r24, 0xC9	; 201
    a9a2:	91 05       	cpc	r25, r1
    a9a4:	a1 05       	cpc	r26, r1
    a9a6:	b1 05       	cpc	r27, r1
    a9a8:	68 f0       	brcs	.+26     	; 0xa9c4 <start_parking+0x646>
	   	{
	      	ultra_back=200;
    a9aa:	88 ec       	ldi	r24, 0xC8	; 200
    a9ac:	90 e0       	ldi	r25, 0x00	; 0
    a9ae:	a0 e0       	ldi	r26, 0x00	; 0
    a9b0:	b0 e0       	ldi	r27, 0x00	; 0
    a9b2:	80 93 12 03 	sts	0x0312, r24
    a9b6:	90 93 13 03 	sts	0x0313, r25
    a9ba:	a0 93 14 03 	sts	0x0314, r26
    a9be:	b0 93 15 03 	sts	0x0315, r27
    a9c2:	19 c0       	rjmp	.+50     	; 0xa9f6 <start_parking+0x678>
	      }
else if(ultra_back<6)
    a9c4:	80 91 12 03 	lds	r24, 0x0312
    a9c8:	90 91 13 03 	lds	r25, 0x0313
    a9cc:	a0 91 14 03 	lds	r26, 0x0314
    a9d0:	b0 91 15 03 	lds	r27, 0x0315
    a9d4:	86 30       	cpi	r24, 0x06	; 6
    a9d6:	91 05       	cpc	r25, r1
    a9d8:	a1 05       	cpc	r26, r1
    a9da:	b1 05       	cpc	r27, r1
    a9dc:	60 f4       	brcc	.+24     	; 0xa9f6 <start_parking+0x678>
	    {
	        	ultra_back=5;
    a9de:	85 e0       	ldi	r24, 0x05	; 5
    a9e0:	90 e0       	ldi	r25, 0x00	; 0
    a9e2:	a0 e0       	ldi	r26, 0x00	; 0
    a9e4:	b0 e0       	ldi	r27, 0x00	; 0
    a9e6:	80 93 12 03 	sts	0x0312, r24
    a9ea:	90 93 13 03 	sts	0x0313, r25
    a9ee:	a0 93 14 03 	sts	0x0314, r26
    a9f2:	b0 93 15 03 	sts	0x0315, r27
	   }
LCD_vidGotoxy(0,1);
    a9f6:	80 e0       	ldi	r24, 0x00	; 0
    a9f8:	61 e0       	ldi	r22, 0x01	; 1
    a9fa:	0e 94 c6 3b 	call	0x778c	; 0x778c <LCD_vidGotoxy>
LCD_vidWriteString("       ");
    a9fe:	84 eb       	ldi	r24, 0xB4	; 180
    aa00:	91 e0       	ldi	r25, 0x01	; 1
    aa02:	0e 94 14 36 	call	0x6c28	; 0x6c28 <LCD_vidWriteString>
 } while(Ultrasonic_back_Get_Distance()>25);
    aa06:	0e 94 73 29 	call	0x52e6	; 0x52e6 <Ultrasonic_back_Get_Distance>
    aa0a:	dc 01       	movw	r26, r24
    aa0c:	cb 01       	movw	r24, r22
    aa0e:	8a 31       	cpi	r24, 0x1A	; 26
    aa10:	91 05       	cpc	r25, r1
    aa12:	a1 05       	cpc	r26, r1
    aa14:	b1 05       	cpc	r27, r1
    aa16:	08 f0       	brcs	.+2      	; 0xaa1a <start_parking+0x69c>
    aa18:	8c cf       	rjmp	.-232    	; 0xa932 <start_parking+0x5b4>

Timer3_Init(timer3_Fast_PWM_10_bit,timer3_stop,Non_inverting_clr_oc0_oncompare_set_on_bottom_3,disconnected_channel_3);
    aa1a:	87 e0       	ldi	r24, 0x07	; 7
    aa1c:	60 e0       	ldi	r22, 0x00	; 0
    aa1e:	42 e0       	ldi	r20, 0x02	; 2
    aa20:	20 e0       	ldi	r18, 0x00	; 0
    aa22:	0e 94 78 15 	call	0x2af0	; 0x2af0 <Timer3_Init>
	  DIO_void_Set_Pin_Value(car_control, backword,HIGH);
    aa26:	84 e0       	ldi	r24, 0x04	; 4
    aa28:	65 e0       	ldi	r22, 0x05	; 5
    aa2a:	41 e0       	ldi	r20, 0x01	; 1
    aa2c:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
	   //TO DISCONNECT CHANNEL C
	    CLR_BIT(TCCR3A,COM3C0);
    aa30:	ab e8       	ldi	r26, 0x8B	; 139
    aa32:	b0 e0       	ldi	r27, 0x00	; 0
    aa34:	eb e8       	ldi	r30, 0x8B	; 139
    aa36:	f0 e0       	ldi	r31, 0x00	; 0
    aa38:	80 81       	ld	r24, Z
    aa3a:	8b 7f       	andi	r24, 0xFB	; 251
    aa3c:	8c 93       	st	X, r24
	     CLR_BIT(TCCR3A,COM3C1);
    aa3e:	ab e8       	ldi	r26, 0x8B	; 139
    aa40:	b0 e0       	ldi	r27, 0x00	; 0
    aa42:	eb e8       	ldi	r30, 0x8B	; 139
    aa44:	f0 e0       	ldi	r31, 0x00	; 0
    aa46:	80 81       	ld	r24, Z
    aa48:	87 7f       	andi	r24, 0xF7	; 247
    aa4a:	8c 93       	st	X, r24
	     	      Timer3_Init(timer3_Fast_PWM_10_bit,timer3_stop,Non_inverting_clr_oc0_oncompare_set_on_bottom_3,disconnected_channel_3);
	     	    	    DIO_void_Set_Pin_Value(car_control,forward,HIGH);
	     	    	    CLR_BIT(TCCR3A,COM3A0);
	     	    	    CLR_BIT(TCCR3A,COM3A1);
*/
}
    aa4c:	cf 91       	pop	r28
    aa4e:	df 91       	pop	r29
    aa50:	1f 91       	pop	r17
    aa52:	0f 91       	pop	r16
    aa54:	ff 90       	pop	r15
    aa56:	ef 90       	pop	r14
    aa58:	df 90       	pop	r13
    aa5a:	cf 90       	pop	r12
    aa5c:	bf 90       	pop	r11
    aa5e:	af 90       	pop	r10
    aa60:	08 95       	ret

0000aa62 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
    aa62:	1f 92       	push	r1
    aa64:	0f 92       	push	r0
    aa66:	0f b6       	in	r0, 0x3f	; 63
    aa68:	0f 92       	push	r0
    aa6a:	11 24       	eor	r1, r1
    aa6c:	8f 93       	push	r24
    aa6e:	9f 93       	push	r25
    aa70:	df 93       	push	r29
    aa72:	cf 93       	push	r28
    aa74:	cd b7       	in	r28, 0x3d	; 61
    aa76:	de b7       	in	r29, 0x3e	; 62

if(flag_check==0)
    aa78:	80 91 1e 03 	lds	r24, 0x031E
    aa7c:	88 23       	and	r24, r24
    aa7e:	49 f4       	brne	.+18     	; 0xaa92 <__vector_16+0x30>
{
    	count_right_front++;
    aa80:	80 91 04 03 	lds	r24, 0x0304
    aa84:	90 91 05 03 	lds	r25, 0x0305
    aa88:	01 96       	adiw	r24, 0x01	; 1
    aa8a:	90 93 05 03 	sts	0x0305, r25
    aa8e:	80 93 04 03 	sts	0x0304, r24
}

 if(flag_check==2)
    aa92:	80 91 1e 03 	lds	r24, 0x031E
    aa96:	82 30       	cpi	r24, 0x02	; 2
    aa98:	49 f4       	brne	.+18     	; 0xaaac <__vector_16+0x4a>
{
    	count_right_back2++;
    aa9a:	80 91 0c 03 	lds	r24, 0x030C
    aa9e:	90 91 0d 03 	lds	r25, 0x030D
    aaa2:	01 96       	adiw	r24, 0x01	; 1
    aaa4:	90 93 0d 03 	sts	0x030D, r25
    aaa8:	80 93 0c 03 	sts	0x030C, r24
}


}
    aaac:	cf 91       	pop	r28
    aaae:	df 91       	pop	r29
    aab0:	9f 91       	pop	r25
    aab2:	8f 91       	pop	r24
    aab4:	0f 90       	pop	r0
    aab6:	0f be       	out	0x3f, r0	; 63
    aab8:	0f 90       	pop	r0
    aaba:	1f 90       	pop	r1
    aabc:	18 95       	reti

0000aabe <LCD_LIGHT>:


void LCD_LIGHT(void)
{
    aabe:	df 93       	push	r29
    aac0:	cf 93       	push	r28
    aac2:	cd b7       	in	r28, 0x3d	; 61
    aac4:	de b7       	in	r29, 0x3e	; 62
	DIO_void_Set_Pin_Dirction(PORTE_ID,PIN4,OUTPUT);
    aac6:	84 e0       	ldi	r24, 0x04	; 4
    aac8:	64 e0       	ldi	r22, 0x04	; 4
    aaca:	41 e0       	ldi	r20, 0x01	; 1
    aacc:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <DIO_void_Set_Pin_Dirction>
	DIO_void_Set_Pin_Value(PORTE_ID,PIN4,OUTPUT);
    aad0:	84 e0       	ldi	r24, 0x04	; 4
    aad2:	64 e0       	ldi	r22, 0x04	; 4
    aad4:	41 e0       	ldi	r20, 0x01	; 1
    aad6:	0e 94 58 21 	call	0x42b0	; 0x42b0 <DIO_void_Set_Pin_Value>
}
    aada:	cf 91       	pop	r28
    aadc:	df 91       	pop	r29
    aade:	08 95       	ret

0000aae0 <main>:
#include"APP_SERV.h"
int main(void)
{
    aae0:	df 93       	push	r29
    aae2:	cf 93       	push	r28
    aae4:	0f 92       	push	r0
    aae6:	cd b7       	in	r28, 0x3d	; 61
    aae8:	de b7       	in	r29, 0x3e	; 62
uint8 check=0;
    aaea:	19 82       	std	Y+1, r1	; 0x01
project_init();
    aaec:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <project_init>
while(1)
{


	//start_parking2();
	Button_Check();
    aaf0:	0e 94 b5 3e 	call	0x7d6a	; 0x7d6a <Button_Check>
	CAR_Width_Check();
    aaf4:	0e 94 50 3f 	call	0x7ea0	; 0x7ea0 <CAR_Width_Check>
    aaf8:	03 c0       	rjmp	.+6      	; 0xab00 <main+0x20>
	while(check==0)
	{
	check=CAR_Length_Check();
    aafa:	0e 94 c3 4a 	call	0x9586	; 0x9586 <CAR_Length_Check>
    aafe:	89 83       	std	Y+1, r24	; 0x01


	//start_parking2();
	Button_Check();
	CAR_Width_Check();
	while(check==0)
    ab00:	89 81       	ldd	r24, Y+1	; 0x01
    ab02:	88 23       	and	r24, r24
    ab04:	d1 f3       	breq	.-12     	; 0xaafa <main+0x1a>
	{
	check=CAR_Length_Check();
     }
	CAR_Length_Check2();
    ab06:	0e 94 c5 4c 	call	0x998a	; 0x998a <CAR_Length_Check2>
	CAR_Length_Check3();
    ab0a:	0e 94 3a 4d 	call	0x9a74	; 0x9a74 <CAR_Length_Check3>
    start_parking();
    ab0e:	0e 94 bf 51 	call	0xa37e	; 0xa37e <start_parking>
    LCD_vidPrintInTwoLines("CONGRATULAAAAATION PARK DOONE");
    ab12:	8b ec       	ldi	r24, 0xCB	; 203
    ab14:	91 e0       	ldi	r25, 0x01	; 1
    ab16:	0e 94 56 3d 	call	0x7aac	; 0x7aac <LCD_vidPrintInTwoLines>
    ab1a:	ea cf       	rjmp	.-44     	; 0xaaf0 <main+0x10>

0000ab1c <__udivmodsi4>:
    ab1c:	a1 e2       	ldi	r26, 0x21	; 33
    ab1e:	1a 2e       	mov	r1, r26
    ab20:	aa 1b       	sub	r26, r26
    ab22:	bb 1b       	sub	r27, r27
    ab24:	fd 01       	movw	r30, r26
    ab26:	0d c0       	rjmp	.+26     	; 0xab42 <__udivmodsi4_ep>

0000ab28 <__udivmodsi4_loop>:
    ab28:	aa 1f       	adc	r26, r26
    ab2a:	bb 1f       	adc	r27, r27
    ab2c:	ee 1f       	adc	r30, r30
    ab2e:	ff 1f       	adc	r31, r31
    ab30:	a2 17       	cp	r26, r18
    ab32:	b3 07       	cpc	r27, r19
    ab34:	e4 07       	cpc	r30, r20
    ab36:	f5 07       	cpc	r31, r21
    ab38:	20 f0       	brcs	.+8      	; 0xab42 <__udivmodsi4_ep>
    ab3a:	a2 1b       	sub	r26, r18
    ab3c:	b3 0b       	sbc	r27, r19
    ab3e:	e4 0b       	sbc	r30, r20
    ab40:	f5 0b       	sbc	r31, r21

0000ab42 <__udivmodsi4_ep>:
    ab42:	66 1f       	adc	r22, r22
    ab44:	77 1f       	adc	r23, r23
    ab46:	88 1f       	adc	r24, r24
    ab48:	99 1f       	adc	r25, r25
    ab4a:	1a 94       	dec	r1
    ab4c:	69 f7       	brne	.-38     	; 0xab28 <__udivmodsi4_loop>
    ab4e:	60 95       	com	r22
    ab50:	70 95       	com	r23
    ab52:	80 95       	com	r24
    ab54:	90 95       	com	r25
    ab56:	9b 01       	movw	r18, r22
    ab58:	ac 01       	movw	r20, r24
    ab5a:	bd 01       	movw	r22, r26
    ab5c:	cf 01       	movw	r24, r30
    ab5e:	08 95       	ret

0000ab60 <__mulsi3>:
    ab60:	62 9f       	mul	r22, r18
    ab62:	d0 01       	movw	r26, r0
    ab64:	73 9f       	mul	r23, r19
    ab66:	f0 01       	movw	r30, r0
    ab68:	82 9f       	mul	r24, r18
    ab6a:	e0 0d       	add	r30, r0
    ab6c:	f1 1d       	adc	r31, r1
    ab6e:	64 9f       	mul	r22, r20
    ab70:	e0 0d       	add	r30, r0
    ab72:	f1 1d       	adc	r31, r1
    ab74:	92 9f       	mul	r25, r18
    ab76:	f0 0d       	add	r31, r0
    ab78:	83 9f       	mul	r24, r19
    ab7a:	f0 0d       	add	r31, r0
    ab7c:	74 9f       	mul	r23, r20
    ab7e:	f0 0d       	add	r31, r0
    ab80:	65 9f       	mul	r22, r21
    ab82:	f0 0d       	add	r31, r0
    ab84:	99 27       	eor	r25, r25
    ab86:	72 9f       	mul	r23, r18
    ab88:	b0 0d       	add	r27, r0
    ab8a:	e1 1d       	adc	r30, r1
    ab8c:	f9 1f       	adc	r31, r25
    ab8e:	63 9f       	mul	r22, r19
    ab90:	b0 0d       	add	r27, r0
    ab92:	e1 1d       	adc	r30, r1
    ab94:	f9 1f       	adc	r31, r25
    ab96:	bd 01       	movw	r22, r26
    ab98:	cf 01       	movw	r24, r30
    ab9a:	11 24       	eor	r1, r1
    ab9c:	08 95       	ret

0000ab9e <__prologue_saves__>:
    ab9e:	2f 92       	push	r2
    aba0:	3f 92       	push	r3
    aba2:	4f 92       	push	r4
    aba4:	5f 92       	push	r5
    aba6:	6f 92       	push	r6
    aba8:	7f 92       	push	r7
    abaa:	8f 92       	push	r8
    abac:	9f 92       	push	r9
    abae:	af 92       	push	r10
    abb0:	bf 92       	push	r11
    abb2:	cf 92       	push	r12
    abb4:	df 92       	push	r13
    abb6:	ef 92       	push	r14
    abb8:	ff 92       	push	r15
    abba:	0f 93       	push	r16
    abbc:	1f 93       	push	r17
    abbe:	cf 93       	push	r28
    abc0:	df 93       	push	r29
    abc2:	cd b7       	in	r28, 0x3d	; 61
    abc4:	de b7       	in	r29, 0x3e	; 62
    abc6:	ca 1b       	sub	r28, r26
    abc8:	db 0b       	sbc	r29, r27
    abca:	0f b6       	in	r0, 0x3f	; 63
    abcc:	f8 94       	cli
    abce:	de bf       	out	0x3e, r29	; 62
    abd0:	0f be       	out	0x3f, r0	; 63
    abd2:	cd bf       	out	0x3d, r28	; 61
    abd4:	09 94       	ijmp

0000abd6 <__epilogue_restores__>:
    abd6:	2a 88       	ldd	r2, Y+18	; 0x12
    abd8:	39 88       	ldd	r3, Y+17	; 0x11
    abda:	48 88       	ldd	r4, Y+16	; 0x10
    abdc:	5f 84       	ldd	r5, Y+15	; 0x0f
    abde:	6e 84       	ldd	r6, Y+14	; 0x0e
    abe0:	7d 84       	ldd	r7, Y+13	; 0x0d
    abe2:	8c 84       	ldd	r8, Y+12	; 0x0c
    abe4:	9b 84       	ldd	r9, Y+11	; 0x0b
    abe6:	aa 84       	ldd	r10, Y+10	; 0x0a
    abe8:	b9 84       	ldd	r11, Y+9	; 0x09
    abea:	c8 84       	ldd	r12, Y+8	; 0x08
    abec:	df 80       	ldd	r13, Y+7	; 0x07
    abee:	ee 80       	ldd	r14, Y+6	; 0x06
    abf0:	fd 80       	ldd	r15, Y+5	; 0x05
    abf2:	0c 81       	ldd	r16, Y+4	; 0x04
    abf4:	1b 81       	ldd	r17, Y+3	; 0x03
    abf6:	aa 81       	ldd	r26, Y+2	; 0x02
    abf8:	b9 81       	ldd	r27, Y+1	; 0x01
    abfa:	ce 0f       	add	r28, r30
    abfc:	d1 1d       	adc	r29, r1
    abfe:	0f b6       	in	r0, 0x3f	; 63
    ac00:	f8 94       	cli
    ac02:	de bf       	out	0x3e, r29	; 62
    ac04:	0f be       	out	0x3f, r0	; 63
    ac06:	cd bf       	out	0x3d, r28	; 61
    ac08:	ed 01       	movw	r28, r26
    ac0a:	08 95       	ret

0000ac0c <_exit>:
    ac0c:	f8 94       	cli

0000ac0e <__stop_program>:
    ac0e:	ff cf       	rjmp	.-2      	; 0xac0e <__stop_program>
