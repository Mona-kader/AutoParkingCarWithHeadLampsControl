
yaaaa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800100  00007652  000076e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007652  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080023e  0080023e  00007824  2**0
                  ALLOC
  3 .stab         00005118  00000000  00000000  00007824  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000028cb  00000000  00000000  0000c93c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000f207  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ef  00000000  00000000  0000f3a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002f63  00000000  00000000  0000f596  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000147c  00000000  00000000  000124f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001406  00000000  00000000  00013975  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00014d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000353  00000000  00000000  00014f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021b4  00000000  00000000  0001528f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00017443  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 94 29 	jmp	0x5328	; 0x5328 <__vector_11>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 e4 29 	jmp	0x53c8	; 0x53c8 <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e5       	ldi	r30, 0x52	; 82
      a0:	f6 e7       	ldi	r31, 0x76	; 118
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 33       	cpi	r26, 0x3E	; 62
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	ae e3       	ldi	r26, 0x3E	; 62
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 34       	cpi	r26, 0x4C	; 76
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 b7 39 	call	0x736e	; 0x736e <main>
      c6:	0c 94 27 3b 	jmp	0x764e	; 0x764e <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__fixunssfsi>:
      ce:	ef 92       	push	r14
      d0:	ff 92       	push	r15
      d2:	0f 93       	push	r16
      d4:	1f 93       	push	r17
      d6:	7b 01       	movw	r14, r22
      d8:	8c 01       	movw	r16, r24
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	40 e0       	ldi	r20, 0x00	; 0
      e0:	5f e4       	ldi	r21, 0x4F	; 79
      e2:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__gesf2>
      e6:	88 23       	and	r24, r24
      e8:	8c f0       	brlt	.+34     	; 0x10c <__fixunssfsi+0x3e>
      ea:	c8 01       	movw	r24, r16
      ec:	b7 01       	movw	r22, r14
      ee:	20 e0       	ldi	r18, 0x00	; 0
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	5f e4       	ldi	r21, 0x4F	; 79
      f6:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <__subsf3>
      fa:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__fixsfsi>
      fe:	9b 01       	movw	r18, r22
     100:	ac 01       	movw	r20, r24
     102:	20 50       	subi	r18, 0x00	; 0
     104:	30 40       	sbci	r19, 0x00	; 0
     106:	40 40       	sbci	r20, 0x00	; 0
     108:	50 48       	sbci	r21, 0x80	; 128
     10a:	06 c0       	rjmp	.+12     	; 0x118 <__fixunssfsi+0x4a>
     10c:	c8 01       	movw	r24, r16
     10e:	b7 01       	movw	r22, r14
     110:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__fixsfsi>
     114:	9b 01       	movw	r18, r22
     116:	ac 01       	movw	r20, r24
     118:	b9 01       	movw	r22, r18
     11a:	ca 01       	movw	r24, r20
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	08 95       	ret

00000126 <__udivdi3>:
     126:	ae e5       	ldi	r26, 0x5E	; 94
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	e9 e9       	ldi	r30, 0x99	; 153
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	0c 94 f0 3a 	jmp	0x75e0	; 0x75e0 <__prologue_saves__>
     132:	a8 e0       	ldi	r26, 0x08	; 8
     134:	4e 01       	movw	r8, r28
     136:	08 94       	sec
     138:	81 1c       	adc	r8, r1
     13a:	91 1c       	adc	r9, r1
     13c:	f4 01       	movw	r30, r8
     13e:	6a 2e       	mov	r6, r26
     140:	11 92       	st	Z+, r1
     142:	6a 94       	dec	r6
     144:	e9 f7       	brne	.-6      	; 0x140 <__udivdi3+0x1a>
     146:	29 83       	std	Y+1, r18	; 0x01
     148:	3a 83       	std	Y+2, r19	; 0x02
     14a:	4b 83       	std	Y+3, r20	; 0x03
     14c:	5c 83       	std	Y+4, r21	; 0x04
     14e:	6d 83       	std	Y+5, r22	; 0x05
     150:	7e 83       	std	Y+6, r23	; 0x06
     152:	8f 83       	std	Y+7, r24	; 0x07
     154:	98 87       	std	Y+8, r25	; 0x08
     156:	ce 01       	movw	r24, r28
     158:	09 96       	adiw	r24, 0x09	; 9
     15a:	fc 01       	movw	r30, r24
     15c:	11 92       	st	Z+, r1
     15e:	aa 95       	dec	r26
     160:	e9 f7       	brne	.-6      	; 0x15c <__udivdi3+0x36>
     162:	a9 86       	std	Y+9, r10	; 0x09
     164:	ba 86       	std	Y+10, r11	; 0x0a
     166:	cb 86       	std	Y+11, r12	; 0x0b
     168:	dc 86       	std	Y+12, r13	; 0x0c
     16a:	ed 86       	std	Y+13, r14	; 0x0d
     16c:	fe 86       	std	Y+14, r15	; 0x0e
     16e:	0f 87       	std	Y+15, r16	; 0x0f
     170:	18 8b       	std	Y+16, r17	; 0x10
     172:	29 84       	ldd	r2, Y+9	; 0x09
     174:	3a 84       	ldd	r3, Y+10	; 0x0a
     176:	4b 84       	ldd	r4, Y+11	; 0x0b
     178:	5c 84       	ldd	r5, Y+12	; 0x0c
     17a:	ed 84       	ldd	r14, Y+13	; 0x0d
     17c:	fe 84       	ldd	r15, Y+14	; 0x0e
     17e:	0f 85       	ldd	r16, Y+15	; 0x0f
     180:	18 89       	ldd	r17, Y+16	; 0x10
     182:	69 80       	ldd	r6, Y+1	; 0x01
     184:	7a 80       	ldd	r7, Y+2	; 0x02
     186:	8b 80       	ldd	r8, Y+3	; 0x03
     188:	9c 80       	ldd	r9, Y+4	; 0x04
     18a:	6d a6       	std	Y+45, r6	; 0x2d
     18c:	7e a6       	std	Y+46, r7	; 0x2e
     18e:	8f a6       	std	Y+47, r8	; 0x2f
     190:	98 aa       	std	Y+48, r9	; 0x30
     192:	6d 80       	ldd	r6, Y+5	; 0x05
     194:	7e 80       	ldd	r7, Y+6	; 0x06
     196:	8f 80       	ldd	r8, Y+7	; 0x07
     198:	98 84       	ldd	r9, Y+8	; 0x08
     19a:	e1 14       	cp	r14, r1
     19c:	f1 04       	cpc	r15, r1
     19e:	01 05       	cpc	r16, r1
     1a0:	11 05       	cpc	r17, r1
     1a2:	09 f0       	breq	.+2      	; 0x1a6 <__udivdi3+0x80>
     1a4:	b3 c3       	rjmp	.+1894   	; 0x90c <__udivdi3+0x7e6>
     1a6:	62 14       	cp	r6, r2
     1a8:	73 04       	cpc	r7, r3
     1aa:	84 04       	cpc	r8, r4
     1ac:	95 04       	cpc	r9, r5
     1ae:	08 f0       	brcs	.+2      	; 0x1b2 <__udivdi3+0x8c>
     1b0:	3d c1       	rjmp	.+634    	; 0x42c <__udivdi3+0x306>
     1b2:	00 e0       	ldi	r16, 0x00	; 0
     1b4:	20 16       	cp	r2, r16
     1b6:	00 e0       	ldi	r16, 0x00	; 0
     1b8:	30 06       	cpc	r3, r16
     1ba:	01 e0       	ldi	r16, 0x01	; 1
     1bc:	40 06       	cpc	r4, r16
     1be:	00 e0       	ldi	r16, 0x00	; 0
     1c0:	50 06       	cpc	r5, r16
     1c2:	88 f4       	brcc	.+34     	; 0x1e6 <__udivdi3+0xc0>
     1c4:	1f ef       	ldi	r17, 0xFF	; 255
     1c6:	21 16       	cp	r2, r17
     1c8:	31 04       	cpc	r3, r1
     1ca:	41 04       	cpc	r4, r1
     1cc:	51 04       	cpc	r5, r1
     1ce:	39 f0       	breq	.+14     	; 0x1de <__udivdi3+0xb8>
     1d0:	30 f0       	brcs	.+12     	; 0x1de <__udivdi3+0xb8>
     1d2:	48 e0       	ldi	r20, 0x08	; 8
     1d4:	e4 2e       	mov	r14, r20
     1d6:	f1 2c       	mov	r15, r1
     1d8:	01 2d       	mov	r16, r1
     1da:	11 2d       	mov	r17, r1
     1dc:	18 c0       	rjmp	.+48     	; 0x20e <__udivdi3+0xe8>
     1de:	ee 24       	eor	r14, r14
     1e0:	ff 24       	eor	r15, r15
     1e2:	87 01       	movw	r16, r14
     1e4:	14 c0       	rjmp	.+40     	; 0x20e <__udivdi3+0xe8>
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	22 16       	cp	r2, r18
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	32 06       	cpc	r3, r18
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	42 06       	cpc	r4, r18
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	52 06       	cpc	r5, r18
     1f6:	30 f0       	brcs	.+12     	; 0x204 <__udivdi3+0xde>
     1f8:	38 e1       	ldi	r19, 0x18	; 24
     1fa:	e3 2e       	mov	r14, r19
     1fc:	f1 2c       	mov	r15, r1
     1fe:	01 2d       	mov	r16, r1
     200:	11 2d       	mov	r17, r1
     202:	05 c0       	rjmp	.+10     	; 0x20e <__udivdi3+0xe8>
     204:	20 e1       	ldi	r18, 0x10	; 16
     206:	e2 2e       	mov	r14, r18
     208:	f1 2c       	mov	r15, r1
     20a:	01 2d       	mov	r16, r1
     20c:	11 2d       	mov	r17, r1
     20e:	d2 01       	movw	r26, r4
     210:	c1 01       	movw	r24, r2
     212:	0e 2c       	mov	r0, r14
     214:	04 c0       	rjmp	.+8      	; 0x21e <__udivdi3+0xf8>
     216:	b6 95       	lsr	r27
     218:	a7 95       	ror	r26
     21a:	97 95       	ror	r25
     21c:	87 95       	ror	r24
     21e:	0a 94       	dec	r0
     220:	d2 f7       	brpl	.-12     	; 0x216 <__udivdi3+0xf0>
     222:	83 5c       	subi	r24, 0xC3	; 195
     224:	9e 4f       	sbci	r25, 0xFE	; 254
     226:	dc 01       	movw	r26, r24
     228:	2c 91       	ld	r18, X
     22a:	80 e2       	ldi	r24, 0x20	; 32
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e0       	ldi	r27, 0x00	; 0
     232:	8e 19       	sub	r24, r14
     234:	9f 09       	sbc	r25, r15
     236:	a0 0b       	sbc	r26, r16
     238:	b1 0b       	sbc	r27, r17
     23a:	7c 01       	movw	r14, r24
     23c:	8d 01       	movw	r16, r26
     23e:	e2 1a       	sub	r14, r18
     240:	f1 08       	sbc	r15, r1
     242:	01 09       	sbc	r16, r1
     244:	11 09       	sbc	r17, r1
     246:	e1 14       	cp	r14, r1
     248:	f1 04       	cpc	r15, r1
     24a:	01 05       	cpc	r16, r1
     24c:	11 05       	cpc	r17, r1
     24e:	a1 f1       	breq	.+104    	; 0x2b8 <__udivdi3+0x192>
     250:	0e 2c       	mov	r0, r14
     252:	04 c0       	rjmp	.+8      	; 0x25c <__udivdi3+0x136>
     254:	22 0c       	add	r2, r2
     256:	33 1c       	adc	r3, r3
     258:	44 1c       	adc	r4, r4
     25a:	55 1c       	adc	r5, r5
     25c:	0a 94       	dec	r0
     25e:	d2 f7       	brpl	.-12     	; 0x254 <__udivdi3+0x12e>
     260:	a4 01       	movw	r20, r8
     262:	93 01       	movw	r18, r6
     264:	0e 2c       	mov	r0, r14
     266:	04 c0       	rjmp	.+8      	; 0x270 <__udivdi3+0x14a>
     268:	22 0f       	add	r18, r18
     26a:	33 1f       	adc	r19, r19
     26c:	44 1f       	adc	r20, r20
     26e:	55 1f       	adc	r21, r21
     270:	0a 94       	dec	r0
     272:	d2 f7       	brpl	.-12     	; 0x268 <__udivdi3+0x142>
     274:	80 e2       	ldi	r24, 0x20	; 32
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	8e 19       	sub	r24, r14
     27a:	9f 09       	sbc	r25, r15
     27c:	6d a4       	ldd	r6, Y+45	; 0x2d
     27e:	7e a4       	ldd	r7, Y+46	; 0x2e
     280:	8f a4       	ldd	r8, Y+47	; 0x2f
     282:	98 a8       	ldd	r9, Y+48	; 0x30
     284:	04 c0       	rjmp	.+8      	; 0x28e <__udivdi3+0x168>
     286:	96 94       	lsr	r9
     288:	87 94       	ror	r8
     28a:	77 94       	ror	r7
     28c:	67 94       	ror	r6
     28e:	8a 95       	dec	r24
     290:	d2 f7       	brpl	.-12     	; 0x286 <__udivdi3+0x160>
     292:	62 2a       	or	r6, r18
     294:	73 2a       	or	r7, r19
     296:	84 2a       	or	r8, r20
     298:	95 2a       	or	r9, r21
     29a:	ad a4       	ldd	r10, Y+45	; 0x2d
     29c:	be a4       	ldd	r11, Y+46	; 0x2e
     29e:	cf a4       	ldd	r12, Y+47	; 0x2f
     2a0:	d8 a8       	ldd	r13, Y+48	; 0x30
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <__udivdi3+0x186>
     2a4:	aa 0c       	add	r10, r10
     2a6:	bb 1c       	adc	r11, r11
     2a8:	cc 1c       	adc	r12, r12
     2aa:	dd 1c       	adc	r13, r13
     2ac:	ea 94       	dec	r14
     2ae:	d2 f7       	brpl	.-12     	; 0x2a4 <__udivdi3+0x17e>
     2b0:	ad a6       	std	Y+45, r10	; 0x2d
     2b2:	be a6       	std	Y+46, r11	; 0x2e
     2b4:	cf a6       	std	Y+47, r12	; 0x2f
     2b6:	d8 aa       	std	Y+48, r13	; 0x30
     2b8:	62 01       	movw	r12, r4
     2ba:	ee 24       	eor	r14, r14
     2bc:	ff 24       	eor	r15, r15
     2be:	cd aa       	std	Y+53, r12	; 0x35
     2c0:	de aa       	std	Y+54, r13	; 0x36
     2c2:	ef aa       	std	Y+55, r14	; 0x37
     2c4:	f8 ae       	std	Y+56, r15	; 0x38
     2c6:	92 01       	movw	r18, r4
     2c8:	81 01       	movw	r16, r2
     2ca:	20 70       	andi	r18, 0x00	; 0
     2cc:	30 70       	andi	r19, 0x00	; 0
     2ce:	09 af       	std	Y+57, r16	; 0x39
     2d0:	1a af       	std	Y+58, r17	; 0x3a
     2d2:	2b af       	std	Y+59, r18	; 0x3b
     2d4:	3c af       	std	Y+60, r19	; 0x3c
     2d6:	c4 01       	movw	r24, r8
     2d8:	b3 01       	movw	r22, r6
     2da:	a7 01       	movw	r20, r14
     2dc:	96 01       	movw	r18, r12
     2de:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
     2e2:	7b 01       	movw	r14, r22
     2e4:	8c 01       	movw	r16, r24
     2e6:	c4 01       	movw	r24, r8
     2e8:	b3 01       	movw	r22, r6
     2ea:	2d a9       	ldd	r18, Y+53	; 0x35
     2ec:	3e a9       	ldd	r19, Y+54	; 0x36
     2ee:	4f a9       	ldd	r20, Y+55	; 0x37
     2f0:	58 ad       	ldd	r21, Y+56	; 0x38
     2f2:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
     2f6:	c9 01       	movw	r24, r18
     2f8:	da 01       	movw	r26, r20
     2fa:	3c 01       	movw	r6, r24
     2fc:	4d 01       	movw	r8, r26
     2fe:	c4 01       	movw	r24, r8
     300:	b3 01       	movw	r22, r6
     302:	29 ad       	ldd	r18, Y+57	; 0x39
     304:	3a ad       	ldd	r19, Y+58	; 0x3a
     306:	4b ad       	ldd	r20, Y+59	; 0x3b
     308:	5c ad       	ldd	r21, Y+60	; 0x3c
     30a:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
     30e:	9b 01       	movw	r18, r22
     310:	ac 01       	movw	r20, r24
     312:	87 01       	movw	r16, r14
     314:	ff 24       	eor	r15, r15
     316:	ee 24       	eor	r14, r14
     318:	ad a4       	ldd	r10, Y+45	; 0x2d
     31a:	be a4       	ldd	r11, Y+46	; 0x2e
     31c:	cf a4       	ldd	r12, Y+47	; 0x2f
     31e:	d8 a8       	ldd	r13, Y+48	; 0x30
     320:	c6 01       	movw	r24, r12
     322:	aa 27       	eor	r26, r26
     324:	bb 27       	eor	r27, r27
     326:	57 01       	movw	r10, r14
     328:	68 01       	movw	r12, r16
     32a:	a8 2a       	or	r10, r24
     32c:	b9 2a       	or	r11, r25
     32e:	ca 2a       	or	r12, r26
     330:	db 2a       	or	r13, r27
     332:	a2 16       	cp	r10, r18
     334:	b3 06       	cpc	r11, r19
     336:	c4 06       	cpc	r12, r20
     338:	d5 06       	cpc	r13, r21
     33a:	e0 f4       	brcc	.+56     	; 0x374 <__udivdi3+0x24e>
     33c:	08 94       	sec
     33e:	61 08       	sbc	r6, r1
     340:	71 08       	sbc	r7, r1
     342:	81 08       	sbc	r8, r1
     344:	91 08       	sbc	r9, r1
     346:	a2 0c       	add	r10, r2
     348:	b3 1c       	adc	r11, r3
     34a:	c4 1c       	adc	r12, r4
     34c:	d5 1c       	adc	r13, r5
     34e:	a2 14       	cp	r10, r2
     350:	b3 04       	cpc	r11, r3
     352:	c4 04       	cpc	r12, r4
     354:	d5 04       	cpc	r13, r5
     356:	70 f0       	brcs	.+28     	; 0x374 <__udivdi3+0x24e>
     358:	a2 16       	cp	r10, r18
     35a:	b3 06       	cpc	r11, r19
     35c:	c4 06       	cpc	r12, r20
     35e:	d5 06       	cpc	r13, r21
     360:	48 f4       	brcc	.+18     	; 0x374 <__udivdi3+0x24e>
     362:	08 94       	sec
     364:	61 08       	sbc	r6, r1
     366:	71 08       	sbc	r7, r1
     368:	81 08       	sbc	r8, r1
     36a:	91 08       	sbc	r9, r1
     36c:	a2 0c       	add	r10, r2
     36e:	b3 1c       	adc	r11, r3
     370:	c4 1c       	adc	r12, r4
     372:	d5 1c       	adc	r13, r5
     374:	a2 1a       	sub	r10, r18
     376:	b3 0a       	sbc	r11, r19
     378:	c4 0a       	sbc	r12, r20
     37a:	d5 0a       	sbc	r13, r21
     37c:	c6 01       	movw	r24, r12
     37e:	b5 01       	movw	r22, r10
     380:	2d a9       	ldd	r18, Y+53	; 0x35
     382:	3e a9       	ldd	r19, Y+54	; 0x36
     384:	4f a9       	ldd	r20, Y+55	; 0x37
     386:	58 ad       	ldd	r21, Y+56	; 0x38
     388:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
     38c:	7b 01       	movw	r14, r22
     38e:	8c 01       	movw	r16, r24
     390:	c6 01       	movw	r24, r12
     392:	b5 01       	movw	r22, r10
     394:	2d a9       	ldd	r18, Y+53	; 0x35
     396:	3e a9       	ldd	r19, Y+54	; 0x36
     398:	4f a9       	ldd	r20, Y+55	; 0x37
     39a:	58 ad       	ldd	r21, Y+56	; 0x38
     39c:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
     3a0:	c9 01       	movw	r24, r18
     3a2:	da 01       	movw	r26, r20
     3a4:	5c 01       	movw	r10, r24
     3a6:	6d 01       	movw	r12, r26
     3a8:	c6 01       	movw	r24, r12
     3aa:	b5 01       	movw	r22, r10
     3ac:	29 ad       	ldd	r18, Y+57	; 0x39
     3ae:	3a ad       	ldd	r19, Y+58	; 0x3a
     3b0:	4b ad       	ldd	r20, Y+59	; 0x3b
     3b2:	5c ad       	ldd	r21, Y+60	; 0x3c
     3b4:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
     3b8:	9b 01       	movw	r18, r22
     3ba:	ac 01       	movw	r20, r24
     3bc:	87 01       	movw	r16, r14
     3be:	ff 24       	eor	r15, r15
     3c0:	ee 24       	eor	r14, r14
     3c2:	8d a5       	ldd	r24, Y+45	; 0x2d
     3c4:	9e a5       	ldd	r25, Y+46	; 0x2e
     3c6:	af a5       	ldd	r26, Y+47	; 0x2f
     3c8:	b8 a9       	ldd	r27, Y+48	; 0x30
     3ca:	a0 70       	andi	r26, 0x00	; 0
     3cc:	b0 70       	andi	r27, 0x00	; 0
     3ce:	e8 2a       	or	r14, r24
     3d0:	f9 2a       	or	r15, r25
     3d2:	0a 2b       	or	r16, r26
     3d4:	1b 2b       	or	r17, r27
     3d6:	e2 16       	cp	r14, r18
     3d8:	f3 06       	cpc	r15, r19
     3da:	04 07       	cpc	r16, r20
     3dc:	15 07       	cpc	r17, r21
     3de:	c0 f4       	brcc	.+48     	; 0x410 <__udivdi3+0x2ea>
     3e0:	08 94       	sec
     3e2:	a1 08       	sbc	r10, r1
     3e4:	b1 08       	sbc	r11, r1
     3e6:	c1 08       	sbc	r12, r1
     3e8:	d1 08       	sbc	r13, r1
     3ea:	e2 0c       	add	r14, r2
     3ec:	f3 1c       	adc	r15, r3
     3ee:	04 1d       	adc	r16, r4
     3f0:	15 1d       	adc	r17, r5
     3f2:	e2 14       	cp	r14, r2
     3f4:	f3 04       	cpc	r15, r3
     3f6:	04 05       	cpc	r16, r4
     3f8:	15 05       	cpc	r17, r5
     3fa:	50 f0       	brcs	.+20     	; 0x410 <__udivdi3+0x2ea>
     3fc:	e2 16       	cp	r14, r18
     3fe:	f3 06       	cpc	r15, r19
     400:	04 07       	cpc	r16, r20
     402:	15 07       	cpc	r17, r21
     404:	28 f4       	brcc	.+10     	; 0x410 <__udivdi3+0x2ea>
     406:	08 94       	sec
     408:	a1 08       	sbc	r10, r1
     40a:	b1 08       	sbc	r11, r1
     40c:	c1 08       	sbc	r12, r1
     40e:	d1 08       	sbc	r13, r1
     410:	d3 01       	movw	r26, r6
     412:	99 27       	eor	r25, r25
     414:	88 27       	eor	r24, r24
     416:	86 01       	movw	r16, r12
     418:	75 01       	movw	r14, r10
     41a:	e8 2a       	or	r14, r24
     41c:	f9 2a       	or	r15, r25
     41e:	0a 2b       	or	r16, r26
     420:	1b 2b       	or	r17, r27
     422:	e9 aa       	std	Y+49, r14	; 0x31
     424:	fa aa       	std	Y+50, r15	; 0x32
     426:	0b ab       	std	Y+51, r16	; 0x33
     428:	1c ab       	std	Y+52, r17	; 0x34
     42a:	cf c4       	rjmp	.+2462   	; 0xdca <__udivdi3+0xca4>
     42c:	21 14       	cp	r2, r1
     42e:	31 04       	cpc	r3, r1
     430:	41 04       	cpc	r4, r1
     432:	51 04       	cpc	r5, r1
     434:	71 f4       	brne	.+28     	; 0x452 <__udivdi3+0x32c>
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	40 e0       	ldi	r20, 0x00	; 0
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
     44a:	c9 01       	movw	r24, r18
     44c:	da 01       	movw	r26, r20
     44e:	1c 01       	movw	r2, r24
     450:	2d 01       	movw	r4, r26
     452:	00 e0       	ldi	r16, 0x00	; 0
     454:	20 16       	cp	r2, r16
     456:	00 e0       	ldi	r16, 0x00	; 0
     458:	30 06       	cpc	r3, r16
     45a:	01 e0       	ldi	r16, 0x01	; 1
     45c:	40 06       	cpc	r4, r16
     45e:	00 e0       	ldi	r16, 0x00	; 0
     460:	50 06       	cpc	r5, r16
     462:	88 f4       	brcc	.+34     	; 0x486 <__udivdi3+0x360>
     464:	1f ef       	ldi	r17, 0xFF	; 255
     466:	21 16       	cp	r2, r17
     468:	31 04       	cpc	r3, r1
     46a:	41 04       	cpc	r4, r1
     46c:	51 04       	cpc	r5, r1
     46e:	31 f0       	breq	.+12     	; 0x47c <__udivdi3+0x356>
     470:	28 f0       	brcs	.+10     	; 0x47c <__udivdi3+0x356>
     472:	48 e0       	ldi	r20, 0x08	; 8
     474:	50 e0       	ldi	r21, 0x00	; 0
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	17 c0       	rjmp	.+46     	; 0x4aa <__udivdi3+0x384>
     47c:	40 e0       	ldi	r20, 0x00	; 0
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	12 c0       	rjmp	.+36     	; 0x4aa <__udivdi3+0x384>
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	22 16       	cp	r2, r18
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	32 06       	cpc	r3, r18
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	42 06       	cpc	r4, r18
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	52 06       	cpc	r5, r18
     496:	28 f0       	brcs	.+10     	; 0x4a2 <__udivdi3+0x37c>
     498:	48 e1       	ldi	r20, 0x18	; 24
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	04 c0       	rjmp	.+8      	; 0x4aa <__udivdi3+0x384>
     4a2:	40 e1       	ldi	r20, 0x10	; 16
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	d2 01       	movw	r26, r4
     4ac:	c1 01       	movw	r24, r2
     4ae:	04 2e       	mov	r0, r20
     4b0:	04 c0       	rjmp	.+8      	; 0x4ba <__udivdi3+0x394>
     4b2:	b6 95       	lsr	r27
     4b4:	a7 95       	ror	r26
     4b6:	97 95       	ror	r25
     4b8:	87 95       	ror	r24
     4ba:	0a 94       	dec	r0
     4bc:	d2 f7       	brpl	.-12     	; 0x4b2 <__udivdi3+0x38c>
     4be:	83 5c       	subi	r24, 0xC3	; 195
     4c0:	9e 4f       	sbci	r25, 0xFE	; 254
     4c2:	dc 01       	movw	r26, r24
     4c4:	2c 91       	ld	r18, X
     4c6:	e0 e2       	ldi	r30, 0x20	; 32
     4c8:	ee 2e       	mov	r14, r30
     4ca:	f1 2c       	mov	r15, r1
     4cc:	01 2d       	mov	r16, r1
     4ce:	11 2d       	mov	r17, r1
     4d0:	d8 01       	movw	r26, r16
     4d2:	c7 01       	movw	r24, r14
     4d4:	84 1b       	sub	r24, r20
     4d6:	95 0b       	sbc	r25, r21
     4d8:	a6 0b       	sbc	r26, r22
     4da:	b7 0b       	sbc	r27, r23
     4dc:	82 1b       	sub	r24, r18
     4de:	91 09       	sbc	r25, r1
     4e0:	a1 09       	sbc	r26, r1
     4e2:	b1 09       	sbc	r27, r1
     4e4:	00 97       	sbiw	r24, 0x00	; 0
     4e6:	a1 05       	cpc	r26, r1
     4e8:	b1 05       	cpc	r27, r1
     4ea:	61 f4       	brne	.+24     	; 0x504 <__udivdi3+0x3de>
     4ec:	64 01       	movw	r12, r8
     4ee:	53 01       	movw	r10, r6
     4f0:	a2 18       	sub	r10, r2
     4f2:	b3 08       	sbc	r11, r3
     4f4:	c4 08       	sbc	r12, r4
     4f6:	d5 08       	sbc	r13, r5
     4f8:	31 e0       	ldi	r19, 0x01	; 1
     4fa:	63 2e       	mov	r6, r19
     4fc:	71 2c       	mov	r7, r1
     4fe:	81 2c       	mov	r8, r1
     500:	91 2c       	mov	r9, r1
     502:	1e c1       	rjmp	.+572    	; 0x740 <__udivdi3+0x61a>
     504:	6f 96       	adiw	r28, 0x1f	; 31
     506:	8f af       	std	Y+63, r24	; 0x3f
     508:	6f 97       	sbiw	r28, 0x1f	; 31
     50a:	08 2e       	mov	r0, r24
     50c:	04 c0       	rjmp	.+8      	; 0x516 <__udivdi3+0x3f0>
     50e:	22 0c       	add	r2, r2
     510:	33 1c       	adc	r3, r3
     512:	44 1c       	adc	r4, r4
     514:	55 1c       	adc	r5, r5
     516:	0a 94       	dec	r0
     518:	d2 f7       	brpl	.-12     	; 0x50e <__udivdi3+0x3e8>
     51a:	ee 2d       	mov	r30, r14
     51c:	e8 1b       	sub	r30, r24
     51e:	64 01       	movw	r12, r8
     520:	53 01       	movw	r10, r6
     522:	0e 2e       	mov	r0, r30
     524:	04 c0       	rjmp	.+8      	; 0x52e <__udivdi3+0x408>
     526:	d6 94       	lsr	r13
     528:	c7 94       	ror	r12
     52a:	b7 94       	ror	r11
     52c:	a7 94       	ror	r10
     52e:	0a 94       	dec	r0
     530:	d2 f7       	brpl	.-12     	; 0x526 <__udivdi3+0x400>
     532:	a4 01       	movw	r20, r8
     534:	93 01       	movw	r18, r6
     536:	6f 96       	adiw	r28, 0x1f	; 31
     538:	0f ac       	ldd	r0, Y+63	; 0x3f
     53a:	6f 97       	sbiw	r28, 0x1f	; 31
     53c:	04 c0       	rjmp	.+8      	; 0x546 <__udivdi3+0x420>
     53e:	22 0f       	add	r18, r18
     540:	33 1f       	adc	r19, r19
     542:	44 1f       	adc	r20, r20
     544:	55 1f       	adc	r21, r21
     546:	0a 94       	dec	r0
     548:	d2 f7       	brpl	.-12     	; 0x53e <__udivdi3+0x418>
     54a:	6d a4       	ldd	r6, Y+45	; 0x2d
     54c:	7e a4       	ldd	r7, Y+46	; 0x2e
     54e:	8f a4       	ldd	r8, Y+47	; 0x2f
     550:	98 a8       	ldd	r9, Y+48	; 0x30
     552:	0e 2e       	mov	r0, r30
     554:	04 c0       	rjmp	.+8      	; 0x55e <__udivdi3+0x438>
     556:	96 94       	lsr	r9
     558:	87 94       	ror	r8
     55a:	77 94       	ror	r7
     55c:	67 94       	ror	r6
     55e:	0a 94       	dec	r0
     560:	d2 f7       	brpl	.-12     	; 0x556 <__udivdi3+0x430>
     562:	84 01       	movw	r16, r8
     564:	73 01       	movw	r14, r6
     566:	e2 2a       	or	r14, r18
     568:	f3 2a       	or	r15, r19
     56a:	04 2b       	or	r16, r20
     56c:	15 2b       	or	r17, r21
     56e:	e9 a6       	std	Y+41, r14	; 0x29
     570:	fa a6       	std	Y+42, r15	; 0x2a
     572:	0b a7       	std	Y+43, r16	; 0x2b
     574:	1c a7       	std	Y+44, r17	; 0x2c
     576:	32 01       	movw	r6, r4
     578:	88 24       	eor	r8, r8
     57a:	99 24       	eor	r9, r9
     57c:	92 01       	movw	r18, r4
     57e:	81 01       	movw	r16, r2
     580:	20 70       	andi	r18, 0x00	; 0
     582:	30 70       	andi	r19, 0x00	; 0
     584:	21 96       	adiw	r28, 0x01	; 1
     586:	0c af       	std	Y+60, r16	; 0x3c
     588:	1d af       	std	Y+61, r17	; 0x3d
     58a:	2e af       	std	Y+62, r18	; 0x3e
     58c:	3f af       	std	Y+63, r19	; 0x3f
     58e:	21 97       	sbiw	r28, 0x01	; 1
     590:	c6 01       	movw	r24, r12
     592:	b5 01       	movw	r22, r10
     594:	a4 01       	movw	r20, r8
     596:	93 01       	movw	r18, r6
     598:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
     59c:	7b 01       	movw	r14, r22
     59e:	8c 01       	movw	r16, r24
     5a0:	c6 01       	movw	r24, r12
     5a2:	b5 01       	movw	r22, r10
     5a4:	a4 01       	movw	r20, r8
     5a6:	93 01       	movw	r18, r6
     5a8:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
     5ac:	c9 01       	movw	r24, r18
     5ae:	da 01       	movw	r26, r20
     5b0:	25 96       	adiw	r28, 0x05	; 5
     5b2:	8c af       	std	Y+60, r24	; 0x3c
     5b4:	9d af       	std	Y+61, r25	; 0x3d
     5b6:	ae af       	std	Y+62, r26	; 0x3e
     5b8:	bf af       	std	Y+63, r27	; 0x3f
     5ba:	25 97       	sbiw	r28, 0x05	; 5
     5bc:	bc 01       	movw	r22, r24
     5be:	cd 01       	movw	r24, r26
     5c0:	21 96       	adiw	r28, 0x01	; 1
     5c2:	2c ad       	ldd	r18, Y+60	; 0x3c
     5c4:	3d ad       	ldd	r19, Y+61	; 0x3d
     5c6:	4e ad       	ldd	r20, Y+62	; 0x3e
     5c8:	5f ad       	ldd	r21, Y+63	; 0x3f
     5ca:	21 97       	sbiw	r28, 0x01	; 1
     5cc:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
     5d0:	9b 01       	movw	r18, r22
     5d2:	ac 01       	movw	r20, r24
     5d4:	87 01       	movw	r16, r14
     5d6:	ff 24       	eor	r15, r15
     5d8:	ee 24       	eor	r14, r14
     5da:	a9 a4       	ldd	r10, Y+41	; 0x29
     5dc:	ba a4       	ldd	r11, Y+42	; 0x2a
     5de:	cb a4       	ldd	r12, Y+43	; 0x2b
     5e0:	dc a4       	ldd	r13, Y+44	; 0x2c
     5e2:	c6 01       	movw	r24, r12
     5e4:	aa 27       	eor	r26, r26
     5e6:	bb 27       	eor	r27, r27
     5e8:	5c 01       	movw	r10, r24
     5ea:	6d 01       	movw	r12, r26
     5ec:	ae 28       	or	r10, r14
     5ee:	bf 28       	or	r11, r15
     5f0:	c0 2a       	or	r12, r16
     5f2:	d1 2a       	or	r13, r17
     5f4:	a2 16       	cp	r10, r18
     5f6:	b3 06       	cpc	r11, r19
     5f8:	c4 06       	cpc	r12, r20
     5fa:	d5 06       	cpc	r13, r21
     5fc:	60 f5       	brcc	.+88     	; 0x656 <__udivdi3+0x530>
     5fe:	25 96       	adiw	r28, 0x05	; 5
     600:	6c ad       	ldd	r22, Y+60	; 0x3c
     602:	7d ad       	ldd	r23, Y+61	; 0x3d
     604:	8e ad       	ldd	r24, Y+62	; 0x3e
     606:	9f ad       	ldd	r25, Y+63	; 0x3f
     608:	25 97       	sbiw	r28, 0x05	; 5
     60a:	61 50       	subi	r22, 0x01	; 1
     60c:	70 40       	sbci	r23, 0x00	; 0
     60e:	80 40       	sbci	r24, 0x00	; 0
     610:	90 40       	sbci	r25, 0x00	; 0
     612:	25 96       	adiw	r28, 0x05	; 5
     614:	6c af       	std	Y+60, r22	; 0x3c
     616:	7d af       	std	Y+61, r23	; 0x3d
     618:	8e af       	std	Y+62, r24	; 0x3e
     61a:	9f af       	std	Y+63, r25	; 0x3f
     61c:	25 97       	sbiw	r28, 0x05	; 5
     61e:	a2 0c       	add	r10, r2
     620:	b3 1c       	adc	r11, r3
     622:	c4 1c       	adc	r12, r4
     624:	d5 1c       	adc	r13, r5
     626:	a2 14       	cp	r10, r2
     628:	b3 04       	cpc	r11, r3
     62a:	c4 04       	cpc	r12, r4
     62c:	d5 04       	cpc	r13, r5
     62e:	98 f0       	brcs	.+38     	; 0x656 <__udivdi3+0x530>
     630:	a2 16       	cp	r10, r18
     632:	b3 06       	cpc	r11, r19
     634:	c4 06       	cpc	r12, r20
     636:	d5 06       	cpc	r13, r21
     638:	70 f4       	brcc	.+28     	; 0x656 <__udivdi3+0x530>
     63a:	61 50       	subi	r22, 0x01	; 1
     63c:	70 40       	sbci	r23, 0x00	; 0
     63e:	80 40       	sbci	r24, 0x00	; 0
     640:	90 40       	sbci	r25, 0x00	; 0
     642:	25 96       	adiw	r28, 0x05	; 5
     644:	6c af       	std	Y+60, r22	; 0x3c
     646:	7d af       	std	Y+61, r23	; 0x3d
     648:	8e af       	std	Y+62, r24	; 0x3e
     64a:	9f af       	std	Y+63, r25	; 0x3f
     64c:	25 97       	sbiw	r28, 0x05	; 5
     64e:	a2 0c       	add	r10, r2
     650:	b3 1c       	adc	r11, r3
     652:	c4 1c       	adc	r12, r4
     654:	d5 1c       	adc	r13, r5
     656:	a2 1a       	sub	r10, r18
     658:	b3 0a       	sbc	r11, r19
     65a:	c4 0a       	sbc	r12, r20
     65c:	d5 0a       	sbc	r13, r21
     65e:	c6 01       	movw	r24, r12
     660:	b5 01       	movw	r22, r10
     662:	a4 01       	movw	r20, r8
     664:	93 01       	movw	r18, r6
     666:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
     66a:	7b 01       	movw	r14, r22
     66c:	8c 01       	movw	r16, r24
     66e:	c6 01       	movw	r24, r12
     670:	b5 01       	movw	r22, r10
     672:	a4 01       	movw	r20, r8
     674:	93 01       	movw	r18, r6
     676:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
     67a:	c9 01       	movw	r24, r18
     67c:	da 01       	movw	r26, r20
     67e:	3c 01       	movw	r6, r24
     680:	4d 01       	movw	r8, r26
     682:	c4 01       	movw	r24, r8
     684:	b3 01       	movw	r22, r6
     686:	21 96       	adiw	r28, 0x01	; 1
     688:	2c ad       	ldd	r18, Y+60	; 0x3c
     68a:	3d ad       	ldd	r19, Y+61	; 0x3d
     68c:	4e ad       	ldd	r20, Y+62	; 0x3e
     68e:	5f ad       	ldd	r21, Y+63	; 0x3f
     690:	21 97       	sbiw	r28, 0x01	; 1
     692:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
     696:	9b 01       	movw	r18, r22
     698:	ac 01       	movw	r20, r24
     69a:	87 01       	movw	r16, r14
     69c:	ff 24       	eor	r15, r15
     69e:	ee 24       	eor	r14, r14
     6a0:	89 a5       	ldd	r24, Y+41	; 0x29
     6a2:	9a a5       	ldd	r25, Y+42	; 0x2a
     6a4:	ab a5       	ldd	r26, Y+43	; 0x2b
     6a6:	bc a5       	ldd	r27, Y+44	; 0x2c
     6a8:	a0 70       	andi	r26, 0x00	; 0
     6aa:	b0 70       	andi	r27, 0x00	; 0
     6ac:	57 01       	movw	r10, r14
     6ae:	68 01       	movw	r12, r16
     6b0:	a8 2a       	or	r10, r24
     6b2:	b9 2a       	or	r11, r25
     6b4:	ca 2a       	or	r12, r26
     6b6:	db 2a       	or	r13, r27
     6b8:	a2 16       	cp	r10, r18
     6ba:	b3 06       	cpc	r11, r19
     6bc:	c4 06       	cpc	r12, r20
     6be:	d5 06       	cpc	r13, r21
     6c0:	e0 f4       	brcc	.+56     	; 0x6fa <__udivdi3+0x5d4>
     6c2:	08 94       	sec
     6c4:	61 08       	sbc	r6, r1
     6c6:	71 08       	sbc	r7, r1
     6c8:	81 08       	sbc	r8, r1
     6ca:	91 08       	sbc	r9, r1
     6cc:	a2 0c       	add	r10, r2
     6ce:	b3 1c       	adc	r11, r3
     6d0:	c4 1c       	adc	r12, r4
     6d2:	d5 1c       	adc	r13, r5
     6d4:	a2 14       	cp	r10, r2
     6d6:	b3 04       	cpc	r11, r3
     6d8:	c4 04       	cpc	r12, r4
     6da:	d5 04       	cpc	r13, r5
     6dc:	70 f0       	brcs	.+28     	; 0x6fa <__udivdi3+0x5d4>
     6de:	a2 16       	cp	r10, r18
     6e0:	b3 06       	cpc	r11, r19
     6e2:	c4 06       	cpc	r12, r20
     6e4:	d5 06       	cpc	r13, r21
     6e6:	48 f4       	brcc	.+18     	; 0x6fa <__udivdi3+0x5d4>
     6e8:	08 94       	sec
     6ea:	61 08       	sbc	r6, r1
     6ec:	71 08       	sbc	r7, r1
     6ee:	81 08       	sbc	r8, r1
     6f0:	91 08       	sbc	r9, r1
     6f2:	a2 0c       	add	r10, r2
     6f4:	b3 1c       	adc	r11, r3
     6f6:	c4 1c       	adc	r12, r4
     6f8:	d5 1c       	adc	r13, r5
     6fa:	8d a5       	ldd	r24, Y+45	; 0x2d
     6fc:	9e a5       	ldd	r25, Y+46	; 0x2e
     6fe:	af a5       	ldd	r26, Y+47	; 0x2f
     700:	b8 a9       	ldd	r27, Y+48	; 0x30
     702:	6f 96       	adiw	r28, 0x1f	; 31
     704:	0f ac       	ldd	r0, Y+63	; 0x3f
     706:	6f 97       	sbiw	r28, 0x1f	; 31
     708:	04 c0       	rjmp	.+8      	; 0x712 <__udivdi3+0x5ec>
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	aa 1f       	adc	r26, r26
     710:	bb 1f       	adc	r27, r27
     712:	0a 94       	dec	r0
     714:	d2 f7       	brpl	.-12     	; 0x70a <__udivdi3+0x5e4>
     716:	8d a7       	std	Y+45, r24	; 0x2d
     718:	9e a7       	std	Y+46, r25	; 0x2e
     71a:	af a7       	std	Y+47, r26	; 0x2f
     71c:	b8 ab       	std	Y+48, r27	; 0x30
     71e:	a2 1a       	sub	r10, r18
     720:	b3 0a       	sbc	r11, r19
     722:	c4 0a       	sbc	r12, r20
     724:	d5 0a       	sbc	r13, r21
     726:	25 96       	adiw	r28, 0x05	; 5
     728:	ec ac       	ldd	r14, Y+60	; 0x3c
     72a:	fd ac       	ldd	r15, Y+61	; 0x3d
     72c:	0e ad       	ldd	r16, Y+62	; 0x3e
     72e:	1f ad       	ldd	r17, Y+63	; 0x3f
     730:	25 97       	sbiw	r28, 0x05	; 5
     732:	d7 01       	movw	r26, r14
     734:	99 27       	eor	r25, r25
     736:	88 27       	eor	r24, r24
     738:	68 2a       	or	r6, r24
     73a:	79 2a       	or	r7, r25
     73c:	8a 2a       	or	r8, r26
     73e:	9b 2a       	or	r9, r27
     740:	82 01       	movw	r16, r4
     742:	22 27       	eor	r18, r18
     744:	33 27       	eor	r19, r19
     746:	29 96       	adiw	r28, 0x09	; 9
     748:	0c af       	std	Y+60, r16	; 0x3c
     74a:	1d af       	std	Y+61, r17	; 0x3d
     74c:	2e af       	std	Y+62, r18	; 0x3e
     74e:	3f af       	std	Y+63, r19	; 0x3f
     750:	29 97       	sbiw	r28, 0x09	; 9
     752:	a2 01       	movw	r20, r4
     754:	91 01       	movw	r18, r2
     756:	40 70       	andi	r20, 0x00	; 0
     758:	50 70       	andi	r21, 0x00	; 0
     75a:	2d 96       	adiw	r28, 0x0d	; 13
     75c:	2c af       	std	Y+60, r18	; 0x3c
     75e:	3d af       	std	Y+61, r19	; 0x3d
     760:	4e af       	std	Y+62, r20	; 0x3e
     762:	5f af       	std	Y+63, r21	; 0x3f
     764:	2d 97       	sbiw	r28, 0x0d	; 13
     766:	c6 01       	movw	r24, r12
     768:	b5 01       	movw	r22, r10
     76a:	29 96       	adiw	r28, 0x09	; 9
     76c:	2c ad       	ldd	r18, Y+60	; 0x3c
     76e:	3d ad       	ldd	r19, Y+61	; 0x3d
     770:	4e ad       	ldd	r20, Y+62	; 0x3e
     772:	5f ad       	ldd	r21, Y+63	; 0x3f
     774:	29 97       	sbiw	r28, 0x09	; 9
     776:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
     77a:	7b 01       	movw	r14, r22
     77c:	8c 01       	movw	r16, r24
     77e:	c6 01       	movw	r24, r12
     780:	b5 01       	movw	r22, r10
     782:	29 96       	adiw	r28, 0x09	; 9
     784:	2c ad       	ldd	r18, Y+60	; 0x3c
     786:	3d ad       	ldd	r19, Y+61	; 0x3d
     788:	4e ad       	ldd	r20, Y+62	; 0x3e
     78a:	5f ad       	ldd	r21, Y+63	; 0x3f
     78c:	29 97       	sbiw	r28, 0x09	; 9
     78e:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
     792:	c9 01       	movw	r24, r18
     794:	da 01       	movw	r26, r20
     796:	61 96       	adiw	r28, 0x11	; 17
     798:	8c af       	std	Y+60, r24	; 0x3c
     79a:	9d af       	std	Y+61, r25	; 0x3d
     79c:	ae af       	std	Y+62, r26	; 0x3e
     79e:	bf af       	std	Y+63, r27	; 0x3f
     7a0:	61 97       	sbiw	r28, 0x11	; 17
     7a2:	bc 01       	movw	r22, r24
     7a4:	cd 01       	movw	r24, r26
     7a6:	2d 96       	adiw	r28, 0x0d	; 13
     7a8:	2c ad       	ldd	r18, Y+60	; 0x3c
     7aa:	3d ad       	ldd	r19, Y+61	; 0x3d
     7ac:	4e ad       	ldd	r20, Y+62	; 0x3e
     7ae:	5f ad       	ldd	r21, Y+63	; 0x3f
     7b0:	2d 97       	sbiw	r28, 0x0d	; 13
     7b2:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
     7b6:	9b 01       	movw	r18, r22
     7b8:	ac 01       	movw	r20, r24
     7ba:	87 01       	movw	r16, r14
     7bc:	ff 24       	eor	r15, r15
     7be:	ee 24       	eor	r14, r14
     7c0:	ad a4       	ldd	r10, Y+45	; 0x2d
     7c2:	be a4       	ldd	r11, Y+46	; 0x2e
     7c4:	cf a4       	ldd	r12, Y+47	; 0x2f
     7c6:	d8 a8       	ldd	r13, Y+48	; 0x30
     7c8:	c6 01       	movw	r24, r12
     7ca:	aa 27       	eor	r26, r26
     7cc:	bb 27       	eor	r27, r27
     7ce:	57 01       	movw	r10, r14
     7d0:	68 01       	movw	r12, r16
     7d2:	a8 2a       	or	r10, r24
     7d4:	b9 2a       	or	r11, r25
     7d6:	ca 2a       	or	r12, r26
     7d8:	db 2a       	or	r13, r27
     7da:	a2 16       	cp	r10, r18
     7dc:	b3 06       	cpc	r11, r19
     7de:	c4 06       	cpc	r12, r20
     7e0:	d5 06       	cpc	r13, r21
     7e2:	60 f5       	brcc	.+88     	; 0x83c <__udivdi3+0x716>
     7e4:	61 96       	adiw	r28, 0x11	; 17
     7e6:	6c ad       	ldd	r22, Y+60	; 0x3c
     7e8:	7d ad       	ldd	r23, Y+61	; 0x3d
     7ea:	8e ad       	ldd	r24, Y+62	; 0x3e
     7ec:	9f ad       	ldd	r25, Y+63	; 0x3f
     7ee:	61 97       	sbiw	r28, 0x11	; 17
     7f0:	61 50       	subi	r22, 0x01	; 1
     7f2:	70 40       	sbci	r23, 0x00	; 0
     7f4:	80 40       	sbci	r24, 0x00	; 0
     7f6:	90 40       	sbci	r25, 0x00	; 0
     7f8:	61 96       	adiw	r28, 0x11	; 17
     7fa:	6c af       	std	Y+60, r22	; 0x3c
     7fc:	7d af       	std	Y+61, r23	; 0x3d
     7fe:	8e af       	std	Y+62, r24	; 0x3e
     800:	9f af       	std	Y+63, r25	; 0x3f
     802:	61 97       	sbiw	r28, 0x11	; 17
     804:	a2 0c       	add	r10, r2
     806:	b3 1c       	adc	r11, r3
     808:	c4 1c       	adc	r12, r4
     80a:	d5 1c       	adc	r13, r5
     80c:	a2 14       	cp	r10, r2
     80e:	b3 04       	cpc	r11, r3
     810:	c4 04       	cpc	r12, r4
     812:	d5 04       	cpc	r13, r5
     814:	98 f0       	brcs	.+38     	; 0x83c <__udivdi3+0x716>
     816:	a2 16       	cp	r10, r18
     818:	b3 06       	cpc	r11, r19
     81a:	c4 06       	cpc	r12, r20
     81c:	d5 06       	cpc	r13, r21
     81e:	70 f4       	brcc	.+28     	; 0x83c <__udivdi3+0x716>
     820:	61 50       	subi	r22, 0x01	; 1
     822:	70 40       	sbci	r23, 0x00	; 0
     824:	80 40       	sbci	r24, 0x00	; 0
     826:	90 40       	sbci	r25, 0x00	; 0
     828:	61 96       	adiw	r28, 0x11	; 17
     82a:	6c af       	std	Y+60, r22	; 0x3c
     82c:	7d af       	std	Y+61, r23	; 0x3d
     82e:	8e af       	std	Y+62, r24	; 0x3e
     830:	9f af       	std	Y+63, r25	; 0x3f
     832:	61 97       	sbiw	r28, 0x11	; 17
     834:	a2 0c       	add	r10, r2
     836:	b3 1c       	adc	r11, r3
     838:	c4 1c       	adc	r12, r4
     83a:	d5 1c       	adc	r13, r5
     83c:	a2 1a       	sub	r10, r18
     83e:	b3 0a       	sbc	r11, r19
     840:	c4 0a       	sbc	r12, r20
     842:	d5 0a       	sbc	r13, r21
     844:	c6 01       	movw	r24, r12
     846:	b5 01       	movw	r22, r10
     848:	29 96       	adiw	r28, 0x09	; 9
     84a:	2c ad       	ldd	r18, Y+60	; 0x3c
     84c:	3d ad       	ldd	r19, Y+61	; 0x3d
     84e:	4e ad       	ldd	r20, Y+62	; 0x3e
     850:	5f ad       	ldd	r21, Y+63	; 0x3f
     852:	29 97       	sbiw	r28, 0x09	; 9
     854:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
     858:	7b 01       	movw	r14, r22
     85a:	8c 01       	movw	r16, r24
     85c:	c6 01       	movw	r24, r12
     85e:	b5 01       	movw	r22, r10
     860:	29 96       	adiw	r28, 0x09	; 9
     862:	2c ad       	ldd	r18, Y+60	; 0x3c
     864:	3d ad       	ldd	r19, Y+61	; 0x3d
     866:	4e ad       	ldd	r20, Y+62	; 0x3e
     868:	5f ad       	ldd	r21, Y+63	; 0x3f
     86a:	29 97       	sbiw	r28, 0x09	; 9
     86c:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
     870:	c9 01       	movw	r24, r18
     872:	da 01       	movw	r26, r20
     874:	5c 01       	movw	r10, r24
     876:	6d 01       	movw	r12, r26
     878:	c6 01       	movw	r24, r12
     87a:	b5 01       	movw	r22, r10
     87c:	2d 96       	adiw	r28, 0x0d	; 13
     87e:	2c ad       	ldd	r18, Y+60	; 0x3c
     880:	3d ad       	ldd	r19, Y+61	; 0x3d
     882:	4e ad       	ldd	r20, Y+62	; 0x3e
     884:	5f ad       	ldd	r21, Y+63	; 0x3f
     886:	2d 97       	sbiw	r28, 0x0d	; 13
     888:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
     88c:	9b 01       	movw	r18, r22
     88e:	ac 01       	movw	r20, r24
     890:	87 01       	movw	r16, r14
     892:	ff 24       	eor	r15, r15
     894:	ee 24       	eor	r14, r14
     896:	8d a5       	ldd	r24, Y+45	; 0x2d
     898:	9e a5       	ldd	r25, Y+46	; 0x2e
     89a:	af a5       	ldd	r26, Y+47	; 0x2f
     89c:	b8 a9       	ldd	r27, Y+48	; 0x30
     89e:	a0 70       	andi	r26, 0x00	; 0
     8a0:	b0 70       	andi	r27, 0x00	; 0
     8a2:	e8 2a       	or	r14, r24
     8a4:	f9 2a       	or	r15, r25
     8a6:	0a 2b       	or	r16, r26
     8a8:	1b 2b       	or	r17, r27
     8aa:	e2 16       	cp	r14, r18
     8ac:	f3 06       	cpc	r15, r19
     8ae:	04 07       	cpc	r16, r20
     8b0:	15 07       	cpc	r17, r21
     8b2:	c0 f4       	brcc	.+48     	; 0x8e4 <__udivdi3+0x7be>
     8b4:	08 94       	sec
     8b6:	a1 08       	sbc	r10, r1
     8b8:	b1 08       	sbc	r11, r1
     8ba:	c1 08       	sbc	r12, r1
     8bc:	d1 08       	sbc	r13, r1
     8be:	e2 0c       	add	r14, r2
     8c0:	f3 1c       	adc	r15, r3
     8c2:	04 1d       	adc	r16, r4
     8c4:	15 1d       	adc	r17, r5
     8c6:	e2 14       	cp	r14, r2
     8c8:	f3 04       	cpc	r15, r3
     8ca:	04 05       	cpc	r16, r4
     8cc:	15 05       	cpc	r17, r5
     8ce:	50 f0       	brcs	.+20     	; 0x8e4 <__udivdi3+0x7be>
     8d0:	e2 16       	cp	r14, r18
     8d2:	f3 06       	cpc	r15, r19
     8d4:	04 07       	cpc	r16, r20
     8d6:	15 07       	cpc	r17, r21
     8d8:	28 f4       	brcc	.+10     	; 0x8e4 <__udivdi3+0x7be>
     8da:	08 94       	sec
     8dc:	a1 08       	sbc	r10, r1
     8de:	b1 08       	sbc	r11, r1
     8e0:	c1 08       	sbc	r12, r1
     8e2:	d1 08       	sbc	r13, r1
     8e4:	61 96       	adiw	r28, 0x11	; 17
     8e6:	ec ac       	ldd	r14, Y+60	; 0x3c
     8e8:	fd ac       	ldd	r15, Y+61	; 0x3d
     8ea:	0e ad       	ldd	r16, Y+62	; 0x3e
     8ec:	1f ad       	ldd	r17, Y+63	; 0x3f
     8ee:	61 97       	sbiw	r28, 0x11	; 17
     8f0:	d7 01       	movw	r26, r14
     8f2:	99 27       	eor	r25, r25
     8f4:	88 27       	eor	r24, r24
     8f6:	96 01       	movw	r18, r12
     8f8:	85 01       	movw	r16, r10
     8fa:	08 2b       	or	r16, r24
     8fc:	19 2b       	or	r17, r25
     8fe:	2a 2b       	or	r18, r26
     900:	3b 2b       	or	r19, r27
     902:	09 ab       	std	Y+49, r16	; 0x31
     904:	1a ab       	std	Y+50, r17	; 0x32
     906:	2b ab       	std	Y+51, r18	; 0x33
     908:	3c ab       	std	Y+52, r19	; 0x34
     90a:	62 c2       	rjmp	.+1220   	; 0xdd0 <__udivdi3+0xcaa>
     90c:	6e 14       	cp	r6, r14
     90e:	7f 04       	cpc	r7, r15
     910:	80 06       	cpc	r8, r16
     912:	91 06       	cpc	r9, r17
     914:	08 f4       	brcc	.+2      	; 0x918 <__udivdi3+0x7f2>
     916:	51 c2       	rjmp	.+1186   	; 0xdba <__udivdi3+0xc94>
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	e2 16       	cp	r14, r18
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	f2 06       	cpc	r15, r18
     920:	21 e0       	ldi	r18, 0x01	; 1
     922:	02 07       	cpc	r16, r18
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	12 07       	cpc	r17, r18
     928:	88 f4       	brcc	.+34     	; 0x94c <__udivdi3+0x826>
     92a:	3f ef       	ldi	r19, 0xFF	; 255
     92c:	e3 16       	cp	r14, r19
     92e:	f1 04       	cpc	r15, r1
     930:	01 05       	cpc	r16, r1
     932:	11 05       	cpc	r17, r1
     934:	31 f0       	breq	.+12     	; 0x942 <__udivdi3+0x81c>
     936:	28 f0       	brcs	.+10     	; 0x942 <__udivdi3+0x81c>
     938:	48 e0       	ldi	r20, 0x08	; 8
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	17 c0       	rjmp	.+46     	; 0x970 <__udivdi3+0x84a>
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	12 c0       	rjmp	.+36     	; 0x970 <__udivdi3+0x84a>
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	e4 16       	cp	r14, r20
     950:	40 e0       	ldi	r20, 0x00	; 0
     952:	f4 06       	cpc	r15, r20
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	04 07       	cpc	r16, r20
     958:	41 e0       	ldi	r20, 0x01	; 1
     95a:	14 07       	cpc	r17, r20
     95c:	28 f0       	brcs	.+10     	; 0x968 <__udivdi3+0x842>
     95e:	48 e1       	ldi	r20, 0x18	; 24
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	04 c0       	rjmp	.+8      	; 0x970 <__udivdi3+0x84a>
     968:	40 e1       	ldi	r20, 0x10	; 16
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	d8 01       	movw	r26, r16
     972:	c7 01       	movw	r24, r14
     974:	04 2e       	mov	r0, r20
     976:	04 c0       	rjmp	.+8      	; 0x980 <__udivdi3+0x85a>
     978:	b6 95       	lsr	r27
     97a:	a7 95       	ror	r26
     97c:	97 95       	ror	r25
     97e:	87 95       	ror	r24
     980:	0a 94       	dec	r0
     982:	d2 f7       	brpl	.-12     	; 0x978 <__udivdi3+0x852>
     984:	83 5c       	subi	r24, 0xC3	; 195
     986:	9e 4f       	sbci	r25, 0xFE	; 254
     988:	dc 01       	movw	r26, r24
     98a:	2c 91       	ld	r18, X
     98c:	30 e2       	ldi	r19, 0x20	; 32
     98e:	a3 2e       	mov	r10, r19
     990:	b1 2c       	mov	r11, r1
     992:	c1 2c       	mov	r12, r1
     994:	d1 2c       	mov	r13, r1
     996:	d6 01       	movw	r26, r12
     998:	c5 01       	movw	r24, r10
     99a:	84 1b       	sub	r24, r20
     99c:	95 0b       	sbc	r25, r21
     99e:	a6 0b       	sbc	r26, r22
     9a0:	b7 0b       	sbc	r27, r23
     9a2:	82 1b       	sub	r24, r18
     9a4:	91 09       	sbc	r25, r1
     9a6:	a1 09       	sbc	r26, r1
     9a8:	b1 09       	sbc	r27, r1
     9aa:	00 97       	sbiw	r24, 0x00	; 0
     9ac:	a1 05       	cpc	r26, r1
     9ae:	b1 05       	cpc	r27, r1
     9b0:	89 f4       	brne	.+34     	; 0x9d4 <__udivdi3+0x8ae>
     9b2:	e6 14       	cp	r14, r6
     9b4:	f7 04       	cpc	r15, r7
     9b6:	08 05       	cpc	r16, r8
     9b8:	19 05       	cpc	r17, r9
     9ba:	08 f4       	brcc	.+2      	; 0x9be <__udivdi3+0x898>
     9bc:	f2 c1       	rjmp	.+996    	; 0xda2 <__udivdi3+0xc7c>
     9be:	6d a4       	ldd	r6, Y+45	; 0x2d
     9c0:	7e a4       	ldd	r7, Y+46	; 0x2e
     9c2:	8f a4       	ldd	r8, Y+47	; 0x2f
     9c4:	98 a8       	ldd	r9, Y+48	; 0x30
     9c6:	62 14       	cp	r6, r2
     9c8:	73 04       	cpc	r7, r3
     9ca:	84 04       	cpc	r8, r4
     9cc:	95 04       	cpc	r9, r5
     9ce:	08 f0       	brcs	.+2      	; 0x9d2 <__udivdi3+0x8ac>
     9d0:	e8 c1       	rjmp	.+976    	; 0xda2 <__udivdi3+0xc7c>
     9d2:	f3 c1       	rjmp	.+998    	; 0xdba <__udivdi3+0xc94>
     9d4:	6e 96       	adiw	r28, 0x1e	; 30
     9d6:	8f af       	std	Y+63, r24	; 0x3f
     9d8:	6e 97       	sbiw	r28, 0x1e	; 30
     9da:	08 2e       	mov	r0, r24
     9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <__udivdi3+0x8c0>
     9de:	ee 0c       	add	r14, r14
     9e0:	ff 1c       	adc	r15, r15
     9e2:	00 1f       	adc	r16, r16
     9e4:	11 1f       	adc	r17, r17
     9e6:	0a 94       	dec	r0
     9e8:	d2 f7       	brpl	.-12     	; 0x9de <__udivdi3+0x8b8>
     9ea:	6a 2d       	mov	r22, r10
     9ec:	68 1b       	sub	r22, r24
     9ee:	d2 01       	movw	r26, r4
     9f0:	c1 01       	movw	r24, r2
     9f2:	06 2e       	mov	r0, r22
     9f4:	04 c0       	rjmp	.+8      	; 0x9fe <__udivdi3+0x8d8>
     9f6:	b6 95       	lsr	r27
     9f8:	a7 95       	ror	r26
     9fa:	97 95       	ror	r25
     9fc:	87 95       	ror	r24
     9fe:	0a 94       	dec	r0
     a00:	d2 f7       	brpl	.-12     	; 0x9f6 <__udivdi3+0x8d0>
     a02:	5c 01       	movw	r10, r24
     a04:	6d 01       	movw	r12, r26
     a06:	ae 28       	or	r10, r14
     a08:	bf 28       	or	r11, r15
     a0a:	c0 2a       	or	r12, r16
     a0c:	d1 2a       	or	r13, r17
     a0e:	ad a2       	std	Y+37, r10	; 0x25
     a10:	be a2       	std	Y+38, r11	; 0x26
     a12:	cf a2       	std	Y+39, r12	; 0x27
     a14:	d8 a6       	std	Y+40, r13	; 0x28
     a16:	72 01       	movw	r14, r4
     a18:	61 01       	movw	r12, r2
     a1a:	6e 96       	adiw	r28, 0x1e	; 30
     a1c:	0f ac       	ldd	r0, Y+63	; 0x3f
     a1e:	6e 97       	sbiw	r28, 0x1e	; 30
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <__udivdi3+0x904>
     a22:	cc 0c       	add	r12, r12
     a24:	dd 1c       	adc	r13, r13
     a26:	ee 1c       	adc	r14, r14
     a28:	ff 1c       	adc	r15, r15
     a2a:	0a 94       	dec	r0
     a2c:	d2 f7       	brpl	.-12     	; 0xa22 <__udivdi3+0x8fc>
     a2e:	c9 a2       	std	Y+33, r12	; 0x21
     a30:	da a2       	std	Y+34, r13	; 0x22
     a32:	eb a2       	std	Y+35, r14	; 0x23
     a34:	fc a2       	std	Y+36, r15	; 0x24
     a36:	64 01       	movw	r12, r8
     a38:	53 01       	movw	r10, r6
     a3a:	06 2e       	mov	r0, r22
     a3c:	04 c0       	rjmp	.+8      	; 0xa46 <__udivdi3+0x920>
     a3e:	d6 94       	lsr	r13
     a40:	c7 94       	ror	r12
     a42:	b7 94       	ror	r11
     a44:	a7 94       	ror	r10
     a46:	0a 94       	dec	r0
     a48:	d2 f7       	brpl	.-12     	; 0xa3e <__udivdi3+0x918>
     a4a:	d4 01       	movw	r26, r8
     a4c:	c3 01       	movw	r24, r6
     a4e:	6e 96       	adiw	r28, 0x1e	; 30
     a50:	0f ac       	ldd	r0, Y+63	; 0x3f
     a52:	6e 97       	sbiw	r28, 0x1e	; 30
     a54:	04 c0       	rjmp	.+8      	; 0xa5e <__udivdi3+0x938>
     a56:	88 0f       	add	r24, r24
     a58:	99 1f       	adc	r25, r25
     a5a:	aa 1f       	adc	r26, r26
     a5c:	bb 1f       	adc	r27, r27
     a5e:	0a 94       	dec	r0
     a60:	d2 f7       	brpl	.-12     	; 0xa56 <__udivdi3+0x930>
     a62:	ed a4       	ldd	r14, Y+45	; 0x2d
     a64:	fe a4       	ldd	r15, Y+46	; 0x2e
     a66:	0f a5       	ldd	r16, Y+47	; 0x2f
     a68:	18 a9       	ldd	r17, Y+48	; 0x30
     a6a:	04 c0       	rjmp	.+8      	; 0xa74 <__udivdi3+0x94e>
     a6c:	16 95       	lsr	r17
     a6e:	07 95       	ror	r16
     a70:	f7 94       	ror	r15
     a72:	e7 94       	ror	r14
     a74:	6a 95       	dec	r22
     a76:	d2 f7       	brpl	.-12     	; 0xa6c <__udivdi3+0x946>
     a78:	37 01       	movw	r6, r14
     a7a:	48 01       	movw	r8, r16
     a7c:	68 2a       	or	r6, r24
     a7e:	79 2a       	or	r7, r25
     a80:	8a 2a       	or	r8, r26
     a82:	9b 2a       	or	r9, r27
     a84:	6d 8e       	std	Y+29, r6	; 0x1d
     a86:	7e 8e       	std	Y+30, r7	; 0x1e
     a88:	8f 8e       	std	Y+31, r8	; 0x1f
     a8a:	98 a2       	std	Y+32, r9	; 0x20
     a8c:	ed a0       	ldd	r14, Y+37	; 0x25
     a8e:	fe a0       	ldd	r15, Y+38	; 0x26
     a90:	0f a1       	ldd	r16, Y+39	; 0x27
     a92:	18 a5       	ldd	r17, Y+40	; 0x28
     a94:	38 01       	movw	r6, r16
     a96:	88 24       	eor	r8, r8
     a98:	99 24       	eor	r9, r9
     a9a:	98 01       	movw	r18, r16
     a9c:	87 01       	movw	r16, r14
     a9e:	20 70       	andi	r18, 0x00	; 0
     aa0:	30 70       	andi	r19, 0x00	; 0
     aa2:	65 96       	adiw	r28, 0x15	; 21
     aa4:	0c af       	std	Y+60, r16	; 0x3c
     aa6:	1d af       	std	Y+61, r17	; 0x3d
     aa8:	2e af       	std	Y+62, r18	; 0x3e
     aaa:	3f af       	std	Y+63, r19	; 0x3f
     aac:	65 97       	sbiw	r28, 0x15	; 21
     aae:	c6 01       	movw	r24, r12
     ab0:	b5 01       	movw	r22, r10
     ab2:	a4 01       	movw	r20, r8
     ab4:	93 01       	movw	r18, r6
     ab6:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
     aba:	7b 01       	movw	r14, r22
     abc:	8c 01       	movw	r16, r24
     abe:	c6 01       	movw	r24, r12
     ac0:	b5 01       	movw	r22, r10
     ac2:	a4 01       	movw	r20, r8
     ac4:	93 01       	movw	r18, r6
     ac6:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
     aca:	c9 01       	movw	r24, r18
     acc:	da 01       	movw	r26, r20
     ace:	1c 01       	movw	r2, r24
     ad0:	2d 01       	movw	r4, r26
     ad2:	c2 01       	movw	r24, r4
     ad4:	b1 01       	movw	r22, r2
     ad6:	65 96       	adiw	r28, 0x15	; 21
     ad8:	2c ad       	ldd	r18, Y+60	; 0x3c
     ada:	3d ad       	ldd	r19, Y+61	; 0x3d
     adc:	4e ad       	ldd	r20, Y+62	; 0x3e
     ade:	5f ad       	ldd	r21, Y+63	; 0x3f
     ae0:	65 97       	sbiw	r28, 0x15	; 21
     ae2:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	87 01       	movw	r16, r14
     aec:	ff 24       	eor	r15, r15
     aee:	ee 24       	eor	r14, r14
     af0:	ad 8c       	ldd	r10, Y+29	; 0x1d
     af2:	be 8c       	ldd	r11, Y+30	; 0x1e
     af4:	cf 8c       	ldd	r12, Y+31	; 0x1f
     af6:	d8 a0       	ldd	r13, Y+32	; 0x20
     af8:	c6 01       	movw	r24, r12
     afa:	aa 27       	eor	r26, r26
     afc:	bb 27       	eor	r27, r27
     afe:	57 01       	movw	r10, r14
     b00:	68 01       	movw	r12, r16
     b02:	a8 2a       	or	r10, r24
     b04:	b9 2a       	or	r11, r25
     b06:	ca 2a       	or	r12, r26
     b08:	db 2a       	or	r13, r27
     b0a:	a2 16       	cp	r10, r18
     b0c:	b3 06       	cpc	r11, r19
     b0e:	c4 06       	cpc	r12, r20
     b10:	d5 06       	cpc	r13, r21
     b12:	00 f5       	brcc	.+64     	; 0xb54 <__udivdi3+0xa2e>
     b14:	08 94       	sec
     b16:	21 08       	sbc	r2, r1
     b18:	31 08       	sbc	r3, r1
     b1a:	41 08       	sbc	r4, r1
     b1c:	51 08       	sbc	r5, r1
     b1e:	ed a0       	ldd	r14, Y+37	; 0x25
     b20:	fe a0       	ldd	r15, Y+38	; 0x26
     b22:	0f a1       	ldd	r16, Y+39	; 0x27
     b24:	18 a5       	ldd	r17, Y+40	; 0x28
     b26:	ae 0c       	add	r10, r14
     b28:	bf 1c       	adc	r11, r15
     b2a:	c0 1e       	adc	r12, r16
     b2c:	d1 1e       	adc	r13, r17
     b2e:	ae 14       	cp	r10, r14
     b30:	bf 04       	cpc	r11, r15
     b32:	c0 06       	cpc	r12, r16
     b34:	d1 06       	cpc	r13, r17
     b36:	70 f0       	brcs	.+28     	; 0xb54 <__udivdi3+0xa2e>
     b38:	a2 16       	cp	r10, r18
     b3a:	b3 06       	cpc	r11, r19
     b3c:	c4 06       	cpc	r12, r20
     b3e:	d5 06       	cpc	r13, r21
     b40:	48 f4       	brcc	.+18     	; 0xb54 <__udivdi3+0xa2e>
     b42:	08 94       	sec
     b44:	21 08       	sbc	r2, r1
     b46:	31 08       	sbc	r3, r1
     b48:	41 08       	sbc	r4, r1
     b4a:	51 08       	sbc	r5, r1
     b4c:	ae 0c       	add	r10, r14
     b4e:	bf 1c       	adc	r11, r15
     b50:	c0 1e       	adc	r12, r16
     b52:	d1 1e       	adc	r13, r17
     b54:	a2 1a       	sub	r10, r18
     b56:	b3 0a       	sbc	r11, r19
     b58:	c4 0a       	sbc	r12, r20
     b5a:	d5 0a       	sbc	r13, r21
     b5c:	c6 01       	movw	r24, r12
     b5e:	b5 01       	movw	r22, r10
     b60:	a4 01       	movw	r20, r8
     b62:	93 01       	movw	r18, r6
     b64:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	c6 01       	movw	r24, r12
     b6e:	b5 01       	movw	r22, r10
     b70:	a4 01       	movw	r20, r8
     b72:	93 01       	movw	r18, r6
     b74:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
     b78:	c9 01       	movw	r24, r18
     b7a:	da 01       	movw	r26, r20
     b7c:	3c 01       	movw	r6, r24
     b7e:	4d 01       	movw	r8, r26
     b80:	c4 01       	movw	r24, r8
     b82:	b3 01       	movw	r22, r6
     b84:	65 96       	adiw	r28, 0x15	; 21
     b86:	2c ad       	ldd	r18, Y+60	; 0x3c
     b88:	3d ad       	ldd	r19, Y+61	; 0x3d
     b8a:	4e ad       	ldd	r20, Y+62	; 0x3e
     b8c:	5f ad       	ldd	r21, Y+63	; 0x3f
     b8e:	65 97       	sbiw	r28, 0x15	; 21
     b90:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
     b94:	9b 01       	movw	r18, r22
     b96:	ac 01       	movw	r20, r24
     b98:	87 01       	movw	r16, r14
     b9a:	ff 24       	eor	r15, r15
     b9c:	ee 24       	eor	r14, r14
     b9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ba0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ba2:	af 8d       	ldd	r26, Y+31	; 0x1f
     ba4:	b8 a1       	ldd	r27, Y+32	; 0x20
     ba6:	a0 70       	andi	r26, 0x00	; 0
     ba8:	b0 70       	andi	r27, 0x00	; 0
     baa:	57 01       	movw	r10, r14
     bac:	68 01       	movw	r12, r16
     bae:	a8 2a       	or	r10, r24
     bb0:	b9 2a       	or	r11, r25
     bb2:	ca 2a       	or	r12, r26
     bb4:	db 2a       	or	r13, r27
     bb6:	a2 16       	cp	r10, r18
     bb8:	b3 06       	cpc	r11, r19
     bba:	c4 06       	cpc	r12, r20
     bbc:	d5 06       	cpc	r13, r21
     bbe:	00 f5       	brcc	.+64     	; 0xc00 <__udivdi3+0xada>
     bc0:	08 94       	sec
     bc2:	61 08       	sbc	r6, r1
     bc4:	71 08       	sbc	r7, r1
     bc6:	81 08       	sbc	r8, r1
     bc8:	91 08       	sbc	r9, r1
     bca:	6d a1       	ldd	r22, Y+37	; 0x25
     bcc:	7e a1       	ldd	r23, Y+38	; 0x26
     bce:	8f a1       	ldd	r24, Y+39	; 0x27
     bd0:	98 a5       	ldd	r25, Y+40	; 0x28
     bd2:	a6 0e       	add	r10, r22
     bd4:	b7 1e       	adc	r11, r23
     bd6:	c8 1e       	adc	r12, r24
     bd8:	d9 1e       	adc	r13, r25
     bda:	a6 16       	cp	r10, r22
     bdc:	b7 06       	cpc	r11, r23
     bde:	c8 06       	cpc	r12, r24
     be0:	d9 06       	cpc	r13, r25
     be2:	70 f0       	brcs	.+28     	; 0xc00 <__udivdi3+0xada>
     be4:	a2 16       	cp	r10, r18
     be6:	b3 06       	cpc	r11, r19
     be8:	c4 06       	cpc	r12, r20
     bea:	d5 06       	cpc	r13, r21
     bec:	48 f4       	brcc	.+18     	; 0xc00 <__udivdi3+0xada>
     bee:	08 94       	sec
     bf0:	61 08       	sbc	r6, r1
     bf2:	71 08       	sbc	r7, r1
     bf4:	81 08       	sbc	r8, r1
     bf6:	91 08       	sbc	r9, r1
     bf8:	a6 0e       	add	r10, r22
     bfa:	b7 1e       	adc	r11, r23
     bfc:	c8 1e       	adc	r12, r24
     bfe:	d9 1e       	adc	r13, r25
     c00:	d6 01       	movw	r26, r12
     c02:	c5 01       	movw	r24, r10
     c04:	82 1b       	sub	r24, r18
     c06:	93 0b       	sbc	r25, r19
     c08:	a4 0b       	sbc	r26, r20
     c0a:	b5 0b       	sbc	r27, r21
     c0c:	89 8f       	std	Y+25, r24	; 0x19
     c0e:	9a 8f       	std	Y+26, r25	; 0x1a
     c10:	ab 8f       	std	Y+27, r26	; 0x1b
     c12:	bc 8f       	std	Y+28, r27	; 0x1c
     c14:	d1 01       	movw	r26, r2
     c16:	99 27       	eor	r25, r25
     c18:	88 27       	eor	r24, r24
     c1a:	64 01       	movw	r12, r8
     c1c:	53 01       	movw	r10, r6
     c1e:	a8 2a       	or	r10, r24
     c20:	b9 2a       	or	r11, r25
     c22:	ca 2a       	or	r12, r26
     c24:	db 2a       	or	r13, r27
     c26:	a9 aa       	std	Y+49, r10	; 0x31
     c28:	ba aa       	std	Y+50, r11	; 0x32
     c2a:	cb aa       	std	Y+51, r12	; 0x33
     c2c:	dc aa       	std	Y+52, r13	; 0x34
     c2e:	86 01       	movw	r16, r12
     c30:	75 01       	movw	r14, r10
     c32:	2f ef       	ldi	r18, 0xFF	; 255
     c34:	3f ef       	ldi	r19, 0xFF	; 255
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	e2 22       	and	r14, r18
     c3c:	f3 22       	and	r15, r19
     c3e:	04 23       	and	r16, r20
     c40:	15 23       	and	r17, r21
     c42:	a6 01       	movw	r20, r12
     c44:	66 27       	eor	r22, r22
     c46:	77 27       	eor	r23, r23
     c48:	6d 96       	adiw	r28, 0x1d	; 29
     c4a:	4c af       	std	Y+60, r20	; 0x3c
     c4c:	5d af       	std	Y+61, r21	; 0x3d
     c4e:	6e af       	std	Y+62, r22	; 0x3e
     c50:	7f af       	std	Y+63, r23	; 0x3f
     c52:	6d 97       	sbiw	r28, 0x1d	; 29
     c54:	a9 a0       	ldd	r10, Y+33	; 0x21
     c56:	ba a0       	ldd	r11, Y+34	; 0x22
     c58:	cb a0       	ldd	r12, Y+35	; 0x23
     c5a:	dc a0       	ldd	r13, Y+36	; 0x24
     c5c:	6f ef       	ldi	r22, 0xFF	; 255
     c5e:	7f ef       	ldi	r23, 0xFF	; 255
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	a6 22       	and	r10, r22
     c66:	b7 22       	and	r11, r23
     c68:	c8 22       	and	r12, r24
     c6a:	d9 22       	and	r13, r25
     c6c:	89 a1       	ldd	r24, Y+33	; 0x21
     c6e:	9a a1       	ldd	r25, Y+34	; 0x22
     c70:	ab a1       	ldd	r26, Y+35	; 0x23
     c72:	bc a1       	ldd	r27, Y+36	; 0x24
     c74:	1d 01       	movw	r2, r26
     c76:	44 24       	eor	r4, r4
     c78:	55 24       	eor	r5, r5
     c7a:	c8 01       	movw	r24, r16
     c7c:	b7 01       	movw	r22, r14
     c7e:	a6 01       	movw	r20, r12
     c80:	95 01       	movw	r18, r10
     c82:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
     c86:	69 96       	adiw	r28, 0x19	; 25
     c88:	6c af       	std	Y+60, r22	; 0x3c
     c8a:	7d af       	std	Y+61, r23	; 0x3d
     c8c:	8e af       	std	Y+62, r24	; 0x3e
     c8e:	9f af       	std	Y+63, r25	; 0x3f
     c90:	69 97       	sbiw	r28, 0x19	; 25
     c92:	c8 01       	movw	r24, r16
     c94:	b7 01       	movw	r22, r14
     c96:	a2 01       	movw	r20, r4
     c98:	91 01       	movw	r18, r2
     c9a:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
     c9e:	3b 01       	movw	r6, r22
     ca0:	4c 01       	movw	r8, r24
     ca2:	6d 96       	adiw	r28, 0x1d	; 29
     ca4:	6c ad       	ldd	r22, Y+60	; 0x3c
     ca6:	7d ad       	ldd	r23, Y+61	; 0x3d
     ca8:	8e ad       	ldd	r24, Y+62	; 0x3e
     caa:	9f ad       	ldd	r25, Y+63	; 0x3f
     cac:	6d 97       	sbiw	r28, 0x1d	; 29
     cae:	a6 01       	movw	r20, r12
     cb0:	95 01       	movw	r18, r10
     cb2:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
     cb6:	7b 01       	movw	r14, r22
     cb8:	8c 01       	movw	r16, r24
     cba:	6d 96       	adiw	r28, 0x1d	; 29
     cbc:	6c ad       	ldd	r22, Y+60	; 0x3c
     cbe:	7d ad       	ldd	r23, Y+61	; 0x3d
     cc0:	8e ad       	ldd	r24, Y+62	; 0x3e
     cc2:	9f ad       	ldd	r25, Y+63	; 0x3f
     cc4:	6d 97       	sbiw	r28, 0x1d	; 29
     cc6:	a2 01       	movw	r20, r4
     cc8:	91 01       	movw	r18, r2
     cca:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
     cce:	5b 01       	movw	r10, r22
     cd0:	6c 01       	movw	r12, r24
     cd2:	a8 01       	movw	r20, r16
     cd4:	97 01       	movw	r18, r14
     cd6:	26 0d       	add	r18, r6
     cd8:	37 1d       	adc	r19, r7
     cda:	48 1d       	adc	r20, r8
     cdc:	59 1d       	adc	r21, r9
     cde:	69 96       	adiw	r28, 0x19	; 25
     ce0:	6c ac       	ldd	r6, Y+60	; 0x3c
     ce2:	7d ac       	ldd	r7, Y+61	; 0x3d
     ce4:	8e ac       	ldd	r8, Y+62	; 0x3e
     ce6:	9f ac       	ldd	r9, Y+63	; 0x3f
     ce8:	69 97       	sbiw	r28, 0x19	; 25
     cea:	c4 01       	movw	r24, r8
     cec:	aa 27       	eor	r26, r26
     cee:	bb 27       	eor	r27, r27
     cf0:	28 0f       	add	r18, r24
     cf2:	39 1f       	adc	r19, r25
     cf4:	4a 1f       	adc	r20, r26
     cf6:	5b 1f       	adc	r21, r27
     cf8:	2e 15       	cp	r18, r14
     cfa:	3f 05       	cpc	r19, r15
     cfc:	40 07       	cpc	r20, r16
     cfe:	51 07       	cpc	r21, r17
     d00:	48 f4       	brcc	.+18     	; 0xd14 <__udivdi3+0xbee>
     d02:	e1 2c       	mov	r14, r1
     d04:	f1 2c       	mov	r15, r1
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	06 2f       	mov	r16, r22
     d0a:	11 2d       	mov	r17, r1
     d0c:	ae 0c       	add	r10, r14
     d0e:	bf 1c       	adc	r11, r15
     d10:	c0 1e       	adc	r12, r16
     d12:	d1 1e       	adc	r13, r17
     d14:	ca 01       	movw	r24, r20
     d16:	aa 27       	eor	r26, r26
     d18:	bb 27       	eor	r27, r27
     d1a:	bc 01       	movw	r22, r24
     d1c:	cd 01       	movw	r24, r26
     d1e:	6a 0d       	add	r22, r10
     d20:	7b 1d       	adc	r23, r11
     d22:	8c 1d       	adc	r24, r12
     d24:	9d 1d       	adc	r25, r13
     d26:	69 8c       	ldd	r6, Y+25	; 0x19
     d28:	7a 8c       	ldd	r7, Y+26	; 0x1a
     d2a:	8b 8c       	ldd	r8, Y+27	; 0x1b
     d2c:	9c 8c       	ldd	r9, Y+28	; 0x1c
     d2e:	66 16       	cp	r6, r22
     d30:	77 06       	cpc	r7, r23
     d32:	88 06       	cpc	r8, r24
     d34:	99 06       	cpc	r9, r25
     d36:	40 f1       	brcs	.+80     	; 0xd88 <__udivdi3+0xc62>
     d38:	66 15       	cp	r22, r6
     d3a:	77 05       	cpc	r23, r7
     d3c:	88 05       	cpc	r24, r8
     d3e:	99 05       	cpc	r25, r9
     d40:	09 f0       	breq	.+2      	; 0xd44 <__udivdi3+0xc1e>
     d42:	43 c0       	rjmp	.+134    	; 0xdca <__udivdi3+0xca4>
     d44:	d9 01       	movw	r26, r18
     d46:	99 27       	eor	r25, r25
     d48:	88 27       	eor	r24, r24
     d4a:	69 96       	adiw	r28, 0x19	; 25
     d4c:	2c ad       	ldd	r18, Y+60	; 0x3c
     d4e:	3d ad       	ldd	r19, Y+61	; 0x3d
     d50:	4e ad       	ldd	r20, Y+62	; 0x3e
     d52:	5f ad       	ldd	r21, Y+63	; 0x3f
     d54:	69 97       	sbiw	r28, 0x19	; 25
     d56:	40 70       	andi	r20, 0x00	; 0
     d58:	50 70       	andi	r21, 0x00	; 0
     d5a:	82 0f       	add	r24, r18
     d5c:	93 1f       	adc	r25, r19
     d5e:	a4 1f       	adc	r26, r20
     d60:	b5 1f       	adc	r27, r21
     d62:	2d a5       	ldd	r18, Y+45	; 0x2d
     d64:	3e a5       	ldd	r19, Y+46	; 0x2e
     d66:	4f a5       	ldd	r20, Y+47	; 0x2f
     d68:	58 a9       	ldd	r21, Y+48	; 0x30
     d6a:	6e 96       	adiw	r28, 0x1e	; 30
     d6c:	0f ac       	ldd	r0, Y+63	; 0x3f
     d6e:	6e 97       	sbiw	r28, 0x1e	; 30
     d70:	04 c0       	rjmp	.+8      	; 0xd7a <__udivdi3+0xc54>
     d72:	22 0f       	add	r18, r18
     d74:	33 1f       	adc	r19, r19
     d76:	44 1f       	adc	r20, r20
     d78:	55 1f       	adc	r21, r21
     d7a:	0a 94       	dec	r0
     d7c:	d2 f7       	brpl	.-12     	; 0xd72 <__udivdi3+0xc4c>
     d7e:	28 17       	cp	r18, r24
     d80:	39 07       	cpc	r19, r25
     d82:	4a 07       	cpc	r20, r26
     d84:	5b 07       	cpc	r21, r27
     d86:	08 f5       	brcc	.+66     	; 0xdca <__udivdi3+0xca4>
     d88:	09 a9       	ldd	r16, Y+49	; 0x31
     d8a:	1a a9       	ldd	r17, Y+50	; 0x32
     d8c:	2b a9       	ldd	r18, Y+51	; 0x33
     d8e:	3c a9       	ldd	r19, Y+52	; 0x34
     d90:	01 50       	subi	r16, 0x01	; 1
     d92:	10 40       	sbci	r17, 0x00	; 0
     d94:	20 40       	sbci	r18, 0x00	; 0
     d96:	30 40       	sbci	r19, 0x00	; 0
     d98:	09 ab       	std	Y+49, r16	; 0x31
     d9a:	1a ab       	std	Y+50, r17	; 0x32
     d9c:	2b ab       	std	Y+51, r18	; 0x33
     d9e:	3c ab       	std	Y+52, r19	; 0x34
     da0:	14 c0       	rjmp	.+40     	; 0xdca <__udivdi3+0xca4>
     da2:	66 24       	eor	r6, r6
     da4:	77 24       	eor	r7, r7
     da6:	43 01       	movw	r8, r6
     da8:	21 e0       	ldi	r18, 0x01	; 1
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	29 ab       	std	Y+49, r18	; 0x31
     db2:	3a ab       	std	Y+50, r19	; 0x32
     db4:	4b ab       	std	Y+51, r20	; 0x33
     db6:	5c ab       	std	Y+52, r21	; 0x34
     db8:	0b c0       	rjmp	.+22     	; 0xdd0 <__udivdi3+0xcaa>
     dba:	66 24       	eor	r6, r6
     dbc:	77 24       	eor	r7, r7
     dbe:	43 01       	movw	r8, r6
     dc0:	19 aa       	std	Y+49, r1	; 0x31
     dc2:	1a aa       	std	Y+50, r1	; 0x32
     dc4:	1b aa       	std	Y+51, r1	; 0x33
     dc6:	1c aa       	std	Y+52, r1	; 0x34
     dc8:	03 c0       	rjmp	.+6      	; 0xdd0 <__udivdi3+0xcaa>
     dca:	66 24       	eor	r6, r6
     dcc:	77 24       	eor	r7, r7
     dce:	43 01       	movw	r8, r6
     dd0:	fe 01       	movw	r30, r28
     dd2:	71 96       	adiw	r30, 0x11	; 17
     dd4:	88 e0       	ldi	r24, 0x08	; 8
     dd6:	df 01       	movw	r26, r30
     dd8:	1d 92       	st	X+, r1
     dda:	8a 95       	dec	r24
     ddc:	e9 f7       	brne	.-6      	; 0xdd8 <__udivdi3+0xcb2>
     dde:	a9 a8       	ldd	r10, Y+49	; 0x31
     de0:	ba a8       	ldd	r11, Y+50	; 0x32
     de2:	cb a8       	ldd	r12, Y+51	; 0x33
     de4:	dc a8       	ldd	r13, Y+52	; 0x34
     de6:	a9 8a       	std	Y+17, r10	; 0x11
     de8:	ba 8a       	std	Y+18, r11	; 0x12
     dea:	cb 8a       	std	Y+19, r12	; 0x13
     dec:	dc 8a       	std	Y+20, r13	; 0x14
     dee:	6d 8a       	std	Y+21, r6	; 0x15
     df0:	7e 8a       	std	Y+22, r7	; 0x16
     df2:	8f 8a       	std	Y+23, r8	; 0x17
     df4:	98 8e       	std	Y+24, r9	; 0x18
     df6:	29 a9       	ldd	r18, Y+49	; 0x31
     df8:	3a 89       	ldd	r19, Y+18	; 0x12
     dfa:	4b 89       	ldd	r20, Y+19	; 0x13
     dfc:	5c 89       	ldd	r21, Y+20	; 0x14
     dfe:	66 2d       	mov	r22, r6
     e00:	7e 89       	ldd	r23, Y+22	; 0x16
     e02:	8f 89       	ldd	r24, Y+23	; 0x17
     e04:	98 8d       	ldd	r25, Y+24	; 0x18
     e06:	c2 5a       	subi	r28, 0xA2	; 162
     e08:	df 4f       	sbci	r29, 0xFF	; 255
     e0a:	e2 e1       	ldi	r30, 0x12	; 18
     e0c:	0c 94 0c 3b 	jmp	0x7618	; 0x7618 <__epilogue_restores__>

00000e10 <__umoddi3>:
     e10:	ab e5       	ldi	r26, 0x5B	; 91
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	ee e0       	ldi	r30, 0x0E	; 14
     e16:	f7 e0       	ldi	r31, 0x07	; 7
     e18:	0c 94 f0 3a 	jmp	0x75e0	; 0x75e0 <__prologue_saves__>
     e1c:	a8 e0       	ldi	r26, 0x08	; 8
     e1e:	4e 01       	movw	r8, r28
     e20:	08 94       	sec
     e22:	81 1c       	adc	r8, r1
     e24:	91 1c       	adc	r9, r1
     e26:	f4 01       	movw	r30, r8
     e28:	6a 2e       	mov	r6, r26
     e2a:	11 92       	st	Z+, r1
     e2c:	6a 94       	dec	r6
     e2e:	e9 f7       	brne	.-6      	; 0xe2a <__umoddi3+0x1a>
     e30:	29 83       	std	Y+1, r18	; 0x01
     e32:	3a 83       	std	Y+2, r19	; 0x02
     e34:	4b 83       	std	Y+3, r20	; 0x03
     e36:	5c 83       	std	Y+4, r21	; 0x04
     e38:	6d 83       	std	Y+5, r22	; 0x05
     e3a:	7e 83       	std	Y+6, r23	; 0x06
     e3c:	8f 83       	std	Y+7, r24	; 0x07
     e3e:	98 87       	std	Y+8, r25	; 0x08
     e40:	ce 01       	movw	r24, r28
     e42:	09 96       	adiw	r24, 0x09	; 9
     e44:	fc 01       	movw	r30, r24
     e46:	11 92       	st	Z+, r1
     e48:	aa 95       	dec	r26
     e4a:	e9 f7       	brne	.-6      	; 0xe46 <__umoddi3+0x36>
     e4c:	a9 86       	std	Y+9, r10	; 0x09
     e4e:	ba 86       	std	Y+10, r11	; 0x0a
     e50:	cb 86       	std	Y+11, r12	; 0x0b
     e52:	dc 86       	std	Y+12, r13	; 0x0c
     e54:	ed 86       	std	Y+13, r14	; 0x0d
     e56:	fe 86       	std	Y+14, r15	; 0x0e
     e58:	0f 87       	std	Y+15, r16	; 0x0f
     e5a:	18 8b       	std	Y+16, r17	; 0x10
     e5c:	29 84       	ldd	r2, Y+9	; 0x09
     e5e:	3a 84       	ldd	r3, Y+10	; 0x0a
     e60:	4b 84       	ldd	r4, Y+11	; 0x0b
     e62:	5c 84       	ldd	r5, Y+12	; 0x0c
     e64:	ad 84       	ldd	r10, Y+13	; 0x0d
     e66:	be 84       	ldd	r11, Y+14	; 0x0e
     e68:	cf 84       	ldd	r12, Y+15	; 0x0f
     e6a:	d8 88       	ldd	r13, Y+16	; 0x10
     e6c:	29 81       	ldd	r18, Y+1	; 0x01
     e6e:	3a 81       	ldd	r19, Y+2	; 0x02
     e70:	4b 81       	ldd	r20, Y+3	; 0x03
     e72:	5c 81       	ldd	r21, Y+4	; 0x04
     e74:	69 96       	adiw	r28, 0x19	; 25
     e76:	2f af       	std	Y+63, r18	; 0x3f
     e78:	69 97       	sbiw	r28, 0x19	; 25
     e7a:	6a 96       	adiw	r28, 0x1a	; 26
     e7c:	3f af       	std	Y+63, r19	; 0x3f
     e7e:	6a 97       	sbiw	r28, 0x1a	; 26
     e80:	6b 96       	adiw	r28, 0x1b	; 27
     e82:	4f af       	std	Y+63, r20	; 0x3f
     e84:	6b 97       	sbiw	r28, 0x1b	; 27
     e86:	6c 96       	adiw	r28, 0x1c	; 28
     e88:	5f af       	std	Y+63, r21	; 0x3f
     e8a:	6c 97       	sbiw	r28, 0x1c	; 28
     e8c:	6c 96       	adiw	r28, 0x1c	; 28
     e8e:	6c ac       	ldd	r6, Y+60	; 0x3c
     e90:	7d ac       	ldd	r7, Y+61	; 0x3d
     e92:	8e ac       	ldd	r8, Y+62	; 0x3e
     e94:	9f ac       	ldd	r9, Y+63	; 0x3f
     e96:	6c 97       	sbiw	r28, 0x1c	; 28
     e98:	69 aa       	std	Y+49, r6	; 0x31
     e9a:	7a aa       	std	Y+50, r7	; 0x32
     e9c:	8b aa       	std	Y+51, r8	; 0x33
     e9e:	9c aa       	std	Y+52, r9	; 0x34
     ea0:	6d 81       	ldd	r22, Y+5	; 0x05
     ea2:	7e 81       	ldd	r23, Y+6	; 0x06
     ea4:	8f 81       	ldd	r24, Y+7	; 0x07
     ea6:	98 85       	ldd	r25, Y+8	; 0x08
     ea8:	3b 01       	movw	r6, r22
     eaa:	4c 01       	movw	r8, r24
     eac:	6d aa       	std	Y+53, r6	; 0x35
     eae:	7e aa       	std	Y+54, r7	; 0x36
     eb0:	8f aa       	std	Y+55, r8	; 0x37
     eb2:	98 ae       	std	Y+56, r9	; 0x38
     eb4:	a1 14       	cp	r10, r1
     eb6:	b1 04       	cpc	r11, r1
     eb8:	c1 04       	cpc	r12, r1
     eba:	d1 04       	cpc	r13, r1
     ebc:	09 f0       	breq	.+2      	; 0xec0 <__umoddi3+0xb0>
     ebe:	04 c3       	rjmp	.+1544   	; 0x14c8 <__stack+0x3c9>
     ec0:	62 14       	cp	r6, r2
     ec2:	73 04       	cpc	r7, r3
     ec4:	84 04       	cpc	r8, r4
     ec6:	95 04       	cpc	r9, r5
     ec8:	08 f0       	brcs	.+2      	; 0xecc <__umoddi3+0xbc>
     eca:	00 c1       	rjmp	.+512    	; 0x10cc <__umoddi3+0x2bc>
     ecc:	00 e0       	ldi	r16, 0x00	; 0
     ece:	20 16       	cp	r2, r16
     ed0:	00 e0       	ldi	r16, 0x00	; 0
     ed2:	30 06       	cpc	r3, r16
     ed4:	01 e0       	ldi	r16, 0x01	; 1
     ed6:	40 06       	cpc	r4, r16
     ed8:	00 e0       	ldi	r16, 0x00	; 0
     eda:	50 06       	cpc	r5, r16
     edc:	88 f4       	brcc	.+34     	; 0xf00 <__umoddi3+0xf0>
     ede:	1f ef       	ldi	r17, 0xFF	; 255
     ee0:	21 16       	cp	r2, r17
     ee2:	31 04       	cpc	r3, r1
     ee4:	41 04       	cpc	r4, r1
     ee6:	51 04       	cpc	r5, r1
     ee8:	39 f0       	breq	.+14     	; 0xef8 <__umoddi3+0xe8>
     eea:	30 f0       	brcs	.+12     	; 0xef8 <__umoddi3+0xe8>
     eec:	88 e0       	ldi	r24, 0x08	; 8
     eee:	e8 2e       	mov	r14, r24
     ef0:	f1 2c       	mov	r15, r1
     ef2:	01 2d       	mov	r16, r1
     ef4:	11 2d       	mov	r17, r1
     ef6:	18 c0       	rjmp	.+48     	; 0xf28 <__umoddi3+0x118>
     ef8:	ee 24       	eor	r14, r14
     efa:	ff 24       	eor	r15, r15
     efc:	87 01       	movw	r16, r14
     efe:	14 c0       	rjmp	.+40     	; 0xf28 <__umoddi3+0x118>
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	24 16       	cp	r2, r20
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	34 06       	cpc	r3, r20
     f08:	40 e0       	ldi	r20, 0x00	; 0
     f0a:	44 06       	cpc	r4, r20
     f0c:	41 e0       	ldi	r20, 0x01	; 1
     f0e:	54 06       	cpc	r5, r20
     f10:	30 f0       	brcs	.+12     	; 0xf1e <__umoddi3+0x10e>
     f12:	b8 e1       	ldi	r27, 0x18	; 24
     f14:	eb 2e       	mov	r14, r27
     f16:	f1 2c       	mov	r15, r1
     f18:	01 2d       	mov	r16, r1
     f1a:	11 2d       	mov	r17, r1
     f1c:	05 c0       	rjmp	.+10     	; 0xf28 <__umoddi3+0x118>
     f1e:	a0 e1       	ldi	r26, 0x10	; 16
     f20:	ea 2e       	mov	r14, r26
     f22:	f1 2c       	mov	r15, r1
     f24:	01 2d       	mov	r16, r1
     f26:	11 2d       	mov	r17, r1
     f28:	d2 01       	movw	r26, r4
     f2a:	c1 01       	movw	r24, r2
     f2c:	0e 2c       	mov	r0, r14
     f2e:	04 c0       	rjmp	.+8      	; 0xf38 <__umoddi3+0x128>
     f30:	b6 95       	lsr	r27
     f32:	a7 95       	ror	r26
     f34:	97 95       	ror	r25
     f36:	87 95       	ror	r24
     f38:	0a 94       	dec	r0
     f3a:	d2 f7       	brpl	.-12     	; 0xf30 <__umoddi3+0x120>
     f3c:	83 5c       	subi	r24, 0xC3	; 195
     f3e:	9e 4f       	sbci	r25, 0xFE	; 254
     f40:	dc 01       	movw	r26, r24
     f42:	2c 91       	ld	r18, X
     f44:	80 e2       	ldi	r24, 0x20	; 32
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	a0 e0       	ldi	r26, 0x00	; 0
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	8e 19       	sub	r24, r14
     f4e:	9f 09       	sbc	r25, r15
     f50:	a0 0b       	sbc	r26, r16
     f52:	b1 0b       	sbc	r27, r17
     f54:	5c 01       	movw	r10, r24
     f56:	6d 01       	movw	r12, r26
     f58:	a2 1a       	sub	r10, r18
     f5a:	b1 08       	sbc	r11, r1
     f5c:	c1 08       	sbc	r12, r1
     f5e:	d1 08       	sbc	r13, r1
     f60:	a9 ae       	std	Y+57, r10	; 0x39
     f62:	ba ae       	std	Y+58, r11	; 0x3a
     f64:	cb ae       	std	Y+59, r12	; 0x3b
     f66:	dc ae       	std	Y+60, r13	; 0x3c
     f68:	a1 14       	cp	r10, r1
     f6a:	b1 04       	cpc	r11, r1
     f6c:	c1 04       	cpc	r12, r1
     f6e:	d1 04       	cpc	r13, r1
     f70:	09 f4       	brne	.+2      	; 0xf74 <__umoddi3+0x164>
     f72:	3f c0       	rjmp	.+126    	; 0xff2 <__umoddi3+0x1e2>
     f74:	69 ad       	ldd	r22, Y+57	; 0x39
     f76:	06 2e       	mov	r0, r22
     f78:	04 c0       	rjmp	.+8      	; 0xf82 <__umoddi3+0x172>
     f7a:	22 0c       	add	r2, r2
     f7c:	33 1c       	adc	r3, r3
     f7e:	44 1c       	adc	r4, r4
     f80:	55 1c       	adc	r5, r5
     f82:	0a 94       	dec	r0
     f84:	d2 f7       	brpl	.-12     	; 0xf7a <__umoddi3+0x16a>
     f86:	a4 01       	movw	r20, r8
     f88:	93 01       	movw	r18, r6
     f8a:	06 2e       	mov	r0, r22
     f8c:	04 c0       	rjmp	.+8      	; 0xf96 <__umoddi3+0x186>
     f8e:	22 0f       	add	r18, r18
     f90:	33 1f       	adc	r19, r19
     f92:	44 1f       	adc	r20, r20
     f94:	55 1f       	adc	r21, r21
     f96:	0a 94       	dec	r0
     f98:	d2 f7       	brpl	.-12     	; 0xf8e <__umoddi3+0x17e>
     f9a:	80 e2       	ldi	r24, 0x20	; 32
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	8a 19       	sub	r24, r10
     fa0:	9b 09       	sbc	r25, r11
     fa2:	6c 96       	adiw	r28, 0x1c	; 28
     fa4:	cc ac       	ldd	r12, Y+60	; 0x3c
     fa6:	dd ac       	ldd	r13, Y+61	; 0x3d
     fa8:	ee ac       	ldd	r14, Y+62	; 0x3e
     faa:	ff ac       	ldd	r15, Y+63	; 0x3f
     fac:	6c 97       	sbiw	r28, 0x1c	; 28
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <__umoddi3+0x1a8>
     fb0:	f6 94       	lsr	r15
     fb2:	e7 94       	ror	r14
     fb4:	d7 94       	ror	r13
     fb6:	c7 94       	ror	r12
     fb8:	8a 95       	dec	r24
     fba:	d2 f7       	brpl	.-12     	; 0xfb0 <__umoddi3+0x1a0>
     fbc:	87 01       	movw	r16, r14
     fbe:	76 01       	movw	r14, r12
     fc0:	e2 2a       	or	r14, r18
     fc2:	f3 2a       	or	r15, r19
     fc4:	04 2b       	or	r16, r20
     fc6:	15 2b       	or	r17, r21
     fc8:	ed aa       	std	Y+53, r14	; 0x35
     fca:	fe aa       	std	Y+54, r15	; 0x36
     fcc:	0f ab       	std	Y+55, r16	; 0x37
     fce:	18 af       	std	Y+56, r17	; 0x38
     fd0:	6c 96       	adiw	r28, 0x1c	; 28
     fd2:	8c ad       	ldd	r24, Y+60	; 0x3c
     fd4:	9d ad       	ldd	r25, Y+61	; 0x3d
     fd6:	ae ad       	ldd	r26, Y+62	; 0x3e
     fd8:	bf ad       	ldd	r27, Y+63	; 0x3f
     fda:	6c 97       	sbiw	r28, 0x1c	; 28
     fdc:	04 c0       	rjmp	.+8      	; 0xfe6 <__umoddi3+0x1d6>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	aa 1f       	adc	r26, r26
     fe4:	bb 1f       	adc	r27, r27
     fe6:	6a 95       	dec	r22
     fe8:	d2 f7       	brpl	.-12     	; 0xfde <__umoddi3+0x1ce>
     fea:	89 ab       	std	Y+49, r24	; 0x31
     fec:	9a ab       	std	Y+50, r25	; 0x32
     fee:	ab ab       	std	Y+51, r26	; 0x33
     ff0:	bc ab       	std	Y+52, r27	; 0x34
     ff2:	32 01       	movw	r6, r4
     ff4:	88 24       	eor	r8, r8
     ff6:	99 24       	eor	r9, r9
     ff8:	b2 01       	movw	r22, r4
     ffa:	a1 01       	movw	r20, r2
     ffc:	60 70       	andi	r22, 0x00	; 0
     ffe:	70 70       	andi	r23, 0x00	; 0
    1000:	21 96       	adiw	r28, 0x01	; 1
    1002:	4c af       	std	Y+60, r20	; 0x3c
    1004:	5d af       	std	Y+61, r21	; 0x3d
    1006:	6e af       	std	Y+62, r22	; 0x3e
    1008:	7f af       	std	Y+63, r23	; 0x3f
    100a:	21 97       	sbiw	r28, 0x01	; 1
    100c:	6d a9       	ldd	r22, Y+53	; 0x35
    100e:	7e a9       	ldd	r23, Y+54	; 0x36
    1010:	8f a9       	ldd	r24, Y+55	; 0x37
    1012:	98 ad       	ldd	r25, Y+56	; 0x38
    1014:	a4 01       	movw	r20, r8
    1016:	93 01       	movw	r18, r6
    1018:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    101c:	7b 01       	movw	r14, r22
    101e:	8c 01       	movw	r16, r24
    1020:	6d a9       	ldd	r22, Y+53	; 0x35
    1022:	7e a9       	ldd	r23, Y+54	; 0x36
    1024:	8f a9       	ldd	r24, Y+55	; 0x37
    1026:	98 ad       	ldd	r25, Y+56	; 0x38
    1028:	a4 01       	movw	r20, r8
    102a:	93 01       	movw	r18, r6
    102c:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    1030:	ca 01       	movw	r24, r20
    1032:	b9 01       	movw	r22, r18
    1034:	21 96       	adiw	r28, 0x01	; 1
    1036:	2c ad       	ldd	r18, Y+60	; 0x3c
    1038:	3d ad       	ldd	r19, Y+61	; 0x3d
    103a:	4e ad       	ldd	r20, Y+62	; 0x3e
    103c:	5f ad       	ldd	r21, Y+63	; 0x3f
    103e:	21 97       	sbiw	r28, 0x01	; 1
    1040:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
    1044:	9b 01       	movw	r18, r22
    1046:	ac 01       	movw	r20, r24
    1048:	87 01       	movw	r16, r14
    104a:	ff 24       	eor	r15, r15
    104c:	ee 24       	eor	r14, r14
    104e:	a9 a8       	ldd	r10, Y+49	; 0x31
    1050:	ba a8       	ldd	r11, Y+50	; 0x32
    1052:	cb a8       	ldd	r12, Y+51	; 0x33
    1054:	dc a8       	ldd	r13, Y+52	; 0x34
    1056:	c6 01       	movw	r24, r12
    1058:	aa 27       	eor	r26, r26
    105a:	bb 27       	eor	r27, r27
    105c:	57 01       	movw	r10, r14
    105e:	68 01       	movw	r12, r16
    1060:	a8 2a       	or	r10, r24
    1062:	b9 2a       	or	r11, r25
    1064:	ca 2a       	or	r12, r26
    1066:	db 2a       	or	r13, r27
    1068:	a2 16       	cp	r10, r18
    106a:	b3 06       	cpc	r11, r19
    106c:	c4 06       	cpc	r12, r20
    106e:	d5 06       	cpc	r13, r21
    1070:	90 f4       	brcc	.+36     	; 0x1096 <__umoddi3+0x286>
    1072:	a2 0c       	add	r10, r2
    1074:	b3 1c       	adc	r11, r3
    1076:	c4 1c       	adc	r12, r4
    1078:	d5 1c       	adc	r13, r5
    107a:	a2 14       	cp	r10, r2
    107c:	b3 04       	cpc	r11, r3
    107e:	c4 04       	cpc	r12, r4
    1080:	d5 04       	cpc	r13, r5
    1082:	48 f0       	brcs	.+18     	; 0x1096 <__umoddi3+0x286>
    1084:	a2 16       	cp	r10, r18
    1086:	b3 06       	cpc	r11, r19
    1088:	c4 06       	cpc	r12, r20
    108a:	d5 06       	cpc	r13, r21
    108c:	20 f4       	brcc	.+8      	; 0x1096 <__umoddi3+0x286>
    108e:	a2 0c       	add	r10, r2
    1090:	b3 1c       	adc	r11, r3
    1092:	c4 1c       	adc	r12, r4
    1094:	d5 1c       	adc	r13, r5
    1096:	a2 1a       	sub	r10, r18
    1098:	b3 0a       	sbc	r11, r19
    109a:	c4 0a       	sbc	r12, r20
    109c:	d5 0a       	sbc	r13, r21
    109e:	c6 01       	movw	r24, r12
    10a0:	b5 01       	movw	r22, r10
    10a2:	a4 01       	movw	r20, r8
    10a4:	93 01       	movw	r18, r6
    10a6:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    10aa:	7b 01       	movw	r14, r22
    10ac:	8c 01       	movw	r16, r24
    10ae:	c6 01       	movw	r24, r12
    10b0:	b5 01       	movw	r22, r10
    10b2:	a4 01       	movw	r20, r8
    10b4:	93 01       	movw	r18, r6
    10b6:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    10ba:	ca 01       	movw	r24, r20
    10bc:	b9 01       	movw	r22, r18
    10be:	21 96       	adiw	r28, 0x01	; 1
    10c0:	2c ad       	ldd	r18, Y+60	; 0x3c
    10c2:	3d ad       	ldd	r19, Y+61	; 0x3d
    10c4:	4e ad       	ldd	r20, Y+62	; 0x3e
    10c6:	5f ad       	ldd	r21, Y+63	; 0x3f
    10c8:	21 97       	sbiw	r28, 0x01	; 1
    10ca:	ba c1       	rjmp	.+884    	; 0x1440 <__stack+0x341>
    10cc:	21 14       	cp	r2, r1
    10ce:	31 04       	cpc	r3, r1
    10d0:	41 04       	cpc	r4, r1
    10d2:	51 04       	cpc	r5, r1
    10d4:	71 f4       	brne	.+28     	; 0x10f2 <__umoddi3+0x2e2>
    10d6:	61 e0       	ldi	r22, 0x01	; 1
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    10ea:	c9 01       	movw	r24, r18
    10ec:	da 01       	movw	r26, r20
    10ee:	1c 01       	movw	r2, r24
    10f0:	2d 01       	movw	r4, r26
    10f2:	00 e0       	ldi	r16, 0x00	; 0
    10f4:	20 16       	cp	r2, r16
    10f6:	00 e0       	ldi	r16, 0x00	; 0
    10f8:	30 06       	cpc	r3, r16
    10fa:	01 e0       	ldi	r16, 0x01	; 1
    10fc:	40 06       	cpc	r4, r16
    10fe:	00 e0       	ldi	r16, 0x00	; 0
    1100:	50 06       	cpc	r5, r16
    1102:	88 f4       	brcc	.+34     	; 0x1126 <__stack+0x27>
    1104:	1f ef       	ldi	r17, 0xFF	; 255
    1106:	21 16       	cp	r2, r17
    1108:	31 04       	cpc	r3, r1
    110a:	41 04       	cpc	r4, r1
    110c:	51 04       	cpc	r5, r1
    110e:	39 f0       	breq	.+14     	; 0x111e <__stack+0x1f>
    1110:	30 f0       	brcs	.+12     	; 0x111e <__stack+0x1f>
    1112:	68 e0       	ldi	r22, 0x08	; 8
    1114:	e6 2e       	mov	r14, r22
    1116:	f1 2c       	mov	r15, r1
    1118:	01 2d       	mov	r16, r1
    111a:	11 2d       	mov	r17, r1
    111c:	18 c0       	rjmp	.+48     	; 0x114e <__stack+0x4f>
    111e:	ee 24       	eor	r14, r14
    1120:	ff 24       	eor	r15, r15
    1122:	87 01       	movw	r16, r14
    1124:	14 c0       	rjmp	.+40     	; 0x114e <__stack+0x4f>
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	24 16       	cp	r2, r20
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	34 06       	cpc	r3, r20
    112e:	40 e0       	ldi	r20, 0x00	; 0
    1130:	44 06       	cpc	r4, r20
    1132:	41 e0       	ldi	r20, 0x01	; 1
    1134:	54 06       	cpc	r5, r20
    1136:	30 f0       	brcs	.+12     	; 0x1144 <__stack+0x45>
    1138:	58 e1       	ldi	r21, 0x18	; 24
    113a:	e5 2e       	mov	r14, r21
    113c:	f1 2c       	mov	r15, r1
    113e:	01 2d       	mov	r16, r1
    1140:	11 2d       	mov	r17, r1
    1142:	05 c0       	rjmp	.+10     	; 0x114e <__stack+0x4f>
    1144:	40 e1       	ldi	r20, 0x10	; 16
    1146:	e4 2e       	mov	r14, r20
    1148:	f1 2c       	mov	r15, r1
    114a:	01 2d       	mov	r16, r1
    114c:	11 2d       	mov	r17, r1
    114e:	d2 01       	movw	r26, r4
    1150:	c1 01       	movw	r24, r2
    1152:	0e 2c       	mov	r0, r14
    1154:	04 c0       	rjmp	.+8      	; 0x115e <__stack+0x5f>
    1156:	b6 95       	lsr	r27
    1158:	a7 95       	ror	r26
    115a:	97 95       	ror	r25
    115c:	87 95       	ror	r24
    115e:	0a 94       	dec	r0
    1160:	d2 f7       	brpl	.-12     	; 0x1156 <__stack+0x57>
    1162:	83 5c       	subi	r24, 0xC3	; 195
    1164:	9e 4f       	sbci	r25, 0xFE	; 254
    1166:	dc 01       	movw	r26, r24
    1168:	2c 91       	ld	r18, X
    116a:	30 e2       	ldi	r19, 0x20	; 32
    116c:	a3 2e       	mov	r10, r19
    116e:	b1 2c       	mov	r11, r1
    1170:	c1 2c       	mov	r12, r1
    1172:	d1 2c       	mov	r13, r1
    1174:	d6 01       	movw	r26, r12
    1176:	c5 01       	movw	r24, r10
    1178:	8e 19       	sub	r24, r14
    117a:	9f 09       	sbc	r25, r15
    117c:	a0 0b       	sbc	r26, r16
    117e:	b1 0b       	sbc	r27, r17
    1180:	7c 01       	movw	r14, r24
    1182:	8d 01       	movw	r16, r26
    1184:	e2 1a       	sub	r14, r18
    1186:	f1 08       	sbc	r15, r1
    1188:	01 09       	sbc	r16, r1
    118a:	11 09       	sbc	r17, r1
    118c:	e9 ae       	std	Y+57, r14	; 0x39
    118e:	fa ae       	std	Y+58, r15	; 0x3a
    1190:	0b af       	std	Y+59, r16	; 0x3b
    1192:	1c af       	std	Y+60, r17	; 0x3c
    1194:	e1 14       	cp	r14, r1
    1196:	f1 04       	cpc	r15, r1
    1198:	01 05       	cpc	r16, r1
    119a:	11 05       	cpc	r17, r1
    119c:	39 f4       	brne	.+14     	; 0x11ac <__stack+0xad>
    119e:	64 01       	movw	r12, r8
    11a0:	53 01       	movw	r10, r6
    11a2:	a2 18       	sub	r10, r2
    11a4:	b3 08       	sbc	r11, r3
    11a6:	c4 08       	sbc	r12, r4
    11a8:	d5 08       	sbc	r13, r5
    11aa:	e2 c0       	rjmp	.+452    	; 0x1370 <__stack+0x271>
    11ac:	f9 ac       	ldd	r15, Y+57	; 0x39
    11ae:	68 96       	adiw	r28, 0x18	; 24
    11b0:	ff ae       	std	Y+63, r15	; 0x3f
    11b2:	68 97       	sbiw	r28, 0x18	; 24
    11b4:	0f 2c       	mov	r0, r15
    11b6:	04 c0       	rjmp	.+8      	; 0x11c0 <__stack+0xc1>
    11b8:	22 0c       	add	r2, r2
    11ba:	33 1c       	adc	r3, r3
    11bc:	44 1c       	adc	r4, r4
    11be:	55 1c       	adc	r5, r5
    11c0:	0a 94       	dec	r0
    11c2:	d2 f7       	brpl	.-12     	; 0x11b8 <__stack+0xb9>
    11c4:	8a 2d       	mov	r24, r10
    11c6:	8f 19       	sub	r24, r15
    11c8:	64 01       	movw	r12, r8
    11ca:	53 01       	movw	r10, r6
    11cc:	08 2e       	mov	r0, r24
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <__stack+0xd9>
    11d0:	d6 94       	lsr	r13
    11d2:	c7 94       	ror	r12
    11d4:	b7 94       	ror	r11
    11d6:	a7 94       	ror	r10
    11d8:	0a 94       	dec	r0
    11da:	d2 f7       	brpl	.-12     	; 0x11d0 <__stack+0xd1>
    11dc:	a4 01       	movw	r20, r8
    11de:	93 01       	movw	r18, r6
    11e0:	04 c0       	rjmp	.+8      	; 0x11ea <__stack+0xeb>
    11e2:	22 0f       	add	r18, r18
    11e4:	33 1f       	adc	r19, r19
    11e6:	44 1f       	adc	r20, r20
    11e8:	55 1f       	adc	r21, r21
    11ea:	fa 94       	dec	r15
    11ec:	d2 f7       	brpl	.-12     	; 0x11e2 <__stack+0xe3>
    11ee:	6c 96       	adiw	r28, 0x1c	; 28
    11f0:	6c ac       	ldd	r6, Y+60	; 0x3c
    11f2:	7d ac       	ldd	r7, Y+61	; 0x3d
    11f4:	8e ac       	ldd	r8, Y+62	; 0x3e
    11f6:	9f ac       	ldd	r9, Y+63	; 0x3f
    11f8:	6c 97       	sbiw	r28, 0x1c	; 28
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <__stack+0x105>
    11fc:	96 94       	lsr	r9
    11fe:	87 94       	ror	r8
    1200:	77 94       	ror	r7
    1202:	67 94       	ror	r6
    1204:	8a 95       	dec	r24
    1206:	d2 f7       	brpl	.-12     	; 0x11fc <__stack+0xfd>
    1208:	84 01       	movw	r16, r8
    120a:	73 01       	movw	r14, r6
    120c:	e2 2a       	or	r14, r18
    120e:	f3 2a       	or	r15, r19
    1210:	04 2b       	or	r16, r20
    1212:	15 2b       	or	r17, r21
    1214:	ed a6       	std	Y+45, r14	; 0x2d
    1216:	fe a6       	std	Y+46, r15	; 0x2e
    1218:	0f a7       	std	Y+47, r16	; 0x2f
    121a:	18 ab       	std	Y+48, r17	; 0x30
    121c:	32 01       	movw	r6, r4
    121e:	88 24       	eor	r8, r8
    1220:	99 24       	eor	r9, r9
    1222:	b2 01       	movw	r22, r4
    1224:	a1 01       	movw	r20, r2
    1226:	60 70       	andi	r22, 0x00	; 0
    1228:	70 70       	andi	r23, 0x00	; 0
    122a:	25 96       	adiw	r28, 0x05	; 5
    122c:	4c af       	std	Y+60, r20	; 0x3c
    122e:	5d af       	std	Y+61, r21	; 0x3d
    1230:	6e af       	std	Y+62, r22	; 0x3e
    1232:	7f af       	std	Y+63, r23	; 0x3f
    1234:	25 97       	sbiw	r28, 0x05	; 5
    1236:	c6 01       	movw	r24, r12
    1238:	b5 01       	movw	r22, r10
    123a:	a4 01       	movw	r20, r8
    123c:	93 01       	movw	r18, r6
    123e:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    1242:	7b 01       	movw	r14, r22
    1244:	8c 01       	movw	r16, r24
    1246:	c6 01       	movw	r24, r12
    1248:	b5 01       	movw	r22, r10
    124a:	a4 01       	movw	r20, r8
    124c:	93 01       	movw	r18, r6
    124e:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    1252:	ca 01       	movw	r24, r20
    1254:	b9 01       	movw	r22, r18
    1256:	25 96       	adiw	r28, 0x05	; 5
    1258:	2c ad       	ldd	r18, Y+60	; 0x3c
    125a:	3d ad       	ldd	r19, Y+61	; 0x3d
    125c:	4e ad       	ldd	r20, Y+62	; 0x3e
    125e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1260:	25 97       	sbiw	r28, 0x05	; 5
    1262:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
    1266:	9b 01       	movw	r18, r22
    1268:	ac 01       	movw	r20, r24
    126a:	87 01       	movw	r16, r14
    126c:	ff 24       	eor	r15, r15
    126e:	ee 24       	eor	r14, r14
    1270:	ad a4       	ldd	r10, Y+45	; 0x2d
    1272:	be a4       	ldd	r11, Y+46	; 0x2e
    1274:	cf a4       	ldd	r12, Y+47	; 0x2f
    1276:	d8 a8       	ldd	r13, Y+48	; 0x30
    1278:	c6 01       	movw	r24, r12
    127a:	aa 27       	eor	r26, r26
    127c:	bb 27       	eor	r27, r27
    127e:	5c 01       	movw	r10, r24
    1280:	6d 01       	movw	r12, r26
    1282:	ae 28       	or	r10, r14
    1284:	bf 28       	or	r11, r15
    1286:	c0 2a       	or	r12, r16
    1288:	d1 2a       	or	r13, r17
    128a:	a2 16       	cp	r10, r18
    128c:	b3 06       	cpc	r11, r19
    128e:	c4 06       	cpc	r12, r20
    1290:	d5 06       	cpc	r13, r21
    1292:	90 f4       	brcc	.+36     	; 0x12b8 <__stack+0x1b9>
    1294:	a2 0c       	add	r10, r2
    1296:	b3 1c       	adc	r11, r3
    1298:	c4 1c       	adc	r12, r4
    129a:	d5 1c       	adc	r13, r5
    129c:	a2 14       	cp	r10, r2
    129e:	b3 04       	cpc	r11, r3
    12a0:	c4 04       	cpc	r12, r4
    12a2:	d5 04       	cpc	r13, r5
    12a4:	48 f0       	brcs	.+18     	; 0x12b8 <__stack+0x1b9>
    12a6:	a2 16       	cp	r10, r18
    12a8:	b3 06       	cpc	r11, r19
    12aa:	c4 06       	cpc	r12, r20
    12ac:	d5 06       	cpc	r13, r21
    12ae:	20 f4       	brcc	.+8      	; 0x12b8 <__stack+0x1b9>
    12b0:	a2 0c       	add	r10, r2
    12b2:	b3 1c       	adc	r11, r3
    12b4:	c4 1c       	adc	r12, r4
    12b6:	d5 1c       	adc	r13, r5
    12b8:	a2 1a       	sub	r10, r18
    12ba:	b3 0a       	sbc	r11, r19
    12bc:	c4 0a       	sbc	r12, r20
    12be:	d5 0a       	sbc	r13, r21
    12c0:	c6 01       	movw	r24, r12
    12c2:	b5 01       	movw	r22, r10
    12c4:	a4 01       	movw	r20, r8
    12c6:	93 01       	movw	r18, r6
    12c8:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    12cc:	7b 01       	movw	r14, r22
    12ce:	8c 01       	movw	r16, r24
    12d0:	c6 01       	movw	r24, r12
    12d2:	b5 01       	movw	r22, r10
    12d4:	a4 01       	movw	r20, r8
    12d6:	93 01       	movw	r18, r6
    12d8:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    12dc:	ca 01       	movw	r24, r20
    12de:	b9 01       	movw	r22, r18
    12e0:	25 96       	adiw	r28, 0x05	; 5
    12e2:	2c ad       	ldd	r18, Y+60	; 0x3c
    12e4:	3d ad       	ldd	r19, Y+61	; 0x3d
    12e6:	4e ad       	ldd	r20, Y+62	; 0x3e
    12e8:	5f ad       	ldd	r21, Y+63	; 0x3f
    12ea:	25 97       	sbiw	r28, 0x05	; 5
    12ec:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
    12f0:	9b 01       	movw	r18, r22
    12f2:	ac 01       	movw	r20, r24
    12f4:	87 01       	movw	r16, r14
    12f6:	ff 24       	eor	r15, r15
    12f8:	ee 24       	eor	r14, r14
    12fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    12fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    12fe:	af a5       	ldd	r26, Y+47	; 0x2f
    1300:	b8 a9       	ldd	r27, Y+48	; 0x30
    1302:	a0 70       	andi	r26, 0x00	; 0
    1304:	b0 70       	andi	r27, 0x00	; 0
    1306:	57 01       	movw	r10, r14
    1308:	68 01       	movw	r12, r16
    130a:	a8 2a       	or	r10, r24
    130c:	b9 2a       	or	r11, r25
    130e:	ca 2a       	or	r12, r26
    1310:	db 2a       	or	r13, r27
    1312:	a2 16       	cp	r10, r18
    1314:	b3 06       	cpc	r11, r19
    1316:	c4 06       	cpc	r12, r20
    1318:	d5 06       	cpc	r13, r21
    131a:	90 f4       	brcc	.+36     	; 0x1340 <__stack+0x241>
    131c:	a2 0c       	add	r10, r2
    131e:	b3 1c       	adc	r11, r3
    1320:	c4 1c       	adc	r12, r4
    1322:	d5 1c       	adc	r13, r5
    1324:	a2 14       	cp	r10, r2
    1326:	b3 04       	cpc	r11, r3
    1328:	c4 04       	cpc	r12, r4
    132a:	d5 04       	cpc	r13, r5
    132c:	48 f0       	brcs	.+18     	; 0x1340 <__stack+0x241>
    132e:	a2 16       	cp	r10, r18
    1330:	b3 06       	cpc	r11, r19
    1332:	c4 06       	cpc	r12, r20
    1334:	d5 06       	cpc	r13, r21
    1336:	20 f4       	brcc	.+8      	; 0x1340 <__stack+0x241>
    1338:	a2 0c       	add	r10, r2
    133a:	b3 1c       	adc	r11, r3
    133c:	c4 1c       	adc	r12, r4
    133e:	d5 1c       	adc	r13, r5
    1340:	6c 96       	adiw	r28, 0x1c	; 28
    1342:	ec ac       	ldd	r14, Y+60	; 0x3c
    1344:	fd ac       	ldd	r15, Y+61	; 0x3d
    1346:	0e ad       	ldd	r16, Y+62	; 0x3e
    1348:	1f ad       	ldd	r17, Y+63	; 0x3f
    134a:	6c 97       	sbiw	r28, 0x1c	; 28
    134c:	68 96       	adiw	r28, 0x18	; 24
    134e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1350:	68 97       	sbiw	r28, 0x18	; 24
    1352:	04 c0       	rjmp	.+8      	; 0x135c <__stack+0x25d>
    1354:	ee 0c       	add	r14, r14
    1356:	ff 1c       	adc	r15, r15
    1358:	00 1f       	adc	r16, r16
    135a:	11 1f       	adc	r17, r17
    135c:	0a 94       	dec	r0
    135e:	d2 f7       	brpl	.-12     	; 0x1354 <__stack+0x255>
    1360:	e9 aa       	std	Y+49, r14	; 0x31
    1362:	fa aa       	std	Y+50, r15	; 0x32
    1364:	0b ab       	std	Y+51, r16	; 0x33
    1366:	1c ab       	std	Y+52, r17	; 0x34
    1368:	a2 1a       	sub	r10, r18
    136a:	b3 0a       	sbc	r11, r19
    136c:	c4 0a       	sbc	r12, r20
    136e:	d5 0a       	sbc	r13, r21
    1370:	32 01       	movw	r6, r4
    1372:	88 24       	eor	r8, r8
    1374:	99 24       	eor	r9, r9
    1376:	b2 01       	movw	r22, r4
    1378:	a1 01       	movw	r20, r2
    137a:	60 70       	andi	r22, 0x00	; 0
    137c:	70 70       	andi	r23, 0x00	; 0
    137e:	29 96       	adiw	r28, 0x09	; 9
    1380:	4c af       	std	Y+60, r20	; 0x3c
    1382:	5d af       	std	Y+61, r21	; 0x3d
    1384:	6e af       	std	Y+62, r22	; 0x3e
    1386:	7f af       	std	Y+63, r23	; 0x3f
    1388:	29 97       	sbiw	r28, 0x09	; 9
    138a:	c6 01       	movw	r24, r12
    138c:	b5 01       	movw	r22, r10
    138e:	a4 01       	movw	r20, r8
    1390:	93 01       	movw	r18, r6
    1392:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    1396:	7b 01       	movw	r14, r22
    1398:	8c 01       	movw	r16, r24
    139a:	c6 01       	movw	r24, r12
    139c:	b5 01       	movw	r22, r10
    139e:	a4 01       	movw	r20, r8
    13a0:	93 01       	movw	r18, r6
    13a2:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    13a6:	ca 01       	movw	r24, r20
    13a8:	b9 01       	movw	r22, r18
    13aa:	29 96       	adiw	r28, 0x09	; 9
    13ac:	2c ad       	ldd	r18, Y+60	; 0x3c
    13ae:	3d ad       	ldd	r19, Y+61	; 0x3d
    13b0:	4e ad       	ldd	r20, Y+62	; 0x3e
    13b2:	5f ad       	ldd	r21, Y+63	; 0x3f
    13b4:	29 97       	sbiw	r28, 0x09	; 9
    13b6:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
    13ba:	9b 01       	movw	r18, r22
    13bc:	ac 01       	movw	r20, r24
    13be:	87 01       	movw	r16, r14
    13c0:	ff 24       	eor	r15, r15
    13c2:	ee 24       	eor	r14, r14
    13c4:	a9 a8       	ldd	r10, Y+49	; 0x31
    13c6:	ba a8       	ldd	r11, Y+50	; 0x32
    13c8:	cb a8       	ldd	r12, Y+51	; 0x33
    13ca:	dc a8       	ldd	r13, Y+52	; 0x34
    13cc:	c6 01       	movw	r24, r12
    13ce:	aa 27       	eor	r26, r26
    13d0:	bb 27       	eor	r27, r27
    13d2:	57 01       	movw	r10, r14
    13d4:	68 01       	movw	r12, r16
    13d6:	a8 2a       	or	r10, r24
    13d8:	b9 2a       	or	r11, r25
    13da:	ca 2a       	or	r12, r26
    13dc:	db 2a       	or	r13, r27
    13de:	a2 16       	cp	r10, r18
    13e0:	b3 06       	cpc	r11, r19
    13e2:	c4 06       	cpc	r12, r20
    13e4:	d5 06       	cpc	r13, r21
    13e6:	90 f4       	brcc	.+36     	; 0x140c <__stack+0x30d>
    13e8:	a2 0c       	add	r10, r2
    13ea:	b3 1c       	adc	r11, r3
    13ec:	c4 1c       	adc	r12, r4
    13ee:	d5 1c       	adc	r13, r5
    13f0:	a2 14       	cp	r10, r2
    13f2:	b3 04       	cpc	r11, r3
    13f4:	c4 04       	cpc	r12, r4
    13f6:	d5 04       	cpc	r13, r5
    13f8:	48 f0       	brcs	.+18     	; 0x140c <__stack+0x30d>
    13fa:	a2 16       	cp	r10, r18
    13fc:	b3 06       	cpc	r11, r19
    13fe:	c4 06       	cpc	r12, r20
    1400:	d5 06       	cpc	r13, r21
    1402:	20 f4       	brcc	.+8      	; 0x140c <__stack+0x30d>
    1404:	a2 0c       	add	r10, r2
    1406:	b3 1c       	adc	r11, r3
    1408:	c4 1c       	adc	r12, r4
    140a:	d5 1c       	adc	r13, r5
    140c:	a2 1a       	sub	r10, r18
    140e:	b3 0a       	sbc	r11, r19
    1410:	c4 0a       	sbc	r12, r20
    1412:	d5 0a       	sbc	r13, r21
    1414:	c6 01       	movw	r24, r12
    1416:	b5 01       	movw	r22, r10
    1418:	a4 01       	movw	r20, r8
    141a:	93 01       	movw	r18, r6
    141c:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    1420:	7b 01       	movw	r14, r22
    1422:	8c 01       	movw	r16, r24
    1424:	c6 01       	movw	r24, r12
    1426:	b5 01       	movw	r22, r10
    1428:	a4 01       	movw	r20, r8
    142a:	93 01       	movw	r18, r6
    142c:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    1430:	ca 01       	movw	r24, r20
    1432:	b9 01       	movw	r22, r18
    1434:	29 96       	adiw	r28, 0x09	; 9
    1436:	2c ad       	ldd	r18, Y+60	; 0x3c
    1438:	3d ad       	ldd	r19, Y+61	; 0x3d
    143a:	4e ad       	ldd	r20, Y+62	; 0x3e
    143c:	5f ad       	ldd	r21, Y+63	; 0x3f
    143e:	29 97       	sbiw	r28, 0x09	; 9
    1440:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
    1444:	9b 01       	movw	r18, r22
    1446:	ac 01       	movw	r20, r24
    1448:	87 01       	movw	r16, r14
    144a:	ff 24       	eor	r15, r15
    144c:	ee 24       	eor	r14, r14
    144e:	89 a9       	ldd	r24, Y+49	; 0x31
    1450:	9a a9       	ldd	r25, Y+50	; 0x32
    1452:	ab a9       	ldd	r26, Y+51	; 0x33
    1454:	bc a9       	ldd	r27, Y+52	; 0x34
    1456:	a0 70       	andi	r26, 0x00	; 0
    1458:	b0 70       	andi	r27, 0x00	; 0
    145a:	e8 2a       	or	r14, r24
    145c:	f9 2a       	or	r15, r25
    145e:	0a 2b       	or	r16, r26
    1460:	1b 2b       	or	r17, r27
    1462:	e2 16       	cp	r14, r18
    1464:	f3 06       	cpc	r15, r19
    1466:	04 07       	cpc	r16, r20
    1468:	15 07       	cpc	r17, r21
    146a:	90 f4       	brcc	.+36     	; 0x1490 <__stack+0x391>
    146c:	e2 0c       	add	r14, r2
    146e:	f3 1c       	adc	r15, r3
    1470:	04 1d       	adc	r16, r4
    1472:	15 1d       	adc	r17, r5
    1474:	e2 14       	cp	r14, r2
    1476:	f3 04       	cpc	r15, r3
    1478:	04 05       	cpc	r16, r4
    147a:	15 05       	cpc	r17, r5
    147c:	48 f0       	brcs	.+18     	; 0x1490 <__stack+0x391>
    147e:	e2 16       	cp	r14, r18
    1480:	f3 06       	cpc	r15, r19
    1482:	04 07       	cpc	r16, r20
    1484:	15 07       	cpc	r17, r21
    1486:	20 f4       	brcc	.+8      	; 0x1490 <__stack+0x391>
    1488:	e2 0c       	add	r14, r2
    148a:	f3 1c       	adc	r15, r3
    148c:	04 1d       	adc	r16, r4
    148e:	15 1d       	adc	r17, r5
    1490:	e2 1a       	sub	r14, r18
    1492:	f3 0a       	sbc	r15, r19
    1494:	04 0b       	sbc	r16, r20
    1496:	15 0b       	sbc	r17, r21
    1498:	d8 01       	movw	r26, r16
    149a:	c7 01       	movw	r24, r14
    149c:	09 ac       	ldd	r0, Y+57	; 0x39
    149e:	04 c0       	rjmp	.+8      	; 0x14a8 <__stack+0x3a9>
    14a0:	b6 95       	lsr	r27
    14a2:	a7 95       	ror	r26
    14a4:	97 95       	ror	r25
    14a6:	87 95       	ror	r24
    14a8:	0a 94       	dec	r0
    14aa:	d2 f7       	brpl	.-12     	; 0x14a0 <__stack+0x3a1>
    14ac:	89 8b       	std	Y+17, r24	; 0x11
    14ae:	9a 8b       	std	Y+18, r25	; 0x12
    14b0:	ab 8b       	std	Y+19, r26	; 0x13
    14b2:	bc 8b       	std	Y+20, r27	; 0x14
    14b4:	1d 8a       	std	Y+21, r1	; 0x15
    14b6:	1e 8a       	std	Y+22, r1	; 0x16
    14b8:	1f 8a       	std	Y+23, r1	; 0x17
    14ba:	18 8e       	std	Y+24, r1	; 0x18
    14bc:	28 2f       	mov	r18, r24
    14be:	3a 89       	ldd	r19, Y+18	; 0x12
    14c0:	4b 89       	ldd	r20, Y+19	; 0x13
    14c2:	5c 89       	ldd	r21, Y+20	; 0x14
    14c4:	6d 89       	ldd	r22, Y+21	; 0x15
    14c6:	0c c3       	rjmp	.+1560   	; 0x1ae0 <__stack+0x9e1>
    14c8:	6a 14       	cp	r6, r10
    14ca:	7b 04       	cpc	r7, r11
    14cc:	8c 04       	cpc	r8, r12
    14ce:	9d 04       	cpc	r9, r13
    14d0:	08 f4       	brcc	.+2      	; 0x14d4 <__stack+0x3d5>
    14d2:	09 c3       	rjmp	.+1554   	; 0x1ae6 <__stack+0x9e7>
    14d4:	00 e0       	ldi	r16, 0x00	; 0
    14d6:	a0 16       	cp	r10, r16
    14d8:	00 e0       	ldi	r16, 0x00	; 0
    14da:	b0 06       	cpc	r11, r16
    14dc:	01 e0       	ldi	r16, 0x01	; 1
    14de:	c0 06       	cpc	r12, r16
    14e0:	00 e0       	ldi	r16, 0x00	; 0
    14e2:	d0 06       	cpc	r13, r16
    14e4:	88 f4       	brcc	.+34     	; 0x1508 <__stack+0x409>
    14e6:	1f ef       	ldi	r17, 0xFF	; 255
    14e8:	a1 16       	cp	r10, r17
    14ea:	b1 04       	cpc	r11, r1
    14ec:	c1 04       	cpc	r12, r1
    14ee:	d1 04       	cpc	r13, r1
    14f0:	39 f0       	breq	.+14     	; 0x1500 <__stack+0x401>
    14f2:	30 f0       	brcs	.+12     	; 0x1500 <__stack+0x401>
    14f4:	28 e0       	ldi	r18, 0x08	; 8
    14f6:	e2 2e       	mov	r14, r18
    14f8:	f1 2c       	mov	r15, r1
    14fa:	01 2d       	mov	r16, r1
    14fc:	11 2d       	mov	r17, r1
    14fe:	18 c0       	rjmp	.+48     	; 0x1530 <__stack+0x431>
    1500:	ee 24       	eor	r14, r14
    1502:	ff 24       	eor	r15, r15
    1504:	87 01       	movw	r16, r14
    1506:	14 c0       	rjmp	.+40     	; 0x1530 <__stack+0x431>
    1508:	40 e0       	ldi	r20, 0x00	; 0
    150a:	a4 16       	cp	r10, r20
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	b4 06       	cpc	r11, r20
    1510:	40 e0       	ldi	r20, 0x00	; 0
    1512:	c4 06       	cpc	r12, r20
    1514:	41 e0       	ldi	r20, 0x01	; 1
    1516:	d4 06       	cpc	r13, r20
    1518:	30 f0       	brcs	.+12     	; 0x1526 <__stack+0x427>
    151a:	98 e1       	ldi	r25, 0x18	; 24
    151c:	e9 2e       	mov	r14, r25
    151e:	f1 2c       	mov	r15, r1
    1520:	01 2d       	mov	r16, r1
    1522:	11 2d       	mov	r17, r1
    1524:	05 c0       	rjmp	.+10     	; 0x1530 <__stack+0x431>
    1526:	80 e1       	ldi	r24, 0x10	; 16
    1528:	e8 2e       	mov	r14, r24
    152a:	f1 2c       	mov	r15, r1
    152c:	01 2d       	mov	r16, r1
    152e:	11 2d       	mov	r17, r1
    1530:	d6 01       	movw	r26, r12
    1532:	c5 01       	movw	r24, r10
    1534:	0e 2c       	mov	r0, r14
    1536:	04 c0       	rjmp	.+8      	; 0x1540 <__stack+0x441>
    1538:	b6 95       	lsr	r27
    153a:	a7 95       	ror	r26
    153c:	97 95       	ror	r25
    153e:	87 95       	ror	r24
    1540:	0a 94       	dec	r0
    1542:	d2 f7       	brpl	.-12     	; 0x1538 <__stack+0x439>
    1544:	83 5c       	subi	r24, 0xC3	; 195
    1546:	9e 4f       	sbci	r25, 0xFE	; 254
    1548:	dc 01       	movw	r26, r24
    154a:	2c 91       	ld	r18, X
    154c:	80 e2       	ldi	r24, 0x20	; 32
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	a0 e0       	ldi	r26, 0x00	; 0
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	8e 19       	sub	r24, r14
    1556:	9f 09       	sbc	r25, r15
    1558:	a0 0b       	sbc	r26, r16
    155a:	b1 0b       	sbc	r27, r17
    155c:	82 1b       	sub	r24, r18
    155e:	91 09       	sbc	r25, r1
    1560:	a1 09       	sbc	r26, r1
    1562:	b1 09       	sbc	r27, r1
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	a1 05       	cpc	r26, r1
    1568:	b1 05       	cpc	r27, r1
    156a:	09 f0       	breq	.+2      	; 0x156e <__stack+0x46f>
    156c:	4f c0       	rjmp	.+158    	; 0x160c <__stack+0x50d>
    156e:	a6 14       	cp	r10, r6
    1570:	b7 04       	cpc	r11, r7
    1572:	c8 04       	cpc	r12, r8
    1574:	d9 04       	cpc	r13, r9
    1576:	58 f0       	brcs	.+22     	; 0x158e <__stack+0x48f>
    1578:	6c 96       	adiw	r28, 0x1c	; 28
    157a:	ec ac       	ldd	r14, Y+60	; 0x3c
    157c:	fd ac       	ldd	r15, Y+61	; 0x3d
    157e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1580:	1f ad       	ldd	r17, Y+63	; 0x3f
    1582:	6c 97       	sbiw	r28, 0x1c	; 28
    1584:	e2 14       	cp	r14, r2
    1586:	f3 04       	cpc	r15, r3
    1588:	04 05       	cpc	r16, r4
    158a:	15 05       	cpc	r17, r5
    158c:	68 f1       	brcs	.+90     	; 0x15e8 <__stack+0x4e9>
    158e:	6c 96       	adiw	r28, 0x1c	; 28
    1590:	ec ac       	ldd	r14, Y+60	; 0x3c
    1592:	fd ac       	ldd	r15, Y+61	; 0x3d
    1594:	0e ad       	ldd	r16, Y+62	; 0x3e
    1596:	1f ad       	ldd	r17, Y+63	; 0x3f
    1598:	6c 97       	sbiw	r28, 0x1c	; 28
    159a:	e2 18       	sub	r14, r2
    159c:	f3 08       	sbc	r15, r3
    159e:	04 09       	sbc	r16, r4
    15a0:	15 09       	sbc	r17, r5
    15a2:	a4 01       	movw	r20, r8
    15a4:	93 01       	movw	r18, r6
    15a6:	2a 19       	sub	r18, r10
    15a8:	3b 09       	sbc	r19, r11
    15aa:	4c 09       	sbc	r20, r12
    15ac:	5d 09       	sbc	r21, r13
    15ae:	aa 24       	eor	r10, r10
    15b0:	bb 24       	eor	r11, r11
    15b2:	65 01       	movw	r12, r10
    15b4:	6c 96       	adiw	r28, 0x1c	; 28
    15b6:	6c ad       	ldd	r22, Y+60	; 0x3c
    15b8:	7d ad       	ldd	r23, Y+61	; 0x3d
    15ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    15bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    15be:	6c 97       	sbiw	r28, 0x1c	; 28
    15c0:	6e 15       	cp	r22, r14
    15c2:	7f 05       	cpc	r23, r15
    15c4:	80 07       	cpc	r24, r16
    15c6:	91 07       	cpc	r25, r17
    15c8:	28 f4       	brcc	.+10     	; 0x15d4 <__stack+0x4d5>
    15ca:	b1 e0       	ldi	r27, 0x01	; 1
    15cc:	ab 2e       	mov	r10, r27
    15ce:	b1 2c       	mov	r11, r1
    15d0:	c1 2c       	mov	r12, r1
    15d2:	d1 2c       	mov	r13, r1
    15d4:	da 01       	movw	r26, r20
    15d6:	c9 01       	movw	r24, r18
    15d8:	8a 19       	sub	r24, r10
    15da:	9b 09       	sbc	r25, r11
    15dc:	ac 09       	sbc	r26, r12
    15de:	bd 09       	sbc	r27, r13
    15e0:	8d ab       	std	Y+53, r24	; 0x35
    15e2:	9e ab       	std	Y+54, r25	; 0x36
    15e4:	af ab       	std	Y+55, r26	; 0x37
    15e6:	b8 af       	std	Y+56, r27	; 0x38
    15e8:	e9 8a       	std	Y+17, r14	; 0x11
    15ea:	fa 8a       	std	Y+18, r15	; 0x12
    15ec:	0b 8b       	std	Y+19, r16	; 0x13
    15ee:	1c 8b       	std	Y+20, r17	; 0x14
    15f0:	6d a8       	ldd	r6, Y+53	; 0x35
    15f2:	7e a8       	ldd	r7, Y+54	; 0x36
    15f4:	8f a8       	ldd	r8, Y+55	; 0x37
    15f6:	98 ac       	ldd	r9, Y+56	; 0x38
    15f8:	6d 8a       	std	Y+21, r6	; 0x15
    15fa:	7e 8a       	std	Y+22, r7	; 0x16
    15fc:	8f 8a       	std	Y+23, r8	; 0x17
    15fe:	98 8e       	std	Y+24, r9	; 0x18
    1600:	2e 2d       	mov	r18, r14
    1602:	3a 89       	ldd	r19, Y+18	; 0x12
    1604:	4b 89       	ldd	r20, Y+19	; 0x13
    1606:	5c 89       	ldd	r21, Y+20	; 0x14
    1608:	6d a9       	ldd	r22, Y+53	; 0x35
    160a:	6a c2       	rjmp	.+1236   	; 0x1ae0 <__stack+0x9e1>
    160c:	67 96       	adiw	r28, 0x17	; 23
    160e:	8f af       	std	Y+63, r24	; 0x3f
    1610:	67 97       	sbiw	r28, 0x17	; 23
    1612:	a6 01       	movw	r20, r12
    1614:	95 01       	movw	r18, r10
    1616:	08 2e       	mov	r0, r24
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <__stack+0x523>
    161a:	22 0f       	add	r18, r18
    161c:	33 1f       	adc	r19, r19
    161e:	44 1f       	adc	r20, r20
    1620:	55 1f       	adc	r21, r21
    1622:	0a 94       	dec	r0
    1624:	d2 f7       	brpl	.-12     	; 0x161a <__stack+0x51b>
    1626:	a0 e2       	ldi	r26, 0x20	; 32
    1628:	aa 2e       	mov	r10, r26
    162a:	a8 1a       	sub	r10, r24
    162c:	66 96       	adiw	r28, 0x16	; 22
    162e:	af ae       	std	Y+63, r10	; 0x3f
    1630:	66 97       	sbiw	r28, 0x16	; 22
    1632:	d2 01       	movw	r26, r4
    1634:	c1 01       	movw	r24, r2
    1636:	04 c0       	rjmp	.+8      	; 0x1640 <__stack+0x541>
    1638:	b6 95       	lsr	r27
    163a:	a7 95       	ror	r26
    163c:	97 95       	ror	r25
    163e:	87 95       	ror	r24
    1640:	aa 94       	dec	r10
    1642:	d2 f7       	brpl	.-12     	; 0x1638 <__stack+0x539>
    1644:	6c 01       	movw	r12, r24
    1646:	7d 01       	movw	r14, r26
    1648:	c2 2a       	or	r12, r18
    164a:	d3 2a       	or	r13, r19
    164c:	e4 2a       	or	r14, r20
    164e:	f5 2a       	or	r15, r21
    1650:	c9 a6       	std	Y+41, r12	; 0x29
    1652:	da a6       	std	Y+42, r13	; 0x2a
    1654:	eb a6       	std	Y+43, r14	; 0x2b
    1656:	fc a6       	std	Y+44, r15	; 0x2c
    1658:	82 01       	movw	r16, r4
    165a:	71 01       	movw	r14, r2
    165c:	67 96       	adiw	r28, 0x17	; 23
    165e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1660:	67 97       	sbiw	r28, 0x17	; 23
    1662:	04 c0       	rjmp	.+8      	; 0x166c <__stack+0x56d>
    1664:	ee 0c       	add	r14, r14
    1666:	ff 1c       	adc	r15, r15
    1668:	00 1f       	adc	r16, r16
    166a:	11 1f       	adc	r17, r17
    166c:	0a 94       	dec	r0
    166e:	d2 f7       	brpl	.-12     	; 0x1664 <__stack+0x565>
    1670:	ed a2       	std	Y+37, r14	; 0x25
    1672:	fe a2       	std	Y+38, r15	; 0x26
    1674:	0f a3       	std	Y+39, r16	; 0x27
    1676:	18 a7       	std	Y+40, r17	; 0x28
    1678:	64 01       	movw	r12, r8
    167a:	53 01       	movw	r10, r6
    167c:	66 96       	adiw	r28, 0x16	; 22
    167e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1680:	66 97       	sbiw	r28, 0x16	; 22
    1682:	04 c0       	rjmp	.+8      	; 0x168c <__stack+0x58d>
    1684:	d6 94       	lsr	r13
    1686:	c7 94       	ror	r12
    1688:	b7 94       	ror	r11
    168a:	a7 94       	ror	r10
    168c:	0a 94       	dec	r0
    168e:	d2 f7       	brpl	.-12     	; 0x1684 <__stack+0x585>
    1690:	a4 01       	movw	r20, r8
    1692:	93 01       	movw	r18, r6
    1694:	67 96       	adiw	r28, 0x17	; 23
    1696:	0f ac       	ldd	r0, Y+63	; 0x3f
    1698:	67 97       	sbiw	r28, 0x17	; 23
    169a:	04 c0       	rjmp	.+8      	; 0x16a4 <__stack+0x5a5>
    169c:	22 0f       	add	r18, r18
    169e:	33 1f       	adc	r19, r19
    16a0:	44 1f       	adc	r20, r20
    16a2:	55 1f       	adc	r21, r21
    16a4:	0a 94       	dec	r0
    16a6:	d2 f7       	brpl	.-12     	; 0x169c <__stack+0x59d>
    16a8:	6c 96       	adiw	r28, 0x1c	; 28
    16aa:	8c ad       	ldd	r24, Y+60	; 0x3c
    16ac:	9d ad       	ldd	r25, Y+61	; 0x3d
    16ae:	ae ad       	ldd	r26, Y+62	; 0x3e
    16b0:	bf ad       	ldd	r27, Y+63	; 0x3f
    16b2:	6c 97       	sbiw	r28, 0x1c	; 28
    16b4:	66 96       	adiw	r28, 0x16	; 22
    16b6:	0f ac       	ldd	r0, Y+63	; 0x3f
    16b8:	66 97       	sbiw	r28, 0x16	; 22
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <__stack+0x5c5>
    16bc:	b6 95       	lsr	r27
    16be:	a7 95       	ror	r26
    16c0:	97 95       	ror	r25
    16c2:	87 95       	ror	r24
    16c4:	0a 94       	dec	r0
    16c6:	d2 f7       	brpl	.-12     	; 0x16bc <__stack+0x5bd>
    16c8:	3c 01       	movw	r6, r24
    16ca:	4d 01       	movw	r8, r26
    16cc:	62 2a       	or	r6, r18
    16ce:	73 2a       	or	r7, r19
    16d0:	84 2a       	or	r8, r20
    16d2:	95 2a       	or	r9, r21
    16d4:	69 a2       	std	Y+33, r6	; 0x21
    16d6:	7a a2       	std	Y+34, r7	; 0x22
    16d8:	8b a2       	std	Y+35, r8	; 0x23
    16da:	9c a2       	std	Y+36, r9	; 0x24
    16dc:	6c 96       	adiw	r28, 0x1c	; 28
    16de:	ec ac       	ldd	r14, Y+60	; 0x3c
    16e0:	fd ac       	ldd	r15, Y+61	; 0x3d
    16e2:	0e ad       	ldd	r16, Y+62	; 0x3e
    16e4:	1f ad       	ldd	r17, Y+63	; 0x3f
    16e6:	6c 97       	sbiw	r28, 0x1c	; 28
    16e8:	67 96       	adiw	r28, 0x17	; 23
    16ea:	0f ac       	ldd	r0, Y+63	; 0x3f
    16ec:	67 97       	sbiw	r28, 0x17	; 23
    16ee:	04 c0       	rjmp	.+8      	; 0x16f8 <__stack+0x5f9>
    16f0:	ee 0c       	add	r14, r14
    16f2:	ff 1c       	adc	r15, r15
    16f4:	00 1f       	adc	r16, r16
    16f6:	11 1f       	adc	r17, r17
    16f8:	0a 94       	dec	r0
    16fa:	d2 f7       	brpl	.-12     	; 0x16f0 <__stack+0x5f1>
    16fc:	ed 8e       	std	Y+29, r14	; 0x1d
    16fe:	fe 8e       	std	Y+30, r15	; 0x1e
    1700:	0f 8f       	std	Y+31, r16	; 0x1f
    1702:	18 a3       	std	Y+32, r17	; 0x20
    1704:	49 a5       	ldd	r20, Y+41	; 0x29
    1706:	5a a5       	ldd	r21, Y+42	; 0x2a
    1708:	6b a5       	ldd	r22, Y+43	; 0x2b
    170a:	7c a5       	ldd	r23, Y+44	; 0x2c
    170c:	3b 01       	movw	r6, r22
    170e:	88 24       	eor	r8, r8
    1710:	99 24       	eor	r9, r9
    1712:	60 70       	andi	r22, 0x00	; 0
    1714:	70 70       	andi	r23, 0x00	; 0
    1716:	2d 96       	adiw	r28, 0x0d	; 13
    1718:	4c af       	std	Y+60, r20	; 0x3c
    171a:	5d af       	std	Y+61, r21	; 0x3d
    171c:	6e af       	std	Y+62, r22	; 0x3e
    171e:	7f af       	std	Y+63, r23	; 0x3f
    1720:	2d 97       	sbiw	r28, 0x0d	; 13
    1722:	c6 01       	movw	r24, r12
    1724:	b5 01       	movw	r22, r10
    1726:	a4 01       	movw	r20, r8
    1728:	93 01       	movw	r18, r6
    172a:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    172e:	7b 01       	movw	r14, r22
    1730:	8c 01       	movw	r16, r24
    1732:	c6 01       	movw	r24, r12
    1734:	b5 01       	movw	r22, r10
    1736:	a4 01       	movw	r20, r8
    1738:	93 01       	movw	r18, r6
    173a:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    173e:	c9 01       	movw	r24, r18
    1740:	da 01       	movw	r26, r20
    1742:	1c 01       	movw	r2, r24
    1744:	2d 01       	movw	r4, r26
    1746:	c2 01       	movw	r24, r4
    1748:	b1 01       	movw	r22, r2
    174a:	2d 96       	adiw	r28, 0x0d	; 13
    174c:	2c ad       	ldd	r18, Y+60	; 0x3c
    174e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1750:	4e ad       	ldd	r20, Y+62	; 0x3e
    1752:	5f ad       	ldd	r21, Y+63	; 0x3f
    1754:	2d 97       	sbiw	r28, 0x0d	; 13
    1756:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
    175a:	9b 01       	movw	r18, r22
    175c:	ac 01       	movw	r20, r24
    175e:	87 01       	movw	r16, r14
    1760:	ff 24       	eor	r15, r15
    1762:	ee 24       	eor	r14, r14
    1764:	a9 a0       	ldd	r10, Y+33	; 0x21
    1766:	ba a0       	ldd	r11, Y+34	; 0x22
    1768:	cb a0       	ldd	r12, Y+35	; 0x23
    176a:	dc a0       	ldd	r13, Y+36	; 0x24
    176c:	c6 01       	movw	r24, r12
    176e:	aa 27       	eor	r26, r26
    1770:	bb 27       	eor	r27, r27
    1772:	57 01       	movw	r10, r14
    1774:	68 01       	movw	r12, r16
    1776:	a8 2a       	or	r10, r24
    1778:	b9 2a       	or	r11, r25
    177a:	ca 2a       	or	r12, r26
    177c:	db 2a       	or	r13, r27
    177e:	a2 16       	cp	r10, r18
    1780:	b3 06       	cpc	r11, r19
    1782:	c4 06       	cpc	r12, r20
    1784:	d5 06       	cpc	r13, r21
    1786:	00 f5       	brcc	.+64     	; 0x17c8 <__stack+0x6c9>
    1788:	08 94       	sec
    178a:	21 08       	sbc	r2, r1
    178c:	31 08       	sbc	r3, r1
    178e:	41 08       	sbc	r4, r1
    1790:	51 08       	sbc	r5, r1
    1792:	e9 a4       	ldd	r14, Y+41	; 0x29
    1794:	fa a4       	ldd	r15, Y+42	; 0x2a
    1796:	0b a5       	ldd	r16, Y+43	; 0x2b
    1798:	1c a5       	ldd	r17, Y+44	; 0x2c
    179a:	ae 0c       	add	r10, r14
    179c:	bf 1c       	adc	r11, r15
    179e:	c0 1e       	adc	r12, r16
    17a0:	d1 1e       	adc	r13, r17
    17a2:	ae 14       	cp	r10, r14
    17a4:	bf 04       	cpc	r11, r15
    17a6:	c0 06       	cpc	r12, r16
    17a8:	d1 06       	cpc	r13, r17
    17aa:	70 f0       	brcs	.+28     	; 0x17c8 <__stack+0x6c9>
    17ac:	a2 16       	cp	r10, r18
    17ae:	b3 06       	cpc	r11, r19
    17b0:	c4 06       	cpc	r12, r20
    17b2:	d5 06       	cpc	r13, r21
    17b4:	48 f4       	brcc	.+18     	; 0x17c8 <__stack+0x6c9>
    17b6:	08 94       	sec
    17b8:	21 08       	sbc	r2, r1
    17ba:	31 08       	sbc	r3, r1
    17bc:	41 08       	sbc	r4, r1
    17be:	51 08       	sbc	r5, r1
    17c0:	ae 0c       	add	r10, r14
    17c2:	bf 1c       	adc	r11, r15
    17c4:	c0 1e       	adc	r12, r16
    17c6:	d1 1e       	adc	r13, r17
    17c8:	a2 1a       	sub	r10, r18
    17ca:	b3 0a       	sbc	r11, r19
    17cc:	c4 0a       	sbc	r12, r20
    17ce:	d5 0a       	sbc	r13, r21
    17d0:	c6 01       	movw	r24, r12
    17d2:	b5 01       	movw	r22, r10
    17d4:	a4 01       	movw	r20, r8
    17d6:	93 01       	movw	r18, r6
    17d8:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    17dc:	7b 01       	movw	r14, r22
    17de:	8c 01       	movw	r16, r24
    17e0:	c6 01       	movw	r24, r12
    17e2:	b5 01       	movw	r22, r10
    17e4:	a4 01       	movw	r20, r8
    17e6:	93 01       	movw	r18, r6
    17e8:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    17ec:	c9 01       	movw	r24, r18
    17ee:	da 01       	movw	r26, r20
    17f0:	3c 01       	movw	r6, r24
    17f2:	4d 01       	movw	r8, r26
    17f4:	c4 01       	movw	r24, r8
    17f6:	b3 01       	movw	r22, r6
    17f8:	2d 96       	adiw	r28, 0x0d	; 13
    17fa:	2c ad       	ldd	r18, Y+60	; 0x3c
    17fc:	3d ad       	ldd	r19, Y+61	; 0x3d
    17fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1800:	5f ad       	ldd	r21, Y+63	; 0x3f
    1802:	2d 97       	sbiw	r28, 0x0d	; 13
    1804:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
    1808:	9b 01       	movw	r18, r22
    180a:	ac 01       	movw	r20, r24
    180c:	87 01       	movw	r16, r14
    180e:	ff 24       	eor	r15, r15
    1810:	ee 24       	eor	r14, r14
    1812:	89 a1       	ldd	r24, Y+33	; 0x21
    1814:	9a a1       	ldd	r25, Y+34	; 0x22
    1816:	ab a1       	ldd	r26, Y+35	; 0x23
    1818:	bc a1       	ldd	r27, Y+36	; 0x24
    181a:	a0 70       	andi	r26, 0x00	; 0
    181c:	b0 70       	andi	r27, 0x00	; 0
    181e:	57 01       	movw	r10, r14
    1820:	68 01       	movw	r12, r16
    1822:	a8 2a       	or	r10, r24
    1824:	b9 2a       	or	r11, r25
    1826:	ca 2a       	or	r12, r26
    1828:	db 2a       	or	r13, r27
    182a:	a2 16       	cp	r10, r18
    182c:	b3 06       	cpc	r11, r19
    182e:	c4 06       	cpc	r12, r20
    1830:	d5 06       	cpc	r13, r21
    1832:	00 f5       	brcc	.+64     	; 0x1874 <__stack+0x775>
    1834:	08 94       	sec
    1836:	61 08       	sbc	r6, r1
    1838:	71 08       	sbc	r7, r1
    183a:	81 08       	sbc	r8, r1
    183c:	91 08       	sbc	r9, r1
    183e:	69 a5       	ldd	r22, Y+41	; 0x29
    1840:	7a a5       	ldd	r23, Y+42	; 0x2a
    1842:	8b a5       	ldd	r24, Y+43	; 0x2b
    1844:	9c a5       	ldd	r25, Y+44	; 0x2c
    1846:	a6 0e       	add	r10, r22
    1848:	b7 1e       	adc	r11, r23
    184a:	c8 1e       	adc	r12, r24
    184c:	d9 1e       	adc	r13, r25
    184e:	a6 16       	cp	r10, r22
    1850:	b7 06       	cpc	r11, r23
    1852:	c8 06       	cpc	r12, r24
    1854:	d9 06       	cpc	r13, r25
    1856:	70 f0       	brcs	.+28     	; 0x1874 <__stack+0x775>
    1858:	a2 16       	cp	r10, r18
    185a:	b3 06       	cpc	r11, r19
    185c:	c4 06       	cpc	r12, r20
    185e:	d5 06       	cpc	r13, r21
    1860:	48 f4       	brcc	.+18     	; 0x1874 <__stack+0x775>
    1862:	08 94       	sec
    1864:	61 08       	sbc	r6, r1
    1866:	71 08       	sbc	r7, r1
    1868:	81 08       	sbc	r8, r1
    186a:	91 08       	sbc	r9, r1
    186c:	a6 0e       	add	r10, r22
    186e:	b7 1e       	adc	r11, r23
    1870:	c8 1e       	adc	r12, r24
    1872:	d9 1e       	adc	r13, r25
    1874:	d6 01       	movw	r26, r12
    1876:	c5 01       	movw	r24, r10
    1878:	82 1b       	sub	r24, r18
    187a:	93 0b       	sbc	r25, r19
    187c:	a4 0b       	sbc	r26, r20
    187e:	b5 0b       	sbc	r27, r21
    1880:	89 8f       	std	Y+25, r24	; 0x19
    1882:	9a 8f       	std	Y+26, r25	; 0x1a
    1884:	ab 8f       	std	Y+27, r26	; 0x1b
    1886:	bc 8f       	std	Y+28, r27	; 0x1c
    1888:	d1 01       	movw	r26, r2
    188a:	99 27       	eor	r25, r25
    188c:	88 27       	eor	r24, r24
    188e:	84 01       	movw	r16, r8
    1890:	73 01       	movw	r14, r6
    1892:	e8 2a       	or	r14, r24
    1894:	f9 2a       	or	r15, r25
    1896:	0a 2b       	or	r16, r26
    1898:	1b 2b       	or	r17, r27
    189a:	4f ef       	ldi	r20, 0xFF	; 255
    189c:	a4 2e       	mov	r10, r20
    189e:	4f ef       	ldi	r20, 0xFF	; 255
    18a0:	b4 2e       	mov	r11, r20
    18a2:	c1 2c       	mov	r12, r1
    18a4:	d1 2c       	mov	r13, r1
    18a6:	ae 20       	and	r10, r14
    18a8:	bf 20       	and	r11, r15
    18aa:	c0 22       	and	r12, r16
    18ac:	d1 22       	and	r13, r17
    18ae:	78 01       	movw	r14, r16
    18b0:	00 27       	eor	r16, r16
    18b2:	11 27       	eor	r17, r17
    18b4:	6d a0       	ldd	r6, Y+37	; 0x25
    18b6:	7e a0       	ldd	r7, Y+38	; 0x26
    18b8:	8f a0       	ldd	r8, Y+39	; 0x27
    18ba:	98 a4       	ldd	r9, Y+40	; 0x28
    18bc:	4f ef       	ldi	r20, 0xFF	; 255
    18be:	5f ef       	ldi	r21, 0xFF	; 255
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	64 22       	and	r6, r20
    18c6:	75 22       	and	r7, r21
    18c8:	86 22       	and	r8, r22
    18ca:	97 22       	and	r9, r23
    18cc:	8d a1       	ldd	r24, Y+37	; 0x25
    18ce:	9e a1       	ldd	r25, Y+38	; 0x26
    18d0:	af a1       	ldd	r26, Y+39	; 0x27
    18d2:	b8 a5       	ldd	r27, Y+40	; 0x28
    18d4:	bd 01       	movw	r22, r26
    18d6:	88 27       	eor	r24, r24
    18d8:	99 27       	eor	r25, r25
    18da:	65 96       	adiw	r28, 0x15	; 21
    18dc:	6c af       	std	Y+60, r22	; 0x3c
    18de:	7d af       	std	Y+61, r23	; 0x3d
    18e0:	8e af       	std	Y+62, r24	; 0x3e
    18e2:	9f af       	std	Y+63, r25	; 0x3f
    18e4:	65 97       	sbiw	r28, 0x15	; 21
    18e6:	c6 01       	movw	r24, r12
    18e8:	b5 01       	movw	r22, r10
    18ea:	a4 01       	movw	r20, r8
    18ec:	93 01       	movw	r18, r6
    18ee:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
    18f2:	61 96       	adiw	r28, 0x11	; 17
    18f4:	6c af       	std	Y+60, r22	; 0x3c
    18f6:	7d af       	std	Y+61, r23	; 0x3d
    18f8:	8e af       	std	Y+62, r24	; 0x3e
    18fa:	9f af       	std	Y+63, r25	; 0x3f
    18fc:	61 97       	sbiw	r28, 0x11	; 17
    18fe:	c6 01       	movw	r24, r12
    1900:	b5 01       	movw	r22, r10
    1902:	65 96       	adiw	r28, 0x15	; 21
    1904:	2c ad       	ldd	r18, Y+60	; 0x3c
    1906:	3d ad       	ldd	r19, Y+61	; 0x3d
    1908:	4e ad       	ldd	r20, Y+62	; 0x3e
    190a:	5f ad       	ldd	r21, Y+63	; 0x3f
    190c:	65 97       	sbiw	r28, 0x15	; 21
    190e:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
    1912:	1b 01       	movw	r2, r22
    1914:	2c 01       	movw	r4, r24
    1916:	c8 01       	movw	r24, r16
    1918:	b7 01       	movw	r22, r14
    191a:	a4 01       	movw	r20, r8
    191c:	93 01       	movw	r18, r6
    191e:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
    1922:	5b 01       	movw	r10, r22
    1924:	6c 01       	movw	r12, r24
    1926:	c8 01       	movw	r24, r16
    1928:	b7 01       	movw	r22, r14
    192a:	65 96       	adiw	r28, 0x15	; 21
    192c:	2c ad       	ldd	r18, Y+60	; 0x3c
    192e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1930:	4e ad       	ldd	r20, Y+62	; 0x3e
    1932:	5f ad       	ldd	r21, Y+63	; 0x3f
    1934:	65 97       	sbiw	r28, 0x15	; 21
    1936:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
    193a:	7b 01       	movw	r14, r22
    193c:	8c 01       	movw	r16, r24
    193e:	a6 01       	movw	r20, r12
    1940:	95 01       	movw	r18, r10
    1942:	22 0d       	add	r18, r2
    1944:	33 1d       	adc	r19, r3
    1946:	44 1d       	adc	r20, r4
    1948:	55 1d       	adc	r21, r5
    194a:	61 96       	adiw	r28, 0x11	; 17
    194c:	6c ac       	ldd	r6, Y+60	; 0x3c
    194e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1950:	8e ac       	ldd	r8, Y+62	; 0x3e
    1952:	9f ac       	ldd	r9, Y+63	; 0x3f
    1954:	61 97       	sbiw	r28, 0x11	; 17
    1956:	c4 01       	movw	r24, r8
    1958:	aa 27       	eor	r26, r26
    195a:	bb 27       	eor	r27, r27
    195c:	28 0f       	add	r18, r24
    195e:	39 1f       	adc	r19, r25
    1960:	4a 1f       	adc	r20, r26
    1962:	5b 1f       	adc	r21, r27
    1964:	2a 15       	cp	r18, r10
    1966:	3b 05       	cpc	r19, r11
    1968:	4c 05       	cpc	r20, r12
    196a:	5d 05       	cpc	r21, r13
    196c:	48 f4       	brcc	.+18     	; 0x1980 <__stack+0x881>
    196e:	81 2c       	mov	r8, r1
    1970:	91 2c       	mov	r9, r1
    1972:	e1 e0       	ldi	r30, 0x01	; 1
    1974:	ae 2e       	mov	r10, r30
    1976:	b1 2c       	mov	r11, r1
    1978:	e8 0c       	add	r14, r8
    197a:	f9 1c       	adc	r15, r9
    197c:	0a 1d       	adc	r16, r10
    197e:	1b 1d       	adc	r17, r11
    1980:	ca 01       	movw	r24, r20
    1982:	aa 27       	eor	r26, r26
    1984:	bb 27       	eor	r27, r27
    1986:	57 01       	movw	r10, r14
    1988:	68 01       	movw	r12, r16
    198a:	a8 0e       	add	r10, r24
    198c:	b9 1e       	adc	r11, r25
    198e:	ca 1e       	adc	r12, r26
    1990:	db 1e       	adc	r13, r27
    1992:	a9 01       	movw	r20, r18
    1994:	33 27       	eor	r19, r19
    1996:	22 27       	eor	r18, r18
    1998:	61 96       	adiw	r28, 0x11	; 17
    199a:	8c ad       	ldd	r24, Y+60	; 0x3c
    199c:	9d ad       	ldd	r25, Y+61	; 0x3d
    199e:	ae ad       	ldd	r26, Y+62	; 0x3e
    19a0:	bf ad       	ldd	r27, Y+63	; 0x3f
    19a2:	61 97       	sbiw	r28, 0x11	; 17
    19a4:	a0 70       	andi	r26, 0x00	; 0
    19a6:	b0 70       	andi	r27, 0x00	; 0
    19a8:	28 0f       	add	r18, r24
    19aa:	39 1f       	adc	r19, r25
    19ac:	4a 1f       	adc	r20, r26
    19ae:	5b 1f       	adc	r21, r27
    19b0:	e9 8c       	ldd	r14, Y+25	; 0x19
    19b2:	fa 8c       	ldd	r15, Y+26	; 0x1a
    19b4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    19b6:	1c 8d       	ldd	r17, Y+28	; 0x1c
    19b8:	ea 14       	cp	r14, r10
    19ba:	fb 04       	cpc	r15, r11
    19bc:	0c 05       	cpc	r16, r12
    19be:	1d 05       	cpc	r17, r13
    19c0:	70 f0       	brcs	.+28     	; 0x19de <__stack+0x8df>
    19c2:	ae 14       	cp	r10, r14
    19c4:	bf 04       	cpc	r11, r15
    19c6:	c0 06       	cpc	r12, r16
    19c8:	d1 06       	cpc	r13, r17
    19ca:	69 f5       	brne	.+90     	; 0x1a26 <__stack+0x927>
    19cc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    19ce:	7e 8d       	ldd	r23, Y+30	; 0x1e
    19d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19d2:	98 a1       	ldd	r25, Y+32	; 0x20
    19d4:	62 17       	cp	r22, r18
    19d6:	73 07       	cpc	r23, r19
    19d8:	84 07       	cpc	r24, r20
    19da:	95 07       	cpc	r25, r21
    19dc:	20 f5       	brcc	.+72     	; 0x1a26 <__stack+0x927>
    19de:	da 01       	movw	r26, r20
    19e0:	c9 01       	movw	r24, r18
    19e2:	6d a0       	ldd	r6, Y+37	; 0x25
    19e4:	7e a0       	ldd	r7, Y+38	; 0x26
    19e6:	8f a0       	ldd	r8, Y+39	; 0x27
    19e8:	98 a4       	ldd	r9, Y+40	; 0x28
    19ea:	86 19       	sub	r24, r6
    19ec:	97 09       	sbc	r25, r7
    19ee:	a8 09       	sbc	r26, r8
    19f0:	b9 09       	sbc	r27, r9
    19f2:	e9 a4       	ldd	r14, Y+41	; 0x29
    19f4:	fa a4       	ldd	r15, Y+42	; 0x2a
    19f6:	0b a5       	ldd	r16, Y+43	; 0x2b
    19f8:	1c a5       	ldd	r17, Y+44	; 0x2c
    19fa:	ae 18       	sub	r10, r14
    19fc:	bf 08       	sbc	r11, r15
    19fe:	c0 0a       	sbc	r12, r16
    1a00:	d1 0a       	sbc	r13, r17
    1a02:	ee 24       	eor	r14, r14
    1a04:	ff 24       	eor	r15, r15
    1a06:	87 01       	movw	r16, r14
    1a08:	28 17       	cp	r18, r24
    1a0a:	39 07       	cpc	r19, r25
    1a0c:	4a 07       	cpc	r20, r26
    1a0e:	5b 07       	cpc	r21, r27
    1a10:	28 f4       	brcc	.+10     	; 0x1a1c <__stack+0x91d>
    1a12:	21 e0       	ldi	r18, 0x01	; 1
    1a14:	e2 2e       	mov	r14, r18
    1a16:	f1 2c       	mov	r15, r1
    1a18:	01 2d       	mov	r16, r1
    1a1a:	11 2d       	mov	r17, r1
    1a1c:	ae 18       	sub	r10, r14
    1a1e:	bf 08       	sbc	r11, r15
    1a20:	c0 0a       	sbc	r12, r16
    1a22:	d1 0a       	sbc	r13, r17
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <__stack+0x92b>
    1a26:	da 01       	movw	r26, r20
    1a28:	c9 01       	movw	r24, r18
    1a2a:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1a2c:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1a2e:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1a30:	98 a0       	ldd	r9, Y+32	; 0x20
    1a32:	68 1a       	sub	r6, r24
    1a34:	79 0a       	sbc	r7, r25
    1a36:	8a 0a       	sbc	r8, r26
    1a38:	9b 0a       	sbc	r9, r27
    1a3a:	49 8d       	ldd	r20, Y+25	; 0x19
    1a3c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1a3e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1a40:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1a42:	4a 19       	sub	r20, r10
    1a44:	5b 09       	sbc	r21, r11
    1a46:	6c 09       	sbc	r22, r12
    1a48:	7d 09       	sbc	r23, r13
    1a4a:	5a 01       	movw	r10, r20
    1a4c:	6b 01       	movw	r12, r22
    1a4e:	22 24       	eor	r2, r2
    1a50:	33 24       	eor	r3, r3
    1a52:	21 01       	movw	r4, r2
    1a54:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a56:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a5a:	98 a1       	ldd	r25, Y+32	; 0x20
    1a5c:	66 15       	cp	r22, r6
    1a5e:	77 05       	cpc	r23, r7
    1a60:	88 05       	cpc	r24, r8
    1a62:	99 05       	cpc	r25, r9
    1a64:	28 f4       	brcc	.+10     	; 0x1a70 <__stack+0x971>
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	28 2e       	mov	r2, r24
    1a6a:	31 2c       	mov	r3, r1
    1a6c:	41 2c       	mov	r4, r1
    1a6e:	51 2c       	mov	r5, r1
    1a70:	86 01       	movw	r16, r12
    1a72:	75 01       	movw	r14, r10
    1a74:	e2 18       	sub	r14, r2
    1a76:	f3 08       	sbc	r15, r3
    1a78:	04 09       	sbc	r16, r4
    1a7a:	15 09       	sbc	r17, r5
    1a7c:	a8 01       	movw	r20, r16
    1a7e:	97 01       	movw	r18, r14
    1a80:	66 96       	adiw	r28, 0x16	; 22
    1a82:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a84:	66 97       	sbiw	r28, 0x16	; 22
    1a86:	04 c0       	rjmp	.+8      	; 0x1a90 <__stack+0x991>
    1a88:	22 0f       	add	r18, r18
    1a8a:	33 1f       	adc	r19, r19
    1a8c:	44 1f       	adc	r20, r20
    1a8e:	55 1f       	adc	r21, r21
    1a90:	0a 94       	dec	r0
    1a92:	d2 f7       	brpl	.-12     	; 0x1a88 <__stack+0x989>
    1a94:	d4 01       	movw	r26, r8
    1a96:	c3 01       	movw	r24, r6
    1a98:	67 96       	adiw	r28, 0x17	; 23
    1a9a:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a9c:	67 97       	sbiw	r28, 0x17	; 23
    1a9e:	04 c0       	rjmp	.+8      	; 0x1aa8 <__stack+0x9a9>
    1aa0:	b6 95       	lsr	r27
    1aa2:	a7 95       	ror	r26
    1aa4:	97 95       	ror	r25
    1aa6:	87 95       	ror	r24
    1aa8:	0a 94       	dec	r0
    1aaa:	d2 f7       	brpl	.-12     	; 0x1aa0 <__stack+0x9a1>
    1aac:	28 2b       	or	r18, r24
    1aae:	39 2b       	or	r19, r25
    1ab0:	4a 2b       	or	r20, r26
    1ab2:	5b 2b       	or	r21, r27
    1ab4:	29 8b       	std	Y+17, r18	; 0x11
    1ab6:	3a 8b       	std	Y+18, r19	; 0x12
    1ab8:	4b 8b       	std	Y+19, r20	; 0x13
    1aba:	5c 8b       	std	Y+20, r21	; 0x14
    1abc:	67 96       	adiw	r28, 0x17	; 23
    1abe:	0f ac       	ldd	r0, Y+63	; 0x3f
    1ac0:	67 97       	sbiw	r28, 0x17	; 23
    1ac2:	04 c0       	rjmp	.+8      	; 0x1acc <__stack+0x9cd>
    1ac4:	16 95       	lsr	r17
    1ac6:	07 95       	ror	r16
    1ac8:	f7 94       	ror	r15
    1aca:	e7 94       	ror	r14
    1acc:	0a 94       	dec	r0
    1ace:	d2 f7       	brpl	.-12     	; 0x1ac4 <__stack+0x9c5>
    1ad0:	ed 8a       	std	Y+21, r14	; 0x15
    1ad2:	fe 8a       	std	Y+22, r15	; 0x16
    1ad4:	0f 8b       	std	Y+23, r16	; 0x17
    1ad6:	18 8f       	std	Y+24, r17	; 0x18
    1ad8:	3a 89       	ldd	r19, Y+18	; 0x12
    1ada:	4b 89       	ldd	r20, Y+19	; 0x13
    1adc:	5c 89       	ldd	r21, Y+20	; 0x14
    1ade:	6e 2d       	mov	r22, r14
    1ae0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae6:	c5 5a       	subi	r28, 0xA5	; 165
    1ae8:	df 4f       	sbci	r29, 0xFF	; 255
    1aea:	e2 e1       	ldi	r30, 0x12	; 18
    1aec:	0c 94 0c 3b 	jmp	0x7618	; 0x7618 <__epilogue_restores__>

00001af0 <_fpadd_parts>:
    1af0:	a0 e0       	ldi	r26, 0x00	; 0
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	ee e7       	ldi	r30, 0x7E	; 126
    1af6:	fd e0       	ldi	r31, 0x0D	; 13
    1af8:	0c 94 f0 3a 	jmp	0x75e0	; 0x75e0 <__prologue_saves__>
    1afc:	dc 01       	movw	r26, r24
    1afe:	2b 01       	movw	r4, r22
    1b00:	fa 01       	movw	r30, r20
    1b02:	9c 91       	ld	r25, X
    1b04:	92 30       	cpi	r25, 0x02	; 2
    1b06:	08 f4       	brcc	.+2      	; 0x1b0a <_fpadd_parts+0x1a>
    1b08:	39 c1       	rjmp	.+626    	; 0x1d7c <_fpadd_parts+0x28c>
    1b0a:	eb 01       	movw	r28, r22
    1b0c:	88 81       	ld	r24, Y
    1b0e:	82 30       	cpi	r24, 0x02	; 2
    1b10:	08 f4       	brcc	.+2      	; 0x1b14 <_fpadd_parts+0x24>
    1b12:	33 c1       	rjmp	.+614    	; 0x1d7a <_fpadd_parts+0x28a>
    1b14:	94 30       	cpi	r25, 0x04	; 4
    1b16:	69 f4       	brne	.+26     	; 0x1b32 <_fpadd_parts+0x42>
    1b18:	84 30       	cpi	r24, 0x04	; 4
    1b1a:	09 f0       	breq	.+2      	; 0x1b1e <_fpadd_parts+0x2e>
    1b1c:	2f c1       	rjmp	.+606    	; 0x1d7c <_fpadd_parts+0x28c>
    1b1e:	11 96       	adiw	r26, 0x01	; 1
    1b20:	9c 91       	ld	r25, X
    1b22:	11 97       	sbiw	r26, 0x01	; 1
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	98 17       	cp	r25, r24
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <_fpadd_parts+0x3c>
    1b2a:	28 c1       	rjmp	.+592    	; 0x1d7c <_fpadd_parts+0x28c>
    1b2c:	a5 e3       	ldi	r26, 0x35	; 53
    1b2e:	b1 e0       	ldi	r27, 0x01	; 1
    1b30:	25 c1       	rjmp	.+586    	; 0x1d7c <_fpadd_parts+0x28c>
    1b32:	84 30       	cpi	r24, 0x04	; 4
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <_fpadd_parts+0x48>
    1b36:	21 c1       	rjmp	.+578    	; 0x1d7a <_fpadd_parts+0x28a>
    1b38:	82 30       	cpi	r24, 0x02	; 2
    1b3a:	a9 f4       	brne	.+42     	; 0x1b66 <_fpadd_parts+0x76>
    1b3c:	92 30       	cpi	r25, 0x02	; 2
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <_fpadd_parts+0x52>
    1b40:	1d c1       	rjmp	.+570    	; 0x1d7c <_fpadd_parts+0x28c>
    1b42:	9a 01       	movw	r18, r20
    1b44:	ad 01       	movw	r20, r26
    1b46:	88 e0       	ldi	r24, 0x08	; 8
    1b48:	ea 01       	movw	r28, r20
    1b4a:	09 90       	ld	r0, Y+
    1b4c:	ae 01       	movw	r20, r28
    1b4e:	e9 01       	movw	r28, r18
    1b50:	09 92       	st	Y+, r0
    1b52:	9e 01       	movw	r18, r28
    1b54:	81 50       	subi	r24, 0x01	; 1
    1b56:	c1 f7       	brne	.-16     	; 0x1b48 <_fpadd_parts+0x58>
    1b58:	e2 01       	movw	r28, r4
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	11 96       	adiw	r26, 0x01	; 1
    1b5e:	9c 91       	ld	r25, X
    1b60:	89 23       	and	r24, r25
    1b62:	81 83       	std	Z+1, r24	; 0x01
    1b64:	08 c1       	rjmp	.+528    	; 0x1d76 <_fpadd_parts+0x286>
    1b66:	92 30       	cpi	r25, 0x02	; 2
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <_fpadd_parts+0x7c>
    1b6a:	07 c1       	rjmp	.+526    	; 0x1d7a <_fpadd_parts+0x28a>
    1b6c:	12 96       	adiw	r26, 0x02	; 2
    1b6e:	2d 90       	ld	r2, X+
    1b70:	3c 90       	ld	r3, X
    1b72:	13 97       	sbiw	r26, 0x03	; 3
    1b74:	eb 01       	movw	r28, r22
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7a:	14 96       	adiw	r26, 0x04	; 4
    1b7c:	ad 90       	ld	r10, X+
    1b7e:	bd 90       	ld	r11, X+
    1b80:	cd 90       	ld	r12, X+
    1b82:	dc 90       	ld	r13, X
    1b84:	17 97       	sbiw	r26, 0x07	; 7
    1b86:	ec 80       	ldd	r14, Y+4	; 0x04
    1b88:	fd 80       	ldd	r15, Y+5	; 0x05
    1b8a:	0e 81       	ldd	r16, Y+6	; 0x06
    1b8c:	1f 81       	ldd	r17, Y+7	; 0x07
    1b8e:	91 01       	movw	r18, r2
    1b90:	28 1b       	sub	r18, r24
    1b92:	39 0b       	sbc	r19, r25
    1b94:	b9 01       	movw	r22, r18
    1b96:	37 ff       	sbrs	r19, 7
    1b98:	04 c0       	rjmp	.+8      	; 0x1ba2 <_fpadd_parts+0xb2>
    1b9a:	66 27       	eor	r22, r22
    1b9c:	77 27       	eor	r23, r23
    1b9e:	62 1b       	sub	r22, r18
    1ba0:	73 0b       	sbc	r23, r19
    1ba2:	60 32       	cpi	r22, 0x20	; 32
    1ba4:	71 05       	cpc	r23, r1
    1ba6:	0c f0       	brlt	.+2      	; 0x1baa <_fpadd_parts+0xba>
    1ba8:	61 c0       	rjmp	.+194    	; 0x1c6c <_fpadd_parts+0x17c>
    1baa:	12 16       	cp	r1, r18
    1bac:	13 06       	cpc	r1, r19
    1bae:	6c f5       	brge	.+90     	; 0x1c0a <_fpadd_parts+0x11a>
    1bb0:	37 01       	movw	r6, r14
    1bb2:	48 01       	movw	r8, r16
    1bb4:	06 2e       	mov	r0, r22
    1bb6:	04 c0       	rjmp	.+8      	; 0x1bc0 <_fpadd_parts+0xd0>
    1bb8:	96 94       	lsr	r9
    1bba:	87 94       	ror	r8
    1bbc:	77 94       	ror	r7
    1bbe:	67 94       	ror	r6
    1bc0:	0a 94       	dec	r0
    1bc2:	d2 f7       	brpl	.-12     	; 0x1bb8 <_fpadd_parts+0xc8>
    1bc4:	21 e0       	ldi	r18, 0x01	; 1
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	50 e0       	ldi	r21, 0x00	; 0
    1bcc:	04 c0       	rjmp	.+8      	; 0x1bd6 <_fpadd_parts+0xe6>
    1bce:	22 0f       	add	r18, r18
    1bd0:	33 1f       	adc	r19, r19
    1bd2:	44 1f       	adc	r20, r20
    1bd4:	55 1f       	adc	r21, r21
    1bd6:	6a 95       	dec	r22
    1bd8:	d2 f7       	brpl	.-12     	; 0x1bce <_fpadd_parts+0xde>
    1bda:	21 50       	subi	r18, 0x01	; 1
    1bdc:	30 40       	sbci	r19, 0x00	; 0
    1bde:	40 40       	sbci	r20, 0x00	; 0
    1be0:	50 40       	sbci	r21, 0x00	; 0
    1be2:	2e 21       	and	r18, r14
    1be4:	3f 21       	and	r19, r15
    1be6:	40 23       	and	r20, r16
    1be8:	51 23       	and	r21, r17
    1bea:	21 15       	cp	r18, r1
    1bec:	31 05       	cpc	r19, r1
    1bee:	41 05       	cpc	r20, r1
    1bf0:	51 05       	cpc	r21, r1
    1bf2:	21 f0       	breq	.+8      	; 0x1bfc <_fpadd_parts+0x10c>
    1bf4:	21 e0       	ldi	r18, 0x01	; 1
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	50 e0       	ldi	r21, 0x00	; 0
    1bfc:	79 01       	movw	r14, r18
    1bfe:	8a 01       	movw	r16, r20
    1c00:	e6 28       	or	r14, r6
    1c02:	f7 28       	or	r15, r7
    1c04:	08 29       	or	r16, r8
    1c06:	19 29       	or	r17, r9
    1c08:	3c c0       	rjmp	.+120    	; 0x1c82 <_fpadd_parts+0x192>
    1c0a:	23 2b       	or	r18, r19
    1c0c:	d1 f1       	breq	.+116    	; 0x1c82 <_fpadd_parts+0x192>
    1c0e:	26 0e       	add	r2, r22
    1c10:	37 1e       	adc	r3, r23
    1c12:	35 01       	movw	r6, r10
    1c14:	46 01       	movw	r8, r12
    1c16:	06 2e       	mov	r0, r22
    1c18:	04 c0       	rjmp	.+8      	; 0x1c22 <_fpadd_parts+0x132>
    1c1a:	96 94       	lsr	r9
    1c1c:	87 94       	ror	r8
    1c1e:	77 94       	ror	r7
    1c20:	67 94       	ror	r6
    1c22:	0a 94       	dec	r0
    1c24:	d2 f7       	brpl	.-12     	; 0x1c1a <_fpadd_parts+0x12a>
    1c26:	21 e0       	ldi	r18, 0x01	; 1
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e0       	ldi	r20, 0x00	; 0
    1c2c:	50 e0       	ldi	r21, 0x00	; 0
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <_fpadd_parts+0x148>
    1c30:	22 0f       	add	r18, r18
    1c32:	33 1f       	adc	r19, r19
    1c34:	44 1f       	adc	r20, r20
    1c36:	55 1f       	adc	r21, r21
    1c38:	6a 95       	dec	r22
    1c3a:	d2 f7       	brpl	.-12     	; 0x1c30 <_fpadd_parts+0x140>
    1c3c:	21 50       	subi	r18, 0x01	; 1
    1c3e:	30 40       	sbci	r19, 0x00	; 0
    1c40:	40 40       	sbci	r20, 0x00	; 0
    1c42:	50 40       	sbci	r21, 0x00	; 0
    1c44:	2a 21       	and	r18, r10
    1c46:	3b 21       	and	r19, r11
    1c48:	4c 21       	and	r20, r12
    1c4a:	5d 21       	and	r21, r13
    1c4c:	21 15       	cp	r18, r1
    1c4e:	31 05       	cpc	r19, r1
    1c50:	41 05       	cpc	r20, r1
    1c52:	51 05       	cpc	r21, r1
    1c54:	21 f0       	breq	.+8      	; 0x1c5e <_fpadd_parts+0x16e>
    1c56:	21 e0       	ldi	r18, 0x01	; 1
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	59 01       	movw	r10, r18
    1c60:	6a 01       	movw	r12, r20
    1c62:	a6 28       	or	r10, r6
    1c64:	b7 28       	or	r11, r7
    1c66:	c8 28       	or	r12, r8
    1c68:	d9 28       	or	r13, r9
    1c6a:	0b c0       	rjmp	.+22     	; 0x1c82 <_fpadd_parts+0x192>
    1c6c:	82 15       	cp	r24, r2
    1c6e:	93 05       	cpc	r25, r3
    1c70:	2c f0       	brlt	.+10     	; 0x1c7c <_fpadd_parts+0x18c>
    1c72:	1c 01       	movw	r2, r24
    1c74:	aa 24       	eor	r10, r10
    1c76:	bb 24       	eor	r11, r11
    1c78:	65 01       	movw	r12, r10
    1c7a:	03 c0       	rjmp	.+6      	; 0x1c82 <_fpadd_parts+0x192>
    1c7c:	ee 24       	eor	r14, r14
    1c7e:	ff 24       	eor	r15, r15
    1c80:	87 01       	movw	r16, r14
    1c82:	11 96       	adiw	r26, 0x01	; 1
    1c84:	9c 91       	ld	r25, X
    1c86:	d2 01       	movw	r26, r4
    1c88:	11 96       	adiw	r26, 0x01	; 1
    1c8a:	8c 91       	ld	r24, X
    1c8c:	98 17       	cp	r25, r24
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <_fpadd_parts+0x1a2>
    1c90:	45 c0       	rjmp	.+138    	; 0x1d1c <_fpadd_parts+0x22c>
    1c92:	99 23       	and	r25, r25
    1c94:	39 f0       	breq	.+14     	; 0x1ca4 <_fpadd_parts+0x1b4>
    1c96:	a8 01       	movw	r20, r16
    1c98:	97 01       	movw	r18, r14
    1c9a:	2a 19       	sub	r18, r10
    1c9c:	3b 09       	sbc	r19, r11
    1c9e:	4c 09       	sbc	r20, r12
    1ca0:	5d 09       	sbc	r21, r13
    1ca2:	06 c0       	rjmp	.+12     	; 0x1cb0 <_fpadd_parts+0x1c0>
    1ca4:	a6 01       	movw	r20, r12
    1ca6:	95 01       	movw	r18, r10
    1ca8:	2e 19       	sub	r18, r14
    1caa:	3f 09       	sbc	r19, r15
    1cac:	40 0b       	sbc	r20, r16
    1cae:	51 0b       	sbc	r21, r17
    1cb0:	57 fd       	sbrc	r21, 7
    1cb2:	08 c0       	rjmp	.+16     	; 0x1cc4 <_fpadd_parts+0x1d4>
    1cb4:	11 82       	std	Z+1, r1	; 0x01
    1cb6:	33 82       	std	Z+3, r3	; 0x03
    1cb8:	22 82       	std	Z+2, r2	; 0x02
    1cba:	24 83       	std	Z+4, r18	; 0x04
    1cbc:	35 83       	std	Z+5, r19	; 0x05
    1cbe:	46 83       	std	Z+6, r20	; 0x06
    1cc0:	57 83       	std	Z+7, r21	; 0x07
    1cc2:	1d c0       	rjmp	.+58     	; 0x1cfe <_fpadd_parts+0x20e>
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	81 83       	std	Z+1, r24	; 0x01
    1cc8:	33 82       	std	Z+3, r3	; 0x03
    1cca:	22 82       	std	Z+2, r2	; 0x02
    1ccc:	88 27       	eor	r24, r24
    1cce:	99 27       	eor	r25, r25
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	82 1b       	sub	r24, r18
    1cd4:	93 0b       	sbc	r25, r19
    1cd6:	a4 0b       	sbc	r26, r20
    1cd8:	b5 0b       	sbc	r27, r21
    1cda:	84 83       	std	Z+4, r24	; 0x04
    1cdc:	95 83       	std	Z+5, r25	; 0x05
    1cde:	a6 83       	std	Z+6, r26	; 0x06
    1ce0:	b7 83       	std	Z+7, r27	; 0x07
    1ce2:	0d c0       	rjmp	.+26     	; 0x1cfe <_fpadd_parts+0x20e>
    1ce4:	22 0f       	add	r18, r18
    1ce6:	33 1f       	adc	r19, r19
    1ce8:	44 1f       	adc	r20, r20
    1cea:	55 1f       	adc	r21, r21
    1cec:	24 83       	std	Z+4, r18	; 0x04
    1cee:	35 83       	std	Z+5, r19	; 0x05
    1cf0:	46 83       	std	Z+6, r20	; 0x06
    1cf2:	57 83       	std	Z+7, r21	; 0x07
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	93 83       	std	Z+3, r25	; 0x03
    1cfc:	82 83       	std	Z+2, r24	; 0x02
    1cfe:	24 81       	ldd	r18, Z+4	; 0x04
    1d00:	35 81       	ldd	r19, Z+5	; 0x05
    1d02:	46 81       	ldd	r20, Z+6	; 0x06
    1d04:	57 81       	ldd	r21, Z+7	; 0x07
    1d06:	da 01       	movw	r26, r20
    1d08:	c9 01       	movw	r24, r18
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	a1 09       	sbc	r26, r1
    1d0e:	b1 09       	sbc	r27, r1
    1d10:	8f 5f       	subi	r24, 0xFF	; 255
    1d12:	9f 4f       	sbci	r25, 0xFF	; 255
    1d14:	af 4f       	sbci	r26, 0xFF	; 255
    1d16:	bf 43       	sbci	r27, 0x3F	; 63
    1d18:	28 f3       	brcs	.-54     	; 0x1ce4 <_fpadd_parts+0x1f4>
    1d1a:	0b c0       	rjmp	.+22     	; 0x1d32 <_fpadd_parts+0x242>
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	33 82       	std	Z+3, r3	; 0x03
    1d20:	22 82       	std	Z+2, r2	; 0x02
    1d22:	ea 0c       	add	r14, r10
    1d24:	fb 1c       	adc	r15, r11
    1d26:	0c 1d       	adc	r16, r12
    1d28:	1d 1d       	adc	r17, r13
    1d2a:	e4 82       	std	Z+4, r14	; 0x04
    1d2c:	f5 82       	std	Z+5, r15	; 0x05
    1d2e:	06 83       	std	Z+6, r16	; 0x06
    1d30:	17 83       	std	Z+7, r17	; 0x07
    1d32:	83 e0       	ldi	r24, 0x03	; 3
    1d34:	80 83       	st	Z, r24
    1d36:	24 81       	ldd	r18, Z+4	; 0x04
    1d38:	35 81       	ldd	r19, Z+5	; 0x05
    1d3a:	46 81       	ldd	r20, Z+6	; 0x06
    1d3c:	57 81       	ldd	r21, Z+7	; 0x07
    1d3e:	57 ff       	sbrs	r21, 7
    1d40:	1a c0       	rjmp	.+52     	; 0x1d76 <_fpadd_parts+0x286>
    1d42:	c9 01       	movw	r24, r18
    1d44:	aa 27       	eor	r26, r26
    1d46:	97 fd       	sbrc	r25, 7
    1d48:	a0 95       	com	r26
    1d4a:	ba 2f       	mov	r27, r26
    1d4c:	81 70       	andi	r24, 0x01	; 1
    1d4e:	90 70       	andi	r25, 0x00	; 0
    1d50:	a0 70       	andi	r26, 0x00	; 0
    1d52:	b0 70       	andi	r27, 0x00	; 0
    1d54:	56 95       	lsr	r21
    1d56:	47 95       	ror	r20
    1d58:	37 95       	ror	r19
    1d5a:	27 95       	ror	r18
    1d5c:	82 2b       	or	r24, r18
    1d5e:	93 2b       	or	r25, r19
    1d60:	a4 2b       	or	r26, r20
    1d62:	b5 2b       	or	r27, r21
    1d64:	84 83       	std	Z+4, r24	; 0x04
    1d66:	95 83       	std	Z+5, r25	; 0x05
    1d68:	a6 83       	std	Z+6, r26	; 0x06
    1d6a:	b7 83       	std	Z+7, r27	; 0x07
    1d6c:	82 81       	ldd	r24, Z+2	; 0x02
    1d6e:	93 81       	ldd	r25, Z+3	; 0x03
    1d70:	01 96       	adiw	r24, 0x01	; 1
    1d72:	93 83       	std	Z+3, r25	; 0x03
    1d74:	82 83       	std	Z+2, r24	; 0x02
    1d76:	df 01       	movw	r26, r30
    1d78:	01 c0       	rjmp	.+2      	; 0x1d7c <_fpadd_parts+0x28c>
    1d7a:	d2 01       	movw	r26, r4
    1d7c:	cd 01       	movw	r24, r26
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	e2 e1       	ldi	r30, 0x12	; 18
    1d84:	0c 94 0c 3b 	jmp	0x7618	; 0x7618 <__epilogue_restores__>

00001d88 <__subsf3>:
    1d88:	a0 e2       	ldi	r26, 0x20	; 32
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	ea ec       	ldi	r30, 0xCA	; 202
    1d8e:	fe e0       	ldi	r31, 0x0E	; 14
    1d90:	0c 94 fc 3a 	jmp	0x75f8	; 0x75f8 <__prologue_saves__+0x18>
    1d94:	69 83       	std	Y+1, r22	; 0x01
    1d96:	7a 83       	std	Y+2, r23	; 0x02
    1d98:	8b 83       	std	Y+3, r24	; 0x03
    1d9a:	9c 83       	std	Y+4, r25	; 0x04
    1d9c:	2d 83       	std	Y+5, r18	; 0x05
    1d9e:	3e 83       	std	Y+6, r19	; 0x06
    1da0:	4f 83       	std	Y+7, r20	; 0x07
    1da2:	58 87       	std	Y+8, r21	; 0x08
    1da4:	e9 e0       	ldi	r30, 0x09	; 9
    1da6:	ee 2e       	mov	r14, r30
    1da8:	f1 2c       	mov	r15, r1
    1daa:	ec 0e       	add	r14, r28
    1dac:	fd 1e       	adc	r15, r29
    1dae:	ce 01       	movw	r24, r28
    1db0:	01 96       	adiw	r24, 0x01	; 1
    1db2:	b7 01       	movw	r22, r14
    1db4:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    1db8:	8e 01       	movw	r16, r28
    1dba:	0f 5e       	subi	r16, 0xEF	; 239
    1dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	05 96       	adiw	r24, 0x05	; 5
    1dc2:	b8 01       	movw	r22, r16
    1dc4:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    1dc8:	8a 89       	ldd	r24, Y+18	; 0x12
    1dca:	91 e0       	ldi	r25, 0x01	; 1
    1dcc:	89 27       	eor	r24, r25
    1dce:	8a 8b       	std	Y+18, r24	; 0x12
    1dd0:	c7 01       	movw	r24, r14
    1dd2:	b8 01       	movw	r22, r16
    1dd4:	ae 01       	movw	r20, r28
    1dd6:	47 5e       	subi	r20, 0xE7	; 231
    1dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dda:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_fpadd_parts>
    1dde:	0e 94 ac 11 	call	0x2358	; 0x2358 <__pack_f>
    1de2:	a0 96       	adiw	r28, 0x20	; 32
    1de4:	e6 e0       	ldi	r30, 0x06	; 6
    1de6:	0c 94 18 3b 	jmp	0x7630	; 0x7630 <__epilogue_restores__+0x18>

00001dea <__addsf3>:
    1dea:	a0 e2       	ldi	r26, 0x20	; 32
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	eb ef       	ldi	r30, 0xFB	; 251
    1df0:	fe e0       	ldi	r31, 0x0E	; 14
    1df2:	0c 94 fc 3a 	jmp	0x75f8	; 0x75f8 <__prologue_saves__+0x18>
    1df6:	69 83       	std	Y+1, r22	; 0x01
    1df8:	7a 83       	std	Y+2, r23	; 0x02
    1dfa:	8b 83       	std	Y+3, r24	; 0x03
    1dfc:	9c 83       	std	Y+4, r25	; 0x04
    1dfe:	2d 83       	std	Y+5, r18	; 0x05
    1e00:	3e 83       	std	Y+6, r19	; 0x06
    1e02:	4f 83       	std	Y+7, r20	; 0x07
    1e04:	58 87       	std	Y+8, r21	; 0x08
    1e06:	f9 e0       	ldi	r31, 0x09	; 9
    1e08:	ef 2e       	mov	r14, r31
    1e0a:	f1 2c       	mov	r15, r1
    1e0c:	ec 0e       	add	r14, r28
    1e0e:	fd 1e       	adc	r15, r29
    1e10:	ce 01       	movw	r24, r28
    1e12:	01 96       	adiw	r24, 0x01	; 1
    1e14:	b7 01       	movw	r22, r14
    1e16:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    1e1a:	8e 01       	movw	r16, r28
    1e1c:	0f 5e       	subi	r16, 0xEF	; 239
    1e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e20:	ce 01       	movw	r24, r28
    1e22:	05 96       	adiw	r24, 0x05	; 5
    1e24:	b8 01       	movw	r22, r16
    1e26:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    1e2a:	c7 01       	movw	r24, r14
    1e2c:	b8 01       	movw	r22, r16
    1e2e:	ae 01       	movw	r20, r28
    1e30:	47 5e       	subi	r20, 0xE7	; 231
    1e32:	5f 4f       	sbci	r21, 0xFF	; 255
    1e34:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_fpadd_parts>
    1e38:	0e 94 ac 11 	call	0x2358	; 0x2358 <__pack_f>
    1e3c:	a0 96       	adiw	r28, 0x20	; 32
    1e3e:	e6 e0       	ldi	r30, 0x06	; 6
    1e40:	0c 94 18 3b 	jmp	0x7630	; 0x7630 <__epilogue_restores__+0x18>

00001e44 <__mulsf3>:
    1e44:	a0 e2       	ldi	r26, 0x20	; 32
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e8 e2       	ldi	r30, 0x28	; 40
    1e4a:	ff e0       	ldi	r31, 0x0F	; 15
    1e4c:	0c 94 f0 3a 	jmp	0x75e0	; 0x75e0 <__prologue_saves__>
    1e50:	69 83       	std	Y+1, r22	; 0x01
    1e52:	7a 83       	std	Y+2, r23	; 0x02
    1e54:	8b 83       	std	Y+3, r24	; 0x03
    1e56:	9c 83       	std	Y+4, r25	; 0x04
    1e58:	2d 83       	std	Y+5, r18	; 0x05
    1e5a:	3e 83       	std	Y+6, r19	; 0x06
    1e5c:	4f 83       	std	Y+7, r20	; 0x07
    1e5e:	58 87       	std	Y+8, r21	; 0x08
    1e60:	ce 01       	movw	r24, r28
    1e62:	01 96       	adiw	r24, 0x01	; 1
    1e64:	be 01       	movw	r22, r28
    1e66:	67 5f       	subi	r22, 0xF7	; 247
    1e68:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6a:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    1e6e:	ce 01       	movw	r24, r28
    1e70:	05 96       	adiw	r24, 0x05	; 5
    1e72:	be 01       	movw	r22, r28
    1e74:	6f 5e       	subi	r22, 0xEF	; 239
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    1e7c:	99 85       	ldd	r25, Y+9	; 0x09
    1e7e:	92 30       	cpi	r25, 0x02	; 2
    1e80:	88 f0       	brcs	.+34     	; 0x1ea4 <__mulsf3+0x60>
    1e82:	89 89       	ldd	r24, Y+17	; 0x11
    1e84:	82 30       	cpi	r24, 0x02	; 2
    1e86:	c8 f0       	brcs	.+50     	; 0x1eba <__mulsf3+0x76>
    1e88:	94 30       	cpi	r25, 0x04	; 4
    1e8a:	19 f4       	brne	.+6      	; 0x1e92 <__mulsf3+0x4e>
    1e8c:	82 30       	cpi	r24, 0x02	; 2
    1e8e:	51 f4       	brne	.+20     	; 0x1ea4 <__mulsf3+0x60>
    1e90:	04 c0       	rjmp	.+8      	; 0x1e9a <__mulsf3+0x56>
    1e92:	84 30       	cpi	r24, 0x04	; 4
    1e94:	29 f4       	brne	.+10     	; 0x1ea0 <__mulsf3+0x5c>
    1e96:	92 30       	cpi	r25, 0x02	; 2
    1e98:	81 f4       	brne	.+32     	; 0x1eba <__mulsf3+0x76>
    1e9a:	85 e3       	ldi	r24, 0x35	; 53
    1e9c:	91 e0       	ldi	r25, 0x01	; 1
    1e9e:	c6 c0       	rjmp	.+396    	; 0x202c <__mulsf3+0x1e8>
    1ea0:	92 30       	cpi	r25, 0x02	; 2
    1ea2:	49 f4       	brne	.+18     	; 0x1eb6 <__mulsf3+0x72>
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea8:	8a 89       	ldd	r24, Y+18	; 0x12
    1eaa:	98 13       	cpse	r25, r24
    1eac:	21 e0       	ldi	r18, 0x01	; 1
    1eae:	2a 87       	std	Y+10, r18	; 0x0a
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	09 96       	adiw	r24, 0x09	; 9
    1eb4:	bb c0       	rjmp	.+374    	; 0x202c <__mulsf3+0x1e8>
    1eb6:	82 30       	cpi	r24, 0x02	; 2
    1eb8:	49 f4       	brne	.+18     	; 0x1ecc <__mulsf3+0x88>
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebe:	8a 89       	ldd	r24, Y+18	; 0x12
    1ec0:	98 13       	cpse	r25, r24
    1ec2:	21 e0       	ldi	r18, 0x01	; 1
    1ec4:	2a 8b       	std	Y+18, r18	; 0x12
    1ec6:	ce 01       	movw	r24, r28
    1ec8:	41 96       	adiw	r24, 0x11	; 17
    1eca:	b0 c0       	rjmp	.+352    	; 0x202c <__mulsf3+0x1e8>
    1ecc:	2d 84       	ldd	r2, Y+13	; 0x0d
    1ece:	3e 84       	ldd	r3, Y+14	; 0x0e
    1ed0:	4f 84       	ldd	r4, Y+15	; 0x0f
    1ed2:	58 88       	ldd	r5, Y+16	; 0x10
    1ed4:	6d 88       	ldd	r6, Y+21	; 0x15
    1ed6:	7e 88       	ldd	r7, Y+22	; 0x16
    1ed8:	8f 88       	ldd	r8, Y+23	; 0x17
    1eda:	98 8c       	ldd	r9, Y+24	; 0x18
    1edc:	ee 24       	eor	r14, r14
    1ede:	ff 24       	eor	r15, r15
    1ee0:	87 01       	movw	r16, r14
    1ee2:	aa 24       	eor	r10, r10
    1ee4:	bb 24       	eor	r11, r11
    1ee6:	65 01       	movw	r12, r10
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	50 e0       	ldi	r21, 0x00	; 0
    1eec:	60 e0       	ldi	r22, 0x00	; 0
    1eee:	70 e0       	ldi	r23, 0x00	; 0
    1ef0:	e0 e0       	ldi	r30, 0x00	; 0
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	c1 01       	movw	r24, r2
    1ef6:	81 70       	andi	r24, 0x01	; 1
    1ef8:	90 70       	andi	r25, 0x00	; 0
    1efa:	89 2b       	or	r24, r25
    1efc:	e9 f0       	breq	.+58     	; 0x1f38 <__mulsf3+0xf4>
    1efe:	e6 0c       	add	r14, r6
    1f00:	f7 1c       	adc	r15, r7
    1f02:	08 1d       	adc	r16, r8
    1f04:	19 1d       	adc	r17, r9
    1f06:	9a 01       	movw	r18, r20
    1f08:	ab 01       	movw	r20, r22
    1f0a:	2a 0d       	add	r18, r10
    1f0c:	3b 1d       	adc	r19, r11
    1f0e:	4c 1d       	adc	r20, r12
    1f10:	5d 1d       	adc	r21, r13
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	a0 e0       	ldi	r26, 0x00	; 0
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e6 14       	cp	r14, r6
    1f1c:	f7 04       	cpc	r15, r7
    1f1e:	08 05       	cpc	r16, r8
    1f20:	19 05       	cpc	r17, r9
    1f22:	20 f4       	brcc	.+8      	; 0x1f2c <__mulsf3+0xe8>
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	a0 e0       	ldi	r26, 0x00	; 0
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	ba 01       	movw	r22, r20
    1f2e:	a9 01       	movw	r20, r18
    1f30:	48 0f       	add	r20, r24
    1f32:	59 1f       	adc	r21, r25
    1f34:	6a 1f       	adc	r22, r26
    1f36:	7b 1f       	adc	r23, r27
    1f38:	aa 0c       	add	r10, r10
    1f3a:	bb 1c       	adc	r11, r11
    1f3c:	cc 1c       	adc	r12, r12
    1f3e:	dd 1c       	adc	r13, r13
    1f40:	97 fe       	sbrs	r9, 7
    1f42:	08 c0       	rjmp	.+16     	; 0x1f54 <__mulsf3+0x110>
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a0 e0       	ldi	r26, 0x00	; 0
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	a8 2a       	or	r10, r24
    1f4e:	b9 2a       	or	r11, r25
    1f50:	ca 2a       	or	r12, r26
    1f52:	db 2a       	or	r13, r27
    1f54:	31 96       	adiw	r30, 0x01	; 1
    1f56:	e0 32       	cpi	r30, 0x20	; 32
    1f58:	f1 05       	cpc	r31, r1
    1f5a:	49 f0       	breq	.+18     	; 0x1f6e <__mulsf3+0x12a>
    1f5c:	66 0c       	add	r6, r6
    1f5e:	77 1c       	adc	r7, r7
    1f60:	88 1c       	adc	r8, r8
    1f62:	99 1c       	adc	r9, r9
    1f64:	56 94       	lsr	r5
    1f66:	47 94       	ror	r4
    1f68:	37 94       	ror	r3
    1f6a:	27 94       	ror	r2
    1f6c:	c3 cf       	rjmp	.-122    	; 0x1ef4 <__mulsf3+0xb0>
    1f6e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f70:	ea 89       	ldd	r30, Y+18	; 0x12
    1f72:	2b 89       	ldd	r18, Y+19	; 0x13
    1f74:	3c 89       	ldd	r19, Y+20	; 0x14
    1f76:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f78:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f7a:	28 0f       	add	r18, r24
    1f7c:	39 1f       	adc	r19, r25
    1f7e:	2e 5f       	subi	r18, 0xFE	; 254
    1f80:	3f 4f       	sbci	r19, 0xFF	; 255
    1f82:	17 c0       	rjmp	.+46     	; 0x1fb2 <__mulsf3+0x16e>
    1f84:	ca 01       	movw	r24, r20
    1f86:	81 70       	andi	r24, 0x01	; 1
    1f88:	90 70       	andi	r25, 0x00	; 0
    1f8a:	89 2b       	or	r24, r25
    1f8c:	61 f0       	breq	.+24     	; 0x1fa6 <__mulsf3+0x162>
    1f8e:	16 95       	lsr	r17
    1f90:	07 95       	ror	r16
    1f92:	f7 94       	ror	r15
    1f94:	e7 94       	ror	r14
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a0 e0       	ldi	r26, 0x00	; 0
    1f9c:	b0 e8       	ldi	r27, 0x80	; 128
    1f9e:	e8 2a       	or	r14, r24
    1fa0:	f9 2a       	or	r15, r25
    1fa2:	0a 2b       	or	r16, r26
    1fa4:	1b 2b       	or	r17, r27
    1fa6:	76 95       	lsr	r23
    1fa8:	67 95       	ror	r22
    1faa:	57 95       	ror	r21
    1fac:	47 95       	ror	r20
    1fae:	2f 5f       	subi	r18, 0xFF	; 255
    1fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb2:	77 fd       	sbrc	r23, 7
    1fb4:	e7 cf       	rjmp	.-50     	; 0x1f84 <__mulsf3+0x140>
    1fb6:	0c c0       	rjmp	.+24     	; 0x1fd0 <__mulsf3+0x18c>
    1fb8:	44 0f       	add	r20, r20
    1fba:	55 1f       	adc	r21, r21
    1fbc:	66 1f       	adc	r22, r22
    1fbe:	77 1f       	adc	r23, r23
    1fc0:	17 fd       	sbrc	r17, 7
    1fc2:	41 60       	ori	r20, 0x01	; 1
    1fc4:	ee 0c       	add	r14, r14
    1fc6:	ff 1c       	adc	r15, r15
    1fc8:	00 1f       	adc	r16, r16
    1fca:	11 1f       	adc	r17, r17
    1fcc:	21 50       	subi	r18, 0x01	; 1
    1fce:	30 40       	sbci	r19, 0x00	; 0
    1fd0:	40 30       	cpi	r20, 0x00	; 0
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	59 07       	cpc	r21, r25
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	69 07       	cpc	r22, r25
    1fda:	90 e4       	ldi	r25, 0x40	; 64
    1fdc:	79 07       	cpc	r23, r25
    1fde:	60 f3       	brcs	.-40     	; 0x1fb8 <__mulsf3+0x174>
    1fe0:	2b 8f       	std	Y+27, r18	; 0x1b
    1fe2:	3c 8f       	std	Y+28, r19	; 0x1c
    1fe4:	db 01       	movw	r26, r22
    1fe6:	ca 01       	movw	r24, r20
    1fe8:	8f 77       	andi	r24, 0x7F	; 127
    1fea:	90 70       	andi	r25, 0x00	; 0
    1fec:	a0 70       	andi	r26, 0x00	; 0
    1fee:	b0 70       	andi	r27, 0x00	; 0
    1ff0:	80 34       	cpi	r24, 0x40	; 64
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	a1 05       	cpc	r26, r1
    1ff6:	b1 05       	cpc	r27, r1
    1ff8:	61 f4       	brne	.+24     	; 0x2012 <__mulsf3+0x1ce>
    1ffa:	47 fd       	sbrc	r20, 7
    1ffc:	0a c0       	rjmp	.+20     	; 0x2012 <__mulsf3+0x1ce>
    1ffe:	e1 14       	cp	r14, r1
    2000:	f1 04       	cpc	r15, r1
    2002:	01 05       	cpc	r16, r1
    2004:	11 05       	cpc	r17, r1
    2006:	29 f0       	breq	.+10     	; 0x2012 <__mulsf3+0x1ce>
    2008:	40 5c       	subi	r20, 0xC0	; 192
    200a:	5f 4f       	sbci	r21, 0xFF	; 255
    200c:	6f 4f       	sbci	r22, 0xFF	; 255
    200e:	7f 4f       	sbci	r23, 0xFF	; 255
    2010:	40 78       	andi	r20, 0x80	; 128
    2012:	1a 8e       	std	Y+26, r1	; 0x1a
    2014:	fe 17       	cp	r31, r30
    2016:	11 f0       	breq	.+4      	; 0x201c <__mulsf3+0x1d8>
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	8a 8f       	std	Y+26, r24	; 0x1a
    201c:	4d 8f       	std	Y+29, r20	; 0x1d
    201e:	5e 8f       	std	Y+30, r21	; 0x1e
    2020:	6f 8f       	std	Y+31, r22	; 0x1f
    2022:	78 a3       	std	Y+32, r23	; 0x20
    2024:	83 e0       	ldi	r24, 0x03	; 3
    2026:	89 8f       	std	Y+25, r24	; 0x19
    2028:	ce 01       	movw	r24, r28
    202a:	49 96       	adiw	r24, 0x19	; 25
    202c:	0e 94 ac 11 	call	0x2358	; 0x2358 <__pack_f>
    2030:	a0 96       	adiw	r28, 0x20	; 32
    2032:	e2 e1       	ldi	r30, 0x12	; 18
    2034:	0c 94 0c 3b 	jmp	0x7618	; 0x7618 <__epilogue_restores__>

00002038 <__divsf3>:
    2038:	a8 e1       	ldi	r26, 0x18	; 24
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e2 e2       	ldi	r30, 0x22	; 34
    203e:	f0 e1       	ldi	r31, 0x10	; 16
    2040:	0c 94 f8 3a 	jmp	0x75f0	; 0x75f0 <__prologue_saves__+0x10>
    2044:	69 83       	std	Y+1, r22	; 0x01
    2046:	7a 83       	std	Y+2, r23	; 0x02
    2048:	8b 83       	std	Y+3, r24	; 0x03
    204a:	9c 83       	std	Y+4, r25	; 0x04
    204c:	2d 83       	std	Y+5, r18	; 0x05
    204e:	3e 83       	std	Y+6, r19	; 0x06
    2050:	4f 83       	std	Y+7, r20	; 0x07
    2052:	58 87       	std	Y+8, r21	; 0x08
    2054:	b9 e0       	ldi	r27, 0x09	; 9
    2056:	eb 2e       	mov	r14, r27
    2058:	f1 2c       	mov	r15, r1
    205a:	ec 0e       	add	r14, r28
    205c:	fd 1e       	adc	r15, r29
    205e:	ce 01       	movw	r24, r28
    2060:	01 96       	adiw	r24, 0x01	; 1
    2062:	b7 01       	movw	r22, r14
    2064:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    2068:	8e 01       	movw	r16, r28
    206a:	0f 5e       	subi	r16, 0xEF	; 239
    206c:	1f 4f       	sbci	r17, 0xFF	; 255
    206e:	ce 01       	movw	r24, r28
    2070:	05 96       	adiw	r24, 0x05	; 5
    2072:	b8 01       	movw	r22, r16
    2074:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    2078:	29 85       	ldd	r18, Y+9	; 0x09
    207a:	22 30       	cpi	r18, 0x02	; 2
    207c:	08 f4       	brcc	.+2      	; 0x2080 <__divsf3+0x48>
    207e:	7e c0       	rjmp	.+252    	; 0x217c <__divsf3+0x144>
    2080:	39 89       	ldd	r19, Y+17	; 0x11
    2082:	32 30       	cpi	r19, 0x02	; 2
    2084:	10 f4       	brcc	.+4      	; 0x208a <__divsf3+0x52>
    2086:	b8 01       	movw	r22, r16
    2088:	7c c0       	rjmp	.+248    	; 0x2182 <__divsf3+0x14a>
    208a:	8a 85       	ldd	r24, Y+10	; 0x0a
    208c:	9a 89       	ldd	r25, Y+18	; 0x12
    208e:	89 27       	eor	r24, r25
    2090:	8a 87       	std	Y+10, r24	; 0x0a
    2092:	24 30       	cpi	r18, 0x04	; 4
    2094:	11 f0       	breq	.+4      	; 0x209a <__divsf3+0x62>
    2096:	22 30       	cpi	r18, 0x02	; 2
    2098:	31 f4       	brne	.+12     	; 0x20a6 <__divsf3+0x6e>
    209a:	23 17       	cp	r18, r19
    209c:	09 f0       	breq	.+2      	; 0x20a0 <__divsf3+0x68>
    209e:	6e c0       	rjmp	.+220    	; 0x217c <__divsf3+0x144>
    20a0:	65 e3       	ldi	r22, 0x35	; 53
    20a2:	71 e0       	ldi	r23, 0x01	; 1
    20a4:	6e c0       	rjmp	.+220    	; 0x2182 <__divsf3+0x14a>
    20a6:	34 30       	cpi	r19, 0x04	; 4
    20a8:	39 f4       	brne	.+14     	; 0x20b8 <__divsf3+0x80>
    20aa:	1d 86       	std	Y+13, r1	; 0x0d
    20ac:	1e 86       	std	Y+14, r1	; 0x0e
    20ae:	1f 86       	std	Y+15, r1	; 0x0f
    20b0:	18 8a       	std	Y+16, r1	; 0x10
    20b2:	1c 86       	std	Y+12, r1	; 0x0c
    20b4:	1b 86       	std	Y+11, r1	; 0x0b
    20b6:	04 c0       	rjmp	.+8      	; 0x20c0 <__divsf3+0x88>
    20b8:	32 30       	cpi	r19, 0x02	; 2
    20ba:	21 f4       	brne	.+8      	; 0x20c4 <__divsf3+0x8c>
    20bc:	84 e0       	ldi	r24, 0x04	; 4
    20be:	89 87       	std	Y+9, r24	; 0x09
    20c0:	b7 01       	movw	r22, r14
    20c2:	5f c0       	rjmp	.+190    	; 0x2182 <__divsf3+0x14a>
    20c4:	2b 85       	ldd	r18, Y+11	; 0x0b
    20c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    20c8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ca:	9c 89       	ldd	r25, Y+20	; 0x14
    20cc:	28 1b       	sub	r18, r24
    20ce:	39 0b       	sbc	r19, r25
    20d0:	3c 87       	std	Y+12, r19	; 0x0c
    20d2:	2b 87       	std	Y+11, r18	; 0x0b
    20d4:	ed 84       	ldd	r14, Y+13	; 0x0d
    20d6:	fe 84       	ldd	r15, Y+14	; 0x0e
    20d8:	0f 85       	ldd	r16, Y+15	; 0x0f
    20da:	18 89       	ldd	r17, Y+16	; 0x10
    20dc:	ad 88       	ldd	r10, Y+21	; 0x15
    20de:	be 88       	ldd	r11, Y+22	; 0x16
    20e0:	cf 88       	ldd	r12, Y+23	; 0x17
    20e2:	d8 8c       	ldd	r13, Y+24	; 0x18
    20e4:	ea 14       	cp	r14, r10
    20e6:	fb 04       	cpc	r15, r11
    20e8:	0c 05       	cpc	r16, r12
    20ea:	1d 05       	cpc	r17, r13
    20ec:	40 f4       	brcc	.+16     	; 0x20fe <__divsf3+0xc6>
    20ee:	ee 0c       	add	r14, r14
    20f0:	ff 1c       	adc	r15, r15
    20f2:	00 1f       	adc	r16, r16
    20f4:	11 1f       	adc	r17, r17
    20f6:	21 50       	subi	r18, 0x01	; 1
    20f8:	30 40       	sbci	r19, 0x00	; 0
    20fa:	3c 87       	std	Y+12, r19	; 0x0c
    20fc:	2b 87       	std	Y+11, r18	; 0x0b
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e0       	ldi	r20, 0x00	; 0
    2104:	50 e0       	ldi	r21, 0x00	; 0
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a0 e0       	ldi	r26, 0x00	; 0
    210c:	b0 e4       	ldi	r27, 0x40	; 64
    210e:	60 e0       	ldi	r22, 0x00	; 0
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	ea 14       	cp	r14, r10
    2114:	fb 04       	cpc	r15, r11
    2116:	0c 05       	cpc	r16, r12
    2118:	1d 05       	cpc	r17, r13
    211a:	40 f0       	brcs	.+16     	; 0x212c <__divsf3+0xf4>
    211c:	28 2b       	or	r18, r24
    211e:	39 2b       	or	r19, r25
    2120:	4a 2b       	or	r20, r26
    2122:	5b 2b       	or	r21, r27
    2124:	ea 18       	sub	r14, r10
    2126:	fb 08       	sbc	r15, r11
    2128:	0c 09       	sbc	r16, r12
    212a:	1d 09       	sbc	r17, r13
    212c:	b6 95       	lsr	r27
    212e:	a7 95       	ror	r26
    2130:	97 95       	ror	r25
    2132:	87 95       	ror	r24
    2134:	ee 0c       	add	r14, r14
    2136:	ff 1c       	adc	r15, r15
    2138:	00 1f       	adc	r16, r16
    213a:	11 1f       	adc	r17, r17
    213c:	6f 5f       	subi	r22, 0xFF	; 255
    213e:	7f 4f       	sbci	r23, 0xFF	; 255
    2140:	6f 31       	cpi	r22, 0x1F	; 31
    2142:	71 05       	cpc	r23, r1
    2144:	31 f7       	brne	.-52     	; 0x2112 <__divsf3+0xda>
    2146:	da 01       	movw	r26, r20
    2148:	c9 01       	movw	r24, r18
    214a:	8f 77       	andi	r24, 0x7F	; 127
    214c:	90 70       	andi	r25, 0x00	; 0
    214e:	a0 70       	andi	r26, 0x00	; 0
    2150:	b0 70       	andi	r27, 0x00	; 0
    2152:	80 34       	cpi	r24, 0x40	; 64
    2154:	91 05       	cpc	r25, r1
    2156:	a1 05       	cpc	r26, r1
    2158:	b1 05       	cpc	r27, r1
    215a:	61 f4       	brne	.+24     	; 0x2174 <__divsf3+0x13c>
    215c:	27 fd       	sbrc	r18, 7
    215e:	0a c0       	rjmp	.+20     	; 0x2174 <__divsf3+0x13c>
    2160:	e1 14       	cp	r14, r1
    2162:	f1 04       	cpc	r15, r1
    2164:	01 05       	cpc	r16, r1
    2166:	11 05       	cpc	r17, r1
    2168:	29 f0       	breq	.+10     	; 0x2174 <__divsf3+0x13c>
    216a:	20 5c       	subi	r18, 0xC0	; 192
    216c:	3f 4f       	sbci	r19, 0xFF	; 255
    216e:	4f 4f       	sbci	r20, 0xFF	; 255
    2170:	5f 4f       	sbci	r21, 0xFF	; 255
    2172:	20 78       	andi	r18, 0x80	; 128
    2174:	2d 87       	std	Y+13, r18	; 0x0d
    2176:	3e 87       	std	Y+14, r19	; 0x0e
    2178:	4f 87       	std	Y+15, r20	; 0x0f
    217a:	58 8b       	std	Y+16, r21	; 0x10
    217c:	be 01       	movw	r22, r28
    217e:	67 5f       	subi	r22, 0xF7	; 247
    2180:	7f 4f       	sbci	r23, 0xFF	; 255
    2182:	cb 01       	movw	r24, r22
    2184:	0e 94 ac 11 	call	0x2358	; 0x2358 <__pack_f>
    2188:	68 96       	adiw	r28, 0x18	; 24
    218a:	ea e0       	ldi	r30, 0x0A	; 10
    218c:	0c 94 14 3b 	jmp	0x7628	; 0x7628 <__epilogue_restores__+0x10>

00002190 <__gtsf2>:
    2190:	a8 e1       	ldi	r26, 0x18	; 24
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	ee ec       	ldi	r30, 0xCE	; 206
    2196:	f0 e1       	ldi	r31, 0x10	; 16
    2198:	0c 94 fc 3a 	jmp	0x75f8	; 0x75f8 <__prologue_saves__+0x18>
    219c:	69 83       	std	Y+1, r22	; 0x01
    219e:	7a 83       	std	Y+2, r23	; 0x02
    21a0:	8b 83       	std	Y+3, r24	; 0x03
    21a2:	9c 83       	std	Y+4, r25	; 0x04
    21a4:	2d 83       	std	Y+5, r18	; 0x05
    21a6:	3e 83       	std	Y+6, r19	; 0x06
    21a8:	4f 83       	std	Y+7, r20	; 0x07
    21aa:	58 87       	std	Y+8, r21	; 0x08
    21ac:	89 e0       	ldi	r24, 0x09	; 9
    21ae:	e8 2e       	mov	r14, r24
    21b0:	f1 2c       	mov	r15, r1
    21b2:	ec 0e       	add	r14, r28
    21b4:	fd 1e       	adc	r15, r29
    21b6:	ce 01       	movw	r24, r28
    21b8:	01 96       	adiw	r24, 0x01	; 1
    21ba:	b7 01       	movw	r22, r14
    21bc:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    21c0:	8e 01       	movw	r16, r28
    21c2:	0f 5e       	subi	r16, 0xEF	; 239
    21c4:	1f 4f       	sbci	r17, 0xFF	; 255
    21c6:	ce 01       	movw	r24, r28
    21c8:	05 96       	adiw	r24, 0x05	; 5
    21ca:	b8 01       	movw	r22, r16
    21cc:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    21d0:	89 85       	ldd	r24, Y+9	; 0x09
    21d2:	82 30       	cpi	r24, 0x02	; 2
    21d4:	40 f0       	brcs	.+16     	; 0x21e6 <__gtsf2+0x56>
    21d6:	89 89       	ldd	r24, Y+17	; 0x11
    21d8:	82 30       	cpi	r24, 0x02	; 2
    21da:	28 f0       	brcs	.+10     	; 0x21e6 <__gtsf2+0x56>
    21dc:	c7 01       	movw	r24, r14
    21de:	b8 01       	movw	r22, r16
    21e0:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__fpcmp_parts_f>
    21e4:	01 c0       	rjmp	.+2      	; 0x21e8 <__gtsf2+0x58>
    21e6:	8f ef       	ldi	r24, 0xFF	; 255
    21e8:	68 96       	adiw	r28, 0x18	; 24
    21ea:	e6 e0       	ldi	r30, 0x06	; 6
    21ec:	0c 94 18 3b 	jmp	0x7630	; 0x7630 <__epilogue_restores__+0x18>

000021f0 <__gesf2>:
    21f0:	a8 e1       	ldi	r26, 0x18	; 24
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	ee ef       	ldi	r30, 0xFE	; 254
    21f6:	f0 e1       	ldi	r31, 0x10	; 16
    21f8:	0c 94 fc 3a 	jmp	0x75f8	; 0x75f8 <__prologue_saves__+0x18>
    21fc:	69 83       	std	Y+1, r22	; 0x01
    21fe:	7a 83       	std	Y+2, r23	; 0x02
    2200:	8b 83       	std	Y+3, r24	; 0x03
    2202:	9c 83       	std	Y+4, r25	; 0x04
    2204:	2d 83       	std	Y+5, r18	; 0x05
    2206:	3e 83       	std	Y+6, r19	; 0x06
    2208:	4f 83       	std	Y+7, r20	; 0x07
    220a:	58 87       	std	Y+8, r21	; 0x08
    220c:	89 e0       	ldi	r24, 0x09	; 9
    220e:	e8 2e       	mov	r14, r24
    2210:	f1 2c       	mov	r15, r1
    2212:	ec 0e       	add	r14, r28
    2214:	fd 1e       	adc	r15, r29
    2216:	ce 01       	movw	r24, r28
    2218:	01 96       	adiw	r24, 0x01	; 1
    221a:	b7 01       	movw	r22, r14
    221c:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    2220:	8e 01       	movw	r16, r28
    2222:	0f 5e       	subi	r16, 0xEF	; 239
    2224:	1f 4f       	sbci	r17, 0xFF	; 255
    2226:	ce 01       	movw	r24, r28
    2228:	05 96       	adiw	r24, 0x05	; 5
    222a:	b8 01       	movw	r22, r16
    222c:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    2230:	89 85       	ldd	r24, Y+9	; 0x09
    2232:	82 30       	cpi	r24, 0x02	; 2
    2234:	40 f0       	brcs	.+16     	; 0x2246 <__gesf2+0x56>
    2236:	89 89       	ldd	r24, Y+17	; 0x11
    2238:	82 30       	cpi	r24, 0x02	; 2
    223a:	28 f0       	brcs	.+10     	; 0x2246 <__gesf2+0x56>
    223c:	c7 01       	movw	r24, r14
    223e:	b8 01       	movw	r22, r16
    2240:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__fpcmp_parts_f>
    2244:	01 c0       	rjmp	.+2      	; 0x2248 <__gesf2+0x58>
    2246:	8f ef       	ldi	r24, 0xFF	; 255
    2248:	68 96       	adiw	r28, 0x18	; 24
    224a:	e6 e0       	ldi	r30, 0x06	; 6
    224c:	0c 94 18 3b 	jmp	0x7630	; 0x7630 <__epilogue_restores__+0x18>

00002250 <__ltsf2>:
    2250:	a8 e1       	ldi	r26, 0x18	; 24
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	ee e2       	ldi	r30, 0x2E	; 46
    2256:	f1 e1       	ldi	r31, 0x11	; 17
    2258:	0c 94 fc 3a 	jmp	0x75f8	; 0x75f8 <__prologue_saves__+0x18>
    225c:	69 83       	std	Y+1, r22	; 0x01
    225e:	7a 83       	std	Y+2, r23	; 0x02
    2260:	8b 83       	std	Y+3, r24	; 0x03
    2262:	9c 83       	std	Y+4, r25	; 0x04
    2264:	2d 83       	std	Y+5, r18	; 0x05
    2266:	3e 83       	std	Y+6, r19	; 0x06
    2268:	4f 83       	std	Y+7, r20	; 0x07
    226a:	58 87       	std	Y+8, r21	; 0x08
    226c:	89 e0       	ldi	r24, 0x09	; 9
    226e:	e8 2e       	mov	r14, r24
    2270:	f1 2c       	mov	r15, r1
    2272:	ec 0e       	add	r14, r28
    2274:	fd 1e       	adc	r15, r29
    2276:	ce 01       	movw	r24, r28
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	b7 01       	movw	r22, r14
    227c:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    2280:	8e 01       	movw	r16, r28
    2282:	0f 5e       	subi	r16, 0xEF	; 239
    2284:	1f 4f       	sbci	r17, 0xFF	; 255
    2286:	ce 01       	movw	r24, r28
    2288:	05 96       	adiw	r24, 0x05	; 5
    228a:	b8 01       	movw	r22, r16
    228c:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    2290:	89 85       	ldd	r24, Y+9	; 0x09
    2292:	82 30       	cpi	r24, 0x02	; 2
    2294:	40 f0       	brcs	.+16     	; 0x22a6 <__ltsf2+0x56>
    2296:	89 89       	ldd	r24, Y+17	; 0x11
    2298:	82 30       	cpi	r24, 0x02	; 2
    229a:	28 f0       	brcs	.+10     	; 0x22a6 <__ltsf2+0x56>
    229c:	c7 01       	movw	r24, r14
    229e:	b8 01       	movw	r22, r16
    22a0:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__fpcmp_parts_f>
    22a4:	01 c0       	rjmp	.+2      	; 0x22a8 <__ltsf2+0x58>
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	68 96       	adiw	r28, 0x18	; 24
    22aa:	e6 e0       	ldi	r30, 0x06	; 6
    22ac:	0c 94 18 3b 	jmp	0x7630	; 0x7630 <__epilogue_restores__+0x18>

000022b0 <__fixsfsi>:
    22b0:	ac e0       	ldi	r26, 0x0C	; 12
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	ee e5       	ldi	r30, 0x5E	; 94
    22b6:	f1 e1       	ldi	r31, 0x11	; 17
    22b8:	0c 94 00 3b 	jmp	0x7600	; 0x7600 <__prologue_saves__+0x20>
    22bc:	69 83       	std	Y+1, r22	; 0x01
    22be:	7a 83       	std	Y+2, r23	; 0x02
    22c0:	8b 83       	std	Y+3, r24	; 0x03
    22c2:	9c 83       	std	Y+4, r25	; 0x04
    22c4:	ce 01       	movw	r24, r28
    22c6:	01 96       	adiw	r24, 0x01	; 1
    22c8:	be 01       	movw	r22, r28
    22ca:	6b 5f       	subi	r22, 0xFB	; 251
    22cc:	7f 4f       	sbci	r23, 0xFF	; 255
    22ce:	0e 94 81 12 	call	0x2502	; 0x2502 <__unpack_f>
    22d2:	8d 81       	ldd	r24, Y+5	; 0x05
    22d4:	82 30       	cpi	r24, 0x02	; 2
    22d6:	61 f1       	breq	.+88     	; 0x2330 <__fixsfsi+0x80>
    22d8:	82 30       	cpi	r24, 0x02	; 2
    22da:	50 f1       	brcs	.+84     	; 0x2330 <__fixsfsi+0x80>
    22dc:	84 30       	cpi	r24, 0x04	; 4
    22de:	21 f4       	brne	.+8      	; 0x22e8 <__fixsfsi+0x38>
    22e0:	8e 81       	ldd	r24, Y+6	; 0x06
    22e2:	88 23       	and	r24, r24
    22e4:	51 f1       	breq	.+84     	; 0x233a <__fixsfsi+0x8a>
    22e6:	2e c0       	rjmp	.+92     	; 0x2344 <__fixsfsi+0x94>
    22e8:	2f 81       	ldd	r18, Y+7	; 0x07
    22ea:	38 85       	ldd	r19, Y+8	; 0x08
    22ec:	37 fd       	sbrc	r19, 7
    22ee:	20 c0       	rjmp	.+64     	; 0x2330 <__fixsfsi+0x80>
    22f0:	6e 81       	ldd	r22, Y+6	; 0x06
    22f2:	2f 31       	cpi	r18, 0x1F	; 31
    22f4:	31 05       	cpc	r19, r1
    22f6:	1c f0       	brlt	.+6      	; 0x22fe <__fixsfsi+0x4e>
    22f8:	66 23       	and	r22, r22
    22fa:	f9 f0       	breq	.+62     	; 0x233a <__fixsfsi+0x8a>
    22fc:	23 c0       	rjmp	.+70     	; 0x2344 <__fixsfsi+0x94>
    22fe:	8e e1       	ldi	r24, 0x1E	; 30
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	82 1b       	sub	r24, r18
    2304:	93 0b       	sbc	r25, r19
    2306:	29 85       	ldd	r18, Y+9	; 0x09
    2308:	3a 85       	ldd	r19, Y+10	; 0x0a
    230a:	4b 85       	ldd	r20, Y+11	; 0x0b
    230c:	5c 85       	ldd	r21, Y+12	; 0x0c
    230e:	04 c0       	rjmp	.+8      	; 0x2318 <__fixsfsi+0x68>
    2310:	56 95       	lsr	r21
    2312:	47 95       	ror	r20
    2314:	37 95       	ror	r19
    2316:	27 95       	ror	r18
    2318:	8a 95       	dec	r24
    231a:	d2 f7       	brpl	.-12     	; 0x2310 <__fixsfsi+0x60>
    231c:	66 23       	and	r22, r22
    231e:	b1 f0       	breq	.+44     	; 0x234c <__fixsfsi+0x9c>
    2320:	50 95       	com	r21
    2322:	40 95       	com	r20
    2324:	30 95       	com	r19
    2326:	21 95       	neg	r18
    2328:	3f 4f       	sbci	r19, 0xFF	; 255
    232a:	4f 4f       	sbci	r20, 0xFF	; 255
    232c:	5f 4f       	sbci	r21, 0xFF	; 255
    232e:	0e c0       	rjmp	.+28     	; 0x234c <__fixsfsi+0x9c>
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e0       	ldi	r20, 0x00	; 0
    2336:	50 e0       	ldi	r21, 0x00	; 0
    2338:	09 c0       	rjmp	.+18     	; 0x234c <__fixsfsi+0x9c>
    233a:	2f ef       	ldi	r18, 0xFF	; 255
    233c:	3f ef       	ldi	r19, 0xFF	; 255
    233e:	4f ef       	ldi	r20, 0xFF	; 255
    2340:	5f e7       	ldi	r21, 0x7F	; 127
    2342:	04 c0       	rjmp	.+8      	; 0x234c <__fixsfsi+0x9c>
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e0       	ldi	r20, 0x00	; 0
    234a:	50 e8       	ldi	r21, 0x80	; 128
    234c:	b9 01       	movw	r22, r18
    234e:	ca 01       	movw	r24, r20
    2350:	2c 96       	adiw	r28, 0x0c	; 12
    2352:	e2 e0       	ldi	r30, 0x02	; 2
    2354:	0c 94 1c 3b 	jmp	0x7638	; 0x7638 <__epilogue_restores__+0x20>

00002358 <__pack_f>:
    2358:	df 92       	push	r13
    235a:	ef 92       	push	r14
    235c:	ff 92       	push	r15
    235e:	0f 93       	push	r16
    2360:	1f 93       	push	r17
    2362:	fc 01       	movw	r30, r24
    2364:	e4 80       	ldd	r14, Z+4	; 0x04
    2366:	f5 80       	ldd	r15, Z+5	; 0x05
    2368:	06 81       	ldd	r16, Z+6	; 0x06
    236a:	17 81       	ldd	r17, Z+7	; 0x07
    236c:	d1 80       	ldd	r13, Z+1	; 0x01
    236e:	80 81       	ld	r24, Z
    2370:	82 30       	cpi	r24, 0x02	; 2
    2372:	48 f4       	brcc	.+18     	; 0x2386 <__pack_f+0x2e>
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	a0 e1       	ldi	r26, 0x10	; 16
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	e8 2a       	or	r14, r24
    237e:	f9 2a       	or	r15, r25
    2380:	0a 2b       	or	r16, r26
    2382:	1b 2b       	or	r17, r27
    2384:	a5 c0       	rjmp	.+330    	; 0x24d0 <__pack_f+0x178>
    2386:	84 30       	cpi	r24, 0x04	; 4
    2388:	09 f4       	brne	.+2      	; 0x238c <__pack_f+0x34>
    238a:	9f c0       	rjmp	.+318    	; 0x24ca <__pack_f+0x172>
    238c:	82 30       	cpi	r24, 0x02	; 2
    238e:	21 f4       	brne	.+8      	; 0x2398 <__pack_f+0x40>
    2390:	ee 24       	eor	r14, r14
    2392:	ff 24       	eor	r15, r15
    2394:	87 01       	movw	r16, r14
    2396:	05 c0       	rjmp	.+10     	; 0x23a2 <__pack_f+0x4a>
    2398:	e1 14       	cp	r14, r1
    239a:	f1 04       	cpc	r15, r1
    239c:	01 05       	cpc	r16, r1
    239e:	11 05       	cpc	r17, r1
    23a0:	19 f4       	brne	.+6      	; 0x23a8 <__pack_f+0x50>
    23a2:	e0 e0       	ldi	r30, 0x00	; 0
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	96 c0       	rjmp	.+300    	; 0x24d4 <__pack_f+0x17c>
    23a8:	62 81       	ldd	r22, Z+2	; 0x02
    23aa:	73 81       	ldd	r23, Z+3	; 0x03
    23ac:	9f ef       	ldi	r25, 0xFF	; 255
    23ae:	62 38       	cpi	r22, 0x82	; 130
    23b0:	79 07       	cpc	r23, r25
    23b2:	0c f0       	brlt	.+2      	; 0x23b6 <__pack_f+0x5e>
    23b4:	5b c0       	rjmp	.+182    	; 0x246c <__pack_f+0x114>
    23b6:	22 e8       	ldi	r18, 0x82	; 130
    23b8:	3f ef       	ldi	r19, 0xFF	; 255
    23ba:	26 1b       	sub	r18, r22
    23bc:	37 0b       	sbc	r19, r23
    23be:	2a 31       	cpi	r18, 0x1A	; 26
    23c0:	31 05       	cpc	r19, r1
    23c2:	2c f0       	brlt	.+10     	; 0x23ce <__pack_f+0x76>
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	50 e0       	ldi	r21, 0x00	; 0
    23cc:	2a c0       	rjmp	.+84     	; 0x2422 <__pack_f+0xca>
    23ce:	b8 01       	movw	r22, r16
    23d0:	a7 01       	movw	r20, r14
    23d2:	02 2e       	mov	r0, r18
    23d4:	04 c0       	rjmp	.+8      	; 0x23de <__pack_f+0x86>
    23d6:	76 95       	lsr	r23
    23d8:	67 95       	ror	r22
    23da:	57 95       	ror	r21
    23dc:	47 95       	ror	r20
    23de:	0a 94       	dec	r0
    23e0:	d2 f7       	brpl	.-12     	; 0x23d6 <__pack_f+0x7e>
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	a0 e0       	ldi	r26, 0x00	; 0
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	04 c0       	rjmp	.+8      	; 0x23f4 <__pack_f+0x9c>
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	aa 1f       	adc	r26, r26
    23f2:	bb 1f       	adc	r27, r27
    23f4:	2a 95       	dec	r18
    23f6:	d2 f7       	brpl	.-12     	; 0x23ec <__pack_f+0x94>
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	a1 09       	sbc	r26, r1
    23fc:	b1 09       	sbc	r27, r1
    23fe:	8e 21       	and	r24, r14
    2400:	9f 21       	and	r25, r15
    2402:	a0 23       	and	r26, r16
    2404:	b1 23       	and	r27, r17
    2406:	00 97       	sbiw	r24, 0x00	; 0
    2408:	a1 05       	cpc	r26, r1
    240a:	b1 05       	cpc	r27, r1
    240c:	21 f0       	breq	.+8      	; 0x2416 <__pack_f+0xbe>
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	a0 e0       	ldi	r26, 0x00	; 0
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	9a 01       	movw	r18, r20
    2418:	ab 01       	movw	r20, r22
    241a:	28 2b       	or	r18, r24
    241c:	39 2b       	or	r19, r25
    241e:	4a 2b       	or	r20, r26
    2420:	5b 2b       	or	r21, r27
    2422:	da 01       	movw	r26, r20
    2424:	c9 01       	movw	r24, r18
    2426:	8f 77       	andi	r24, 0x7F	; 127
    2428:	90 70       	andi	r25, 0x00	; 0
    242a:	a0 70       	andi	r26, 0x00	; 0
    242c:	b0 70       	andi	r27, 0x00	; 0
    242e:	80 34       	cpi	r24, 0x40	; 64
    2430:	91 05       	cpc	r25, r1
    2432:	a1 05       	cpc	r26, r1
    2434:	b1 05       	cpc	r27, r1
    2436:	39 f4       	brne	.+14     	; 0x2446 <__pack_f+0xee>
    2438:	27 ff       	sbrs	r18, 7
    243a:	09 c0       	rjmp	.+18     	; 0x244e <__pack_f+0xf6>
    243c:	20 5c       	subi	r18, 0xC0	; 192
    243e:	3f 4f       	sbci	r19, 0xFF	; 255
    2440:	4f 4f       	sbci	r20, 0xFF	; 255
    2442:	5f 4f       	sbci	r21, 0xFF	; 255
    2444:	04 c0       	rjmp	.+8      	; 0x244e <__pack_f+0xf6>
    2446:	21 5c       	subi	r18, 0xC1	; 193
    2448:	3f 4f       	sbci	r19, 0xFF	; 255
    244a:	4f 4f       	sbci	r20, 0xFF	; 255
    244c:	5f 4f       	sbci	r21, 0xFF	; 255
    244e:	e0 e0       	ldi	r30, 0x00	; 0
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	20 30       	cpi	r18, 0x00	; 0
    2454:	a0 e0       	ldi	r26, 0x00	; 0
    2456:	3a 07       	cpc	r19, r26
    2458:	a0 e0       	ldi	r26, 0x00	; 0
    245a:	4a 07       	cpc	r20, r26
    245c:	a0 e4       	ldi	r26, 0x40	; 64
    245e:	5a 07       	cpc	r21, r26
    2460:	10 f0       	brcs	.+4      	; 0x2466 <__pack_f+0x10e>
    2462:	e1 e0       	ldi	r30, 0x01	; 1
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	79 01       	movw	r14, r18
    2468:	8a 01       	movw	r16, r20
    246a:	27 c0       	rjmp	.+78     	; 0x24ba <__pack_f+0x162>
    246c:	60 38       	cpi	r22, 0x80	; 128
    246e:	71 05       	cpc	r23, r1
    2470:	64 f5       	brge	.+88     	; 0x24ca <__pack_f+0x172>
    2472:	fb 01       	movw	r30, r22
    2474:	e1 58       	subi	r30, 0x81	; 129
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	d8 01       	movw	r26, r16
    247a:	c7 01       	movw	r24, r14
    247c:	8f 77       	andi	r24, 0x7F	; 127
    247e:	90 70       	andi	r25, 0x00	; 0
    2480:	a0 70       	andi	r26, 0x00	; 0
    2482:	b0 70       	andi	r27, 0x00	; 0
    2484:	80 34       	cpi	r24, 0x40	; 64
    2486:	91 05       	cpc	r25, r1
    2488:	a1 05       	cpc	r26, r1
    248a:	b1 05       	cpc	r27, r1
    248c:	39 f4       	brne	.+14     	; 0x249c <__pack_f+0x144>
    248e:	e7 fe       	sbrs	r14, 7
    2490:	0d c0       	rjmp	.+26     	; 0x24ac <__pack_f+0x154>
    2492:	80 e4       	ldi	r24, 0x40	; 64
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	a0 e0       	ldi	r26, 0x00	; 0
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	04 c0       	rjmp	.+8      	; 0x24a4 <__pack_f+0x14c>
    249c:	8f e3       	ldi	r24, 0x3F	; 63
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	a0 e0       	ldi	r26, 0x00	; 0
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	e8 0e       	add	r14, r24
    24a6:	f9 1e       	adc	r15, r25
    24a8:	0a 1f       	adc	r16, r26
    24aa:	1b 1f       	adc	r17, r27
    24ac:	17 ff       	sbrs	r17, 7
    24ae:	05 c0       	rjmp	.+10     	; 0x24ba <__pack_f+0x162>
    24b0:	16 95       	lsr	r17
    24b2:	07 95       	ror	r16
    24b4:	f7 94       	ror	r15
    24b6:	e7 94       	ror	r14
    24b8:	31 96       	adiw	r30, 0x01	; 1
    24ba:	87 e0       	ldi	r24, 0x07	; 7
    24bc:	16 95       	lsr	r17
    24be:	07 95       	ror	r16
    24c0:	f7 94       	ror	r15
    24c2:	e7 94       	ror	r14
    24c4:	8a 95       	dec	r24
    24c6:	d1 f7       	brne	.-12     	; 0x24bc <__pack_f+0x164>
    24c8:	05 c0       	rjmp	.+10     	; 0x24d4 <__pack_f+0x17c>
    24ca:	ee 24       	eor	r14, r14
    24cc:	ff 24       	eor	r15, r15
    24ce:	87 01       	movw	r16, r14
    24d0:	ef ef       	ldi	r30, 0xFF	; 255
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	6e 2f       	mov	r22, r30
    24d6:	67 95       	ror	r22
    24d8:	66 27       	eor	r22, r22
    24da:	67 95       	ror	r22
    24dc:	90 2f       	mov	r25, r16
    24de:	9f 77       	andi	r25, 0x7F	; 127
    24e0:	d7 94       	ror	r13
    24e2:	dd 24       	eor	r13, r13
    24e4:	d7 94       	ror	r13
    24e6:	8e 2f       	mov	r24, r30
    24e8:	86 95       	lsr	r24
    24ea:	49 2f       	mov	r20, r25
    24ec:	46 2b       	or	r20, r22
    24ee:	58 2f       	mov	r21, r24
    24f0:	5d 29       	or	r21, r13
    24f2:	b7 01       	movw	r22, r14
    24f4:	ca 01       	movw	r24, r20
    24f6:	1f 91       	pop	r17
    24f8:	0f 91       	pop	r16
    24fa:	ff 90       	pop	r15
    24fc:	ef 90       	pop	r14
    24fe:	df 90       	pop	r13
    2500:	08 95       	ret

00002502 <__unpack_f>:
    2502:	fc 01       	movw	r30, r24
    2504:	db 01       	movw	r26, r22
    2506:	40 81       	ld	r20, Z
    2508:	51 81       	ldd	r21, Z+1	; 0x01
    250a:	22 81       	ldd	r18, Z+2	; 0x02
    250c:	62 2f       	mov	r22, r18
    250e:	6f 77       	andi	r22, 0x7F	; 127
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	22 1f       	adc	r18, r18
    2514:	22 27       	eor	r18, r18
    2516:	22 1f       	adc	r18, r18
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	89 2f       	mov	r24, r25
    251c:	88 0f       	add	r24, r24
    251e:	82 2b       	or	r24, r18
    2520:	28 2f       	mov	r18, r24
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	99 1f       	adc	r25, r25
    2526:	99 27       	eor	r25, r25
    2528:	99 1f       	adc	r25, r25
    252a:	11 96       	adiw	r26, 0x01	; 1
    252c:	9c 93       	st	X, r25
    252e:	11 97       	sbiw	r26, 0x01	; 1
    2530:	21 15       	cp	r18, r1
    2532:	31 05       	cpc	r19, r1
    2534:	a9 f5       	brne	.+106    	; 0x25a0 <__unpack_f+0x9e>
    2536:	41 15       	cp	r20, r1
    2538:	51 05       	cpc	r21, r1
    253a:	61 05       	cpc	r22, r1
    253c:	71 05       	cpc	r23, r1
    253e:	11 f4       	brne	.+4      	; 0x2544 <__unpack_f+0x42>
    2540:	82 e0       	ldi	r24, 0x02	; 2
    2542:	37 c0       	rjmp	.+110    	; 0x25b2 <__unpack_f+0xb0>
    2544:	82 e8       	ldi	r24, 0x82	; 130
    2546:	9f ef       	ldi	r25, 0xFF	; 255
    2548:	13 96       	adiw	r26, 0x03	; 3
    254a:	9c 93       	st	X, r25
    254c:	8e 93       	st	-X, r24
    254e:	12 97       	sbiw	r26, 0x02	; 2
    2550:	9a 01       	movw	r18, r20
    2552:	ab 01       	movw	r20, r22
    2554:	67 e0       	ldi	r22, 0x07	; 7
    2556:	22 0f       	add	r18, r18
    2558:	33 1f       	adc	r19, r19
    255a:	44 1f       	adc	r20, r20
    255c:	55 1f       	adc	r21, r21
    255e:	6a 95       	dec	r22
    2560:	d1 f7       	brne	.-12     	; 0x2556 <__unpack_f+0x54>
    2562:	83 e0       	ldi	r24, 0x03	; 3
    2564:	8c 93       	st	X, r24
    2566:	0d c0       	rjmp	.+26     	; 0x2582 <__unpack_f+0x80>
    2568:	22 0f       	add	r18, r18
    256a:	33 1f       	adc	r19, r19
    256c:	44 1f       	adc	r20, r20
    256e:	55 1f       	adc	r21, r21
    2570:	12 96       	adiw	r26, 0x02	; 2
    2572:	8d 91       	ld	r24, X+
    2574:	9c 91       	ld	r25, X
    2576:	13 97       	sbiw	r26, 0x03	; 3
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	13 96       	adiw	r26, 0x03	; 3
    257c:	9c 93       	st	X, r25
    257e:	8e 93       	st	-X, r24
    2580:	12 97       	sbiw	r26, 0x02	; 2
    2582:	20 30       	cpi	r18, 0x00	; 0
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	38 07       	cpc	r19, r24
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	48 07       	cpc	r20, r24
    258c:	80 e4       	ldi	r24, 0x40	; 64
    258e:	58 07       	cpc	r21, r24
    2590:	58 f3       	brcs	.-42     	; 0x2568 <__unpack_f+0x66>
    2592:	14 96       	adiw	r26, 0x04	; 4
    2594:	2d 93       	st	X+, r18
    2596:	3d 93       	st	X+, r19
    2598:	4d 93       	st	X+, r20
    259a:	5c 93       	st	X, r21
    259c:	17 97       	sbiw	r26, 0x07	; 7
    259e:	08 95       	ret
    25a0:	2f 3f       	cpi	r18, 0xFF	; 255
    25a2:	31 05       	cpc	r19, r1
    25a4:	79 f4       	brne	.+30     	; 0x25c4 <__unpack_f+0xc2>
    25a6:	41 15       	cp	r20, r1
    25a8:	51 05       	cpc	r21, r1
    25aa:	61 05       	cpc	r22, r1
    25ac:	71 05       	cpc	r23, r1
    25ae:	19 f4       	brne	.+6      	; 0x25b6 <__unpack_f+0xb4>
    25b0:	84 e0       	ldi	r24, 0x04	; 4
    25b2:	8c 93       	st	X, r24
    25b4:	08 95       	ret
    25b6:	64 ff       	sbrs	r22, 4
    25b8:	03 c0       	rjmp	.+6      	; 0x25c0 <__unpack_f+0xbe>
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	8c 93       	st	X, r24
    25be:	12 c0       	rjmp	.+36     	; 0x25e4 <__unpack_f+0xe2>
    25c0:	1c 92       	st	X, r1
    25c2:	10 c0       	rjmp	.+32     	; 0x25e4 <__unpack_f+0xe2>
    25c4:	2f 57       	subi	r18, 0x7F	; 127
    25c6:	30 40       	sbci	r19, 0x00	; 0
    25c8:	13 96       	adiw	r26, 0x03	; 3
    25ca:	3c 93       	st	X, r19
    25cc:	2e 93       	st	-X, r18
    25ce:	12 97       	sbiw	r26, 0x02	; 2
    25d0:	83 e0       	ldi	r24, 0x03	; 3
    25d2:	8c 93       	st	X, r24
    25d4:	87 e0       	ldi	r24, 0x07	; 7
    25d6:	44 0f       	add	r20, r20
    25d8:	55 1f       	adc	r21, r21
    25da:	66 1f       	adc	r22, r22
    25dc:	77 1f       	adc	r23, r23
    25de:	8a 95       	dec	r24
    25e0:	d1 f7       	brne	.-12     	; 0x25d6 <__unpack_f+0xd4>
    25e2:	70 64       	ori	r23, 0x40	; 64
    25e4:	14 96       	adiw	r26, 0x04	; 4
    25e6:	4d 93       	st	X+, r20
    25e8:	5d 93       	st	X+, r21
    25ea:	6d 93       	st	X+, r22
    25ec:	7c 93       	st	X, r23
    25ee:	17 97       	sbiw	r26, 0x07	; 7
    25f0:	08 95       	ret

000025f2 <__fpcmp_parts_f>:
    25f2:	1f 93       	push	r17
    25f4:	dc 01       	movw	r26, r24
    25f6:	fb 01       	movw	r30, r22
    25f8:	9c 91       	ld	r25, X
    25fa:	92 30       	cpi	r25, 0x02	; 2
    25fc:	08 f4       	brcc	.+2      	; 0x2600 <__fpcmp_parts_f+0xe>
    25fe:	47 c0       	rjmp	.+142    	; 0x268e <__fpcmp_parts_f+0x9c>
    2600:	80 81       	ld	r24, Z
    2602:	82 30       	cpi	r24, 0x02	; 2
    2604:	08 f4       	brcc	.+2      	; 0x2608 <__fpcmp_parts_f+0x16>
    2606:	43 c0       	rjmp	.+134    	; 0x268e <__fpcmp_parts_f+0x9c>
    2608:	94 30       	cpi	r25, 0x04	; 4
    260a:	51 f4       	brne	.+20     	; 0x2620 <__fpcmp_parts_f+0x2e>
    260c:	11 96       	adiw	r26, 0x01	; 1
    260e:	1c 91       	ld	r17, X
    2610:	84 30       	cpi	r24, 0x04	; 4
    2612:	99 f5       	brne	.+102    	; 0x267a <__fpcmp_parts_f+0x88>
    2614:	81 81       	ldd	r24, Z+1	; 0x01
    2616:	68 2f       	mov	r22, r24
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	61 1b       	sub	r22, r17
    261c:	71 09       	sbc	r23, r1
    261e:	3f c0       	rjmp	.+126    	; 0x269e <__fpcmp_parts_f+0xac>
    2620:	84 30       	cpi	r24, 0x04	; 4
    2622:	21 f0       	breq	.+8      	; 0x262c <__fpcmp_parts_f+0x3a>
    2624:	92 30       	cpi	r25, 0x02	; 2
    2626:	31 f4       	brne	.+12     	; 0x2634 <__fpcmp_parts_f+0x42>
    2628:	82 30       	cpi	r24, 0x02	; 2
    262a:	b9 f1       	breq	.+110    	; 0x269a <__fpcmp_parts_f+0xa8>
    262c:	81 81       	ldd	r24, Z+1	; 0x01
    262e:	88 23       	and	r24, r24
    2630:	89 f1       	breq	.+98     	; 0x2694 <__fpcmp_parts_f+0xa2>
    2632:	2d c0       	rjmp	.+90     	; 0x268e <__fpcmp_parts_f+0x9c>
    2634:	11 96       	adiw	r26, 0x01	; 1
    2636:	1c 91       	ld	r17, X
    2638:	11 97       	sbiw	r26, 0x01	; 1
    263a:	82 30       	cpi	r24, 0x02	; 2
    263c:	f1 f0       	breq	.+60     	; 0x267a <__fpcmp_parts_f+0x88>
    263e:	81 81       	ldd	r24, Z+1	; 0x01
    2640:	18 17       	cp	r17, r24
    2642:	d9 f4       	brne	.+54     	; 0x267a <__fpcmp_parts_f+0x88>
    2644:	12 96       	adiw	r26, 0x02	; 2
    2646:	2d 91       	ld	r18, X+
    2648:	3c 91       	ld	r19, X
    264a:	13 97       	sbiw	r26, 0x03	; 3
    264c:	82 81       	ldd	r24, Z+2	; 0x02
    264e:	93 81       	ldd	r25, Z+3	; 0x03
    2650:	82 17       	cp	r24, r18
    2652:	93 07       	cpc	r25, r19
    2654:	94 f0       	brlt	.+36     	; 0x267a <__fpcmp_parts_f+0x88>
    2656:	28 17       	cp	r18, r24
    2658:	39 07       	cpc	r19, r25
    265a:	bc f0       	brlt	.+46     	; 0x268a <__fpcmp_parts_f+0x98>
    265c:	14 96       	adiw	r26, 0x04	; 4
    265e:	8d 91       	ld	r24, X+
    2660:	9d 91       	ld	r25, X+
    2662:	0d 90       	ld	r0, X+
    2664:	bc 91       	ld	r27, X
    2666:	a0 2d       	mov	r26, r0
    2668:	24 81       	ldd	r18, Z+4	; 0x04
    266a:	35 81       	ldd	r19, Z+5	; 0x05
    266c:	46 81       	ldd	r20, Z+6	; 0x06
    266e:	57 81       	ldd	r21, Z+7	; 0x07
    2670:	28 17       	cp	r18, r24
    2672:	39 07       	cpc	r19, r25
    2674:	4a 07       	cpc	r20, r26
    2676:	5b 07       	cpc	r21, r27
    2678:	18 f4       	brcc	.+6      	; 0x2680 <__fpcmp_parts_f+0x8e>
    267a:	11 23       	and	r17, r17
    267c:	41 f0       	breq	.+16     	; 0x268e <__fpcmp_parts_f+0x9c>
    267e:	0a c0       	rjmp	.+20     	; 0x2694 <__fpcmp_parts_f+0xa2>
    2680:	82 17       	cp	r24, r18
    2682:	93 07       	cpc	r25, r19
    2684:	a4 07       	cpc	r26, r20
    2686:	b5 07       	cpc	r27, r21
    2688:	40 f4       	brcc	.+16     	; 0x269a <__fpcmp_parts_f+0xa8>
    268a:	11 23       	and	r17, r17
    268c:	19 f0       	breq	.+6      	; 0x2694 <__fpcmp_parts_f+0xa2>
    268e:	61 e0       	ldi	r22, 0x01	; 1
    2690:	70 e0       	ldi	r23, 0x00	; 0
    2692:	05 c0       	rjmp	.+10     	; 0x269e <__fpcmp_parts_f+0xac>
    2694:	6f ef       	ldi	r22, 0xFF	; 255
    2696:	7f ef       	ldi	r23, 0xFF	; 255
    2698:	02 c0       	rjmp	.+4      	; 0x269e <__fpcmp_parts_f+0xac>
    269a:	60 e0       	ldi	r22, 0x00	; 0
    269c:	70 e0       	ldi	r23, 0x00	; 0
    269e:	cb 01       	movw	r24, r22
    26a0:	1f 91       	pop	r17
    26a2:	08 95       	ret

000026a4 <Timer3_Init>:
#include"Timer3.h"
void Timer3_Init(timer3_mode_type timer_mode,prescaler3_type scaler,OC3_mode_type oc3_mode,OC3_ch_type channel_t)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	2c 97       	sbiw	r28, 0x0c	; 12
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	6a 83       	std	Y+2, r22	; 0x02
    26bc:	4b 83       	std	Y+3, r20	; 0x03
    26be:	2c 83       	std	Y+4, r18	; 0x04
switch (timer_mode)
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	28 2f       	mov	r18, r24
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	3c 87       	std	Y+12, r19	; 0x0c
    26c8:	2b 87       	std	Y+11, r18	; 0x0b
    26ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    26cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    26ce:	87 30       	cpi	r24, 0x07	; 7
    26d0:	91 05       	cpc	r25, r1
    26d2:	09 f4       	brne	.+2      	; 0x26d6 <Timer3_Init+0x32>
    26d4:	24 c1       	rjmp	.+584    	; 0x291e <Timer3_Init+0x27a>
    26d6:	2b 85       	ldd	r18, Y+11	; 0x0b
    26d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    26da:	28 30       	cpi	r18, 0x08	; 8
    26dc:	31 05       	cpc	r19, r1
    26de:	4c f5       	brge	.+82     	; 0x2732 <Timer3_Init+0x8e>
    26e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    26e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    26e4:	83 30       	cpi	r24, 0x03	; 3
    26e6:	91 05       	cpc	r25, r1
    26e8:	09 f4       	brne	.+2      	; 0x26ec <Timer3_Init+0x48>
    26ea:	a5 c0       	rjmp	.+330    	; 0x2836 <Timer3_Init+0x192>
    26ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    26ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    26f0:	24 30       	cpi	r18, 0x04	; 4
    26f2:	31 05       	cpc	r19, r1
    26f4:	8c f4       	brge	.+34     	; 0x2718 <Timer3_Init+0x74>
    26f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    26f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    26fa:	81 30       	cpi	r24, 0x01	; 1
    26fc:	91 05       	cpc	r25, r1
    26fe:	09 f4       	brne	.+2      	; 0x2702 <Timer3_Init+0x5e>
    2700:	60 c0       	rjmp	.+192    	; 0x27c2 <Timer3_Init+0x11e>
    2702:	2b 85       	ldd	r18, Y+11	; 0x0b
    2704:	3c 85       	ldd	r19, Y+12	; 0x0c
    2706:	22 30       	cpi	r18, 0x02	; 2
    2708:	31 05       	cpc	r19, r1
    270a:	0c f0       	brlt	.+2      	; 0x270e <Timer3_Init+0x6a>
    270c:	77 c0       	rjmp	.+238    	; 0x27fc <Timer3_Init+0x158>
    270e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2710:	9c 85       	ldd	r25, Y+12	; 0x0c
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	c9 f1       	breq	.+114    	; 0x2788 <Timer3_Init+0xe4>
    2716:	ea c1       	rjmp	.+980    	; 0x2aec <Timer3_Init+0x448>
    2718:	2b 85       	ldd	r18, Y+11	; 0x0b
    271a:	3c 85       	ldd	r19, Y+12	; 0x0c
    271c:	25 30       	cpi	r18, 0x05	; 5
    271e:	31 05       	cpc	r19, r1
    2720:	09 f4       	brne	.+2      	; 0x2724 <Timer3_Init+0x80>
    2722:	c3 c0       	rjmp	.+390    	; 0x28aa <Timer3_Init+0x206>
    2724:	8b 85       	ldd	r24, Y+11	; 0x0b
    2726:	9c 85       	ldd	r25, Y+12	; 0x0c
    2728:	86 30       	cpi	r24, 0x06	; 6
    272a:	91 05       	cpc	r25, r1
    272c:	0c f0       	brlt	.+2      	; 0x2730 <Timer3_Init+0x8c>
    272e:	da c0       	rjmp	.+436    	; 0x28e4 <Timer3_Init+0x240>
    2730:	9f c0       	rjmp	.+318    	; 0x2870 <Timer3_Init+0x1cc>
    2732:	2b 85       	ldd	r18, Y+11	; 0x0b
    2734:	3c 85       	ldd	r19, Y+12	; 0x0c
    2736:	2b 30       	cpi	r18, 0x0B	; 11
    2738:	31 05       	cpc	r19, r1
    273a:	09 f4       	brne	.+2      	; 0x273e <Timer3_Init+0x9a>
    273c:	64 c1       	rjmp	.+712    	; 0x2a06 <Timer3_Init+0x362>
    273e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2740:	9c 85       	ldd	r25, Y+12	; 0x0c
    2742:	8c 30       	cpi	r24, 0x0C	; 12
    2744:	91 05       	cpc	r25, r1
    2746:	6c f4       	brge	.+26     	; 0x2762 <Timer3_Init+0xbe>
    2748:	2b 85       	ldd	r18, Y+11	; 0x0b
    274a:	3c 85       	ldd	r19, Y+12	; 0x0c
    274c:	29 30       	cpi	r18, 0x09	; 9
    274e:	31 05       	cpc	r19, r1
    2750:	09 f4       	brne	.+2      	; 0x2754 <Timer3_Init+0xb0>
    2752:	1f c1       	rjmp	.+574    	; 0x2992 <Timer3_Init+0x2ee>
    2754:	8b 85       	ldd	r24, Y+11	; 0x0b
    2756:	9c 85       	ldd	r25, Y+12	; 0x0c
    2758:	8a 30       	cpi	r24, 0x0A	; 10
    275a:	91 05       	cpc	r25, r1
    275c:	0c f0       	brlt	.+2      	; 0x2760 <Timer3_Init+0xbc>
    275e:	36 c1       	rjmp	.+620    	; 0x29cc <Timer3_Init+0x328>
    2760:	fb c0       	rjmp	.+502    	; 0x2958 <Timer3_Init+0x2b4>
    2762:	2b 85       	ldd	r18, Y+11	; 0x0b
    2764:	3c 85       	ldd	r19, Y+12	; 0x0c
    2766:	2d 30       	cpi	r18, 0x0D	; 13
    2768:	31 05       	cpc	r19, r1
    276a:	09 f4       	brne	.+2      	; 0x276e <Timer3_Init+0xca>
    276c:	86 c1       	rjmp	.+780    	; 0x2a7a <Timer3_Init+0x3d6>
    276e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2770:	9c 85       	ldd	r25, Y+12	; 0x0c
    2772:	8d 30       	cpi	r24, 0x0D	; 13
    2774:	91 05       	cpc	r25, r1
    2776:	0c f4       	brge	.+2      	; 0x277a <Timer3_Init+0xd6>
    2778:	63 c1       	rjmp	.+710    	; 0x2a40 <Timer3_Init+0x39c>
    277a:	2b 85       	ldd	r18, Y+11	; 0x0b
    277c:	3c 85       	ldd	r19, Y+12	; 0x0c
    277e:	2e 30       	cpi	r18, 0x0E	; 14
    2780:	31 05       	cpc	r19, r1
    2782:	09 f4       	brne	.+2      	; 0x2786 <Timer3_Init+0xe2>
    2784:	97 c1       	rjmp	.+814    	; 0x2ab4 <Timer3_Init+0x410>
    2786:	b2 c1       	rjmp	.+868    	; 0x2aec <Timer3_Init+0x448>
 {

case timer3_Normal_mode:                          CLR_BIT(TCCR3A,WGM30);
    2788:	ab e8       	ldi	r26, 0x8B	; 139
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	eb e8       	ldi	r30, 0x8B	; 139
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 81       	ld	r24, Z
    2792:	8e 7f       	andi	r24, 0xFE	; 254
    2794:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR3A,WGM31);
    2796:	ab e8       	ldi	r26, 0x8B	; 139
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	eb e8       	ldi	r30, 0x8B	; 139
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	80 81       	ld	r24, Z
    27a0:	8d 7f       	andi	r24, 0xFD	; 253
    27a2:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR3B,WGM32);
    27a4:	aa e8       	ldi	r26, 0x8A	; 138
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	ea e8       	ldi	r30, 0x8A	; 138
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	87 7f       	andi	r24, 0xF7	; 247
    27b0:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR3B,WGM33);
    27b2:	aa e8       	ldi	r26, 0x8A	; 138
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	ea e8       	ldi	r30, 0x8A	; 138
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	8f 7e       	andi	r24, 0xEF	; 239
    27be:	8c 93       	st	X, r24
    27c0:	95 c1       	rjmp	.+810    	; 0x2aec <Timer3_Init+0x448>
                                                  break;
case timer3_PWM_Phase_Correct_8bit:               SET_BIT(TCCR3A,WGM30);
    27c2:	ab e8       	ldi	r26, 0x8B	; 139
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	eb e8       	ldi	r30, 0x8B	; 139
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	81 60       	ori	r24, 0x01	; 1
    27ce:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    27d0:	ab e8       	ldi	r26, 0x8B	; 139
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	eb e8       	ldi	r30, 0x8B	; 139
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	8d 7f       	andi	r24, 0xFD	; 253
    27dc:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    27de:	aa e8       	ldi	r26, 0x8A	; 138
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	ea e8       	ldi	r30, 0x8A	; 138
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	87 7f       	andi	r24, 0xF7	; 247
    27ea:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    27ec:	aa e8       	ldi	r26, 0x8A	; 138
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	ea e8       	ldi	r30, 0x8A	; 138
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	8f 7e       	andi	r24, 0xEF	; 239
    27f8:	8c 93       	st	X, r24
    27fa:	78 c1       	rjmp	.+752    	; 0x2aec <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_Correct_9bit:               CLR_BIT(TCCR3A,WGM30);
    27fc:	ab e8       	ldi	r26, 0x8B	; 139
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	eb e8       	ldi	r30, 0x8B	; 139
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	8e 7f       	andi	r24, 0xFE	; 254
    2808:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    280a:	ab e8       	ldi	r26, 0x8B	; 139
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	eb e8       	ldi	r30, 0x8B	; 139
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	82 60       	ori	r24, 0x02	; 2
    2816:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2818:	aa e8       	ldi	r26, 0x8A	; 138
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	ea e8       	ldi	r30, 0x8A	; 138
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	87 7f       	andi	r24, 0xF7	; 247
    2824:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    2826:	aa e8       	ldi	r26, 0x8A	; 138
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	ea e8       	ldi	r30, 0x8A	; 138
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	8f 7e       	andi	r24, 0xEF	; 239
    2832:	8c 93       	st	X, r24
    2834:	5b c1       	rjmp	.+694    	; 0x2aec <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_Correct_10bit:              SET_BIT(TCCR3A,WGM30);
    2836:	ab e8       	ldi	r26, 0x8B	; 139
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	eb e8       	ldi	r30, 0x8B	; 139
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	81 60       	ori	r24, 0x01	; 1
    2842:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2844:	ab e8       	ldi	r26, 0x8B	; 139
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	eb e8       	ldi	r30, 0x8B	; 139
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	82 60       	ori	r24, 0x02	; 2
    2850:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2852:	aa e8       	ldi	r26, 0x8A	; 138
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	ea e8       	ldi	r30, 0x8A	; 138
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	87 7f       	andi	r24, 0xF7	; 247
    285e:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    2860:	aa e8       	ldi	r26, 0x8A	; 138
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	ea e8       	ldi	r30, 0x8A	; 138
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	8f 7e       	andi	r24, 0xEF	; 239
    286c:	8c 93       	st	X, r24
    286e:	3e c1       	rjmp	.+636    	; 0x2aec <Timer3_Init+0x448>
	                                              break;
case timer3_CTC_mode_ocr_top:                     CLR_BIT(TCCR3A,WGM30);
    2870:	ab e8       	ldi	r26, 0x8B	; 139
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	eb e8       	ldi	r30, 0x8B	; 139
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	8e 7f       	andi	r24, 0xFE	; 254
    287c:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    287e:	ab e8       	ldi	r26, 0x8B	; 139
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	eb e8       	ldi	r30, 0x8B	; 139
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	8d 7f       	andi	r24, 0xFD	; 253
    288a:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    288c:	aa e8       	ldi	r26, 0x8A	; 138
    288e:	b0 e0       	ldi	r27, 0x00	; 0
    2890:	ea e8       	ldi	r30, 0x8A	; 138
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	80 81       	ld	r24, Z
    2896:	88 60       	ori	r24, 0x08	; 8
    2898:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    289a:	aa e8       	ldi	r26, 0x8A	; 138
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	ea e8       	ldi	r30, 0x8A	; 138
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	8f 7e       	andi	r24, 0xEF	; 239
    28a6:	8c 93       	st	X, r24
    28a8:	21 c1       	rjmp	.+578    	; 0x2aec <Timer3_Init+0x448>
	                                              break;
case timer3_Fast_PWM_8_bit:                       SET_BIT(TCCR3A,WGM30);
    28aa:	ab e8       	ldi	r26, 0x8B	; 139
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	eb e8       	ldi	r30, 0x8B	; 139
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	81 60       	ori	r24, 0x01	; 1
    28b6:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    28b8:	ab e8       	ldi	r26, 0x8B	; 139
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	eb e8       	ldi	r30, 0x8B	; 139
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	8d 7f       	andi	r24, 0xFD	; 253
    28c4:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    28c6:	aa e8       	ldi	r26, 0x8A	; 138
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	ea e8       	ldi	r30, 0x8A	; 138
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	88 60       	ori	r24, 0x08	; 8
    28d2:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    28d4:	aa e8       	ldi	r26, 0x8A	; 138
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	ea e8       	ldi	r30, 0x8A	; 138
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	8f 7e       	andi	r24, 0xEF	; 239
    28e0:	8c 93       	st	X, r24
    28e2:	04 c1       	rjmp	.+520    	; 0x2aec <Timer3_Init+0x448>
	                                              break;
case timer3_Fast_PWM_9_bit:                       CLR_BIT(TCCR3A,WGM30);
    28e4:	ab e8       	ldi	r26, 0x8B	; 139
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	eb e8       	ldi	r30, 0x8B	; 139
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	8e 7f       	andi	r24, 0xFE	; 254
    28f0:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    28f2:	ab e8       	ldi	r26, 0x8B	; 139
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	eb e8       	ldi	r30, 0x8B	; 139
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	82 60       	ori	r24, 0x02	; 2
    28fe:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2900:	aa e8       	ldi	r26, 0x8A	; 138
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	ea e8       	ldi	r30, 0x8A	; 138
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	88 60       	ori	r24, 0x08	; 8
    290c:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    290e:	aa e8       	ldi	r26, 0x8A	; 138
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	ea e8       	ldi	r30, 0x8A	; 138
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	8f 7e       	andi	r24, 0xEF	; 239
    291a:	8c 93       	st	X, r24
    291c:	e7 c0       	rjmp	.+462    	; 0x2aec <Timer3_Init+0x448>
	                                              break;
case timer3_Fast_PWM_10_bit:                      SET_BIT(TCCR3A,WGM30);
    291e:	ab e8       	ldi	r26, 0x8B	; 139
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	eb e8       	ldi	r30, 0x8B	; 139
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	81 60       	ori	r24, 0x01	; 1
    292a:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    292c:	ab e8       	ldi	r26, 0x8B	; 139
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	eb e8       	ldi	r30, 0x8B	; 139
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	82 60       	ori	r24, 0x02	; 2
    2938:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    293a:	aa e8       	ldi	r26, 0x8A	; 138
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	ea e8       	ldi	r30, 0x8A	; 138
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	88 60       	ori	r24, 0x08	; 8
    2946:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM33);
    2948:	aa e8       	ldi	r26, 0x8A	; 138
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	ea e8       	ldi	r30, 0x8A	; 138
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	8f 7e       	andi	r24, 0xEF	; 239
    2954:	8c 93       	st	X, r24
    2956:	ca c0       	rjmp	.+404    	; 0x2aec <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_and_Freq_Correct_icr_top:   CLR_BIT(TCCR3A,WGM30);
    2958:	ab e8       	ldi	r26, 0x8B	; 139
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	eb e8       	ldi	r30, 0x8B	; 139
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	8e 7f       	andi	r24, 0xFE	; 254
    2964:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    2966:	ab e8       	ldi	r26, 0x8B	; 139
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	eb e8       	ldi	r30, 0x8B	; 139
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	8d 7f       	andi	r24, 0xFD	; 253
    2972:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2974:	aa e8       	ldi	r26, 0x8A	; 138
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	ea e8       	ldi	r30, 0x8A	; 138
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	87 7f       	andi	r24, 0xF7	; 247
    2980:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2982:	aa e8       	ldi	r26, 0x8A	; 138
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	ea e8       	ldi	r30, 0x8A	; 138
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	80 61       	ori	r24, 0x10	; 16
    298e:	8c 93       	st	X, r24
    2990:	ad c0       	rjmp	.+346    	; 0x2aec <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_and_Freq_Correct_ocr_top:   SET_BIT(TCCR3A,WGM30);
    2992:	ab e8       	ldi	r26, 0x8B	; 139
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	eb e8       	ldi	r30, 0x8B	; 139
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	81 60       	ori	r24, 0x01	; 1
    299e:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    29a0:	ab e8       	ldi	r26, 0x8B	; 139
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	eb e8       	ldi	r30, 0x8B	; 139
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	8d 7f       	andi	r24, 0xFD	; 253
    29ac:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    29ae:	aa e8       	ldi	r26, 0x8A	; 138
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	ea e8       	ldi	r30, 0x8A	; 138
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	87 7f       	andi	r24, 0xF7	; 247
    29ba:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    29bc:	aa e8       	ldi	r26, 0x8A	; 138
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	ea e8       	ldi	r30, 0x8A	; 138
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	80 81       	ld	r24, Z
    29c6:	80 61       	ori	r24, 0x10	; 16
    29c8:	8c 93       	st	X, r24
    29ca:	90 c0       	rjmp	.+288    	; 0x2aec <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_Correct_icr_top:            CLR_BIT(TCCR3A,WGM30);
    29cc:	ab e8       	ldi	r26, 0x8B	; 139
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	eb e8       	ldi	r30, 0x8B	; 139
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	8e 7f       	andi	r24, 0xFE	; 254
    29d8:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    29da:	ab e8       	ldi	r26, 0x8B	; 139
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	eb e8       	ldi	r30, 0x8B	; 139
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	80 81       	ld	r24, Z
    29e4:	82 60       	ori	r24, 0x02	; 2
    29e6:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    29e8:	aa e8       	ldi	r26, 0x8A	; 138
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	ea e8       	ldi	r30, 0x8A	; 138
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	87 7f       	andi	r24, 0xF7	; 247
    29f4:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    29f6:	aa e8       	ldi	r26, 0x8A	; 138
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	ea e8       	ldi	r30, 0x8A	; 138
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	80 61       	ori	r24, 0x10	; 16
    2a02:	8c 93       	st	X, r24
    2a04:	73 c0       	rjmp	.+230    	; 0x2aec <Timer3_Init+0x448>
	                                              break;
case timer3_PWM_Phase_Correct_ocr_top:            SET_BIT(TCCR3A,WGM30);
    2a06:	ab e8       	ldi	r26, 0x8B	; 139
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	eb e8       	ldi	r30, 0x8B	; 139
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	81 60       	ori	r24, 0x01	; 1
    2a12:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2a14:	ab e8       	ldi	r26, 0x8B	; 139
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	eb e8       	ldi	r30, 0x8B	; 139
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	82 60       	ori	r24, 0x02	; 2
    2a20:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3B,WGM32);
    2a22:	aa e8       	ldi	r26, 0x8A	; 138
    2a24:	b0 e0       	ldi	r27, 0x00	; 0
    2a26:	ea e8       	ldi	r30, 0x8A	; 138
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	87 7f       	andi	r24, 0xF7	; 247
    2a2e:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2a30:	aa e8       	ldi	r26, 0x8A	; 138
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	ea e8       	ldi	r30, 0x8A	; 138
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	80 61       	ori	r24, 0x10	; 16
    2a3c:	8c 93       	st	X, r24
    2a3e:	56 c0       	rjmp	.+172    	; 0x2aec <Timer3_Init+0x448>
	                                              break;
case timer3_CTC_mode_icr_top:                     CLR_BIT(TCCR3A,WGM30);
    2a40:	ab e8       	ldi	r26, 0x8B	; 139
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	eb e8       	ldi	r30, 0x8B	; 139
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	8e 7f       	andi	r24, 0xFE	; 254
    2a4c:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR3A,WGM31);
    2a4e:	ab e8       	ldi	r26, 0x8B	; 139
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	eb e8       	ldi	r30, 0x8B	; 139
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	8d 7f       	andi	r24, 0xFD	; 253
    2a5a:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2a5c:	aa e8       	ldi	r26, 0x8A	; 138
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	ea e8       	ldi	r30, 0x8A	; 138
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	88 60       	ori	r24, 0x08	; 8
    2a68:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2a6a:	aa e8       	ldi	r26, 0x8A	; 138
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	ea e8       	ldi	r30, 0x8A	; 138
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	80 61       	ori	r24, 0x10	; 16
    2a76:	8c 93       	st	X, r24
    2a78:	39 c0       	rjmp	.+114    	; 0x2aec <Timer3_Init+0x448>
	                                              break;
case timer3_Fast_PWM_icr_top:                     CLR_BIT(TCCR3A,WGM30);
    2a7a:	ab e8       	ldi	r26, 0x8B	; 139
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	eb e8       	ldi	r30, 0x8B	; 139
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	80 81       	ld	r24, Z
    2a84:	8e 7f       	andi	r24, 0xFE	; 254
    2a86:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2a88:	ab e8       	ldi	r26, 0x8B	; 139
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	eb e8       	ldi	r30, 0x8B	; 139
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	82 60       	ori	r24, 0x02	; 2
    2a94:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2a96:	aa e8       	ldi	r26, 0x8A	; 138
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	ea e8       	ldi	r30, 0x8A	; 138
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	88 60       	ori	r24, 0x08	; 8
    2aa2:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2aa4:	aa e8       	ldi	r26, 0x8A	; 138
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	ea e8       	ldi	r30, 0x8A	; 138
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	80 61       	ori	r24, 0x10	; 16
    2ab0:	8c 93       	st	X, r24
    2ab2:	1c c0       	rjmp	.+56     	; 0x2aec <Timer3_Init+0x448>
	                                              break;
case timer3_Fast_PWM_ocr_top:                     SET_BIT(TCCR3A,WGM30);
    2ab4:	ab e8       	ldi	r26, 0x8B	; 139
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	eb e8       	ldi	r30, 0x8B	; 139
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	81 60       	ori	r24, 0x01	; 1
    2ac0:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3A,WGM31);
    2ac2:	ab e8       	ldi	r26, 0x8B	; 139
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	eb e8       	ldi	r30, 0x8B	; 139
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	82 60       	ori	r24, 0x02	; 2
    2ace:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM32);
    2ad0:	aa e8       	ldi	r26, 0x8A	; 138
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	ea e8       	ldi	r30, 0x8A	; 138
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	88 60       	ori	r24, 0x08	; 8
    2adc:	8c 93       	st	X, r24
							                      SET_BIT(TCCR3B,WGM33);
    2ade:	aa e8       	ldi	r26, 0x8A	; 138
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	ea e8       	ldi	r30, 0x8A	; 138
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 81       	ld	r24, Z
    2ae8:	80 61       	ori	r24, 0x10	; 16
    2aea:	8c 93       	st	X, r24

						break;
}
#elif oc_3==fastpwm_3

switch (oc3_mode)
    2aec:	8b 81       	ldd	r24, Y+3	; 0x03
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	3a 87       	std	Y+10, r19	; 0x0a
    2af4:	29 87       	std	Y+9, r18	; 0x09
    2af6:	89 85       	ldd	r24, Y+9	; 0x09
    2af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afa:	81 30       	cpi	r24, 0x01	; 1
    2afc:	91 05       	cpc	r25, r1
    2afe:	09 f4       	brne	.+2      	; 0x2b02 <Timer3_Init+0x45e>
    2b00:	cf c0       	rjmp	.+414    	; 0x2ca0 <Timer3_Init+0x5fc>
    2b02:	29 85       	ldd	r18, Y+9	; 0x09
    2b04:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b06:	22 30       	cpi	r18, 0x02	; 2
    2b08:	31 05       	cpc	r19, r1
    2b0a:	2c f4       	brge	.+10     	; 0x2b16 <Timer3_Init+0x472>
    2b0c:	89 85       	ldd	r24, Y+9	; 0x09
    2b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b10:	00 97       	sbiw	r24, 0x00	; 0
    2b12:	69 f0       	breq	.+26     	; 0x2b2e <Timer3_Init+0x48a>
    2b14:	c5 c0       	rjmp	.+394    	; 0x2ca0 <Timer3_Init+0x5fc>
    2b16:	29 85       	ldd	r18, Y+9	; 0x09
    2b18:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b1a:	22 30       	cpi	r18, 0x02	; 2
    2b1c:	31 05       	cpc	r19, r1
    2b1e:	91 f1       	breq	.+100    	; 0x2b84 <Timer3_Init+0x4e0>
    2b20:	89 85       	ldd	r24, Y+9	; 0x09
    2b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b24:	83 30       	cpi	r24, 0x03	; 3
    2b26:	91 05       	cpc	r25, r1
    2b28:	09 f4       	brne	.+2      	; 0x2b2c <Timer3_Init+0x488>
    2b2a:	74 c0       	rjmp	.+232    	; 0x2c14 <Timer3_Init+0x570>
    2b2c:	b9 c0       	rjmp	.+370    	; 0x2ca0 <Timer3_Init+0x5fc>
{
case disconnected_3:CLR_BIT(TCCR3A,COM3A0);
    2b2e:	ab e8       	ldi	r26, 0x8B	; 139
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	eb e8       	ldi	r30, 0x8B	; 139
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	8f 7b       	andi	r24, 0xBF	; 191
    2b3a:	8c 93       	st	X, r24
                    CLR_BIT(TCCR3A,COM3A1);
    2b3c:	ab e8       	ldi	r26, 0x8B	; 139
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	eb e8       	ldi	r30, 0x8B	; 139
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	80 81       	ld	r24, Z
    2b46:	8f 77       	andi	r24, 0x7F	; 127
    2b48:	8c 93       	st	X, r24

                    CLR_BIT(TCCR3A,COM3B0);
    2b4a:	ab e8       	ldi	r26, 0x8B	; 139
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	eb e8       	ldi	r30, 0x8B	; 139
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	8f 7e       	andi	r24, 0xEF	; 239
    2b56:	8c 93       	st	X, r24
                    CLR_BIT(TCCR3A,COM3B1);
    2b58:	ab e8       	ldi	r26, 0x8B	; 139
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	eb e8       	ldi	r30, 0x8B	; 139
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	8f 7d       	andi	r24, 0xDF	; 223
    2b64:	8c 93       	st	X, r24

                    CLR_BIT(TCCR3A,COM3C0);
    2b66:	ab e8       	ldi	r26, 0x8B	; 139
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	eb e8       	ldi	r30, 0x8B	; 139
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	8b 7f       	andi	r24, 0xFB	; 251
    2b72:	8c 93       	st	X, r24
                    CLR_BIT(TCCR3A,COM3C1);
    2b74:	ab e8       	ldi	r26, 0x8B	; 139
    2b76:	b0 e0       	ldi	r27, 0x00	; 0
    2b78:	eb e8       	ldi	r30, 0x8B	; 139
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	87 7f       	andi	r24, 0xF7	; 247
    2b80:	8c 93       	st	X, r24
    2b82:	8e c0       	rjmp	.+284    	; 0x2ca0 <Timer3_Init+0x5fc>
				    break;
case toggle_3:break;
case Non_inverting_clr_oc0_oncompare_set_on_bottom_3:
	switch(channel_t)
    2b84:	8c 81       	ldd	r24, Y+4	; 0x04
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	38 87       	std	Y+8, r19	; 0x08
    2b8c:	2f 83       	std	Y+7, r18	; 0x07
    2b8e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b90:	98 85       	ldd	r25, Y+8	; 0x08
    2b92:	81 30       	cpi	r24, 0x01	; 1
    2b94:	91 05       	cpc	r25, r1
    2b96:	89 f0       	breq	.+34     	; 0x2bba <Timer3_Init+0x516>
    2b98:	2f 81       	ldd	r18, Y+7	; 0x07
    2b9a:	38 85       	ldd	r19, Y+8	; 0x08
    2b9c:	22 30       	cpi	r18, 0x02	; 2
    2b9e:	31 05       	cpc	r19, r1
    2ba0:	0c f4       	brge	.+2      	; 0x2ba4 <Timer3_Init+0x500>
    2ba2:	7e c0       	rjmp	.+252    	; 0x2ca0 <Timer3_Init+0x5fc>
    2ba4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ba6:	98 85       	ldd	r25, Y+8	; 0x08
    2ba8:	82 30       	cpi	r24, 0x02	; 2
    2baa:	91 05       	cpc	r25, r1
    2bac:	a9 f0       	breq	.+42     	; 0x2bd8 <Timer3_Init+0x534>
    2bae:	2f 81       	ldd	r18, Y+7	; 0x07
    2bb0:	38 85       	ldd	r19, Y+8	; 0x08
    2bb2:	23 30       	cpi	r18, 0x03	; 3
    2bb4:	31 05       	cpc	r19, r1
    2bb6:	f9 f0       	breq	.+62     	; 0x2bf6 <Timer3_Init+0x552>
    2bb8:	73 c0       	rjmp	.+230    	; 0x2ca0 <Timer3_Init+0x5fc>
	   {
	case disconnected_channel_3:break;
	     case A_Channel_3:CLR_BIT(TCCR3A,COM3A0);
    2bba:	ab e8       	ldi	r26, 0x8B	; 139
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	eb e8       	ldi	r30, 0x8B	; 139
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	8f 7b       	andi	r24, 0xBF	; 191
    2bc6:	8c 93       	st	X, r24
					    SET_BIT(TCCR3A,COM3A1);
    2bc8:	ab e8       	ldi	r26, 0x8B	; 139
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	eb e8       	ldi	r30, 0x8B	; 139
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	80 68       	ori	r24, 0x80	; 128
    2bd4:	8c 93       	st	X, r24
    2bd6:	64 c0       	rjmp	.+200    	; 0x2ca0 <Timer3_Init+0x5fc>
						break;
	    case B_Channel_3:CLR_BIT(TCCR3A,COM3B0);
    2bd8:	ab e8       	ldi	r26, 0x8B	; 139
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	eb e8       	ldi	r30, 0x8B	; 139
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	80 81       	ld	r24, Z
    2be2:	8f 7e       	andi	r24, 0xEF	; 239
    2be4:	8c 93       	st	X, r24
	                   SET_BIT(TCCR3A,COM3B1);
    2be6:	ab e8       	ldi	r26, 0x8B	; 139
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	eb e8       	ldi	r30, 0x8B	; 139
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	80 81       	ld	r24, Z
    2bf0:	80 62       	ori	r24, 0x20	; 32
    2bf2:	8c 93       	st	X, r24
    2bf4:	55 c0       	rjmp	.+170    	; 0x2ca0 <Timer3_Init+0x5fc>
	                   break;
	   case C_Channel_3:CLR_BIT(TCCR3A,COM3C0);
    2bf6:	ab e8       	ldi	r26, 0x8B	; 139
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	eb e8       	ldi	r30, 0x8B	; 139
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	8b 7f       	andi	r24, 0xFB	; 251
    2c02:	8c 93       	st	X, r24
	                    SET_BIT(TCCR3A,COM3C1);
    2c04:	ab e8       	ldi	r26, 0x8B	; 139
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	eb e8       	ldi	r30, 0x8B	; 139
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	88 60       	ori	r24, 0x08	; 8
    2c10:	8c 93       	st	X, r24
    2c12:	46 c0       	rjmp	.+140    	; 0x2ca0 <Timer3_Init+0x5fc>
	                   break;
	   }
        break;
case Inverting_set_oc0_oncompare_clr_on_bottom_3:
	switch(channel_t)
    2c14:	8c 81       	ldd	r24, Y+4	; 0x04
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	3e 83       	std	Y+6, r19	; 0x06
    2c1c:	2d 83       	std	Y+5, r18	; 0x05
    2c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c20:	9e 81       	ldd	r25, Y+6	; 0x06
    2c22:	81 30       	cpi	r24, 0x01	; 1
    2c24:	91 05       	cpc	r25, r1
    2c26:	81 f0       	breq	.+32     	; 0x2c48 <Timer3_Init+0x5a4>
    2c28:	2d 81       	ldd	r18, Y+5	; 0x05
    2c2a:	3e 81       	ldd	r19, Y+6	; 0x06
    2c2c:	22 30       	cpi	r18, 0x02	; 2
    2c2e:	31 05       	cpc	r19, r1
    2c30:	bc f1       	brlt	.+110    	; 0x2ca0 <Timer3_Init+0x5fc>
    2c32:	8d 81       	ldd	r24, Y+5	; 0x05
    2c34:	9e 81       	ldd	r25, Y+6	; 0x06
    2c36:	82 30       	cpi	r24, 0x02	; 2
    2c38:	91 05       	cpc	r25, r1
    2c3a:	a9 f0       	breq	.+42     	; 0x2c66 <Timer3_Init+0x5c2>
    2c3c:	2d 81       	ldd	r18, Y+5	; 0x05
    2c3e:	3e 81       	ldd	r19, Y+6	; 0x06
    2c40:	23 30       	cpi	r18, 0x03	; 3
    2c42:	31 05       	cpc	r19, r1
    2c44:	f9 f0       	breq	.+62     	; 0x2c84 <Timer3_Init+0x5e0>
    2c46:	2c c0       	rjmp	.+88     	; 0x2ca0 <Timer3_Init+0x5fc>
	   {
	case disconnected_channel_3:break;
	      case A_Channel_3:SET_BIT(TCCR3A,COM3A0);
    2c48:	ab e8       	ldi	r26, 0x8B	; 139
    2c4a:	b0 e0       	ldi	r27, 0x00	; 0
    2c4c:	eb e8       	ldi	r30, 0x8B	; 139
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	80 64       	ori	r24, 0x40	; 64
    2c54:	8c 93       	st	X, r24
	                     SET_BIT(TCCR3A,COM3A1);
    2c56:	ab e8       	ldi	r26, 0x8B	; 139
    2c58:	b0 e0       	ldi	r27, 0x00	; 0
    2c5a:	eb e8       	ldi	r30, 0x8B	; 139
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	80 68       	ori	r24, 0x80	; 128
    2c62:	8c 93       	st	X, r24
    2c64:	1d c0       	rjmp	.+58     	; 0x2ca0 <Timer3_Init+0x5fc>
	                     break;
	      case B_Channel_3:SET_BIT(TCCR3A,COM3B0);
    2c66:	ab e8       	ldi	r26, 0x8B	; 139
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	eb e8       	ldi	r30, 0x8B	; 139
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	80 81       	ld	r24, Z
    2c70:	80 61       	ori	r24, 0x10	; 16
    2c72:	8c 93       	st	X, r24
	  				     SET_BIT(TCCR3A,COM3B1);
    2c74:	ab e8       	ldi	r26, 0x8B	; 139
    2c76:	b0 e0       	ldi	r27, 0x00	; 0
    2c78:	eb e8       	ldi	r30, 0x8B	; 139
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	80 81       	ld	r24, Z
    2c7e:	80 62       	ori	r24, 0x20	; 32
    2c80:	8c 93       	st	X, r24
    2c82:	0e c0       	rjmp	.+28     	; 0x2ca0 <Timer3_Init+0x5fc>
	  			         break;
	      case C_Channel_3:SET_BIT(TCCR3A,COM3C0);
    2c84:	ab e8       	ldi	r26, 0x8B	; 139
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	eb e8       	ldi	r30, 0x8B	; 139
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	84 60       	ori	r24, 0x04	; 4
    2c90:	8c 93       	st	X, r24
	  				     SET_BIT(TCCR3A,COM3C1);
    2c92:	ab e8       	ldi	r26, 0x8B	; 139
    2c94:	b0 e0       	ldi	r27, 0x00	; 0
    2c96:	eb e8       	ldi	r30, 0x8B	; 139
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 81       	ld	r24, Z
    2c9c:	88 60       	ori	r24, 0x08	; 8
    2c9e:	8c 93       	st	X, r24
							break;

}

#endif
	TCCR3B&=0XF8;
    2ca0:	aa e8       	ldi	r26, 0x8A	; 138
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	ea e8       	ldi	r30, 0x8A	; 138
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	80 81       	ld	r24, Z
    2caa:	88 7f       	andi	r24, 0xF8	; 248
    2cac:	8c 93       	st	X, r24
	TCCR3B|=scaler;
    2cae:	aa e8       	ldi	r26, 0x8A	; 138
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	ea e8       	ldi	r30, 0x8A	; 138
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	90 81       	ld	r25, Z
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	89 2b       	or	r24, r25
    2cbc:	8c 93       	st	X, r24

}
    2cbe:	2c 96       	adiw	r28, 0x0c	; 12
    2cc0:	0f b6       	in	r0, 0x3f	; 63
    2cc2:	f8 94       	cli
    2cc4:	de bf       	out	0x3e, r29	; 62
    2cc6:	0f be       	out	0x3f, r0	; 63
    2cc8:	cd bf       	out	0x3d, r28	; 61
    2cca:	cf 91       	pop	r28
    2ccc:	df 91       	pop	r29
    2cce:	08 95       	ret

00002cd0 <Timer3_InputCaptureEdge>:

void Timer3_InputCaptureEdge(Edge3_type edge)
{
    2cd0:	df 93       	push	r29
    2cd2:	cf 93       	push	r28
    2cd4:	0f 92       	push	r0
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	89 83       	std	Y+1, r24	; 0x01
	if(edge==Rising_3)
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	81 30       	cpi	r24, 0x01	; 1
    2ce0:	41 f4       	brne	.+16     	; 0x2cf2 <Timer3_InputCaptureEdge+0x22>
		SET_BIT(TCCR3B,ICES3);
    2ce2:	aa e8       	ldi	r26, 0x8A	; 138
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	ea e8       	ldi	r30, 0x8A	; 138
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	80 64       	ori	r24, 0x40	; 64
    2cee:	8c 93       	st	X, r24
    2cf0:	0a c0       	rjmp	.+20     	; 0x2d06 <Timer3_InputCaptureEdge+0x36>


	else if(edge==Falling_3)
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	88 23       	and	r24, r24
    2cf6:	39 f4       	brne	.+14     	; 0x2d06 <Timer3_InputCaptureEdge+0x36>
		CLR_BIT(TCCR3B,ICES3);
    2cf8:	aa e8       	ldi	r26, 0x8A	; 138
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	ea e8       	ldi	r30, 0x8A	; 138
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	80 81       	ld	r24, Z
    2d02:	8f 7b       	andi	r24, 0xBF	; 191
    2d04:	8c 93       	st	X, r24

}
    2d06:	0f 90       	pop	r0
    2d08:	cf 91       	pop	r28
    2d0a:	df 91       	pop	r29
    2d0c:	08 95       	ret

00002d0e <Timer3_ICU_InterruptEnable>:

void Timer3_ICU_InterruptEnable(void)
{
    2d0e:	df 93       	push	r29
    2d10:	cf 93       	push	r28
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,TICIE3);
    2d16:	ad e7       	ldi	r26, 0x7D	; 125
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	ed e7       	ldi	r30, 0x7D	; 125
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	80 62       	ori	r24, 0x20	; 32
    2d22:	8c 93       	st	X, r24
}
    2d24:	cf 91       	pop	r28
    2d26:	df 91       	pop	r29
    2d28:	08 95       	ret

00002d2a <Timer3_ICU_InterruptDisable>:
void Timer3_ICU_InterruptDisable(void)
{
    2d2a:	df 93       	push	r29
    2d2c:	cf 93       	push	r28
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,TICIE3);
    2d32:	ad e7       	ldi	r26, 0x7D	; 125
    2d34:	b0 e0       	ldi	r27, 0x00	; 0
    2d36:	ed e7       	ldi	r30, 0x7D	; 125
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	80 81       	ld	r24, Z
    2d3c:	8f 7d       	andi	r24, 0xDF	; 223
    2d3e:	8c 93       	st	X, r24
}
    2d40:	cf 91       	pop	r28
    2d42:	df 91       	pop	r29
    2d44:	08 95       	ret

00002d46 <Timer3_OV_InterruptEnable>:
void Timer3_OV_InterruptEnable(void)
{
    2d46:	df 93       	push	r29
    2d48:	cf 93       	push	r28
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,TOIE3);
    2d4e:	ad e7       	ldi	r26, 0x7D	; 125
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	ed e7       	ldi	r30, 0x7D	; 125
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	84 60       	ori	r24, 0x04	; 4
    2d5a:	8c 93       	st	X, r24
}
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	08 95       	ret

00002d62 <Timer3_OV_InterruptDisable>:
void Timer3_OV_InterruptDisable(void)
{
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,TOIE3);
    2d6a:	ad e7       	ldi	r26, 0x7D	; 125
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	ed e7       	ldi	r30, 0x7D	; 125
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	8b 7f       	andi	r24, 0xFB	; 251
    2d76:	8c 93       	st	X, r24
}
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	08 95       	ret

00002d7e <Timer3_OCA_InterruptEnable>:
void Timer3_OCA_InterruptEnable(void)
{
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,OCIE3A);
    2d86:	ad e7       	ldi	r26, 0x7D	; 125
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	ed e7       	ldi	r30, 0x7D	; 125
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	80 61       	ori	r24, 0x10	; 16
    2d92:	8c 93       	st	X, r24
}
    2d94:	cf 91       	pop	r28
    2d96:	df 91       	pop	r29
    2d98:	08 95       	ret

00002d9a <Timer3_OCA_InterruptDisable>:
void Timer3_OCA_InterruptDisable(void)
{
    2d9a:	df 93       	push	r29
    2d9c:	cf 93       	push	r28
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,OCIE3A);
    2da2:	ad e7       	ldi	r26, 0x7D	; 125
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	ed e7       	ldi	r30, 0x7D	; 125
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	8f 7e       	andi	r24, 0xEF	; 239
    2dae:	8c 93       	st	X, r24
}
    2db0:	cf 91       	pop	r28
    2db2:	df 91       	pop	r29
    2db4:	08 95       	ret

00002db6 <Timer3_OCB_InterruptEnable>:
void Timer3_OCB_InterruptEnable(void)
{
    2db6:	df 93       	push	r29
    2db8:	cf 93       	push	r28
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,OCIE3B);
    2dbe:	ad e7       	ldi	r26, 0x7D	; 125
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	ed e7       	ldi	r30, 0x7D	; 125
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	80 81       	ld	r24, Z
    2dc8:	88 60       	ori	r24, 0x08	; 8
    2dca:	8c 93       	st	X, r24
}
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <Timer3_OCB_InterruptDisable>:
void Timer3_OCB_InterruptDisable(void)
{
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,OCIE3B);
    2dda:	ad e7       	ldi	r26, 0x7D	; 125
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	ed e7       	ldi	r30, 0x7D	; 125
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	87 7f       	andi	r24, 0xF7	; 247
    2de6:	8c 93       	st	X, r24
}
    2de8:	cf 91       	pop	r28
    2dea:	df 91       	pop	r29
    2dec:	08 95       	ret

00002dee <Timer3_OCC_InterruptEnable>:

void Timer3_OCC_InterruptEnable(void)
{
    2dee:	df 93       	push	r29
    2df0:	cf 93       	push	r28
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,OCIE3C);
    2df6:	ad e7       	ldi	r26, 0x7D	; 125
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	ed e7       	ldi	r30, 0x7D	; 125
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	80 81       	ld	r24, Z
    2e00:	82 60       	ori	r24, 0x02	; 2
    2e02:	8c 93       	st	X, r24
}
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	08 95       	ret

00002e0a <Timer3_OCC_InterruptDisable>:
void Timer3_OCC_InterruptDisable(void)
{
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,OCIE3C);
    2e12:	ad e7       	ldi	r26, 0x7D	; 125
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	ed e7       	ldi	r30, 0x7D	; 125
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	8d 7f       	andi	r24, 0xFD	; 253
    2e1e:	8c 93       	st	X, r24
}
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	08 95       	ret

00002e26 <TMR3_uint16_GetICUValue>:


uint16  TMR3_uint16_GetICUValue(void)
{
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	00 d0       	rcall	.+0      	; 0x2e2c <TMR3_uint16_GetICUValue+0x6>
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
	uint16 ret_val;
		ret_val=ICR3L|(ICR3H<<8);
    2e30:	e0 e8       	ldi	r30, 0x80	; 128
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	80 81       	ld	r24, Z
    2e36:	28 2f       	mov	r18, r24
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	e1 e8       	ldi	r30, 0x81	; 129
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	88 2f       	mov	r24, r24
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	98 2f       	mov	r25, r24
    2e46:	88 27       	eor	r24, r24
    2e48:	82 2b       	or	r24, r18
    2e4a:	93 2b       	or	r25, r19
    2e4c:	9a 83       	std	Y+2, r25	; 0x02
    2e4e:	89 83       	std	Y+1, r24	; 0x01
		return ret_val;
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	08 95       	ret

00002e5e <TMR3_uint16_GetTimerValue>:

uint16  TMR3_uint16_GetTimerValue(void)
{
    2e5e:	df 93       	push	r29
    2e60:	cf 93       	push	r28
    2e62:	00 d0       	rcall	.+0      	; 0x2e64 <TMR3_uint16_GetTimerValue+0x6>
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62

	uint16 ret_val;
	ret_val=TCNT3L|(TCNT3H<<8);
    2e68:	e8 e8       	ldi	r30, 0x88	; 136
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	80 81       	ld	r24, Z
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	e9 e8       	ldi	r30, 0x89	; 137
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	80 81       	ld	r24, Z
    2e78:	88 2f       	mov	r24, r24
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	98 2f       	mov	r25, r24
    2e7e:	88 27       	eor	r24, r24
    2e80:	82 2b       	or	r24, r18
    2e82:	93 2b       	or	r25, r19
    2e84:	9a 83       	std	Y+2, r25	; 0x02
    2e86:	89 83       	std	Y+1, r24	; 0x01
	return ret_val;
    2e88:	89 81       	ldd	r24, Y+1	; 0x01
    2e8a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	cf 91       	pop	r28
    2e92:	df 91       	pop	r29
    2e94:	08 95       	ret

00002e96 <TMR3_void_SetTimerValue>:


void  TMR3_void_SetTimerValue(uint16 tmr_val)
{
    2e96:	df 93       	push	r29
    2e98:	cf 93       	push	r28
    2e9a:	00 d0       	rcall	.+0      	; 0x2e9c <TMR3_void_SetTimerValue+0x6>
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    2ea0:	9a 83       	std	Y+2, r25	; 0x02
    2ea2:	89 83       	std	Y+1, r24	; 0x01
TCNT3L=(uint8)tmr_val;
    2ea4:	e8 e8       	ldi	r30, 0x88	; 136
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
    2eaa:	80 83       	st	Z, r24
TCNT3H=(uint8)(tmr_val>>8);
    2eac:	e9 e8       	ldi	r30, 0x89	; 137
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb4:	89 2f       	mov	r24, r25
    2eb6:	99 27       	eor	r25, r25
    2eb8:	80 83       	st	Z, r24
}
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	08 95       	ret

00002ec4 <TMR3_void_Set_OCR_TimerValue>:

void  TMR3_void_Set_OCR_TimerValue(uint16 oc_val,OC3_ch_type ch)
{
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <TMR3_void_Set_OCR_TimerValue+0x6>
    2eca:	00 d0       	rcall	.+0      	; 0x2ecc <TMR3_void_Set_OCR_TimerValue+0x8>
    2ecc:	0f 92       	push	r0
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
    2ed2:	9a 83       	std	Y+2, r25	; 0x02
    2ed4:	89 83       	std	Y+1, r24	; 0x01
    2ed6:	6b 83       	std	Y+3, r22	; 0x03


	switch(ch){
    2ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eda:	28 2f       	mov	r18, r24
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	3d 83       	std	Y+5, r19	; 0x05
    2ee0:	2c 83       	std	Y+4, r18	; 0x04
    2ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ee6:	81 30       	cpi	r24, 0x01	; 1
    2ee8:	91 05       	cpc	r25, r1
    2eea:	81 f0       	breq	.+32     	; 0x2f0c <TMR3_void_Set_OCR_TimerValue+0x48>
    2eec:	2c 81       	ldd	r18, Y+4	; 0x04
    2eee:	3d 81       	ldd	r19, Y+5	; 0x05
    2ef0:	22 30       	cpi	r18, 0x02	; 2
    2ef2:	31 05       	cpc	r19, r1
    2ef4:	74 f1       	brlt	.+92     	; 0x2f52 <TMR3_void_Set_OCR_TimerValue+0x8e>
    2ef6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef8:	9d 81       	ldd	r25, Y+5	; 0x05
    2efa:	82 30       	cpi	r24, 0x02	; 2
    2efc:	91 05       	cpc	r25, r1
    2efe:	91 f0       	breq	.+36     	; 0x2f24 <TMR3_void_Set_OCR_TimerValue+0x60>
    2f00:	2c 81       	ldd	r18, Y+4	; 0x04
    2f02:	3d 81       	ldd	r19, Y+5	; 0x05
    2f04:	23 30       	cpi	r18, 0x03	; 3
    2f06:	31 05       	cpc	r19, r1
    2f08:	c9 f0       	breq	.+50     	; 0x2f3c <TMR3_void_Set_OCR_TimerValue+0x78>
    2f0a:	23 c0       	rjmp	.+70     	; 0x2f52 <TMR3_void_Set_OCR_TimerValue+0x8e>
	case disconnected_channel_3:break;
	case A_Channel_3:OCR3AL=(uint8)oc_val;
    2f0c:	e6 e8       	ldi	r30, 0x86	; 134
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	80 83       	st	Z, r24
	                OCR3AH=(uint8)(oc_val>>8);
    2f14:	e7 e8       	ldi	r30, 0x87	; 135
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
    2f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1c:	89 2f       	mov	r24, r25
    2f1e:	99 27       	eor	r25, r25
    2f20:	80 83       	st	Z, r24
    2f22:	17 c0       	rjmp	.+46     	; 0x2f52 <TMR3_void_Set_OCR_TimerValue+0x8e>
	                 break;
	case B_Channel_3:OCR3BL=(uint8)oc_val;
    2f24:	e4 e8       	ldi	r30, 0x84	; 132
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	80 83       	st	Z, r24
                   OCR3BH=(uint8)(oc_val>>8);
    2f2c:	e5 e8       	ldi	r30, 0x85	; 133
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	89 81       	ldd	r24, Y+1	; 0x01
    2f32:	9a 81       	ldd	r25, Y+2	; 0x02
    2f34:	89 2f       	mov	r24, r25
    2f36:	99 27       	eor	r25, r25
    2f38:	80 83       	st	Z, r24
    2f3a:	0b c0       	rjmp	.+22     	; 0x2f52 <TMR3_void_Set_OCR_TimerValue+0x8e>
		           break;
	case C_Channel_3:OCR3CL=(uint8)oc_val;
    2f3c:	e2 e8       	ldi	r30, 0x82	; 130
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	80 83       	st	Z, r24
                     OCR3CH=(uint8)(oc_val>>8);
    2f44:	e3 e8       	ldi	r30, 0x83	; 131
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	89 81       	ldd	r24, Y+1	; 0x01
    2f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4c:	89 2f       	mov	r24, r25
    2f4e:	99 27       	eor	r25, r25
    2f50:	80 83       	st	Z, r24
		             break;
	}

}
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	cf 91       	pop	r28
    2f5e:	df 91       	pop	r29
    2f60:	08 95       	ret

00002f62 <Timer1_Init>:
#include"Timer1.h"
void Timer1_Init(timer1_mode_type timer_mode,prescaler1_type scaler,OC1_mode_type oc1_mode,OC1_ch_type channel_t)
{
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
    2f6a:	2e 97       	sbiw	r28, 0x0e	; 14
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	de bf       	out	0x3e, r29	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	cd bf       	out	0x3d, r28	; 61
    2f76:	89 83       	std	Y+1, r24	; 0x01
    2f78:	6a 83       	std	Y+2, r22	; 0x02
    2f7a:	4b 83       	std	Y+3, r20	; 0x03
    2f7c:	2c 83       	std	Y+4, r18	; 0x04
switch (timer_mode)
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	28 2f       	mov	r18, r24
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	3e 87       	std	Y+14, r19	; 0x0e
    2f86:	2d 87       	std	Y+13, r18	; 0x0d
    2f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f8c:	87 30       	cpi	r24, 0x07	; 7
    2f8e:	91 05       	cpc	r25, r1
    2f90:	09 f4       	brne	.+2      	; 0x2f94 <Timer1_Init+0x32>
    2f92:	24 c1       	rjmp	.+584    	; 0x31dc <Timer1_Init+0x27a>
    2f94:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f96:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f98:	28 30       	cpi	r18, 0x08	; 8
    2f9a:	31 05       	cpc	r19, r1
    2f9c:	4c f5       	brge	.+82     	; 0x2ff0 <Timer1_Init+0x8e>
    2f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fa2:	83 30       	cpi	r24, 0x03	; 3
    2fa4:	91 05       	cpc	r25, r1
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <Timer1_Init+0x48>
    2fa8:	a5 c0       	rjmp	.+330    	; 0x30f4 <Timer1_Init+0x192>
    2faa:	2d 85       	ldd	r18, Y+13	; 0x0d
    2fac:	3e 85       	ldd	r19, Y+14	; 0x0e
    2fae:	24 30       	cpi	r18, 0x04	; 4
    2fb0:	31 05       	cpc	r19, r1
    2fb2:	8c f4       	brge	.+34     	; 0x2fd6 <Timer1_Init+0x74>
    2fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb8:	81 30       	cpi	r24, 0x01	; 1
    2fba:	91 05       	cpc	r25, r1
    2fbc:	09 f4       	brne	.+2      	; 0x2fc0 <Timer1_Init+0x5e>
    2fbe:	60 c0       	rjmp	.+192    	; 0x3080 <Timer1_Init+0x11e>
    2fc0:	2d 85       	ldd	r18, Y+13	; 0x0d
    2fc2:	3e 85       	ldd	r19, Y+14	; 0x0e
    2fc4:	22 30       	cpi	r18, 0x02	; 2
    2fc6:	31 05       	cpc	r19, r1
    2fc8:	0c f0       	brlt	.+2      	; 0x2fcc <Timer1_Init+0x6a>
    2fca:	77 c0       	rjmp	.+238    	; 0x30ba <Timer1_Init+0x158>
    2fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd0:	00 97       	sbiw	r24, 0x00	; 0
    2fd2:	c9 f1       	breq	.+114    	; 0x3046 <Timer1_Init+0xe4>
    2fd4:	ea c1       	rjmp	.+980    	; 0x33aa <Timer1_Init+0x448>
    2fd6:	2d 85       	ldd	r18, Y+13	; 0x0d
    2fd8:	3e 85       	ldd	r19, Y+14	; 0x0e
    2fda:	25 30       	cpi	r18, 0x05	; 5
    2fdc:	31 05       	cpc	r19, r1
    2fde:	09 f4       	brne	.+2      	; 0x2fe2 <Timer1_Init+0x80>
    2fe0:	c3 c0       	rjmp	.+390    	; 0x3168 <Timer1_Init+0x206>
    2fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe6:	86 30       	cpi	r24, 0x06	; 6
    2fe8:	91 05       	cpc	r25, r1
    2fea:	0c f0       	brlt	.+2      	; 0x2fee <Timer1_Init+0x8c>
    2fec:	da c0       	rjmp	.+436    	; 0x31a2 <Timer1_Init+0x240>
    2fee:	9f c0       	rjmp	.+318    	; 0x312e <Timer1_Init+0x1cc>
    2ff0:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ff2:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ff4:	2b 30       	cpi	r18, 0x0B	; 11
    2ff6:	31 05       	cpc	r19, r1
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <Timer1_Init+0x9a>
    2ffa:	64 c1       	rjmp	.+712    	; 0x32c4 <Timer1_Init+0x362>
    2ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3000:	8c 30       	cpi	r24, 0x0C	; 12
    3002:	91 05       	cpc	r25, r1
    3004:	6c f4       	brge	.+26     	; 0x3020 <Timer1_Init+0xbe>
    3006:	2d 85       	ldd	r18, Y+13	; 0x0d
    3008:	3e 85       	ldd	r19, Y+14	; 0x0e
    300a:	29 30       	cpi	r18, 0x09	; 9
    300c:	31 05       	cpc	r19, r1
    300e:	09 f4       	brne	.+2      	; 0x3012 <Timer1_Init+0xb0>
    3010:	1f c1       	rjmp	.+574    	; 0x3250 <Timer1_Init+0x2ee>
    3012:	8d 85       	ldd	r24, Y+13	; 0x0d
    3014:	9e 85       	ldd	r25, Y+14	; 0x0e
    3016:	8a 30       	cpi	r24, 0x0A	; 10
    3018:	91 05       	cpc	r25, r1
    301a:	0c f0       	brlt	.+2      	; 0x301e <Timer1_Init+0xbc>
    301c:	36 c1       	rjmp	.+620    	; 0x328a <Timer1_Init+0x328>
    301e:	fb c0       	rjmp	.+502    	; 0x3216 <Timer1_Init+0x2b4>
    3020:	2d 85       	ldd	r18, Y+13	; 0x0d
    3022:	3e 85       	ldd	r19, Y+14	; 0x0e
    3024:	2d 30       	cpi	r18, 0x0D	; 13
    3026:	31 05       	cpc	r19, r1
    3028:	09 f4       	brne	.+2      	; 0x302c <Timer1_Init+0xca>
    302a:	86 c1       	rjmp	.+780    	; 0x3338 <Timer1_Init+0x3d6>
    302c:	8d 85       	ldd	r24, Y+13	; 0x0d
    302e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3030:	8d 30       	cpi	r24, 0x0D	; 13
    3032:	91 05       	cpc	r25, r1
    3034:	0c f4       	brge	.+2      	; 0x3038 <Timer1_Init+0xd6>
    3036:	63 c1       	rjmp	.+710    	; 0x32fe <Timer1_Init+0x39c>
    3038:	2d 85       	ldd	r18, Y+13	; 0x0d
    303a:	3e 85       	ldd	r19, Y+14	; 0x0e
    303c:	2e 30       	cpi	r18, 0x0E	; 14
    303e:	31 05       	cpc	r19, r1
    3040:	09 f4       	brne	.+2      	; 0x3044 <Timer1_Init+0xe2>
    3042:	97 c1       	rjmp	.+814    	; 0x3372 <Timer1_Init+0x410>
    3044:	b2 c1       	rjmp	.+868    	; 0x33aa <Timer1_Init+0x448>
 {

case timer1_Normal_mode:                          CLR_BIT(TCCR1A,WGM10);
    3046:	af e4       	ldi	r26, 0x4F	; 79
    3048:	b0 e0       	ldi	r27, 0x00	; 0
    304a:	ef e4       	ldi	r30, 0x4F	; 79
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	80 81       	ld	r24, Z
    3050:	8e 7f       	andi	r24, 0xFE	; 254
    3052:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR1A,WGM11);
    3054:	af e4       	ldi	r26, 0x4F	; 79
    3056:	b0 e0       	ldi	r27, 0x00	; 0
    3058:	ef e4       	ldi	r30, 0x4F	; 79
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	80 81       	ld	r24, Z
    305e:	8d 7f       	andi	r24, 0xFD	; 253
    3060:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR1B,WGM12);
    3062:	ae e4       	ldi	r26, 0x4E	; 78
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	ee e4       	ldi	r30, 0x4E	; 78
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	80 81       	ld	r24, Z
    306c:	87 7f       	andi	r24, 0xF7	; 247
    306e:	8c 93       	st	X, r24
						                          CLR_BIT(TCCR1B,WGM13);
    3070:	ae e4       	ldi	r26, 0x4E	; 78
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	ee e4       	ldi	r30, 0x4E	; 78
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	8f 7e       	andi	r24, 0xEF	; 239
    307c:	8c 93       	st	X, r24
    307e:	95 c1       	rjmp	.+810    	; 0x33aa <Timer1_Init+0x448>
                                                  break;
case timer1_PWM_Phase_Correct_8bit:               SET_BIT(TCCR1A,WGM10);
    3080:	af e4       	ldi	r26, 0x4F	; 79
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	ef e4       	ldi	r30, 0x4F	; 79
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	81 60       	ori	r24, 0x01	; 1
    308c:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    308e:	af e4       	ldi	r26, 0x4F	; 79
    3090:	b0 e0       	ldi	r27, 0x00	; 0
    3092:	ef e4       	ldi	r30, 0x4F	; 79
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	80 81       	ld	r24, Z
    3098:	8d 7f       	andi	r24, 0xFD	; 253
    309a:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    309c:	ae e4       	ldi	r26, 0x4E	; 78
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	ee e4       	ldi	r30, 0x4E	; 78
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	80 81       	ld	r24, Z
    30a6:	87 7f       	andi	r24, 0xF7	; 247
    30a8:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    30aa:	ae e4       	ldi	r26, 0x4E	; 78
    30ac:	b0 e0       	ldi	r27, 0x00	; 0
    30ae:	ee e4       	ldi	r30, 0x4E	; 78
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
    30b4:	8f 7e       	andi	r24, 0xEF	; 239
    30b6:	8c 93       	st	X, r24
    30b8:	78 c1       	rjmp	.+752    	; 0x33aa <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_Correct_9bit:               CLR_BIT(TCCR1A,WGM10);
    30ba:	af e4       	ldi	r26, 0x4F	; 79
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	ef e4       	ldi	r30, 0x4F	; 79
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	8e 7f       	andi	r24, 0xFE	; 254
    30c6:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    30c8:	af e4       	ldi	r26, 0x4F	; 79
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	ef e4       	ldi	r30, 0x4F	; 79
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	80 81       	ld	r24, Z
    30d2:	82 60       	ori	r24, 0x02	; 2
    30d4:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    30d6:	ae e4       	ldi	r26, 0x4E	; 78
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	ee e4       	ldi	r30, 0x4E	; 78
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 81       	ld	r24, Z
    30e0:	87 7f       	andi	r24, 0xF7	; 247
    30e2:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    30e4:	ae e4       	ldi	r26, 0x4E	; 78
    30e6:	b0 e0       	ldi	r27, 0x00	; 0
    30e8:	ee e4       	ldi	r30, 0x4E	; 78
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 81       	ld	r24, Z
    30ee:	8f 7e       	andi	r24, 0xEF	; 239
    30f0:	8c 93       	st	X, r24
    30f2:	5b c1       	rjmp	.+694    	; 0x33aa <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_Correct_10bit:              SET_BIT(TCCR1A,WGM10);
    30f4:	af e4       	ldi	r26, 0x4F	; 79
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	ef e4       	ldi	r30, 0x4F	; 79
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	80 81       	ld	r24, Z
    30fe:	81 60       	ori	r24, 0x01	; 1
    3100:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    3102:	af e4       	ldi	r26, 0x4F	; 79
    3104:	b0 e0       	ldi	r27, 0x00	; 0
    3106:	ef e4       	ldi	r30, 0x4F	; 79
    3108:	f0 e0       	ldi	r31, 0x00	; 0
    310a:	80 81       	ld	r24, Z
    310c:	82 60       	ori	r24, 0x02	; 2
    310e:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    3110:	ae e4       	ldi	r26, 0x4E	; 78
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	ee e4       	ldi	r30, 0x4E	; 78
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	80 81       	ld	r24, Z
    311a:	87 7f       	andi	r24, 0xF7	; 247
    311c:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    311e:	ae e4       	ldi	r26, 0x4E	; 78
    3120:	b0 e0       	ldi	r27, 0x00	; 0
    3122:	ee e4       	ldi	r30, 0x4E	; 78
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	80 81       	ld	r24, Z
    3128:	8f 7e       	andi	r24, 0xEF	; 239
    312a:	8c 93       	st	X, r24
    312c:	3e c1       	rjmp	.+636    	; 0x33aa <Timer1_Init+0x448>
	                                              break;
case timer1_CTC_mode_ocr_top:                     CLR_BIT(TCCR1A,WGM10);
    312e:	af e4       	ldi	r26, 0x4F	; 79
    3130:	b0 e0       	ldi	r27, 0x00	; 0
    3132:	ef e4       	ldi	r30, 0x4F	; 79
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	80 81       	ld	r24, Z
    3138:	8e 7f       	andi	r24, 0xFE	; 254
    313a:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    313c:	af e4       	ldi	r26, 0x4F	; 79
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	ef e4       	ldi	r30, 0x4F	; 79
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	80 81       	ld	r24, Z
    3146:	8d 7f       	andi	r24, 0xFD	; 253
    3148:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    314a:	ae e4       	ldi	r26, 0x4E	; 78
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	ee e4       	ldi	r30, 0x4E	; 78
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	80 81       	ld	r24, Z
    3154:	88 60       	ori	r24, 0x08	; 8
    3156:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    3158:	ae e4       	ldi	r26, 0x4E	; 78
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	ee e4       	ldi	r30, 0x4E	; 78
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	8f 7e       	andi	r24, 0xEF	; 239
    3164:	8c 93       	st	X, r24
    3166:	21 c1       	rjmp	.+578    	; 0x33aa <Timer1_Init+0x448>
	                                              break;
case timer1_Fast_PWM_8_bit:                       SET_BIT(TCCR1A,WGM10);
    3168:	af e4       	ldi	r26, 0x4F	; 79
    316a:	b0 e0       	ldi	r27, 0x00	; 0
    316c:	ef e4       	ldi	r30, 0x4F	; 79
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	80 81       	ld	r24, Z
    3172:	81 60       	ori	r24, 0x01	; 1
    3174:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    3176:	af e4       	ldi	r26, 0x4F	; 79
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	ef e4       	ldi	r30, 0x4F	; 79
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	80 81       	ld	r24, Z
    3180:	8d 7f       	andi	r24, 0xFD	; 253
    3182:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    3184:	ae e4       	ldi	r26, 0x4E	; 78
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	ee e4       	ldi	r30, 0x4E	; 78
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	88 60       	ori	r24, 0x08	; 8
    3190:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    3192:	ae e4       	ldi	r26, 0x4E	; 78
    3194:	b0 e0       	ldi	r27, 0x00	; 0
    3196:	ee e4       	ldi	r30, 0x4E	; 78
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	80 81       	ld	r24, Z
    319c:	8f 7e       	andi	r24, 0xEF	; 239
    319e:	8c 93       	st	X, r24
    31a0:	04 c1       	rjmp	.+520    	; 0x33aa <Timer1_Init+0x448>
	                                              break;
case timer1_Fast_PWM_9_bit:                       CLR_BIT(TCCR1A,WGM10);
    31a2:	af e4       	ldi	r26, 0x4F	; 79
    31a4:	b0 e0       	ldi	r27, 0x00	; 0
    31a6:	ef e4       	ldi	r30, 0x4F	; 79
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	8e 7f       	andi	r24, 0xFE	; 254
    31ae:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    31b0:	af e4       	ldi	r26, 0x4F	; 79
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	ef e4       	ldi	r30, 0x4F	; 79
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	80 81       	ld	r24, Z
    31ba:	82 60       	ori	r24, 0x02	; 2
    31bc:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    31be:	ae e4       	ldi	r26, 0x4E	; 78
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	ee e4       	ldi	r30, 0x4E	; 78
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	88 60       	ori	r24, 0x08	; 8
    31ca:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    31cc:	ae e4       	ldi	r26, 0x4E	; 78
    31ce:	b0 e0       	ldi	r27, 0x00	; 0
    31d0:	ee e4       	ldi	r30, 0x4E	; 78
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	8f 7e       	andi	r24, 0xEF	; 239
    31d8:	8c 93       	st	X, r24
    31da:	e7 c0       	rjmp	.+462    	; 0x33aa <Timer1_Init+0x448>
	                                              break;
case timer1_Fast_PWM_10_bit:                      SET_BIT(TCCR1A,WGM10);
    31dc:	af e4       	ldi	r26, 0x4F	; 79
    31de:	b0 e0       	ldi	r27, 0x00	; 0
    31e0:	ef e4       	ldi	r30, 0x4F	; 79
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	80 81       	ld	r24, Z
    31e6:	81 60       	ori	r24, 0x01	; 1
    31e8:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    31ea:	af e4       	ldi	r26, 0x4F	; 79
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	ef e4       	ldi	r30, 0x4F	; 79
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	80 81       	ld	r24, Z
    31f4:	82 60       	ori	r24, 0x02	; 2
    31f6:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    31f8:	ae e4       	ldi	r26, 0x4E	; 78
    31fa:	b0 e0       	ldi	r27, 0x00	; 0
    31fc:	ee e4       	ldi	r30, 0x4E	; 78
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	80 81       	ld	r24, Z
    3202:	88 60       	ori	r24, 0x08	; 8
    3204:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM13);
    3206:	ae e4       	ldi	r26, 0x4E	; 78
    3208:	b0 e0       	ldi	r27, 0x00	; 0
    320a:	ee e4       	ldi	r30, 0x4E	; 78
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	80 81       	ld	r24, Z
    3210:	8f 7e       	andi	r24, 0xEF	; 239
    3212:	8c 93       	st	X, r24
    3214:	ca c0       	rjmp	.+404    	; 0x33aa <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_and_Freq_Correct_icr_top:   CLR_BIT(TCCR1A,WGM10);
    3216:	af e4       	ldi	r26, 0x4F	; 79
    3218:	b0 e0       	ldi	r27, 0x00	; 0
    321a:	ef e4       	ldi	r30, 0x4F	; 79
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	80 81       	ld	r24, Z
    3220:	8e 7f       	andi	r24, 0xFE	; 254
    3222:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    3224:	af e4       	ldi	r26, 0x4F	; 79
    3226:	b0 e0       	ldi	r27, 0x00	; 0
    3228:	ef e4       	ldi	r30, 0x4F	; 79
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	80 81       	ld	r24, Z
    322e:	8d 7f       	andi	r24, 0xFD	; 253
    3230:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    3232:	ae e4       	ldi	r26, 0x4E	; 78
    3234:	b0 e0       	ldi	r27, 0x00	; 0
    3236:	ee e4       	ldi	r30, 0x4E	; 78
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	80 81       	ld	r24, Z
    323c:	87 7f       	andi	r24, 0xF7	; 247
    323e:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    3240:	ae e4       	ldi	r26, 0x4E	; 78
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	ee e4       	ldi	r30, 0x4E	; 78
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	80 81       	ld	r24, Z
    324a:	80 61       	ori	r24, 0x10	; 16
    324c:	8c 93       	st	X, r24
    324e:	ad c0       	rjmp	.+346    	; 0x33aa <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_and_Freq_Correct_ocr_top:   SET_BIT(TCCR1A,WGM10);
    3250:	af e4       	ldi	r26, 0x4F	; 79
    3252:	b0 e0       	ldi	r27, 0x00	; 0
    3254:	ef e4       	ldi	r30, 0x4F	; 79
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	80 81       	ld	r24, Z
    325a:	81 60       	ori	r24, 0x01	; 1
    325c:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    325e:	af e4       	ldi	r26, 0x4F	; 79
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	ef e4       	ldi	r30, 0x4F	; 79
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	80 81       	ld	r24, Z
    3268:	8d 7f       	andi	r24, 0xFD	; 253
    326a:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    326c:	ae e4       	ldi	r26, 0x4E	; 78
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	ee e4       	ldi	r30, 0x4E	; 78
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 81       	ld	r24, Z
    3276:	87 7f       	andi	r24, 0xF7	; 247
    3278:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    327a:	ae e4       	ldi	r26, 0x4E	; 78
    327c:	b0 e0       	ldi	r27, 0x00	; 0
    327e:	ee e4       	ldi	r30, 0x4E	; 78
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	80 81       	ld	r24, Z
    3284:	80 61       	ori	r24, 0x10	; 16
    3286:	8c 93       	st	X, r24
    3288:	90 c0       	rjmp	.+288    	; 0x33aa <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_Correct_icr_top:            CLR_BIT(TCCR1A,WGM10);
    328a:	af e4       	ldi	r26, 0x4F	; 79
    328c:	b0 e0       	ldi	r27, 0x00	; 0
    328e:	ef e4       	ldi	r30, 0x4F	; 79
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
    3294:	8e 7f       	andi	r24, 0xFE	; 254
    3296:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    3298:	af e4       	ldi	r26, 0x4F	; 79
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	ef e4       	ldi	r30, 0x4F	; 79
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	80 81       	ld	r24, Z
    32a2:	82 60       	ori	r24, 0x02	; 2
    32a4:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    32a6:	ae e4       	ldi	r26, 0x4E	; 78
    32a8:	b0 e0       	ldi	r27, 0x00	; 0
    32aa:	ee e4       	ldi	r30, 0x4E	; 78
    32ac:	f0 e0       	ldi	r31, 0x00	; 0
    32ae:	80 81       	ld	r24, Z
    32b0:	87 7f       	andi	r24, 0xF7	; 247
    32b2:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    32b4:	ae e4       	ldi	r26, 0x4E	; 78
    32b6:	b0 e0       	ldi	r27, 0x00	; 0
    32b8:	ee e4       	ldi	r30, 0x4E	; 78
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	80 81       	ld	r24, Z
    32be:	80 61       	ori	r24, 0x10	; 16
    32c0:	8c 93       	st	X, r24
    32c2:	73 c0       	rjmp	.+230    	; 0x33aa <Timer1_Init+0x448>
	                                              break;
case timer1_PWM_Phase_Correct_ocr_top:            SET_BIT(TCCR1A,WGM10);
    32c4:	af e4       	ldi	r26, 0x4F	; 79
    32c6:	b0 e0       	ldi	r27, 0x00	; 0
    32c8:	ef e4       	ldi	r30, 0x4F	; 79
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	81 60       	ori	r24, 0x01	; 1
    32d0:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    32d2:	af e4       	ldi	r26, 0x4F	; 79
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	ef e4       	ldi	r30, 0x4F	; 79
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	80 81       	ld	r24, Z
    32dc:	82 60       	ori	r24, 0x02	; 2
    32de:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1B,WGM12);
    32e0:	ae e4       	ldi	r26, 0x4E	; 78
    32e2:	b0 e0       	ldi	r27, 0x00	; 0
    32e4:	ee e4       	ldi	r30, 0x4E	; 78
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	80 81       	ld	r24, Z
    32ea:	87 7f       	andi	r24, 0xF7	; 247
    32ec:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    32ee:	ae e4       	ldi	r26, 0x4E	; 78
    32f0:	b0 e0       	ldi	r27, 0x00	; 0
    32f2:	ee e4       	ldi	r30, 0x4E	; 78
    32f4:	f0 e0       	ldi	r31, 0x00	; 0
    32f6:	80 81       	ld	r24, Z
    32f8:	80 61       	ori	r24, 0x10	; 16
    32fa:	8c 93       	st	X, r24
    32fc:	56 c0       	rjmp	.+172    	; 0x33aa <Timer1_Init+0x448>
	                                              break;
case timer1_CTC_mode_icr_top:                     CLR_BIT(TCCR1A,WGM10);
    32fe:	af e4       	ldi	r26, 0x4F	; 79
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	ef e4       	ldi	r30, 0x4F	; 79
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	8e 7f       	andi	r24, 0xFE	; 254
    330a:	8c 93       	st	X, r24
							                      CLR_BIT(TCCR1A,WGM11);
    330c:	af e4       	ldi	r26, 0x4F	; 79
    330e:	b0 e0       	ldi	r27, 0x00	; 0
    3310:	ef e4       	ldi	r30, 0x4F	; 79
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	80 81       	ld	r24, Z
    3316:	8d 7f       	andi	r24, 0xFD	; 253
    3318:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    331a:	ae e4       	ldi	r26, 0x4E	; 78
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	ee e4       	ldi	r30, 0x4E	; 78
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	80 81       	ld	r24, Z
    3324:	88 60       	ori	r24, 0x08	; 8
    3326:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    3328:	ae e4       	ldi	r26, 0x4E	; 78
    332a:	b0 e0       	ldi	r27, 0x00	; 0
    332c:	ee e4       	ldi	r30, 0x4E	; 78
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	80 81       	ld	r24, Z
    3332:	80 61       	ori	r24, 0x10	; 16
    3334:	8c 93       	st	X, r24
    3336:	39 c0       	rjmp	.+114    	; 0x33aa <Timer1_Init+0x448>
	                                              break;
case timer1_Fast_PWM_icr_top:                     CLR_BIT(TCCR1A,WGM10);
    3338:	af e4       	ldi	r26, 0x4F	; 79
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	ef e4       	ldi	r30, 0x4F	; 79
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	80 81       	ld	r24, Z
    3342:	8e 7f       	andi	r24, 0xFE	; 254
    3344:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    3346:	af e4       	ldi	r26, 0x4F	; 79
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	ef e4       	ldi	r30, 0x4F	; 79
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	80 81       	ld	r24, Z
    3350:	82 60       	ori	r24, 0x02	; 2
    3352:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    3354:	ae e4       	ldi	r26, 0x4E	; 78
    3356:	b0 e0       	ldi	r27, 0x00	; 0
    3358:	ee e4       	ldi	r30, 0x4E	; 78
    335a:	f0 e0       	ldi	r31, 0x00	; 0
    335c:	80 81       	ld	r24, Z
    335e:	88 60       	ori	r24, 0x08	; 8
    3360:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    3362:	ae e4       	ldi	r26, 0x4E	; 78
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	ee e4       	ldi	r30, 0x4E	; 78
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	80 81       	ld	r24, Z
    336c:	80 61       	ori	r24, 0x10	; 16
    336e:	8c 93       	st	X, r24
    3370:	1c c0       	rjmp	.+56     	; 0x33aa <Timer1_Init+0x448>
	                                              break;
case timer1_Fast_PWM_ocr_top:                     SET_BIT(TCCR1A,WGM10);
    3372:	af e4       	ldi	r26, 0x4F	; 79
    3374:	b0 e0       	ldi	r27, 0x00	; 0
    3376:	ef e4       	ldi	r30, 0x4F	; 79
    3378:	f0 e0       	ldi	r31, 0x00	; 0
    337a:	80 81       	ld	r24, Z
    337c:	81 60       	ori	r24, 0x01	; 1
    337e:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1A,WGM11);
    3380:	af e4       	ldi	r26, 0x4F	; 79
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	ef e4       	ldi	r30, 0x4F	; 79
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	80 81       	ld	r24, Z
    338a:	82 60       	ori	r24, 0x02	; 2
    338c:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM12);
    338e:	ae e4       	ldi	r26, 0x4E	; 78
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	ee e4       	ldi	r30, 0x4E	; 78
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	80 81       	ld	r24, Z
    3398:	88 60       	ori	r24, 0x08	; 8
    339a:	8c 93       	st	X, r24
							                      SET_BIT(TCCR1B,WGM13);
    339c:	ae e4       	ldi	r26, 0x4E	; 78
    339e:	b0 e0       	ldi	r27, 0x00	; 0
    33a0:	ee e4       	ldi	r30, 0x4E	; 78
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	80 81       	ld	r24, Z
    33a6:	80 61       	ori	r24, 0x10	; 16
    33a8:	8c 93       	st	X, r24
	                                              break;
}


#if  oc_1==normal_1
switch (oc1_mode)
    33aa:	8b 81       	ldd	r24, Y+3	; 0x03
    33ac:	28 2f       	mov	r18, r24
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	3c 87       	std	Y+12, r19	; 0x0c
    33b2:	2b 87       	std	Y+11, r18	; 0x0b
    33b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    33b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    33b8:	81 30       	cpi	r24, 0x01	; 1
    33ba:	91 05       	cpc	r25, r1
    33bc:	09 f4       	brne	.+2      	; 0x33c0 <Timer1_Init+0x45e>
    33be:	42 c0       	rjmp	.+132    	; 0x3444 <Timer1_Init+0x4e2>
    33c0:	2b 85       	ldd	r18, Y+11	; 0x0b
    33c2:	3c 85       	ldd	r19, Y+12	; 0x0c
    33c4:	22 30       	cpi	r18, 0x02	; 2
    33c6:	31 05       	cpc	r19, r1
    33c8:	2c f4       	brge	.+10     	; 0x33d4 <Timer1_Init+0x472>
    33ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    33cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    33ce:	00 97       	sbiw	r24, 0x00	; 0
    33d0:	71 f0       	breq	.+28     	; 0x33ee <Timer1_Init+0x48c>
    33d2:	0e c1       	rjmp	.+540    	; 0x35f0 <Timer1_Init+0x68e>
    33d4:	2b 85       	ldd	r18, Y+11	; 0x0b
    33d6:	3c 85       	ldd	r19, Y+12	; 0x0c
    33d8:	22 30       	cpi	r18, 0x02	; 2
    33da:	31 05       	cpc	r19, r1
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <Timer1_Init+0x47e>
    33de:	7a c0       	rjmp	.+244    	; 0x34d4 <Timer1_Init+0x572>
    33e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    33e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    33e4:	83 30       	cpi	r24, 0x03	; 3
    33e6:	91 05       	cpc	r25, r1
    33e8:	09 f4       	brne	.+2      	; 0x33ec <Timer1_Init+0x48a>
    33ea:	bc c0       	rjmp	.+376    	; 0x3564 <Timer1_Init+0x602>
    33ec:	01 c1       	rjmp	.+514    	; 0x35f0 <Timer1_Init+0x68e>
{
case disconnected_1:
						CLR_BIT(TCCR1A,COM1A0);
    33ee:	af e4       	ldi	r26, 0x4F	; 79
    33f0:	b0 e0       	ldi	r27, 0x00	; 0
    33f2:	ef e4       	ldi	r30, 0x4F	; 79
    33f4:	f0 e0       	ldi	r31, 0x00	; 0
    33f6:	80 81       	ld	r24, Z
    33f8:	8f 7b       	andi	r24, 0xBF	; 191
    33fa:	8c 93       	st	X, r24
						CLR_BIT(TCCR1A,COM1A1);
    33fc:	af e4       	ldi	r26, 0x4F	; 79
    33fe:	b0 e0       	ldi	r27, 0x00	; 0
    3400:	ef e4       	ldi	r30, 0x4F	; 79
    3402:	f0 e0       	ldi	r31, 0x00	; 0
    3404:	80 81       	ld	r24, Z
    3406:	8f 77       	andi	r24, 0x7F	; 127
    3408:	8c 93       	st	X, r24

						CLR_BIT(TCCR1A,COM1B0);
    340a:	af e4       	ldi	r26, 0x4F	; 79
    340c:	b0 e0       	ldi	r27, 0x00	; 0
    340e:	ef e4       	ldi	r30, 0x4F	; 79
    3410:	f0 e0       	ldi	r31, 0x00	; 0
    3412:	80 81       	ld	r24, Z
    3414:	8f 7e       	andi	r24, 0xEF	; 239
    3416:	8c 93       	st	X, r24
						CLR_BIT(TCCR1A,COM1B1);
    3418:	af e4       	ldi	r26, 0x4F	; 79
    341a:	b0 e0       	ldi	r27, 0x00	; 0
    341c:	ef e4       	ldi	r30, 0x4F	; 79
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	80 81       	ld	r24, Z
    3422:	8f 7d       	andi	r24, 0xDF	; 223
    3424:	8c 93       	st	X, r24

						CLR_BIT(TCCR1A,COM1C0);
    3426:	af e4       	ldi	r26, 0x4F	; 79
    3428:	b0 e0       	ldi	r27, 0x00	; 0
    342a:	ef e4       	ldi	r30, 0x4F	; 79
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	80 81       	ld	r24, Z
    3430:	8b 7f       	andi	r24, 0xFB	; 251
    3432:	8c 93       	st	X, r24
						CLR_BIT(TCCR1A,COM1C1);
    3434:	af e4       	ldi	r26, 0x4F	; 79
    3436:	b0 e0       	ldi	r27, 0x00	; 0
    3438:	ef e4       	ldi	r30, 0x4F	; 79
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	80 81       	ld	r24, Z
    343e:	87 7f       	andi	r24, 0xF7	; 247
    3440:	8c 93       	st	X, r24
    3442:	d6 c0       	rjmp	.+428    	; 0x35f0 <Timer1_Init+0x68e>
						break;
case Toggle_1:switch(channel_t)
    3444:	8c 81       	ldd	r24, Y+4	; 0x04
    3446:	28 2f       	mov	r18, r24
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	3a 87       	std	Y+10, r19	; 0x0a
    344c:	29 87       	std	Y+9, r18	; 0x09
    344e:	89 85       	ldd	r24, Y+9	; 0x09
    3450:	9a 85       	ldd	r25, Y+10	; 0x0a
    3452:	81 30       	cpi	r24, 0x01	; 1
    3454:	91 05       	cpc	r25, r1
    3456:	89 f0       	breq	.+34     	; 0x347a <Timer1_Init+0x518>
    3458:	29 85       	ldd	r18, Y+9	; 0x09
    345a:	3a 85       	ldd	r19, Y+10	; 0x0a
    345c:	22 30       	cpi	r18, 0x02	; 2
    345e:	31 05       	cpc	r19, r1
    3460:	0c f4       	brge	.+2      	; 0x3464 <Timer1_Init+0x502>
    3462:	c6 c0       	rjmp	.+396    	; 0x35f0 <Timer1_Init+0x68e>
    3464:	89 85       	ldd	r24, Y+9	; 0x09
    3466:	9a 85       	ldd	r25, Y+10	; 0x0a
    3468:	82 30       	cpi	r24, 0x02	; 2
    346a:	91 05       	cpc	r25, r1
    346c:	a9 f0       	breq	.+42     	; 0x3498 <Timer1_Init+0x536>
    346e:	29 85       	ldd	r18, Y+9	; 0x09
    3470:	3a 85       	ldd	r19, Y+10	; 0x0a
    3472:	23 30       	cpi	r18, 0x03	; 3
    3474:	31 05       	cpc	r19, r1
    3476:	f9 f0       	breq	.+62     	; 0x34b6 <Timer1_Init+0x554>
    3478:	bb c0       	rjmp	.+374    	; 0x35f0 <Timer1_Init+0x68e>
                  {
                      case disconnected_channel:break;
                      case A_Channel:SET_BIT(TCCR1A,COM1A0);
    347a:	af e4       	ldi	r26, 0x4F	; 79
    347c:	b0 e0       	ldi	r27, 0x00	; 0
    347e:	ef e4       	ldi	r30, 0x4F	; 79
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	80 81       	ld	r24, Z
    3484:	80 64       	ori	r24, 0x40	; 64
    3486:	8c 93       	st	X, r24
						             CLR_BIT(TCCR1A,COM1A1);
    3488:	af e4       	ldi	r26, 0x4F	; 79
    348a:	b0 e0       	ldi	r27, 0x00	; 0
    348c:	ef e4       	ldi	r30, 0x4F	; 79
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	80 81       	ld	r24, Z
    3492:	8f 77       	andi	r24, 0x7F	; 127
    3494:	8c 93       	st	X, r24
    3496:	ac c0       	rjmp	.+344    	; 0x35f0 <Timer1_Init+0x68e>
						             break;
                      case B_Channel:SET_BIT(TCCR1A,COM1B0);
    3498:	af e4       	ldi	r26, 0x4F	; 79
    349a:	b0 e0       	ldi	r27, 0x00	; 0
    349c:	ef e4       	ldi	r30, 0x4F	; 79
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	80 81       	ld	r24, Z
    34a2:	80 61       	ori	r24, 0x10	; 16
    34a4:	8c 93       	st	X, r24
                      				 CLR_BIT(TCCR1A,COM1B1);
    34a6:	af e4       	ldi	r26, 0x4F	; 79
    34a8:	b0 e0       	ldi	r27, 0x00	; 0
    34aa:	ef e4       	ldi	r30, 0x4F	; 79
    34ac:	f0 e0       	ldi	r31, 0x00	; 0
    34ae:	80 81       	ld	r24, Z
    34b0:	8f 7d       	andi	r24, 0xDF	; 223
    34b2:	8c 93       	st	X, r24
    34b4:	9d c0       	rjmp	.+314    	; 0x35f0 <Timer1_Init+0x68e>
                      		         break;
                      case C_Channel:SET_BIT(TCCR1A,COM1C0);
    34b6:	af e4       	ldi	r26, 0x4F	; 79
    34b8:	b0 e0       	ldi	r27, 0x00	; 0
    34ba:	ef e4       	ldi	r30, 0x4F	; 79
    34bc:	f0 e0       	ldi	r31, 0x00	; 0
    34be:	80 81       	ld	r24, Z
    34c0:	84 60       	ori	r24, 0x04	; 4
    34c2:	8c 93       	st	X, r24
                      			     CLR_BIT(TCCR1A,COM1C1);
    34c4:	af e4       	ldi	r26, 0x4F	; 79
    34c6:	b0 e0       	ldi	r27, 0x00	; 0
    34c8:	ef e4       	ldi	r30, 0x4F	; 79
    34ca:	f0 e0       	ldi	r31, 0x00	; 0
    34cc:	80 81       	ld	r24, Z
    34ce:	87 7f       	andi	r24, 0xF7	; 247
    34d0:	8c 93       	st	X, r24
    34d2:	8e c0       	rjmp	.+284    	; 0x35f0 <Timer1_Init+0x68e>
                      				 break;
                    }
						break;
case Non_inverting_1:switch(channel_t)
    34d4:	8c 81       	ldd	r24, Y+4	; 0x04
    34d6:	28 2f       	mov	r18, r24
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	38 87       	std	Y+8, r19	; 0x08
    34dc:	2f 83       	std	Y+7, r18	; 0x07
    34de:	8f 81       	ldd	r24, Y+7	; 0x07
    34e0:	98 85       	ldd	r25, Y+8	; 0x08
    34e2:	81 30       	cpi	r24, 0x01	; 1
    34e4:	91 05       	cpc	r25, r1
    34e6:	89 f0       	breq	.+34     	; 0x350a <Timer1_Init+0x5a8>
    34e8:	2f 81       	ldd	r18, Y+7	; 0x07
    34ea:	38 85       	ldd	r19, Y+8	; 0x08
    34ec:	22 30       	cpi	r18, 0x02	; 2
    34ee:	31 05       	cpc	r19, r1
    34f0:	0c f4       	brge	.+2      	; 0x34f4 <Timer1_Init+0x592>
    34f2:	7e c0       	rjmp	.+252    	; 0x35f0 <Timer1_Init+0x68e>
    34f4:	8f 81       	ldd	r24, Y+7	; 0x07
    34f6:	98 85       	ldd	r25, Y+8	; 0x08
    34f8:	82 30       	cpi	r24, 0x02	; 2
    34fa:	91 05       	cpc	r25, r1
    34fc:	a9 f0       	breq	.+42     	; 0x3528 <Timer1_Init+0x5c6>
    34fe:	2f 81       	ldd	r18, Y+7	; 0x07
    3500:	38 85       	ldd	r19, Y+8	; 0x08
    3502:	23 30       	cpi	r18, 0x03	; 3
    3504:	31 05       	cpc	r19, r1
    3506:	f9 f0       	breq	.+62     	; 0x3546 <Timer1_Init+0x5e4>
    3508:	73 c0       	rjmp	.+230    	; 0x35f0 <Timer1_Init+0x68e>
                        {
                          case disconnected_channel:break;
                          case A_Channel:CLR_BIT(TCCR1A,COM1A0);
    350a:	af e4       	ldi	r26, 0x4F	; 79
    350c:	b0 e0       	ldi	r27, 0x00	; 0
    350e:	ef e4       	ldi	r30, 0x4F	; 79
    3510:	f0 e0       	ldi	r31, 0x00	; 0
    3512:	80 81       	ld	r24, Z
    3514:	8f 7b       	andi	r24, 0xBF	; 191
    3516:	8c 93       	st	X, r24
						                 SET_BIT(TCCR1A,COM1A1);
    3518:	af e4       	ldi	r26, 0x4F	; 79
    351a:	b0 e0       	ldi	r27, 0x00	; 0
    351c:	ef e4       	ldi	r30, 0x4F	; 79
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	80 81       	ld	r24, Z
    3522:	80 68       	ori	r24, 0x80	; 128
    3524:	8c 93       	st	X, r24
    3526:	64 c0       	rjmp	.+200    	; 0x35f0 <Timer1_Init+0x68e>
						                 break;
                          case B_Channel:CLR_BIT(TCCR1A,COM1B0);
    3528:	af e4       	ldi	r26, 0x4F	; 79
    352a:	b0 e0       	ldi	r27, 0x00	; 0
    352c:	ef e4       	ldi	r30, 0x4F	; 79
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	80 81       	ld	r24, Z
    3532:	8f 7e       	andi	r24, 0xEF	; 239
    3534:	8c 93       	st	X, r24
                          				 SET_BIT(TCCR1A,COM1B1);
    3536:	af e4       	ldi	r26, 0x4F	; 79
    3538:	b0 e0       	ldi	r27, 0x00	; 0
    353a:	ef e4       	ldi	r30, 0x4F	; 79
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	80 81       	ld	r24, Z
    3540:	80 62       	ori	r24, 0x20	; 32
    3542:	8c 93       	st	X, r24
    3544:	55 c0       	rjmp	.+170    	; 0x35f0 <Timer1_Init+0x68e>
                          				 break;
                          case C_Channel:CLR_BIT(TCCR1A,COM1C0);
    3546:	af e4       	ldi	r26, 0x4F	; 79
    3548:	b0 e0       	ldi	r27, 0x00	; 0
    354a:	ef e4       	ldi	r30, 0x4F	; 79
    354c:	f0 e0       	ldi	r31, 0x00	; 0
    354e:	80 81       	ld	r24, Z
    3550:	8b 7f       	andi	r24, 0xFB	; 251
    3552:	8c 93       	st	X, r24
                          				 SET_BIT(TCCR1A,COM1C1);
    3554:	af e4       	ldi	r26, 0x4F	; 79
    3556:	b0 e0       	ldi	r27, 0x00	; 0
    3558:	ef e4       	ldi	r30, 0x4F	; 79
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	80 81       	ld	r24, Z
    355e:	88 60       	ori	r24, 0x08	; 8
    3560:	8c 93       	st	X, r24
    3562:	46 c0       	rjmp	.+140    	; 0x35f0 <Timer1_Init+0x68e>
                          				 break;
                         }
						break;
case Inverting_1:switch(channel_t)
    3564:	8c 81       	ldd	r24, Y+4	; 0x04
    3566:	28 2f       	mov	r18, r24
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	3e 83       	std	Y+6, r19	; 0x06
    356c:	2d 83       	std	Y+5, r18	; 0x05
    356e:	8d 81       	ldd	r24, Y+5	; 0x05
    3570:	9e 81       	ldd	r25, Y+6	; 0x06
    3572:	81 30       	cpi	r24, 0x01	; 1
    3574:	91 05       	cpc	r25, r1
    3576:	81 f0       	breq	.+32     	; 0x3598 <Timer1_Init+0x636>
    3578:	2d 81       	ldd	r18, Y+5	; 0x05
    357a:	3e 81       	ldd	r19, Y+6	; 0x06
    357c:	22 30       	cpi	r18, 0x02	; 2
    357e:	31 05       	cpc	r19, r1
    3580:	bc f1       	brlt	.+110    	; 0x35f0 <Timer1_Init+0x68e>
    3582:	8d 81       	ldd	r24, Y+5	; 0x05
    3584:	9e 81       	ldd	r25, Y+6	; 0x06
    3586:	82 30       	cpi	r24, 0x02	; 2
    3588:	91 05       	cpc	r25, r1
    358a:	a9 f0       	breq	.+42     	; 0x35b6 <Timer1_Init+0x654>
    358c:	2d 81       	ldd	r18, Y+5	; 0x05
    358e:	3e 81       	ldd	r19, Y+6	; 0x06
    3590:	23 30       	cpi	r18, 0x03	; 3
    3592:	31 05       	cpc	r19, r1
    3594:	f9 f0       	breq	.+62     	; 0x35d4 <Timer1_Init+0x672>
    3596:	2c c0       	rjmp	.+88     	; 0x35f0 <Timer1_Init+0x68e>
                     {

                       case disconnected_channel:break;
                       case A_Channel:SET_BIT(TCCR1A,COM1A0);
    3598:	af e4       	ldi	r26, 0x4F	; 79
    359a:	b0 e0       	ldi	r27, 0x00	; 0
    359c:	ef e4       	ldi	r30, 0x4F	; 79
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	80 81       	ld	r24, Z
    35a2:	80 64       	ori	r24, 0x40	; 64
    35a4:	8c 93       	st	X, r24
                                      SET_BIT(TCCR1A,COM1A1);
    35a6:	af e4       	ldi	r26, 0x4F	; 79
    35a8:	b0 e0       	ldi	r27, 0x00	; 0
    35aa:	ef e4       	ldi	r30, 0x4F	; 79
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	80 81       	ld	r24, Z
    35b0:	80 68       	ori	r24, 0x80	; 128
    35b2:	8c 93       	st	X, r24
    35b4:	1d c0       	rjmp	.+58     	; 0x35f0 <Timer1_Init+0x68e>
                                      break;
                       case B_Channel:SET_BIT(TCCR1A,COM1B0);
    35b6:	af e4       	ldi	r26, 0x4F	; 79
    35b8:	b0 e0       	ldi	r27, 0x00	; 0
    35ba:	ef e4       	ldi	r30, 0x4F	; 79
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	80 81       	ld	r24, Z
    35c0:	80 61       	ori	r24, 0x10	; 16
    35c2:	8c 93       	st	X, r24
  				                      SET_BIT(TCCR1A,COM1B1);
    35c4:	af e4       	ldi	r26, 0x4F	; 79
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	ef e4       	ldi	r30, 0x4F	; 79
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	80 62       	ori	r24, 0x20	; 32
    35d0:	8c 93       	st	X, r24
    35d2:	0e c0       	rjmp	.+28     	; 0x35f0 <Timer1_Init+0x68e>
  			                       	  break;
                       case C_Channel:SET_BIT(TCCR1A,COM1C0);
    35d4:	af e4       	ldi	r26, 0x4F	; 79
    35d6:	b0 e0       	ldi	r27, 0x00	; 0
    35d8:	ef e4       	ldi	r30, 0x4F	; 79
    35da:	f0 e0       	ldi	r31, 0x00	; 0
    35dc:	80 81       	ld	r24, Z
    35de:	84 60       	ori	r24, 0x04	; 4
    35e0:	8c 93       	st	X, r24
  				                      SET_BIT(TCCR1A,COM1C1);
    35e2:	af e4       	ldi	r26, 0x4F	; 79
    35e4:	b0 e0       	ldi	r27, 0x00	; 0
    35e6:	ef e4       	ldi	r30, 0x4F	; 79
    35e8:	f0 e0       	ldi	r31, 0x00	; 0
    35ea:	80 81       	ld	r24, Z
    35ec:	88 60       	ori	r24, 0x08	; 8
    35ee:	8c 93       	st	X, r24
							break;

}

#endif
	TCCR1B&=0XF8;
    35f0:	ae e4       	ldi	r26, 0x4E	; 78
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	ee e4       	ldi	r30, 0x4E	; 78
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	80 81       	ld	r24, Z
    35fa:	88 7f       	andi	r24, 0xF8	; 248
    35fc:	8c 93       	st	X, r24
	TCCR1B|=scaler;
    35fe:	ae e4       	ldi	r26, 0x4E	; 78
    3600:	b0 e0       	ldi	r27, 0x00	; 0
    3602:	ee e4       	ldi	r30, 0x4E	; 78
    3604:	f0 e0       	ldi	r31, 0x00	; 0
    3606:	90 81       	ld	r25, Z
    3608:	8a 81       	ldd	r24, Y+2	; 0x02
    360a:	89 2b       	or	r24, r25
    360c:	8c 93       	st	X, r24

}
    360e:	2e 96       	adiw	r28, 0x0e	; 14
    3610:	0f b6       	in	r0, 0x3f	; 63
    3612:	f8 94       	cli
    3614:	de bf       	out	0x3e, r29	; 62
    3616:	0f be       	out	0x3f, r0	; 63
    3618:	cd bf       	out	0x3d, r28	; 61
    361a:	cf 91       	pop	r28
    361c:	df 91       	pop	r29
    361e:	08 95       	ret

00003620 <Timer1_InputCaptureEdge>:

void Timer1_InputCaptureEdge(Edge_type edge)
{
    3620:	df 93       	push	r29
    3622:	cf 93       	push	r28
    3624:	0f 92       	push	r0
    3626:	cd b7       	in	r28, 0x3d	; 61
    3628:	de b7       	in	r29, 0x3e	; 62
    362a:	89 83       	std	Y+1, r24	; 0x01
	if(edge==Rising)
    362c:	89 81       	ldd	r24, Y+1	; 0x01
    362e:	81 30       	cpi	r24, 0x01	; 1
    3630:	41 f4       	brne	.+16     	; 0x3642 <Timer1_InputCaptureEdge+0x22>
		SET_BIT(TCCR1B,ICES1);
    3632:	ae e4       	ldi	r26, 0x4E	; 78
    3634:	b0 e0       	ldi	r27, 0x00	; 0
    3636:	ee e4       	ldi	r30, 0x4E	; 78
    3638:	f0 e0       	ldi	r31, 0x00	; 0
    363a:	80 81       	ld	r24, Z
    363c:	80 64       	ori	r24, 0x40	; 64
    363e:	8c 93       	st	X, r24
    3640:	0a c0       	rjmp	.+20     	; 0x3656 <Timer1_InputCaptureEdge+0x36>


	else if(edge==Falling)
    3642:	89 81       	ldd	r24, Y+1	; 0x01
    3644:	88 23       	and	r24, r24
    3646:	39 f4       	brne	.+14     	; 0x3656 <Timer1_InputCaptureEdge+0x36>
		CLR_BIT(TCCR1B,ICES1);
    3648:	ae e4       	ldi	r26, 0x4E	; 78
    364a:	b0 e0       	ldi	r27, 0x00	; 0
    364c:	ee e4       	ldi	r30, 0x4E	; 78
    364e:	f0 e0       	ldi	r31, 0x00	; 0
    3650:	80 81       	ld	r24, Z
    3652:	8f 7b       	andi	r24, 0xBF	; 191
    3654:	8c 93       	st	X, r24

}
    3656:	0f 90       	pop	r0
    3658:	cf 91       	pop	r28
    365a:	df 91       	pop	r29
    365c:	08 95       	ret

0000365e <Timer1_ICU_InterruptEnable>:

void Timer1_ICU_InterruptEnable(void)
{
    365e:	df 93       	push	r29
    3660:	cf 93       	push	r28
    3662:	cd b7       	in	r28, 0x3d	; 61
    3664:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    3666:	a7 e5       	ldi	r26, 0x57	; 87
    3668:	b0 e0       	ldi	r27, 0x00	; 0
    366a:	e7 e5       	ldi	r30, 0x57	; 87
    366c:	f0 e0       	ldi	r31, 0x00	; 0
    366e:	80 81       	ld	r24, Z
    3670:	80 62       	ori	r24, 0x20	; 32
    3672:	8c 93       	st	X, r24
}
    3674:	cf 91       	pop	r28
    3676:	df 91       	pop	r29
    3678:	08 95       	ret

0000367a <Timer1_ICU_InterruptDisable>:
void Timer1_ICU_InterruptDisable(void)
{
    367a:	df 93       	push	r29
    367c:	cf 93       	push	r28
    367e:	cd b7       	in	r28, 0x3d	; 61
    3680:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TICIE1);
    3682:	a7 e5       	ldi	r26, 0x57	; 87
    3684:	b0 e0       	ldi	r27, 0x00	; 0
    3686:	e7 e5       	ldi	r30, 0x57	; 87
    3688:	f0 e0       	ldi	r31, 0x00	; 0
    368a:	80 81       	ld	r24, Z
    368c:	8f 7d       	andi	r24, 0xDF	; 223
    368e:	8c 93       	st	X, r24
}
    3690:	cf 91       	pop	r28
    3692:	df 91       	pop	r29
    3694:	08 95       	ret

00003696 <Timer1_OV_InterruptEnable>:
void Timer1_OV_InterruptEnable(void)
{
    3696:	df 93       	push	r29
    3698:	cf 93       	push	r28
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE1);
    369e:	a7 e5       	ldi	r26, 0x57	; 87
    36a0:	b0 e0       	ldi	r27, 0x00	; 0
    36a2:	e7 e5       	ldi	r30, 0x57	; 87
    36a4:	f0 e0       	ldi	r31, 0x00	; 0
    36a6:	80 81       	ld	r24, Z
    36a8:	84 60       	ori	r24, 0x04	; 4
    36aa:	8c 93       	st	X, r24
}
    36ac:	cf 91       	pop	r28
    36ae:	df 91       	pop	r29
    36b0:	08 95       	ret

000036b2 <Timer1_OV_InterruptDisable>:
void Timer1_OV_InterruptDisable(void)
{
    36b2:	df 93       	push	r29
    36b4:	cf 93       	push	r28
    36b6:	cd b7       	in	r28, 0x3d	; 61
    36b8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE1);
    36ba:	a7 e5       	ldi	r26, 0x57	; 87
    36bc:	b0 e0       	ldi	r27, 0x00	; 0
    36be:	e7 e5       	ldi	r30, 0x57	; 87
    36c0:	f0 e0       	ldi	r31, 0x00	; 0
    36c2:	80 81       	ld	r24, Z
    36c4:	8b 7f       	andi	r24, 0xFB	; 251
    36c6:	8c 93       	st	X, r24
}
    36c8:	cf 91       	pop	r28
    36ca:	df 91       	pop	r29
    36cc:	08 95       	ret

000036ce <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
    36ce:	df 93       	push	r29
    36d0:	cf 93       	push	r28
    36d2:	cd b7       	in	r28, 0x3d	; 61
    36d4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1A);
    36d6:	a7 e5       	ldi	r26, 0x57	; 87
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	e7 e5       	ldi	r30, 0x57	; 87
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	80 81       	ld	r24, Z
    36e0:	80 61       	ori	r24, 0x10	; 16
    36e2:	8c 93       	st	X, r24
}
    36e4:	cf 91       	pop	r28
    36e6:	df 91       	pop	r29
    36e8:	08 95       	ret

000036ea <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
    36ea:	df 93       	push	r29
    36ec:	cf 93       	push	r28
    36ee:	cd b7       	in	r28, 0x3d	; 61
    36f0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE1A);
    36f2:	a7 e5       	ldi	r26, 0x57	; 87
    36f4:	b0 e0       	ldi	r27, 0x00	; 0
    36f6:	e7 e5       	ldi	r30, 0x57	; 87
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	80 81       	ld	r24, Z
    36fc:	8f 7e       	andi	r24, 0xEF	; 239
    36fe:	8c 93       	st	X, r24
}
    3700:	cf 91       	pop	r28
    3702:	df 91       	pop	r29
    3704:	08 95       	ret

00003706 <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
    3706:	df 93       	push	r29
    3708:	cf 93       	push	r28
    370a:	cd b7       	in	r28, 0x3d	; 61
    370c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1B);
    370e:	a7 e5       	ldi	r26, 0x57	; 87
    3710:	b0 e0       	ldi	r27, 0x00	; 0
    3712:	e7 e5       	ldi	r30, 0x57	; 87
    3714:	f0 e0       	ldi	r31, 0x00	; 0
    3716:	80 81       	ld	r24, Z
    3718:	88 60       	ori	r24, 0x08	; 8
    371a:	8c 93       	st	X, r24
}
    371c:	cf 91       	pop	r28
    371e:	df 91       	pop	r29
    3720:	08 95       	ret

00003722 <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
    3722:	df 93       	push	r29
    3724:	cf 93       	push	r28
    3726:	cd b7       	in	r28, 0x3d	; 61
    3728:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE1B);
    372a:	a7 e5       	ldi	r26, 0x57	; 87
    372c:	b0 e0       	ldi	r27, 0x00	; 0
    372e:	e7 e5       	ldi	r30, 0x57	; 87
    3730:	f0 e0       	ldi	r31, 0x00	; 0
    3732:	80 81       	ld	r24, Z
    3734:	87 7f       	andi	r24, 0xF7	; 247
    3736:	8c 93       	st	X, r24
}
    3738:	cf 91       	pop	r28
    373a:	df 91       	pop	r29
    373c:	08 95       	ret

0000373e <Timer1_OCC_InterruptEnable>:

void Timer1_OCC_InterruptEnable(void)
{
    373e:	df 93       	push	r29
    3740:	cf 93       	push	r28
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ETIMSK,OCIE1C);
    3746:	ad e7       	ldi	r26, 0x7D	; 125
    3748:	b0 e0       	ldi	r27, 0x00	; 0
    374a:	ed e7       	ldi	r30, 0x7D	; 125
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	80 81       	ld	r24, Z
    3750:	81 60       	ori	r24, 0x01	; 1
    3752:	8c 93       	st	X, r24
}
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	08 95       	ret

0000375a <Timer1_OCC_InterruptDisable>:
void Timer1_OCC_InterruptDisable(void)
{
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ETIMSK,OCIE1C);
    3762:	ad e7       	ldi	r26, 0x7D	; 125
    3764:	b0 e0       	ldi	r27, 0x00	; 0
    3766:	ed e7       	ldi	r30, 0x7D	; 125
    3768:	f0 e0       	ldi	r31, 0x00	; 0
    376a:	80 81       	ld	r24, Z
    376c:	8e 7f       	andi	r24, 0xFE	; 254
    376e:	8c 93       	st	X, r24
}
    3770:	cf 91       	pop	r28
    3772:	df 91       	pop	r29
    3774:	08 95       	ret

00003776 <TMR1_uint16_GetICUValue>:


uint16  TMR1_uint16_GetICUValue(void)
{
    3776:	df 93       	push	r29
    3778:	cf 93       	push	r28
    377a:	00 d0       	rcall	.+0      	; 0x377c <TMR1_uint16_GetICUValue+0x6>
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
	uint16 ret_val;
		ret_val=ICR1L|(ICR1H<<8);
    3780:	e6 e4       	ldi	r30, 0x46	; 70
    3782:	f0 e0       	ldi	r31, 0x00	; 0
    3784:	80 81       	ld	r24, Z
    3786:	28 2f       	mov	r18, r24
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	e7 e4       	ldi	r30, 0x47	; 71
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	80 81       	ld	r24, Z
    3790:	88 2f       	mov	r24, r24
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	98 2f       	mov	r25, r24
    3796:	88 27       	eor	r24, r24
    3798:	82 2b       	or	r24, r18
    379a:	93 2b       	or	r25, r19
    379c:	9a 83       	std	Y+2, r25	; 0x02
    379e:	89 83       	std	Y+1, r24	; 0x01
		return ret_val;
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    37a4:	0f 90       	pop	r0
    37a6:	0f 90       	pop	r0
    37a8:	cf 91       	pop	r28
    37aa:	df 91       	pop	r29
    37ac:	08 95       	ret

000037ae <TMR1_uint16_GetTimerValue>:

uint16  TMR1_uint16_GetTimerValue(void)
{
    37ae:	df 93       	push	r29
    37b0:	cf 93       	push	r28
    37b2:	00 d0       	rcall	.+0      	; 0x37b4 <TMR1_uint16_GetTimerValue+0x6>
    37b4:	cd b7       	in	r28, 0x3d	; 61
    37b6:	de b7       	in	r29, 0x3e	; 62

	uint16 ret_val;
	ret_val=TCNT1L|(TCNT1H<<8);
    37b8:	ec e4       	ldi	r30, 0x4C	; 76
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	80 81       	ld	r24, Z
    37be:	28 2f       	mov	r18, r24
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	ed e4       	ldi	r30, 0x4D	; 77
    37c4:	f0 e0       	ldi	r31, 0x00	; 0
    37c6:	80 81       	ld	r24, Z
    37c8:	88 2f       	mov	r24, r24
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	98 2f       	mov	r25, r24
    37ce:	88 27       	eor	r24, r24
    37d0:	82 2b       	or	r24, r18
    37d2:	93 2b       	or	r25, r19
    37d4:	9a 83       	std	Y+2, r25	; 0x02
    37d6:	89 83       	std	Y+1, r24	; 0x01
	return ret_val;
    37d8:	89 81       	ldd	r24, Y+1	; 0x01
    37da:	9a 81       	ldd	r25, Y+2	; 0x02
}
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	cf 91       	pop	r28
    37e2:	df 91       	pop	r29
    37e4:	08 95       	ret

000037e6 <TMR1_void_SetTimerValue>:


void  TMR1_void_SetTimerValue(uint16 tmr_val)
{
    37e6:	df 93       	push	r29
    37e8:	cf 93       	push	r28
    37ea:	00 d0       	rcall	.+0      	; 0x37ec <TMR1_void_SetTimerValue+0x6>
    37ec:	cd b7       	in	r28, 0x3d	; 61
    37ee:	de b7       	in	r29, 0x3e	; 62
    37f0:	9a 83       	std	Y+2, r25	; 0x02
    37f2:	89 83       	std	Y+1, r24	; 0x01
TCNT1L=(uint8)tmr_val;
    37f4:	ec e4       	ldi	r30, 0x4C	; 76
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	89 81       	ldd	r24, Y+1	; 0x01
    37fa:	80 83       	st	Z, r24
TCNT1H=(uint8)(tmr_val>>8);
    37fc:	ed e4       	ldi	r30, 0x4D	; 77
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	89 81       	ldd	r24, Y+1	; 0x01
    3802:	9a 81       	ldd	r25, Y+2	; 0x02
    3804:	89 2f       	mov	r24, r25
    3806:	99 27       	eor	r25, r25
    3808:	80 83       	st	Z, r24
}
    380a:	0f 90       	pop	r0
    380c:	0f 90       	pop	r0
    380e:	cf 91       	pop	r28
    3810:	df 91       	pop	r29
    3812:	08 95       	ret

00003814 <TMR1_void_Set_OCR_TimerValue>:

void  TMR1_void_Set_OCR_TimerValue(uint16 oc_val,OC1_ch_type ch)
{
    3814:	df 93       	push	r29
    3816:	cf 93       	push	r28
    3818:	00 d0       	rcall	.+0      	; 0x381a <TMR1_void_Set_OCR_TimerValue+0x6>
    381a:	00 d0       	rcall	.+0      	; 0x381c <TMR1_void_Set_OCR_TimerValue+0x8>
    381c:	0f 92       	push	r0
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62
    3822:	9a 83       	std	Y+2, r25	; 0x02
    3824:	89 83       	std	Y+1, r24	; 0x01
    3826:	6b 83       	std	Y+3, r22	; 0x03
	switch(ch){
    3828:	8b 81       	ldd	r24, Y+3	; 0x03
    382a:	28 2f       	mov	r18, r24
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	3d 83       	std	Y+5, r19	; 0x05
    3830:	2c 83       	std	Y+4, r18	; 0x04
    3832:	8c 81       	ldd	r24, Y+4	; 0x04
    3834:	9d 81       	ldd	r25, Y+5	; 0x05
    3836:	81 30       	cpi	r24, 0x01	; 1
    3838:	91 05       	cpc	r25, r1
    383a:	81 f0       	breq	.+32     	; 0x385c <TMR1_void_Set_OCR_TimerValue+0x48>
    383c:	2c 81       	ldd	r18, Y+4	; 0x04
    383e:	3d 81       	ldd	r19, Y+5	; 0x05
    3840:	22 30       	cpi	r18, 0x02	; 2
    3842:	31 05       	cpc	r19, r1
    3844:	74 f1       	brlt	.+92     	; 0x38a2 <TMR1_void_Set_OCR_TimerValue+0x8e>
    3846:	8c 81       	ldd	r24, Y+4	; 0x04
    3848:	9d 81       	ldd	r25, Y+5	; 0x05
    384a:	82 30       	cpi	r24, 0x02	; 2
    384c:	91 05       	cpc	r25, r1
    384e:	91 f0       	breq	.+36     	; 0x3874 <TMR1_void_Set_OCR_TimerValue+0x60>
    3850:	2c 81       	ldd	r18, Y+4	; 0x04
    3852:	3d 81       	ldd	r19, Y+5	; 0x05
    3854:	23 30       	cpi	r18, 0x03	; 3
    3856:	31 05       	cpc	r19, r1
    3858:	c9 f0       	breq	.+50     	; 0x388c <TMR1_void_Set_OCR_TimerValue+0x78>
    385a:	23 c0       	rjmp	.+70     	; 0x38a2 <TMR1_void_Set_OCR_TimerValue+0x8e>
	case disconnected_channel:break;
	case A_Channel:OCR1AL=(uint8)oc_val;
    385c:	ea e4       	ldi	r30, 0x4A	; 74
    385e:	f0 e0       	ldi	r31, 0x00	; 0
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	80 83       	st	Z, r24
	               OCR1AH=(uint8)(oc_val>>8);
    3864:	eb e4       	ldi	r30, 0x4B	; 75
    3866:	f0 e0       	ldi	r31, 0x00	; 0
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	9a 81       	ldd	r25, Y+2	; 0x02
    386c:	89 2f       	mov	r24, r25
    386e:	99 27       	eor	r25, r25
    3870:	80 83       	st	Z, r24
    3872:	17 c0       	rjmp	.+46     	; 0x38a2 <TMR1_void_Set_OCR_TimerValue+0x8e>
	               break;
	case B_Channel:OCR1BL=(uint8)oc_val;
    3874:	e8 e4       	ldi	r30, 0x48	; 72
    3876:	f0 e0       	ldi	r31, 0x00	; 0
    3878:	89 81       	ldd	r24, Y+1	; 0x01
    387a:	80 83       	st	Z, r24
		           OCR1BH=(uint8)(oc_val>>8);
    387c:	e9 e4       	ldi	r30, 0x49	; 73
    387e:	f0 e0       	ldi	r31, 0x00	; 0
    3880:	89 81       	ldd	r24, Y+1	; 0x01
    3882:	9a 81       	ldd	r25, Y+2	; 0x02
    3884:	89 2f       	mov	r24, r25
    3886:	99 27       	eor	r25, r25
    3888:	80 83       	st	Z, r24
    388a:	0b c0       	rjmp	.+22     	; 0x38a2 <TMR1_void_Set_OCR_TimerValue+0x8e>
		           break;
	case C_Channel:OCR1CL=(uint8)oc_val;
    388c:	e8 e7       	ldi	r30, 0x78	; 120
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	89 81       	ldd	r24, Y+1	; 0x01
    3892:	80 83       	st	Z, r24
		           OCR1CH=(uint8)(oc_val>>8);
    3894:	e9 e7       	ldi	r30, 0x79	; 121
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	89 81       	ldd	r24, Y+1	; 0x01
    389a:	9a 81       	ldd	r25, Y+2	; 0x02
    389c:	89 2f       	mov	r24, r25
    389e:	99 27       	eor	r25, r25
    38a0:	80 83       	st	Z, r24
		           break;
	}

}
    38a2:	0f 90       	pop	r0
    38a4:	0f 90       	pop	r0
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	0f 90       	pop	r0
    38ac:	cf 91       	pop	r28
    38ae:	df 91       	pop	r29
    38b0:	08 95       	ret

000038b2 <Timer0_Init>:
#include"Timer0.h"
void Timer0_Init(timer0_mode_type mode,prescaler0_type scaler,OC0_mode_type oc_mode)
{
    38b2:	df 93       	push	r29
    38b4:	cf 93       	push	r28
    38b6:	cd b7       	in	r28, 0x3d	; 61
    38b8:	de b7       	in	r29, 0x3e	; 62
    38ba:	27 97       	sbiw	r28, 0x07	; 7
    38bc:	0f b6       	in	r0, 0x3f	; 63
    38be:	f8 94       	cli
    38c0:	de bf       	out	0x3e, r29	; 62
    38c2:	0f be       	out	0x3f, r0	; 63
    38c4:	cd bf       	out	0x3d, r28	; 61
    38c6:	89 83       	std	Y+1, r24	; 0x01
    38c8:	6a 83       	std	Y+2, r22	; 0x02
    38ca:	4b 83       	std	Y+3, r20	; 0x03
	switch (mode)
    38cc:	89 81       	ldd	r24, Y+1	; 0x01
    38ce:	28 2f       	mov	r18, r24
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	3f 83       	std	Y+7, r19	; 0x07
    38d4:	2e 83       	std	Y+6, r18	; 0x06
    38d6:	8e 81       	ldd	r24, Y+6	; 0x06
    38d8:	9f 81       	ldd	r25, Y+7	; 0x07
    38da:	81 30       	cpi	r24, 0x01	; 1
    38dc:	91 05       	cpc	r25, r1
    38de:	21 f1       	breq	.+72     	; 0x3928 <Timer0_Init+0x76>
    38e0:	2e 81       	ldd	r18, Y+6	; 0x06
    38e2:	3f 81       	ldd	r19, Y+7	; 0x07
    38e4:	22 30       	cpi	r18, 0x02	; 2
    38e6:	31 05       	cpc	r19, r1
    38e8:	2c f4       	brge	.+10     	; 0x38f4 <Timer0_Init+0x42>
    38ea:	8e 81       	ldd	r24, Y+6	; 0x06
    38ec:	9f 81       	ldd	r25, Y+7	; 0x07
    38ee:	00 97       	sbiw	r24, 0x00	; 0
    38f0:	61 f0       	breq	.+24     	; 0x390a <Timer0_Init+0x58>
    38f2:	46 c0       	rjmp	.+140    	; 0x3980 <Timer0_Init+0xce>
    38f4:	2e 81       	ldd	r18, Y+6	; 0x06
    38f6:	3f 81       	ldd	r19, Y+7	; 0x07
    38f8:	22 30       	cpi	r18, 0x02	; 2
    38fa:	31 05       	cpc	r19, r1
    38fc:	21 f1       	breq	.+72     	; 0x3946 <Timer0_Init+0x94>
    38fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3900:	9f 81       	ldd	r25, Y+7	; 0x07
    3902:	83 30       	cpi	r24, 0x03	; 3
    3904:	91 05       	cpc	r25, r1
    3906:	71 f1       	breq	.+92     	; 0x3964 <Timer0_Init+0xb2>
    3908:	3b c0       	rjmp	.+118    	; 0x3980 <Timer0_Init+0xce>
				{
					case Normal_mode:
						CLR_BIT(TCCR0,WGM00);
    390a:	a3 e5       	ldi	r26, 0x53	; 83
    390c:	b0 e0       	ldi	r27, 0x00	; 0
    390e:	e3 e5       	ldi	r30, 0x53	; 83
    3910:	f0 e0       	ldi	r31, 0x00	; 0
    3912:	80 81       	ld	r24, Z
    3914:	8f 7b       	andi	r24, 0xBF	; 191
    3916:	8c 93       	st	X, r24
						CLR_BIT(TCCR0,WGM01);
    3918:	a3 e5       	ldi	r26, 0x53	; 83
    391a:	b0 e0       	ldi	r27, 0x00	; 0
    391c:	e3 e5       	ldi	r30, 0x53	; 83
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	80 81       	ld	r24, Z
    3922:	87 7f       	andi	r24, 0xF7	; 247
    3924:	8c 93       	st	X, r24
    3926:	2c c0       	rjmp	.+88     	; 0x3980 <Timer0_Init+0xce>

					break;
					case Phasecorrect_mode:
						SET_BIT(TCCR0,WGM00);
    3928:	a3 e5       	ldi	r26, 0x53	; 83
    392a:	b0 e0       	ldi	r27, 0x00	; 0
    392c:	e3 e5       	ldi	r30, 0x53	; 83
    392e:	f0 e0       	ldi	r31, 0x00	; 0
    3930:	80 81       	ld	r24, Z
    3932:	80 64       	ori	r24, 0x40	; 64
    3934:	8c 93       	st	X, r24
						CLR_BIT(TCCR0,WGM01);
    3936:	a3 e5       	ldi	r26, 0x53	; 83
    3938:	b0 e0       	ldi	r27, 0x00	; 0
    393a:	e3 e5       	ldi	r30, 0x53	; 83
    393c:	f0 e0       	ldi	r31, 0x00	; 0
    393e:	80 81       	ld	r24, Z
    3940:	87 7f       	andi	r24, 0xF7	; 247
    3942:	8c 93       	st	X, r24
    3944:	1d c0       	rjmp	.+58     	; 0x3980 <Timer0_Init+0xce>
					break;
					case CTC_mode:
						CLR_BIT(TCCR0,WGM00);
    3946:	a3 e5       	ldi	r26, 0x53	; 83
    3948:	b0 e0       	ldi	r27, 0x00	; 0
    394a:	e3 e5       	ldi	r30, 0x53	; 83
    394c:	f0 e0       	ldi	r31, 0x00	; 0
    394e:	80 81       	ld	r24, Z
    3950:	8f 7b       	andi	r24, 0xBF	; 191
    3952:	8c 93       	st	X, r24
						SET_BIT(TCCR0,WGM01);
    3954:	a3 e5       	ldi	r26, 0x53	; 83
    3956:	b0 e0       	ldi	r27, 0x00	; 0
    3958:	e3 e5       	ldi	r30, 0x53	; 83
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	80 81       	ld	r24, Z
    395e:	88 60       	ori	r24, 0x08	; 8
    3960:	8c 93       	st	X, r24
    3962:	0e c0       	rjmp	.+28     	; 0x3980 <Timer0_Init+0xce>

					break;
					case FastPWM_mode:
						SET_BIT(TCCR0,WGM00);
    3964:	a3 e5       	ldi	r26, 0x53	; 83
    3966:	b0 e0       	ldi	r27, 0x00	; 0
    3968:	e3 e5       	ldi	r30, 0x53	; 83
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	80 81       	ld	r24, Z
    396e:	80 64       	ori	r24, 0x40	; 64
    3970:	8c 93       	st	X, r24
						SET_BIT(TCCR0,WGM01);
    3972:	a3 e5       	ldi	r26, 0x53	; 83
    3974:	b0 e0       	ldi	r27, 0x00	; 0
    3976:	e3 e5       	ldi	r30, 0x53	; 83
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	80 81       	ld	r24, Z
    397c:	88 60       	ori	r24, 0x08	; 8
    397e:	8c 93       	st	X, r24
					break;
				}
#if  oc==normal
	switch (oc_mode)
    3980:	8b 81       	ldd	r24, Y+3	; 0x03
    3982:	28 2f       	mov	r18, r24
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	3d 83       	std	Y+5, r19	; 0x05
    3988:	2c 83       	std	Y+4, r18	; 0x04
    398a:	8c 81       	ldd	r24, Y+4	; 0x04
    398c:	9d 81       	ldd	r25, Y+5	; 0x05
    398e:	81 30       	cpi	r24, 0x01	; 1
    3990:	91 05       	cpc	r25, r1
    3992:	21 f1       	breq	.+72     	; 0x39dc <Timer0_Init+0x12a>
    3994:	2c 81       	ldd	r18, Y+4	; 0x04
    3996:	3d 81       	ldd	r19, Y+5	; 0x05
    3998:	22 30       	cpi	r18, 0x02	; 2
    399a:	31 05       	cpc	r19, r1
    399c:	2c f4       	brge	.+10     	; 0x39a8 <Timer0_Init+0xf6>
    399e:	8c 81       	ldd	r24, Y+4	; 0x04
    39a0:	9d 81       	ldd	r25, Y+5	; 0x05
    39a2:	00 97       	sbiw	r24, 0x00	; 0
    39a4:	61 f0       	breq	.+24     	; 0x39be <Timer0_Init+0x10c>
    39a6:	46 c0       	rjmp	.+140    	; 0x3a34 <Timer0_Init+0x182>
    39a8:	2c 81       	ldd	r18, Y+4	; 0x04
    39aa:	3d 81       	ldd	r19, Y+5	; 0x05
    39ac:	22 30       	cpi	r18, 0x02	; 2
    39ae:	31 05       	cpc	r19, r1
    39b0:	21 f1       	breq	.+72     	; 0x39fa <Timer0_Init+0x148>
    39b2:	8c 81       	ldd	r24, Y+4	; 0x04
    39b4:	9d 81       	ldd	r25, Y+5	; 0x05
    39b6:	83 30       	cpi	r24, 0x03	; 3
    39b8:	91 05       	cpc	r25, r1
    39ba:	71 f1       	breq	.+92     	; 0x3a18 <Timer0_Init+0x166>
    39bc:	3b c0       	rjmp	.+118    	; 0x3a34 <Timer0_Init+0x182>
				{
					case disconnected:
						CLR_BIT(TCCR0,COM00);
    39be:	a3 e5       	ldi	r26, 0x53	; 83
    39c0:	b0 e0       	ldi	r27, 0x00	; 0
    39c2:	e3 e5       	ldi	r30, 0x53	; 83
    39c4:	f0 e0       	ldi	r31, 0x00	; 0
    39c6:	80 81       	ld	r24, Z
    39c8:	8f 7e       	andi	r24, 0xEF	; 239
    39ca:	8c 93       	st	X, r24
						CLR_BIT(TCCR0,COM01);
    39cc:	a3 e5       	ldi	r26, 0x53	; 83
    39ce:	b0 e0       	ldi	r27, 0x00	; 0
    39d0:	e3 e5       	ldi	r30, 0x53	; 83
    39d2:	f0 e0       	ldi	r31, 0x00	; 0
    39d4:	80 81       	ld	r24, Z
    39d6:	8f 7d       	andi	r24, 0xDF	; 223
    39d8:	8c 93       	st	X, r24
    39da:	2c c0       	rjmp	.+88     	; 0x3a34 <Timer0_Init+0x182>
						break;
					case Toggle:
						SET_BIT(TCCR0,COM00);
    39dc:	a3 e5       	ldi	r26, 0x53	; 83
    39de:	b0 e0       	ldi	r27, 0x00	; 0
    39e0:	e3 e5       	ldi	r30, 0x53	; 83
    39e2:	f0 e0       	ldi	r31, 0x00	; 0
    39e4:	80 81       	ld	r24, Z
    39e6:	80 61       	ori	r24, 0x10	; 16
    39e8:	8c 93       	st	X, r24
						CLR_BIT(TCCR0,COM01);
    39ea:	a3 e5       	ldi	r26, 0x53	; 83
    39ec:	b0 e0       	ldi	r27, 0x00	; 0
    39ee:	e3 e5       	ldi	r30, 0x53	; 83
    39f0:	f0 e0       	ldi	r31, 0x00	; 0
    39f2:	80 81       	ld	r24, Z
    39f4:	8f 7d       	andi	r24, 0xDF	; 223
    39f6:	8c 93       	st	X, r24
    39f8:	1d c0       	rjmp	.+58     	; 0x3a34 <Timer0_Init+0x182>
						break;
					case Nin_inverting:
						CLR_BIT(TCCR0,COM00);
    39fa:	a3 e5       	ldi	r26, 0x53	; 83
    39fc:	b0 e0       	ldi	r27, 0x00	; 0
    39fe:	e3 e5       	ldi	r30, 0x53	; 83
    3a00:	f0 e0       	ldi	r31, 0x00	; 0
    3a02:	80 81       	ld	r24, Z
    3a04:	8f 7e       	andi	r24, 0xEF	; 239
    3a06:	8c 93       	st	X, r24
						SET_BIT(TCCR0,COM01);
    3a08:	a3 e5       	ldi	r26, 0x53	; 83
    3a0a:	b0 e0       	ldi	r27, 0x00	; 0
    3a0c:	e3 e5       	ldi	r30, 0x53	; 83
    3a0e:	f0 e0       	ldi	r31, 0x00	; 0
    3a10:	80 81       	ld	r24, Z
    3a12:	80 62       	ori	r24, 0x20	; 32
    3a14:	8c 93       	st	X, r24
    3a16:	0e c0       	rjmp	.+28     	; 0x3a34 <Timer0_Init+0x182>
						break;
					case Inverting:
						SET_BIT(TCCR0,COM00);
    3a18:	a3 e5       	ldi	r26, 0x53	; 83
    3a1a:	b0 e0       	ldi	r27, 0x00	; 0
    3a1c:	e3 e5       	ldi	r30, 0x53	; 83
    3a1e:	f0 e0       	ldi	r31, 0x00	; 0
    3a20:	80 81       	ld	r24, Z
    3a22:	80 61       	ori	r24, 0x10	; 16
    3a24:	8c 93       	st	X, r24
						SET_BIT(TCCR0,COM01);
    3a26:	a3 e5       	ldi	r26, 0x53	; 83
    3a28:	b0 e0       	ldi	r27, 0x00	; 0
    3a2a:	e3 e5       	ldi	r30, 0x53	; 83
    3a2c:	f0 e0       	ldi	r31, 0x00	; 0
    3a2e:	80 81       	ld	r24, Z
    3a30:	80 62       	ori	r24, 0x20	; 32
    3a32:	8c 93       	st	X, r24
								break;
							}

#endif
	//MASK FOR SCALLER THE FIRST 3 BITS
	TCCR0&=0XF8;
    3a34:	a3 e5       	ldi	r26, 0x53	; 83
    3a36:	b0 e0       	ldi	r27, 0x00	; 0
    3a38:	e3 e5       	ldi	r30, 0x53	; 83
    3a3a:	f0 e0       	ldi	r31, 0x00	; 0
    3a3c:	80 81       	ld	r24, Z
    3a3e:	88 7f       	andi	r24, 0xF8	; 248
    3a40:	8c 93       	st	X, r24
	//PUT THE SCALLER
	TCCR0|=scaler;
    3a42:	a3 e5       	ldi	r26, 0x53	; 83
    3a44:	b0 e0       	ldi	r27, 0x00	; 0
    3a46:	e3 e5       	ldi	r30, 0x53	; 83
    3a48:	f0 e0       	ldi	r31, 0x00	; 0
    3a4a:	90 81       	ld	r25, Z
    3a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4e:	89 2b       	or	r24, r25
    3a50:	8c 93       	st	X, r24

}
    3a52:	27 96       	adiw	r28, 0x07	; 7
    3a54:	0f b6       	in	r0, 0x3f	; 63
    3a56:	f8 94       	cli
    3a58:	de bf       	out	0x3e, r29	; 62
    3a5a:	0f be       	out	0x3f, r0	; 63
    3a5c:	cd bf       	out	0x3d, r28	; 61
    3a5e:	cf 91       	pop	r28
    3a60:	df 91       	pop	r29
    3a62:	08 95       	ret

00003a64 <Timer0_OVInterrupt_Enable>:

void Timer0_OVInterrupt_Enable(void)
{
    3a64:	df 93       	push	r29
    3a66:	cf 93       	push	r28
    3a68:	cd b7       	in	r28, 0x3d	; 61
    3a6a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
    3a6c:	a7 e5       	ldi	r26, 0x57	; 87
    3a6e:	b0 e0       	ldi	r27, 0x00	; 0
    3a70:	e7 e5       	ldi	r30, 0x57	; 87
    3a72:	f0 e0       	ldi	r31, 0x00	; 0
    3a74:	80 81       	ld	r24, Z
    3a76:	81 60       	ori	r24, 0x01	; 1
    3a78:	8c 93       	st	X, r24
}
    3a7a:	cf 91       	pop	r28
    3a7c:	df 91       	pop	r29
    3a7e:	08 95       	ret

00003a80 <Timer0_OVInterrupt_Disable>:
void Timer0_OVInterrupt_Disable(void)
{
    3a80:	df 93       	push	r29
    3a82:	cf 93       	push	r28
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
    3a88:	a7 e5       	ldi	r26, 0x57	; 87
    3a8a:	b0 e0       	ldi	r27, 0x00	; 0
    3a8c:	e7 e5       	ldi	r30, 0x57	; 87
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	80 81       	ld	r24, Z
    3a92:	8e 7f       	andi	r24, 0xFE	; 254
    3a94:	8c 93       	st	X, r24
}
    3a96:	cf 91       	pop	r28
    3a98:	df 91       	pop	r29
    3a9a:	08 95       	ret

00003a9c <Timer0_OCInterrupt_Enable>:
void Timer0_OCInterrupt_Enable(void)
{
    3a9c:	df 93       	push	r29
    3a9e:	cf 93       	push	r28
    3aa0:	cd b7       	in	r28, 0x3d	; 61
    3aa2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE0);
    3aa4:	a7 e5       	ldi	r26, 0x57	; 87
    3aa6:	b0 e0       	ldi	r27, 0x00	; 0
    3aa8:	e7 e5       	ldi	r30, 0x57	; 87
    3aaa:	f0 e0       	ldi	r31, 0x00	; 0
    3aac:	80 81       	ld	r24, Z
    3aae:	82 60       	ori	r24, 0x02	; 2
    3ab0:	8c 93       	st	X, r24
}
    3ab2:	cf 91       	pop	r28
    3ab4:	df 91       	pop	r29
    3ab6:	08 95       	ret

00003ab8 <Timer0_OCInterrupt_Disable>:

void Timer0_OCInterrupt_Disable(void)
{
    3ab8:	df 93       	push	r29
    3aba:	cf 93       	push	r28
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE0);
    3ac0:	a7 e5       	ldi	r26, 0x57	; 87
    3ac2:	b0 e0       	ldi	r27, 0x00	; 0
    3ac4:	e7 e5       	ldi	r30, 0x57	; 87
    3ac6:	f0 e0       	ldi	r31, 0x00	; 0
    3ac8:	80 81       	ld	r24, Z
    3aca:	8d 7f       	andi	r24, 0xFD	; 253
    3acc:	8c 93       	st	X, r24
}
    3ace:	cf 91       	pop	r28
    3ad0:	df 91       	pop	r29
    3ad2:	08 95       	ret

00003ad4 <Timer0_OCI_Set_Value>:

void Timer0_OCI_Set_Value(uint8 oc_value)
{
    3ad4:	df 93       	push	r29
    3ad6:	cf 93       	push	r28
    3ad8:	0f 92       	push	r0
    3ada:	cd b7       	in	r28, 0x3d	; 61
    3adc:	de b7       	in	r29, 0x3e	; 62
    3ade:	89 83       	std	Y+1, r24	; 0x01
	OCR0= oc_value;
    3ae0:	e1 e5       	ldi	r30, 0x51	; 81
    3ae2:	f0 e0       	ldi	r31, 0x00	; 0
    3ae4:	89 81       	ldd	r24, Y+1	; 0x01
    3ae6:	80 83       	st	Z, r24
}
    3ae8:	0f 90       	pop	r0
    3aea:	cf 91       	pop	r28
    3aec:	df 91       	pop	r29
    3aee:	08 95       	ret

00003af0 <Timer0_TCNT_Set_Value>:
void Timer0_TCNT_Set_Value(uint8 TCNT_value)
{
    3af0:	df 93       	push	r29
    3af2:	cf 93       	push	r28
    3af4:	0f 92       	push	r0
    3af6:	cd b7       	in	r28, 0x3d	; 61
    3af8:	de b7       	in	r29, 0x3e	; 62
    3afa:	89 83       	std	Y+1, r24	; 0x01
	TCNT0= TCNT_value;
    3afc:	e2 e5       	ldi	r30, 0x52	; 82
    3afe:	f0 e0       	ldi	r31, 0x00	; 0
    3b00:	89 81       	ldd	r24, Y+1	; 0x01
    3b02:	80 83       	st	Z, r24
}
    3b04:	0f 90       	pop	r0
    3b06:	cf 91       	pop	r28
    3b08:	df 91       	pop	r29
    3b0a:	08 95       	ret

00003b0c <Timer0_Get_Value>:
uint8 Timer0_Get_Value(void)
{
    3b0c:	df 93       	push	r29
    3b0e:	cf 93       	push	r28
    3b10:	cd b7       	in	r28, 0x3d	; 61
    3b12:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    3b14:	e2 e5       	ldi	r30, 0x52	; 82
    3b16:	f0 e0       	ldi	r31, 0x00	; 0
    3b18:	80 81       	ld	r24, Z
}
    3b1a:	cf 91       	pop	r28
    3b1c:	df 91       	pop	r29
    3b1e:	08 95       	ret

00003b20 <DIO_void_Set_Pin_Dirction>:
#include "DIO.h"
#include "utils.h"
#include"memmap128.h"

void DIO_void_Set_Pin_Dirction(port_no_type port_no, bit_no_type bit_no, direction_type direction)
{
    3b20:	df 93       	push	r29
    3b22:	cf 93       	push	r28
    3b24:	cd b7       	in	r28, 0x3d	; 61
    3b26:	de b7       	in	r29, 0x3e	; 62
    3b28:	27 97       	sbiw	r28, 0x07	; 7
    3b2a:	0f b6       	in	r0, 0x3f	; 63
    3b2c:	f8 94       	cli
    3b2e:	de bf       	out	0x3e, r29	; 62
    3b30:	0f be       	out	0x3f, r0	; 63
    3b32:	cd bf       	out	0x3d, r28	; 61
    3b34:	89 83       	std	Y+1, r24	; 0x01
    3b36:	6a 83       	std	Y+2, r22	; 0x02
    3b38:	4b 83       	std	Y+3, r20	; 0x03
	if(direction == INPUT)
    3b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3c:	88 23       	and	r24, r24
    3b3e:	09 f0       	breq	.+2      	; 0x3b42 <DIO_void_Set_Pin_Dirction+0x22>
    3b40:	c6 c0       	rjmp	.+396    	; 0x3cce <DIO_void_Set_Pin_Dirction+0x1ae>
	{
		switch(port_no)
    3b42:	89 81       	ldd	r24, Y+1	; 0x01
    3b44:	28 2f       	mov	r18, r24
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	3f 83       	std	Y+7, r19	; 0x07
    3b4a:	2e 83       	std	Y+6, r18	; 0x06
    3b4c:	8e 81       	ldd	r24, Y+6	; 0x06
    3b4e:	9f 81       	ldd	r25, Y+7	; 0x07
    3b50:	83 30       	cpi	r24, 0x03	; 3
    3b52:	91 05       	cpc	r25, r1
    3b54:	09 f4       	brne	.+2      	; 0x3b58 <DIO_void_Set_Pin_Dirction+0x38>
    3b56:	67 c0       	rjmp	.+206    	; 0x3c26 <DIO_void_Set_Pin_Dirction+0x106>
    3b58:	2e 81       	ldd	r18, Y+6	; 0x06
    3b5a:	3f 81       	ldd	r19, Y+7	; 0x07
    3b5c:	24 30       	cpi	r18, 0x04	; 4
    3b5e:	31 05       	cpc	r19, r1
    3b60:	84 f4       	brge	.+32     	; 0x3b82 <DIO_void_Set_Pin_Dirction+0x62>
    3b62:	8e 81       	ldd	r24, Y+6	; 0x06
    3b64:	9f 81       	ldd	r25, Y+7	; 0x07
    3b66:	81 30       	cpi	r24, 0x01	; 1
    3b68:	91 05       	cpc	r25, r1
    3b6a:	99 f1       	breq	.+102    	; 0x3bd2 <DIO_void_Set_Pin_Dirction+0xb2>
    3b6c:	2e 81       	ldd	r18, Y+6	; 0x06
    3b6e:	3f 81       	ldd	r19, Y+7	; 0x07
    3b70:	22 30       	cpi	r18, 0x02	; 2
    3b72:	31 05       	cpc	r19, r1
    3b74:	0c f0       	brlt	.+2      	; 0x3b78 <DIO_void_Set_Pin_Dirction+0x58>
    3b76:	42 c0       	rjmp	.+132    	; 0x3bfc <DIO_void_Set_Pin_Dirction+0xdc>
    3b78:	8e 81       	ldd	r24, Y+6	; 0x06
    3b7a:	9f 81       	ldd	r25, Y+7	; 0x07
    3b7c:	00 97       	sbiw	r24, 0x00	; 0
    3b7e:	a1 f0       	breq	.+40     	; 0x3ba8 <DIO_void_Set_Pin_Dirction+0x88>
    3b80:	68 c1       	rjmp	.+720    	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>
    3b82:	2e 81       	ldd	r18, Y+6	; 0x06
    3b84:	3f 81       	ldd	r19, Y+7	; 0x07
    3b86:	25 30       	cpi	r18, 0x05	; 5
    3b88:	31 05       	cpc	r19, r1
    3b8a:	09 f4       	brne	.+2      	; 0x3b8e <DIO_void_Set_Pin_Dirction+0x6e>
    3b8c:	76 c0       	rjmp	.+236    	; 0x3c7a <DIO_void_Set_Pin_Dirction+0x15a>
    3b8e:	8e 81       	ldd	r24, Y+6	; 0x06
    3b90:	9f 81       	ldd	r25, Y+7	; 0x07
    3b92:	85 30       	cpi	r24, 0x05	; 5
    3b94:	91 05       	cpc	r25, r1
    3b96:	0c f4       	brge	.+2      	; 0x3b9a <DIO_void_Set_Pin_Dirction+0x7a>
    3b98:	5b c0       	rjmp	.+182    	; 0x3c50 <DIO_void_Set_Pin_Dirction+0x130>
    3b9a:	2e 81       	ldd	r18, Y+6	; 0x06
    3b9c:	3f 81       	ldd	r19, Y+7	; 0x07
    3b9e:	26 30       	cpi	r18, 0x06	; 6
    3ba0:	31 05       	cpc	r19, r1
    3ba2:	09 f4       	brne	.+2      	; 0x3ba6 <DIO_void_Set_Pin_Dirction+0x86>
    3ba4:	7f c0       	rjmp	.+254    	; 0x3ca4 <DIO_void_Set_Pin_Dirction+0x184>
    3ba6:	55 c1       	rjmp	.+682    	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>
		{
		case PORTA_ID:CLR_BIT(DDRA,bit_no);break;
    3ba8:	aa e3       	ldi	r26, 0x3A	; 58
    3baa:	b0 e0       	ldi	r27, 0x00	; 0
    3bac:	ea e3       	ldi	r30, 0x3A	; 58
    3bae:	f0 e0       	ldi	r31, 0x00	; 0
    3bb0:	80 81       	ld	r24, Z
    3bb2:	48 2f       	mov	r20, r24
    3bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb6:	28 2f       	mov	r18, r24
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	02 2e       	mov	r0, r18
    3bc0:	02 c0       	rjmp	.+4      	; 0x3bc6 <DIO_void_Set_Pin_Dirction+0xa6>
    3bc2:	88 0f       	add	r24, r24
    3bc4:	99 1f       	adc	r25, r25
    3bc6:	0a 94       	dec	r0
    3bc8:	e2 f7       	brpl	.-8      	; 0x3bc2 <DIO_void_Set_Pin_Dirction+0xa2>
    3bca:	80 95       	com	r24
    3bcc:	84 23       	and	r24, r20
    3bce:	8c 93       	st	X, r24
    3bd0:	40 c1       	rjmp	.+640    	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTB_ID:CLR_BIT(DDRB,bit_no);break;
    3bd2:	a7 e3       	ldi	r26, 0x37	; 55
    3bd4:	b0 e0       	ldi	r27, 0x00	; 0
    3bd6:	e7 e3       	ldi	r30, 0x37	; 55
    3bd8:	f0 e0       	ldi	r31, 0x00	; 0
    3bda:	80 81       	ld	r24, Z
    3bdc:	48 2f       	mov	r20, r24
    3bde:	8a 81       	ldd	r24, Y+2	; 0x02
    3be0:	28 2f       	mov	r18, r24
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	02 2e       	mov	r0, r18
    3bea:	02 c0       	rjmp	.+4      	; 0x3bf0 <DIO_void_Set_Pin_Dirction+0xd0>
    3bec:	88 0f       	add	r24, r24
    3bee:	99 1f       	adc	r25, r25
    3bf0:	0a 94       	dec	r0
    3bf2:	e2 f7       	brpl	.-8      	; 0x3bec <DIO_void_Set_Pin_Dirction+0xcc>
    3bf4:	80 95       	com	r24
    3bf6:	84 23       	and	r24, r20
    3bf8:	8c 93       	st	X, r24
    3bfa:	2b c1       	rjmp	.+598    	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTC_ID:CLR_BIT(DDRC,bit_no);break;
    3bfc:	a4 e3       	ldi	r26, 0x34	; 52
    3bfe:	b0 e0       	ldi	r27, 0x00	; 0
    3c00:	e4 e3       	ldi	r30, 0x34	; 52
    3c02:	f0 e0       	ldi	r31, 0x00	; 0
    3c04:	80 81       	ld	r24, Z
    3c06:	48 2f       	mov	r20, r24
    3c08:	8a 81       	ldd	r24, Y+2	; 0x02
    3c0a:	28 2f       	mov	r18, r24
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	81 e0       	ldi	r24, 0x01	; 1
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	02 2e       	mov	r0, r18
    3c14:	02 c0       	rjmp	.+4      	; 0x3c1a <DIO_void_Set_Pin_Dirction+0xfa>
    3c16:	88 0f       	add	r24, r24
    3c18:	99 1f       	adc	r25, r25
    3c1a:	0a 94       	dec	r0
    3c1c:	e2 f7       	brpl	.-8      	; 0x3c16 <DIO_void_Set_Pin_Dirction+0xf6>
    3c1e:	80 95       	com	r24
    3c20:	84 23       	and	r24, r20
    3c22:	8c 93       	st	X, r24
    3c24:	16 c1       	rjmp	.+556    	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTD_ID:CLR_BIT(DDRD,bit_no);break;
    3c26:	a1 e3       	ldi	r26, 0x31	; 49
    3c28:	b0 e0       	ldi	r27, 0x00	; 0
    3c2a:	e1 e3       	ldi	r30, 0x31	; 49
    3c2c:	f0 e0       	ldi	r31, 0x00	; 0
    3c2e:	80 81       	ld	r24, Z
    3c30:	48 2f       	mov	r20, r24
    3c32:	8a 81       	ldd	r24, Y+2	; 0x02
    3c34:	28 2f       	mov	r18, r24
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	02 2e       	mov	r0, r18
    3c3e:	02 c0       	rjmp	.+4      	; 0x3c44 <DIO_void_Set_Pin_Dirction+0x124>
    3c40:	88 0f       	add	r24, r24
    3c42:	99 1f       	adc	r25, r25
    3c44:	0a 94       	dec	r0
    3c46:	e2 f7       	brpl	.-8      	; 0x3c40 <DIO_void_Set_Pin_Dirction+0x120>
    3c48:	80 95       	com	r24
    3c4a:	84 23       	and	r24, r20
    3c4c:	8c 93       	st	X, r24
    3c4e:	01 c1       	rjmp	.+514    	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTE_ID:CLR_BIT(DDRE,bit_no);break;
    3c50:	a2 e2       	ldi	r26, 0x22	; 34
    3c52:	b0 e0       	ldi	r27, 0x00	; 0
    3c54:	e2 e2       	ldi	r30, 0x22	; 34
    3c56:	f0 e0       	ldi	r31, 0x00	; 0
    3c58:	80 81       	ld	r24, Z
    3c5a:	48 2f       	mov	r20, r24
    3c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5e:	28 2f       	mov	r18, r24
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	81 e0       	ldi	r24, 0x01	; 1
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	02 2e       	mov	r0, r18
    3c68:	02 c0       	rjmp	.+4      	; 0x3c6e <DIO_void_Set_Pin_Dirction+0x14e>
    3c6a:	88 0f       	add	r24, r24
    3c6c:	99 1f       	adc	r25, r25
    3c6e:	0a 94       	dec	r0
    3c70:	e2 f7       	brpl	.-8      	; 0x3c6a <DIO_void_Set_Pin_Dirction+0x14a>
    3c72:	80 95       	com	r24
    3c74:	84 23       	and	r24, r20
    3c76:	8c 93       	st	X, r24
    3c78:	ec c0       	rjmp	.+472    	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTF_ID:CLR_BIT(DDRF,bit_no);break;
    3c7a:	a1 e6       	ldi	r26, 0x61	; 97
    3c7c:	b0 e0       	ldi	r27, 0x00	; 0
    3c7e:	e1 e6       	ldi	r30, 0x61	; 97
    3c80:	f0 e0       	ldi	r31, 0x00	; 0
    3c82:	80 81       	ld	r24, Z
    3c84:	48 2f       	mov	r20, r24
    3c86:	8a 81       	ldd	r24, Y+2	; 0x02
    3c88:	28 2f       	mov	r18, r24
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	81 e0       	ldi	r24, 0x01	; 1
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	02 2e       	mov	r0, r18
    3c92:	02 c0       	rjmp	.+4      	; 0x3c98 <DIO_void_Set_Pin_Dirction+0x178>
    3c94:	88 0f       	add	r24, r24
    3c96:	99 1f       	adc	r25, r25
    3c98:	0a 94       	dec	r0
    3c9a:	e2 f7       	brpl	.-8      	; 0x3c94 <DIO_void_Set_Pin_Dirction+0x174>
    3c9c:	80 95       	com	r24
    3c9e:	84 23       	and	r24, r20
    3ca0:	8c 93       	st	X, r24
    3ca2:	d7 c0       	rjmp	.+430    	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>
	    case PORTG_ID:CLR_BIT(DDRG,bit_no);break;
    3ca4:	a4 e6       	ldi	r26, 0x64	; 100
    3ca6:	b0 e0       	ldi	r27, 0x00	; 0
    3ca8:	e4 e6       	ldi	r30, 0x64	; 100
    3caa:	f0 e0       	ldi	r31, 0x00	; 0
    3cac:	80 81       	ld	r24, Z
    3cae:	48 2f       	mov	r20, r24
    3cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb2:	28 2f       	mov	r18, r24
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	02 2e       	mov	r0, r18
    3cbc:	02 c0       	rjmp	.+4      	; 0x3cc2 <DIO_void_Set_Pin_Dirction+0x1a2>
    3cbe:	88 0f       	add	r24, r24
    3cc0:	99 1f       	adc	r25, r25
    3cc2:	0a 94       	dec	r0
    3cc4:	e2 f7       	brpl	.-8      	; 0x3cbe <DIO_void_Set_Pin_Dirction+0x19e>
    3cc6:	80 95       	com	r24
    3cc8:	84 23       	and	r24, r20
    3cca:	8c 93       	st	X, r24
    3ccc:	c2 c0       	rjmp	.+388    	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>

		}
	}
	else if(direction == OUTPUT)
    3cce:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd0:	81 30       	cpi	r24, 0x01	; 1
    3cd2:	09 f0       	breq	.+2      	; 0x3cd6 <DIO_void_Set_Pin_Dirction+0x1b6>
    3cd4:	be c0       	rjmp	.+380    	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>
	{
		switch(port_no)
    3cd6:	89 81       	ldd	r24, Y+1	; 0x01
    3cd8:	28 2f       	mov	r18, r24
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	3d 83       	std	Y+5, r19	; 0x05
    3cde:	2c 83       	std	Y+4, r18	; 0x04
    3ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ce4:	83 30       	cpi	r24, 0x03	; 3
    3ce6:	91 05       	cpc	r25, r1
    3ce8:	09 f4       	brne	.+2      	; 0x3cec <DIO_void_Set_Pin_Dirction+0x1cc>
    3cea:	64 c0       	rjmp	.+200    	; 0x3db4 <DIO_void_Set_Pin_Dirction+0x294>
    3cec:	2c 81       	ldd	r18, Y+4	; 0x04
    3cee:	3d 81       	ldd	r19, Y+5	; 0x05
    3cf0:	24 30       	cpi	r18, 0x04	; 4
    3cf2:	31 05       	cpc	r19, r1
    3cf4:	84 f4       	brge	.+32     	; 0x3d16 <DIO_void_Set_Pin_Dirction+0x1f6>
    3cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    3cf8:	9d 81       	ldd	r25, Y+5	; 0x05
    3cfa:	81 30       	cpi	r24, 0x01	; 1
    3cfc:	91 05       	cpc	r25, r1
    3cfe:	91 f1       	breq	.+100    	; 0x3d64 <DIO_void_Set_Pin_Dirction+0x244>
    3d00:	2c 81       	ldd	r18, Y+4	; 0x04
    3d02:	3d 81       	ldd	r19, Y+5	; 0x05
    3d04:	22 30       	cpi	r18, 0x02	; 2
    3d06:	31 05       	cpc	r19, r1
    3d08:	0c f0       	brlt	.+2      	; 0x3d0c <DIO_void_Set_Pin_Dirction+0x1ec>
    3d0a:	40 c0       	rjmp	.+128    	; 0x3d8c <DIO_void_Set_Pin_Dirction+0x26c>
    3d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    3d10:	00 97       	sbiw	r24, 0x00	; 0
    3d12:	a1 f0       	breq	.+40     	; 0x3d3c <DIO_void_Set_Pin_Dirction+0x21c>
    3d14:	9e c0       	rjmp	.+316    	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>
    3d16:	2c 81       	ldd	r18, Y+4	; 0x04
    3d18:	3d 81       	ldd	r19, Y+5	; 0x05
    3d1a:	25 30       	cpi	r18, 0x05	; 5
    3d1c:	31 05       	cpc	r19, r1
    3d1e:	09 f4       	brne	.+2      	; 0x3d22 <DIO_void_Set_Pin_Dirction+0x202>
    3d20:	71 c0       	rjmp	.+226    	; 0x3e04 <DIO_void_Set_Pin_Dirction+0x2e4>
    3d22:	8c 81       	ldd	r24, Y+4	; 0x04
    3d24:	9d 81       	ldd	r25, Y+5	; 0x05
    3d26:	85 30       	cpi	r24, 0x05	; 5
    3d28:	91 05       	cpc	r25, r1
    3d2a:	0c f4       	brge	.+2      	; 0x3d2e <DIO_void_Set_Pin_Dirction+0x20e>
    3d2c:	57 c0       	rjmp	.+174    	; 0x3ddc <DIO_void_Set_Pin_Dirction+0x2bc>
    3d2e:	2c 81       	ldd	r18, Y+4	; 0x04
    3d30:	3d 81       	ldd	r19, Y+5	; 0x05
    3d32:	26 30       	cpi	r18, 0x06	; 6
    3d34:	31 05       	cpc	r19, r1
    3d36:	09 f4       	brne	.+2      	; 0x3d3a <DIO_void_Set_Pin_Dirction+0x21a>
    3d38:	79 c0       	rjmp	.+242    	; 0x3e2c <DIO_void_Set_Pin_Dirction+0x30c>
    3d3a:	8b c0       	rjmp	.+278    	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>
		{
		case PORTA_ID:SET_BIT(DDRA,bit_no);break;
    3d3c:	aa e3       	ldi	r26, 0x3A	; 58
    3d3e:	b0 e0       	ldi	r27, 0x00	; 0
    3d40:	ea e3       	ldi	r30, 0x3A	; 58
    3d42:	f0 e0       	ldi	r31, 0x00	; 0
    3d44:	80 81       	ld	r24, Z
    3d46:	48 2f       	mov	r20, r24
    3d48:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4a:	28 2f       	mov	r18, r24
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	81 e0       	ldi	r24, 0x01	; 1
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	02 2e       	mov	r0, r18
    3d54:	02 c0       	rjmp	.+4      	; 0x3d5a <DIO_void_Set_Pin_Dirction+0x23a>
    3d56:	88 0f       	add	r24, r24
    3d58:	99 1f       	adc	r25, r25
    3d5a:	0a 94       	dec	r0
    3d5c:	e2 f7       	brpl	.-8      	; 0x3d56 <DIO_void_Set_Pin_Dirction+0x236>
    3d5e:	84 2b       	or	r24, r20
    3d60:	8c 93       	st	X, r24
    3d62:	77 c0       	rjmp	.+238    	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTB_ID:SET_BIT(DDRB,bit_no);break;
    3d64:	a7 e3       	ldi	r26, 0x37	; 55
    3d66:	b0 e0       	ldi	r27, 0x00	; 0
    3d68:	e7 e3       	ldi	r30, 0x37	; 55
    3d6a:	f0 e0       	ldi	r31, 0x00	; 0
    3d6c:	80 81       	ld	r24, Z
    3d6e:	48 2f       	mov	r20, r24
    3d70:	8a 81       	ldd	r24, Y+2	; 0x02
    3d72:	28 2f       	mov	r18, r24
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	81 e0       	ldi	r24, 0x01	; 1
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	02 2e       	mov	r0, r18
    3d7c:	02 c0       	rjmp	.+4      	; 0x3d82 <DIO_void_Set_Pin_Dirction+0x262>
    3d7e:	88 0f       	add	r24, r24
    3d80:	99 1f       	adc	r25, r25
    3d82:	0a 94       	dec	r0
    3d84:	e2 f7       	brpl	.-8      	; 0x3d7e <DIO_void_Set_Pin_Dirction+0x25e>
    3d86:	84 2b       	or	r24, r20
    3d88:	8c 93       	st	X, r24
    3d8a:	63 c0       	rjmp	.+198    	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTC_ID:SET_BIT(DDRC,bit_no);break;
    3d8c:	a4 e3       	ldi	r26, 0x34	; 52
    3d8e:	b0 e0       	ldi	r27, 0x00	; 0
    3d90:	e4 e3       	ldi	r30, 0x34	; 52
    3d92:	f0 e0       	ldi	r31, 0x00	; 0
    3d94:	80 81       	ld	r24, Z
    3d96:	48 2f       	mov	r20, r24
    3d98:	8a 81       	ldd	r24, Y+2	; 0x02
    3d9a:	28 2f       	mov	r18, r24
    3d9c:	30 e0       	ldi	r19, 0x00	; 0
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	02 2e       	mov	r0, r18
    3da4:	02 c0       	rjmp	.+4      	; 0x3daa <DIO_void_Set_Pin_Dirction+0x28a>
    3da6:	88 0f       	add	r24, r24
    3da8:	99 1f       	adc	r25, r25
    3daa:	0a 94       	dec	r0
    3dac:	e2 f7       	brpl	.-8      	; 0x3da6 <DIO_void_Set_Pin_Dirction+0x286>
    3dae:	84 2b       	or	r24, r20
    3db0:	8c 93       	st	X, r24
    3db2:	4f c0       	rjmp	.+158    	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTD_ID:SET_BIT(DDRD,bit_no);break;
    3db4:	a1 e3       	ldi	r26, 0x31	; 49
    3db6:	b0 e0       	ldi	r27, 0x00	; 0
    3db8:	e1 e3       	ldi	r30, 0x31	; 49
    3dba:	f0 e0       	ldi	r31, 0x00	; 0
    3dbc:	80 81       	ld	r24, Z
    3dbe:	48 2f       	mov	r20, r24
    3dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc2:	28 2f       	mov	r18, r24
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	02 2e       	mov	r0, r18
    3dcc:	02 c0       	rjmp	.+4      	; 0x3dd2 <DIO_void_Set_Pin_Dirction+0x2b2>
    3dce:	88 0f       	add	r24, r24
    3dd0:	99 1f       	adc	r25, r25
    3dd2:	0a 94       	dec	r0
    3dd4:	e2 f7       	brpl	.-8      	; 0x3dce <DIO_void_Set_Pin_Dirction+0x2ae>
    3dd6:	84 2b       	or	r24, r20
    3dd8:	8c 93       	st	X, r24
    3dda:	3b c0       	rjmp	.+118    	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTE_ID:SET_BIT(DDRE,bit_no);break;
    3ddc:	a2 e2       	ldi	r26, 0x22	; 34
    3dde:	b0 e0       	ldi	r27, 0x00	; 0
    3de0:	e2 e2       	ldi	r30, 0x22	; 34
    3de2:	f0 e0       	ldi	r31, 0x00	; 0
    3de4:	80 81       	ld	r24, Z
    3de6:	48 2f       	mov	r20, r24
    3de8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dea:	28 2f       	mov	r18, r24
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	81 e0       	ldi	r24, 0x01	; 1
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	02 2e       	mov	r0, r18
    3df4:	02 c0       	rjmp	.+4      	; 0x3dfa <DIO_void_Set_Pin_Dirction+0x2da>
    3df6:	88 0f       	add	r24, r24
    3df8:	99 1f       	adc	r25, r25
    3dfa:	0a 94       	dec	r0
    3dfc:	e2 f7       	brpl	.-8      	; 0x3df6 <DIO_void_Set_Pin_Dirction+0x2d6>
    3dfe:	84 2b       	or	r24, r20
    3e00:	8c 93       	st	X, r24
    3e02:	27 c0       	rjmp	.+78     	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTF_ID:SET_BIT(DDRF,bit_no);break;
    3e04:	a1 e6       	ldi	r26, 0x61	; 97
    3e06:	b0 e0       	ldi	r27, 0x00	; 0
    3e08:	e1 e6       	ldi	r30, 0x61	; 97
    3e0a:	f0 e0       	ldi	r31, 0x00	; 0
    3e0c:	80 81       	ld	r24, Z
    3e0e:	48 2f       	mov	r20, r24
    3e10:	8a 81       	ldd	r24, Y+2	; 0x02
    3e12:	28 2f       	mov	r18, r24
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	81 e0       	ldi	r24, 0x01	; 1
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	02 2e       	mov	r0, r18
    3e1c:	02 c0       	rjmp	.+4      	; 0x3e22 <DIO_void_Set_Pin_Dirction+0x302>
    3e1e:	88 0f       	add	r24, r24
    3e20:	99 1f       	adc	r25, r25
    3e22:	0a 94       	dec	r0
    3e24:	e2 f7       	brpl	.-8      	; 0x3e1e <DIO_void_Set_Pin_Dirction+0x2fe>
    3e26:	84 2b       	or	r24, r20
    3e28:	8c 93       	st	X, r24
    3e2a:	13 c0       	rjmp	.+38     	; 0x3e52 <DIO_void_Set_Pin_Dirction+0x332>
		case PORTG_ID:SET_BIT(DDRG,bit_no);break;
    3e2c:	a4 e6       	ldi	r26, 0x64	; 100
    3e2e:	b0 e0       	ldi	r27, 0x00	; 0
    3e30:	e4 e6       	ldi	r30, 0x64	; 100
    3e32:	f0 e0       	ldi	r31, 0x00	; 0
    3e34:	80 81       	ld	r24, Z
    3e36:	48 2f       	mov	r20, r24
    3e38:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3a:	28 2f       	mov	r18, r24
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	81 e0       	ldi	r24, 0x01	; 1
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	02 2e       	mov	r0, r18
    3e44:	02 c0       	rjmp	.+4      	; 0x3e4a <DIO_void_Set_Pin_Dirction+0x32a>
    3e46:	88 0f       	add	r24, r24
    3e48:	99 1f       	adc	r25, r25
    3e4a:	0a 94       	dec	r0
    3e4c:	e2 f7       	brpl	.-8      	; 0x3e46 <DIO_void_Set_Pin_Dirction+0x326>
    3e4e:	84 2b       	or	r24, r20
    3e50:	8c 93       	st	X, r24
		}
	}
}
    3e52:	27 96       	adiw	r28, 0x07	; 7
    3e54:	0f b6       	in	r0, 0x3f	; 63
    3e56:	f8 94       	cli
    3e58:	de bf       	out	0x3e, r29	; 62
    3e5a:	0f be       	out	0x3f, r0	; 63
    3e5c:	cd bf       	out	0x3d, r28	; 61
    3e5e:	cf 91       	pop	r28
    3e60:	df 91       	pop	r29
    3e62:	08 95       	ret

00003e64 <DIO_void_Set_Pin_Value>:

void DIO_void_Set_Pin_Value(port_no_type port_no, bit_no_type bit_no, value_type value)
{
    3e64:	df 93       	push	r29
    3e66:	cf 93       	push	r28
    3e68:	cd b7       	in	r28, 0x3d	; 61
    3e6a:	de b7       	in	r29, 0x3e	; 62
    3e6c:	27 97       	sbiw	r28, 0x07	; 7
    3e6e:	0f b6       	in	r0, 0x3f	; 63
    3e70:	f8 94       	cli
    3e72:	de bf       	out	0x3e, r29	; 62
    3e74:	0f be       	out	0x3f, r0	; 63
    3e76:	cd bf       	out	0x3d, r28	; 61
    3e78:	89 83       	std	Y+1, r24	; 0x01
    3e7a:	6a 83       	std	Y+2, r22	; 0x02
    3e7c:	4b 83       	std	Y+3, r20	; 0x03
	if(value == LOW)
    3e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e80:	88 23       	and	r24, r24
    3e82:	09 f0       	breq	.+2      	; 0x3e86 <DIO_void_Set_Pin_Value+0x22>
    3e84:	c6 c0       	rjmp	.+396    	; 0x4012 <DIO_void_Set_Pin_Value+0x1ae>
	{
		switch(port_no)
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
    3e88:	28 2f       	mov	r18, r24
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	3f 83       	std	Y+7, r19	; 0x07
    3e8e:	2e 83       	std	Y+6, r18	; 0x06
    3e90:	8e 81       	ldd	r24, Y+6	; 0x06
    3e92:	9f 81       	ldd	r25, Y+7	; 0x07
    3e94:	83 30       	cpi	r24, 0x03	; 3
    3e96:	91 05       	cpc	r25, r1
    3e98:	09 f4       	brne	.+2      	; 0x3e9c <DIO_void_Set_Pin_Value+0x38>
    3e9a:	67 c0       	rjmp	.+206    	; 0x3f6a <DIO_void_Set_Pin_Value+0x106>
    3e9c:	2e 81       	ldd	r18, Y+6	; 0x06
    3e9e:	3f 81       	ldd	r19, Y+7	; 0x07
    3ea0:	24 30       	cpi	r18, 0x04	; 4
    3ea2:	31 05       	cpc	r19, r1
    3ea4:	84 f4       	brge	.+32     	; 0x3ec6 <DIO_void_Set_Pin_Value+0x62>
    3ea6:	8e 81       	ldd	r24, Y+6	; 0x06
    3ea8:	9f 81       	ldd	r25, Y+7	; 0x07
    3eaa:	81 30       	cpi	r24, 0x01	; 1
    3eac:	91 05       	cpc	r25, r1
    3eae:	99 f1       	breq	.+102    	; 0x3f16 <DIO_void_Set_Pin_Value+0xb2>
    3eb0:	2e 81       	ldd	r18, Y+6	; 0x06
    3eb2:	3f 81       	ldd	r19, Y+7	; 0x07
    3eb4:	22 30       	cpi	r18, 0x02	; 2
    3eb6:	31 05       	cpc	r19, r1
    3eb8:	0c f0       	brlt	.+2      	; 0x3ebc <DIO_void_Set_Pin_Value+0x58>
    3eba:	42 c0       	rjmp	.+132    	; 0x3f40 <DIO_void_Set_Pin_Value+0xdc>
    3ebc:	8e 81       	ldd	r24, Y+6	; 0x06
    3ebe:	9f 81       	ldd	r25, Y+7	; 0x07
    3ec0:	00 97       	sbiw	r24, 0x00	; 0
    3ec2:	a1 f0       	breq	.+40     	; 0x3eec <DIO_void_Set_Pin_Value+0x88>
    3ec4:	68 c1       	rjmp	.+720    	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
    3ec6:	2e 81       	ldd	r18, Y+6	; 0x06
    3ec8:	3f 81       	ldd	r19, Y+7	; 0x07
    3eca:	25 30       	cpi	r18, 0x05	; 5
    3ecc:	31 05       	cpc	r19, r1
    3ece:	09 f4       	brne	.+2      	; 0x3ed2 <DIO_void_Set_Pin_Value+0x6e>
    3ed0:	76 c0       	rjmp	.+236    	; 0x3fbe <DIO_void_Set_Pin_Value+0x15a>
    3ed2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ed4:	9f 81       	ldd	r25, Y+7	; 0x07
    3ed6:	85 30       	cpi	r24, 0x05	; 5
    3ed8:	91 05       	cpc	r25, r1
    3eda:	0c f4       	brge	.+2      	; 0x3ede <DIO_void_Set_Pin_Value+0x7a>
    3edc:	5b c0       	rjmp	.+182    	; 0x3f94 <DIO_void_Set_Pin_Value+0x130>
    3ede:	2e 81       	ldd	r18, Y+6	; 0x06
    3ee0:	3f 81       	ldd	r19, Y+7	; 0x07
    3ee2:	26 30       	cpi	r18, 0x06	; 6
    3ee4:	31 05       	cpc	r19, r1
    3ee6:	09 f4       	brne	.+2      	; 0x3eea <DIO_void_Set_Pin_Value+0x86>
    3ee8:	7f c0       	rjmp	.+254    	; 0x3fe8 <DIO_void_Set_Pin_Value+0x184>
    3eea:	55 c1       	rjmp	.+682    	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
		{
		case PORTA_ID:CLR_BIT(PORTA,bit_no);break;
    3eec:	ab e3       	ldi	r26, 0x3B	; 59
    3eee:	b0 e0       	ldi	r27, 0x00	; 0
    3ef0:	eb e3       	ldi	r30, 0x3B	; 59
    3ef2:	f0 e0       	ldi	r31, 0x00	; 0
    3ef4:	80 81       	ld	r24, Z
    3ef6:	48 2f       	mov	r20, r24
    3ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    3efa:	28 2f       	mov	r18, r24
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	81 e0       	ldi	r24, 0x01	; 1
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	02 2e       	mov	r0, r18
    3f04:	02 c0       	rjmp	.+4      	; 0x3f0a <DIO_void_Set_Pin_Value+0xa6>
    3f06:	88 0f       	add	r24, r24
    3f08:	99 1f       	adc	r25, r25
    3f0a:	0a 94       	dec	r0
    3f0c:	e2 f7       	brpl	.-8      	; 0x3f06 <DIO_void_Set_Pin_Value+0xa2>
    3f0e:	80 95       	com	r24
    3f10:	84 23       	and	r24, r20
    3f12:	8c 93       	st	X, r24
    3f14:	40 c1       	rjmp	.+640    	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
		case PORTB_ID:CLR_BIT(PORTB,bit_no);break;
    3f16:	a8 e3       	ldi	r26, 0x38	; 56
    3f18:	b0 e0       	ldi	r27, 0x00	; 0
    3f1a:	e8 e3       	ldi	r30, 0x38	; 56
    3f1c:	f0 e0       	ldi	r31, 0x00	; 0
    3f1e:	80 81       	ld	r24, Z
    3f20:	48 2f       	mov	r20, r24
    3f22:	8a 81       	ldd	r24, Y+2	; 0x02
    3f24:	28 2f       	mov	r18, r24
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	81 e0       	ldi	r24, 0x01	; 1
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	02 2e       	mov	r0, r18
    3f2e:	02 c0       	rjmp	.+4      	; 0x3f34 <DIO_void_Set_Pin_Value+0xd0>
    3f30:	88 0f       	add	r24, r24
    3f32:	99 1f       	adc	r25, r25
    3f34:	0a 94       	dec	r0
    3f36:	e2 f7       	brpl	.-8      	; 0x3f30 <DIO_void_Set_Pin_Value+0xcc>
    3f38:	80 95       	com	r24
    3f3a:	84 23       	and	r24, r20
    3f3c:	8c 93       	st	X, r24
    3f3e:	2b c1       	rjmp	.+598    	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
		case PORTC_ID:CLR_BIT(PORTC,bit_no);break;
    3f40:	a5 e3       	ldi	r26, 0x35	; 53
    3f42:	b0 e0       	ldi	r27, 0x00	; 0
    3f44:	e5 e3       	ldi	r30, 0x35	; 53
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	80 81       	ld	r24, Z
    3f4a:	48 2f       	mov	r20, r24
    3f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f4e:	28 2f       	mov	r18, r24
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	81 e0       	ldi	r24, 0x01	; 1
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	02 2e       	mov	r0, r18
    3f58:	02 c0       	rjmp	.+4      	; 0x3f5e <DIO_void_Set_Pin_Value+0xfa>
    3f5a:	88 0f       	add	r24, r24
    3f5c:	99 1f       	adc	r25, r25
    3f5e:	0a 94       	dec	r0
    3f60:	e2 f7       	brpl	.-8      	; 0x3f5a <DIO_void_Set_Pin_Value+0xf6>
    3f62:	80 95       	com	r24
    3f64:	84 23       	and	r24, r20
    3f66:	8c 93       	st	X, r24
    3f68:	16 c1       	rjmp	.+556    	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
		case PORTD_ID:CLR_BIT(PORTD,bit_no);break;
    3f6a:	a2 e3       	ldi	r26, 0x32	; 50
    3f6c:	b0 e0       	ldi	r27, 0x00	; 0
    3f6e:	e2 e3       	ldi	r30, 0x32	; 50
    3f70:	f0 e0       	ldi	r31, 0x00	; 0
    3f72:	80 81       	ld	r24, Z
    3f74:	48 2f       	mov	r20, r24
    3f76:	8a 81       	ldd	r24, Y+2	; 0x02
    3f78:	28 2f       	mov	r18, r24
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	02 2e       	mov	r0, r18
    3f82:	02 c0       	rjmp	.+4      	; 0x3f88 <DIO_void_Set_Pin_Value+0x124>
    3f84:	88 0f       	add	r24, r24
    3f86:	99 1f       	adc	r25, r25
    3f88:	0a 94       	dec	r0
    3f8a:	e2 f7       	brpl	.-8      	; 0x3f84 <DIO_void_Set_Pin_Value+0x120>
    3f8c:	80 95       	com	r24
    3f8e:	84 23       	and	r24, r20
    3f90:	8c 93       	st	X, r24
    3f92:	01 c1       	rjmp	.+514    	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
		case PORTE_ID:CLR_BIT(PORTE,bit_no);break;
    3f94:	a3 e2       	ldi	r26, 0x23	; 35
    3f96:	b0 e0       	ldi	r27, 0x00	; 0
    3f98:	e3 e2       	ldi	r30, 0x23	; 35
    3f9a:	f0 e0       	ldi	r31, 0x00	; 0
    3f9c:	80 81       	ld	r24, Z
    3f9e:	48 2f       	mov	r20, r24
    3fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa2:	28 2f       	mov	r18, r24
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	81 e0       	ldi	r24, 0x01	; 1
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	02 2e       	mov	r0, r18
    3fac:	02 c0       	rjmp	.+4      	; 0x3fb2 <DIO_void_Set_Pin_Value+0x14e>
    3fae:	88 0f       	add	r24, r24
    3fb0:	99 1f       	adc	r25, r25
    3fb2:	0a 94       	dec	r0
    3fb4:	e2 f7       	brpl	.-8      	; 0x3fae <DIO_void_Set_Pin_Value+0x14a>
    3fb6:	80 95       	com	r24
    3fb8:	84 23       	and	r24, r20
    3fba:	8c 93       	st	X, r24
    3fbc:	ec c0       	rjmp	.+472    	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
		case PORTF_ID:CLR_BIT(PORTF,bit_no);break;
    3fbe:	a2 e6       	ldi	r26, 0x62	; 98
    3fc0:	b0 e0       	ldi	r27, 0x00	; 0
    3fc2:	e2 e6       	ldi	r30, 0x62	; 98
    3fc4:	f0 e0       	ldi	r31, 0x00	; 0
    3fc6:	80 81       	ld	r24, Z
    3fc8:	48 2f       	mov	r20, r24
    3fca:	8a 81       	ldd	r24, Y+2	; 0x02
    3fcc:	28 2f       	mov	r18, r24
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	02 2e       	mov	r0, r18
    3fd6:	02 c0       	rjmp	.+4      	; 0x3fdc <DIO_void_Set_Pin_Value+0x178>
    3fd8:	88 0f       	add	r24, r24
    3fda:	99 1f       	adc	r25, r25
    3fdc:	0a 94       	dec	r0
    3fde:	e2 f7       	brpl	.-8      	; 0x3fd8 <DIO_void_Set_Pin_Value+0x174>
    3fe0:	80 95       	com	r24
    3fe2:	84 23       	and	r24, r20
    3fe4:	8c 93       	st	X, r24
    3fe6:	d7 c0       	rjmp	.+430    	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
		case PORTG_ID:CLR_BIT(PORTG,bit_no);break;
    3fe8:	a5 e6       	ldi	r26, 0x65	; 101
    3fea:	b0 e0       	ldi	r27, 0x00	; 0
    3fec:	e5 e6       	ldi	r30, 0x65	; 101
    3fee:	f0 e0       	ldi	r31, 0x00	; 0
    3ff0:	80 81       	ld	r24, Z
    3ff2:	48 2f       	mov	r20, r24
    3ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff6:	28 2f       	mov	r18, r24
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	81 e0       	ldi	r24, 0x01	; 1
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	02 2e       	mov	r0, r18
    4000:	02 c0       	rjmp	.+4      	; 0x4006 <DIO_void_Set_Pin_Value+0x1a2>
    4002:	88 0f       	add	r24, r24
    4004:	99 1f       	adc	r25, r25
    4006:	0a 94       	dec	r0
    4008:	e2 f7       	brpl	.-8      	; 0x4002 <DIO_void_Set_Pin_Value+0x19e>
    400a:	80 95       	com	r24
    400c:	84 23       	and	r24, r20
    400e:	8c 93       	st	X, r24
    4010:	c2 c0       	rjmp	.+388    	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
		}
	}
	else if(value == HIGH)
    4012:	8b 81       	ldd	r24, Y+3	; 0x03
    4014:	81 30       	cpi	r24, 0x01	; 1
    4016:	09 f0       	breq	.+2      	; 0x401a <DIO_void_Set_Pin_Value+0x1b6>
    4018:	be c0       	rjmp	.+380    	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
	{
		switch(port_no)
    401a:	89 81       	ldd	r24, Y+1	; 0x01
    401c:	28 2f       	mov	r18, r24
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	3d 83       	std	Y+5, r19	; 0x05
    4022:	2c 83       	std	Y+4, r18	; 0x04
    4024:	8c 81       	ldd	r24, Y+4	; 0x04
    4026:	9d 81       	ldd	r25, Y+5	; 0x05
    4028:	83 30       	cpi	r24, 0x03	; 3
    402a:	91 05       	cpc	r25, r1
    402c:	09 f4       	brne	.+2      	; 0x4030 <DIO_void_Set_Pin_Value+0x1cc>
    402e:	64 c0       	rjmp	.+200    	; 0x40f8 <DIO_void_Set_Pin_Value+0x294>
    4030:	2c 81       	ldd	r18, Y+4	; 0x04
    4032:	3d 81       	ldd	r19, Y+5	; 0x05
    4034:	24 30       	cpi	r18, 0x04	; 4
    4036:	31 05       	cpc	r19, r1
    4038:	84 f4       	brge	.+32     	; 0x405a <DIO_void_Set_Pin_Value+0x1f6>
    403a:	8c 81       	ldd	r24, Y+4	; 0x04
    403c:	9d 81       	ldd	r25, Y+5	; 0x05
    403e:	81 30       	cpi	r24, 0x01	; 1
    4040:	91 05       	cpc	r25, r1
    4042:	91 f1       	breq	.+100    	; 0x40a8 <DIO_void_Set_Pin_Value+0x244>
    4044:	2c 81       	ldd	r18, Y+4	; 0x04
    4046:	3d 81       	ldd	r19, Y+5	; 0x05
    4048:	22 30       	cpi	r18, 0x02	; 2
    404a:	31 05       	cpc	r19, r1
    404c:	0c f0       	brlt	.+2      	; 0x4050 <DIO_void_Set_Pin_Value+0x1ec>
    404e:	40 c0       	rjmp	.+128    	; 0x40d0 <DIO_void_Set_Pin_Value+0x26c>
    4050:	8c 81       	ldd	r24, Y+4	; 0x04
    4052:	9d 81       	ldd	r25, Y+5	; 0x05
    4054:	00 97       	sbiw	r24, 0x00	; 0
    4056:	a1 f0       	breq	.+40     	; 0x4080 <DIO_void_Set_Pin_Value+0x21c>
    4058:	9e c0       	rjmp	.+316    	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
    405a:	2c 81       	ldd	r18, Y+4	; 0x04
    405c:	3d 81       	ldd	r19, Y+5	; 0x05
    405e:	25 30       	cpi	r18, 0x05	; 5
    4060:	31 05       	cpc	r19, r1
    4062:	09 f4       	brne	.+2      	; 0x4066 <DIO_void_Set_Pin_Value+0x202>
    4064:	71 c0       	rjmp	.+226    	; 0x4148 <DIO_void_Set_Pin_Value+0x2e4>
    4066:	8c 81       	ldd	r24, Y+4	; 0x04
    4068:	9d 81       	ldd	r25, Y+5	; 0x05
    406a:	85 30       	cpi	r24, 0x05	; 5
    406c:	91 05       	cpc	r25, r1
    406e:	0c f4       	brge	.+2      	; 0x4072 <DIO_void_Set_Pin_Value+0x20e>
    4070:	57 c0       	rjmp	.+174    	; 0x4120 <DIO_void_Set_Pin_Value+0x2bc>
    4072:	2c 81       	ldd	r18, Y+4	; 0x04
    4074:	3d 81       	ldd	r19, Y+5	; 0x05
    4076:	26 30       	cpi	r18, 0x06	; 6
    4078:	31 05       	cpc	r19, r1
    407a:	09 f4       	brne	.+2      	; 0x407e <DIO_void_Set_Pin_Value+0x21a>
    407c:	79 c0       	rjmp	.+242    	; 0x4170 <DIO_void_Set_Pin_Value+0x30c>
    407e:	8b c0       	rjmp	.+278    	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
		{
		case PORTA_ID:SET_BIT(PORTA,bit_no);break;
    4080:	ab e3       	ldi	r26, 0x3B	; 59
    4082:	b0 e0       	ldi	r27, 0x00	; 0
    4084:	eb e3       	ldi	r30, 0x3B	; 59
    4086:	f0 e0       	ldi	r31, 0x00	; 0
    4088:	80 81       	ld	r24, Z
    408a:	48 2f       	mov	r20, r24
    408c:	8a 81       	ldd	r24, Y+2	; 0x02
    408e:	28 2f       	mov	r18, r24
    4090:	30 e0       	ldi	r19, 0x00	; 0
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	02 2e       	mov	r0, r18
    4098:	02 c0       	rjmp	.+4      	; 0x409e <DIO_void_Set_Pin_Value+0x23a>
    409a:	88 0f       	add	r24, r24
    409c:	99 1f       	adc	r25, r25
    409e:	0a 94       	dec	r0
    40a0:	e2 f7       	brpl	.-8      	; 0x409a <DIO_void_Set_Pin_Value+0x236>
    40a2:	84 2b       	or	r24, r20
    40a4:	8c 93       	st	X, r24
    40a6:	77 c0       	rjmp	.+238    	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
		case PORTB_ID:SET_BIT(PORTB,bit_no);break;
    40a8:	a8 e3       	ldi	r26, 0x38	; 56
    40aa:	b0 e0       	ldi	r27, 0x00	; 0
    40ac:	e8 e3       	ldi	r30, 0x38	; 56
    40ae:	f0 e0       	ldi	r31, 0x00	; 0
    40b0:	80 81       	ld	r24, Z
    40b2:	48 2f       	mov	r20, r24
    40b4:	8a 81       	ldd	r24, Y+2	; 0x02
    40b6:	28 2f       	mov	r18, r24
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	81 e0       	ldi	r24, 0x01	; 1
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	02 2e       	mov	r0, r18
    40c0:	02 c0       	rjmp	.+4      	; 0x40c6 <DIO_void_Set_Pin_Value+0x262>
    40c2:	88 0f       	add	r24, r24
    40c4:	99 1f       	adc	r25, r25
    40c6:	0a 94       	dec	r0
    40c8:	e2 f7       	brpl	.-8      	; 0x40c2 <DIO_void_Set_Pin_Value+0x25e>
    40ca:	84 2b       	or	r24, r20
    40cc:	8c 93       	st	X, r24
    40ce:	63 c0       	rjmp	.+198    	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
		case PORTC_ID:SET_BIT(PORTC,bit_no);break;
    40d0:	a5 e3       	ldi	r26, 0x35	; 53
    40d2:	b0 e0       	ldi	r27, 0x00	; 0
    40d4:	e5 e3       	ldi	r30, 0x35	; 53
    40d6:	f0 e0       	ldi	r31, 0x00	; 0
    40d8:	80 81       	ld	r24, Z
    40da:	48 2f       	mov	r20, r24
    40dc:	8a 81       	ldd	r24, Y+2	; 0x02
    40de:	28 2f       	mov	r18, r24
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	02 2e       	mov	r0, r18
    40e8:	02 c0       	rjmp	.+4      	; 0x40ee <DIO_void_Set_Pin_Value+0x28a>
    40ea:	88 0f       	add	r24, r24
    40ec:	99 1f       	adc	r25, r25
    40ee:	0a 94       	dec	r0
    40f0:	e2 f7       	brpl	.-8      	; 0x40ea <DIO_void_Set_Pin_Value+0x286>
    40f2:	84 2b       	or	r24, r20
    40f4:	8c 93       	st	X, r24
    40f6:	4f c0       	rjmp	.+158    	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
		case PORTD_ID:SET_BIT(PORTD,bit_no);break;
    40f8:	a2 e3       	ldi	r26, 0x32	; 50
    40fa:	b0 e0       	ldi	r27, 0x00	; 0
    40fc:	e2 e3       	ldi	r30, 0x32	; 50
    40fe:	f0 e0       	ldi	r31, 0x00	; 0
    4100:	80 81       	ld	r24, Z
    4102:	48 2f       	mov	r20, r24
    4104:	8a 81       	ldd	r24, Y+2	; 0x02
    4106:	28 2f       	mov	r18, r24
    4108:	30 e0       	ldi	r19, 0x00	; 0
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	02 2e       	mov	r0, r18
    4110:	02 c0       	rjmp	.+4      	; 0x4116 <DIO_void_Set_Pin_Value+0x2b2>
    4112:	88 0f       	add	r24, r24
    4114:	99 1f       	adc	r25, r25
    4116:	0a 94       	dec	r0
    4118:	e2 f7       	brpl	.-8      	; 0x4112 <DIO_void_Set_Pin_Value+0x2ae>
    411a:	84 2b       	or	r24, r20
    411c:	8c 93       	st	X, r24
    411e:	3b c0       	rjmp	.+118    	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
		case PORTE_ID:SET_BIT(PORTE,bit_no);break;
    4120:	a3 e2       	ldi	r26, 0x23	; 35
    4122:	b0 e0       	ldi	r27, 0x00	; 0
    4124:	e3 e2       	ldi	r30, 0x23	; 35
    4126:	f0 e0       	ldi	r31, 0x00	; 0
    4128:	80 81       	ld	r24, Z
    412a:	48 2f       	mov	r20, r24
    412c:	8a 81       	ldd	r24, Y+2	; 0x02
    412e:	28 2f       	mov	r18, r24
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	81 e0       	ldi	r24, 0x01	; 1
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	02 2e       	mov	r0, r18
    4138:	02 c0       	rjmp	.+4      	; 0x413e <DIO_void_Set_Pin_Value+0x2da>
    413a:	88 0f       	add	r24, r24
    413c:	99 1f       	adc	r25, r25
    413e:	0a 94       	dec	r0
    4140:	e2 f7       	brpl	.-8      	; 0x413a <DIO_void_Set_Pin_Value+0x2d6>
    4142:	84 2b       	or	r24, r20
    4144:	8c 93       	st	X, r24
    4146:	27 c0       	rjmp	.+78     	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
		case PORTF_ID:SET_BIT(PORTF,bit_no);break;
    4148:	a2 e6       	ldi	r26, 0x62	; 98
    414a:	b0 e0       	ldi	r27, 0x00	; 0
    414c:	e2 e6       	ldi	r30, 0x62	; 98
    414e:	f0 e0       	ldi	r31, 0x00	; 0
    4150:	80 81       	ld	r24, Z
    4152:	48 2f       	mov	r20, r24
    4154:	8a 81       	ldd	r24, Y+2	; 0x02
    4156:	28 2f       	mov	r18, r24
    4158:	30 e0       	ldi	r19, 0x00	; 0
    415a:	81 e0       	ldi	r24, 0x01	; 1
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	02 2e       	mov	r0, r18
    4160:	02 c0       	rjmp	.+4      	; 0x4166 <DIO_void_Set_Pin_Value+0x302>
    4162:	88 0f       	add	r24, r24
    4164:	99 1f       	adc	r25, r25
    4166:	0a 94       	dec	r0
    4168:	e2 f7       	brpl	.-8      	; 0x4162 <DIO_void_Set_Pin_Value+0x2fe>
    416a:	84 2b       	or	r24, r20
    416c:	8c 93       	st	X, r24
    416e:	13 c0       	rjmp	.+38     	; 0x4196 <DIO_void_Set_Pin_Value+0x332>
		case PORTG_ID:SET_BIT(PORTG,bit_no);break;
    4170:	a5 e6       	ldi	r26, 0x65	; 101
    4172:	b0 e0       	ldi	r27, 0x00	; 0
    4174:	e5 e6       	ldi	r30, 0x65	; 101
    4176:	f0 e0       	ldi	r31, 0x00	; 0
    4178:	80 81       	ld	r24, Z
    417a:	48 2f       	mov	r20, r24
    417c:	8a 81       	ldd	r24, Y+2	; 0x02
    417e:	28 2f       	mov	r18, r24
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	81 e0       	ldi	r24, 0x01	; 1
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	02 2e       	mov	r0, r18
    4188:	02 c0       	rjmp	.+4      	; 0x418e <DIO_void_Set_Pin_Value+0x32a>
    418a:	88 0f       	add	r24, r24
    418c:	99 1f       	adc	r25, r25
    418e:	0a 94       	dec	r0
    4190:	e2 f7       	brpl	.-8      	; 0x418a <DIO_void_Set_Pin_Value+0x326>
    4192:	84 2b       	or	r24, r20
    4194:	8c 93       	st	X, r24
		}
	}
}
    4196:	27 96       	adiw	r28, 0x07	; 7
    4198:	0f b6       	in	r0, 0x3f	; 63
    419a:	f8 94       	cli
    419c:	de bf       	out	0x3e, r29	; 62
    419e:	0f be       	out	0x3f, r0	; 63
    41a0:	cd bf       	out	0x3d, r28	; 61
    41a2:	cf 91       	pop	r28
    41a4:	df 91       	pop	r29
    41a6:	08 95       	ret

000041a8 <DIO_value_type_Get_Pin_Value>:

value_type DIO_value_type_Get_Pin_Value(port_no_type port_no, bit_no_type bit_no)
{
    41a8:	df 93       	push	r29
    41aa:	cf 93       	push	r28
    41ac:	00 d0       	rcall	.+0      	; 0x41ae <DIO_value_type_Get_Pin_Value+0x6>
    41ae:	00 d0       	rcall	.+0      	; 0x41b0 <DIO_value_type_Get_Pin_Value+0x8>
    41b0:	0f 92       	push	r0
    41b2:	cd b7       	in	r28, 0x3d	; 61
    41b4:	de b7       	in	r29, 0x3e	; 62
    41b6:	8a 83       	std	Y+2, r24	; 0x02
    41b8:	6b 83       	std	Y+3, r22	; 0x03
	value_type return_value;
	switch(port_no)
    41ba:	8a 81       	ldd	r24, Y+2	; 0x02
    41bc:	28 2f       	mov	r18, r24
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	3d 83       	std	Y+5, r19	; 0x05
    41c2:	2c 83       	std	Y+4, r18	; 0x04
    41c4:	4c 81       	ldd	r20, Y+4	; 0x04
    41c6:	5d 81       	ldd	r21, Y+5	; 0x05
    41c8:	43 30       	cpi	r20, 0x03	; 3
    41ca:	51 05       	cpc	r21, r1
    41cc:	09 f4       	brne	.+2      	; 0x41d0 <DIO_value_type_Get_Pin_Value+0x28>
    41ce:	5e c0       	rjmp	.+188    	; 0x428c <DIO_value_type_Get_Pin_Value+0xe4>
    41d0:	8c 81       	ldd	r24, Y+4	; 0x04
    41d2:	9d 81       	ldd	r25, Y+5	; 0x05
    41d4:	84 30       	cpi	r24, 0x04	; 4
    41d6:	91 05       	cpc	r25, r1
    41d8:	84 f4       	brge	.+32     	; 0x41fa <DIO_value_type_Get_Pin_Value+0x52>
    41da:	2c 81       	ldd	r18, Y+4	; 0x04
    41dc:	3d 81       	ldd	r19, Y+5	; 0x05
    41de:	21 30       	cpi	r18, 0x01	; 1
    41e0:	31 05       	cpc	r19, r1
    41e2:	81 f1       	breq	.+96     	; 0x4244 <DIO_value_type_Get_Pin_Value+0x9c>
    41e4:	4c 81       	ldd	r20, Y+4	; 0x04
    41e6:	5d 81       	ldd	r21, Y+5	; 0x05
    41e8:	42 30       	cpi	r20, 0x02	; 2
    41ea:	51 05       	cpc	r21, r1
    41ec:	0c f0       	brlt	.+2      	; 0x41f0 <DIO_value_type_Get_Pin_Value+0x48>
    41ee:	3c c0       	rjmp	.+120    	; 0x4268 <DIO_value_type_Get_Pin_Value+0xc0>
    41f0:	8c 81       	ldd	r24, Y+4	; 0x04
    41f2:	9d 81       	ldd	r25, Y+5	; 0x05
    41f4:	00 97       	sbiw	r24, 0x00	; 0
    41f6:	a1 f0       	breq	.+40     	; 0x4220 <DIO_value_type_Get_Pin_Value+0x78>
    41f8:	90 c0       	rjmp	.+288    	; 0x431a <DIO_value_type_Get_Pin_Value+0x172>
    41fa:	2c 81       	ldd	r18, Y+4	; 0x04
    41fc:	3d 81       	ldd	r19, Y+5	; 0x05
    41fe:	25 30       	cpi	r18, 0x05	; 5
    4200:	31 05       	cpc	r19, r1
    4202:	09 f4       	brne	.+2      	; 0x4206 <DIO_value_type_Get_Pin_Value+0x5e>
    4204:	67 c0       	rjmp	.+206    	; 0x42d4 <DIO_value_type_Get_Pin_Value+0x12c>
    4206:	4c 81       	ldd	r20, Y+4	; 0x04
    4208:	5d 81       	ldd	r21, Y+5	; 0x05
    420a:	45 30       	cpi	r20, 0x05	; 5
    420c:	51 05       	cpc	r21, r1
    420e:	0c f4       	brge	.+2      	; 0x4212 <DIO_value_type_Get_Pin_Value+0x6a>
    4210:	4f c0       	rjmp	.+158    	; 0x42b0 <DIO_value_type_Get_Pin_Value+0x108>
    4212:	8c 81       	ldd	r24, Y+4	; 0x04
    4214:	9d 81       	ldd	r25, Y+5	; 0x05
    4216:	86 30       	cpi	r24, 0x06	; 6
    4218:	91 05       	cpc	r25, r1
    421a:	09 f4       	brne	.+2      	; 0x421e <DIO_value_type_Get_Pin_Value+0x76>
    421c:	6d c0       	rjmp	.+218    	; 0x42f8 <DIO_value_type_Get_Pin_Value+0x150>
    421e:	7d c0       	rjmp	.+250    	; 0x431a <DIO_value_type_Get_Pin_Value+0x172>
	{
	case PORTA_ID:return_value = GET_BIT(PINA,bit_no);break;
    4220:	e9 e3       	ldi	r30, 0x39	; 57
    4222:	f0 e0       	ldi	r31, 0x00	; 0
    4224:	80 81       	ld	r24, Z
    4226:	28 2f       	mov	r18, r24
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	8b 81       	ldd	r24, Y+3	; 0x03
    422c:	88 2f       	mov	r24, r24
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	a9 01       	movw	r20, r18
    4232:	02 c0       	rjmp	.+4      	; 0x4238 <DIO_value_type_Get_Pin_Value+0x90>
    4234:	55 95       	asr	r21
    4236:	47 95       	ror	r20
    4238:	8a 95       	dec	r24
    423a:	e2 f7       	brpl	.-8      	; 0x4234 <DIO_value_type_Get_Pin_Value+0x8c>
    423c:	ca 01       	movw	r24, r20
    423e:	81 70       	andi	r24, 0x01	; 1
    4240:	89 83       	std	Y+1, r24	; 0x01
    4242:	6b c0       	rjmp	.+214    	; 0x431a <DIO_value_type_Get_Pin_Value+0x172>
	case PORTB_ID:return_value = GET_BIT(PINB,bit_no);break;
    4244:	e6 e3       	ldi	r30, 0x36	; 54
    4246:	f0 e0       	ldi	r31, 0x00	; 0
    4248:	80 81       	ld	r24, Z
    424a:	28 2f       	mov	r18, r24
    424c:	30 e0       	ldi	r19, 0x00	; 0
    424e:	8b 81       	ldd	r24, Y+3	; 0x03
    4250:	88 2f       	mov	r24, r24
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	a9 01       	movw	r20, r18
    4256:	02 c0       	rjmp	.+4      	; 0x425c <DIO_value_type_Get_Pin_Value+0xb4>
    4258:	55 95       	asr	r21
    425a:	47 95       	ror	r20
    425c:	8a 95       	dec	r24
    425e:	e2 f7       	brpl	.-8      	; 0x4258 <DIO_value_type_Get_Pin_Value+0xb0>
    4260:	ca 01       	movw	r24, r20
    4262:	81 70       	andi	r24, 0x01	; 1
    4264:	89 83       	std	Y+1, r24	; 0x01
    4266:	59 c0       	rjmp	.+178    	; 0x431a <DIO_value_type_Get_Pin_Value+0x172>
	case PORTC_ID:return_value = GET_BIT(PINC,bit_no);break;
    4268:	e3 e3       	ldi	r30, 0x33	; 51
    426a:	f0 e0       	ldi	r31, 0x00	; 0
    426c:	80 81       	ld	r24, Z
    426e:	28 2f       	mov	r18, r24
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	8b 81       	ldd	r24, Y+3	; 0x03
    4274:	88 2f       	mov	r24, r24
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	a9 01       	movw	r20, r18
    427a:	02 c0       	rjmp	.+4      	; 0x4280 <DIO_value_type_Get_Pin_Value+0xd8>
    427c:	55 95       	asr	r21
    427e:	47 95       	ror	r20
    4280:	8a 95       	dec	r24
    4282:	e2 f7       	brpl	.-8      	; 0x427c <DIO_value_type_Get_Pin_Value+0xd4>
    4284:	ca 01       	movw	r24, r20
    4286:	81 70       	andi	r24, 0x01	; 1
    4288:	89 83       	std	Y+1, r24	; 0x01
    428a:	47 c0       	rjmp	.+142    	; 0x431a <DIO_value_type_Get_Pin_Value+0x172>
	case PORTD_ID:return_value = GET_BIT(PIND,bit_no);break;
    428c:	e0 e3       	ldi	r30, 0x30	; 48
    428e:	f0 e0       	ldi	r31, 0x00	; 0
    4290:	80 81       	ld	r24, Z
    4292:	28 2f       	mov	r18, r24
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	8b 81       	ldd	r24, Y+3	; 0x03
    4298:	88 2f       	mov	r24, r24
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	a9 01       	movw	r20, r18
    429e:	02 c0       	rjmp	.+4      	; 0x42a4 <DIO_value_type_Get_Pin_Value+0xfc>
    42a0:	55 95       	asr	r21
    42a2:	47 95       	ror	r20
    42a4:	8a 95       	dec	r24
    42a6:	e2 f7       	brpl	.-8      	; 0x42a0 <DIO_value_type_Get_Pin_Value+0xf8>
    42a8:	ca 01       	movw	r24, r20
    42aa:	81 70       	andi	r24, 0x01	; 1
    42ac:	89 83       	std	Y+1, r24	; 0x01
    42ae:	35 c0       	rjmp	.+106    	; 0x431a <DIO_value_type_Get_Pin_Value+0x172>
	case PORTE_ID:return_value = GET_BIT(PINE,bit_no);break;
    42b0:	e1 e2       	ldi	r30, 0x21	; 33
    42b2:	f0 e0       	ldi	r31, 0x00	; 0
    42b4:	80 81       	ld	r24, Z
    42b6:	28 2f       	mov	r18, r24
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	8b 81       	ldd	r24, Y+3	; 0x03
    42bc:	88 2f       	mov	r24, r24
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	a9 01       	movw	r20, r18
    42c2:	02 c0       	rjmp	.+4      	; 0x42c8 <DIO_value_type_Get_Pin_Value+0x120>
    42c4:	55 95       	asr	r21
    42c6:	47 95       	ror	r20
    42c8:	8a 95       	dec	r24
    42ca:	e2 f7       	brpl	.-8      	; 0x42c4 <DIO_value_type_Get_Pin_Value+0x11c>
    42cc:	ca 01       	movw	r24, r20
    42ce:	81 70       	andi	r24, 0x01	; 1
    42d0:	89 83       	std	Y+1, r24	; 0x01
    42d2:	23 c0       	rjmp	.+70     	; 0x431a <DIO_value_type_Get_Pin_Value+0x172>
	case PORTF_ID:return_value = GET_BIT(PINF,bit_no);break;
    42d4:	e0 e2       	ldi	r30, 0x20	; 32
    42d6:	f0 e0       	ldi	r31, 0x00	; 0
    42d8:	80 81       	ld	r24, Z
    42da:	28 2f       	mov	r18, r24
    42dc:	30 e0       	ldi	r19, 0x00	; 0
    42de:	8b 81       	ldd	r24, Y+3	; 0x03
    42e0:	88 2f       	mov	r24, r24
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	a9 01       	movw	r20, r18
    42e6:	02 c0       	rjmp	.+4      	; 0x42ec <DIO_value_type_Get_Pin_Value+0x144>
    42e8:	55 95       	asr	r21
    42ea:	47 95       	ror	r20
    42ec:	8a 95       	dec	r24
    42ee:	e2 f7       	brpl	.-8      	; 0x42e8 <DIO_value_type_Get_Pin_Value+0x140>
    42f0:	ca 01       	movw	r24, r20
    42f2:	81 70       	andi	r24, 0x01	; 1
    42f4:	89 83       	std	Y+1, r24	; 0x01
    42f6:	11 c0       	rjmp	.+34     	; 0x431a <DIO_value_type_Get_Pin_Value+0x172>
	case PORTG_ID:return_value = GET_BIT(PING,bit_no);break;
    42f8:	e3 e6       	ldi	r30, 0x63	; 99
    42fa:	f0 e0       	ldi	r31, 0x00	; 0
    42fc:	80 81       	ld	r24, Z
    42fe:	28 2f       	mov	r18, r24
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	8b 81       	ldd	r24, Y+3	; 0x03
    4304:	88 2f       	mov	r24, r24
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	a9 01       	movw	r20, r18
    430a:	02 c0       	rjmp	.+4      	; 0x4310 <DIO_value_type_Get_Pin_Value+0x168>
    430c:	55 95       	asr	r21
    430e:	47 95       	ror	r20
    4310:	8a 95       	dec	r24
    4312:	e2 f7       	brpl	.-8      	; 0x430c <DIO_value_type_Get_Pin_Value+0x164>
    4314:	ca 01       	movw	r24, r20
    4316:	81 70       	andi	r24, 0x01	; 1
    4318:	89 83       	std	Y+1, r24	; 0x01
	}

	return return_value;
    431a:	89 81       	ldd	r24, Y+1	; 0x01
}
    431c:	0f 90       	pop	r0
    431e:	0f 90       	pop	r0
    4320:	0f 90       	pop	r0
    4322:	0f 90       	pop	r0
    4324:	0f 90       	pop	r0
    4326:	cf 91       	pop	r28
    4328:	df 91       	pop	r29
    432a:	08 95       	ret

0000432c <DIO_void_Set_Port_Dirction>:

void DIO_void_Set_Port_Dirction(port_no_type port_no, uint8 direction)
{
    432c:	df 93       	push	r29
    432e:	cf 93       	push	r28
    4330:	00 d0       	rcall	.+0      	; 0x4332 <DIO_void_Set_Port_Dirction+0x6>
    4332:	00 d0       	rcall	.+0      	; 0x4334 <DIO_void_Set_Port_Dirction+0x8>
    4334:	cd b7       	in	r28, 0x3d	; 61
    4336:	de b7       	in	r29, 0x3e	; 62
    4338:	89 83       	std	Y+1, r24	; 0x01
    433a:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_no)
    433c:	89 81       	ldd	r24, Y+1	; 0x01
    433e:	28 2f       	mov	r18, r24
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	3c 83       	std	Y+4, r19	; 0x04
    4344:	2b 83       	std	Y+3, r18	; 0x03
    4346:	8b 81       	ldd	r24, Y+3	; 0x03
    4348:	9c 81       	ldd	r25, Y+4	; 0x04
    434a:	83 30       	cpi	r24, 0x03	; 3
    434c:	91 05       	cpc	r25, r1
    434e:	99 f1       	breq	.+102    	; 0x43b6 <DIO_void_Set_Port_Dirction+0x8a>
    4350:	2b 81       	ldd	r18, Y+3	; 0x03
    4352:	3c 81       	ldd	r19, Y+4	; 0x04
    4354:	24 30       	cpi	r18, 0x04	; 4
    4356:	31 05       	cpc	r19, r1
    4358:	7c f4       	brge	.+30     	; 0x4378 <DIO_void_Set_Port_Dirction+0x4c>
    435a:	8b 81       	ldd	r24, Y+3	; 0x03
    435c:	9c 81       	ldd	r25, Y+4	; 0x04
    435e:	81 30       	cpi	r24, 0x01	; 1
    4360:	91 05       	cpc	r25, r1
    4362:	f9 f0       	breq	.+62     	; 0x43a2 <DIO_void_Set_Port_Dirction+0x76>
    4364:	2b 81       	ldd	r18, Y+3	; 0x03
    4366:	3c 81       	ldd	r19, Y+4	; 0x04
    4368:	22 30       	cpi	r18, 0x02	; 2
    436a:	31 05       	cpc	r19, r1
    436c:	fc f4       	brge	.+62     	; 0x43ac <DIO_void_Set_Port_Dirction+0x80>
    436e:	8b 81       	ldd	r24, Y+3	; 0x03
    4370:	9c 81       	ldd	r25, Y+4	; 0x04
    4372:	00 97       	sbiw	r24, 0x00	; 0
    4374:	89 f0       	breq	.+34     	; 0x4398 <DIO_void_Set_Port_Dirction+0x6c>
    4376:	32 c0       	rjmp	.+100    	; 0x43dc <DIO_void_Set_Port_Dirction+0xb0>
    4378:	2b 81       	ldd	r18, Y+3	; 0x03
    437a:	3c 81       	ldd	r19, Y+4	; 0x04
    437c:	25 30       	cpi	r18, 0x05	; 5
    437e:	31 05       	cpc	r19, r1
    4380:	21 f1       	breq	.+72     	; 0x43ca <DIO_void_Set_Port_Dirction+0x9e>
    4382:	8b 81       	ldd	r24, Y+3	; 0x03
    4384:	9c 81       	ldd	r25, Y+4	; 0x04
    4386:	85 30       	cpi	r24, 0x05	; 5
    4388:	91 05       	cpc	r25, r1
    438a:	d4 f0       	brlt	.+52     	; 0x43c0 <DIO_void_Set_Port_Dirction+0x94>
    438c:	2b 81       	ldd	r18, Y+3	; 0x03
    438e:	3c 81       	ldd	r19, Y+4	; 0x04
    4390:	26 30       	cpi	r18, 0x06	; 6
    4392:	31 05       	cpc	r19, r1
    4394:	f9 f0       	breq	.+62     	; 0x43d4 <DIO_void_Set_Port_Dirction+0xa8>
    4396:	22 c0       	rjmp	.+68     	; 0x43dc <DIO_void_Set_Port_Dirction+0xb0>
	{
	case PORTA_ID: DDRA = direction; break;
    4398:	ea e3       	ldi	r30, 0x3A	; 58
    439a:	f0 e0       	ldi	r31, 0x00	; 0
    439c:	8a 81       	ldd	r24, Y+2	; 0x02
    439e:	80 83       	st	Z, r24
    43a0:	1d c0       	rjmp	.+58     	; 0x43dc <DIO_void_Set_Port_Dirction+0xb0>
	case PORTB_ID: DDRB = direction; break;
    43a2:	e7 e3       	ldi	r30, 0x37	; 55
    43a4:	f0 e0       	ldi	r31, 0x00	; 0
    43a6:	8a 81       	ldd	r24, Y+2	; 0x02
    43a8:	80 83       	st	Z, r24
    43aa:	18 c0       	rjmp	.+48     	; 0x43dc <DIO_void_Set_Port_Dirction+0xb0>
	case PORTC_ID: DDRC = direction; break;
    43ac:	e4 e3       	ldi	r30, 0x34	; 52
    43ae:	f0 e0       	ldi	r31, 0x00	; 0
    43b0:	8a 81       	ldd	r24, Y+2	; 0x02
    43b2:	80 83       	st	Z, r24
    43b4:	13 c0       	rjmp	.+38     	; 0x43dc <DIO_void_Set_Port_Dirction+0xb0>
	case PORTD_ID: DDRD = direction; break;
    43b6:	e1 e3       	ldi	r30, 0x31	; 49
    43b8:	f0 e0       	ldi	r31, 0x00	; 0
    43ba:	8a 81       	ldd	r24, Y+2	; 0x02
    43bc:	80 83       	st	Z, r24
    43be:	0e c0       	rjmp	.+28     	; 0x43dc <DIO_void_Set_Port_Dirction+0xb0>
	case PORTE_ID: DDRE = direction; break;
    43c0:	e2 e2       	ldi	r30, 0x22	; 34
    43c2:	f0 e0       	ldi	r31, 0x00	; 0
    43c4:	8a 81       	ldd	r24, Y+2	; 0x02
    43c6:	80 83       	st	Z, r24
    43c8:	09 c0       	rjmp	.+18     	; 0x43dc <DIO_void_Set_Port_Dirction+0xb0>
	case PORTF_ID: DDRF = direction; break;
    43ca:	e1 e6       	ldi	r30, 0x61	; 97
    43cc:	f0 e0       	ldi	r31, 0x00	; 0
    43ce:	8a 81       	ldd	r24, Y+2	; 0x02
    43d0:	80 83       	st	Z, r24
    43d2:	04 c0       	rjmp	.+8      	; 0x43dc <DIO_void_Set_Port_Dirction+0xb0>
	case PORTG_ID: DDRG = direction; break;
    43d4:	e4 e6       	ldi	r30, 0x64	; 100
    43d6:	f0 e0       	ldi	r31, 0x00	; 0
    43d8:	8a 81       	ldd	r24, Y+2	; 0x02
    43da:	80 83       	st	Z, r24
	}
}
    43dc:	0f 90       	pop	r0
    43de:	0f 90       	pop	r0
    43e0:	0f 90       	pop	r0
    43e2:	0f 90       	pop	r0
    43e4:	cf 91       	pop	r28
    43e6:	df 91       	pop	r29
    43e8:	08 95       	ret

000043ea <DIO_void_Set_Port_Value>:

void DIO_void_Set_Port_Value(port_no_type port_no, uint8 value)
{
    43ea:	df 93       	push	r29
    43ec:	cf 93       	push	r28
    43ee:	00 d0       	rcall	.+0      	; 0x43f0 <DIO_void_Set_Port_Value+0x6>
    43f0:	00 d0       	rcall	.+0      	; 0x43f2 <DIO_void_Set_Port_Value+0x8>
    43f2:	cd b7       	in	r28, 0x3d	; 61
    43f4:	de b7       	in	r29, 0x3e	; 62
    43f6:	89 83       	std	Y+1, r24	; 0x01
    43f8:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_no)
    43fa:	89 81       	ldd	r24, Y+1	; 0x01
    43fc:	28 2f       	mov	r18, r24
    43fe:	30 e0       	ldi	r19, 0x00	; 0
    4400:	3c 83       	std	Y+4, r19	; 0x04
    4402:	2b 83       	std	Y+3, r18	; 0x03
    4404:	8b 81       	ldd	r24, Y+3	; 0x03
    4406:	9c 81       	ldd	r25, Y+4	; 0x04
    4408:	83 30       	cpi	r24, 0x03	; 3
    440a:	91 05       	cpc	r25, r1
    440c:	99 f1       	breq	.+102    	; 0x4474 <DIO_void_Set_Port_Value+0x8a>
    440e:	2b 81       	ldd	r18, Y+3	; 0x03
    4410:	3c 81       	ldd	r19, Y+4	; 0x04
    4412:	24 30       	cpi	r18, 0x04	; 4
    4414:	31 05       	cpc	r19, r1
    4416:	7c f4       	brge	.+30     	; 0x4436 <DIO_void_Set_Port_Value+0x4c>
    4418:	8b 81       	ldd	r24, Y+3	; 0x03
    441a:	9c 81       	ldd	r25, Y+4	; 0x04
    441c:	81 30       	cpi	r24, 0x01	; 1
    441e:	91 05       	cpc	r25, r1
    4420:	f9 f0       	breq	.+62     	; 0x4460 <DIO_void_Set_Port_Value+0x76>
    4422:	2b 81       	ldd	r18, Y+3	; 0x03
    4424:	3c 81       	ldd	r19, Y+4	; 0x04
    4426:	22 30       	cpi	r18, 0x02	; 2
    4428:	31 05       	cpc	r19, r1
    442a:	fc f4       	brge	.+62     	; 0x446a <DIO_void_Set_Port_Value+0x80>
    442c:	8b 81       	ldd	r24, Y+3	; 0x03
    442e:	9c 81       	ldd	r25, Y+4	; 0x04
    4430:	00 97       	sbiw	r24, 0x00	; 0
    4432:	89 f0       	breq	.+34     	; 0x4456 <DIO_void_Set_Port_Value+0x6c>
    4434:	32 c0       	rjmp	.+100    	; 0x449a <DIO_void_Set_Port_Value+0xb0>
    4436:	2b 81       	ldd	r18, Y+3	; 0x03
    4438:	3c 81       	ldd	r19, Y+4	; 0x04
    443a:	25 30       	cpi	r18, 0x05	; 5
    443c:	31 05       	cpc	r19, r1
    443e:	21 f1       	breq	.+72     	; 0x4488 <DIO_void_Set_Port_Value+0x9e>
    4440:	8b 81       	ldd	r24, Y+3	; 0x03
    4442:	9c 81       	ldd	r25, Y+4	; 0x04
    4444:	85 30       	cpi	r24, 0x05	; 5
    4446:	91 05       	cpc	r25, r1
    4448:	d4 f0       	brlt	.+52     	; 0x447e <DIO_void_Set_Port_Value+0x94>
    444a:	2b 81       	ldd	r18, Y+3	; 0x03
    444c:	3c 81       	ldd	r19, Y+4	; 0x04
    444e:	26 30       	cpi	r18, 0x06	; 6
    4450:	31 05       	cpc	r19, r1
    4452:	f9 f0       	breq	.+62     	; 0x4492 <DIO_void_Set_Port_Value+0xa8>
    4454:	22 c0       	rjmp	.+68     	; 0x449a <DIO_void_Set_Port_Value+0xb0>
	{
	case PORTA_ID: PORTA = value; break;
    4456:	eb e3       	ldi	r30, 0x3B	; 59
    4458:	f0 e0       	ldi	r31, 0x00	; 0
    445a:	8a 81       	ldd	r24, Y+2	; 0x02
    445c:	80 83       	st	Z, r24
    445e:	1d c0       	rjmp	.+58     	; 0x449a <DIO_void_Set_Port_Value+0xb0>
	case PORTB_ID: PORTB = value; break;
    4460:	e8 e3       	ldi	r30, 0x38	; 56
    4462:	f0 e0       	ldi	r31, 0x00	; 0
    4464:	8a 81       	ldd	r24, Y+2	; 0x02
    4466:	80 83       	st	Z, r24
    4468:	18 c0       	rjmp	.+48     	; 0x449a <DIO_void_Set_Port_Value+0xb0>
	case PORTC_ID: PORTC = value; break;
    446a:	e5 e3       	ldi	r30, 0x35	; 53
    446c:	f0 e0       	ldi	r31, 0x00	; 0
    446e:	8a 81       	ldd	r24, Y+2	; 0x02
    4470:	80 83       	st	Z, r24
    4472:	13 c0       	rjmp	.+38     	; 0x449a <DIO_void_Set_Port_Value+0xb0>
	case PORTD_ID: PORTD = value; break;
    4474:	e2 e3       	ldi	r30, 0x32	; 50
    4476:	f0 e0       	ldi	r31, 0x00	; 0
    4478:	8a 81       	ldd	r24, Y+2	; 0x02
    447a:	80 83       	st	Z, r24
    447c:	0e c0       	rjmp	.+28     	; 0x449a <DIO_void_Set_Port_Value+0xb0>
	case PORTE_ID: PORTE = value; break;
    447e:	e3 e2       	ldi	r30, 0x23	; 35
    4480:	f0 e0       	ldi	r31, 0x00	; 0
    4482:	8a 81       	ldd	r24, Y+2	; 0x02
    4484:	80 83       	st	Z, r24
    4486:	09 c0       	rjmp	.+18     	; 0x449a <DIO_void_Set_Port_Value+0xb0>
	case PORTF_ID: PORTF = value; break;
    4488:	e2 e6       	ldi	r30, 0x62	; 98
    448a:	f0 e0       	ldi	r31, 0x00	; 0
    448c:	8a 81       	ldd	r24, Y+2	; 0x02
    448e:	80 83       	st	Z, r24
    4490:	04 c0       	rjmp	.+8      	; 0x449a <DIO_void_Set_Port_Value+0xb0>
	case PORTG_ID: PORTG = value; break;
    4492:	e5 e6       	ldi	r30, 0x65	; 101
    4494:	f0 e0       	ldi	r31, 0x00	; 0
    4496:	8a 81       	ldd	r24, Y+2	; 0x02
    4498:	80 83       	st	Z, r24
	}
}
    449a:	0f 90       	pop	r0
    449c:	0f 90       	pop	r0
    449e:	0f 90       	pop	r0
    44a0:	0f 90       	pop	r0
    44a2:	cf 91       	pop	r28
    44a4:	df 91       	pop	r29
    44a6:	08 95       	ret

000044a8 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L>:

void DIO_void_Set_Port_ValueNIPPLE_H_OR_L(port_no_type port_no, uint8 value,NIPPLE_H_OR_L_type nipple)
{
    44a8:	df 93       	push	r29
    44aa:	cf 93       	push	r28
    44ac:	cd b7       	in	r28, 0x3d	; 61
    44ae:	de b7       	in	r29, 0x3e	; 62
    44b0:	27 97       	sbiw	r28, 0x07	; 7
    44b2:	0f b6       	in	r0, 0x3f	; 63
    44b4:	f8 94       	cli
    44b6:	de bf       	out	0x3e, r29	; 62
    44b8:	0f be       	out	0x3f, r0	; 63
    44ba:	cd bf       	out	0x3d, r28	; 61
    44bc:	89 83       	std	Y+1, r24	; 0x01
    44be:	6a 83       	std	Y+2, r22	; 0x02
    44c0:	4b 83       	std	Y+3, r20	; 0x03
	if(nipple==NIPPLEL)
    44c2:	8b 81       	ldd	r24, Y+3	; 0x03
    44c4:	88 23       	and	r24, r24
    44c6:	09 f0       	breq	.+2      	; 0x44ca <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x22>
    44c8:	85 c0       	rjmp	.+266    	; 0x45d4 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x12c>
	{
		switch(port_no)
    44ca:	89 81       	ldd	r24, Y+1	; 0x01
    44cc:	28 2f       	mov	r18, r24
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	3f 83       	std	Y+7, r19	; 0x07
    44d2:	2e 83       	std	Y+6, r18	; 0x06
    44d4:	8e 81       	ldd	r24, Y+6	; 0x06
    44d6:	9f 81       	ldd	r25, Y+7	; 0x07
    44d8:	83 30       	cpi	r24, 0x03	; 3
    44da:	91 05       	cpc	r25, r1
    44dc:	09 f4       	brne	.+2      	; 0x44e0 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x38>
    44de:	4a c0       	rjmp	.+148    	; 0x4574 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0xcc>
    44e0:	2e 81       	ldd	r18, Y+6	; 0x06
    44e2:	3f 81       	ldd	r19, Y+7	; 0x07
    44e4:	24 30       	cpi	r18, 0x04	; 4
    44e6:	31 05       	cpc	r19, r1
    44e8:	7c f4       	brge	.+30     	; 0x4508 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x60>
    44ea:	8e 81       	ldd	r24, Y+6	; 0x06
    44ec:	9f 81       	ldd	r25, Y+7	; 0x07
    44ee:	81 30       	cpi	r24, 0x01	; 1
    44f0:	91 05       	cpc	r25, r1
    44f2:	41 f1       	breq	.+80     	; 0x4544 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x9c>
    44f4:	2e 81       	ldd	r18, Y+6	; 0x06
    44f6:	3f 81       	ldd	r19, Y+7	; 0x07
    44f8:	22 30       	cpi	r18, 0x02	; 2
    44fa:	31 05       	cpc	r19, r1
    44fc:	7c f5       	brge	.+94     	; 0x455c <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0xb4>
    44fe:	8e 81       	ldd	r24, Y+6	; 0x06
    4500:	9f 81       	ldd	r25, Y+7	; 0x07
    4502:	00 97       	sbiw	r24, 0x00	; 0
    4504:	99 f0       	breq	.+38     	; 0x452c <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x84>
    4506:	da c0       	rjmp	.+436    	; 0x46bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
    4508:	2e 81       	ldd	r18, Y+6	; 0x06
    450a:	3f 81       	ldd	r19, Y+7	; 0x07
    450c:	25 30       	cpi	r18, 0x05	; 5
    450e:	31 05       	cpc	r19, r1
    4510:	09 f4       	brne	.+2      	; 0x4514 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x6c>
    4512:	48 c0       	rjmp	.+144    	; 0x45a4 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0xfc>
    4514:	8e 81       	ldd	r24, Y+6	; 0x06
    4516:	9f 81       	ldd	r25, Y+7	; 0x07
    4518:	85 30       	cpi	r24, 0x05	; 5
    451a:	91 05       	cpc	r25, r1
    451c:	bc f1       	brlt	.+110    	; 0x458c <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0xe4>
    451e:	2e 81       	ldd	r18, Y+6	; 0x06
    4520:	3f 81       	ldd	r19, Y+7	; 0x07
    4522:	26 30       	cpi	r18, 0x06	; 6
    4524:	31 05       	cpc	r19, r1
    4526:	09 f4       	brne	.+2      	; 0x452a <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x82>
    4528:	49 c0       	rjmp	.+146    	; 0x45bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x114>
    452a:	c8 c0       	rjmp	.+400    	; 0x46bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			{
			case PORTA_ID: ASSIGN_NippleL(PORTA,value); break;
    452c:	ab e3       	ldi	r26, 0x3B	; 59
    452e:	b0 e0       	ldi	r27, 0x00	; 0
    4530:	eb e3       	ldi	r30, 0x3B	; 59
    4532:	f0 e0       	ldi	r31, 0x00	; 0
    4534:	80 81       	ld	r24, Z
    4536:	98 2f       	mov	r25, r24
    4538:	90 7f       	andi	r25, 0xF0	; 240
    453a:	8a 81       	ldd	r24, Y+2	; 0x02
    453c:	8f 70       	andi	r24, 0x0F	; 15
    453e:	89 2b       	or	r24, r25
    4540:	8c 93       	st	X, r24
    4542:	bc c0       	rjmp	.+376    	; 0x46bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTB_ID: ASSIGN_NippleL(PORTB,value);break;
    4544:	a8 e3       	ldi	r26, 0x38	; 56
    4546:	b0 e0       	ldi	r27, 0x00	; 0
    4548:	e8 e3       	ldi	r30, 0x38	; 56
    454a:	f0 e0       	ldi	r31, 0x00	; 0
    454c:	80 81       	ld	r24, Z
    454e:	98 2f       	mov	r25, r24
    4550:	90 7f       	andi	r25, 0xF0	; 240
    4552:	8a 81       	ldd	r24, Y+2	; 0x02
    4554:	8f 70       	andi	r24, 0x0F	; 15
    4556:	89 2b       	or	r24, r25
    4558:	8c 93       	st	X, r24
    455a:	b0 c0       	rjmp	.+352    	; 0x46bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTC_ID: ASSIGN_NippleL(PORTC,value); break;
    455c:	a5 e3       	ldi	r26, 0x35	; 53
    455e:	b0 e0       	ldi	r27, 0x00	; 0
    4560:	e5 e3       	ldi	r30, 0x35	; 53
    4562:	f0 e0       	ldi	r31, 0x00	; 0
    4564:	80 81       	ld	r24, Z
    4566:	98 2f       	mov	r25, r24
    4568:	90 7f       	andi	r25, 0xF0	; 240
    456a:	8a 81       	ldd	r24, Y+2	; 0x02
    456c:	8f 70       	andi	r24, 0x0F	; 15
    456e:	89 2b       	or	r24, r25
    4570:	8c 93       	st	X, r24
    4572:	a4 c0       	rjmp	.+328    	; 0x46bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTD_ID: ASSIGN_NippleL(PORTD,value); break;
    4574:	a2 e3       	ldi	r26, 0x32	; 50
    4576:	b0 e0       	ldi	r27, 0x00	; 0
    4578:	e2 e3       	ldi	r30, 0x32	; 50
    457a:	f0 e0       	ldi	r31, 0x00	; 0
    457c:	80 81       	ld	r24, Z
    457e:	98 2f       	mov	r25, r24
    4580:	90 7f       	andi	r25, 0xF0	; 240
    4582:	8a 81       	ldd	r24, Y+2	; 0x02
    4584:	8f 70       	andi	r24, 0x0F	; 15
    4586:	89 2b       	or	r24, r25
    4588:	8c 93       	st	X, r24
    458a:	98 c0       	rjmp	.+304    	; 0x46bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTE_ID: ASSIGN_NippleL(PORTE,value); break;
    458c:	a3 e2       	ldi	r26, 0x23	; 35
    458e:	b0 e0       	ldi	r27, 0x00	; 0
    4590:	e3 e2       	ldi	r30, 0x23	; 35
    4592:	f0 e0       	ldi	r31, 0x00	; 0
    4594:	80 81       	ld	r24, Z
    4596:	98 2f       	mov	r25, r24
    4598:	90 7f       	andi	r25, 0xF0	; 240
    459a:	8a 81       	ldd	r24, Y+2	; 0x02
    459c:	8f 70       	andi	r24, 0x0F	; 15
    459e:	89 2b       	or	r24, r25
    45a0:	8c 93       	st	X, r24
    45a2:	8c c0       	rjmp	.+280    	; 0x46bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTF_ID: ASSIGN_NippleL(PORTF,value); break;
    45a4:	a2 e6       	ldi	r26, 0x62	; 98
    45a6:	b0 e0       	ldi	r27, 0x00	; 0
    45a8:	e2 e6       	ldi	r30, 0x62	; 98
    45aa:	f0 e0       	ldi	r31, 0x00	; 0
    45ac:	80 81       	ld	r24, Z
    45ae:	98 2f       	mov	r25, r24
    45b0:	90 7f       	andi	r25, 0xF0	; 240
    45b2:	8a 81       	ldd	r24, Y+2	; 0x02
    45b4:	8f 70       	andi	r24, 0x0F	; 15
    45b6:	89 2b       	or	r24, r25
    45b8:	8c 93       	st	X, r24
    45ba:	80 c0       	rjmp	.+256    	; 0x46bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			case PORTG_ID: ASSIGN_NippleL(PORTG,value); break;
    45bc:	a5 e6       	ldi	r26, 0x65	; 101
    45be:	b0 e0       	ldi	r27, 0x00	; 0
    45c0:	e5 e6       	ldi	r30, 0x65	; 101
    45c2:	f0 e0       	ldi	r31, 0x00	; 0
    45c4:	80 81       	ld	r24, Z
    45c6:	98 2f       	mov	r25, r24
    45c8:	90 7f       	andi	r25, 0xF0	; 240
    45ca:	8a 81       	ldd	r24, Y+2	; 0x02
    45cc:	8f 70       	andi	r24, 0x0F	; 15
    45ce:	89 2b       	or	r24, r25
    45d0:	8c 93       	st	X, r24
    45d2:	74 c0       	rjmp	.+232    	; 0x46bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
			}
	}
	else if(nipple==NIPPLEH)
    45d4:	8b 81       	ldd	r24, Y+3	; 0x03
    45d6:	81 30       	cpi	r24, 0x01	; 1
    45d8:	09 f0       	breq	.+2      	; 0x45dc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x134>
    45da:	70 c0       	rjmp	.+224    	; 0x46bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
	{
		switch(port_no)
    45dc:	89 81       	ldd	r24, Y+1	; 0x01
    45de:	28 2f       	mov	r18, r24
    45e0:	30 e0       	ldi	r19, 0x00	; 0
    45e2:	3d 83       	std	Y+5, r19	; 0x05
    45e4:	2c 83       	std	Y+4, r18	; 0x04
    45e6:	8c 81       	ldd	r24, Y+4	; 0x04
    45e8:	9d 81       	ldd	r25, Y+5	; 0x05
    45ea:	82 30       	cpi	r24, 0x02	; 2
    45ec:	91 05       	cpc	r25, r1
    45ee:	b9 f1       	breq	.+110    	; 0x465e <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x1b6>
    45f0:	2c 81       	ldd	r18, Y+4	; 0x04
    45f2:	3d 81       	ldd	r19, Y+5	; 0x05
    45f4:	23 30       	cpi	r18, 0x03	; 3
    45f6:	31 05       	cpc	r19, r1
    45f8:	54 f4       	brge	.+20     	; 0x460e <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x166>
    45fa:	8c 81       	ldd	r24, Y+4	; 0x04
    45fc:	9d 81       	ldd	r25, Y+5	; 0x05
    45fe:	00 97       	sbiw	r24, 0x00	; 0
    4600:	b1 f0       	breq	.+44     	; 0x462e <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x186>
    4602:	2c 81       	ldd	r18, Y+4	; 0x04
    4604:	3d 81       	ldd	r19, Y+5	; 0x05
    4606:	21 30       	cpi	r18, 0x01	; 1
    4608:	31 05       	cpc	r19, r1
    460a:	e9 f0       	breq	.+58     	; 0x4646 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x19e>
    460c:	57 c0       	rjmp	.+174    	; 0x46bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
    460e:	8c 81       	ldd	r24, Y+4	; 0x04
    4610:	9d 81       	ldd	r25, Y+5	; 0x05
    4612:	84 30       	cpi	r24, 0x04	; 4
    4614:	91 05       	cpc	r25, r1
    4616:	d9 f1       	breq	.+118    	; 0x468e <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x1e6>
    4618:	2c 81       	ldd	r18, Y+4	; 0x04
    461a:	3d 81       	ldd	r19, Y+5	; 0x05
    461c:	24 30       	cpi	r18, 0x04	; 4
    461e:	31 05       	cpc	r19, r1
    4620:	54 f1       	brlt	.+84     	; 0x4676 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x1ce>
    4622:	8c 81       	ldd	r24, Y+4	; 0x04
    4624:	9d 81       	ldd	r25, Y+5	; 0x05
    4626:	85 30       	cpi	r24, 0x05	; 5
    4628:	91 05       	cpc	r25, r1
    462a:	e9 f1       	breq	.+122    	; 0x46a6 <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x1fe>
    462c:	47 c0       	rjmp	.+142    	; 0x46bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					{
					case PORTA_ID: ASSIGN_NippleH(PORTA,value); break;
    462e:	ab e3       	ldi	r26, 0x3B	; 59
    4630:	b0 e0       	ldi	r27, 0x00	; 0
    4632:	eb e3       	ldi	r30, 0x3B	; 59
    4634:	f0 e0       	ldi	r31, 0x00	; 0
    4636:	80 81       	ld	r24, Z
    4638:	98 2f       	mov	r25, r24
    463a:	9f 70       	andi	r25, 0x0F	; 15
    463c:	8a 81       	ldd	r24, Y+2	; 0x02
    463e:	80 7f       	andi	r24, 0xF0	; 240
    4640:	89 2b       	or	r24, r25
    4642:	8c 93       	st	X, r24
    4644:	3b c0       	rjmp	.+118    	; 0x46bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					case PORTB_ID: ASSIGN_NippleH(PORTB,value);break;
    4646:	a8 e3       	ldi	r26, 0x38	; 56
    4648:	b0 e0       	ldi	r27, 0x00	; 0
    464a:	e8 e3       	ldi	r30, 0x38	; 56
    464c:	f0 e0       	ldi	r31, 0x00	; 0
    464e:	80 81       	ld	r24, Z
    4650:	98 2f       	mov	r25, r24
    4652:	9f 70       	andi	r25, 0x0F	; 15
    4654:	8a 81       	ldd	r24, Y+2	; 0x02
    4656:	80 7f       	andi	r24, 0xF0	; 240
    4658:	89 2b       	or	r24, r25
    465a:	8c 93       	st	X, r24
    465c:	2f c0       	rjmp	.+94     	; 0x46bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					case PORTC_ID: ASSIGN_NippleH(PORTC,value); break;
    465e:	a5 e3       	ldi	r26, 0x35	; 53
    4660:	b0 e0       	ldi	r27, 0x00	; 0
    4662:	e5 e3       	ldi	r30, 0x35	; 53
    4664:	f0 e0       	ldi	r31, 0x00	; 0
    4666:	80 81       	ld	r24, Z
    4668:	98 2f       	mov	r25, r24
    466a:	9f 70       	andi	r25, 0x0F	; 15
    466c:	8a 81       	ldd	r24, Y+2	; 0x02
    466e:	80 7f       	andi	r24, 0xF0	; 240
    4670:	89 2b       	or	r24, r25
    4672:	8c 93       	st	X, r24
    4674:	23 c0       	rjmp	.+70     	; 0x46bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					case PORTD_ID: ASSIGN_NippleH(PORTD,value); break;
    4676:	a2 e3       	ldi	r26, 0x32	; 50
    4678:	b0 e0       	ldi	r27, 0x00	; 0
    467a:	e2 e3       	ldi	r30, 0x32	; 50
    467c:	f0 e0       	ldi	r31, 0x00	; 0
    467e:	80 81       	ld	r24, Z
    4680:	98 2f       	mov	r25, r24
    4682:	9f 70       	andi	r25, 0x0F	; 15
    4684:	8a 81       	ldd	r24, Y+2	; 0x02
    4686:	80 7f       	andi	r24, 0xF0	; 240
    4688:	89 2b       	or	r24, r25
    468a:	8c 93       	st	X, r24
    468c:	17 c0       	rjmp	.+46     	; 0x46bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					case PORTE_ID: ASSIGN_NippleH(PORTE,value); break;
    468e:	a3 e2       	ldi	r26, 0x23	; 35
    4690:	b0 e0       	ldi	r27, 0x00	; 0
    4692:	e3 e2       	ldi	r30, 0x23	; 35
    4694:	f0 e0       	ldi	r31, 0x00	; 0
    4696:	80 81       	ld	r24, Z
    4698:	98 2f       	mov	r25, r24
    469a:	9f 70       	andi	r25, 0x0F	; 15
    469c:	8a 81       	ldd	r24, Y+2	; 0x02
    469e:	80 7f       	andi	r24, 0xF0	; 240
    46a0:	89 2b       	or	r24, r25
    46a2:	8c 93       	st	X, r24
    46a4:	0b c0       	rjmp	.+22     	; 0x46bc <DIO_void_Set_Port_ValueNIPPLE_H_OR_L+0x214>
					case PORTF_ID: ASSIGN_NippleH(PORTF,value); break;
    46a6:	a2 e6       	ldi	r26, 0x62	; 98
    46a8:	b0 e0       	ldi	r27, 0x00	; 0
    46aa:	e2 e6       	ldi	r30, 0x62	; 98
    46ac:	f0 e0       	ldi	r31, 0x00	; 0
    46ae:	80 81       	ld	r24, Z
    46b0:	98 2f       	mov	r25, r24
    46b2:	9f 70       	andi	r25, 0x0F	; 15
    46b4:	8a 81       	ldd	r24, Y+2	; 0x02
    46b6:	80 7f       	andi	r24, 0xF0	; 240
    46b8:	89 2b       	or	r24, r25
    46ba:	8c 93       	st	X, r24
					case PORTG_ID:break;
					}
	}
}
    46bc:	27 96       	adiw	r28, 0x07	; 7
    46be:	0f b6       	in	r0, 0x3f	; 63
    46c0:	f8 94       	cli
    46c2:	de bf       	out	0x3e, r29	; 62
    46c4:	0f be       	out	0x3f, r0	; 63
    46c6:	cd bf       	out	0x3d, r28	; 61
    46c8:	cf 91       	pop	r28
    46ca:	df 91       	pop	r29
    46cc:	08 95       	ret

000046ce <DIO_uint8_Get_Port_Value>:
uint8 DIO_uint8_Get_Port_Value(port_no_type port_no)
{
    46ce:	df 93       	push	r29
    46d0:	cf 93       	push	r28
    46d2:	00 d0       	rcall	.+0      	; 0x46d4 <DIO_uint8_Get_Port_Value+0x6>
    46d4:	00 d0       	rcall	.+0      	; 0x46d6 <DIO_uint8_Get_Port_Value+0x8>
    46d6:	cd b7       	in	r28, 0x3d	; 61
    46d8:	de b7       	in	r29, 0x3e	; 62
    46da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 return_value=0;
    46dc:	19 82       	std	Y+1, r1	; 0x01
	switch(port_no)
    46de:	8a 81       	ldd	r24, Y+2	; 0x02
    46e0:	28 2f       	mov	r18, r24
    46e2:	30 e0       	ldi	r19, 0x00	; 0
    46e4:	3c 83       	std	Y+4, r19	; 0x04
    46e6:	2b 83       	std	Y+3, r18	; 0x03
    46e8:	8b 81       	ldd	r24, Y+3	; 0x03
    46ea:	9c 81       	ldd	r25, Y+4	; 0x04
    46ec:	83 30       	cpi	r24, 0x03	; 3
    46ee:	91 05       	cpc	r25, r1
    46f0:	99 f1       	breq	.+102    	; 0x4758 <DIO_uint8_Get_Port_Value+0x8a>
    46f2:	2b 81       	ldd	r18, Y+3	; 0x03
    46f4:	3c 81       	ldd	r19, Y+4	; 0x04
    46f6:	24 30       	cpi	r18, 0x04	; 4
    46f8:	31 05       	cpc	r19, r1
    46fa:	7c f4       	brge	.+30     	; 0x471a <DIO_uint8_Get_Port_Value+0x4c>
    46fc:	8b 81       	ldd	r24, Y+3	; 0x03
    46fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4700:	81 30       	cpi	r24, 0x01	; 1
    4702:	91 05       	cpc	r25, r1
    4704:	f9 f0       	breq	.+62     	; 0x4744 <DIO_uint8_Get_Port_Value+0x76>
    4706:	2b 81       	ldd	r18, Y+3	; 0x03
    4708:	3c 81       	ldd	r19, Y+4	; 0x04
    470a:	22 30       	cpi	r18, 0x02	; 2
    470c:	31 05       	cpc	r19, r1
    470e:	fc f4       	brge	.+62     	; 0x474e <DIO_uint8_Get_Port_Value+0x80>
    4710:	8b 81       	ldd	r24, Y+3	; 0x03
    4712:	9c 81       	ldd	r25, Y+4	; 0x04
    4714:	00 97       	sbiw	r24, 0x00	; 0
    4716:	89 f0       	breq	.+34     	; 0x473a <DIO_uint8_Get_Port_Value+0x6c>
    4718:	32 c0       	rjmp	.+100    	; 0x477e <DIO_uint8_Get_Port_Value+0xb0>
    471a:	2b 81       	ldd	r18, Y+3	; 0x03
    471c:	3c 81       	ldd	r19, Y+4	; 0x04
    471e:	25 30       	cpi	r18, 0x05	; 5
    4720:	31 05       	cpc	r19, r1
    4722:	21 f1       	breq	.+72     	; 0x476c <DIO_uint8_Get_Port_Value+0x9e>
    4724:	8b 81       	ldd	r24, Y+3	; 0x03
    4726:	9c 81       	ldd	r25, Y+4	; 0x04
    4728:	85 30       	cpi	r24, 0x05	; 5
    472a:	91 05       	cpc	r25, r1
    472c:	d4 f0       	brlt	.+52     	; 0x4762 <DIO_uint8_Get_Port_Value+0x94>
    472e:	2b 81       	ldd	r18, Y+3	; 0x03
    4730:	3c 81       	ldd	r19, Y+4	; 0x04
    4732:	26 30       	cpi	r18, 0x06	; 6
    4734:	31 05       	cpc	r19, r1
    4736:	f9 f0       	breq	.+62     	; 0x4776 <DIO_uint8_Get_Port_Value+0xa8>
    4738:	22 c0       	rjmp	.+68     	; 0x477e <DIO_uint8_Get_Port_Value+0xb0>
	{
	case PORTA_ID:return_value =PINA;break;
    473a:	e9 e3       	ldi	r30, 0x39	; 57
    473c:	f0 e0       	ldi	r31, 0x00	; 0
    473e:	80 81       	ld	r24, Z
    4740:	89 83       	std	Y+1, r24	; 0x01
    4742:	1d c0       	rjmp	.+58     	; 0x477e <DIO_uint8_Get_Port_Value+0xb0>
	case PORTB_ID:return_value =PINB;break;
    4744:	e6 e3       	ldi	r30, 0x36	; 54
    4746:	f0 e0       	ldi	r31, 0x00	; 0
    4748:	80 81       	ld	r24, Z
    474a:	89 83       	std	Y+1, r24	; 0x01
    474c:	18 c0       	rjmp	.+48     	; 0x477e <DIO_uint8_Get_Port_Value+0xb0>
	case PORTC_ID:return_value =PINC;break;
    474e:	e3 e3       	ldi	r30, 0x33	; 51
    4750:	f0 e0       	ldi	r31, 0x00	; 0
    4752:	80 81       	ld	r24, Z
    4754:	89 83       	std	Y+1, r24	; 0x01
    4756:	13 c0       	rjmp	.+38     	; 0x477e <DIO_uint8_Get_Port_Value+0xb0>
	case PORTD_ID:return_value =PIND;break;
    4758:	e0 e3       	ldi	r30, 0x30	; 48
    475a:	f0 e0       	ldi	r31, 0x00	; 0
    475c:	80 81       	ld	r24, Z
    475e:	89 83       	std	Y+1, r24	; 0x01
    4760:	0e c0       	rjmp	.+28     	; 0x477e <DIO_uint8_Get_Port_Value+0xb0>
	case PORTE_ID:return_value =PINE;break;
    4762:	e1 e2       	ldi	r30, 0x21	; 33
    4764:	f0 e0       	ldi	r31, 0x00	; 0
    4766:	80 81       	ld	r24, Z
    4768:	89 83       	std	Y+1, r24	; 0x01
    476a:	09 c0       	rjmp	.+18     	; 0x477e <DIO_uint8_Get_Port_Value+0xb0>
	case PORTF_ID:return_value =PINF;break;
    476c:	e0 e2       	ldi	r30, 0x20	; 32
    476e:	f0 e0       	ldi	r31, 0x00	; 0
    4770:	80 81       	ld	r24, Z
    4772:	89 83       	std	Y+1, r24	; 0x01
    4774:	04 c0       	rjmp	.+8      	; 0x477e <DIO_uint8_Get_Port_Value+0xb0>
	case PORTG_ID:return_value =PING;break;
    4776:	e3 e6       	ldi	r30, 0x63	; 99
    4778:	f0 e0       	ldi	r31, 0x00	; 0
    477a:	80 81       	ld	r24, Z
    477c:	89 83       	std	Y+1, r24	; 0x01
	}

	return return_value;
    477e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4780:	0f 90       	pop	r0
    4782:	0f 90       	pop	r0
    4784:	0f 90       	pop	r0
    4786:	0f 90       	pop	r0
    4788:	cf 91       	pop	r28
    478a:	df 91       	pop	r29
    478c:	08 95       	ret

0000478e <Ultrasonic_init>:
#include"ULTRASONIC.h"
volatile uint8 f=0,c=0;
volatile uint16 t1=0,t2=0;

void Ultrasonic_init(void)
{
    478e:	df 93       	push	r29
    4790:	cf 93       	push	r28
    4792:	cd b7       	in	r28, 0x3d	; 61
    4794:	de b7       	in	r29, 0x3e	; 62
	DIO_void_Set_Pin_Dirction(trig_port,trig0,OUTPUT);
    4796:	80 e0       	ldi	r24, 0x00	; 0
    4798:	60 e0       	ldi	r22, 0x00	; 0
    479a:	41 e0       	ldi	r20, 0x01	; 1
    479c:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <DIO_void_Set_Pin_Dirction>
	DIO_void_Set_Pin_Dirction(trig_port,trig1,OUTPUT);
    47a0:	80 e0       	ldi	r24, 0x00	; 0
    47a2:	61 e0       	ldi	r22, 0x01	; 1
    47a4:	41 e0       	ldi	r20, 0x01	; 1
    47a6:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <DIO_void_Set_Pin_Dirction>
	DIO_void_Set_Pin_Dirction(trig_port,trig2,OUTPUT);
    47aa:	80 e0       	ldi	r24, 0x00	; 0
    47ac:	63 e0       	ldi	r22, 0x03	; 3
    47ae:	41 e0       	ldi	r20, 0x01	; 1
    47b0:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <DIO_void_Set_Pin_Dirction>
	DIO_void_Set_Pin_Dirction(trig_port,trig3,OUTPUT);
    47b4:	80 e0       	ldi	r24, 0x00	; 0
    47b6:	64 e0       	ldi	r22, 0x04	; 4
    47b8:	41 e0       	ldi	r20, 0x01	; 1
    47ba:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <DIO_void_Set_Pin_Dirction>
	DIO_void_Set_Pin_Dirction(trig_port,trig4,OUTPUT);
    47be:	80 e0       	ldi	r24, 0x00	; 0
    47c0:	65 e0       	ldi	r22, 0x05	; 5
    47c2:	41 e0       	ldi	r20, 0x01	; 1
    47c4:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <DIO_void_Set_Pin_Dirction>
	//TRY TO PUT ICU PIN INPUT
	Timer1_Init(timer1_Normal_mode,timer_scale_8,disconnected_1,disconnected_channel);
    47c8:	80 e0       	ldi	r24, 0x00	; 0
    47ca:	62 e0       	ldi	r22, 0x02	; 2
    47cc:	40 e0       	ldi	r20, 0x00	; 0
    47ce:	20 e0       	ldi	r18, 0x00	; 0
    47d0:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <Timer1_Init>
	Timer1_OV_InterruptEnable();
    47d4:	0e 94 4b 1b 	call	0x3696	; 0x3696 <Timer1_OV_InterruptEnable>
}
    47d8:	cf 91       	pop	r28
    47da:	df 91       	pop	r29
    47dc:	08 95       	ret

000047de <Ultrasonic_front_Get_Distance>:
uint32 Ultrasonic_front_Get_Distance(void)
{
    47de:	df 93       	push	r29
    47e0:	cf 93       	push	r28
    47e2:	cd b7       	in	r28, 0x3d	; 61
    47e4:	de b7       	in	r29, 0x3e	; 62
    47e6:	a0 97       	sbiw	r28, 0x20	; 32
    47e8:	0f b6       	in	r0, 0x3f	; 63
    47ea:	f8 94       	cli
    47ec:	de bf       	out	0x3e, r29	; 62
    47ee:	0f be       	out	0x3f, r0	; 63
    47f0:	cd bf       	out	0x3d, r28	; 61
	uint32 time=0,distance=0;
    47f2:	1d 8e       	std	Y+29, r1	; 0x1d
    47f4:	1e 8e       	std	Y+30, r1	; 0x1e
    47f6:	1f 8e       	std	Y+31, r1	; 0x1f
    47f8:	18 a2       	std	Y+32, r1	; 0x20
    47fa:	19 8e       	std	Y+25, r1	; 0x19
    47fc:	1a 8e       	std	Y+26, r1	; 0x1a
    47fe:	1b 8e       	std	Y+27, r1	; 0x1b
    4800:	1c 8e       	std	Y+28, r1	; 0x1c
		c = 0;
    4802:	10 92 3f 02 	sts	0x023F, r1
		TCNT1 = 0;
    4806:	ec e4       	ldi	r30, 0x4C	; 76
    4808:	f0 e0       	ldi	r31, 0x00	; 0
    480a:	11 82       	std	Z+1, r1	; 0x01
    480c:	10 82       	st	Z, r1
		f = 0;
    480e:	10 92 3e 02 	sts	0x023E, r1

		DIO_void_Set_Pin_Value(PORTA_ID,trig0,HIGH);
    4812:	80 e0       	ldi	r24, 0x00	; 0
    4814:	60 e0       	ldi	r22, 0x00	; 0
    4816:	41 e0       	ldi	r20, 0x01	; 1
    4818:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>
    481c:	80 e0       	ldi	r24, 0x00	; 0
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	a0 e2       	ldi	r26, 0x20	; 32
    4822:	b1 e4       	ldi	r27, 0x41	; 65
    4824:	8d 8b       	std	Y+21, r24	; 0x15
    4826:	9e 8b       	std	Y+22, r25	; 0x16
    4828:	af 8b       	std	Y+23, r26	; 0x17
    482a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    482c:	6d 89       	ldd	r22, Y+21	; 0x15
    482e:	7e 89       	ldd	r23, Y+22	; 0x16
    4830:	8f 89       	ldd	r24, Y+23	; 0x17
    4832:	98 8d       	ldd	r25, Y+24	; 0x18
    4834:	2b ea       	ldi	r18, 0xAB	; 171
    4836:	3a ea       	ldi	r19, 0xAA	; 170
    4838:	4a e2       	ldi	r20, 0x2A	; 42
    483a:	50 e4       	ldi	r21, 0x40	; 64
    483c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    4840:	dc 01       	movw	r26, r24
    4842:	cb 01       	movw	r24, r22
    4844:	89 8b       	std	Y+17, r24	; 0x11
    4846:	9a 8b       	std	Y+18, r25	; 0x12
    4848:	ab 8b       	std	Y+19, r26	; 0x13
    484a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    484c:	69 89       	ldd	r22, Y+17	; 0x11
    484e:	7a 89       	ldd	r23, Y+18	; 0x12
    4850:	8b 89       	ldd	r24, Y+19	; 0x13
    4852:	9c 89       	ldd	r25, Y+20	; 0x14
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	30 e0       	ldi	r19, 0x00	; 0
    4858:	40 e8       	ldi	r20, 0x80	; 128
    485a:	5f e3       	ldi	r21, 0x3F	; 63
    485c:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    4860:	88 23       	and	r24, r24
    4862:	1c f4       	brge	.+6      	; 0x486a <Ultrasonic_front_Get_Distance+0x8c>
		__ticks = 1;
    4864:	81 e0       	ldi	r24, 0x01	; 1
    4866:	88 8b       	std	Y+16, r24	; 0x10
    4868:	91 c0       	rjmp	.+290    	; 0x498c <Ultrasonic_front_Get_Distance+0x1ae>
	else if (__tmp > 255)
    486a:	69 89       	ldd	r22, Y+17	; 0x11
    486c:	7a 89       	ldd	r23, Y+18	; 0x12
    486e:	8b 89       	ldd	r24, Y+19	; 0x13
    4870:	9c 89       	ldd	r25, Y+20	; 0x14
    4872:	20 e0       	ldi	r18, 0x00	; 0
    4874:	30 e0       	ldi	r19, 0x00	; 0
    4876:	4f e7       	ldi	r20, 0x7F	; 127
    4878:	53 e4       	ldi	r21, 0x43	; 67
    487a:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    487e:	18 16       	cp	r1, r24
    4880:	0c f0       	brlt	.+2      	; 0x4884 <Ultrasonic_front_Get_Distance+0xa6>
    4882:	7b c0       	rjmp	.+246    	; 0x497a <Ultrasonic_front_Get_Distance+0x19c>
	{
		_delay_ms(__us / 1000.0);
    4884:	6d 89       	ldd	r22, Y+21	; 0x15
    4886:	7e 89       	ldd	r23, Y+22	; 0x16
    4888:	8f 89       	ldd	r24, Y+23	; 0x17
    488a:	98 8d       	ldd	r25, Y+24	; 0x18
    488c:	20 e0       	ldi	r18, 0x00	; 0
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	4a e7       	ldi	r20, 0x7A	; 122
    4892:	54 e4       	ldi	r21, 0x44	; 68
    4894:	0e 94 1c 10 	call	0x2038	; 0x2038 <__divsf3>
    4898:	dc 01       	movw	r26, r24
    489a:	cb 01       	movw	r24, r22
    489c:	8c 87       	std	Y+12, r24	; 0x0c
    489e:	9d 87       	std	Y+13, r25	; 0x0d
    48a0:	ae 87       	std	Y+14, r26	; 0x0e
    48a2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    48a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    48a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    48aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    48ac:	20 e0       	ldi	r18, 0x00	; 0
    48ae:	30 e0       	ldi	r19, 0x00	; 0
    48b0:	4a ef       	ldi	r20, 0xFA	; 250
    48b2:	54 e4       	ldi	r21, 0x44	; 68
    48b4:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    48b8:	dc 01       	movw	r26, r24
    48ba:	cb 01       	movw	r24, r22
    48bc:	88 87       	std	Y+8, r24	; 0x08
    48be:	99 87       	std	Y+9, r25	; 0x09
    48c0:	aa 87       	std	Y+10, r26	; 0x0a
    48c2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    48c4:	68 85       	ldd	r22, Y+8	; 0x08
    48c6:	79 85       	ldd	r23, Y+9	; 0x09
    48c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    48ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    48cc:	20 e0       	ldi	r18, 0x00	; 0
    48ce:	30 e0       	ldi	r19, 0x00	; 0
    48d0:	40 e8       	ldi	r20, 0x80	; 128
    48d2:	5f e3       	ldi	r21, 0x3F	; 63
    48d4:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    48d8:	88 23       	and	r24, r24
    48da:	2c f4       	brge	.+10     	; 0x48e6 <Ultrasonic_front_Get_Distance+0x108>
		__ticks = 1;
    48dc:	81 e0       	ldi	r24, 0x01	; 1
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	9f 83       	std	Y+7, r25	; 0x07
    48e2:	8e 83       	std	Y+6, r24	; 0x06
    48e4:	3f c0       	rjmp	.+126    	; 0x4964 <Ultrasonic_front_Get_Distance+0x186>
	else if (__tmp > 65535)
    48e6:	68 85       	ldd	r22, Y+8	; 0x08
    48e8:	79 85       	ldd	r23, Y+9	; 0x09
    48ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    48ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    48ee:	20 e0       	ldi	r18, 0x00	; 0
    48f0:	3f ef       	ldi	r19, 0xFF	; 255
    48f2:	4f e7       	ldi	r20, 0x7F	; 127
    48f4:	57 e4       	ldi	r21, 0x47	; 71
    48f6:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    48fa:	18 16       	cp	r1, r24
    48fc:	4c f5       	brge	.+82     	; 0x4950 <Ultrasonic_front_Get_Distance+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    4900:	7d 85       	ldd	r23, Y+13	; 0x0d
    4902:	8e 85       	ldd	r24, Y+14	; 0x0e
    4904:	9f 85       	ldd	r25, Y+15	; 0x0f
    4906:	20 e0       	ldi	r18, 0x00	; 0
    4908:	30 e0       	ldi	r19, 0x00	; 0
    490a:	40 e2       	ldi	r20, 0x20	; 32
    490c:	51 e4       	ldi	r21, 0x41	; 65
    490e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    4912:	dc 01       	movw	r26, r24
    4914:	cb 01       	movw	r24, r22
    4916:	bc 01       	movw	r22, r24
    4918:	cd 01       	movw	r24, r26
    491a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    491e:	dc 01       	movw	r26, r24
    4920:	cb 01       	movw	r24, r22
    4922:	9f 83       	std	Y+7, r25	; 0x07
    4924:	8e 83       	std	Y+6, r24	; 0x06
    4926:	0f c0       	rjmp	.+30     	; 0x4946 <Ultrasonic_front_Get_Distance+0x168>
    4928:	88 ec       	ldi	r24, 0xC8	; 200
    492a:	90 e0       	ldi	r25, 0x00	; 0
    492c:	9d 83       	std	Y+5, r25	; 0x05
    492e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4930:	8c 81       	ldd	r24, Y+4	; 0x04
    4932:	9d 81       	ldd	r25, Y+5	; 0x05
    4934:	01 97       	sbiw	r24, 0x01	; 1
    4936:	f1 f7       	brne	.-4      	; 0x4934 <Ultrasonic_front_Get_Distance+0x156>
    4938:	9d 83       	std	Y+5, r25	; 0x05
    493a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    493c:	8e 81       	ldd	r24, Y+6	; 0x06
    493e:	9f 81       	ldd	r25, Y+7	; 0x07
    4940:	01 97       	sbiw	r24, 0x01	; 1
    4942:	9f 83       	std	Y+7, r25	; 0x07
    4944:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4946:	8e 81       	ldd	r24, Y+6	; 0x06
    4948:	9f 81       	ldd	r25, Y+7	; 0x07
    494a:	00 97       	sbiw	r24, 0x00	; 0
    494c:	69 f7       	brne	.-38     	; 0x4928 <Ultrasonic_front_Get_Distance+0x14a>
    494e:	24 c0       	rjmp	.+72     	; 0x4998 <Ultrasonic_front_Get_Distance+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4950:	68 85       	ldd	r22, Y+8	; 0x08
    4952:	79 85       	ldd	r23, Y+9	; 0x09
    4954:	8a 85       	ldd	r24, Y+10	; 0x0a
    4956:	9b 85       	ldd	r25, Y+11	; 0x0b
    4958:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    495c:	dc 01       	movw	r26, r24
    495e:	cb 01       	movw	r24, r22
    4960:	9f 83       	std	Y+7, r25	; 0x07
    4962:	8e 83       	std	Y+6, r24	; 0x06
    4964:	8e 81       	ldd	r24, Y+6	; 0x06
    4966:	9f 81       	ldd	r25, Y+7	; 0x07
    4968:	9b 83       	std	Y+3, r25	; 0x03
    496a:	8a 83       	std	Y+2, r24	; 0x02
    496c:	8a 81       	ldd	r24, Y+2	; 0x02
    496e:	9b 81       	ldd	r25, Y+3	; 0x03
    4970:	01 97       	sbiw	r24, 0x01	; 1
    4972:	f1 f7       	brne	.-4      	; 0x4970 <Ultrasonic_front_Get_Distance+0x192>
    4974:	9b 83       	std	Y+3, r25	; 0x03
    4976:	8a 83       	std	Y+2, r24	; 0x02
    4978:	0f c0       	rjmp	.+30     	; 0x4998 <Ultrasonic_front_Get_Distance+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    497a:	69 89       	ldd	r22, Y+17	; 0x11
    497c:	7a 89       	ldd	r23, Y+18	; 0x12
    497e:	8b 89       	ldd	r24, Y+19	; 0x13
    4980:	9c 89       	ldd	r25, Y+20	; 0x14
    4982:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    4986:	dc 01       	movw	r26, r24
    4988:	cb 01       	movw	r24, r22
    498a:	88 8b       	std	Y+16, r24	; 0x10
    498c:	88 89       	ldd	r24, Y+16	; 0x10
    498e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4990:	89 81       	ldd	r24, Y+1	; 0x01
    4992:	8a 95       	dec	r24
    4994:	f1 f7       	brne	.-4      	; 0x4992 <Ultrasonic_front_Get_Distance+0x1b4>
    4996:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(10);
		DIO_void_Set_Pin_Value(PORTA_ID,trig0,LOW);
    4998:	80 e0       	ldi	r24, 0x00	; 0
    499a:	60 e0       	ldi	r22, 0x00	; 0
    499c:	40 e0       	ldi	r20, 0x00	; 0
    499e:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>

		 Timer1_InputCaptureEdge(Rising);
    49a2:	81 e0       	ldi	r24, 0x01	; 1
    49a4:	0e 94 10 1b 	call	0x3620	; 0x3620 <Timer1_InputCaptureEdge>
         Timer1_ICU_InterruptEnable();
    49a8:	0e 94 2f 1b 	call	0x365e	; 0x365e <Timer1_ICU_InterruptEnable>
		 while(f<2);
    49ac:	80 91 3e 02 	lds	r24, 0x023E
    49b0:	82 30       	cpi	r24, 0x02	; 2
    49b2:	e0 f3       	brcs	.-8      	; 0x49ac <Ultrasonic_front_Get_Distance+0x1ce>
		 time = (t2-t1);
    49b4:	20 91 42 02 	lds	r18, 0x0242
    49b8:	30 91 43 02 	lds	r19, 0x0243
    49bc:	80 91 40 02 	lds	r24, 0x0240
    49c0:	90 91 41 02 	lds	r25, 0x0241
    49c4:	a9 01       	movw	r20, r18
    49c6:	48 1b       	sub	r20, r24
    49c8:	59 0b       	sbc	r21, r25
    49ca:	ca 01       	movw	r24, r20
    49cc:	cc 01       	movw	r24, r24
    49ce:	a0 e0       	ldi	r26, 0x00	; 0
    49d0:	b0 e0       	ldi	r27, 0x00	; 0
    49d2:	8d 8f       	std	Y+29, r24	; 0x1d
    49d4:	9e 8f       	std	Y+30, r25	; 0x1e
    49d6:	af 8f       	std	Y+31, r26	; 0x1f
    49d8:	b8 a3       	std	Y+32, r27	; 0x20
		 distance = time /58;
    49da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    49de:	af 8d       	ldd	r26, Y+31	; 0x1f
    49e0:	b8 a1       	ldd	r27, Y+32	; 0x20
    49e2:	2a e3       	ldi	r18, 0x3A	; 58
    49e4:	30 e0       	ldi	r19, 0x00	; 0
    49e6:	40 e0       	ldi	r20, 0x00	; 0
    49e8:	50 e0       	ldi	r21, 0x00	; 0
    49ea:	bc 01       	movw	r22, r24
    49ec:	cd 01       	movw	r24, r26
    49ee:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    49f2:	da 01       	movw	r26, r20
    49f4:	c9 01       	movw	r24, r18
    49f6:	89 8f       	std	Y+25, r24	; 0x19
    49f8:	9a 8f       	std	Y+26, r25	; 0x1a
    49fa:	ab 8f       	std	Y+27, r26	; 0x1b
    49fc:	bc 8f       	std	Y+28, r27	; 0x1c
		 Timer1_ICU_InterruptDisable();
    49fe:	0e 94 3d 1b 	call	0x367a	; 0x367a <Timer1_ICU_InterruptDisable>


		 return distance;
    4a02:	89 8d       	ldd	r24, Y+25	; 0x19
    4a04:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4a06:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4a08:	bc 8d       	ldd	r27, Y+28	; 0x1c
}
    4a0a:	bc 01       	movw	r22, r24
    4a0c:	cd 01       	movw	r24, r26
    4a0e:	a0 96       	adiw	r28, 0x20	; 32
    4a10:	0f b6       	in	r0, 0x3f	; 63
    4a12:	f8 94       	cli
    4a14:	de bf       	out	0x3e, r29	; 62
    4a16:	0f be       	out	0x3f, r0	; 63
    4a18:	cd bf       	out	0x3d, r28	; 61
    4a1a:	cf 91       	pop	r28
    4a1c:	df 91       	pop	r29
    4a1e:	08 95       	ret

00004a20 <Ultrasonic_right_front_Get_Distance>:

uint32 Ultrasonic_right_front_Get_Distance(void)
{
    4a20:	df 93       	push	r29
    4a22:	cf 93       	push	r28
    4a24:	cd b7       	in	r28, 0x3d	; 61
    4a26:	de b7       	in	r29, 0x3e	; 62
    4a28:	a0 97       	sbiw	r28, 0x20	; 32
    4a2a:	0f b6       	in	r0, 0x3f	; 63
    4a2c:	f8 94       	cli
    4a2e:	de bf       	out	0x3e, r29	; 62
    4a30:	0f be       	out	0x3f, r0	; 63
    4a32:	cd bf       	out	0x3d, r28	; 61
	uint32 time=0,distance=0;
    4a34:	1d 8e       	std	Y+29, r1	; 0x1d
    4a36:	1e 8e       	std	Y+30, r1	; 0x1e
    4a38:	1f 8e       	std	Y+31, r1	; 0x1f
    4a3a:	18 a2       	std	Y+32, r1	; 0x20
    4a3c:	19 8e       	std	Y+25, r1	; 0x19
    4a3e:	1a 8e       	std	Y+26, r1	; 0x1a
    4a40:	1b 8e       	std	Y+27, r1	; 0x1b
    4a42:	1c 8e       	std	Y+28, r1	; 0x1c
			c = 0;
    4a44:	10 92 3f 02 	sts	0x023F, r1
			TCNT1 = 0;
    4a48:	ec e4       	ldi	r30, 0x4C	; 76
    4a4a:	f0 e0       	ldi	r31, 0x00	; 0
    4a4c:	11 82       	std	Z+1, r1	; 0x01
    4a4e:	10 82       	st	Z, r1
			f = 0;
    4a50:	10 92 3e 02 	sts	0x023E, r1

			DIO_void_Set_Pin_Value(PORTA_ID,trig1,HIGH);
    4a54:	80 e0       	ldi	r24, 0x00	; 0
    4a56:	61 e0       	ldi	r22, 0x01	; 1
    4a58:	41 e0       	ldi	r20, 0x01	; 1
    4a5a:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>
    4a5e:	80 e0       	ldi	r24, 0x00	; 0
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	a0 e2       	ldi	r26, 0x20	; 32
    4a64:	b1 e4       	ldi	r27, 0x41	; 65
    4a66:	8d 8b       	std	Y+21, r24	; 0x15
    4a68:	9e 8b       	std	Y+22, r25	; 0x16
    4a6a:	af 8b       	std	Y+23, r26	; 0x17
    4a6c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4a6e:	6d 89       	ldd	r22, Y+21	; 0x15
    4a70:	7e 89       	ldd	r23, Y+22	; 0x16
    4a72:	8f 89       	ldd	r24, Y+23	; 0x17
    4a74:	98 8d       	ldd	r25, Y+24	; 0x18
    4a76:	2b ea       	ldi	r18, 0xAB	; 171
    4a78:	3a ea       	ldi	r19, 0xAA	; 170
    4a7a:	4a e2       	ldi	r20, 0x2A	; 42
    4a7c:	50 e4       	ldi	r21, 0x40	; 64
    4a7e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    4a82:	dc 01       	movw	r26, r24
    4a84:	cb 01       	movw	r24, r22
    4a86:	89 8b       	std	Y+17, r24	; 0x11
    4a88:	9a 8b       	std	Y+18, r25	; 0x12
    4a8a:	ab 8b       	std	Y+19, r26	; 0x13
    4a8c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4a8e:	69 89       	ldd	r22, Y+17	; 0x11
    4a90:	7a 89       	ldd	r23, Y+18	; 0x12
    4a92:	8b 89       	ldd	r24, Y+19	; 0x13
    4a94:	9c 89       	ldd	r25, Y+20	; 0x14
    4a96:	20 e0       	ldi	r18, 0x00	; 0
    4a98:	30 e0       	ldi	r19, 0x00	; 0
    4a9a:	40 e8       	ldi	r20, 0x80	; 128
    4a9c:	5f e3       	ldi	r21, 0x3F	; 63
    4a9e:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    4aa2:	88 23       	and	r24, r24
    4aa4:	1c f4       	brge	.+6      	; 0x4aac <Ultrasonic_right_front_Get_Distance+0x8c>
		__ticks = 1;
    4aa6:	81 e0       	ldi	r24, 0x01	; 1
    4aa8:	88 8b       	std	Y+16, r24	; 0x10
    4aaa:	91 c0       	rjmp	.+290    	; 0x4bce <Ultrasonic_right_front_Get_Distance+0x1ae>
	else if (__tmp > 255)
    4aac:	69 89       	ldd	r22, Y+17	; 0x11
    4aae:	7a 89       	ldd	r23, Y+18	; 0x12
    4ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    4ab2:	9c 89       	ldd	r25, Y+20	; 0x14
    4ab4:	20 e0       	ldi	r18, 0x00	; 0
    4ab6:	30 e0       	ldi	r19, 0x00	; 0
    4ab8:	4f e7       	ldi	r20, 0x7F	; 127
    4aba:	53 e4       	ldi	r21, 0x43	; 67
    4abc:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    4ac0:	18 16       	cp	r1, r24
    4ac2:	0c f0       	brlt	.+2      	; 0x4ac6 <Ultrasonic_right_front_Get_Distance+0xa6>
    4ac4:	7b c0       	rjmp	.+246    	; 0x4bbc <Ultrasonic_right_front_Get_Distance+0x19c>
	{
		_delay_ms(__us / 1000.0);
    4ac6:	6d 89       	ldd	r22, Y+21	; 0x15
    4ac8:	7e 89       	ldd	r23, Y+22	; 0x16
    4aca:	8f 89       	ldd	r24, Y+23	; 0x17
    4acc:	98 8d       	ldd	r25, Y+24	; 0x18
    4ace:	20 e0       	ldi	r18, 0x00	; 0
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	4a e7       	ldi	r20, 0x7A	; 122
    4ad4:	54 e4       	ldi	r21, 0x44	; 68
    4ad6:	0e 94 1c 10 	call	0x2038	; 0x2038 <__divsf3>
    4ada:	dc 01       	movw	r26, r24
    4adc:	cb 01       	movw	r24, r22
    4ade:	8c 87       	std	Y+12, r24	; 0x0c
    4ae0:	9d 87       	std	Y+13, r25	; 0x0d
    4ae2:	ae 87       	std	Y+14, r26	; 0x0e
    4ae4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ae6:	6c 85       	ldd	r22, Y+12	; 0x0c
    4ae8:	7d 85       	ldd	r23, Y+13	; 0x0d
    4aea:	8e 85       	ldd	r24, Y+14	; 0x0e
    4aec:	9f 85       	ldd	r25, Y+15	; 0x0f
    4aee:	20 e0       	ldi	r18, 0x00	; 0
    4af0:	30 e0       	ldi	r19, 0x00	; 0
    4af2:	4a ef       	ldi	r20, 0xFA	; 250
    4af4:	54 e4       	ldi	r21, 0x44	; 68
    4af6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    4afa:	dc 01       	movw	r26, r24
    4afc:	cb 01       	movw	r24, r22
    4afe:	88 87       	std	Y+8, r24	; 0x08
    4b00:	99 87       	std	Y+9, r25	; 0x09
    4b02:	aa 87       	std	Y+10, r26	; 0x0a
    4b04:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4b06:	68 85       	ldd	r22, Y+8	; 0x08
    4b08:	79 85       	ldd	r23, Y+9	; 0x09
    4b0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b0e:	20 e0       	ldi	r18, 0x00	; 0
    4b10:	30 e0       	ldi	r19, 0x00	; 0
    4b12:	40 e8       	ldi	r20, 0x80	; 128
    4b14:	5f e3       	ldi	r21, 0x3F	; 63
    4b16:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    4b1a:	88 23       	and	r24, r24
    4b1c:	2c f4       	brge	.+10     	; 0x4b28 <Ultrasonic_right_front_Get_Distance+0x108>
		__ticks = 1;
    4b1e:	81 e0       	ldi	r24, 0x01	; 1
    4b20:	90 e0       	ldi	r25, 0x00	; 0
    4b22:	9f 83       	std	Y+7, r25	; 0x07
    4b24:	8e 83       	std	Y+6, r24	; 0x06
    4b26:	3f c0       	rjmp	.+126    	; 0x4ba6 <Ultrasonic_right_front_Get_Distance+0x186>
	else if (__tmp > 65535)
    4b28:	68 85       	ldd	r22, Y+8	; 0x08
    4b2a:	79 85       	ldd	r23, Y+9	; 0x09
    4b2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b30:	20 e0       	ldi	r18, 0x00	; 0
    4b32:	3f ef       	ldi	r19, 0xFF	; 255
    4b34:	4f e7       	ldi	r20, 0x7F	; 127
    4b36:	57 e4       	ldi	r21, 0x47	; 71
    4b38:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    4b3c:	18 16       	cp	r1, r24
    4b3e:	4c f5       	brge	.+82     	; 0x4b92 <Ultrasonic_right_front_Get_Distance+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b40:	6c 85       	ldd	r22, Y+12	; 0x0c
    4b42:	7d 85       	ldd	r23, Y+13	; 0x0d
    4b44:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b46:	9f 85       	ldd	r25, Y+15	; 0x0f
    4b48:	20 e0       	ldi	r18, 0x00	; 0
    4b4a:	30 e0       	ldi	r19, 0x00	; 0
    4b4c:	40 e2       	ldi	r20, 0x20	; 32
    4b4e:	51 e4       	ldi	r21, 0x41	; 65
    4b50:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    4b54:	dc 01       	movw	r26, r24
    4b56:	cb 01       	movw	r24, r22
    4b58:	bc 01       	movw	r22, r24
    4b5a:	cd 01       	movw	r24, r26
    4b5c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    4b60:	dc 01       	movw	r26, r24
    4b62:	cb 01       	movw	r24, r22
    4b64:	9f 83       	std	Y+7, r25	; 0x07
    4b66:	8e 83       	std	Y+6, r24	; 0x06
    4b68:	0f c0       	rjmp	.+30     	; 0x4b88 <Ultrasonic_right_front_Get_Distance+0x168>
    4b6a:	88 ec       	ldi	r24, 0xC8	; 200
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	9d 83       	std	Y+5, r25	; 0x05
    4b70:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4b72:	8c 81       	ldd	r24, Y+4	; 0x04
    4b74:	9d 81       	ldd	r25, Y+5	; 0x05
    4b76:	01 97       	sbiw	r24, 0x01	; 1
    4b78:	f1 f7       	brne	.-4      	; 0x4b76 <Ultrasonic_right_front_Get_Distance+0x156>
    4b7a:	9d 83       	std	Y+5, r25	; 0x05
    4b7c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b7e:	8e 81       	ldd	r24, Y+6	; 0x06
    4b80:	9f 81       	ldd	r25, Y+7	; 0x07
    4b82:	01 97       	sbiw	r24, 0x01	; 1
    4b84:	9f 83       	std	Y+7, r25	; 0x07
    4b86:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b88:	8e 81       	ldd	r24, Y+6	; 0x06
    4b8a:	9f 81       	ldd	r25, Y+7	; 0x07
    4b8c:	00 97       	sbiw	r24, 0x00	; 0
    4b8e:	69 f7       	brne	.-38     	; 0x4b6a <Ultrasonic_right_front_Get_Distance+0x14a>
    4b90:	24 c0       	rjmp	.+72     	; 0x4bda <Ultrasonic_right_front_Get_Distance+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b92:	68 85       	ldd	r22, Y+8	; 0x08
    4b94:	79 85       	ldd	r23, Y+9	; 0x09
    4b96:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b98:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b9a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    4b9e:	dc 01       	movw	r26, r24
    4ba0:	cb 01       	movw	r24, r22
    4ba2:	9f 83       	std	Y+7, r25	; 0x07
    4ba4:	8e 83       	std	Y+6, r24	; 0x06
    4ba6:	8e 81       	ldd	r24, Y+6	; 0x06
    4ba8:	9f 81       	ldd	r25, Y+7	; 0x07
    4baa:	9b 83       	std	Y+3, r25	; 0x03
    4bac:	8a 83       	std	Y+2, r24	; 0x02
    4bae:	8a 81       	ldd	r24, Y+2	; 0x02
    4bb0:	9b 81       	ldd	r25, Y+3	; 0x03
    4bb2:	01 97       	sbiw	r24, 0x01	; 1
    4bb4:	f1 f7       	brne	.-4      	; 0x4bb2 <Ultrasonic_right_front_Get_Distance+0x192>
    4bb6:	9b 83       	std	Y+3, r25	; 0x03
    4bb8:	8a 83       	std	Y+2, r24	; 0x02
    4bba:	0f c0       	rjmp	.+30     	; 0x4bda <Ultrasonic_right_front_Get_Distance+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4bbc:	69 89       	ldd	r22, Y+17	; 0x11
    4bbe:	7a 89       	ldd	r23, Y+18	; 0x12
    4bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    4bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    4bc4:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    4bc8:	dc 01       	movw	r26, r24
    4bca:	cb 01       	movw	r24, r22
    4bcc:	88 8b       	std	Y+16, r24	; 0x10
    4bce:	88 89       	ldd	r24, Y+16	; 0x10
    4bd0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4bd2:	89 81       	ldd	r24, Y+1	; 0x01
    4bd4:	8a 95       	dec	r24
    4bd6:	f1 f7       	brne	.-4      	; 0x4bd4 <Ultrasonic_right_front_Get_Distance+0x1b4>
    4bd8:	89 83       	std	Y+1, r24	; 0x01
			_delay_us(10);
			DIO_void_Set_Pin_Value(PORTA_ID,trig1,LOW);
    4bda:	80 e0       	ldi	r24, 0x00	; 0
    4bdc:	61 e0       	ldi	r22, 0x01	; 1
    4bde:	40 e0       	ldi	r20, 0x00	; 0
    4be0:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>

			 Timer1_InputCaptureEdge(Rising);
    4be4:	81 e0       	ldi	r24, 0x01	; 1
    4be6:	0e 94 10 1b 	call	0x3620	; 0x3620 <Timer1_InputCaptureEdge>
	         Timer1_ICU_InterruptEnable();
    4bea:	0e 94 2f 1b 	call	0x365e	; 0x365e <Timer1_ICU_InterruptEnable>
			 while(f<2);
    4bee:	80 91 3e 02 	lds	r24, 0x023E
    4bf2:	82 30       	cpi	r24, 0x02	; 2
    4bf4:	e0 f3       	brcs	.-8      	; 0x4bee <Ultrasonic_right_front_Get_Distance+0x1ce>
			 time = (t2-t1);
    4bf6:	20 91 42 02 	lds	r18, 0x0242
    4bfa:	30 91 43 02 	lds	r19, 0x0243
    4bfe:	80 91 40 02 	lds	r24, 0x0240
    4c02:	90 91 41 02 	lds	r25, 0x0241
    4c06:	a9 01       	movw	r20, r18
    4c08:	48 1b       	sub	r20, r24
    4c0a:	59 0b       	sbc	r21, r25
    4c0c:	ca 01       	movw	r24, r20
    4c0e:	cc 01       	movw	r24, r24
    4c10:	a0 e0       	ldi	r26, 0x00	; 0
    4c12:	b0 e0       	ldi	r27, 0x00	; 0
    4c14:	8d 8f       	std	Y+29, r24	; 0x1d
    4c16:	9e 8f       	std	Y+30, r25	; 0x1e
    4c18:	af 8f       	std	Y+31, r26	; 0x1f
    4c1a:	b8 a3       	std	Y+32, r27	; 0x20
			 distance = time /58;
    4c1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c20:	af 8d       	ldd	r26, Y+31	; 0x1f
    4c22:	b8 a1       	ldd	r27, Y+32	; 0x20
    4c24:	2a e3       	ldi	r18, 0x3A	; 58
    4c26:	30 e0       	ldi	r19, 0x00	; 0
    4c28:	40 e0       	ldi	r20, 0x00	; 0
    4c2a:	50 e0       	ldi	r21, 0x00	; 0
    4c2c:	bc 01       	movw	r22, r24
    4c2e:	cd 01       	movw	r24, r26
    4c30:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    4c34:	da 01       	movw	r26, r20
    4c36:	c9 01       	movw	r24, r18
    4c38:	89 8f       	std	Y+25, r24	; 0x19
    4c3a:	9a 8f       	std	Y+26, r25	; 0x1a
    4c3c:	ab 8f       	std	Y+27, r26	; 0x1b
    4c3e:	bc 8f       	std	Y+28, r27	; 0x1c
			 Timer1_ICU_InterruptDisable();
    4c40:	0e 94 3d 1b 	call	0x367a	; 0x367a <Timer1_ICU_InterruptDisable>


			 return distance;
    4c44:	89 8d       	ldd	r24, Y+25	; 0x19
    4c46:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4c48:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4c4a:	bc 8d       	ldd	r27, Y+28	; 0x1c
}
    4c4c:	bc 01       	movw	r22, r24
    4c4e:	cd 01       	movw	r24, r26
    4c50:	a0 96       	adiw	r28, 0x20	; 32
    4c52:	0f b6       	in	r0, 0x3f	; 63
    4c54:	f8 94       	cli
    4c56:	de bf       	out	0x3e, r29	; 62
    4c58:	0f be       	out	0x3f, r0	; 63
    4c5a:	cd bf       	out	0x3d, r28	; 61
    4c5c:	cf 91       	pop	r28
    4c5e:	df 91       	pop	r29
    4c60:	08 95       	ret

00004c62 <Ultrasonic_right_back_Get_Distance>:
uint32 Ultrasonic_right_back_Get_Distance(void)
{
    4c62:	df 93       	push	r29
    4c64:	cf 93       	push	r28
    4c66:	cd b7       	in	r28, 0x3d	; 61
    4c68:	de b7       	in	r29, 0x3e	; 62
    4c6a:	a0 97       	sbiw	r28, 0x20	; 32
    4c6c:	0f b6       	in	r0, 0x3f	; 63
    4c6e:	f8 94       	cli
    4c70:	de bf       	out	0x3e, r29	; 62
    4c72:	0f be       	out	0x3f, r0	; 63
    4c74:	cd bf       	out	0x3d, r28	; 61
	uint32 time=0,distance=0;
    4c76:	1d 8e       	std	Y+29, r1	; 0x1d
    4c78:	1e 8e       	std	Y+30, r1	; 0x1e
    4c7a:	1f 8e       	std	Y+31, r1	; 0x1f
    4c7c:	18 a2       	std	Y+32, r1	; 0x20
    4c7e:	19 8e       	std	Y+25, r1	; 0x19
    4c80:	1a 8e       	std	Y+26, r1	; 0x1a
    4c82:	1b 8e       	std	Y+27, r1	; 0x1b
    4c84:	1c 8e       	std	Y+28, r1	; 0x1c
			c = 0;
    4c86:	10 92 3f 02 	sts	0x023F, r1
			TCNT1 = 0;
    4c8a:	ec e4       	ldi	r30, 0x4C	; 76
    4c8c:	f0 e0       	ldi	r31, 0x00	; 0
    4c8e:	11 82       	std	Z+1, r1	; 0x01
    4c90:	10 82       	st	Z, r1
			f = 0;
    4c92:	10 92 3e 02 	sts	0x023E, r1

			DIO_void_Set_Pin_Value(PORTA_ID,trig1,HIGH);
    4c96:	80 e0       	ldi	r24, 0x00	; 0
    4c98:	61 e0       	ldi	r22, 0x01	; 1
    4c9a:	41 e0       	ldi	r20, 0x01	; 1
    4c9c:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>
    4ca0:	80 e0       	ldi	r24, 0x00	; 0
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	a0 e2       	ldi	r26, 0x20	; 32
    4ca6:	b1 e4       	ldi	r27, 0x41	; 65
    4ca8:	8d 8b       	std	Y+21, r24	; 0x15
    4caa:	9e 8b       	std	Y+22, r25	; 0x16
    4cac:	af 8b       	std	Y+23, r26	; 0x17
    4cae:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4cb0:	6d 89       	ldd	r22, Y+21	; 0x15
    4cb2:	7e 89       	ldd	r23, Y+22	; 0x16
    4cb4:	8f 89       	ldd	r24, Y+23	; 0x17
    4cb6:	98 8d       	ldd	r25, Y+24	; 0x18
    4cb8:	2b ea       	ldi	r18, 0xAB	; 171
    4cba:	3a ea       	ldi	r19, 0xAA	; 170
    4cbc:	4a e2       	ldi	r20, 0x2A	; 42
    4cbe:	50 e4       	ldi	r21, 0x40	; 64
    4cc0:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    4cc4:	dc 01       	movw	r26, r24
    4cc6:	cb 01       	movw	r24, r22
    4cc8:	89 8b       	std	Y+17, r24	; 0x11
    4cca:	9a 8b       	std	Y+18, r25	; 0x12
    4ccc:	ab 8b       	std	Y+19, r26	; 0x13
    4cce:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4cd0:	69 89       	ldd	r22, Y+17	; 0x11
    4cd2:	7a 89       	ldd	r23, Y+18	; 0x12
    4cd4:	8b 89       	ldd	r24, Y+19	; 0x13
    4cd6:	9c 89       	ldd	r25, Y+20	; 0x14
    4cd8:	20 e0       	ldi	r18, 0x00	; 0
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	40 e8       	ldi	r20, 0x80	; 128
    4cde:	5f e3       	ldi	r21, 0x3F	; 63
    4ce0:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    4ce4:	88 23       	and	r24, r24
    4ce6:	1c f4       	brge	.+6      	; 0x4cee <Ultrasonic_right_back_Get_Distance+0x8c>
		__ticks = 1;
    4ce8:	81 e0       	ldi	r24, 0x01	; 1
    4cea:	88 8b       	std	Y+16, r24	; 0x10
    4cec:	91 c0       	rjmp	.+290    	; 0x4e10 <Ultrasonic_right_back_Get_Distance+0x1ae>
	else if (__tmp > 255)
    4cee:	69 89       	ldd	r22, Y+17	; 0x11
    4cf0:	7a 89       	ldd	r23, Y+18	; 0x12
    4cf2:	8b 89       	ldd	r24, Y+19	; 0x13
    4cf4:	9c 89       	ldd	r25, Y+20	; 0x14
    4cf6:	20 e0       	ldi	r18, 0x00	; 0
    4cf8:	30 e0       	ldi	r19, 0x00	; 0
    4cfa:	4f e7       	ldi	r20, 0x7F	; 127
    4cfc:	53 e4       	ldi	r21, 0x43	; 67
    4cfe:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    4d02:	18 16       	cp	r1, r24
    4d04:	0c f0       	brlt	.+2      	; 0x4d08 <Ultrasonic_right_back_Get_Distance+0xa6>
    4d06:	7b c0       	rjmp	.+246    	; 0x4dfe <Ultrasonic_right_back_Get_Distance+0x19c>
	{
		_delay_ms(__us / 1000.0);
    4d08:	6d 89       	ldd	r22, Y+21	; 0x15
    4d0a:	7e 89       	ldd	r23, Y+22	; 0x16
    4d0c:	8f 89       	ldd	r24, Y+23	; 0x17
    4d0e:	98 8d       	ldd	r25, Y+24	; 0x18
    4d10:	20 e0       	ldi	r18, 0x00	; 0
    4d12:	30 e0       	ldi	r19, 0x00	; 0
    4d14:	4a e7       	ldi	r20, 0x7A	; 122
    4d16:	54 e4       	ldi	r21, 0x44	; 68
    4d18:	0e 94 1c 10 	call	0x2038	; 0x2038 <__divsf3>
    4d1c:	dc 01       	movw	r26, r24
    4d1e:	cb 01       	movw	r24, r22
    4d20:	8c 87       	std	Y+12, r24	; 0x0c
    4d22:	9d 87       	std	Y+13, r25	; 0x0d
    4d24:	ae 87       	std	Y+14, r26	; 0x0e
    4d26:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d28:	6c 85       	ldd	r22, Y+12	; 0x0c
    4d2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    4d2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4d30:	20 e0       	ldi	r18, 0x00	; 0
    4d32:	30 e0       	ldi	r19, 0x00	; 0
    4d34:	4a ef       	ldi	r20, 0xFA	; 250
    4d36:	54 e4       	ldi	r21, 0x44	; 68
    4d38:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    4d3c:	dc 01       	movw	r26, r24
    4d3e:	cb 01       	movw	r24, r22
    4d40:	88 87       	std	Y+8, r24	; 0x08
    4d42:	99 87       	std	Y+9, r25	; 0x09
    4d44:	aa 87       	std	Y+10, r26	; 0x0a
    4d46:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4d48:	68 85       	ldd	r22, Y+8	; 0x08
    4d4a:	79 85       	ldd	r23, Y+9	; 0x09
    4d4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d50:	20 e0       	ldi	r18, 0x00	; 0
    4d52:	30 e0       	ldi	r19, 0x00	; 0
    4d54:	40 e8       	ldi	r20, 0x80	; 128
    4d56:	5f e3       	ldi	r21, 0x3F	; 63
    4d58:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    4d5c:	88 23       	and	r24, r24
    4d5e:	2c f4       	brge	.+10     	; 0x4d6a <Ultrasonic_right_back_Get_Distance+0x108>
		__ticks = 1;
    4d60:	81 e0       	ldi	r24, 0x01	; 1
    4d62:	90 e0       	ldi	r25, 0x00	; 0
    4d64:	9f 83       	std	Y+7, r25	; 0x07
    4d66:	8e 83       	std	Y+6, r24	; 0x06
    4d68:	3f c0       	rjmp	.+126    	; 0x4de8 <Ultrasonic_right_back_Get_Distance+0x186>
	else if (__tmp > 65535)
    4d6a:	68 85       	ldd	r22, Y+8	; 0x08
    4d6c:	79 85       	ldd	r23, Y+9	; 0x09
    4d6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d70:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d72:	20 e0       	ldi	r18, 0x00	; 0
    4d74:	3f ef       	ldi	r19, 0xFF	; 255
    4d76:	4f e7       	ldi	r20, 0x7F	; 127
    4d78:	57 e4       	ldi	r21, 0x47	; 71
    4d7a:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    4d7e:	18 16       	cp	r1, r24
    4d80:	4c f5       	brge	.+82     	; 0x4dd4 <Ultrasonic_right_back_Get_Distance+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d82:	6c 85       	ldd	r22, Y+12	; 0x0c
    4d84:	7d 85       	ldd	r23, Y+13	; 0x0d
    4d86:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d88:	9f 85       	ldd	r25, Y+15	; 0x0f
    4d8a:	20 e0       	ldi	r18, 0x00	; 0
    4d8c:	30 e0       	ldi	r19, 0x00	; 0
    4d8e:	40 e2       	ldi	r20, 0x20	; 32
    4d90:	51 e4       	ldi	r21, 0x41	; 65
    4d92:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    4d96:	dc 01       	movw	r26, r24
    4d98:	cb 01       	movw	r24, r22
    4d9a:	bc 01       	movw	r22, r24
    4d9c:	cd 01       	movw	r24, r26
    4d9e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    4da2:	dc 01       	movw	r26, r24
    4da4:	cb 01       	movw	r24, r22
    4da6:	9f 83       	std	Y+7, r25	; 0x07
    4da8:	8e 83       	std	Y+6, r24	; 0x06
    4daa:	0f c0       	rjmp	.+30     	; 0x4dca <Ultrasonic_right_back_Get_Distance+0x168>
    4dac:	88 ec       	ldi	r24, 0xC8	; 200
    4dae:	90 e0       	ldi	r25, 0x00	; 0
    4db0:	9d 83       	std	Y+5, r25	; 0x05
    4db2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4db4:	8c 81       	ldd	r24, Y+4	; 0x04
    4db6:	9d 81       	ldd	r25, Y+5	; 0x05
    4db8:	01 97       	sbiw	r24, 0x01	; 1
    4dba:	f1 f7       	brne	.-4      	; 0x4db8 <Ultrasonic_right_back_Get_Distance+0x156>
    4dbc:	9d 83       	std	Y+5, r25	; 0x05
    4dbe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dc0:	8e 81       	ldd	r24, Y+6	; 0x06
    4dc2:	9f 81       	ldd	r25, Y+7	; 0x07
    4dc4:	01 97       	sbiw	r24, 0x01	; 1
    4dc6:	9f 83       	std	Y+7, r25	; 0x07
    4dc8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dca:	8e 81       	ldd	r24, Y+6	; 0x06
    4dcc:	9f 81       	ldd	r25, Y+7	; 0x07
    4dce:	00 97       	sbiw	r24, 0x00	; 0
    4dd0:	69 f7       	brne	.-38     	; 0x4dac <Ultrasonic_right_back_Get_Distance+0x14a>
    4dd2:	24 c0       	rjmp	.+72     	; 0x4e1c <Ultrasonic_right_back_Get_Distance+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dd4:	68 85       	ldd	r22, Y+8	; 0x08
    4dd6:	79 85       	ldd	r23, Y+9	; 0x09
    4dd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4dda:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ddc:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    4de0:	dc 01       	movw	r26, r24
    4de2:	cb 01       	movw	r24, r22
    4de4:	9f 83       	std	Y+7, r25	; 0x07
    4de6:	8e 83       	std	Y+6, r24	; 0x06
    4de8:	8e 81       	ldd	r24, Y+6	; 0x06
    4dea:	9f 81       	ldd	r25, Y+7	; 0x07
    4dec:	9b 83       	std	Y+3, r25	; 0x03
    4dee:	8a 83       	std	Y+2, r24	; 0x02
    4df0:	8a 81       	ldd	r24, Y+2	; 0x02
    4df2:	9b 81       	ldd	r25, Y+3	; 0x03
    4df4:	01 97       	sbiw	r24, 0x01	; 1
    4df6:	f1 f7       	brne	.-4      	; 0x4df4 <Ultrasonic_right_back_Get_Distance+0x192>
    4df8:	9b 83       	std	Y+3, r25	; 0x03
    4dfa:	8a 83       	std	Y+2, r24	; 0x02
    4dfc:	0f c0       	rjmp	.+30     	; 0x4e1c <Ultrasonic_right_back_Get_Distance+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4dfe:	69 89       	ldd	r22, Y+17	; 0x11
    4e00:	7a 89       	ldd	r23, Y+18	; 0x12
    4e02:	8b 89       	ldd	r24, Y+19	; 0x13
    4e04:	9c 89       	ldd	r25, Y+20	; 0x14
    4e06:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    4e0a:	dc 01       	movw	r26, r24
    4e0c:	cb 01       	movw	r24, r22
    4e0e:	88 8b       	std	Y+16, r24	; 0x10
    4e10:	88 89       	ldd	r24, Y+16	; 0x10
    4e12:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4e14:	89 81       	ldd	r24, Y+1	; 0x01
    4e16:	8a 95       	dec	r24
    4e18:	f1 f7       	brne	.-4      	; 0x4e16 <Ultrasonic_right_back_Get_Distance+0x1b4>
    4e1a:	89 83       	std	Y+1, r24	; 0x01
			_delay_us(10);
			DIO_void_Set_Pin_Value(PORTA_ID,trig1,LOW);
    4e1c:	80 e0       	ldi	r24, 0x00	; 0
    4e1e:	61 e0       	ldi	r22, 0x01	; 1
    4e20:	40 e0       	ldi	r20, 0x00	; 0
    4e22:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>

			 Timer1_InputCaptureEdge(Rising);
    4e26:	81 e0       	ldi	r24, 0x01	; 1
    4e28:	0e 94 10 1b 	call	0x3620	; 0x3620 <Timer1_InputCaptureEdge>
	         Timer1_ICU_InterruptEnable();
    4e2c:	0e 94 2f 1b 	call	0x365e	; 0x365e <Timer1_ICU_InterruptEnable>
			 while(f<2);
    4e30:	80 91 3e 02 	lds	r24, 0x023E
    4e34:	82 30       	cpi	r24, 0x02	; 2
    4e36:	e0 f3       	brcs	.-8      	; 0x4e30 <Ultrasonic_right_back_Get_Distance+0x1ce>
			 time = (t2-t1);
    4e38:	20 91 42 02 	lds	r18, 0x0242
    4e3c:	30 91 43 02 	lds	r19, 0x0243
    4e40:	80 91 40 02 	lds	r24, 0x0240
    4e44:	90 91 41 02 	lds	r25, 0x0241
    4e48:	a9 01       	movw	r20, r18
    4e4a:	48 1b       	sub	r20, r24
    4e4c:	59 0b       	sbc	r21, r25
    4e4e:	ca 01       	movw	r24, r20
    4e50:	cc 01       	movw	r24, r24
    4e52:	a0 e0       	ldi	r26, 0x00	; 0
    4e54:	b0 e0       	ldi	r27, 0x00	; 0
    4e56:	8d 8f       	std	Y+29, r24	; 0x1d
    4e58:	9e 8f       	std	Y+30, r25	; 0x1e
    4e5a:	af 8f       	std	Y+31, r26	; 0x1f
    4e5c:	b8 a3       	std	Y+32, r27	; 0x20
			 distance = time /58;
    4e5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e62:	af 8d       	ldd	r26, Y+31	; 0x1f
    4e64:	b8 a1       	ldd	r27, Y+32	; 0x20
    4e66:	2a e3       	ldi	r18, 0x3A	; 58
    4e68:	30 e0       	ldi	r19, 0x00	; 0
    4e6a:	40 e0       	ldi	r20, 0x00	; 0
    4e6c:	50 e0       	ldi	r21, 0x00	; 0
    4e6e:	bc 01       	movw	r22, r24
    4e70:	cd 01       	movw	r24, r26
    4e72:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    4e76:	da 01       	movw	r26, r20
    4e78:	c9 01       	movw	r24, r18
    4e7a:	89 8f       	std	Y+25, r24	; 0x19
    4e7c:	9a 8f       	std	Y+26, r25	; 0x1a
    4e7e:	ab 8f       	std	Y+27, r26	; 0x1b
    4e80:	bc 8f       	std	Y+28, r27	; 0x1c
			 Timer1_ICU_InterruptDisable();
    4e82:	0e 94 3d 1b 	call	0x367a	; 0x367a <Timer1_ICU_InterruptDisable>


			 return distance;
    4e86:	89 8d       	ldd	r24, Y+25	; 0x19
    4e88:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4e8a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4e8c:	bc 8d       	ldd	r27, Y+28	; 0x1c
}
    4e8e:	bc 01       	movw	r22, r24
    4e90:	cd 01       	movw	r24, r26
    4e92:	a0 96       	adiw	r28, 0x20	; 32
    4e94:	0f b6       	in	r0, 0x3f	; 63
    4e96:	f8 94       	cli
    4e98:	de bf       	out	0x3e, r29	; 62
    4e9a:	0f be       	out	0x3f, r0	; 63
    4e9c:	cd bf       	out	0x3d, r28	; 61
    4e9e:	cf 91       	pop	r28
    4ea0:	df 91       	pop	r29
    4ea2:	08 95       	ret

00004ea4 <Ultrasonic_back_Get_Distance>:
uint32 Ultrasonic_back_Get_Distance(void)
{
    4ea4:	df 93       	push	r29
    4ea6:	cf 93       	push	r28
    4ea8:	cd b7       	in	r28, 0x3d	; 61
    4eaa:	de b7       	in	r29, 0x3e	; 62
    4eac:	a0 97       	sbiw	r28, 0x20	; 32
    4eae:	0f b6       	in	r0, 0x3f	; 63
    4eb0:	f8 94       	cli
    4eb2:	de bf       	out	0x3e, r29	; 62
    4eb4:	0f be       	out	0x3f, r0	; 63
    4eb6:	cd bf       	out	0x3d, r28	; 61
	uint32 time=0,distance=0;
    4eb8:	1d 8e       	std	Y+29, r1	; 0x1d
    4eba:	1e 8e       	std	Y+30, r1	; 0x1e
    4ebc:	1f 8e       	std	Y+31, r1	; 0x1f
    4ebe:	18 a2       	std	Y+32, r1	; 0x20
    4ec0:	19 8e       	std	Y+25, r1	; 0x19
    4ec2:	1a 8e       	std	Y+26, r1	; 0x1a
    4ec4:	1b 8e       	std	Y+27, r1	; 0x1b
    4ec6:	1c 8e       	std	Y+28, r1	; 0x1c
			c = 0;
    4ec8:	10 92 3f 02 	sts	0x023F, r1
			TCNT1 = 0;
    4ecc:	ec e4       	ldi	r30, 0x4C	; 76
    4ece:	f0 e0       	ldi	r31, 0x00	; 0
    4ed0:	11 82       	std	Z+1, r1	; 0x01
    4ed2:	10 82       	st	Z, r1
			f = 0;
    4ed4:	10 92 3e 02 	sts	0x023E, r1

			DIO_void_Set_Pin_Value(PORTA_ID,trig1,HIGH);
    4ed8:	80 e0       	ldi	r24, 0x00	; 0
    4eda:	61 e0       	ldi	r22, 0x01	; 1
    4edc:	41 e0       	ldi	r20, 0x01	; 1
    4ede:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>
    4ee2:	80 e0       	ldi	r24, 0x00	; 0
    4ee4:	90 e0       	ldi	r25, 0x00	; 0
    4ee6:	a0 e2       	ldi	r26, 0x20	; 32
    4ee8:	b1 e4       	ldi	r27, 0x41	; 65
    4eea:	8d 8b       	std	Y+21, r24	; 0x15
    4eec:	9e 8b       	std	Y+22, r25	; 0x16
    4eee:	af 8b       	std	Y+23, r26	; 0x17
    4ef0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4ef2:	6d 89       	ldd	r22, Y+21	; 0x15
    4ef4:	7e 89       	ldd	r23, Y+22	; 0x16
    4ef6:	8f 89       	ldd	r24, Y+23	; 0x17
    4ef8:	98 8d       	ldd	r25, Y+24	; 0x18
    4efa:	2b ea       	ldi	r18, 0xAB	; 171
    4efc:	3a ea       	ldi	r19, 0xAA	; 170
    4efe:	4a e2       	ldi	r20, 0x2A	; 42
    4f00:	50 e4       	ldi	r21, 0x40	; 64
    4f02:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    4f06:	dc 01       	movw	r26, r24
    4f08:	cb 01       	movw	r24, r22
    4f0a:	89 8b       	std	Y+17, r24	; 0x11
    4f0c:	9a 8b       	std	Y+18, r25	; 0x12
    4f0e:	ab 8b       	std	Y+19, r26	; 0x13
    4f10:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4f12:	69 89       	ldd	r22, Y+17	; 0x11
    4f14:	7a 89       	ldd	r23, Y+18	; 0x12
    4f16:	8b 89       	ldd	r24, Y+19	; 0x13
    4f18:	9c 89       	ldd	r25, Y+20	; 0x14
    4f1a:	20 e0       	ldi	r18, 0x00	; 0
    4f1c:	30 e0       	ldi	r19, 0x00	; 0
    4f1e:	40 e8       	ldi	r20, 0x80	; 128
    4f20:	5f e3       	ldi	r21, 0x3F	; 63
    4f22:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    4f26:	88 23       	and	r24, r24
    4f28:	1c f4       	brge	.+6      	; 0x4f30 <Ultrasonic_back_Get_Distance+0x8c>
		__ticks = 1;
    4f2a:	81 e0       	ldi	r24, 0x01	; 1
    4f2c:	88 8b       	std	Y+16, r24	; 0x10
    4f2e:	91 c0       	rjmp	.+290    	; 0x5052 <Ultrasonic_back_Get_Distance+0x1ae>
	else if (__tmp > 255)
    4f30:	69 89       	ldd	r22, Y+17	; 0x11
    4f32:	7a 89       	ldd	r23, Y+18	; 0x12
    4f34:	8b 89       	ldd	r24, Y+19	; 0x13
    4f36:	9c 89       	ldd	r25, Y+20	; 0x14
    4f38:	20 e0       	ldi	r18, 0x00	; 0
    4f3a:	30 e0       	ldi	r19, 0x00	; 0
    4f3c:	4f e7       	ldi	r20, 0x7F	; 127
    4f3e:	53 e4       	ldi	r21, 0x43	; 67
    4f40:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    4f44:	18 16       	cp	r1, r24
    4f46:	0c f0       	brlt	.+2      	; 0x4f4a <Ultrasonic_back_Get_Distance+0xa6>
    4f48:	7b c0       	rjmp	.+246    	; 0x5040 <Ultrasonic_back_Get_Distance+0x19c>
	{
		_delay_ms(__us / 1000.0);
    4f4a:	6d 89       	ldd	r22, Y+21	; 0x15
    4f4c:	7e 89       	ldd	r23, Y+22	; 0x16
    4f4e:	8f 89       	ldd	r24, Y+23	; 0x17
    4f50:	98 8d       	ldd	r25, Y+24	; 0x18
    4f52:	20 e0       	ldi	r18, 0x00	; 0
    4f54:	30 e0       	ldi	r19, 0x00	; 0
    4f56:	4a e7       	ldi	r20, 0x7A	; 122
    4f58:	54 e4       	ldi	r21, 0x44	; 68
    4f5a:	0e 94 1c 10 	call	0x2038	; 0x2038 <__divsf3>
    4f5e:	dc 01       	movw	r26, r24
    4f60:	cb 01       	movw	r24, r22
    4f62:	8c 87       	std	Y+12, r24	; 0x0c
    4f64:	9d 87       	std	Y+13, r25	; 0x0d
    4f66:	ae 87       	std	Y+14, r26	; 0x0e
    4f68:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f6a:	6c 85       	ldd	r22, Y+12	; 0x0c
    4f6c:	7d 85       	ldd	r23, Y+13	; 0x0d
    4f6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f70:	9f 85       	ldd	r25, Y+15	; 0x0f
    4f72:	20 e0       	ldi	r18, 0x00	; 0
    4f74:	30 e0       	ldi	r19, 0x00	; 0
    4f76:	4a ef       	ldi	r20, 0xFA	; 250
    4f78:	54 e4       	ldi	r21, 0x44	; 68
    4f7a:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    4f7e:	dc 01       	movw	r26, r24
    4f80:	cb 01       	movw	r24, r22
    4f82:	88 87       	std	Y+8, r24	; 0x08
    4f84:	99 87       	std	Y+9, r25	; 0x09
    4f86:	aa 87       	std	Y+10, r26	; 0x0a
    4f88:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4f8a:	68 85       	ldd	r22, Y+8	; 0x08
    4f8c:	79 85       	ldd	r23, Y+9	; 0x09
    4f8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f90:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f92:	20 e0       	ldi	r18, 0x00	; 0
    4f94:	30 e0       	ldi	r19, 0x00	; 0
    4f96:	40 e8       	ldi	r20, 0x80	; 128
    4f98:	5f e3       	ldi	r21, 0x3F	; 63
    4f9a:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    4f9e:	88 23       	and	r24, r24
    4fa0:	2c f4       	brge	.+10     	; 0x4fac <Ultrasonic_back_Get_Distance+0x108>
		__ticks = 1;
    4fa2:	81 e0       	ldi	r24, 0x01	; 1
    4fa4:	90 e0       	ldi	r25, 0x00	; 0
    4fa6:	9f 83       	std	Y+7, r25	; 0x07
    4fa8:	8e 83       	std	Y+6, r24	; 0x06
    4faa:	3f c0       	rjmp	.+126    	; 0x502a <Ultrasonic_back_Get_Distance+0x186>
	else if (__tmp > 65535)
    4fac:	68 85       	ldd	r22, Y+8	; 0x08
    4fae:	79 85       	ldd	r23, Y+9	; 0x09
    4fb0:	8a 85       	ldd	r24, Y+10	; 0x0a
    4fb2:	9b 85       	ldd	r25, Y+11	; 0x0b
    4fb4:	20 e0       	ldi	r18, 0x00	; 0
    4fb6:	3f ef       	ldi	r19, 0xFF	; 255
    4fb8:	4f e7       	ldi	r20, 0x7F	; 127
    4fba:	57 e4       	ldi	r21, 0x47	; 71
    4fbc:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    4fc0:	18 16       	cp	r1, r24
    4fc2:	4c f5       	brge	.+82     	; 0x5016 <Ultrasonic_back_Get_Distance+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fc4:	6c 85       	ldd	r22, Y+12	; 0x0c
    4fc6:	7d 85       	ldd	r23, Y+13	; 0x0d
    4fc8:	8e 85       	ldd	r24, Y+14	; 0x0e
    4fca:	9f 85       	ldd	r25, Y+15	; 0x0f
    4fcc:	20 e0       	ldi	r18, 0x00	; 0
    4fce:	30 e0       	ldi	r19, 0x00	; 0
    4fd0:	40 e2       	ldi	r20, 0x20	; 32
    4fd2:	51 e4       	ldi	r21, 0x41	; 65
    4fd4:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    4fd8:	dc 01       	movw	r26, r24
    4fda:	cb 01       	movw	r24, r22
    4fdc:	bc 01       	movw	r22, r24
    4fde:	cd 01       	movw	r24, r26
    4fe0:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    4fe4:	dc 01       	movw	r26, r24
    4fe6:	cb 01       	movw	r24, r22
    4fe8:	9f 83       	std	Y+7, r25	; 0x07
    4fea:	8e 83       	std	Y+6, r24	; 0x06
    4fec:	0f c0       	rjmp	.+30     	; 0x500c <Ultrasonic_back_Get_Distance+0x168>
    4fee:	88 ec       	ldi	r24, 0xC8	; 200
    4ff0:	90 e0       	ldi	r25, 0x00	; 0
    4ff2:	9d 83       	std	Y+5, r25	; 0x05
    4ff4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4ff6:	8c 81       	ldd	r24, Y+4	; 0x04
    4ff8:	9d 81       	ldd	r25, Y+5	; 0x05
    4ffa:	01 97       	sbiw	r24, 0x01	; 1
    4ffc:	f1 f7       	brne	.-4      	; 0x4ffa <Ultrasonic_back_Get_Distance+0x156>
    4ffe:	9d 83       	std	Y+5, r25	; 0x05
    5000:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5002:	8e 81       	ldd	r24, Y+6	; 0x06
    5004:	9f 81       	ldd	r25, Y+7	; 0x07
    5006:	01 97       	sbiw	r24, 0x01	; 1
    5008:	9f 83       	std	Y+7, r25	; 0x07
    500a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    500c:	8e 81       	ldd	r24, Y+6	; 0x06
    500e:	9f 81       	ldd	r25, Y+7	; 0x07
    5010:	00 97       	sbiw	r24, 0x00	; 0
    5012:	69 f7       	brne	.-38     	; 0x4fee <Ultrasonic_back_Get_Distance+0x14a>
    5014:	24 c0       	rjmp	.+72     	; 0x505e <Ultrasonic_back_Get_Distance+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5016:	68 85       	ldd	r22, Y+8	; 0x08
    5018:	79 85       	ldd	r23, Y+9	; 0x09
    501a:	8a 85       	ldd	r24, Y+10	; 0x0a
    501c:	9b 85       	ldd	r25, Y+11	; 0x0b
    501e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5022:	dc 01       	movw	r26, r24
    5024:	cb 01       	movw	r24, r22
    5026:	9f 83       	std	Y+7, r25	; 0x07
    5028:	8e 83       	std	Y+6, r24	; 0x06
    502a:	8e 81       	ldd	r24, Y+6	; 0x06
    502c:	9f 81       	ldd	r25, Y+7	; 0x07
    502e:	9b 83       	std	Y+3, r25	; 0x03
    5030:	8a 83       	std	Y+2, r24	; 0x02
    5032:	8a 81       	ldd	r24, Y+2	; 0x02
    5034:	9b 81       	ldd	r25, Y+3	; 0x03
    5036:	01 97       	sbiw	r24, 0x01	; 1
    5038:	f1 f7       	brne	.-4      	; 0x5036 <Ultrasonic_back_Get_Distance+0x192>
    503a:	9b 83       	std	Y+3, r25	; 0x03
    503c:	8a 83       	std	Y+2, r24	; 0x02
    503e:	0f c0       	rjmp	.+30     	; 0x505e <Ultrasonic_back_Get_Distance+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5040:	69 89       	ldd	r22, Y+17	; 0x11
    5042:	7a 89       	ldd	r23, Y+18	; 0x12
    5044:	8b 89       	ldd	r24, Y+19	; 0x13
    5046:	9c 89       	ldd	r25, Y+20	; 0x14
    5048:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    504c:	dc 01       	movw	r26, r24
    504e:	cb 01       	movw	r24, r22
    5050:	88 8b       	std	Y+16, r24	; 0x10
    5052:	88 89       	ldd	r24, Y+16	; 0x10
    5054:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5056:	89 81       	ldd	r24, Y+1	; 0x01
    5058:	8a 95       	dec	r24
    505a:	f1 f7       	brne	.-4      	; 0x5058 <Ultrasonic_back_Get_Distance+0x1b4>
    505c:	89 83       	std	Y+1, r24	; 0x01
			_delay_us(10);
			DIO_void_Set_Pin_Value(PORTA_ID,trig1,LOW);
    505e:	80 e0       	ldi	r24, 0x00	; 0
    5060:	61 e0       	ldi	r22, 0x01	; 1
    5062:	40 e0       	ldi	r20, 0x00	; 0
    5064:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>

			 Timer1_InputCaptureEdge(Rising);
    5068:	81 e0       	ldi	r24, 0x01	; 1
    506a:	0e 94 10 1b 	call	0x3620	; 0x3620 <Timer1_InputCaptureEdge>
	         Timer1_ICU_InterruptEnable();
    506e:	0e 94 2f 1b 	call	0x365e	; 0x365e <Timer1_ICU_InterruptEnable>
			 while(f<2);
    5072:	80 91 3e 02 	lds	r24, 0x023E
    5076:	82 30       	cpi	r24, 0x02	; 2
    5078:	e0 f3       	brcs	.-8      	; 0x5072 <Ultrasonic_back_Get_Distance+0x1ce>
			 time = (t2-t1);
    507a:	20 91 42 02 	lds	r18, 0x0242
    507e:	30 91 43 02 	lds	r19, 0x0243
    5082:	80 91 40 02 	lds	r24, 0x0240
    5086:	90 91 41 02 	lds	r25, 0x0241
    508a:	a9 01       	movw	r20, r18
    508c:	48 1b       	sub	r20, r24
    508e:	59 0b       	sbc	r21, r25
    5090:	ca 01       	movw	r24, r20
    5092:	cc 01       	movw	r24, r24
    5094:	a0 e0       	ldi	r26, 0x00	; 0
    5096:	b0 e0       	ldi	r27, 0x00	; 0
    5098:	8d 8f       	std	Y+29, r24	; 0x1d
    509a:	9e 8f       	std	Y+30, r25	; 0x1e
    509c:	af 8f       	std	Y+31, r26	; 0x1f
    509e:	b8 a3       	std	Y+32, r27	; 0x20
			 distance = time /58;
    50a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    50a4:	af 8d       	ldd	r26, Y+31	; 0x1f
    50a6:	b8 a1       	ldd	r27, Y+32	; 0x20
    50a8:	2a e3       	ldi	r18, 0x3A	; 58
    50aa:	30 e0       	ldi	r19, 0x00	; 0
    50ac:	40 e0       	ldi	r20, 0x00	; 0
    50ae:	50 e0       	ldi	r21, 0x00	; 0
    50b0:	bc 01       	movw	r22, r24
    50b2:	cd 01       	movw	r24, r26
    50b4:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    50b8:	da 01       	movw	r26, r20
    50ba:	c9 01       	movw	r24, r18
    50bc:	89 8f       	std	Y+25, r24	; 0x19
    50be:	9a 8f       	std	Y+26, r25	; 0x1a
    50c0:	ab 8f       	std	Y+27, r26	; 0x1b
    50c2:	bc 8f       	std	Y+28, r27	; 0x1c
			 Timer1_ICU_InterruptDisable();
    50c4:	0e 94 3d 1b 	call	0x367a	; 0x367a <Timer1_ICU_InterruptDisable>


			 return distance;
    50c8:	89 8d       	ldd	r24, Y+25	; 0x19
    50ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    50cc:	ab 8d       	ldd	r26, Y+27	; 0x1b
    50ce:	bc 8d       	ldd	r27, Y+28	; 0x1c
}
    50d0:	bc 01       	movw	r22, r24
    50d2:	cd 01       	movw	r24, r26
    50d4:	a0 96       	adiw	r28, 0x20	; 32
    50d6:	0f b6       	in	r0, 0x3f	; 63
    50d8:	f8 94       	cli
    50da:	de bf       	out	0x3e, r29	; 62
    50dc:	0f be       	out	0x3f, r0	; 63
    50de:	cd bf       	out	0x3d, r28	; 61
    50e0:	cf 91       	pop	r28
    50e2:	df 91       	pop	r29
    50e4:	08 95       	ret

000050e6 <Ultrasonic_back2_Get_Distance>:
uint32 Ultrasonic_back2_Get_Distance(void)
{
    50e6:	df 93       	push	r29
    50e8:	cf 93       	push	r28
    50ea:	cd b7       	in	r28, 0x3d	; 61
    50ec:	de b7       	in	r29, 0x3e	; 62
    50ee:	a0 97       	sbiw	r28, 0x20	; 32
    50f0:	0f b6       	in	r0, 0x3f	; 63
    50f2:	f8 94       	cli
    50f4:	de bf       	out	0x3e, r29	; 62
    50f6:	0f be       	out	0x3f, r0	; 63
    50f8:	cd bf       	out	0x3d, r28	; 61
	uint32 time=0,distance=0;
    50fa:	1d 8e       	std	Y+29, r1	; 0x1d
    50fc:	1e 8e       	std	Y+30, r1	; 0x1e
    50fe:	1f 8e       	std	Y+31, r1	; 0x1f
    5100:	18 a2       	std	Y+32, r1	; 0x20
    5102:	19 8e       	std	Y+25, r1	; 0x19
    5104:	1a 8e       	std	Y+26, r1	; 0x1a
    5106:	1b 8e       	std	Y+27, r1	; 0x1b
    5108:	1c 8e       	std	Y+28, r1	; 0x1c
				c = 0;
    510a:	10 92 3f 02 	sts	0x023F, r1
				TCNT1 = 0;
    510e:	ec e4       	ldi	r30, 0x4C	; 76
    5110:	f0 e0       	ldi	r31, 0x00	; 0
    5112:	11 82       	std	Z+1, r1	; 0x01
    5114:	10 82       	st	Z, r1
				f = 0;
    5116:	10 92 3e 02 	sts	0x023E, r1

				DIO_void_Set_Pin_Value(PORTA_ID,trig4,HIGH);
    511a:	80 e0       	ldi	r24, 0x00	; 0
    511c:	65 e0       	ldi	r22, 0x05	; 5
    511e:	41 e0       	ldi	r20, 0x01	; 1
    5120:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>
    5124:	80 e0       	ldi	r24, 0x00	; 0
    5126:	90 e0       	ldi	r25, 0x00	; 0
    5128:	a0 e2       	ldi	r26, 0x20	; 32
    512a:	b1 e4       	ldi	r27, 0x41	; 65
    512c:	8d 8b       	std	Y+21, r24	; 0x15
    512e:	9e 8b       	std	Y+22, r25	; 0x16
    5130:	af 8b       	std	Y+23, r26	; 0x17
    5132:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5134:	6d 89       	ldd	r22, Y+21	; 0x15
    5136:	7e 89       	ldd	r23, Y+22	; 0x16
    5138:	8f 89       	ldd	r24, Y+23	; 0x17
    513a:	98 8d       	ldd	r25, Y+24	; 0x18
    513c:	2b ea       	ldi	r18, 0xAB	; 171
    513e:	3a ea       	ldi	r19, 0xAA	; 170
    5140:	4a e2       	ldi	r20, 0x2A	; 42
    5142:	50 e4       	ldi	r21, 0x40	; 64
    5144:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5148:	dc 01       	movw	r26, r24
    514a:	cb 01       	movw	r24, r22
    514c:	89 8b       	std	Y+17, r24	; 0x11
    514e:	9a 8b       	std	Y+18, r25	; 0x12
    5150:	ab 8b       	std	Y+19, r26	; 0x13
    5152:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5154:	69 89       	ldd	r22, Y+17	; 0x11
    5156:	7a 89       	ldd	r23, Y+18	; 0x12
    5158:	8b 89       	ldd	r24, Y+19	; 0x13
    515a:	9c 89       	ldd	r25, Y+20	; 0x14
    515c:	20 e0       	ldi	r18, 0x00	; 0
    515e:	30 e0       	ldi	r19, 0x00	; 0
    5160:	40 e8       	ldi	r20, 0x80	; 128
    5162:	5f e3       	ldi	r21, 0x3F	; 63
    5164:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    5168:	88 23       	and	r24, r24
    516a:	1c f4       	brge	.+6      	; 0x5172 <Ultrasonic_back2_Get_Distance+0x8c>
		__ticks = 1;
    516c:	81 e0       	ldi	r24, 0x01	; 1
    516e:	88 8b       	std	Y+16, r24	; 0x10
    5170:	91 c0       	rjmp	.+290    	; 0x5294 <Ultrasonic_back2_Get_Distance+0x1ae>
	else if (__tmp > 255)
    5172:	69 89       	ldd	r22, Y+17	; 0x11
    5174:	7a 89       	ldd	r23, Y+18	; 0x12
    5176:	8b 89       	ldd	r24, Y+19	; 0x13
    5178:	9c 89       	ldd	r25, Y+20	; 0x14
    517a:	20 e0       	ldi	r18, 0x00	; 0
    517c:	30 e0       	ldi	r19, 0x00	; 0
    517e:	4f e7       	ldi	r20, 0x7F	; 127
    5180:	53 e4       	ldi	r21, 0x43	; 67
    5182:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    5186:	18 16       	cp	r1, r24
    5188:	0c f0       	brlt	.+2      	; 0x518c <Ultrasonic_back2_Get_Distance+0xa6>
    518a:	7b c0       	rjmp	.+246    	; 0x5282 <Ultrasonic_back2_Get_Distance+0x19c>
	{
		_delay_ms(__us / 1000.0);
    518c:	6d 89       	ldd	r22, Y+21	; 0x15
    518e:	7e 89       	ldd	r23, Y+22	; 0x16
    5190:	8f 89       	ldd	r24, Y+23	; 0x17
    5192:	98 8d       	ldd	r25, Y+24	; 0x18
    5194:	20 e0       	ldi	r18, 0x00	; 0
    5196:	30 e0       	ldi	r19, 0x00	; 0
    5198:	4a e7       	ldi	r20, 0x7A	; 122
    519a:	54 e4       	ldi	r21, 0x44	; 68
    519c:	0e 94 1c 10 	call	0x2038	; 0x2038 <__divsf3>
    51a0:	dc 01       	movw	r26, r24
    51a2:	cb 01       	movw	r24, r22
    51a4:	8c 87       	std	Y+12, r24	; 0x0c
    51a6:	9d 87       	std	Y+13, r25	; 0x0d
    51a8:	ae 87       	std	Y+14, r26	; 0x0e
    51aa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    51ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    51b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    51b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    51b4:	20 e0       	ldi	r18, 0x00	; 0
    51b6:	30 e0       	ldi	r19, 0x00	; 0
    51b8:	4a ef       	ldi	r20, 0xFA	; 250
    51ba:	54 e4       	ldi	r21, 0x44	; 68
    51bc:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    51c0:	dc 01       	movw	r26, r24
    51c2:	cb 01       	movw	r24, r22
    51c4:	88 87       	std	Y+8, r24	; 0x08
    51c6:	99 87       	std	Y+9, r25	; 0x09
    51c8:	aa 87       	std	Y+10, r26	; 0x0a
    51ca:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    51cc:	68 85       	ldd	r22, Y+8	; 0x08
    51ce:	79 85       	ldd	r23, Y+9	; 0x09
    51d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    51d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    51d4:	20 e0       	ldi	r18, 0x00	; 0
    51d6:	30 e0       	ldi	r19, 0x00	; 0
    51d8:	40 e8       	ldi	r20, 0x80	; 128
    51da:	5f e3       	ldi	r21, 0x3F	; 63
    51dc:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    51e0:	88 23       	and	r24, r24
    51e2:	2c f4       	brge	.+10     	; 0x51ee <Ultrasonic_back2_Get_Distance+0x108>
		__ticks = 1;
    51e4:	81 e0       	ldi	r24, 0x01	; 1
    51e6:	90 e0       	ldi	r25, 0x00	; 0
    51e8:	9f 83       	std	Y+7, r25	; 0x07
    51ea:	8e 83       	std	Y+6, r24	; 0x06
    51ec:	3f c0       	rjmp	.+126    	; 0x526c <Ultrasonic_back2_Get_Distance+0x186>
	else if (__tmp > 65535)
    51ee:	68 85       	ldd	r22, Y+8	; 0x08
    51f0:	79 85       	ldd	r23, Y+9	; 0x09
    51f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    51f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    51f6:	20 e0       	ldi	r18, 0x00	; 0
    51f8:	3f ef       	ldi	r19, 0xFF	; 255
    51fa:	4f e7       	ldi	r20, 0x7F	; 127
    51fc:	57 e4       	ldi	r21, 0x47	; 71
    51fe:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    5202:	18 16       	cp	r1, r24
    5204:	4c f5       	brge	.+82     	; 0x5258 <Ultrasonic_back2_Get_Distance+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5206:	6c 85       	ldd	r22, Y+12	; 0x0c
    5208:	7d 85       	ldd	r23, Y+13	; 0x0d
    520a:	8e 85       	ldd	r24, Y+14	; 0x0e
    520c:	9f 85       	ldd	r25, Y+15	; 0x0f
    520e:	20 e0       	ldi	r18, 0x00	; 0
    5210:	30 e0       	ldi	r19, 0x00	; 0
    5212:	40 e2       	ldi	r20, 0x20	; 32
    5214:	51 e4       	ldi	r21, 0x41	; 65
    5216:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    521a:	dc 01       	movw	r26, r24
    521c:	cb 01       	movw	r24, r22
    521e:	bc 01       	movw	r22, r24
    5220:	cd 01       	movw	r24, r26
    5222:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5226:	dc 01       	movw	r26, r24
    5228:	cb 01       	movw	r24, r22
    522a:	9f 83       	std	Y+7, r25	; 0x07
    522c:	8e 83       	std	Y+6, r24	; 0x06
    522e:	0f c0       	rjmp	.+30     	; 0x524e <Ultrasonic_back2_Get_Distance+0x168>
    5230:	88 ec       	ldi	r24, 0xC8	; 200
    5232:	90 e0       	ldi	r25, 0x00	; 0
    5234:	9d 83       	std	Y+5, r25	; 0x05
    5236:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5238:	8c 81       	ldd	r24, Y+4	; 0x04
    523a:	9d 81       	ldd	r25, Y+5	; 0x05
    523c:	01 97       	sbiw	r24, 0x01	; 1
    523e:	f1 f7       	brne	.-4      	; 0x523c <Ultrasonic_back2_Get_Distance+0x156>
    5240:	9d 83       	std	Y+5, r25	; 0x05
    5242:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5244:	8e 81       	ldd	r24, Y+6	; 0x06
    5246:	9f 81       	ldd	r25, Y+7	; 0x07
    5248:	01 97       	sbiw	r24, 0x01	; 1
    524a:	9f 83       	std	Y+7, r25	; 0x07
    524c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    524e:	8e 81       	ldd	r24, Y+6	; 0x06
    5250:	9f 81       	ldd	r25, Y+7	; 0x07
    5252:	00 97       	sbiw	r24, 0x00	; 0
    5254:	69 f7       	brne	.-38     	; 0x5230 <Ultrasonic_back2_Get_Distance+0x14a>
    5256:	24 c0       	rjmp	.+72     	; 0x52a0 <Ultrasonic_back2_Get_Distance+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5258:	68 85       	ldd	r22, Y+8	; 0x08
    525a:	79 85       	ldd	r23, Y+9	; 0x09
    525c:	8a 85       	ldd	r24, Y+10	; 0x0a
    525e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5260:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5264:	dc 01       	movw	r26, r24
    5266:	cb 01       	movw	r24, r22
    5268:	9f 83       	std	Y+7, r25	; 0x07
    526a:	8e 83       	std	Y+6, r24	; 0x06
    526c:	8e 81       	ldd	r24, Y+6	; 0x06
    526e:	9f 81       	ldd	r25, Y+7	; 0x07
    5270:	9b 83       	std	Y+3, r25	; 0x03
    5272:	8a 83       	std	Y+2, r24	; 0x02
    5274:	8a 81       	ldd	r24, Y+2	; 0x02
    5276:	9b 81       	ldd	r25, Y+3	; 0x03
    5278:	01 97       	sbiw	r24, 0x01	; 1
    527a:	f1 f7       	brne	.-4      	; 0x5278 <Ultrasonic_back2_Get_Distance+0x192>
    527c:	9b 83       	std	Y+3, r25	; 0x03
    527e:	8a 83       	std	Y+2, r24	; 0x02
    5280:	0f c0       	rjmp	.+30     	; 0x52a0 <Ultrasonic_back2_Get_Distance+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5282:	69 89       	ldd	r22, Y+17	; 0x11
    5284:	7a 89       	ldd	r23, Y+18	; 0x12
    5286:	8b 89       	ldd	r24, Y+19	; 0x13
    5288:	9c 89       	ldd	r25, Y+20	; 0x14
    528a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    528e:	dc 01       	movw	r26, r24
    5290:	cb 01       	movw	r24, r22
    5292:	88 8b       	std	Y+16, r24	; 0x10
    5294:	88 89       	ldd	r24, Y+16	; 0x10
    5296:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5298:	89 81       	ldd	r24, Y+1	; 0x01
    529a:	8a 95       	dec	r24
    529c:	f1 f7       	brne	.-4      	; 0x529a <Ultrasonic_back2_Get_Distance+0x1b4>
    529e:	89 83       	std	Y+1, r24	; 0x01
				_delay_us(10);
				DIO_void_Set_Pin_Value(PORTA_ID,trig4,LOW);
    52a0:	80 e0       	ldi	r24, 0x00	; 0
    52a2:	65 e0       	ldi	r22, 0x05	; 5
    52a4:	40 e0       	ldi	r20, 0x00	; 0
    52a6:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>

				 Timer1_InputCaptureEdge(Rising);
    52aa:	81 e0       	ldi	r24, 0x01	; 1
    52ac:	0e 94 10 1b 	call	0x3620	; 0x3620 <Timer1_InputCaptureEdge>
		         Timer1_ICU_InterruptEnable();
    52b0:	0e 94 2f 1b 	call	0x365e	; 0x365e <Timer1_ICU_InterruptEnable>
				 while(f<2);
    52b4:	80 91 3e 02 	lds	r24, 0x023E
    52b8:	82 30       	cpi	r24, 0x02	; 2
    52ba:	e0 f3       	brcs	.-8      	; 0x52b4 <Ultrasonic_back2_Get_Distance+0x1ce>
				 time = (t2-t1);
    52bc:	20 91 42 02 	lds	r18, 0x0242
    52c0:	30 91 43 02 	lds	r19, 0x0243
    52c4:	80 91 40 02 	lds	r24, 0x0240
    52c8:	90 91 41 02 	lds	r25, 0x0241
    52cc:	a9 01       	movw	r20, r18
    52ce:	48 1b       	sub	r20, r24
    52d0:	59 0b       	sbc	r21, r25
    52d2:	ca 01       	movw	r24, r20
    52d4:	cc 01       	movw	r24, r24
    52d6:	a0 e0       	ldi	r26, 0x00	; 0
    52d8:	b0 e0       	ldi	r27, 0x00	; 0
    52da:	8d 8f       	std	Y+29, r24	; 0x1d
    52dc:	9e 8f       	std	Y+30, r25	; 0x1e
    52de:	af 8f       	std	Y+31, r26	; 0x1f
    52e0:	b8 a3       	std	Y+32, r27	; 0x20
				 distance = time /58;
    52e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    52e6:	af 8d       	ldd	r26, Y+31	; 0x1f
    52e8:	b8 a1       	ldd	r27, Y+32	; 0x20
    52ea:	2a e3       	ldi	r18, 0x3A	; 58
    52ec:	30 e0       	ldi	r19, 0x00	; 0
    52ee:	40 e0       	ldi	r20, 0x00	; 0
    52f0:	50 e0       	ldi	r21, 0x00	; 0
    52f2:	bc 01       	movw	r22, r24
    52f4:	cd 01       	movw	r24, r26
    52f6:	0e 94 af 3a 	call	0x755e	; 0x755e <__udivmodsi4>
    52fa:	da 01       	movw	r26, r20
    52fc:	c9 01       	movw	r24, r18
    52fe:	89 8f       	std	Y+25, r24	; 0x19
    5300:	9a 8f       	std	Y+26, r25	; 0x1a
    5302:	ab 8f       	std	Y+27, r26	; 0x1b
    5304:	bc 8f       	std	Y+28, r27	; 0x1c
				 Timer1_ICU_InterruptDisable();
    5306:	0e 94 3d 1b 	call	0x367a	; 0x367a <Timer1_ICU_InterruptDisable>


				 return distance;
    530a:	89 8d       	ldd	r24, Y+25	; 0x19
    530c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    530e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    5310:	bc 8d       	ldd	r27, Y+28	; 0x1c
}
    5312:	bc 01       	movw	r22, r24
    5314:	cd 01       	movw	r24, r26
    5316:	a0 96       	adiw	r28, 0x20	; 32
    5318:	0f b6       	in	r0, 0x3f	; 63
    531a:	f8 94       	cli
    531c:	de bf       	out	0x3e, r29	; 62
    531e:	0f be       	out	0x3f, r0	; 63
    5320:	cd bf       	out	0x3d, r28	; 61
    5322:	cf 91       	pop	r28
    5324:	df 91       	pop	r29
    5326:	08 95       	ret

00005328 <__vector_11>:
ISR(TIMER1_CAPT_vect)
{
    5328:	1f 92       	push	r1
    532a:	0f 92       	push	r0
    532c:	0f b6       	in	r0, 0x3f	; 63
    532e:	0f 92       	push	r0
    5330:	00 90 5b 00 	lds	r0, 0x005B
    5334:	0f 92       	push	r0
    5336:	11 24       	eor	r1, r1
    5338:	2f 93       	push	r18
    533a:	3f 93       	push	r19
    533c:	4f 93       	push	r20
    533e:	5f 93       	push	r21
    5340:	6f 93       	push	r22
    5342:	7f 93       	push	r23
    5344:	8f 93       	push	r24
    5346:	9f 93       	push	r25
    5348:	af 93       	push	r26
    534a:	bf 93       	push	r27
    534c:	ef 93       	push	r30
    534e:	ff 93       	push	r31
    5350:	df 93       	push	r29
    5352:	cf 93       	push	r28
    5354:	cd b7       	in	r28, 0x3d	; 61
    5356:	de b7       	in	r29, 0x3e	; 62
if(f==0)
    5358:	80 91 3e 02 	lds	r24, 0x023E
    535c:	88 23       	and	r24, r24
    535e:	79 f4       	brne	.+30     	; 0x537e <__vector_11+0x56>
{
	t1=ICR1;
    5360:	e6 e4       	ldi	r30, 0x46	; 70
    5362:	f0 e0       	ldi	r31, 0x00	; 0
    5364:	80 81       	ld	r24, Z
    5366:	91 81       	ldd	r25, Z+1	; 0x01
    5368:	90 93 41 02 	sts	0x0241, r25
    536c:	80 93 40 02 	sts	0x0240, r24
	f=1;
    5370:	81 e0       	ldi	r24, 0x01	; 1
    5372:	80 93 3e 02 	sts	0x023E, r24

Timer1_InputCaptureEdge(Falling);
    5376:	80 e0       	ldi	r24, 0x00	; 0
    5378:	0e 94 10 1b 	call	0x3620	; 0x3620 <Timer1_InputCaptureEdge>
    537c:	0f c0       	rjmp	.+30     	; 0x539c <__vector_11+0x74>
}

else if(f==1)
    537e:	80 91 3e 02 	lds	r24, 0x023E
    5382:	81 30       	cpi	r24, 0x01	; 1
    5384:	59 f4       	brne	.+22     	; 0x539c <__vector_11+0x74>
{
	t2=ICR1;
    5386:	e6 e4       	ldi	r30, 0x46	; 70
    5388:	f0 e0       	ldi	r31, 0x00	; 0
    538a:	80 81       	ld	r24, Z
    538c:	91 81       	ldd	r25, Z+1	; 0x01
    538e:	90 93 43 02 	sts	0x0243, r25
    5392:	80 93 42 02 	sts	0x0242, r24
	f=2;
    5396:	82 e0       	ldi	r24, 0x02	; 2
    5398:	80 93 3e 02 	sts	0x023E, r24

}
}
    539c:	cf 91       	pop	r28
    539e:	df 91       	pop	r29
    53a0:	ff 91       	pop	r31
    53a2:	ef 91       	pop	r30
    53a4:	bf 91       	pop	r27
    53a6:	af 91       	pop	r26
    53a8:	9f 91       	pop	r25
    53aa:	8f 91       	pop	r24
    53ac:	7f 91       	pop	r23
    53ae:	6f 91       	pop	r22
    53b0:	5f 91       	pop	r21
    53b2:	4f 91       	pop	r20
    53b4:	3f 91       	pop	r19
    53b6:	2f 91       	pop	r18
    53b8:	0f 90       	pop	r0
    53ba:	00 92 5b 00 	sts	0x005B, r0
    53be:	0f 90       	pop	r0
    53c0:	0f be       	out	0x3f, r0	; 63
    53c2:	0f 90       	pop	r0
    53c4:	1f 90       	pop	r1
    53c6:	18 95       	reti

000053c8 <__vector_14>:


ISR(TIMER1_OVF_vect)
{
    53c8:	1f 92       	push	r1
    53ca:	0f 92       	push	r0
    53cc:	0f b6       	in	r0, 0x3f	; 63
    53ce:	0f 92       	push	r0
    53d0:	11 24       	eor	r1, r1
    53d2:	8f 93       	push	r24
    53d4:	df 93       	push	r29
    53d6:	cf 93       	push	r28
    53d8:	cd b7       	in	r28, 0x3d	; 61
    53da:	de b7       	in	r29, 0x3e	; 62
		c++;
    53dc:	80 91 3f 02 	lds	r24, 0x023F
    53e0:	8f 5f       	subi	r24, 0xFF	; 255
    53e2:	80 93 3f 02 	sts	0x023F, r24
}
    53e6:	cf 91       	pop	r28
    53e8:	df 91       	pop	r29
    53ea:	8f 91       	pop	r24
    53ec:	0f 90       	pop	r0
    53ee:	0f be       	out	0x3f, r0	; 63
    53f0:	0f 90       	pop	r0
    53f2:	1f 90       	pop	r1
    53f4:	18 95       	reti

000053f6 <LCD_vidDirections>:
#include"LCD_V2.h"
void LCD_vidDirections(void)
{
    53f6:	df 93       	push	r29
    53f8:	cf 93       	push	r28
    53fa:	cd b7       	in	r28, 0x3d	; 61
    53fc:	de b7       	in	r29, 0x3e	; 62
//SET LCD_PORT AS OUTPUT FOR DATA OF LCD
DIO_void_Set_Port_Dirction(LCD_PORT,0XFF);
    53fe:	82 e0       	ldi	r24, 0x02	; 2
    5400:	6f ef       	ldi	r22, 0xFF	; 255
    5402:	0e 94 96 21 	call	0x432c	; 0x432c <DIO_void_Set_Port_Dirction>

//SET  AS O/P FOR RS AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,RS,OUTPUT);
    5406:	81 e0       	ldi	r24, 0x01	; 1
    5408:	65 e0       	ldi	r22, 0x05	; 5
    540a:	41 e0       	ldi	r20, 0x01	; 1
    540c:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <DIO_void_Set_Pin_Dirction>

//SET  AS O/P FOR R/W AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,RW,OUTPUT);
    5410:	81 e0       	ldi	r24, 0x01	; 1
    5412:	66 e0       	ldi	r22, 0x06	; 6
    5414:	41 e0       	ldi	r20, 0x01	; 1
    5416:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <DIO_void_Set_Pin_Dirction>

//SET AS O/P FOR E AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,E,OUTPUT);
    541a:	81 e0       	ldi	r24, 0x01	; 1
    541c:	67 e0       	ldi	r22, 0x07	; 7
    541e:	41 e0       	ldi	r20, 0x01	; 1
    5420:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <DIO_void_Set_Pin_Dirction>
}
    5424:	cf 91       	pop	r28
    5426:	df 91       	pop	r29
    5428:	08 95       	ret

0000542a <LCD_vidDirections4>:
//..................................................................................

void LCD_vidDirections4(void)
{
    542a:	df 93       	push	r29
    542c:	cf 93       	push	r28
    542e:	cd b7       	in	r28, 0x3d	; 61
    5430:	de b7       	in	r29, 0x3e	; 62
//SET PORTD 4,5,6,7 AS OUTPUT FOR DATA OF LCD
DIO_void_Set_Pin_Dirction( LCD_PORT, Fourbit_4,OUTPUT);
    5432:	82 e0       	ldi	r24, 0x02	; 2
    5434:	64 e0       	ldi	r22, 0x04	; 4
    5436:	41 e0       	ldi	r20, 0x01	; 1
    5438:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <DIO_void_Set_Pin_Dirction>
DIO_void_Set_Pin_Dirction( LCD_PORT, Fourbit_5,OUTPUT);
    543c:	82 e0       	ldi	r24, 0x02	; 2
    543e:	65 e0       	ldi	r22, 0x05	; 5
    5440:	41 e0       	ldi	r20, 0x01	; 1
    5442:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <DIO_void_Set_Pin_Dirction>
DIO_void_Set_Pin_Dirction( LCD_PORT, Fourbit_6,OUTPUT);
    5446:	82 e0       	ldi	r24, 0x02	; 2
    5448:	66 e0       	ldi	r22, 0x06	; 6
    544a:	41 e0       	ldi	r20, 0x01	; 1
    544c:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <DIO_void_Set_Pin_Dirction>
DIO_void_Set_Pin_Dirction( LCD_PORT, Fourbit_7,OUTPUT);
    5450:	82 e0       	ldi	r24, 0x02	; 2
    5452:	67 e0       	ldi	r22, 0x07	; 7
    5454:	41 e0       	ldi	r20, 0x01	; 1
    5456:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <DIO_void_Set_Pin_Dirction>
//SET PIN 0 AS O/P FOR RS AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,RS,OUTPUT);
    545a:	81 e0       	ldi	r24, 0x01	; 1
    545c:	65 e0       	ldi	r22, 0x05	; 5
    545e:	41 e0       	ldi	r20, 0x01	; 1
    5460:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <DIO_void_Set_Pin_Dirction>
//SET PIN 1 AS O/P FOR R/W AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,RW,OUTPUT);
    5464:	81 e0       	ldi	r24, 0x01	; 1
    5466:	66 e0       	ldi	r22, 0x06	; 6
    5468:	41 e0       	ldi	r20, 0x01	; 1
    546a:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <DIO_void_Set_Pin_Dirction>

//SET PIN 2 AS O/P FOR E AT LCD
DIO_void_Set_Pin_Dirction(LCD_CONTROL_PORT,E,OUTPUT);
    546e:	81 e0       	ldi	r24, 0x01	; 1
    5470:	67 e0       	ldi	r22, 0x07	; 7
    5472:	41 e0       	ldi	r20, 0x01	; 1
    5474:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <DIO_void_Set_Pin_Dirction>
}
    5478:	cf 91       	pop	r28
    547a:	df 91       	pop	r29
    547c:	08 95       	ret

0000547e <LCD_vidInit>:
//..............................................................
void LCD_vidInit(void)
{
    547e:	0f 93       	push	r16
    5480:	1f 93       	push	r17
    5482:	df 93       	push	r29
    5484:	cf 93       	push	r28
    5486:	cd b7       	in	r28, 0x3d	; 61
    5488:	de b7       	in	r29, 0x3e	; 62
    548a:	c6 54       	subi	r28, 0x46	; 70
    548c:	d0 40       	sbci	r29, 0x00	; 0
    548e:	0f b6       	in	r0, 0x3f	; 63
    5490:	f8 94       	cli
    5492:	de bf       	out	0x3e, r29	; 62
    5494:	0f be       	out	0x3f, r0	; 63
    5496:	cd bf       	out	0x3d, r28	; 61
    5498:	fe 01       	movw	r30, r28
    549a:	ed 5b       	subi	r30, 0xBD	; 189
    549c:	ff 4f       	sbci	r31, 0xFF	; 255
    549e:	80 e0       	ldi	r24, 0x00	; 0
    54a0:	90 e0       	ldi	r25, 0x00	; 0
    54a2:	a8 e4       	ldi	r26, 0x48	; 72
    54a4:	b2 e4       	ldi	r27, 0x42	; 66
    54a6:	80 83       	st	Z, r24
    54a8:	91 83       	std	Z+1, r25	; 0x01
    54aa:	a2 83       	std	Z+2, r26	; 0x02
    54ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54ae:	8e 01       	movw	r16, r28
    54b0:	01 5c       	subi	r16, 0xC1	; 193
    54b2:	1f 4f       	sbci	r17, 0xFF	; 255
    54b4:	fe 01       	movw	r30, r28
    54b6:	ed 5b       	subi	r30, 0xBD	; 189
    54b8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ba:	60 81       	ld	r22, Z
    54bc:	71 81       	ldd	r23, Z+1	; 0x01
    54be:	82 81       	ldd	r24, Z+2	; 0x02
    54c0:	93 81       	ldd	r25, Z+3	; 0x03
    54c2:	20 e0       	ldi	r18, 0x00	; 0
    54c4:	30 e0       	ldi	r19, 0x00	; 0
    54c6:	4a ef       	ldi	r20, 0xFA	; 250
    54c8:	54 e4       	ldi	r21, 0x44	; 68
    54ca:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    54ce:	dc 01       	movw	r26, r24
    54d0:	cb 01       	movw	r24, r22
    54d2:	f8 01       	movw	r30, r16
    54d4:	80 83       	st	Z, r24
    54d6:	91 83       	std	Z+1, r25	; 0x01
    54d8:	a2 83       	std	Z+2, r26	; 0x02
    54da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    54dc:	fe 01       	movw	r30, r28
    54de:	ff 96       	adiw	r30, 0x3f	; 63
    54e0:	60 81       	ld	r22, Z
    54e2:	71 81       	ldd	r23, Z+1	; 0x01
    54e4:	82 81       	ldd	r24, Z+2	; 0x02
    54e6:	93 81       	ldd	r25, Z+3	; 0x03
    54e8:	20 e0       	ldi	r18, 0x00	; 0
    54ea:	30 e0       	ldi	r19, 0x00	; 0
    54ec:	40 e8       	ldi	r20, 0x80	; 128
    54ee:	5f e3       	ldi	r21, 0x3F	; 63
    54f0:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    54f4:	88 23       	and	r24, r24
    54f6:	2c f4       	brge	.+10     	; 0x5502 <LCD_vidInit+0x84>
		__ticks = 1;
    54f8:	81 e0       	ldi	r24, 0x01	; 1
    54fa:	90 e0       	ldi	r25, 0x00	; 0
    54fc:	9e af       	std	Y+62, r25	; 0x3e
    54fe:	8d af       	std	Y+61, r24	; 0x3d
    5500:	46 c0       	rjmp	.+140    	; 0x558e <LCD_vidInit+0x110>
	else if (__tmp > 65535)
    5502:	fe 01       	movw	r30, r28
    5504:	ff 96       	adiw	r30, 0x3f	; 63
    5506:	60 81       	ld	r22, Z
    5508:	71 81       	ldd	r23, Z+1	; 0x01
    550a:	82 81       	ldd	r24, Z+2	; 0x02
    550c:	93 81       	ldd	r25, Z+3	; 0x03
    550e:	20 e0       	ldi	r18, 0x00	; 0
    5510:	3f ef       	ldi	r19, 0xFF	; 255
    5512:	4f e7       	ldi	r20, 0x7F	; 127
    5514:	57 e4       	ldi	r21, 0x47	; 71
    5516:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    551a:	18 16       	cp	r1, r24
    551c:	64 f5       	brge	.+88     	; 0x5576 <LCD_vidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    551e:	fe 01       	movw	r30, r28
    5520:	ed 5b       	subi	r30, 0xBD	; 189
    5522:	ff 4f       	sbci	r31, 0xFF	; 255
    5524:	60 81       	ld	r22, Z
    5526:	71 81       	ldd	r23, Z+1	; 0x01
    5528:	82 81       	ldd	r24, Z+2	; 0x02
    552a:	93 81       	ldd	r25, Z+3	; 0x03
    552c:	20 e0       	ldi	r18, 0x00	; 0
    552e:	30 e0       	ldi	r19, 0x00	; 0
    5530:	40 e2       	ldi	r20, 0x20	; 32
    5532:	51 e4       	ldi	r21, 0x41	; 65
    5534:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5538:	dc 01       	movw	r26, r24
    553a:	cb 01       	movw	r24, r22
    553c:	bc 01       	movw	r22, r24
    553e:	cd 01       	movw	r24, r26
    5540:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5544:	dc 01       	movw	r26, r24
    5546:	cb 01       	movw	r24, r22
    5548:	9e af       	std	Y+62, r25	; 0x3e
    554a:	8d af       	std	Y+61, r24	; 0x3d
    554c:	0f c0       	rjmp	.+30     	; 0x556c <LCD_vidInit+0xee>
    554e:	88 ec       	ldi	r24, 0xC8	; 200
    5550:	90 e0       	ldi	r25, 0x00	; 0
    5552:	9c af       	std	Y+60, r25	; 0x3c
    5554:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5556:	8b ad       	ldd	r24, Y+59	; 0x3b
    5558:	9c ad       	ldd	r25, Y+60	; 0x3c
    555a:	01 97       	sbiw	r24, 0x01	; 1
    555c:	f1 f7       	brne	.-4      	; 0x555a <LCD_vidInit+0xdc>
    555e:	9c af       	std	Y+60, r25	; 0x3c
    5560:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5562:	8d ad       	ldd	r24, Y+61	; 0x3d
    5564:	9e ad       	ldd	r25, Y+62	; 0x3e
    5566:	01 97       	sbiw	r24, 0x01	; 1
    5568:	9e af       	std	Y+62, r25	; 0x3e
    556a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    556c:	8d ad       	ldd	r24, Y+61	; 0x3d
    556e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5570:	00 97       	sbiw	r24, 0x00	; 0
    5572:	69 f7       	brne	.-38     	; 0x554e <LCD_vidInit+0xd0>
    5574:	16 c0       	rjmp	.+44     	; 0x55a2 <LCD_vidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5576:	fe 01       	movw	r30, r28
    5578:	ff 96       	adiw	r30, 0x3f	; 63
    557a:	60 81       	ld	r22, Z
    557c:	71 81       	ldd	r23, Z+1	; 0x01
    557e:	82 81       	ldd	r24, Z+2	; 0x02
    5580:	93 81       	ldd	r25, Z+3	; 0x03
    5582:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5586:	dc 01       	movw	r26, r24
    5588:	cb 01       	movw	r24, r22
    558a:	9e af       	std	Y+62, r25	; 0x3e
    558c:	8d af       	std	Y+61, r24	; 0x3d
    558e:	8d ad       	ldd	r24, Y+61	; 0x3d
    5590:	9e ad       	ldd	r25, Y+62	; 0x3e
    5592:	9a af       	std	Y+58, r25	; 0x3a
    5594:	89 af       	std	Y+57, r24	; 0x39
    5596:	89 ad       	ldd	r24, Y+57	; 0x39
    5598:	9a ad       	ldd	r25, Y+58	; 0x3a
    559a:	01 97       	sbiw	r24, 0x01	; 1
    559c:	f1 f7       	brne	.-4      	; 0x559a <LCD_vidInit+0x11c>
    559e:	9a af       	std	Y+58, r25	; 0x3a
    55a0:	89 af       	std	Y+57, r24	; 0x39
	//wait for a time
   _delay_ms(50);
   //function  set
   LCD_vidSendCommand(0b00111000);
    55a2:	88 e3       	ldi	r24, 0x38	; 56
    55a4:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
    55a8:	80 e0       	ldi	r24, 0x00	; 0
    55aa:	90 e0       	ldi	r25, 0x00	; 0
    55ac:	a0 ea       	ldi	r26, 0xA0	; 160
    55ae:	b1 e4       	ldi	r27, 0x41	; 65
    55b0:	8d ab       	std	Y+53, r24	; 0x35
    55b2:	9e ab       	std	Y+54, r25	; 0x36
    55b4:	af ab       	std	Y+55, r26	; 0x37
    55b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55b8:	6d a9       	ldd	r22, Y+53	; 0x35
    55ba:	7e a9       	ldd	r23, Y+54	; 0x36
    55bc:	8f a9       	ldd	r24, Y+55	; 0x37
    55be:	98 ad       	ldd	r25, Y+56	; 0x38
    55c0:	20 e0       	ldi	r18, 0x00	; 0
    55c2:	30 e0       	ldi	r19, 0x00	; 0
    55c4:	4a ef       	ldi	r20, 0xFA	; 250
    55c6:	54 e4       	ldi	r21, 0x44	; 68
    55c8:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    55cc:	dc 01       	movw	r26, r24
    55ce:	cb 01       	movw	r24, r22
    55d0:	89 ab       	std	Y+49, r24	; 0x31
    55d2:	9a ab       	std	Y+50, r25	; 0x32
    55d4:	ab ab       	std	Y+51, r26	; 0x33
    55d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    55d8:	69 a9       	ldd	r22, Y+49	; 0x31
    55da:	7a a9       	ldd	r23, Y+50	; 0x32
    55dc:	8b a9       	ldd	r24, Y+51	; 0x33
    55de:	9c a9       	ldd	r25, Y+52	; 0x34
    55e0:	20 e0       	ldi	r18, 0x00	; 0
    55e2:	30 e0       	ldi	r19, 0x00	; 0
    55e4:	40 e8       	ldi	r20, 0x80	; 128
    55e6:	5f e3       	ldi	r21, 0x3F	; 63
    55e8:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    55ec:	88 23       	and	r24, r24
    55ee:	2c f4       	brge	.+10     	; 0x55fa <LCD_vidInit+0x17c>
		__ticks = 1;
    55f0:	81 e0       	ldi	r24, 0x01	; 1
    55f2:	90 e0       	ldi	r25, 0x00	; 0
    55f4:	98 ab       	std	Y+48, r25	; 0x30
    55f6:	8f a7       	std	Y+47, r24	; 0x2f
    55f8:	3f c0       	rjmp	.+126    	; 0x5678 <LCD_vidInit+0x1fa>
	else if (__tmp > 65535)
    55fa:	69 a9       	ldd	r22, Y+49	; 0x31
    55fc:	7a a9       	ldd	r23, Y+50	; 0x32
    55fe:	8b a9       	ldd	r24, Y+51	; 0x33
    5600:	9c a9       	ldd	r25, Y+52	; 0x34
    5602:	20 e0       	ldi	r18, 0x00	; 0
    5604:	3f ef       	ldi	r19, 0xFF	; 255
    5606:	4f e7       	ldi	r20, 0x7F	; 127
    5608:	57 e4       	ldi	r21, 0x47	; 71
    560a:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    560e:	18 16       	cp	r1, r24
    5610:	4c f5       	brge	.+82     	; 0x5664 <LCD_vidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5612:	6d a9       	ldd	r22, Y+53	; 0x35
    5614:	7e a9       	ldd	r23, Y+54	; 0x36
    5616:	8f a9       	ldd	r24, Y+55	; 0x37
    5618:	98 ad       	ldd	r25, Y+56	; 0x38
    561a:	20 e0       	ldi	r18, 0x00	; 0
    561c:	30 e0       	ldi	r19, 0x00	; 0
    561e:	40 e2       	ldi	r20, 0x20	; 32
    5620:	51 e4       	ldi	r21, 0x41	; 65
    5622:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5626:	dc 01       	movw	r26, r24
    5628:	cb 01       	movw	r24, r22
    562a:	bc 01       	movw	r22, r24
    562c:	cd 01       	movw	r24, r26
    562e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5632:	dc 01       	movw	r26, r24
    5634:	cb 01       	movw	r24, r22
    5636:	98 ab       	std	Y+48, r25	; 0x30
    5638:	8f a7       	std	Y+47, r24	; 0x2f
    563a:	0f c0       	rjmp	.+30     	; 0x565a <LCD_vidInit+0x1dc>
    563c:	88 ec       	ldi	r24, 0xC8	; 200
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	9e a7       	std	Y+46, r25	; 0x2e
    5642:	8d a7       	std	Y+45, r24	; 0x2d
    5644:	8d a5       	ldd	r24, Y+45	; 0x2d
    5646:	9e a5       	ldd	r25, Y+46	; 0x2e
    5648:	01 97       	sbiw	r24, 0x01	; 1
    564a:	f1 f7       	brne	.-4      	; 0x5648 <LCD_vidInit+0x1ca>
    564c:	9e a7       	std	Y+46, r25	; 0x2e
    564e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5650:	8f a5       	ldd	r24, Y+47	; 0x2f
    5652:	98 a9       	ldd	r25, Y+48	; 0x30
    5654:	01 97       	sbiw	r24, 0x01	; 1
    5656:	98 ab       	std	Y+48, r25	; 0x30
    5658:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    565a:	8f a5       	ldd	r24, Y+47	; 0x2f
    565c:	98 a9       	ldd	r25, Y+48	; 0x30
    565e:	00 97       	sbiw	r24, 0x00	; 0
    5660:	69 f7       	brne	.-38     	; 0x563c <LCD_vidInit+0x1be>
    5662:	14 c0       	rjmp	.+40     	; 0x568c <LCD_vidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5664:	69 a9       	ldd	r22, Y+49	; 0x31
    5666:	7a a9       	ldd	r23, Y+50	; 0x32
    5668:	8b a9       	ldd	r24, Y+51	; 0x33
    566a:	9c a9       	ldd	r25, Y+52	; 0x34
    566c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5670:	dc 01       	movw	r26, r24
    5672:	cb 01       	movw	r24, r22
    5674:	98 ab       	std	Y+48, r25	; 0x30
    5676:	8f a7       	std	Y+47, r24	; 0x2f
    5678:	8f a5       	ldd	r24, Y+47	; 0x2f
    567a:	98 a9       	ldd	r25, Y+48	; 0x30
    567c:	9c a7       	std	Y+44, r25	; 0x2c
    567e:	8b a7       	std	Y+43, r24	; 0x2b
    5680:	8b a5       	ldd	r24, Y+43	; 0x2b
    5682:	9c a5       	ldd	r25, Y+44	; 0x2c
    5684:	01 97       	sbiw	r24, 0x01	; 1
    5686:	f1 f7       	brne	.-4      	; 0x5684 <LCD_vidInit+0x206>
    5688:	9c a7       	std	Y+44, r25	; 0x2c
    568a:	8b a7       	std	Y+43, r24	; 0x2b
   //wait for a time
   _delay_ms(20);
   //display on off
   LCD_vidSendCommand(0b00001100);
    568c:	8c e0       	ldi	r24, 0x0C	; 12
    568e:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
    5692:	80 e0       	ldi	r24, 0x00	; 0
    5694:	90 e0       	ldi	r25, 0x00	; 0
    5696:	a0 ea       	ldi	r26, 0xA0	; 160
    5698:	b1 e4       	ldi	r27, 0x41	; 65
    569a:	8f a3       	std	Y+39, r24	; 0x27
    569c:	98 a7       	std	Y+40, r25	; 0x28
    569e:	a9 a7       	std	Y+41, r26	; 0x29
    56a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56a2:	6f a1       	ldd	r22, Y+39	; 0x27
    56a4:	78 a5       	ldd	r23, Y+40	; 0x28
    56a6:	89 a5       	ldd	r24, Y+41	; 0x29
    56a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    56aa:	20 e0       	ldi	r18, 0x00	; 0
    56ac:	30 e0       	ldi	r19, 0x00	; 0
    56ae:	4a ef       	ldi	r20, 0xFA	; 250
    56b0:	54 e4       	ldi	r21, 0x44	; 68
    56b2:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    56b6:	dc 01       	movw	r26, r24
    56b8:	cb 01       	movw	r24, r22
    56ba:	8b a3       	std	Y+35, r24	; 0x23
    56bc:	9c a3       	std	Y+36, r25	; 0x24
    56be:	ad a3       	std	Y+37, r26	; 0x25
    56c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    56c2:	6b a1       	ldd	r22, Y+35	; 0x23
    56c4:	7c a1       	ldd	r23, Y+36	; 0x24
    56c6:	8d a1       	ldd	r24, Y+37	; 0x25
    56c8:	9e a1       	ldd	r25, Y+38	; 0x26
    56ca:	20 e0       	ldi	r18, 0x00	; 0
    56cc:	30 e0       	ldi	r19, 0x00	; 0
    56ce:	40 e8       	ldi	r20, 0x80	; 128
    56d0:	5f e3       	ldi	r21, 0x3F	; 63
    56d2:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    56d6:	88 23       	and	r24, r24
    56d8:	2c f4       	brge	.+10     	; 0x56e4 <LCD_vidInit+0x266>
		__ticks = 1;
    56da:	81 e0       	ldi	r24, 0x01	; 1
    56dc:	90 e0       	ldi	r25, 0x00	; 0
    56de:	9a a3       	std	Y+34, r25	; 0x22
    56e0:	89 a3       	std	Y+33, r24	; 0x21
    56e2:	3f c0       	rjmp	.+126    	; 0x5762 <LCD_vidInit+0x2e4>
	else if (__tmp > 65535)
    56e4:	6b a1       	ldd	r22, Y+35	; 0x23
    56e6:	7c a1       	ldd	r23, Y+36	; 0x24
    56e8:	8d a1       	ldd	r24, Y+37	; 0x25
    56ea:	9e a1       	ldd	r25, Y+38	; 0x26
    56ec:	20 e0       	ldi	r18, 0x00	; 0
    56ee:	3f ef       	ldi	r19, 0xFF	; 255
    56f0:	4f e7       	ldi	r20, 0x7F	; 127
    56f2:	57 e4       	ldi	r21, 0x47	; 71
    56f4:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    56f8:	18 16       	cp	r1, r24
    56fa:	4c f5       	brge	.+82     	; 0x574e <LCD_vidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56fc:	6f a1       	ldd	r22, Y+39	; 0x27
    56fe:	78 a5       	ldd	r23, Y+40	; 0x28
    5700:	89 a5       	ldd	r24, Y+41	; 0x29
    5702:	9a a5       	ldd	r25, Y+42	; 0x2a
    5704:	20 e0       	ldi	r18, 0x00	; 0
    5706:	30 e0       	ldi	r19, 0x00	; 0
    5708:	40 e2       	ldi	r20, 0x20	; 32
    570a:	51 e4       	ldi	r21, 0x41	; 65
    570c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5710:	dc 01       	movw	r26, r24
    5712:	cb 01       	movw	r24, r22
    5714:	bc 01       	movw	r22, r24
    5716:	cd 01       	movw	r24, r26
    5718:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    571c:	dc 01       	movw	r26, r24
    571e:	cb 01       	movw	r24, r22
    5720:	9a a3       	std	Y+34, r25	; 0x22
    5722:	89 a3       	std	Y+33, r24	; 0x21
    5724:	0f c0       	rjmp	.+30     	; 0x5744 <LCD_vidInit+0x2c6>
    5726:	88 ec       	ldi	r24, 0xC8	; 200
    5728:	90 e0       	ldi	r25, 0x00	; 0
    572a:	98 a3       	std	Y+32, r25	; 0x20
    572c:	8f 8f       	std	Y+31, r24	; 0x1f
    572e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5730:	98 a1       	ldd	r25, Y+32	; 0x20
    5732:	01 97       	sbiw	r24, 0x01	; 1
    5734:	f1 f7       	brne	.-4      	; 0x5732 <LCD_vidInit+0x2b4>
    5736:	98 a3       	std	Y+32, r25	; 0x20
    5738:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    573a:	89 a1       	ldd	r24, Y+33	; 0x21
    573c:	9a a1       	ldd	r25, Y+34	; 0x22
    573e:	01 97       	sbiw	r24, 0x01	; 1
    5740:	9a a3       	std	Y+34, r25	; 0x22
    5742:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5744:	89 a1       	ldd	r24, Y+33	; 0x21
    5746:	9a a1       	ldd	r25, Y+34	; 0x22
    5748:	00 97       	sbiw	r24, 0x00	; 0
    574a:	69 f7       	brne	.-38     	; 0x5726 <LCD_vidInit+0x2a8>
    574c:	14 c0       	rjmp	.+40     	; 0x5776 <LCD_vidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    574e:	6b a1       	ldd	r22, Y+35	; 0x23
    5750:	7c a1       	ldd	r23, Y+36	; 0x24
    5752:	8d a1       	ldd	r24, Y+37	; 0x25
    5754:	9e a1       	ldd	r25, Y+38	; 0x26
    5756:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    575a:	dc 01       	movw	r26, r24
    575c:	cb 01       	movw	r24, r22
    575e:	9a a3       	std	Y+34, r25	; 0x22
    5760:	89 a3       	std	Y+33, r24	; 0x21
    5762:	89 a1       	ldd	r24, Y+33	; 0x21
    5764:	9a a1       	ldd	r25, Y+34	; 0x22
    5766:	9e 8f       	std	Y+30, r25	; 0x1e
    5768:	8d 8f       	std	Y+29, r24	; 0x1d
    576a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    576c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    576e:	01 97       	sbiw	r24, 0x01	; 1
    5770:	f1 f7       	brne	.-4      	; 0x576e <LCD_vidInit+0x2f0>
    5772:	9e 8f       	std	Y+30, r25	; 0x1e
    5774:	8d 8f       	std	Y+29, r24	; 0x1d
   //wait for a time
    _delay_ms(20);
   //display clear
   LCD_vidSendCommand(0b00000001);
    5776:	81 e0       	ldi	r24, 0x01	; 1
    5778:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
    577c:	80 e0       	ldi	r24, 0x00	; 0
    577e:	90 e0       	ldi	r25, 0x00	; 0
    5780:	a0 ea       	ldi	r26, 0xA0	; 160
    5782:	b1 e4       	ldi	r27, 0x41	; 65
    5784:	89 8f       	std	Y+25, r24	; 0x19
    5786:	9a 8f       	std	Y+26, r25	; 0x1a
    5788:	ab 8f       	std	Y+27, r26	; 0x1b
    578a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    578c:	69 8d       	ldd	r22, Y+25	; 0x19
    578e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5790:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5792:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5794:	20 e0       	ldi	r18, 0x00	; 0
    5796:	30 e0       	ldi	r19, 0x00	; 0
    5798:	4a ef       	ldi	r20, 0xFA	; 250
    579a:	54 e4       	ldi	r21, 0x44	; 68
    579c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    57a0:	dc 01       	movw	r26, r24
    57a2:	cb 01       	movw	r24, r22
    57a4:	8d 8b       	std	Y+21, r24	; 0x15
    57a6:	9e 8b       	std	Y+22, r25	; 0x16
    57a8:	af 8b       	std	Y+23, r26	; 0x17
    57aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    57ac:	6d 89       	ldd	r22, Y+21	; 0x15
    57ae:	7e 89       	ldd	r23, Y+22	; 0x16
    57b0:	8f 89       	ldd	r24, Y+23	; 0x17
    57b2:	98 8d       	ldd	r25, Y+24	; 0x18
    57b4:	20 e0       	ldi	r18, 0x00	; 0
    57b6:	30 e0       	ldi	r19, 0x00	; 0
    57b8:	40 e8       	ldi	r20, 0x80	; 128
    57ba:	5f e3       	ldi	r21, 0x3F	; 63
    57bc:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    57c0:	88 23       	and	r24, r24
    57c2:	2c f4       	brge	.+10     	; 0x57ce <LCD_vidInit+0x350>
		__ticks = 1;
    57c4:	81 e0       	ldi	r24, 0x01	; 1
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	9c 8b       	std	Y+20, r25	; 0x14
    57ca:	8b 8b       	std	Y+19, r24	; 0x13
    57cc:	3f c0       	rjmp	.+126    	; 0x584c <LCD_vidInit+0x3ce>
	else if (__tmp > 65535)
    57ce:	6d 89       	ldd	r22, Y+21	; 0x15
    57d0:	7e 89       	ldd	r23, Y+22	; 0x16
    57d2:	8f 89       	ldd	r24, Y+23	; 0x17
    57d4:	98 8d       	ldd	r25, Y+24	; 0x18
    57d6:	20 e0       	ldi	r18, 0x00	; 0
    57d8:	3f ef       	ldi	r19, 0xFF	; 255
    57da:	4f e7       	ldi	r20, 0x7F	; 127
    57dc:	57 e4       	ldi	r21, 0x47	; 71
    57de:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    57e2:	18 16       	cp	r1, r24
    57e4:	4c f5       	brge	.+82     	; 0x5838 <LCD_vidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57e6:	69 8d       	ldd	r22, Y+25	; 0x19
    57e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57ee:	20 e0       	ldi	r18, 0x00	; 0
    57f0:	30 e0       	ldi	r19, 0x00	; 0
    57f2:	40 e2       	ldi	r20, 0x20	; 32
    57f4:	51 e4       	ldi	r21, 0x41	; 65
    57f6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    57fa:	dc 01       	movw	r26, r24
    57fc:	cb 01       	movw	r24, r22
    57fe:	bc 01       	movw	r22, r24
    5800:	cd 01       	movw	r24, r26
    5802:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5806:	dc 01       	movw	r26, r24
    5808:	cb 01       	movw	r24, r22
    580a:	9c 8b       	std	Y+20, r25	; 0x14
    580c:	8b 8b       	std	Y+19, r24	; 0x13
    580e:	0f c0       	rjmp	.+30     	; 0x582e <LCD_vidInit+0x3b0>
    5810:	88 ec       	ldi	r24, 0xC8	; 200
    5812:	90 e0       	ldi	r25, 0x00	; 0
    5814:	9a 8b       	std	Y+18, r25	; 0x12
    5816:	89 8b       	std	Y+17, r24	; 0x11
    5818:	89 89       	ldd	r24, Y+17	; 0x11
    581a:	9a 89       	ldd	r25, Y+18	; 0x12
    581c:	01 97       	sbiw	r24, 0x01	; 1
    581e:	f1 f7       	brne	.-4      	; 0x581c <LCD_vidInit+0x39e>
    5820:	9a 8b       	std	Y+18, r25	; 0x12
    5822:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5824:	8b 89       	ldd	r24, Y+19	; 0x13
    5826:	9c 89       	ldd	r25, Y+20	; 0x14
    5828:	01 97       	sbiw	r24, 0x01	; 1
    582a:	9c 8b       	std	Y+20, r25	; 0x14
    582c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    582e:	8b 89       	ldd	r24, Y+19	; 0x13
    5830:	9c 89       	ldd	r25, Y+20	; 0x14
    5832:	00 97       	sbiw	r24, 0x00	; 0
    5834:	69 f7       	brne	.-38     	; 0x5810 <LCD_vidInit+0x392>
    5836:	14 c0       	rjmp	.+40     	; 0x5860 <LCD_vidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5838:	6d 89       	ldd	r22, Y+21	; 0x15
    583a:	7e 89       	ldd	r23, Y+22	; 0x16
    583c:	8f 89       	ldd	r24, Y+23	; 0x17
    583e:	98 8d       	ldd	r25, Y+24	; 0x18
    5840:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5844:	dc 01       	movw	r26, r24
    5846:	cb 01       	movw	r24, r22
    5848:	9c 8b       	std	Y+20, r25	; 0x14
    584a:	8b 8b       	std	Y+19, r24	; 0x13
    584c:	8b 89       	ldd	r24, Y+19	; 0x13
    584e:	9c 89       	ldd	r25, Y+20	; 0x14
    5850:	98 8b       	std	Y+16, r25	; 0x10
    5852:	8f 87       	std	Y+15, r24	; 0x0f
    5854:	8f 85       	ldd	r24, Y+15	; 0x0f
    5856:	98 89       	ldd	r25, Y+16	; 0x10
    5858:	01 97       	sbiw	r24, 0x01	; 1
    585a:	f1 f7       	brne	.-4      	; 0x5858 <LCD_vidInit+0x3da>
    585c:	98 8b       	std	Y+16, r25	; 0x10
    585e:	8f 87       	std	Y+15, r24	; 0x0f
   //wait for a time
    _delay_ms(20);
    //entry mode set
    LCD_vidSendCommand(0b00000110);
    5860:	86 e0       	ldi	r24, 0x06	; 6
    5862:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
    5866:	80 e0       	ldi	r24, 0x00	; 0
    5868:	90 e0       	ldi	r25, 0x00	; 0
    586a:	a0 ea       	ldi	r26, 0xA0	; 160
    586c:	b1 e4       	ldi	r27, 0x41	; 65
    586e:	8b 87       	std	Y+11, r24	; 0x0b
    5870:	9c 87       	std	Y+12, r25	; 0x0c
    5872:	ad 87       	std	Y+13, r26	; 0x0d
    5874:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5876:	6b 85       	ldd	r22, Y+11	; 0x0b
    5878:	7c 85       	ldd	r23, Y+12	; 0x0c
    587a:	8d 85       	ldd	r24, Y+13	; 0x0d
    587c:	9e 85       	ldd	r25, Y+14	; 0x0e
    587e:	20 e0       	ldi	r18, 0x00	; 0
    5880:	30 e0       	ldi	r19, 0x00	; 0
    5882:	4a ef       	ldi	r20, 0xFA	; 250
    5884:	54 e4       	ldi	r21, 0x44	; 68
    5886:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    588a:	dc 01       	movw	r26, r24
    588c:	cb 01       	movw	r24, r22
    588e:	8f 83       	std	Y+7, r24	; 0x07
    5890:	98 87       	std	Y+8, r25	; 0x08
    5892:	a9 87       	std	Y+9, r26	; 0x09
    5894:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5896:	6f 81       	ldd	r22, Y+7	; 0x07
    5898:	78 85       	ldd	r23, Y+8	; 0x08
    589a:	89 85       	ldd	r24, Y+9	; 0x09
    589c:	9a 85       	ldd	r25, Y+10	; 0x0a
    589e:	20 e0       	ldi	r18, 0x00	; 0
    58a0:	30 e0       	ldi	r19, 0x00	; 0
    58a2:	40 e8       	ldi	r20, 0x80	; 128
    58a4:	5f e3       	ldi	r21, 0x3F	; 63
    58a6:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    58aa:	88 23       	and	r24, r24
    58ac:	2c f4       	brge	.+10     	; 0x58b8 <LCD_vidInit+0x43a>
		__ticks = 1;
    58ae:	81 e0       	ldi	r24, 0x01	; 1
    58b0:	90 e0       	ldi	r25, 0x00	; 0
    58b2:	9e 83       	std	Y+6, r25	; 0x06
    58b4:	8d 83       	std	Y+5, r24	; 0x05
    58b6:	3f c0       	rjmp	.+126    	; 0x5936 <LCD_vidInit+0x4b8>
	else if (__tmp > 65535)
    58b8:	6f 81       	ldd	r22, Y+7	; 0x07
    58ba:	78 85       	ldd	r23, Y+8	; 0x08
    58bc:	89 85       	ldd	r24, Y+9	; 0x09
    58be:	9a 85       	ldd	r25, Y+10	; 0x0a
    58c0:	20 e0       	ldi	r18, 0x00	; 0
    58c2:	3f ef       	ldi	r19, 0xFF	; 255
    58c4:	4f e7       	ldi	r20, 0x7F	; 127
    58c6:	57 e4       	ldi	r21, 0x47	; 71
    58c8:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    58cc:	18 16       	cp	r1, r24
    58ce:	4c f5       	brge	.+82     	; 0x5922 <LCD_vidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    58d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    58d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    58d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    58d8:	20 e0       	ldi	r18, 0x00	; 0
    58da:	30 e0       	ldi	r19, 0x00	; 0
    58dc:	40 e2       	ldi	r20, 0x20	; 32
    58de:	51 e4       	ldi	r21, 0x41	; 65
    58e0:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    58e4:	dc 01       	movw	r26, r24
    58e6:	cb 01       	movw	r24, r22
    58e8:	bc 01       	movw	r22, r24
    58ea:	cd 01       	movw	r24, r26
    58ec:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    58f0:	dc 01       	movw	r26, r24
    58f2:	cb 01       	movw	r24, r22
    58f4:	9e 83       	std	Y+6, r25	; 0x06
    58f6:	8d 83       	std	Y+5, r24	; 0x05
    58f8:	0f c0       	rjmp	.+30     	; 0x5918 <LCD_vidInit+0x49a>
    58fa:	88 ec       	ldi	r24, 0xC8	; 200
    58fc:	90 e0       	ldi	r25, 0x00	; 0
    58fe:	9c 83       	std	Y+4, r25	; 0x04
    5900:	8b 83       	std	Y+3, r24	; 0x03
    5902:	8b 81       	ldd	r24, Y+3	; 0x03
    5904:	9c 81       	ldd	r25, Y+4	; 0x04
    5906:	01 97       	sbiw	r24, 0x01	; 1
    5908:	f1 f7       	brne	.-4      	; 0x5906 <LCD_vidInit+0x488>
    590a:	9c 83       	std	Y+4, r25	; 0x04
    590c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    590e:	8d 81       	ldd	r24, Y+5	; 0x05
    5910:	9e 81       	ldd	r25, Y+6	; 0x06
    5912:	01 97       	sbiw	r24, 0x01	; 1
    5914:	9e 83       	std	Y+6, r25	; 0x06
    5916:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5918:	8d 81       	ldd	r24, Y+5	; 0x05
    591a:	9e 81       	ldd	r25, Y+6	; 0x06
    591c:	00 97       	sbiw	r24, 0x00	; 0
    591e:	69 f7       	brne	.-38     	; 0x58fa <LCD_vidInit+0x47c>
    5920:	14 c0       	rjmp	.+40     	; 0x594a <LCD_vidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5922:	6f 81       	ldd	r22, Y+7	; 0x07
    5924:	78 85       	ldd	r23, Y+8	; 0x08
    5926:	89 85       	ldd	r24, Y+9	; 0x09
    5928:	9a 85       	ldd	r25, Y+10	; 0x0a
    592a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    592e:	dc 01       	movw	r26, r24
    5930:	cb 01       	movw	r24, r22
    5932:	9e 83       	std	Y+6, r25	; 0x06
    5934:	8d 83       	std	Y+5, r24	; 0x05
    5936:	8d 81       	ldd	r24, Y+5	; 0x05
    5938:	9e 81       	ldd	r25, Y+6	; 0x06
    593a:	9a 83       	std	Y+2, r25	; 0x02
    593c:	89 83       	std	Y+1, r24	; 0x01
    593e:	89 81       	ldd	r24, Y+1	; 0x01
    5940:	9a 81       	ldd	r25, Y+2	; 0x02
    5942:	01 97       	sbiw	r24, 0x01	; 1
    5944:	f1 f7       	brne	.-4      	; 0x5942 <LCD_vidInit+0x4c4>
    5946:	9a 83       	std	Y+2, r25	; 0x02
    5948:	89 83       	std	Y+1, r24	; 0x01
    //wait for a time
     _delay_ms(20);
}
    594a:	ca 5b       	subi	r28, 0xBA	; 186
    594c:	df 4f       	sbci	r29, 0xFF	; 255
    594e:	0f b6       	in	r0, 0x3f	; 63
    5950:	f8 94       	cli
    5952:	de bf       	out	0x3e, r29	; 62
    5954:	0f be       	out	0x3f, r0	; 63
    5956:	cd bf       	out	0x3d, r28	; 61
    5958:	cf 91       	pop	r28
    595a:	df 91       	pop	r29
    595c:	1f 91       	pop	r17
    595e:	0f 91       	pop	r16
    5960:	08 95       	ret

00005962 <LCD_vidSendCommand>:
//.........................................................................................
void LCD_vidSendCommand(uint8 u8CommandCpy)
{
    5962:	df 93       	push	r29
    5964:	cf 93       	push	r28
    5966:	cd b7       	in	r28, 0x3d	; 61
    5968:	de b7       	in	r29, 0x3e	; 62
    596a:	6d 97       	sbiw	r28, 0x1d	; 29
    596c:	0f b6       	in	r0, 0x3f	; 63
    596e:	f8 94       	cli
    5970:	de bf       	out	0x3e, r29	; 62
    5972:	0f be       	out	0x3f, r0	; 63
    5974:	cd bf       	out	0x3d, r28	; 61
    5976:	8d 8f       	std	Y+29, r24	; 0x1d
	//put RS TO LOW TO WRITE OPERATION
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,RS,LOW);
    5978:	81 e0       	ldi	r24, 0x01	; 1
    597a:	65 e0       	ldi	r22, 0x05	; 5
    597c:	40 e0       	ldi	r20, 0x00	; 0
    597e:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>
	//PUT R/W TO LOW TO WRITE OPERATION
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,RW,LOW);
    5982:	81 e0       	ldi	r24, 0x01	; 1
    5984:	66 e0       	ldi	r22, 0x06	; 6
    5986:	40 e0       	ldi	r20, 0x00	; 0
    5988:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>
	//PUT E TO HIGH TO ENABLE
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,HIGH);
    598c:	81 e0       	ldi	r24, 0x01	; 1
    598e:	67 e0       	ldi	r22, 0x07	; 7
    5990:	41 e0       	ldi	r20, 0x01	; 1
    5992:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>

	DIO_void_Set_Port_Value(LCD_PORT,u8CommandCpy);
    5996:	82 e0       	ldi	r24, 0x02	; 2
    5998:	6d 8d       	ldd	r22, Y+29	; 0x1d
    599a:	0e 94 f5 21 	call	0x43ea	; 0x43ea <DIO_void_Set_Port_Value>

	//PUT E TO LOW TO COMPLETE SEND THE COMMAND
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,LOW);
    599e:	81 e0       	ldi	r24, 0x01	; 1
    59a0:	67 e0       	ldi	r22, 0x07	; 7
    59a2:	40 e0       	ldi	r20, 0x00	; 0
    59a4:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>
    59a8:	80 e0       	ldi	r24, 0x00	; 0
    59aa:	90 e0       	ldi	r25, 0x00	; 0
    59ac:	a0 e8       	ldi	r26, 0x80	; 128
    59ae:	bf e3       	ldi	r27, 0x3F	; 63
    59b0:	89 8f       	std	Y+25, r24	; 0x19
    59b2:	9a 8f       	std	Y+26, r25	; 0x1a
    59b4:	ab 8f       	std	Y+27, r26	; 0x1b
    59b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59b8:	69 8d       	ldd	r22, Y+25	; 0x19
    59ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    59bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    59c0:	20 e0       	ldi	r18, 0x00	; 0
    59c2:	30 e0       	ldi	r19, 0x00	; 0
    59c4:	4a ef       	ldi	r20, 0xFA	; 250
    59c6:	54 e4       	ldi	r21, 0x44	; 68
    59c8:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    59cc:	dc 01       	movw	r26, r24
    59ce:	cb 01       	movw	r24, r22
    59d0:	8d 8b       	std	Y+21, r24	; 0x15
    59d2:	9e 8b       	std	Y+22, r25	; 0x16
    59d4:	af 8b       	std	Y+23, r26	; 0x17
    59d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    59d8:	6d 89       	ldd	r22, Y+21	; 0x15
    59da:	7e 89       	ldd	r23, Y+22	; 0x16
    59dc:	8f 89       	ldd	r24, Y+23	; 0x17
    59de:	98 8d       	ldd	r25, Y+24	; 0x18
    59e0:	20 e0       	ldi	r18, 0x00	; 0
    59e2:	30 e0       	ldi	r19, 0x00	; 0
    59e4:	40 e8       	ldi	r20, 0x80	; 128
    59e6:	5f e3       	ldi	r21, 0x3F	; 63
    59e8:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    59ec:	88 23       	and	r24, r24
    59ee:	2c f4       	brge	.+10     	; 0x59fa <LCD_vidSendCommand+0x98>
		__ticks = 1;
    59f0:	81 e0       	ldi	r24, 0x01	; 1
    59f2:	90 e0       	ldi	r25, 0x00	; 0
    59f4:	9c 8b       	std	Y+20, r25	; 0x14
    59f6:	8b 8b       	std	Y+19, r24	; 0x13
    59f8:	3f c0       	rjmp	.+126    	; 0x5a78 <LCD_vidSendCommand+0x116>
	else if (__tmp > 65535)
    59fa:	6d 89       	ldd	r22, Y+21	; 0x15
    59fc:	7e 89       	ldd	r23, Y+22	; 0x16
    59fe:	8f 89       	ldd	r24, Y+23	; 0x17
    5a00:	98 8d       	ldd	r25, Y+24	; 0x18
    5a02:	20 e0       	ldi	r18, 0x00	; 0
    5a04:	3f ef       	ldi	r19, 0xFF	; 255
    5a06:	4f e7       	ldi	r20, 0x7F	; 127
    5a08:	57 e4       	ldi	r21, 0x47	; 71
    5a0a:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    5a0e:	18 16       	cp	r1, r24
    5a10:	4c f5       	brge	.+82     	; 0x5a64 <LCD_vidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a12:	69 8d       	ldd	r22, Y+25	; 0x19
    5a14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a1a:	20 e0       	ldi	r18, 0x00	; 0
    5a1c:	30 e0       	ldi	r19, 0x00	; 0
    5a1e:	40 e2       	ldi	r20, 0x20	; 32
    5a20:	51 e4       	ldi	r21, 0x41	; 65
    5a22:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5a26:	dc 01       	movw	r26, r24
    5a28:	cb 01       	movw	r24, r22
    5a2a:	bc 01       	movw	r22, r24
    5a2c:	cd 01       	movw	r24, r26
    5a2e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5a32:	dc 01       	movw	r26, r24
    5a34:	cb 01       	movw	r24, r22
    5a36:	9c 8b       	std	Y+20, r25	; 0x14
    5a38:	8b 8b       	std	Y+19, r24	; 0x13
    5a3a:	0f c0       	rjmp	.+30     	; 0x5a5a <LCD_vidSendCommand+0xf8>
    5a3c:	88 ec       	ldi	r24, 0xC8	; 200
    5a3e:	90 e0       	ldi	r25, 0x00	; 0
    5a40:	9a 8b       	std	Y+18, r25	; 0x12
    5a42:	89 8b       	std	Y+17, r24	; 0x11
    5a44:	89 89       	ldd	r24, Y+17	; 0x11
    5a46:	9a 89       	ldd	r25, Y+18	; 0x12
    5a48:	01 97       	sbiw	r24, 0x01	; 1
    5a4a:	f1 f7       	brne	.-4      	; 0x5a48 <LCD_vidSendCommand+0xe6>
    5a4c:	9a 8b       	std	Y+18, r25	; 0x12
    5a4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a50:	8b 89       	ldd	r24, Y+19	; 0x13
    5a52:	9c 89       	ldd	r25, Y+20	; 0x14
    5a54:	01 97       	sbiw	r24, 0x01	; 1
    5a56:	9c 8b       	std	Y+20, r25	; 0x14
    5a58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    5a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    5a5e:	00 97       	sbiw	r24, 0x00	; 0
    5a60:	69 f7       	brne	.-38     	; 0x5a3c <LCD_vidSendCommand+0xda>
    5a62:	14 c0       	rjmp	.+40     	; 0x5a8c <LCD_vidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a64:	6d 89       	ldd	r22, Y+21	; 0x15
    5a66:	7e 89       	ldd	r23, Y+22	; 0x16
    5a68:	8f 89       	ldd	r24, Y+23	; 0x17
    5a6a:	98 8d       	ldd	r25, Y+24	; 0x18
    5a6c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5a70:	dc 01       	movw	r26, r24
    5a72:	cb 01       	movw	r24, r22
    5a74:	9c 8b       	std	Y+20, r25	; 0x14
    5a76:	8b 8b       	std	Y+19, r24	; 0x13
    5a78:	8b 89       	ldd	r24, Y+19	; 0x13
    5a7a:	9c 89       	ldd	r25, Y+20	; 0x14
    5a7c:	98 8b       	std	Y+16, r25	; 0x10
    5a7e:	8f 87       	std	Y+15, r24	; 0x0f
    5a80:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a82:	98 89       	ldd	r25, Y+16	; 0x10
    5a84:	01 97       	sbiw	r24, 0x01	; 1
    5a86:	f1 f7       	brne	.-4      	; 0x5a84 <LCD_vidSendCommand+0x122>
    5a88:	98 8b       	std	Y+16, r25	; 0x10
    5a8a:	8f 87       	std	Y+15, r24	; 0x0f
	//wait tc time
	_delay_ms(1);
	//put Eto high
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,HIGH);
    5a8c:	81 e0       	ldi	r24, 0x01	; 1
    5a8e:	67 e0       	ldi	r22, 0x07	; 7
    5a90:	41 e0       	ldi	r20, 0x01	; 1
    5a92:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>
    5a96:	80 e0       	ldi	r24, 0x00	; 0
    5a98:	90 e0       	ldi	r25, 0x00	; 0
    5a9a:	a0 e4       	ldi	r26, 0x40	; 64
    5a9c:	b0 e4       	ldi	r27, 0x40	; 64
    5a9e:	8b 87       	std	Y+11, r24	; 0x0b
    5aa0:	9c 87       	std	Y+12, r25	; 0x0c
    5aa2:	ad 87       	std	Y+13, r26	; 0x0d
    5aa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5aa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    5aa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    5aaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    5aac:	9e 85       	ldd	r25, Y+14	; 0x0e
    5aae:	20 e0       	ldi	r18, 0x00	; 0
    5ab0:	30 e0       	ldi	r19, 0x00	; 0
    5ab2:	4a ef       	ldi	r20, 0xFA	; 250
    5ab4:	54 e4       	ldi	r21, 0x44	; 68
    5ab6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5aba:	dc 01       	movw	r26, r24
    5abc:	cb 01       	movw	r24, r22
    5abe:	8f 83       	std	Y+7, r24	; 0x07
    5ac0:	98 87       	std	Y+8, r25	; 0x08
    5ac2:	a9 87       	std	Y+9, r26	; 0x09
    5ac4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    5ac8:	78 85       	ldd	r23, Y+8	; 0x08
    5aca:	89 85       	ldd	r24, Y+9	; 0x09
    5acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ace:	20 e0       	ldi	r18, 0x00	; 0
    5ad0:	30 e0       	ldi	r19, 0x00	; 0
    5ad2:	40 e8       	ldi	r20, 0x80	; 128
    5ad4:	5f e3       	ldi	r21, 0x3F	; 63
    5ad6:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    5ada:	88 23       	and	r24, r24
    5adc:	2c f4       	brge	.+10     	; 0x5ae8 <LCD_vidSendCommand+0x186>
		__ticks = 1;
    5ade:	81 e0       	ldi	r24, 0x01	; 1
    5ae0:	90 e0       	ldi	r25, 0x00	; 0
    5ae2:	9e 83       	std	Y+6, r25	; 0x06
    5ae4:	8d 83       	std	Y+5, r24	; 0x05
    5ae6:	3f c0       	rjmp	.+126    	; 0x5b66 <LCD_vidSendCommand+0x204>
	else if (__tmp > 65535)
    5ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    5aea:	78 85       	ldd	r23, Y+8	; 0x08
    5aec:	89 85       	ldd	r24, Y+9	; 0x09
    5aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    5af0:	20 e0       	ldi	r18, 0x00	; 0
    5af2:	3f ef       	ldi	r19, 0xFF	; 255
    5af4:	4f e7       	ldi	r20, 0x7F	; 127
    5af6:	57 e4       	ldi	r21, 0x47	; 71
    5af8:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    5afc:	18 16       	cp	r1, r24
    5afe:	4c f5       	brge	.+82     	; 0x5b52 <LCD_vidSendCommand+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b08:	20 e0       	ldi	r18, 0x00	; 0
    5b0a:	30 e0       	ldi	r19, 0x00	; 0
    5b0c:	40 e2       	ldi	r20, 0x20	; 32
    5b0e:	51 e4       	ldi	r21, 0x41	; 65
    5b10:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5b14:	dc 01       	movw	r26, r24
    5b16:	cb 01       	movw	r24, r22
    5b18:	bc 01       	movw	r22, r24
    5b1a:	cd 01       	movw	r24, r26
    5b1c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5b20:	dc 01       	movw	r26, r24
    5b22:	cb 01       	movw	r24, r22
    5b24:	9e 83       	std	Y+6, r25	; 0x06
    5b26:	8d 83       	std	Y+5, r24	; 0x05
    5b28:	0f c0       	rjmp	.+30     	; 0x5b48 <LCD_vidSendCommand+0x1e6>
    5b2a:	88 ec       	ldi	r24, 0xC8	; 200
    5b2c:	90 e0       	ldi	r25, 0x00	; 0
    5b2e:	9c 83       	std	Y+4, r25	; 0x04
    5b30:	8b 83       	std	Y+3, r24	; 0x03
    5b32:	8b 81       	ldd	r24, Y+3	; 0x03
    5b34:	9c 81       	ldd	r25, Y+4	; 0x04
    5b36:	01 97       	sbiw	r24, 0x01	; 1
    5b38:	f1 f7       	brne	.-4      	; 0x5b36 <LCD_vidSendCommand+0x1d4>
    5b3a:	9c 83       	std	Y+4, r25	; 0x04
    5b3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    5b40:	9e 81       	ldd	r25, Y+6	; 0x06
    5b42:	01 97       	sbiw	r24, 0x01	; 1
    5b44:	9e 83       	std	Y+6, r25	; 0x06
    5b46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b48:	8d 81       	ldd	r24, Y+5	; 0x05
    5b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    5b4c:	00 97       	sbiw	r24, 0x00	; 0
    5b4e:	69 f7       	brne	.-38     	; 0x5b2a <LCD_vidSendCommand+0x1c8>
    5b50:	14 c0       	rjmp	.+40     	; 0x5b7a <LCD_vidSendCommand+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b52:	6f 81       	ldd	r22, Y+7	; 0x07
    5b54:	78 85       	ldd	r23, Y+8	; 0x08
    5b56:	89 85       	ldd	r24, Y+9	; 0x09
    5b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b5a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5b5e:	dc 01       	movw	r26, r24
    5b60:	cb 01       	movw	r24, r22
    5b62:	9e 83       	std	Y+6, r25	; 0x06
    5b64:	8d 83       	std	Y+5, r24	; 0x05
    5b66:	8d 81       	ldd	r24, Y+5	; 0x05
    5b68:	9e 81       	ldd	r25, Y+6	; 0x06
    5b6a:	9a 83       	std	Y+2, r25	; 0x02
    5b6c:	89 83       	std	Y+1, r24	; 0x01
    5b6e:	89 81       	ldd	r24, Y+1	; 0x01
    5b70:	9a 81       	ldd	r25, Y+2	; 0x02
    5b72:	01 97       	sbiw	r24, 0x01	; 1
    5b74:	f1 f7       	brne	.-4      	; 0x5b72 <LCD_vidSendCommand+0x210>
    5b76:	9a 83       	std	Y+2, r25	; 0x02
    5b78:	89 83       	std	Y+1, r24	; 0x01
	//wait to let lcd excute the command
	_delay_ms(3);
}
    5b7a:	6d 96       	adiw	r28, 0x1d	; 29
    5b7c:	0f b6       	in	r0, 0x3f	; 63
    5b7e:	f8 94       	cli
    5b80:	de bf       	out	0x3e, r29	; 62
    5b82:	0f be       	out	0x3f, r0	; 63
    5b84:	cd bf       	out	0x3d, r28	; 61
    5b86:	cf 91       	pop	r28
    5b88:	df 91       	pop	r29
    5b8a:	08 95       	ret

00005b8c <LCD_vidWriteCharacter>:
//....................................................................
void LCD_vidWriteCharacter(uint8 u8DataCpy)
{
    5b8c:	df 93       	push	r29
    5b8e:	cf 93       	push	r28
    5b90:	cd b7       	in	r28, 0x3d	; 61
    5b92:	de b7       	in	r29, 0x3e	; 62
    5b94:	6d 97       	sbiw	r28, 0x1d	; 29
    5b96:	0f b6       	in	r0, 0x3f	; 63
    5b98:	f8 94       	cli
    5b9a:	de bf       	out	0x3e, r29	; 62
    5b9c:	0f be       	out	0x3f, r0	; 63
    5b9e:	cd bf       	out	0x3d, r28	; 61
    5ba0:	8d 8f       	std	Y+29, r24	; 0x1d
	//put RS TO LOW TO WRITE OPERATION
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,RS,HIGH);
    5ba2:	81 e0       	ldi	r24, 0x01	; 1
    5ba4:	65 e0       	ldi	r22, 0x05	; 5
    5ba6:	41 e0       	ldi	r20, 0x01	; 1
    5ba8:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>
    //PUT R/W TO LOW TO WRITE OPERATION
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,RW,LOW);
    5bac:	81 e0       	ldi	r24, 0x01	; 1
    5bae:	66 e0       	ldi	r22, 0x06	; 6
    5bb0:	40 e0       	ldi	r20, 0x00	; 0
    5bb2:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>
	//PUT E TO HIGH TO ENABLE
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,HIGH);
    5bb6:	81 e0       	ldi	r24, 0x01	; 1
    5bb8:	67 e0       	ldi	r22, 0x07	; 7
    5bba:	41 e0       	ldi	r20, 0x01	; 1
    5bbc:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>

	DIO_void_Set_Port_Value(LCD_PORT,u8DataCpy);
    5bc0:	82 e0       	ldi	r24, 0x02	; 2
    5bc2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5bc4:	0e 94 f5 21 	call	0x43ea	; 0x43ea <DIO_void_Set_Port_Value>

	//PUT E TO LOW TO COMPLETE SEND THE COMMAND
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,LOW);
    5bc8:	81 e0       	ldi	r24, 0x01	; 1
    5bca:	67 e0       	ldi	r22, 0x07	; 7
    5bcc:	40 e0       	ldi	r20, 0x00	; 0
    5bce:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>
    5bd2:	80 e0       	ldi	r24, 0x00	; 0
    5bd4:	90 e0       	ldi	r25, 0x00	; 0
    5bd6:	a0 e8       	ldi	r26, 0x80	; 128
    5bd8:	bf e3       	ldi	r27, 0x3F	; 63
    5bda:	89 8f       	std	Y+25, r24	; 0x19
    5bdc:	9a 8f       	std	Y+26, r25	; 0x1a
    5bde:	ab 8f       	std	Y+27, r26	; 0x1b
    5be0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5be2:	69 8d       	ldd	r22, Y+25	; 0x19
    5be4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5be6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5be8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5bea:	20 e0       	ldi	r18, 0x00	; 0
    5bec:	30 e0       	ldi	r19, 0x00	; 0
    5bee:	4a ef       	ldi	r20, 0xFA	; 250
    5bf0:	54 e4       	ldi	r21, 0x44	; 68
    5bf2:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5bf6:	dc 01       	movw	r26, r24
    5bf8:	cb 01       	movw	r24, r22
    5bfa:	8d 8b       	std	Y+21, r24	; 0x15
    5bfc:	9e 8b       	std	Y+22, r25	; 0x16
    5bfe:	af 8b       	std	Y+23, r26	; 0x17
    5c00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5c02:	6d 89       	ldd	r22, Y+21	; 0x15
    5c04:	7e 89       	ldd	r23, Y+22	; 0x16
    5c06:	8f 89       	ldd	r24, Y+23	; 0x17
    5c08:	98 8d       	ldd	r25, Y+24	; 0x18
    5c0a:	20 e0       	ldi	r18, 0x00	; 0
    5c0c:	30 e0       	ldi	r19, 0x00	; 0
    5c0e:	40 e8       	ldi	r20, 0x80	; 128
    5c10:	5f e3       	ldi	r21, 0x3F	; 63
    5c12:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    5c16:	88 23       	and	r24, r24
    5c18:	2c f4       	brge	.+10     	; 0x5c24 <LCD_vidWriteCharacter+0x98>
		__ticks = 1;
    5c1a:	81 e0       	ldi	r24, 0x01	; 1
    5c1c:	90 e0       	ldi	r25, 0x00	; 0
    5c1e:	9c 8b       	std	Y+20, r25	; 0x14
    5c20:	8b 8b       	std	Y+19, r24	; 0x13
    5c22:	3f c0       	rjmp	.+126    	; 0x5ca2 <LCD_vidWriteCharacter+0x116>
	else if (__tmp > 65535)
    5c24:	6d 89       	ldd	r22, Y+21	; 0x15
    5c26:	7e 89       	ldd	r23, Y+22	; 0x16
    5c28:	8f 89       	ldd	r24, Y+23	; 0x17
    5c2a:	98 8d       	ldd	r25, Y+24	; 0x18
    5c2c:	20 e0       	ldi	r18, 0x00	; 0
    5c2e:	3f ef       	ldi	r19, 0xFF	; 255
    5c30:	4f e7       	ldi	r20, 0x7F	; 127
    5c32:	57 e4       	ldi	r21, 0x47	; 71
    5c34:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    5c38:	18 16       	cp	r1, r24
    5c3a:	4c f5       	brge	.+82     	; 0x5c8e <LCD_vidWriteCharacter+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c3c:	69 8d       	ldd	r22, Y+25	; 0x19
    5c3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c44:	20 e0       	ldi	r18, 0x00	; 0
    5c46:	30 e0       	ldi	r19, 0x00	; 0
    5c48:	40 e2       	ldi	r20, 0x20	; 32
    5c4a:	51 e4       	ldi	r21, 0x41	; 65
    5c4c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5c50:	dc 01       	movw	r26, r24
    5c52:	cb 01       	movw	r24, r22
    5c54:	bc 01       	movw	r22, r24
    5c56:	cd 01       	movw	r24, r26
    5c58:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5c5c:	dc 01       	movw	r26, r24
    5c5e:	cb 01       	movw	r24, r22
    5c60:	9c 8b       	std	Y+20, r25	; 0x14
    5c62:	8b 8b       	std	Y+19, r24	; 0x13
    5c64:	0f c0       	rjmp	.+30     	; 0x5c84 <LCD_vidWriteCharacter+0xf8>
    5c66:	88 ec       	ldi	r24, 0xC8	; 200
    5c68:	90 e0       	ldi	r25, 0x00	; 0
    5c6a:	9a 8b       	std	Y+18, r25	; 0x12
    5c6c:	89 8b       	std	Y+17, r24	; 0x11
    5c6e:	89 89       	ldd	r24, Y+17	; 0x11
    5c70:	9a 89       	ldd	r25, Y+18	; 0x12
    5c72:	01 97       	sbiw	r24, 0x01	; 1
    5c74:	f1 f7       	brne	.-4      	; 0x5c72 <LCD_vidWriteCharacter+0xe6>
    5c76:	9a 8b       	std	Y+18, r25	; 0x12
    5c78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c7a:	8b 89       	ldd	r24, Y+19	; 0x13
    5c7c:	9c 89       	ldd	r25, Y+20	; 0x14
    5c7e:	01 97       	sbiw	r24, 0x01	; 1
    5c80:	9c 8b       	std	Y+20, r25	; 0x14
    5c82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c84:	8b 89       	ldd	r24, Y+19	; 0x13
    5c86:	9c 89       	ldd	r25, Y+20	; 0x14
    5c88:	00 97       	sbiw	r24, 0x00	; 0
    5c8a:	69 f7       	brne	.-38     	; 0x5c66 <LCD_vidWriteCharacter+0xda>
    5c8c:	14 c0       	rjmp	.+40     	; 0x5cb6 <LCD_vidWriteCharacter+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c8e:	6d 89       	ldd	r22, Y+21	; 0x15
    5c90:	7e 89       	ldd	r23, Y+22	; 0x16
    5c92:	8f 89       	ldd	r24, Y+23	; 0x17
    5c94:	98 8d       	ldd	r25, Y+24	; 0x18
    5c96:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5c9a:	dc 01       	movw	r26, r24
    5c9c:	cb 01       	movw	r24, r22
    5c9e:	9c 8b       	std	Y+20, r25	; 0x14
    5ca0:	8b 8b       	std	Y+19, r24	; 0x13
    5ca2:	8b 89       	ldd	r24, Y+19	; 0x13
    5ca4:	9c 89       	ldd	r25, Y+20	; 0x14
    5ca6:	98 8b       	std	Y+16, r25	; 0x10
    5ca8:	8f 87       	std	Y+15, r24	; 0x0f
    5caa:	8f 85       	ldd	r24, Y+15	; 0x0f
    5cac:	98 89       	ldd	r25, Y+16	; 0x10
    5cae:	01 97       	sbiw	r24, 0x01	; 1
    5cb0:	f1 f7       	brne	.-4      	; 0x5cae <LCD_vidWriteCharacter+0x122>
    5cb2:	98 8b       	std	Y+16, r25	; 0x10
    5cb4:	8f 87       	std	Y+15, r24	; 0x0f
	//wait tc time
	_delay_ms(1);
	//put E to high
	DIO_void_Set_Pin_Value(LCD_CONTROL_PORT,E,HIGH);
    5cb6:	81 e0       	ldi	r24, 0x01	; 1
    5cb8:	67 e0       	ldi	r22, 0x07	; 7
    5cba:	41 e0       	ldi	r20, 0x01	; 1
    5cbc:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <DIO_void_Set_Pin_Value>
    5cc0:	80 e0       	ldi	r24, 0x00	; 0
    5cc2:	90 e0       	ldi	r25, 0x00	; 0
    5cc4:	a0 e4       	ldi	r26, 0x40	; 64
    5cc6:	b0 e4       	ldi	r27, 0x40	; 64
    5cc8:	8b 87       	std	Y+11, r24	; 0x0b
    5cca:	9c 87       	std	Y+12, r25	; 0x0c
    5ccc:	ad 87       	std	Y+13, r26	; 0x0d
    5cce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cd8:	20 e0       	ldi	r18, 0x00	; 0
    5cda:	30 e0       	ldi	r19, 0x00	; 0
    5cdc:	4a ef       	ldi	r20, 0xFA	; 250
    5cde:	54 e4       	ldi	r21, 0x44	; 68
    5ce0:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5ce4:	dc 01       	movw	r26, r24
    5ce6:	cb 01       	movw	r24, r22
    5ce8:	8f 83       	std	Y+7, r24	; 0x07
    5cea:	98 87       	std	Y+8, r25	; 0x08
    5cec:	a9 87       	std	Y+9, r26	; 0x09
    5cee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    5cf2:	78 85       	ldd	r23, Y+8	; 0x08
    5cf4:	89 85       	ldd	r24, Y+9	; 0x09
    5cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cf8:	20 e0       	ldi	r18, 0x00	; 0
    5cfa:	30 e0       	ldi	r19, 0x00	; 0
    5cfc:	40 e8       	ldi	r20, 0x80	; 128
    5cfe:	5f e3       	ldi	r21, 0x3F	; 63
    5d00:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    5d04:	88 23       	and	r24, r24
    5d06:	2c f4       	brge	.+10     	; 0x5d12 <LCD_vidWriteCharacter+0x186>
		__ticks = 1;
    5d08:	81 e0       	ldi	r24, 0x01	; 1
    5d0a:	90 e0       	ldi	r25, 0x00	; 0
    5d0c:	9e 83       	std	Y+6, r25	; 0x06
    5d0e:	8d 83       	std	Y+5, r24	; 0x05
    5d10:	3f c0       	rjmp	.+126    	; 0x5d90 <LCD_vidWriteCharacter+0x204>
	else if (__tmp > 65535)
    5d12:	6f 81       	ldd	r22, Y+7	; 0x07
    5d14:	78 85       	ldd	r23, Y+8	; 0x08
    5d16:	89 85       	ldd	r24, Y+9	; 0x09
    5d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d1a:	20 e0       	ldi	r18, 0x00	; 0
    5d1c:	3f ef       	ldi	r19, 0xFF	; 255
    5d1e:	4f e7       	ldi	r20, 0x7F	; 127
    5d20:	57 e4       	ldi	r21, 0x47	; 71
    5d22:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    5d26:	18 16       	cp	r1, r24
    5d28:	4c f5       	brge	.+82     	; 0x5d7c <LCD_vidWriteCharacter+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d30:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d32:	20 e0       	ldi	r18, 0x00	; 0
    5d34:	30 e0       	ldi	r19, 0x00	; 0
    5d36:	40 e2       	ldi	r20, 0x20	; 32
    5d38:	51 e4       	ldi	r21, 0x41	; 65
    5d3a:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5d3e:	dc 01       	movw	r26, r24
    5d40:	cb 01       	movw	r24, r22
    5d42:	bc 01       	movw	r22, r24
    5d44:	cd 01       	movw	r24, r26
    5d46:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5d4a:	dc 01       	movw	r26, r24
    5d4c:	cb 01       	movw	r24, r22
    5d4e:	9e 83       	std	Y+6, r25	; 0x06
    5d50:	8d 83       	std	Y+5, r24	; 0x05
    5d52:	0f c0       	rjmp	.+30     	; 0x5d72 <LCD_vidWriteCharacter+0x1e6>
    5d54:	88 ec       	ldi	r24, 0xC8	; 200
    5d56:	90 e0       	ldi	r25, 0x00	; 0
    5d58:	9c 83       	std	Y+4, r25	; 0x04
    5d5a:	8b 83       	std	Y+3, r24	; 0x03
    5d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    5d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    5d60:	01 97       	sbiw	r24, 0x01	; 1
    5d62:	f1 f7       	brne	.-4      	; 0x5d60 <LCD_vidWriteCharacter+0x1d4>
    5d64:	9c 83       	std	Y+4, r25	; 0x04
    5d66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d68:	8d 81       	ldd	r24, Y+5	; 0x05
    5d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    5d6c:	01 97       	sbiw	r24, 0x01	; 1
    5d6e:	9e 83       	std	Y+6, r25	; 0x06
    5d70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d72:	8d 81       	ldd	r24, Y+5	; 0x05
    5d74:	9e 81       	ldd	r25, Y+6	; 0x06
    5d76:	00 97       	sbiw	r24, 0x00	; 0
    5d78:	69 f7       	brne	.-38     	; 0x5d54 <LCD_vidWriteCharacter+0x1c8>
    5d7a:	14 c0       	rjmp	.+40     	; 0x5da4 <LCD_vidWriteCharacter+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d7c:	6f 81       	ldd	r22, Y+7	; 0x07
    5d7e:	78 85       	ldd	r23, Y+8	; 0x08
    5d80:	89 85       	ldd	r24, Y+9	; 0x09
    5d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d84:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5d88:	dc 01       	movw	r26, r24
    5d8a:	cb 01       	movw	r24, r22
    5d8c:	9e 83       	std	Y+6, r25	; 0x06
    5d8e:	8d 83       	std	Y+5, r24	; 0x05
    5d90:	8d 81       	ldd	r24, Y+5	; 0x05
    5d92:	9e 81       	ldd	r25, Y+6	; 0x06
    5d94:	9a 83       	std	Y+2, r25	; 0x02
    5d96:	89 83       	std	Y+1, r24	; 0x01
    5d98:	89 81       	ldd	r24, Y+1	; 0x01
    5d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    5d9c:	01 97       	sbiw	r24, 0x01	; 1
    5d9e:	f1 f7       	brne	.-4      	; 0x5d9c <LCD_vidWriteCharacter+0x210>
    5da0:	9a 83       	std	Y+2, r25	; 0x02
    5da2:	89 83       	std	Y+1, r24	; 0x01
	//wait to let lcd excute the command
	_delay_ms(3);
}
    5da4:	6d 96       	adiw	r28, 0x1d	; 29
    5da6:	0f b6       	in	r0, 0x3f	; 63
    5da8:	f8 94       	cli
    5daa:	de bf       	out	0x3e, r29	; 62
    5dac:	0f be       	out	0x3f, r0	; 63
    5dae:	cd bf       	out	0x3d, r28	; 61
    5db0:	cf 91       	pop	r28
    5db2:	df 91       	pop	r29
    5db4:	08 95       	ret

00005db6 <LCD_vidSendCommand4>:

//....................................................................

void LCD_vidSendCommand4(uint8 u8CommandCpy)
{
    5db6:	df 93       	push	r29
    5db8:	cf 93       	push	r28
    5dba:	0f 92       	push	r0
    5dbc:	cd b7       	in	r28, 0x3d	; 61
    5dbe:	de b7       	in	r29, 0x3e	; 62
    5dc0:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidSendCommand( ( GET_NippleH(u8CommandCpy))<<4 );
    5dc2:	89 81       	ldd	r24, Y+1	; 0x01
    5dc4:	80 7f       	andi	r24, 0xF0	; 240
    5dc6:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
	LCD_vidSendCommand(  (GET_NippleL(u8CommandCpy))<<4 );
    5dca:	89 81       	ldd	r24, Y+1	; 0x01
    5dcc:	88 2f       	mov	r24, r24
    5dce:	90 e0       	ldi	r25, 0x00	; 0
    5dd0:	82 95       	swap	r24
    5dd2:	92 95       	swap	r25
    5dd4:	90 7f       	andi	r25, 0xF0	; 240
    5dd6:	98 27       	eor	r25, r24
    5dd8:	80 7f       	andi	r24, 0xF0	; 240
    5dda:	98 27       	eor	r25, r24
    5ddc:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
}
    5de0:	0f 90       	pop	r0
    5de2:	cf 91       	pop	r28
    5de4:	df 91       	pop	r29
    5de6:	08 95       	ret

00005de8 <LCD_vidInit4>:
//........................................................................................
\
void LCD_vidInit4(void)
{
    5de8:	0f 93       	push	r16
    5dea:	1f 93       	push	r17
    5dec:	df 93       	push	r29
    5dee:	cf 93       	push	r28
    5df0:	cd b7       	in	r28, 0x3d	; 61
    5df2:	de b7       	in	r29, 0x3e	; 62
    5df4:	c6 54       	subi	r28, 0x46	; 70
    5df6:	d0 40       	sbci	r29, 0x00	; 0
    5df8:	0f b6       	in	r0, 0x3f	; 63
    5dfa:	f8 94       	cli
    5dfc:	de bf       	out	0x3e, r29	; 62
    5dfe:	0f be       	out	0x3f, r0	; 63
    5e00:	cd bf       	out	0x3d, r28	; 61
    5e02:	fe 01       	movw	r30, r28
    5e04:	ed 5b       	subi	r30, 0xBD	; 189
    5e06:	ff 4f       	sbci	r31, 0xFF	; 255
    5e08:	80 e0       	ldi	r24, 0x00	; 0
    5e0a:	90 e0       	ldi	r25, 0x00	; 0
    5e0c:	a8 e4       	ldi	r26, 0x48	; 72
    5e0e:	b2 e4       	ldi	r27, 0x42	; 66
    5e10:	80 83       	st	Z, r24
    5e12:	91 83       	std	Z+1, r25	; 0x01
    5e14:	a2 83       	std	Z+2, r26	; 0x02
    5e16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e18:	8e 01       	movw	r16, r28
    5e1a:	01 5c       	subi	r16, 0xC1	; 193
    5e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    5e1e:	fe 01       	movw	r30, r28
    5e20:	ed 5b       	subi	r30, 0xBD	; 189
    5e22:	ff 4f       	sbci	r31, 0xFF	; 255
    5e24:	60 81       	ld	r22, Z
    5e26:	71 81       	ldd	r23, Z+1	; 0x01
    5e28:	82 81       	ldd	r24, Z+2	; 0x02
    5e2a:	93 81       	ldd	r25, Z+3	; 0x03
    5e2c:	20 e0       	ldi	r18, 0x00	; 0
    5e2e:	30 e0       	ldi	r19, 0x00	; 0
    5e30:	4a ef       	ldi	r20, 0xFA	; 250
    5e32:	54 e4       	ldi	r21, 0x44	; 68
    5e34:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5e38:	dc 01       	movw	r26, r24
    5e3a:	cb 01       	movw	r24, r22
    5e3c:	f8 01       	movw	r30, r16
    5e3e:	80 83       	st	Z, r24
    5e40:	91 83       	std	Z+1, r25	; 0x01
    5e42:	a2 83       	std	Z+2, r26	; 0x02
    5e44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5e46:	fe 01       	movw	r30, r28
    5e48:	ff 96       	adiw	r30, 0x3f	; 63
    5e4a:	60 81       	ld	r22, Z
    5e4c:	71 81       	ldd	r23, Z+1	; 0x01
    5e4e:	82 81       	ldd	r24, Z+2	; 0x02
    5e50:	93 81       	ldd	r25, Z+3	; 0x03
    5e52:	20 e0       	ldi	r18, 0x00	; 0
    5e54:	30 e0       	ldi	r19, 0x00	; 0
    5e56:	40 e8       	ldi	r20, 0x80	; 128
    5e58:	5f e3       	ldi	r21, 0x3F	; 63
    5e5a:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    5e5e:	88 23       	and	r24, r24
    5e60:	2c f4       	brge	.+10     	; 0x5e6c <LCD_vidInit4+0x84>
		__ticks = 1;
    5e62:	81 e0       	ldi	r24, 0x01	; 1
    5e64:	90 e0       	ldi	r25, 0x00	; 0
    5e66:	9e af       	std	Y+62, r25	; 0x3e
    5e68:	8d af       	std	Y+61, r24	; 0x3d
    5e6a:	46 c0       	rjmp	.+140    	; 0x5ef8 <LCD_vidInit4+0x110>
	else if (__tmp > 65535)
    5e6c:	fe 01       	movw	r30, r28
    5e6e:	ff 96       	adiw	r30, 0x3f	; 63
    5e70:	60 81       	ld	r22, Z
    5e72:	71 81       	ldd	r23, Z+1	; 0x01
    5e74:	82 81       	ldd	r24, Z+2	; 0x02
    5e76:	93 81       	ldd	r25, Z+3	; 0x03
    5e78:	20 e0       	ldi	r18, 0x00	; 0
    5e7a:	3f ef       	ldi	r19, 0xFF	; 255
    5e7c:	4f e7       	ldi	r20, 0x7F	; 127
    5e7e:	57 e4       	ldi	r21, 0x47	; 71
    5e80:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    5e84:	18 16       	cp	r1, r24
    5e86:	64 f5       	brge	.+88     	; 0x5ee0 <LCD_vidInit4+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e88:	fe 01       	movw	r30, r28
    5e8a:	ed 5b       	subi	r30, 0xBD	; 189
    5e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e8e:	60 81       	ld	r22, Z
    5e90:	71 81       	ldd	r23, Z+1	; 0x01
    5e92:	82 81       	ldd	r24, Z+2	; 0x02
    5e94:	93 81       	ldd	r25, Z+3	; 0x03
    5e96:	20 e0       	ldi	r18, 0x00	; 0
    5e98:	30 e0       	ldi	r19, 0x00	; 0
    5e9a:	40 e2       	ldi	r20, 0x20	; 32
    5e9c:	51 e4       	ldi	r21, 0x41	; 65
    5e9e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5ea2:	dc 01       	movw	r26, r24
    5ea4:	cb 01       	movw	r24, r22
    5ea6:	bc 01       	movw	r22, r24
    5ea8:	cd 01       	movw	r24, r26
    5eaa:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5eae:	dc 01       	movw	r26, r24
    5eb0:	cb 01       	movw	r24, r22
    5eb2:	9e af       	std	Y+62, r25	; 0x3e
    5eb4:	8d af       	std	Y+61, r24	; 0x3d
    5eb6:	0f c0       	rjmp	.+30     	; 0x5ed6 <LCD_vidInit4+0xee>
    5eb8:	88 ec       	ldi	r24, 0xC8	; 200
    5eba:	90 e0       	ldi	r25, 0x00	; 0
    5ebc:	9c af       	std	Y+60, r25	; 0x3c
    5ebe:	8b af       	std	Y+59, r24	; 0x3b
    5ec0:	8b ad       	ldd	r24, Y+59	; 0x3b
    5ec2:	9c ad       	ldd	r25, Y+60	; 0x3c
    5ec4:	01 97       	sbiw	r24, 0x01	; 1
    5ec6:	f1 f7       	brne	.-4      	; 0x5ec4 <LCD_vidInit4+0xdc>
    5ec8:	9c af       	std	Y+60, r25	; 0x3c
    5eca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ecc:	8d ad       	ldd	r24, Y+61	; 0x3d
    5ece:	9e ad       	ldd	r25, Y+62	; 0x3e
    5ed0:	01 97       	sbiw	r24, 0x01	; 1
    5ed2:	9e af       	std	Y+62, r25	; 0x3e
    5ed4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ed6:	8d ad       	ldd	r24, Y+61	; 0x3d
    5ed8:	9e ad       	ldd	r25, Y+62	; 0x3e
    5eda:	00 97       	sbiw	r24, 0x00	; 0
    5edc:	69 f7       	brne	.-38     	; 0x5eb8 <LCD_vidInit4+0xd0>
    5ede:	16 c0       	rjmp	.+44     	; 0x5f0c <LCD_vidInit4+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ee0:	fe 01       	movw	r30, r28
    5ee2:	ff 96       	adiw	r30, 0x3f	; 63
    5ee4:	60 81       	ld	r22, Z
    5ee6:	71 81       	ldd	r23, Z+1	; 0x01
    5ee8:	82 81       	ldd	r24, Z+2	; 0x02
    5eea:	93 81       	ldd	r25, Z+3	; 0x03
    5eec:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5ef0:	dc 01       	movw	r26, r24
    5ef2:	cb 01       	movw	r24, r22
    5ef4:	9e af       	std	Y+62, r25	; 0x3e
    5ef6:	8d af       	std	Y+61, r24	; 0x3d
    5ef8:	8d ad       	ldd	r24, Y+61	; 0x3d
    5efa:	9e ad       	ldd	r25, Y+62	; 0x3e
    5efc:	9a af       	std	Y+58, r25	; 0x3a
    5efe:	89 af       	std	Y+57, r24	; 0x39
    5f00:	89 ad       	ldd	r24, Y+57	; 0x39
    5f02:	9a ad       	ldd	r25, Y+58	; 0x3a
    5f04:	01 97       	sbiw	r24, 0x01	; 1
    5f06:	f1 f7       	brne	.-4      	; 0x5f04 <LCD_vidInit4+0x11c>
    5f08:	9a af       	std	Y+58, r25	; 0x3a
    5f0a:	89 af       	std	Y+57, r24	; 0x39
	 //wait for a time
	  _delay_ms(50);

	  //function  set
	  LCD_vidSendCommand(0b00100000);
    5f0c:	80 e2       	ldi	r24, 0x20	; 32
    5f0e:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
	  LCD_vidSendCommand(0b00100000);
    5f12:	80 e2       	ldi	r24, 0x20	; 32
    5f14:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
	  LCD_vidSendCommand(0b11000000);
    5f18:	80 ec       	ldi	r24, 0xC0	; 192
    5f1a:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
    5f1e:	80 e0       	ldi	r24, 0x00	; 0
    5f20:	90 e0       	ldi	r25, 0x00	; 0
    5f22:	a8 e4       	ldi	r26, 0x48	; 72
    5f24:	b2 e4       	ldi	r27, 0x42	; 66
    5f26:	8d ab       	std	Y+53, r24	; 0x35
    5f28:	9e ab       	std	Y+54, r25	; 0x36
    5f2a:	af ab       	std	Y+55, r26	; 0x37
    5f2c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f2e:	6d a9       	ldd	r22, Y+53	; 0x35
    5f30:	7e a9       	ldd	r23, Y+54	; 0x36
    5f32:	8f a9       	ldd	r24, Y+55	; 0x37
    5f34:	98 ad       	ldd	r25, Y+56	; 0x38
    5f36:	20 e0       	ldi	r18, 0x00	; 0
    5f38:	30 e0       	ldi	r19, 0x00	; 0
    5f3a:	4a ef       	ldi	r20, 0xFA	; 250
    5f3c:	54 e4       	ldi	r21, 0x44	; 68
    5f3e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5f42:	dc 01       	movw	r26, r24
    5f44:	cb 01       	movw	r24, r22
    5f46:	89 ab       	std	Y+49, r24	; 0x31
    5f48:	9a ab       	std	Y+50, r25	; 0x32
    5f4a:	ab ab       	std	Y+51, r26	; 0x33
    5f4c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5f4e:	69 a9       	ldd	r22, Y+49	; 0x31
    5f50:	7a a9       	ldd	r23, Y+50	; 0x32
    5f52:	8b a9       	ldd	r24, Y+51	; 0x33
    5f54:	9c a9       	ldd	r25, Y+52	; 0x34
    5f56:	20 e0       	ldi	r18, 0x00	; 0
    5f58:	30 e0       	ldi	r19, 0x00	; 0
    5f5a:	40 e8       	ldi	r20, 0x80	; 128
    5f5c:	5f e3       	ldi	r21, 0x3F	; 63
    5f5e:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    5f62:	88 23       	and	r24, r24
    5f64:	2c f4       	brge	.+10     	; 0x5f70 <LCD_vidInit4+0x188>
		__ticks = 1;
    5f66:	81 e0       	ldi	r24, 0x01	; 1
    5f68:	90 e0       	ldi	r25, 0x00	; 0
    5f6a:	98 ab       	std	Y+48, r25	; 0x30
    5f6c:	8f a7       	std	Y+47, r24	; 0x2f
    5f6e:	3f c0       	rjmp	.+126    	; 0x5fee <LCD_vidInit4+0x206>
	else if (__tmp > 65535)
    5f70:	69 a9       	ldd	r22, Y+49	; 0x31
    5f72:	7a a9       	ldd	r23, Y+50	; 0x32
    5f74:	8b a9       	ldd	r24, Y+51	; 0x33
    5f76:	9c a9       	ldd	r25, Y+52	; 0x34
    5f78:	20 e0       	ldi	r18, 0x00	; 0
    5f7a:	3f ef       	ldi	r19, 0xFF	; 255
    5f7c:	4f e7       	ldi	r20, 0x7F	; 127
    5f7e:	57 e4       	ldi	r21, 0x47	; 71
    5f80:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    5f84:	18 16       	cp	r1, r24
    5f86:	4c f5       	brge	.+82     	; 0x5fda <LCD_vidInit4+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f88:	6d a9       	ldd	r22, Y+53	; 0x35
    5f8a:	7e a9       	ldd	r23, Y+54	; 0x36
    5f8c:	8f a9       	ldd	r24, Y+55	; 0x37
    5f8e:	98 ad       	ldd	r25, Y+56	; 0x38
    5f90:	20 e0       	ldi	r18, 0x00	; 0
    5f92:	30 e0       	ldi	r19, 0x00	; 0
    5f94:	40 e2       	ldi	r20, 0x20	; 32
    5f96:	51 e4       	ldi	r21, 0x41	; 65
    5f98:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    5f9c:	dc 01       	movw	r26, r24
    5f9e:	cb 01       	movw	r24, r22
    5fa0:	bc 01       	movw	r22, r24
    5fa2:	cd 01       	movw	r24, r26
    5fa4:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5fa8:	dc 01       	movw	r26, r24
    5faa:	cb 01       	movw	r24, r22
    5fac:	98 ab       	std	Y+48, r25	; 0x30
    5fae:	8f a7       	std	Y+47, r24	; 0x2f
    5fb0:	0f c0       	rjmp	.+30     	; 0x5fd0 <LCD_vidInit4+0x1e8>
    5fb2:	88 ec       	ldi	r24, 0xC8	; 200
    5fb4:	90 e0       	ldi	r25, 0x00	; 0
    5fb6:	9e a7       	std	Y+46, r25	; 0x2e
    5fb8:	8d a7       	std	Y+45, r24	; 0x2d
    5fba:	8d a5       	ldd	r24, Y+45	; 0x2d
    5fbc:	9e a5       	ldd	r25, Y+46	; 0x2e
    5fbe:	01 97       	sbiw	r24, 0x01	; 1
    5fc0:	f1 f7       	brne	.-4      	; 0x5fbe <LCD_vidInit4+0x1d6>
    5fc2:	9e a7       	std	Y+46, r25	; 0x2e
    5fc4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5fc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    5fc8:	98 a9       	ldd	r25, Y+48	; 0x30
    5fca:	01 97       	sbiw	r24, 0x01	; 1
    5fcc:	98 ab       	std	Y+48, r25	; 0x30
    5fce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5fd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    5fd2:	98 a9       	ldd	r25, Y+48	; 0x30
    5fd4:	00 97       	sbiw	r24, 0x00	; 0
    5fd6:	69 f7       	brne	.-38     	; 0x5fb2 <LCD_vidInit4+0x1ca>
    5fd8:	14 c0       	rjmp	.+40     	; 0x6002 <LCD_vidInit4+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5fda:	69 a9       	ldd	r22, Y+49	; 0x31
    5fdc:	7a a9       	ldd	r23, Y+50	; 0x32
    5fde:	8b a9       	ldd	r24, Y+51	; 0x33
    5fe0:	9c a9       	ldd	r25, Y+52	; 0x34
    5fe2:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    5fe6:	dc 01       	movw	r26, r24
    5fe8:	cb 01       	movw	r24, r22
    5fea:	98 ab       	std	Y+48, r25	; 0x30
    5fec:	8f a7       	std	Y+47, r24	; 0x2f
    5fee:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ff0:	98 a9       	ldd	r25, Y+48	; 0x30
    5ff2:	9c a7       	std	Y+44, r25	; 0x2c
    5ff4:	8b a7       	std	Y+43, r24	; 0x2b
    5ff6:	8b a5       	ldd	r24, Y+43	; 0x2b
    5ff8:	9c a5       	ldd	r25, Y+44	; 0x2c
    5ffa:	01 97       	sbiw	r24, 0x01	; 1
    5ffc:	f1 f7       	brne	.-4      	; 0x5ffa <LCD_vidInit4+0x212>
    5ffe:	9c a7       	std	Y+44, r25	; 0x2c
    6000:	8b a7       	std	Y+43, r24	; 0x2b

	  //wait for a time
	  _delay_ms(50);

	  //display on off
	  LCD_vidSendCommand(0b00000000);
    6002:	80 e0       	ldi	r24, 0x00	; 0
    6004:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
	  LCD_vidSendCommand(0b11100000);
    6008:	80 ee       	ldi	r24, 0xE0	; 224
    600a:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
    600e:	80 e0       	ldi	r24, 0x00	; 0
    6010:	90 e0       	ldi	r25, 0x00	; 0
    6012:	a0 ef       	ldi	r26, 0xF0	; 240
    6014:	b1 e4       	ldi	r27, 0x41	; 65
    6016:	8f a3       	std	Y+39, r24	; 0x27
    6018:	98 a7       	std	Y+40, r25	; 0x28
    601a:	a9 a7       	std	Y+41, r26	; 0x29
    601c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    601e:	6f a1       	ldd	r22, Y+39	; 0x27
    6020:	78 a5       	ldd	r23, Y+40	; 0x28
    6022:	89 a5       	ldd	r24, Y+41	; 0x29
    6024:	9a a5       	ldd	r25, Y+42	; 0x2a
    6026:	20 e0       	ldi	r18, 0x00	; 0
    6028:	30 e0       	ldi	r19, 0x00	; 0
    602a:	4a ef       	ldi	r20, 0xFA	; 250
    602c:	54 e4       	ldi	r21, 0x44	; 68
    602e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    6032:	dc 01       	movw	r26, r24
    6034:	cb 01       	movw	r24, r22
    6036:	8b a3       	std	Y+35, r24	; 0x23
    6038:	9c a3       	std	Y+36, r25	; 0x24
    603a:	ad a3       	std	Y+37, r26	; 0x25
    603c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    603e:	6b a1       	ldd	r22, Y+35	; 0x23
    6040:	7c a1       	ldd	r23, Y+36	; 0x24
    6042:	8d a1       	ldd	r24, Y+37	; 0x25
    6044:	9e a1       	ldd	r25, Y+38	; 0x26
    6046:	20 e0       	ldi	r18, 0x00	; 0
    6048:	30 e0       	ldi	r19, 0x00	; 0
    604a:	40 e8       	ldi	r20, 0x80	; 128
    604c:	5f e3       	ldi	r21, 0x3F	; 63
    604e:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    6052:	88 23       	and	r24, r24
    6054:	2c f4       	brge	.+10     	; 0x6060 <LCD_vidInit4+0x278>
		__ticks = 1;
    6056:	81 e0       	ldi	r24, 0x01	; 1
    6058:	90 e0       	ldi	r25, 0x00	; 0
    605a:	9a a3       	std	Y+34, r25	; 0x22
    605c:	89 a3       	std	Y+33, r24	; 0x21
    605e:	3f c0       	rjmp	.+126    	; 0x60de <LCD_vidInit4+0x2f6>
	else if (__tmp > 65535)
    6060:	6b a1       	ldd	r22, Y+35	; 0x23
    6062:	7c a1       	ldd	r23, Y+36	; 0x24
    6064:	8d a1       	ldd	r24, Y+37	; 0x25
    6066:	9e a1       	ldd	r25, Y+38	; 0x26
    6068:	20 e0       	ldi	r18, 0x00	; 0
    606a:	3f ef       	ldi	r19, 0xFF	; 255
    606c:	4f e7       	ldi	r20, 0x7F	; 127
    606e:	57 e4       	ldi	r21, 0x47	; 71
    6070:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    6074:	18 16       	cp	r1, r24
    6076:	4c f5       	brge	.+82     	; 0x60ca <LCD_vidInit4+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6078:	6f a1       	ldd	r22, Y+39	; 0x27
    607a:	78 a5       	ldd	r23, Y+40	; 0x28
    607c:	89 a5       	ldd	r24, Y+41	; 0x29
    607e:	9a a5       	ldd	r25, Y+42	; 0x2a
    6080:	20 e0       	ldi	r18, 0x00	; 0
    6082:	30 e0       	ldi	r19, 0x00	; 0
    6084:	40 e2       	ldi	r20, 0x20	; 32
    6086:	51 e4       	ldi	r21, 0x41	; 65
    6088:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    608c:	dc 01       	movw	r26, r24
    608e:	cb 01       	movw	r24, r22
    6090:	bc 01       	movw	r22, r24
    6092:	cd 01       	movw	r24, r26
    6094:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    6098:	dc 01       	movw	r26, r24
    609a:	cb 01       	movw	r24, r22
    609c:	9a a3       	std	Y+34, r25	; 0x22
    609e:	89 a3       	std	Y+33, r24	; 0x21
    60a0:	0f c0       	rjmp	.+30     	; 0x60c0 <LCD_vidInit4+0x2d8>
    60a2:	88 ec       	ldi	r24, 0xC8	; 200
    60a4:	90 e0       	ldi	r25, 0x00	; 0
    60a6:	98 a3       	std	Y+32, r25	; 0x20
    60a8:	8f 8f       	std	Y+31, r24	; 0x1f
    60aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    60ac:	98 a1       	ldd	r25, Y+32	; 0x20
    60ae:	01 97       	sbiw	r24, 0x01	; 1
    60b0:	f1 f7       	brne	.-4      	; 0x60ae <LCD_vidInit4+0x2c6>
    60b2:	98 a3       	std	Y+32, r25	; 0x20
    60b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60b6:	89 a1       	ldd	r24, Y+33	; 0x21
    60b8:	9a a1       	ldd	r25, Y+34	; 0x22
    60ba:	01 97       	sbiw	r24, 0x01	; 1
    60bc:	9a a3       	std	Y+34, r25	; 0x22
    60be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60c0:	89 a1       	ldd	r24, Y+33	; 0x21
    60c2:	9a a1       	ldd	r25, Y+34	; 0x22
    60c4:	00 97       	sbiw	r24, 0x00	; 0
    60c6:	69 f7       	brne	.-38     	; 0x60a2 <LCD_vidInit4+0x2ba>
    60c8:	14 c0       	rjmp	.+40     	; 0x60f2 <LCD_vidInit4+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60ca:	6b a1       	ldd	r22, Y+35	; 0x23
    60cc:	7c a1       	ldd	r23, Y+36	; 0x24
    60ce:	8d a1       	ldd	r24, Y+37	; 0x25
    60d0:	9e a1       	ldd	r25, Y+38	; 0x26
    60d2:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    60d6:	dc 01       	movw	r26, r24
    60d8:	cb 01       	movw	r24, r22
    60da:	9a a3       	std	Y+34, r25	; 0x22
    60dc:	89 a3       	std	Y+33, r24	; 0x21
    60de:	89 a1       	ldd	r24, Y+33	; 0x21
    60e0:	9a a1       	ldd	r25, Y+34	; 0x22
    60e2:	9e 8f       	std	Y+30, r25	; 0x1e
    60e4:	8d 8f       	std	Y+29, r24	; 0x1d
    60e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    60e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    60ea:	01 97       	sbiw	r24, 0x01	; 1
    60ec:	f1 f7       	brne	.-4      	; 0x60ea <LCD_vidInit4+0x302>
    60ee:	9e 8f       	std	Y+30, r25	; 0x1e
    60f0:	8d 8f       	std	Y+29, r24	; 0x1d

	  //wait for a time
	  _delay_ms(30);

	  //display clear
	  LCD_vidSendCommand(0b00000000);
    60f2:	80 e0       	ldi	r24, 0x00	; 0
    60f4:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
	  LCD_vidSendCommand(0b00010000);
    60f8:	80 e1       	ldi	r24, 0x10	; 16
    60fa:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
    60fe:	80 e0       	ldi	r24, 0x00	; 0
    6100:	90 e0       	ldi	r25, 0x00	; 0
    6102:	a0 ef       	ldi	r26, 0xF0	; 240
    6104:	b1 e4       	ldi	r27, 0x41	; 65
    6106:	89 8f       	std	Y+25, r24	; 0x19
    6108:	9a 8f       	std	Y+26, r25	; 0x1a
    610a:	ab 8f       	std	Y+27, r26	; 0x1b
    610c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    610e:	69 8d       	ldd	r22, Y+25	; 0x19
    6110:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6112:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6114:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6116:	20 e0       	ldi	r18, 0x00	; 0
    6118:	30 e0       	ldi	r19, 0x00	; 0
    611a:	4a ef       	ldi	r20, 0xFA	; 250
    611c:	54 e4       	ldi	r21, 0x44	; 68
    611e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    6122:	dc 01       	movw	r26, r24
    6124:	cb 01       	movw	r24, r22
    6126:	8d 8b       	std	Y+21, r24	; 0x15
    6128:	9e 8b       	std	Y+22, r25	; 0x16
    612a:	af 8b       	std	Y+23, r26	; 0x17
    612c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    612e:	6d 89       	ldd	r22, Y+21	; 0x15
    6130:	7e 89       	ldd	r23, Y+22	; 0x16
    6132:	8f 89       	ldd	r24, Y+23	; 0x17
    6134:	98 8d       	ldd	r25, Y+24	; 0x18
    6136:	20 e0       	ldi	r18, 0x00	; 0
    6138:	30 e0       	ldi	r19, 0x00	; 0
    613a:	40 e8       	ldi	r20, 0x80	; 128
    613c:	5f e3       	ldi	r21, 0x3F	; 63
    613e:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    6142:	88 23       	and	r24, r24
    6144:	2c f4       	brge	.+10     	; 0x6150 <LCD_vidInit4+0x368>
		__ticks = 1;
    6146:	81 e0       	ldi	r24, 0x01	; 1
    6148:	90 e0       	ldi	r25, 0x00	; 0
    614a:	9c 8b       	std	Y+20, r25	; 0x14
    614c:	8b 8b       	std	Y+19, r24	; 0x13
    614e:	3f c0       	rjmp	.+126    	; 0x61ce <LCD_vidInit4+0x3e6>
	else if (__tmp > 65535)
    6150:	6d 89       	ldd	r22, Y+21	; 0x15
    6152:	7e 89       	ldd	r23, Y+22	; 0x16
    6154:	8f 89       	ldd	r24, Y+23	; 0x17
    6156:	98 8d       	ldd	r25, Y+24	; 0x18
    6158:	20 e0       	ldi	r18, 0x00	; 0
    615a:	3f ef       	ldi	r19, 0xFF	; 255
    615c:	4f e7       	ldi	r20, 0x7F	; 127
    615e:	57 e4       	ldi	r21, 0x47	; 71
    6160:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    6164:	18 16       	cp	r1, r24
    6166:	4c f5       	brge	.+82     	; 0x61ba <LCD_vidInit4+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6168:	69 8d       	ldd	r22, Y+25	; 0x19
    616a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    616c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    616e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6170:	20 e0       	ldi	r18, 0x00	; 0
    6172:	30 e0       	ldi	r19, 0x00	; 0
    6174:	40 e2       	ldi	r20, 0x20	; 32
    6176:	51 e4       	ldi	r21, 0x41	; 65
    6178:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    617c:	dc 01       	movw	r26, r24
    617e:	cb 01       	movw	r24, r22
    6180:	bc 01       	movw	r22, r24
    6182:	cd 01       	movw	r24, r26
    6184:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    6188:	dc 01       	movw	r26, r24
    618a:	cb 01       	movw	r24, r22
    618c:	9c 8b       	std	Y+20, r25	; 0x14
    618e:	8b 8b       	std	Y+19, r24	; 0x13
    6190:	0f c0       	rjmp	.+30     	; 0x61b0 <LCD_vidInit4+0x3c8>
    6192:	88 ec       	ldi	r24, 0xC8	; 200
    6194:	90 e0       	ldi	r25, 0x00	; 0
    6196:	9a 8b       	std	Y+18, r25	; 0x12
    6198:	89 8b       	std	Y+17, r24	; 0x11
    619a:	89 89       	ldd	r24, Y+17	; 0x11
    619c:	9a 89       	ldd	r25, Y+18	; 0x12
    619e:	01 97       	sbiw	r24, 0x01	; 1
    61a0:	f1 f7       	brne	.-4      	; 0x619e <LCD_vidInit4+0x3b6>
    61a2:	9a 8b       	std	Y+18, r25	; 0x12
    61a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61a6:	8b 89       	ldd	r24, Y+19	; 0x13
    61a8:	9c 89       	ldd	r25, Y+20	; 0x14
    61aa:	01 97       	sbiw	r24, 0x01	; 1
    61ac:	9c 8b       	std	Y+20, r25	; 0x14
    61ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61b0:	8b 89       	ldd	r24, Y+19	; 0x13
    61b2:	9c 89       	ldd	r25, Y+20	; 0x14
    61b4:	00 97       	sbiw	r24, 0x00	; 0
    61b6:	69 f7       	brne	.-38     	; 0x6192 <LCD_vidInit4+0x3aa>
    61b8:	14 c0       	rjmp	.+40     	; 0x61e2 <LCD_vidInit4+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61ba:	6d 89       	ldd	r22, Y+21	; 0x15
    61bc:	7e 89       	ldd	r23, Y+22	; 0x16
    61be:	8f 89       	ldd	r24, Y+23	; 0x17
    61c0:	98 8d       	ldd	r25, Y+24	; 0x18
    61c2:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    61c6:	dc 01       	movw	r26, r24
    61c8:	cb 01       	movw	r24, r22
    61ca:	9c 8b       	std	Y+20, r25	; 0x14
    61cc:	8b 8b       	std	Y+19, r24	; 0x13
    61ce:	8b 89       	ldd	r24, Y+19	; 0x13
    61d0:	9c 89       	ldd	r25, Y+20	; 0x14
    61d2:	98 8b       	std	Y+16, r25	; 0x10
    61d4:	8f 87       	std	Y+15, r24	; 0x0f
    61d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    61d8:	98 89       	ldd	r25, Y+16	; 0x10
    61da:	01 97       	sbiw	r24, 0x01	; 1
    61dc:	f1 f7       	brne	.-4      	; 0x61da <LCD_vidInit4+0x3f2>
    61de:	98 8b       	std	Y+16, r25	; 0x10
    61e0:	8f 87       	std	Y+15, r24	; 0x0f

	  //wait for a time
	  _delay_ms(30);

	  //entry mode set
	 LCD_vidSendCommand(0b00000000);
    61e2:	80 e0       	ldi	r24, 0x00	; 0
    61e4:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
	  LCD_vidSendCommand(0b01100000);
    61e8:	80 e6       	ldi	r24, 0x60	; 96
    61ea:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
    61ee:	80 e0       	ldi	r24, 0x00	; 0
    61f0:	90 e0       	ldi	r25, 0x00	; 0
    61f2:	a0 ef       	ldi	r26, 0xF0	; 240
    61f4:	b1 e4       	ldi	r27, 0x41	; 65
    61f6:	8b 87       	std	Y+11, r24	; 0x0b
    61f8:	9c 87       	std	Y+12, r25	; 0x0c
    61fa:	ad 87       	std	Y+13, r26	; 0x0d
    61fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    61fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    6200:	7c 85       	ldd	r23, Y+12	; 0x0c
    6202:	8d 85       	ldd	r24, Y+13	; 0x0d
    6204:	9e 85       	ldd	r25, Y+14	; 0x0e
    6206:	20 e0       	ldi	r18, 0x00	; 0
    6208:	30 e0       	ldi	r19, 0x00	; 0
    620a:	4a ef       	ldi	r20, 0xFA	; 250
    620c:	54 e4       	ldi	r21, 0x44	; 68
    620e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    6212:	dc 01       	movw	r26, r24
    6214:	cb 01       	movw	r24, r22
    6216:	8f 83       	std	Y+7, r24	; 0x07
    6218:	98 87       	std	Y+8, r25	; 0x08
    621a:	a9 87       	std	Y+9, r26	; 0x09
    621c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    621e:	6f 81       	ldd	r22, Y+7	; 0x07
    6220:	78 85       	ldd	r23, Y+8	; 0x08
    6222:	89 85       	ldd	r24, Y+9	; 0x09
    6224:	9a 85       	ldd	r25, Y+10	; 0x0a
    6226:	20 e0       	ldi	r18, 0x00	; 0
    6228:	30 e0       	ldi	r19, 0x00	; 0
    622a:	40 e8       	ldi	r20, 0x80	; 128
    622c:	5f e3       	ldi	r21, 0x3F	; 63
    622e:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    6232:	88 23       	and	r24, r24
    6234:	2c f4       	brge	.+10     	; 0x6240 <LCD_vidInit4+0x458>
		__ticks = 1;
    6236:	81 e0       	ldi	r24, 0x01	; 1
    6238:	90 e0       	ldi	r25, 0x00	; 0
    623a:	9e 83       	std	Y+6, r25	; 0x06
    623c:	8d 83       	std	Y+5, r24	; 0x05
    623e:	3f c0       	rjmp	.+126    	; 0x62be <LCD_vidInit4+0x4d6>
	else if (__tmp > 65535)
    6240:	6f 81       	ldd	r22, Y+7	; 0x07
    6242:	78 85       	ldd	r23, Y+8	; 0x08
    6244:	89 85       	ldd	r24, Y+9	; 0x09
    6246:	9a 85       	ldd	r25, Y+10	; 0x0a
    6248:	20 e0       	ldi	r18, 0x00	; 0
    624a:	3f ef       	ldi	r19, 0xFF	; 255
    624c:	4f e7       	ldi	r20, 0x7F	; 127
    624e:	57 e4       	ldi	r21, 0x47	; 71
    6250:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    6254:	18 16       	cp	r1, r24
    6256:	4c f5       	brge	.+82     	; 0x62aa <LCD_vidInit4+0x4c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6258:	6b 85       	ldd	r22, Y+11	; 0x0b
    625a:	7c 85       	ldd	r23, Y+12	; 0x0c
    625c:	8d 85       	ldd	r24, Y+13	; 0x0d
    625e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6260:	20 e0       	ldi	r18, 0x00	; 0
    6262:	30 e0       	ldi	r19, 0x00	; 0
    6264:	40 e2       	ldi	r20, 0x20	; 32
    6266:	51 e4       	ldi	r21, 0x41	; 65
    6268:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    626c:	dc 01       	movw	r26, r24
    626e:	cb 01       	movw	r24, r22
    6270:	bc 01       	movw	r22, r24
    6272:	cd 01       	movw	r24, r26
    6274:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    6278:	dc 01       	movw	r26, r24
    627a:	cb 01       	movw	r24, r22
    627c:	9e 83       	std	Y+6, r25	; 0x06
    627e:	8d 83       	std	Y+5, r24	; 0x05
    6280:	0f c0       	rjmp	.+30     	; 0x62a0 <LCD_vidInit4+0x4b8>
    6282:	88 ec       	ldi	r24, 0xC8	; 200
    6284:	90 e0       	ldi	r25, 0x00	; 0
    6286:	9c 83       	std	Y+4, r25	; 0x04
    6288:	8b 83       	std	Y+3, r24	; 0x03
    628a:	8b 81       	ldd	r24, Y+3	; 0x03
    628c:	9c 81       	ldd	r25, Y+4	; 0x04
    628e:	01 97       	sbiw	r24, 0x01	; 1
    6290:	f1 f7       	brne	.-4      	; 0x628e <LCD_vidInit4+0x4a6>
    6292:	9c 83       	std	Y+4, r25	; 0x04
    6294:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6296:	8d 81       	ldd	r24, Y+5	; 0x05
    6298:	9e 81       	ldd	r25, Y+6	; 0x06
    629a:	01 97       	sbiw	r24, 0x01	; 1
    629c:	9e 83       	std	Y+6, r25	; 0x06
    629e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62a0:	8d 81       	ldd	r24, Y+5	; 0x05
    62a2:	9e 81       	ldd	r25, Y+6	; 0x06
    62a4:	00 97       	sbiw	r24, 0x00	; 0
    62a6:	69 f7       	brne	.-38     	; 0x6282 <LCD_vidInit4+0x49a>
    62a8:	14 c0       	rjmp	.+40     	; 0x62d2 <LCD_vidInit4+0x4ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62aa:	6f 81       	ldd	r22, Y+7	; 0x07
    62ac:	78 85       	ldd	r23, Y+8	; 0x08
    62ae:	89 85       	ldd	r24, Y+9	; 0x09
    62b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    62b2:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    62b6:	dc 01       	movw	r26, r24
    62b8:	cb 01       	movw	r24, r22
    62ba:	9e 83       	std	Y+6, r25	; 0x06
    62bc:	8d 83       	std	Y+5, r24	; 0x05
    62be:	8d 81       	ldd	r24, Y+5	; 0x05
    62c0:	9e 81       	ldd	r25, Y+6	; 0x06
    62c2:	9a 83       	std	Y+2, r25	; 0x02
    62c4:	89 83       	std	Y+1, r24	; 0x01
    62c6:	89 81       	ldd	r24, Y+1	; 0x01
    62c8:	9a 81       	ldd	r25, Y+2	; 0x02
    62ca:	01 97       	sbiw	r24, 0x01	; 1
    62cc:	f1 f7       	brne	.-4      	; 0x62ca <LCD_vidInit4+0x4e2>
    62ce:	9a 83       	std	Y+2, r25	; 0x02
    62d0:	89 83       	std	Y+1, r24	; 0x01

	  //wait for a time
	  _delay_ms(30);
}
    62d2:	ca 5b       	subi	r28, 0xBA	; 186
    62d4:	df 4f       	sbci	r29, 0xFF	; 255
    62d6:	0f b6       	in	r0, 0x3f	; 63
    62d8:	f8 94       	cli
    62da:	de bf       	out	0x3e, r29	; 62
    62dc:	0f be       	out	0x3f, r0	; 63
    62de:	cd bf       	out	0x3d, r28	; 61
    62e0:	cf 91       	pop	r28
    62e2:	df 91       	pop	r29
    62e4:	1f 91       	pop	r17
    62e6:	0f 91       	pop	r16
    62e8:	08 95       	ret

000062ea <LCD_vidWriteCharacter4>:

//....................................................................

void LCD_vidWriteCharacter4(uint8 u8DataCpy)
{
    62ea:	df 93       	push	r29
    62ec:	cf 93       	push	r28
    62ee:	0f 92       	push	r0
    62f0:	cd b7       	in	r28, 0x3d	; 61
    62f2:	de b7       	in	r29, 0x3e	; 62
    62f4:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidWriteCharacter((GET_NippleH(u8DataCpy))<<4);
    62f6:	89 81       	ldd	r24, Y+1	; 0x01
    62f8:	80 7f       	andi	r24, 0xF0	; 240
    62fa:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <LCD_vidWriteCharacter>
	LCD_vidWriteCharacter((GET_NippleL(u8DataCpy))<<4);
    62fe:	89 81       	ldd	r24, Y+1	; 0x01
    6300:	88 2f       	mov	r24, r24
    6302:	90 e0       	ldi	r25, 0x00	; 0
    6304:	82 95       	swap	r24
    6306:	92 95       	swap	r25
    6308:	90 7f       	andi	r25, 0xF0	; 240
    630a:	98 27       	eor	r25, r24
    630c:	80 7f       	andi	r24, 0xF0	; 240
    630e:	98 27       	eor	r25, r24
    6310:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <LCD_vidWriteCharacter>
}
    6314:	0f 90       	pop	r0
    6316:	cf 91       	pop	r28
    6318:	df 91       	pop	r29
    631a:	08 95       	ret

0000631c <LCD_vidWriteString>:


void LCD_vidWriteString(uint8 *pu8StringCpy)
{
    631c:	df 93       	push	r29
    631e:	cf 93       	push	r28
    6320:	cd b7       	in	r28, 0x3d	; 61
    6322:	de b7       	in	r29, 0x3e	; 62
    6324:	61 97       	sbiw	r28, 0x11	; 17
    6326:	0f b6       	in	r0, 0x3f	; 63
    6328:	f8 94       	cli
    632a:	de bf       	out	0x3e, r29	; 62
    632c:	0f be       	out	0x3f, r0	; 63
    632e:	cd bf       	out	0x3d, r28	; 61
    6330:	99 8b       	std	Y+17, r25	; 0x11
    6332:	88 8b       	std	Y+16, r24	; 0x10
	uint8 u8_index=0;
    6334:	1f 86       	std	Y+15, r1	; 0x0f
    6336:	80 c0       	rjmp	.+256    	; 0x6438 <LCD_vidWriteString+0x11c>

	while(pu8StringCpy[u8_index]!='\0')

	{
		LCD_vidWriteCharacter(pu8StringCpy[u8_index]);
    6338:	8f 85       	ldd	r24, Y+15	; 0x0f
    633a:	28 2f       	mov	r18, r24
    633c:	30 e0       	ldi	r19, 0x00	; 0
    633e:	88 89       	ldd	r24, Y+16	; 0x10
    6340:	99 89       	ldd	r25, Y+17	; 0x11
    6342:	fc 01       	movw	r30, r24
    6344:	e2 0f       	add	r30, r18
    6346:	f3 1f       	adc	r31, r19
    6348:	80 81       	ld	r24, Z
    634a:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <LCD_vidWriteCharacter>
		u8_index++;
    634e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6350:	8f 5f       	subi	r24, 0xFF	; 255
    6352:	8f 87       	std	Y+15, r24	; 0x0f
    6354:	80 e0       	ldi	r24, 0x00	; 0
    6356:	90 e0       	ldi	r25, 0x00	; 0
    6358:	a0 e0       	ldi	r26, 0x00	; 0
    635a:	b0 e4       	ldi	r27, 0x40	; 64
    635c:	8b 87       	std	Y+11, r24	; 0x0b
    635e:	9c 87       	std	Y+12, r25	; 0x0c
    6360:	ad 87       	std	Y+13, r26	; 0x0d
    6362:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6364:	6b 85       	ldd	r22, Y+11	; 0x0b
    6366:	7c 85       	ldd	r23, Y+12	; 0x0c
    6368:	8d 85       	ldd	r24, Y+13	; 0x0d
    636a:	9e 85       	ldd	r25, Y+14	; 0x0e
    636c:	20 e0       	ldi	r18, 0x00	; 0
    636e:	30 e0       	ldi	r19, 0x00	; 0
    6370:	4a ef       	ldi	r20, 0xFA	; 250
    6372:	54 e4       	ldi	r21, 0x44	; 68
    6374:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    6378:	dc 01       	movw	r26, r24
    637a:	cb 01       	movw	r24, r22
    637c:	8f 83       	std	Y+7, r24	; 0x07
    637e:	98 87       	std	Y+8, r25	; 0x08
    6380:	a9 87       	std	Y+9, r26	; 0x09
    6382:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6384:	6f 81       	ldd	r22, Y+7	; 0x07
    6386:	78 85       	ldd	r23, Y+8	; 0x08
    6388:	89 85       	ldd	r24, Y+9	; 0x09
    638a:	9a 85       	ldd	r25, Y+10	; 0x0a
    638c:	20 e0       	ldi	r18, 0x00	; 0
    638e:	30 e0       	ldi	r19, 0x00	; 0
    6390:	40 e8       	ldi	r20, 0x80	; 128
    6392:	5f e3       	ldi	r21, 0x3F	; 63
    6394:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    6398:	88 23       	and	r24, r24
    639a:	2c f4       	brge	.+10     	; 0x63a6 <LCD_vidWriteString+0x8a>
		__ticks = 1;
    639c:	81 e0       	ldi	r24, 0x01	; 1
    639e:	90 e0       	ldi	r25, 0x00	; 0
    63a0:	9e 83       	std	Y+6, r25	; 0x06
    63a2:	8d 83       	std	Y+5, r24	; 0x05
    63a4:	3f c0       	rjmp	.+126    	; 0x6424 <LCD_vidWriteString+0x108>
	else if (__tmp > 65535)
    63a6:	6f 81       	ldd	r22, Y+7	; 0x07
    63a8:	78 85       	ldd	r23, Y+8	; 0x08
    63aa:	89 85       	ldd	r24, Y+9	; 0x09
    63ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    63ae:	20 e0       	ldi	r18, 0x00	; 0
    63b0:	3f ef       	ldi	r19, 0xFF	; 255
    63b2:	4f e7       	ldi	r20, 0x7F	; 127
    63b4:	57 e4       	ldi	r21, 0x47	; 71
    63b6:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    63ba:	18 16       	cp	r1, r24
    63bc:	4c f5       	brge	.+82     	; 0x6410 <LCD_vidWriteString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    63be:	6b 85       	ldd	r22, Y+11	; 0x0b
    63c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    63c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    63c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    63c6:	20 e0       	ldi	r18, 0x00	; 0
    63c8:	30 e0       	ldi	r19, 0x00	; 0
    63ca:	40 e2       	ldi	r20, 0x20	; 32
    63cc:	51 e4       	ldi	r21, 0x41	; 65
    63ce:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    63d2:	dc 01       	movw	r26, r24
    63d4:	cb 01       	movw	r24, r22
    63d6:	bc 01       	movw	r22, r24
    63d8:	cd 01       	movw	r24, r26
    63da:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    63de:	dc 01       	movw	r26, r24
    63e0:	cb 01       	movw	r24, r22
    63e2:	9e 83       	std	Y+6, r25	; 0x06
    63e4:	8d 83       	std	Y+5, r24	; 0x05
    63e6:	0f c0       	rjmp	.+30     	; 0x6406 <LCD_vidWriteString+0xea>
    63e8:	88 ec       	ldi	r24, 0xC8	; 200
    63ea:	90 e0       	ldi	r25, 0x00	; 0
    63ec:	9c 83       	std	Y+4, r25	; 0x04
    63ee:	8b 83       	std	Y+3, r24	; 0x03
    63f0:	8b 81       	ldd	r24, Y+3	; 0x03
    63f2:	9c 81       	ldd	r25, Y+4	; 0x04
    63f4:	01 97       	sbiw	r24, 0x01	; 1
    63f6:	f1 f7       	brne	.-4      	; 0x63f4 <LCD_vidWriteString+0xd8>
    63f8:	9c 83       	std	Y+4, r25	; 0x04
    63fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63fc:	8d 81       	ldd	r24, Y+5	; 0x05
    63fe:	9e 81       	ldd	r25, Y+6	; 0x06
    6400:	01 97       	sbiw	r24, 0x01	; 1
    6402:	9e 83       	std	Y+6, r25	; 0x06
    6404:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6406:	8d 81       	ldd	r24, Y+5	; 0x05
    6408:	9e 81       	ldd	r25, Y+6	; 0x06
    640a:	00 97       	sbiw	r24, 0x00	; 0
    640c:	69 f7       	brne	.-38     	; 0x63e8 <LCD_vidWriteString+0xcc>
    640e:	14 c0       	rjmp	.+40     	; 0x6438 <LCD_vidWriteString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6410:	6f 81       	ldd	r22, Y+7	; 0x07
    6412:	78 85       	ldd	r23, Y+8	; 0x08
    6414:	89 85       	ldd	r24, Y+9	; 0x09
    6416:	9a 85       	ldd	r25, Y+10	; 0x0a
    6418:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    641c:	dc 01       	movw	r26, r24
    641e:	cb 01       	movw	r24, r22
    6420:	9e 83       	std	Y+6, r25	; 0x06
    6422:	8d 83       	std	Y+5, r24	; 0x05
    6424:	8d 81       	ldd	r24, Y+5	; 0x05
    6426:	9e 81       	ldd	r25, Y+6	; 0x06
    6428:	9a 83       	std	Y+2, r25	; 0x02
    642a:	89 83       	std	Y+1, r24	; 0x01
    642c:	89 81       	ldd	r24, Y+1	; 0x01
    642e:	9a 81       	ldd	r25, Y+2	; 0x02
    6430:	01 97       	sbiw	r24, 0x01	; 1
    6432:	f1 f7       	brne	.-4      	; 0x6430 <LCD_vidWriteString+0x114>
    6434:	9a 83       	std	Y+2, r25	; 0x02
    6436:	89 83       	std	Y+1, r24	; 0x01

void LCD_vidWriteString(uint8 *pu8StringCpy)
{
	uint8 u8_index=0;

	while(pu8StringCpy[u8_index]!='\0')
    6438:	8f 85       	ldd	r24, Y+15	; 0x0f
    643a:	28 2f       	mov	r18, r24
    643c:	30 e0       	ldi	r19, 0x00	; 0
    643e:	88 89       	ldd	r24, Y+16	; 0x10
    6440:	99 89       	ldd	r25, Y+17	; 0x11
    6442:	fc 01       	movw	r30, r24
    6444:	e2 0f       	add	r30, r18
    6446:	f3 1f       	adc	r31, r19
    6448:	80 81       	ld	r24, Z
    644a:	88 23       	and	r24, r24
    644c:	09 f0       	breq	.+2      	; 0x6450 <LCD_vidWriteString+0x134>
    644e:	74 cf       	rjmp	.-280    	; 0x6338 <LCD_vidWriteString+0x1c>
	{
		LCD_vidWriteCharacter(pu8StringCpy[u8_index]);
		u8_index++;
		_delay_ms(2);
	}
}
    6450:	61 96       	adiw	r28, 0x11	; 17
    6452:	0f b6       	in	r0, 0x3f	; 63
    6454:	f8 94       	cli
    6456:	de bf       	out	0x3e, r29	; 62
    6458:	0f be       	out	0x3f, r0	; 63
    645a:	cd bf       	out	0x3d, r28	; 61
    645c:	cf 91       	pop	r28
    645e:	df 91       	pop	r29
    6460:	08 95       	ret

00006462 <LCD_vidWriteString4>:
//...................................................................................
void LCD_vidWriteString4(uint8 *pu8StringCpy)
{
    6462:	df 93       	push	r29
    6464:	cf 93       	push	r28
    6466:	cd b7       	in	r28, 0x3d	; 61
    6468:	de b7       	in	r29, 0x3e	; 62
    646a:	61 97       	sbiw	r28, 0x11	; 17
    646c:	0f b6       	in	r0, 0x3f	; 63
    646e:	f8 94       	cli
    6470:	de bf       	out	0x3e, r29	; 62
    6472:	0f be       	out	0x3f, r0	; 63
    6474:	cd bf       	out	0x3d, r28	; 61
    6476:	99 8b       	std	Y+17, r25	; 0x11
    6478:	88 8b       	std	Y+16, r24	; 0x10
	uint8 u8_index=0;
    647a:	1f 86       	std	Y+15, r1	; 0x0f
    647c:	80 c0       	rjmp	.+256    	; 0x657e <LCD_vidWriteString4+0x11c>

		while(pu8StringCpy[u8_index]!='\0')

		{
			LCD_vidWriteCharacter4(pu8StringCpy[u8_index]);
    647e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6480:	28 2f       	mov	r18, r24
    6482:	30 e0       	ldi	r19, 0x00	; 0
    6484:	88 89       	ldd	r24, Y+16	; 0x10
    6486:	99 89       	ldd	r25, Y+17	; 0x11
    6488:	fc 01       	movw	r30, r24
    648a:	e2 0f       	add	r30, r18
    648c:	f3 1f       	adc	r31, r19
    648e:	80 81       	ld	r24, Z
    6490:	0e 94 75 31 	call	0x62ea	; 0x62ea <LCD_vidWriteCharacter4>
			u8_index++;
    6494:	8f 85       	ldd	r24, Y+15	; 0x0f
    6496:	8f 5f       	subi	r24, 0xFF	; 255
    6498:	8f 87       	std	Y+15, r24	; 0x0f
    649a:	80 e0       	ldi	r24, 0x00	; 0
    649c:	90 e0       	ldi	r25, 0x00	; 0
    649e:	a0 e8       	ldi	r26, 0x80	; 128
    64a0:	bf e3       	ldi	r27, 0x3F	; 63
    64a2:	8b 87       	std	Y+11, r24	; 0x0b
    64a4:	9c 87       	std	Y+12, r25	; 0x0c
    64a6:	ad 87       	std	Y+13, r26	; 0x0d
    64a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    64ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    64ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    64b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    64b2:	20 e0       	ldi	r18, 0x00	; 0
    64b4:	30 e0       	ldi	r19, 0x00	; 0
    64b6:	4a ef       	ldi	r20, 0xFA	; 250
    64b8:	54 e4       	ldi	r21, 0x44	; 68
    64ba:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    64be:	dc 01       	movw	r26, r24
    64c0:	cb 01       	movw	r24, r22
    64c2:	8f 83       	std	Y+7, r24	; 0x07
    64c4:	98 87       	std	Y+8, r25	; 0x08
    64c6:	a9 87       	std	Y+9, r26	; 0x09
    64c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    64ca:	6f 81       	ldd	r22, Y+7	; 0x07
    64cc:	78 85       	ldd	r23, Y+8	; 0x08
    64ce:	89 85       	ldd	r24, Y+9	; 0x09
    64d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    64d2:	20 e0       	ldi	r18, 0x00	; 0
    64d4:	30 e0       	ldi	r19, 0x00	; 0
    64d6:	40 e8       	ldi	r20, 0x80	; 128
    64d8:	5f e3       	ldi	r21, 0x3F	; 63
    64da:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    64de:	88 23       	and	r24, r24
    64e0:	2c f4       	brge	.+10     	; 0x64ec <LCD_vidWriteString4+0x8a>
		__ticks = 1;
    64e2:	81 e0       	ldi	r24, 0x01	; 1
    64e4:	90 e0       	ldi	r25, 0x00	; 0
    64e6:	9e 83       	std	Y+6, r25	; 0x06
    64e8:	8d 83       	std	Y+5, r24	; 0x05
    64ea:	3f c0       	rjmp	.+126    	; 0x656a <LCD_vidWriteString4+0x108>
	else if (__tmp > 65535)
    64ec:	6f 81       	ldd	r22, Y+7	; 0x07
    64ee:	78 85       	ldd	r23, Y+8	; 0x08
    64f0:	89 85       	ldd	r24, Y+9	; 0x09
    64f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    64f4:	20 e0       	ldi	r18, 0x00	; 0
    64f6:	3f ef       	ldi	r19, 0xFF	; 255
    64f8:	4f e7       	ldi	r20, 0x7F	; 127
    64fa:	57 e4       	ldi	r21, 0x47	; 71
    64fc:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    6500:	18 16       	cp	r1, r24
    6502:	4c f5       	brge	.+82     	; 0x6556 <LCD_vidWriteString4+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6504:	6b 85       	ldd	r22, Y+11	; 0x0b
    6506:	7c 85       	ldd	r23, Y+12	; 0x0c
    6508:	8d 85       	ldd	r24, Y+13	; 0x0d
    650a:	9e 85       	ldd	r25, Y+14	; 0x0e
    650c:	20 e0       	ldi	r18, 0x00	; 0
    650e:	30 e0       	ldi	r19, 0x00	; 0
    6510:	40 e2       	ldi	r20, 0x20	; 32
    6512:	51 e4       	ldi	r21, 0x41	; 65
    6514:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    6518:	dc 01       	movw	r26, r24
    651a:	cb 01       	movw	r24, r22
    651c:	bc 01       	movw	r22, r24
    651e:	cd 01       	movw	r24, r26
    6520:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    6524:	dc 01       	movw	r26, r24
    6526:	cb 01       	movw	r24, r22
    6528:	9e 83       	std	Y+6, r25	; 0x06
    652a:	8d 83       	std	Y+5, r24	; 0x05
    652c:	0f c0       	rjmp	.+30     	; 0x654c <LCD_vidWriteString4+0xea>
    652e:	88 ec       	ldi	r24, 0xC8	; 200
    6530:	90 e0       	ldi	r25, 0x00	; 0
    6532:	9c 83       	std	Y+4, r25	; 0x04
    6534:	8b 83       	std	Y+3, r24	; 0x03
    6536:	8b 81       	ldd	r24, Y+3	; 0x03
    6538:	9c 81       	ldd	r25, Y+4	; 0x04
    653a:	01 97       	sbiw	r24, 0x01	; 1
    653c:	f1 f7       	brne	.-4      	; 0x653a <LCD_vidWriteString4+0xd8>
    653e:	9c 83       	std	Y+4, r25	; 0x04
    6540:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6542:	8d 81       	ldd	r24, Y+5	; 0x05
    6544:	9e 81       	ldd	r25, Y+6	; 0x06
    6546:	01 97       	sbiw	r24, 0x01	; 1
    6548:	9e 83       	std	Y+6, r25	; 0x06
    654a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    654c:	8d 81       	ldd	r24, Y+5	; 0x05
    654e:	9e 81       	ldd	r25, Y+6	; 0x06
    6550:	00 97       	sbiw	r24, 0x00	; 0
    6552:	69 f7       	brne	.-38     	; 0x652e <LCD_vidWriteString4+0xcc>
    6554:	14 c0       	rjmp	.+40     	; 0x657e <LCD_vidWriteString4+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6556:	6f 81       	ldd	r22, Y+7	; 0x07
    6558:	78 85       	ldd	r23, Y+8	; 0x08
    655a:	89 85       	ldd	r24, Y+9	; 0x09
    655c:	9a 85       	ldd	r25, Y+10	; 0x0a
    655e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    6562:	dc 01       	movw	r26, r24
    6564:	cb 01       	movw	r24, r22
    6566:	9e 83       	std	Y+6, r25	; 0x06
    6568:	8d 83       	std	Y+5, r24	; 0x05
    656a:	8d 81       	ldd	r24, Y+5	; 0x05
    656c:	9e 81       	ldd	r25, Y+6	; 0x06
    656e:	9a 83       	std	Y+2, r25	; 0x02
    6570:	89 83       	std	Y+1, r24	; 0x01
    6572:	89 81       	ldd	r24, Y+1	; 0x01
    6574:	9a 81       	ldd	r25, Y+2	; 0x02
    6576:	01 97       	sbiw	r24, 0x01	; 1
    6578:	f1 f7       	brne	.-4      	; 0x6576 <LCD_vidWriteString4+0x114>
    657a:	9a 83       	std	Y+2, r25	; 0x02
    657c:	89 83       	std	Y+1, r24	; 0x01
//...................................................................................
void LCD_vidWriteString4(uint8 *pu8StringCpy)
{
	uint8 u8_index=0;

		while(pu8StringCpy[u8_index]!='\0')
    657e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6580:	28 2f       	mov	r18, r24
    6582:	30 e0       	ldi	r19, 0x00	; 0
    6584:	88 89       	ldd	r24, Y+16	; 0x10
    6586:	99 89       	ldd	r25, Y+17	; 0x11
    6588:	fc 01       	movw	r30, r24
    658a:	e2 0f       	add	r30, r18
    658c:	f3 1f       	adc	r31, r19
    658e:	80 81       	ld	r24, Z
    6590:	88 23       	and	r24, r24
    6592:	09 f0       	breq	.+2      	; 0x6596 <LCD_vidWriteString4+0x134>
    6594:	74 cf       	rjmp	.-280    	; 0x647e <LCD_vidWriteString4+0x1c>
		{
			LCD_vidWriteCharacter4(pu8StringCpy[u8_index]);
			u8_index++;
			_delay_ms(1);
		}
}
    6596:	61 96       	adiw	r28, 0x11	; 17
    6598:	0f b6       	in	r0, 0x3f	; 63
    659a:	f8 94       	cli
    659c:	de bf       	out	0x3e, r29	; 62
    659e:	0f be       	out	0x3f, r0	; 63
    65a0:	cd bf       	out	0x3d, r28	; 61
    65a2:	cf 91       	pop	r28
    65a4:	df 91       	pop	r29
    65a6:	08 95       	ret

000065a8 <LCD_vidWriteUnSignedInteger>:
//..........................................................................................
void LCD_vidWriteUnSignedInteger(uint64 number)
{
    65a8:	8f 92       	push	r8
    65aa:	9f 92       	push	r9
    65ac:	af 92       	push	r10
    65ae:	bf 92       	push	r11
    65b0:	cf 92       	push	r12
    65b2:	df 92       	push	r13
    65b4:	ef 92       	push	r14
    65b6:	ff 92       	push	r15
    65b8:	0f 93       	push	r16
    65ba:	1f 93       	push	r17
    65bc:	df 93       	push	r29
    65be:	cf 93       	push	r28
    65c0:	cd b7       	in	r28, 0x3d	; 61
    65c2:	de b7       	in	r29, 0x3e	; 62
    65c4:	6d 97       	sbiw	r28, 0x1d	; 29
    65c6:	0f b6       	in	r0, 0x3f	; 63
    65c8:	f8 94       	cli
    65ca:	de bf       	out	0x3e, r29	; 62
    65cc:	0f be       	out	0x3f, r0	; 63
    65ce:	cd bf       	out	0x3d, r28	; 61
    65d0:	2e 8b       	std	Y+22, r18	; 0x16
    65d2:	3f 8b       	std	Y+23, r19	; 0x17
    65d4:	48 8f       	std	Y+24, r20	; 0x18
    65d6:	59 8f       	std	Y+25, r21	; 0x19
    65d8:	6a 8f       	std	Y+26, r22	; 0x1a
    65da:	7b 8f       	std	Y+27, r23	; 0x1b
    65dc:	8c 8f       	std	Y+28, r24	; 0x1c
    65de:	9d 8f       	std	Y+29, r25	; 0x1d
	uint8 arr[20]={};
    65e0:	84 e1       	ldi	r24, 0x14	; 20
    65e2:	fe 01       	movw	r30, r28
    65e4:	32 96       	adiw	r30, 0x02	; 2
    65e6:	df 01       	movw	r26, r30
    65e8:	98 2f       	mov	r25, r24
    65ea:	1d 92       	st	X+, r1
    65ec:	9a 95       	dec	r25
    65ee:	e9 f7       	brne	.-6      	; 0x65ea <LCD_vidWriteUnSignedInteger+0x42>
    uint8 i=0;
    65f0:	19 82       	std	Y+1, r1	; 0x01

    if(number==0)
    65f2:	8e 89       	ldd	r24, Y+22	; 0x16
    65f4:	9f 89       	ldd	r25, Y+23	; 0x17
    65f6:	89 2b       	or	r24, r25
    65f8:	98 8d       	ldd	r25, Y+24	; 0x18
    65fa:	89 2b       	or	r24, r25
    65fc:	99 8d       	ldd	r25, Y+25	; 0x19
    65fe:	89 2b       	or	r24, r25
    6600:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6602:	89 2b       	or	r24, r25
    6604:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6606:	89 2b       	or	r24, r25
    6608:	9c 8d       	ldd	r25, Y+28	; 0x1c
    660a:	89 2b       	or	r24, r25
    660c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    660e:	89 2b       	or	r24, r25
    6610:	88 23       	and	r24, r24
    6612:	09 f0       	breq	.+2      	; 0x6616 <LCD_vidWriteUnSignedInteger+0x6e>
    6614:	6b c0       	rjmp	.+214    	; 0x66ec <LCD_vidWriteUnSignedInteger+0x144>
    {
    	LCD_vidWriteCharacter(number+48);
    6616:	8e 89       	ldd	r24, Y+22	; 0x16
    6618:	80 5d       	subi	r24, 0xD0	; 208
    661a:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <LCD_vidWriteCharacter>
    661e:	8e c0       	rjmp	.+284    	; 0x673c <LCD_vidWriteUnSignedInteger+0x194>
    }
    else{
   while((i<20)&&(number!=0))
   {   arr[i++]=number%10;
    6620:	89 81       	ldd	r24, Y+1	; 0x01
    6622:	88 2e       	mov	r8, r24
    6624:	99 24       	eor	r9, r9
    6626:	ae 88       	ldd	r10, Y+22	; 0x16
    6628:	bf 88       	ldd	r11, Y+23	; 0x17
    662a:	c8 8c       	ldd	r12, Y+24	; 0x18
    662c:	d9 8c       	ldd	r13, Y+25	; 0x19
    662e:	ea 8c       	ldd	r14, Y+26	; 0x1a
    6630:	fb 8c       	ldd	r15, Y+27	; 0x1b
    6632:	0c 8d       	ldd	r16, Y+28	; 0x1c
    6634:	1d 8d       	ldd	r17, Y+29	; 0x1d
    6636:	2a 2d       	mov	r18, r10
    6638:	3b 2d       	mov	r19, r11
    663a:	4c 2d       	mov	r20, r12
    663c:	5d 2d       	mov	r21, r13
    663e:	6e 2d       	mov	r22, r14
    6640:	7f 2d       	mov	r23, r15
    6642:	80 2f       	mov	r24, r16
    6644:	91 2f       	mov	r25, r17
    6646:	0f 2e       	mov	r0, r31
    6648:	fa e0       	ldi	r31, 0x0A	; 10
    664a:	af 2e       	mov	r10, r31
    664c:	f0 2d       	mov	r31, r0
    664e:	bb 24       	eor	r11, r11
    6650:	cc 24       	eor	r12, r12
    6652:	dd 24       	eor	r13, r13
    6654:	ee 24       	eor	r14, r14
    6656:	ff 24       	eor	r15, r15
    6658:	00 e0       	ldi	r16, 0x00	; 0
    665a:	10 e0       	ldi	r17, 0x00	; 0
    665c:	0e 94 08 07 	call	0xe10	; 0xe10 <__umoddi3>
    6660:	a2 2e       	mov	r10, r18
    6662:	b3 2e       	mov	r11, r19
    6664:	c4 2e       	mov	r12, r20
    6666:	d5 2e       	mov	r13, r21
    6668:	e6 2e       	mov	r14, r22
    666a:	f7 2e       	mov	r15, r23
    666c:	08 2f       	mov	r16, r24
    666e:	19 2f       	mov	r17, r25
    6670:	2a 2d       	mov	r18, r10
    6672:	3b 2d       	mov	r19, r11
    6674:	4c 2d       	mov	r20, r12
    6676:	5d 2d       	mov	r21, r13
    6678:	6e 2d       	mov	r22, r14
    667a:	7f 2d       	mov	r23, r15
    667c:	80 2f       	mov	r24, r16
    667e:	91 2f       	mov	r25, r17
    6680:	ce 01       	movw	r24, r28
    6682:	02 96       	adiw	r24, 0x02	; 2
    6684:	fc 01       	movw	r30, r24
    6686:	e8 0d       	add	r30, r8
    6688:	f9 1d       	adc	r31, r9
    668a:	20 83       	st	Z, r18
    668c:	89 81       	ldd	r24, Y+1	; 0x01
    668e:	8f 5f       	subi	r24, 0xFF	; 255
    6690:	89 83       	std	Y+1, r24	; 0x01

	       number/=10;
    6692:	ae 88       	ldd	r10, Y+22	; 0x16
    6694:	bf 88       	ldd	r11, Y+23	; 0x17
    6696:	c8 8c       	ldd	r12, Y+24	; 0x18
    6698:	d9 8c       	ldd	r13, Y+25	; 0x19
    669a:	ea 8c       	ldd	r14, Y+26	; 0x1a
    669c:	fb 8c       	ldd	r15, Y+27	; 0x1b
    669e:	0c 8d       	ldd	r16, Y+28	; 0x1c
    66a0:	1d 8d       	ldd	r17, Y+29	; 0x1d
    66a2:	2a 2d       	mov	r18, r10
    66a4:	3b 2d       	mov	r19, r11
    66a6:	4c 2d       	mov	r20, r12
    66a8:	5d 2d       	mov	r21, r13
    66aa:	6e 2d       	mov	r22, r14
    66ac:	7f 2d       	mov	r23, r15
    66ae:	80 2f       	mov	r24, r16
    66b0:	91 2f       	mov	r25, r17
    66b2:	0f 2e       	mov	r0, r31
    66b4:	fa e0       	ldi	r31, 0x0A	; 10
    66b6:	af 2e       	mov	r10, r31
    66b8:	f0 2d       	mov	r31, r0
    66ba:	bb 24       	eor	r11, r11
    66bc:	cc 24       	eor	r12, r12
    66be:	dd 24       	eor	r13, r13
    66c0:	ee 24       	eor	r14, r14
    66c2:	ff 24       	eor	r15, r15
    66c4:	00 e0       	ldi	r16, 0x00	; 0
    66c6:	10 e0       	ldi	r17, 0x00	; 0
    66c8:	0e 94 93 00 	call	0x126	; 0x126 <__udivdi3>
    66cc:	a2 2e       	mov	r10, r18
    66ce:	b3 2e       	mov	r11, r19
    66d0:	c4 2e       	mov	r12, r20
    66d2:	d5 2e       	mov	r13, r21
    66d4:	e6 2e       	mov	r14, r22
    66d6:	f7 2e       	mov	r15, r23
    66d8:	08 2f       	mov	r16, r24
    66da:	19 2f       	mov	r17, r25
    66dc:	ae 8a       	std	Y+22, r10	; 0x16
    66de:	bf 8a       	std	Y+23, r11	; 0x17
    66e0:	c8 8e       	std	Y+24, r12	; 0x18
    66e2:	d9 8e       	std	Y+25, r13	; 0x19
    66e4:	ea 8e       	std	Y+26, r14	; 0x1a
    66e6:	fb 8e       	std	Y+27, r15	; 0x1b
    66e8:	0c 8f       	std	Y+28, r16	; 0x1c
    66ea:	1d 8f       	std	Y+29, r17	; 0x1d
    if(number==0)
    {
    	LCD_vidWriteCharacter(number+48);
    }
    else{
   while((i<20)&&(number!=0))
    66ec:	89 81       	ldd	r24, Y+1	; 0x01
    66ee:	84 31       	cpi	r24, 0x14	; 20
    66f0:	10 f5       	brcc	.+68     	; 0x6736 <LCD_vidWriteUnSignedInteger+0x18e>
    66f2:	8e 89       	ldd	r24, Y+22	; 0x16
    66f4:	9f 89       	ldd	r25, Y+23	; 0x17
    66f6:	89 2b       	or	r24, r25
    66f8:	98 8d       	ldd	r25, Y+24	; 0x18
    66fa:	89 2b       	or	r24, r25
    66fc:	99 8d       	ldd	r25, Y+25	; 0x19
    66fe:	89 2b       	or	r24, r25
    6700:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6702:	89 2b       	or	r24, r25
    6704:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6706:	89 2b       	or	r24, r25
    6708:	9c 8d       	ldd	r25, Y+28	; 0x1c
    670a:	89 2b       	or	r24, r25
    670c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    670e:	89 2b       	or	r24, r25
    6710:	88 23       	and	r24, r24
    6712:	09 f0       	breq	.+2      	; 0x6716 <LCD_vidWriteUnSignedInteger+0x16e>
    6714:	85 cf       	rjmp	.-246    	; 0x6620 <LCD_vidWriteUnSignedInteger+0x78>
    6716:	0f c0       	rjmp	.+30     	; 0x6736 <LCD_vidWriteUnSignedInteger+0x18e>
	       number/=10;

   }

       while(i!=0){
    	LCD_vidWriteCharacter(arr[--i]+48);
    6718:	89 81       	ldd	r24, Y+1	; 0x01
    671a:	81 50       	subi	r24, 0x01	; 1
    671c:	89 83       	std	Y+1, r24	; 0x01
    671e:	89 81       	ldd	r24, Y+1	; 0x01
    6720:	28 2f       	mov	r18, r24
    6722:	30 e0       	ldi	r19, 0x00	; 0
    6724:	ce 01       	movw	r24, r28
    6726:	02 96       	adiw	r24, 0x02	; 2
    6728:	fc 01       	movw	r30, r24
    672a:	e2 0f       	add	r30, r18
    672c:	f3 1f       	adc	r31, r19
    672e:	80 81       	ld	r24, Z
    6730:	80 5d       	subi	r24, 0xD0	; 208
    6732:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <LCD_vidWriteCharacter>

	       number/=10;

   }

       while(i!=0){
    6736:	89 81       	ldd	r24, Y+1	; 0x01
    6738:	88 23       	and	r24, r24
    673a:	71 f7       	brne	.-36     	; 0x6718 <LCD_vidWriteUnSignedInteger+0x170>
    	LCD_vidWriteCharacter(arr[--i]+48);

       }
    }
}
    673c:	6d 96       	adiw	r28, 0x1d	; 29
    673e:	0f b6       	in	r0, 0x3f	; 63
    6740:	f8 94       	cli
    6742:	de bf       	out	0x3e, r29	; 62
    6744:	0f be       	out	0x3f, r0	; 63
    6746:	cd bf       	out	0x3d, r28	; 61
    6748:	cf 91       	pop	r28
    674a:	df 91       	pop	r29
    674c:	1f 91       	pop	r17
    674e:	0f 91       	pop	r16
    6750:	ff 90       	pop	r15
    6752:	ef 90       	pop	r14
    6754:	df 90       	pop	r13
    6756:	cf 90       	pop	r12
    6758:	bf 90       	pop	r11
    675a:	af 90       	pop	r10
    675c:	9f 90       	pop	r9
    675e:	8f 90       	pop	r8
    6760:	08 95       	ret

00006762 <LCD_vidWriteUnSignedInteger4>:
//............................................................................................
void LCD_vidWriteUnSignedInteger4(uint64 number)
{
    6762:	8f 92       	push	r8
    6764:	9f 92       	push	r9
    6766:	af 92       	push	r10
    6768:	bf 92       	push	r11
    676a:	cf 92       	push	r12
    676c:	df 92       	push	r13
    676e:	ef 92       	push	r14
    6770:	ff 92       	push	r15
    6772:	0f 93       	push	r16
    6774:	1f 93       	push	r17
    6776:	df 93       	push	r29
    6778:	cf 93       	push	r28
    677a:	cd b7       	in	r28, 0x3d	; 61
    677c:	de b7       	in	r29, 0x3e	; 62
    677e:	6d 97       	sbiw	r28, 0x1d	; 29
    6780:	0f b6       	in	r0, 0x3f	; 63
    6782:	f8 94       	cli
    6784:	de bf       	out	0x3e, r29	; 62
    6786:	0f be       	out	0x3f, r0	; 63
    6788:	cd bf       	out	0x3d, r28	; 61
    678a:	2e 8b       	std	Y+22, r18	; 0x16
    678c:	3f 8b       	std	Y+23, r19	; 0x17
    678e:	48 8f       	std	Y+24, r20	; 0x18
    6790:	59 8f       	std	Y+25, r21	; 0x19
    6792:	6a 8f       	std	Y+26, r22	; 0x1a
    6794:	7b 8f       	std	Y+27, r23	; 0x1b
    6796:	8c 8f       	std	Y+28, r24	; 0x1c
    6798:	9d 8f       	std	Y+29, r25	; 0x1d
	uint8 arr[20]={};
    679a:	84 e1       	ldi	r24, 0x14	; 20
    679c:	fe 01       	movw	r30, r28
    679e:	32 96       	adiw	r30, 0x02	; 2
    67a0:	df 01       	movw	r26, r30
    67a2:	98 2f       	mov	r25, r24
    67a4:	1d 92       	st	X+, r1
    67a6:	9a 95       	dec	r25
    67a8:	e9 f7       	brne	.-6      	; 0x67a4 <LCD_vidWriteUnSignedInteger4+0x42>
    uint8 i=0;
    67aa:	19 82       	std	Y+1, r1	; 0x01

    if(number==0)
    67ac:	8e 89       	ldd	r24, Y+22	; 0x16
    67ae:	9f 89       	ldd	r25, Y+23	; 0x17
    67b0:	89 2b       	or	r24, r25
    67b2:	98 8d       	ldd	r25, Y+24	; 0x18
    67b4:	89 2b       	or	r24, r25
    67b6:	99 8d       	ldd	r25, Y+25	; 0x19
    67b8:	89 2b       	or	r24, r25
    67ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    67bc:	89 2b       	or	r24, r25
    67be:	9b 8d       	ldd	r25, Y+27	; 0x1b
    67c0:	89 2b       	or	r24, r25
    67c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    67c4:	89 2b       	or	r24, r25
    67c6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    67c8:	89 2b       	or	r24, r25
    67ca:	88 23       	and	r24, r24
    67cc:	09 f0       	breq	.+2      	; 0x67d0 <LCD_vidWriteUnSignedInteger4+0x6e>
    67ce:	6b c0       	rjmp	.+214    	; 0x68a6 <LCD_vidWriteUnSignedInteger4+0x144>
    {
    	LCD_vidWriteCharacter4(number+48);
    67d0:	8e 89       	ldd	r24, Y+22	; 0x16
    67d2:	80 5d       	subi	r24, 0xD0	; 208
    67d4:	0e 94 75 31 	call	0x62ea	; 0x62ea <LCD_vidWriteCharacter4>
    67d8:	8e c0       	rjmp	.+284    	; 0x68f6 <LCD_vidWriteUnSignedInteger4+0x194>
    }
    else{
   while((i<20)&&(number!=0))
   {   arr[i++]=number%10;
    67da:	89 81       	ldd	r24, Y+1	; 0x01
    67dc:	88 2e       	mov	r8, r24
    67de:	99 24       	eor	r9, r9
    67e0:	ae 88       	ldd	r10, Y+22	; 0x16
    67e2:	bf 88       	ldd	r11, Y+23	; 0x17
    67e4:	c8 8c       	ldd	r12, Y+24	; 0x18
    67e6:	d9 8c       	ldd	r13, Y+25	; 0x19
    67e8:	ea 8c       	ldd	r14, Y+26	; 0x1a
    67ea:	fb 8c       	ldd	r15, Y+27	; 0x1b
    67ec:	0c 8d       	ldd	r16, Y+28	; 0x1c
    67ee:	1d 8d       	ldd	r17, Y+29	; 0x1d
    67f0:	2a 2d       	mov	r18, r10
    67f2:	3b 2d       	mov	r19, r11
    67f4:	4c 2d       	mov	r20, r12
    67f6:	5d 2d       	mov	r21, r13
    67f8:	6e 2d       	mov	r22, r14
    67fa:	7f 2d       	mov	r23, r15
    67fc:	80 2f       	mov	r24, r16
    67fe:	91 2f       	mov	r25, r17
    6800:	0f 2e       	mov	r0, r31
    6802:	fa e0       	ldi	r31, 0x0A	; 10
    6804:	af 2e       	mov	r10, r31
    6806:	f0 2d       	mov	r31, r0
    6808:	bb 24       	eor	r11, r11
    680a:	cc 24       	eor	r12, r12
    680c:	dd 24       	eor	r13, r13
    680e:	ee 24       	eor	r14, r14
    6810:	ff 24       	eor	r15, r15
    6812:	00 e0       	ldi	r16, 0x00	; 0
    6814:	10 e0       	ldi	r17, 0x00	; 0
    6816:	0e 94 08 07 	call	0xe10	; 0xe10 <__umoddi3>
    681a:	a2 2e       	mov	r10, r18
    681c:	b3 2e       	mov	r11, r19
    681e:	c4 2e       	mov	r12, r20
    6820:	d5 2e       	mov	r13, r21
    6822:	e6 2e       	mov	r14, r22
    6824:	f7 2e       	mov	r15, r23
    6826:	08 2f       	mov	r16, r24
    6828:	19 2f       	mov	r17, r25
    682a:	2a 2d       	mov	r18, r10
    682c:	3b 2d       	mov	r19, r11
    682e:	4c 2d       	mov	r20, r12
    6830:	5d 2d       	mov	r21, r13
    6832:	6e 2d       	mov	r22, r14
    6834:	7f 2d       	mov	r23, r15
    6836:	80 2f       	mov	r24, r16
    6838:	91 2f       	mov	r25, r17
    683a:	ce 01       	movw	r24, r28
    683c:	02 96       	adiw	r24, 0x02	; 2
    683e:	fc 01       	movw	r30, r24
    6840:	e8 0d       	add	r30, r8
    6842:	f9 1d       	adc	r31, r9
    6844:	20 83       	st	Z, r18
    6846:	89 81       	ldd	r24, Y+1	; 0x01
    6848:	8f 5f       	subi	r24, 0xFF	; 255
    684a:	89 83       	std	Y+1, r24	; 0x01

	       number/=10;
    684c:	ae 88       	ldd	r10, Y+22	; 0x16
    684e:	bf 88       	ldd	r11, Y+23	; 0x17
    6850:	c8 8c       	ldd	r12, Y+24	; 0x18
    6852:	d9 8c       	ldd	r13, Y+25	; 0x19
    6854:	ea 8c       	ldd	r14, Y+26	; 0x1a
    6856:	fb 8c       	ldd	r15, Y+27	; 0x1b
    6858:	0c 8d       	ldd	r16, Y+28	; 0x1c
    685a:	1d 8d       	ldd	r17, Y+29	; 0x1d
    685c:	2a 2d       	mov	r18, r10
    685e:	3b 2d       	mov	r19, r11
    6860:	4c 2d       	mov	r20, r12
    6862:	5d 2d       	mov	r21, r13
    6864:	6e 2d       	mov	r22, r14
    6866:	7f 2d       	mov	r23, r15
    6868:	80 2f       	mov	r24, r16
    686a:	91 2f       	mov	r25, r17
    686c:	0f 2e       	mov	r0, r31
    686e:	fa e0       	ldi	r31, 0x0A	; 10
    6870:	af 2e       	mov	r10, r31
    6872:	f0 2d       	mov	r31, r0
    6874:	bb 24       	eor	r11, r11
    6876:	cc 24       	eor	r12, r12
    6878:	dd 24       	eor	r13, r13
    687a:	ee 24       	eor	r14, r14
    687c:	ff 24       	eor	r15, r15
    687e:	00 e0       	ldi	r16, 0x00	; 0
    6880:	10 e0       	ldi	r17, 0x00	; 0
    6882:	0e 94 93 00 	call	0x126	; 0x126 <__udivdi3>
    6886:	a2 2e       	mov	r10, r18
    6888:	b3 2e       	mov	r11, r19
    688a:	c4 2e       	mov	r12, r20
    688c:	d5 2e       	mov	r13, r21
    688e:	e6 2e       	mov	r14, r22
    6890:	f7 2e       	mov	r15, r23
    6892:	08 2f       	mov	r16, r24
    6894:	19 2f       	mov	r17, r25
    6896:	ae 8a       	std	Y+22, r10	; 0x16
    6898:	bf 8a       	std	Y+23, r11	; 0x17
    689a:	c8 8e       	std	Y+24, r12	; 0x18
    689c:	d9 8e       	std	Y+25, r13	; 0x19
    689e:	ea 8e       	std	Y+26, r14	; 0x1a
    68a0:	fb 8e       	std	Y+27, r15	; 0x1b
    68a2:	0c 8f       	std	Y+28, r16	; 0x1c
    68a4:	1d 8f       	std	Y+29, r17	; 0x1d
    if(number==0)
    {
    	LCD_vidWriteCharacter4(number+48);
    }
    else{
   while((i<20)&&(number!=0))
    68a6:	89 81       	ldd	r24, Y+1	; 0x01
    68a8:	84 31       	cpi	r24, 0x14	; 20
    68aa:	10 f5       	brcc	.+68     	; 0x68f0 <LCD_vidWriteUnSignedInteger4+0x18e>
    68ac:	8e 89       	ldd	r24, Y+22	; 0x16
    68ae:	9f 89       	ldd	r25, Y+23	; 0x17
    68b0:	89 2b       	or	r24, r25
    68b2:	98 8d       	ldd	r25, Y+24	; 0x18
    68b4:	89 2b       	or	r24, r25
    68b6:	99 8d       	ldd	r25, Y+25	; 0x19
    68b8:	89 2b       	or	r24, r25
    68ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    68bc:	89 2b       	or	r24, r25
    68be:	9b 8d       	ldd	r25, Y+27	; 0x1b
    68c0:	89 2b       	or	r24, r25
    68c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    68c4:	89 2b       	or	r24, r25
    68c6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    68c8:	89 2b       	or	r24, r25
    68ca:	88 23       	and	r24, r24
    68cc:	09 f0       	breq	.+2      	; 0x68d0 <LCD_vidWriteUnSignedInteger4+0x16e>
    68ce:	85 cf       	rjmp	.-246    	; 0x67da <LCD_vidWriteUnSignedInteger4+0x78>
    68d0:	0f c0       	rjmp	.+30     	; 0x68f0 <LCD_vidWriteUnSignedInteger4+0x18e>
	       number/=10;

   }

       while(i!=0){
    	LCD_vidWriteCharacter4(arr[--i]+48);
    68d2:	89 81       	ldd	r24, Y+1	; 0x01
    68d4:	81 50       	subi	r24, 0x01	; 1
    68d6:	89 83       	std	Y+1, r24	; 0x01
    68d8:	89 81       	ldd	r24, Y+1	; 0x01
    68da:	28 2f       	mov	r18, r24
    68dc:	30 e0       	ldi	r19, 0x00	; 0
    68de:	ce 01       	movw	r24, r28
    68e0:	02 96       	adiw	r24, 0x02	; 2
    68e2:	fc 01       	movw	r30, r24
    68e4:	e2 0f       	add	r30, r18
    68e6:	f3 1f       	adc	r31, r19
    68e8:	80 81       	ld	r24, Z
    68ea:	80 5d       	subi	r24, 0xD0	; 208
    68ec:	0e 94 75 31 	call	0x62ea	; 0x62ea <LCD_vidWriteCharacter4>

	       number/=10;

   }

       while(i!=0){
    68f0:	89 81       	ldd	r24, Y+1	; 0x01
    68f2:	88 23       	and	r24, r24
    68f4:	71 f7       	brne	.-36     	; 0x68d2 <LCD_vidWriteUnSignedInteger4+0x170>
    	LCD_vidWriteCharacter4(arr[--i]+48);

       }
    }
}
    68f6:	6d 96       	adiw	r28, 0x1d	; 29
    68f8:	0f b6       	in	r0, 0x3f	; 63
    68fa:	f8 94       	cli
    68fc:	de bf       	out	0x3e, r29	; 62
    68fe:	0f be       	out	0x3f, r0	; 63
    6900:	cd bf       	out	0x3d, r28	; 61
    6902:	cf 91       	pop	r28
    6904:	df 91       	pop	r29
    6906:	1f 91       	pop	r17
    6908:	0f 91       	pop	r16
    690a:	ff 90       	pop	r15
    690c:	ef 90       	pop	r14
    690e:	df 90       	pop	r13
    6910:	cf 90       	pop	r12
    6912:	bf 90       	pop	r11
    6914:	af 90       	pop	r10
    6916:	9f 90       	pop	r9
    6918:	8f 90       	pop	r8
    691a:	08 95       	ret

0000691c <LCD_vidWriteSignedInteger>:
//......................................................................................
void LCD_vidWriteSignedInteger(sint64 s64SignedNumCpy)
{
    691c:	af 92       	push	r10
    691e:	bf 92       	push	r11
    6920:	cf 92       	push	r12
    6922:	df 92       	push	r13
    6924:	ef 92       	push	r14
    6926:	ff 92       	push	r15
    6928:	0f 93       	push	r16
    692a:	1f 93       	push	r17
    692c:	df 93       	push	r29
    692e:	cf 93       	push	r28
    6930:	cd b7       	in	r28, 0x3d	; 61
    6932:	de b7       	in	r29, 0x3e	; 62
    6934:	ec 97       	sbiw	r28, 0x3c	; 60
    6936:	0f b6       	in	r0, 0x3f	; 63
    6938:	f8 94       	cli
    693a:	de bf       	out	0x3e, r29	; 62
    693c:	0f be       	out	0x3f, r0	; 63
    693e:	cd bf       	out	0x3d, r28	; 61
    6940:	29 87       	std	Y+9, r18	; 0x09
    6942:	3a 87       	std	Y+10, r19	; 0x0a
    6944:	4b 87       	std	Y+11, r20	; 0x0b
    6946:	5c 87       	std	Y+12, r21	; 0x0c
    6948:	6d 87       	std	Y+13, r22	; 0x0d
    694a:	7e 87       	std	Y+14, r23	; 0x0e
    694c:	8f 87       	std	Y+15, r24	; 0x0f
    694e:	98 8b       	std	Y+16, r25	; 0x10
	uint64 u64UnsignedNumCpy=0;
    6950:	19 82       	std	Y+1, r1	; 0x01
    6952:	1a 82       	std	Y+2, r1	; 0x02
    6954:	1b 82       	std	Y+3, r1	; 0x03
    6956:	1c 82       	std	Y+4, r1	; 0x04
    6958:	1d 82       	std	Y+5, r1	; 0x05
    695a:	1e 82       	std	Y+6, r1	; 0x06
    695c:	1f 82       	std	Y+7, r1	; 0x07
    695e:	18 86       	std	Y+8, r1	; 0x08
	if(s64SignedNumCpy<(sint64)0)
    6960:	88 89       	ldd	r24, Y+16	; 0x10
    6962:	88 23       	and	r24, r24
    6964:	d4 f0       	brlt	.+52     	; 0x699a <LCD_vidWriteSignedInteger+0x7e>
    6966:	88 89       	ldd	r24, Y+16	; 0x10
    6968:	88 23       	and	r24, r24
    696a:	09 f0       	breq	.+2      	; 0x696e <LCD_vidWriteSignedInteger+0x52>
    696c:	fd c0       	rjmp	.+506    	; 0x6b68 <LCD_vidWriteSignedInteger+0x24c>
    696e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6970:	88 23       	and	r24, r24
    6972:	09 f0       	breq	.+2      	; 0x6976 <LCD_vidWriteSignedInteger+0x5a>
    6974:	f9 c0       	rjmp	.+498    	; 0x6b68 <LCD_vidWriteSignedInteger+0x24c>
    6976:	8e 85       	ldd	r24, Y+14	; 0x0e
    6978:	88 23       	and	r24, r24
    697a:	09 f0       	breq	.+2      	; 0x697e <LCD_vidWriteSignedInteger+0x62>
    697c:	f5 c0       	rjmp	.+490    	; 0x6b68 <LCD_vidWriteSignedInteger+0x24c>
    697e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6980:	88 23       	and	r24, r24
    6982:	09 f0       	breq	.+2      	; 0x6986 <LCD_vidWriteSignedInteger+0x6a>
    6984:	f1 c0       	rjmp	.+482    	; 0x6b68 <LCD_vidWriteSignedInteger+0x24c>
    6986:	8c 85       	ldd	r24, Y+12	; 0x0c
    6988:	88 23       	and	r24, r24
    698a:	09 f0       	breq	.+2      	; 0x698e <LCD_vidWriteSignedInteger+0x72>
    698c:	ed c0       	rjmp	.+474    	; 0x6b68 <LCD_vidWriteSignedInteger+0x24c>
    698e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6990:	88 23       	and	r24, r24
    6992:	09 f0       	breq	.+2      	; 0x6996 <LCD_vidWriteSignedInteger+0x7a>
    6994:	e9 c0       	rjmp	.+466    	; 0x6b68 <LCD_vidWriteSignedInteger+0x24c>
    6996:	8a 85       	ldd	r24, Y+10	; 0x0a
    6998:	e7 c0       	rjmp	.+462    	; 0x6b68 <LCD_vidWriteSignedInteger+0x24c>
	{
		u64UnsignedNumCpy=s64SignedNumCpy*(-1);
    699a:	1a 8a       	std	Y+18, r1	; 0x12
    699c:	1b 8a       	std	Y+19, r1	; 0x13
    699e:	1c 8a       	std	Y+20, r1	; 0x14
    69a0:	1d 8a       	std	Y+21, r1	; 0x15
    69a2:	1e 8a       	std	Y+22, r1	; 0x16
    69a4:	1f 8a       	std	Y+23, r1	; 0x17
    69a6:	18 8e       	std	Y+24, r1	; 0x18
    69a8:	19 8e       	std	Y+25, r1	; 0x19
    69aa:	99 85       	ldd	r25, Y+9	; 0x09
    69ac:	9a 8f       	std	Y+26, r25	; 0x1a
    69ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    69b0:	8b 8f       	std	Y+27, r24	; 0x1b
    69b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    69b4:	9c 8f       	std	Y+28, r25	; 0x1c
    69b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    69b8:	8d 8f       	std	Y+29, r24	; 0x1d
    69ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    69bc:	9e 8f       	std	Y+30, r25	; 0x1e
    69be:	8e 85       	ldd	r24, Y+14	; 0x0e
    69c0:	8f 8f       	std	Y+31, r24	; 0x1f
    69c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    69c4:	98 a3       	std	Y+32, r25	; 0x20
    69c6:	88 89       	ldd	r24, Y+16	; 0x10
    69c8:	89 a3       	std	Y+33, r24	; 0x21
    69ca:	9a 89       	ldd	r25, Y+18	; 0x12
    69cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    69ce:	98 1b       	sub	r25, r24
    69d0:	9a a3       	std	Y+34, r25	; 0x22
    69d2:	91 e0       	ldi	r25, 0x01	; 1
    69d4:	9a a7       	std	Y+42, r25	; 0x2a
    69d6:	8a a1       	ldd	r24, Y+34	; 0x22
    69d8:	9a 89       	ldd	r25, Y+18	; 0x12
    69da:	98 17       	cp	r25, r24
    69dc:	08 f0       	brcs	.+2      	; 0x69e0 <LCD_vidWriteSignedInteger+0xc4>
    69de:	1a a6       	std	Y+42, r1	; 0x2a
    69e0:	8b 89       	ldd	r24, Y+19	; 0x13
    69e2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    69e4:	89 1b       	sub	r24, r25
    69e6:	8b a3       	std	Y+35, r24	; 0x23
    69e8:	81 e0       	ldi	r24, 0x01	; 1
    69ea:	8b a7       	std	Y+43, r24	; 0x2b
    69ec:	9b a1       	ldd	r25, Y+35	; 0x23
    69ee:	8b 89       	ldd	r24, Y+19	; 0x13
    69f0:	89 17       	cp	r24, r25
    69f2:	08 f0       	brcs	.+2      	; 0x69f6 <LCD_vidWriteSignedInteger+0xda>
    69f4:	1b a6       	std	Y+43, r1	; 0x2b
    69f6:	9b a1       	ldd	r25, Y+35	; 0x23
    69f8:	8a a5       	ldd	r24, Y+42	; 0x2a
    69fa:	98 1b       	sub	r25, r24
    69fc:	9c a7       	std	Y+44, r25	; 0x2c
    69fe:	91 e0       	ldi	r25, 0x01	; 1
    6a00:	9d a7       	std	Y+45, r25	; 0x2d
    6a02:	8c a5       	ldd	r24, Y+44	; 0x2c
    6a04:	9b a1       	ldd	r25, Y+35	; 0x23
    6a06:	98 17       	cp	r25, r24
    6a08:	08 f0       	brcs	.+2      	; 0x6a0c <LCD_vidWriteSignedInteger+0xf0>
    6a0a:	1d a6       	std	Y+45, r1	; 0x2d
    6a0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    6a0e:	9d a5       	ldd	r25, Y+45	; 0x2d
    6a10:	89 2b       	or	r24, r25
    6a12:	8b a7       	std	Y+43, r24	; 0x2b
    6a14:	8c a5       	ldd	r24, Y+44	; 0x2c
    6a16:	8b a3       	std	Y+35, r24	; 0x23
    6a18:	9c 89       	ldd	r25, Y+20	; 0x14
    6a1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6a1c:	98 1b       	sub	r25, r24
    6a1e:	9c a3       	std	Y+36, r25	; 0x24
    6a20:	91 e0       	ldi	r25, 0x01	; 1
    6a22:	9e a7       	std	Y+46, r25	; 0x2e
    6a24:	8c a1       	ldd	r24, Y+36	; 0x24
    6a26:	9c 89       	ldd	r25, Y+20	; 0x14
    6a28:	98 17       	cp	r25, r24
    6a2a:	08 f0       	brcs	.+2      	; 0x6a2e <LCD_vidWriteSignedInteger+0x112>
    6a2c:	1e a6       	std	Y+46, r1	; 0x2e
    6a2e:	8c a1       	ldd	r24, Y+36	; 0x24
    6a30:	9b a5       	ldd	r25, Y+43	; 0x2b
    6a32:	89 1b       	sub	r24, r25
    6a34:	8f a7       	std	Y+47, r24	; 0x2f
    6a36:	81 e0       	ldi	r24, 0x01	; 1
    6a38:	88 ab       	std	Y+48, r24	; 0x30
    6a3a:	9f a5       	ldd	r25, Y+47	; 0x2f
    6a3c:	8c a1       	ldd	r24, Y+36	; 0x24
    6a3e:	89 17       	cp	r24, r25
    6a40:	08 f0       	brcs	.+2      	; 0x6a44 <LCD_vidWriteSignedInteger+0x128>
    6a42:	18 aa       	std	Y+48, r1	; 0x30
    6a44:	9e a5       	ldd	r25, Y+46	; 0x2e
    6a46:	88 a9       	ldd	r24, Y+48	; 0x30
    6a48:	98 2b       	or	r25, r24
    6a4a:	9e a7       	std	Y+46, r25	; 0x2e
    6a4c:	9f a5       	ldd	r25, Y+47	; 0x2f
    6a4e:	9c a3       	std	Y+36, r25	; 0x24
    6a50:	8d 89       	ldd	r24, Y+21	; 0x15
    6a52:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6a54:	89 1b       	sub	r24, r25
    6a56:	8d a3       	std	Y+37, r24	; 0x25
    6a58:	81 e0       	ldi	r24, 0x01	; 1
    6a5a:	89 ab       	std	Y+49, r24	; 0x31
    6a5c:	9d a1       	ldd	r25, Y+37	; 0x25
    6a5e:	8d 89       	ldd	r24, Y+21	; 0x15
    6a60:	89 17       	cp	r24, r25
    6a62:	08 f0       	brcs	.+2      	; 0x6a66 <LCD_vidWriteSignedInteger+0x14a>
    6a64:	19 aa       	std	Y+49, r1	; 0x31
    6a66:	9d a1       	ldd	r25, Y+37	; 0x25
    6a68:	8e a5       	ldd	r24, Y+46	; 0x2e
    6a6a:	98 1b       	sub	r25, r24
    6a6c:	9a ab       	std	Y+50, r25	; 0x32
    6a6e:	91 e0       	ldi	r25, 0x01	; 1
    6a70:	9b ab       	std	Y+51, r25	; 0x33
    6a72:	8a a9       	ldd	r24, Y+50	; 0x32
    6a74:	9d a1       	ldd	r25, Y+37	; 0x25
    6a76:	98 17       	cp	r25, r24
    6a78:	08 f0       	brcs	.+2      	; 0x6a7c <LCD_vidWriteSignedInteger+0x160>
    6a7a:	1b aa       	std	Y+51, r1	; 0x33
    6a7c:	89 a9       	ldd	r24, Y+49	; 0x31
    6a7e:	9b a9       	ldd	r25, Y+51	; 0x33
    6a80:	89 2b       	or	r24, r25
    6a82:	89 ab       	std	Y+49, r24	; 0x31
    6a84:	8a a9       	ldd	r24, Y+50	; 0x32
    6a86:	8d a3       	std	Y+37, r24	; 0x25
    6a88:	9e 89       	ldd	r25, Y+22	; 0x16
    6a8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6a8c:	98 1b       	sub	r25, r24
    6a8e:	9e a3       	std	Y+38, r25	; 0x26
    6a90:	91 e0       	ldi	r25, 0x01	; 1
    6a92:	9c ab       	std	Y+52, r25	; 0x34
    6a94:	8e a1       	ldd	r24, Y+38	; 0x26
    6a96:	9e 89       	ldd	r25, Y+22	; 0x16
    6a98:	98 17       	cp	r25, r24
    6a9a:	08 f0       	brcs	.+2      	; 0x6a9e <LCD_vidWriteSignedInteger+0x182>
    6a9c:	1c aa       	std	Y+52, r1	; 0x34
    6a9e:	8e a1       	ldd	r24, Y+38	; 0x26
    6aa0:	99 a9       	ldd	r25, Y+49	; 0x31
    6aa2:	89 1b       	sub	r24, r25
    6aa4:	8d ab       	std	Y+53, r24	; 0x35
    6aa6:	81 e0       	ldi	r24, 0x01	; 1
    6aa8:	8e ab       	std	Y+54, r24	; 0x36
    6aaa:	9d a9       	ldd	r25, Y+53	; 0x35
    6aac:	8e a1       	ldd	r24, Y+38	; 0x26
    6aae:	89 17       	cp	r24, r25
    6ab0:	08 f0       	brcs	.+2      	; 0x6ab4 <LCD_vidWriteSignedInteger+0x198>
    6ab2:	1e aa       	std	Y+54, r1	; 0x36
    6ab4:	9c a9       	ldd	r25, Y+52	; 0x34
    6ab6:	8e a9       	ldd	r24, Y+54	; 0x36
    6ab8:	98 2b       	or	r25, r24
    6aba:	9c ab       	std	Y+52, r25	; 0x34
    6abc:	9d a9       	ldd	r25, Y+53	; 0x35
    6abe:	9e a3       	std	Y+38, r25	; 0x26
    6ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    6ac2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6ac4:	89 1b       	sub	r24, r25
    6ac6:	8f a3       	std	Y+39, r24	; 0x27
    6ac8:	81 e0       	ldi	r24, 0x01	; 1
    6aca:	8f ab       	std	Y+55, r24	; 0x37
    6acc:	9f a1       	ldd	r25, Y+39	; 0x27
    6ace:	8f 89       	ldd	r24, Y+23	; 0x17
    6ad0:	89 17       	cp	r24, r25
    6ad2:	08 f0       	brcs	.+2      	; 0x6ad6 <LCD_vidWriteSignedInteger+0x1ba>
    6ad4:	1f aa       	std	Y+55, r1	; 0x37
    6ad6:	9f a1       	ldd	r25, Y+39	; 0x27
    6ad8:	8c a9       	ldd	r24, Y+52	; 0x34
    6ada:	98 1b       	sub	r25, r24
    6adc:	98 af       	std	Y+56, r25	; 0x38
    6ade:	91 e0       	ldi	r25, 0x01	; 1
    6ae0:	99 af       	std	Y+57, r25	; 0x39
    6ae2:	88 ad       	ldd	r24, Y+56	; 0x38
    6ae4:	9f a1       	ldd	r25, Y+39	; 0x27
    6ae6:	98 17       	cp	r25, r24
    6ae8:	08 f0       	brcs	.+2      	; 0x6aec <LCD_vidWriteSignedInteger+0x1d0>
    6aea:	19 ae       	std	Y+57, r1	; 0x39
    6aec:	8f a9       	ldd	r24, Y+55	; 0x37
    6aee:	99 ad       	ldd	r25, Y+57	; 0x39
    6af0:	89 2b       	or	r24, r25
    6af2:	8f ab       	std	Y+55, r24	; 0x37
    6af4:	88 ad       	ldd	r24, Y+56	; 0x38
    6af6:	8f a3       	std	Y+39, r24	; 0x27
    6af8:	98 8d       	ldd	r25, Y+24	; 0x18
    6afa:	88 a1       	ldd	r24, Y+32	; 0x20
    6afc:	98 1b       	sub	r25, r24
    6afe:	98 a7       	std	Y+40, r25	; 0x28
    6b00:	91 e0       	ldi	r25, 0x01	; 1
    6b02:	9a af       	std	Y+58, r25	; 0x3a
    6b04:	88 a5       	ldd	r24, Y+40	; 0x28
    6b06:	98 8d       	ldd	r25, Y+24	; 0x18
    6b08:	98 17       	cp	r25, r24
    6b0a:	08 f0       	brcs	.+2      	; 0x6b0e <LCD_vidWriteSignedInteger+0x1f2>
    6b0c:	1a ae       	std	Y+58, r1	; 0x3a
    6b0e:	88 a5       	ldd	r24, Y+40	; 0x28
    6b10:	9f a9       	ldd	r25, Y+55	; 0x37
    6b12:	89 1b       	sub	r24, r25
    6b14:	8b af       	std	Y+59, r24	; 0x3b
    6b16:	81 e0       	ldi	r24, 0x01	; 1
    6b18:	8c af       	std	Y+60, r24	; 0x3c
    6b1a:	9b ad       	ldd	r25, Y+59	; 0x3b
    6b1c:	88 a5       	ldd	r24, Y+40	; 0x28
    6b1e:	89 17       	cp	r24, r25
    6b20:	08 f0       	brcs	.+2      	; 0x6b24 <LCD_vidWriteSignedInteger+0x208>
    6b22:	1c ae       	std	Y+60, r1	; 0x3c
    6b24:	9a ad       	ldd	r25, Y+58	; 0x3a
    6b26:	8c ad       	ldd	r24, Y+60	; 0x3c
    6b28:	98 2b       	or	r25, r24
    6b2a:	9a af       	std	Y+58, r25	; 0x3a
    6b2c:	9b ad       	ldd	r25, Y+59	; 0x3b
    6b2e:	98 a7       	std	Y+40, r25	; 0x28
    6b30:	89 8d       	ldd	r24, Y+25	; 0x19
    6b32:	99 a1       	ldd	r25, Y+33	; 0x21
    6b34:	89 1b       	sub	r24, r25
    6b36:	89 a7       	std	Y+41, r24	; 0x29
    6b38:	89 a5       	ldd	r24, Y+41	; 0x29
    6b3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    6b3c:	89 1b       	sub	r24, r25
    6b3e:	89 a7       	std	Y+41, r24	; 0x29
    6b40:	2a a1       	ldd	r18, Y+34	; 0x22
    6b42:	3b a1       	ldd	r19, Y+35	; 0x23
    6b44:	4c a1       	ldd	r20, Y+36	; 0x24
    6b46:	5d a1       	ldd	r21, Y+37	; 0x25
    6b48:	6e a1       	ldd	r22, Y+38	; 0x26
    6b4a:	7f a1       	ldd	r23, Y+39	; 0x27
    6b4c:	88 a5       	ldd	r24, Y+40	; 0x28
    6b4e:	99 a5       	ldd	r25, Y+41	; 0x29
    6b50:	29 83       	std	Y+1, r18	; 0x01
    6b52:	3a 83       	std	Y+2, r19	; 0x02
    6b54:	4b 83       	std	Y+3, r20	; 0x03
    6b56:	5c 83       	std	Y+4, r21	; 0x04
    6b58:	6d 83       	std	Y+5, r22	; 0x05
    6b5a:	7e 83       	std	Y+6, r23	; 0x06
    6b5c:	8f 83       	std	Y+7, r24	; 0x07
    6b5e:	98 87       	std	Y+8, r25	; 0x08
        LCD_vidWriteCharacter('-');
    6b60:	8d e2       	ldi	r24, 0x2D	; 45
    6b62:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <LCD_vidWriteCharacter>
    6b66:	10 c0       	rjmp	.+32     	; 0x6b88 <LCD_vidWriteSignedInteger+0x26c>
	}
	else
	{
		u64UnsignedNumCpy=s64SignedNumCpy;
    6b68:	89 85       	ldd	r24, Y+9	; 0x09
    6b6a:	89 83       	std	Y+1, r24	; 0x01
    6b6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    6b6e:	8a 83       	std	Y+2, r24	; 0x02
    6b70:	8b 85       	ldd	r24, Y+11	; 0x0b
    6b72:	8b 83       	std	Y+3, r24	; 0x03
    6b74:	8c 85       	ldd	r24, Y+12	; 0x0c
    6b76:	8c 83       	std	Y+4, r24	; 0x04
    6b78:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b7a:	8d 83       	std	Y+5, r24	; 0x05
    6b7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    6b7e:	8e 83       	std	Y+6, r24	; 0x06
    6b80:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b82:	8f 83       	std	Y+7, r24	; 0x07
    6b84:	88 89       	ldd	r24, Y+16	; 0x10
    6b86:	88 87       	std	Y+8, r24	; 0x08
	}

	LCD_vidWriteUnSignedInteger(u64UnsignedNumCpy);
    6b88:	a9 80       	ldd	r10, Y+1	; 0x01
    6b8a:	ba 80       	ldd	r11, Y+2	; 0x02
    6b8c:	cb 80       	ldd	r12, Y+3	; 0x03
    6b8e:	dc 80       	ldd	r13, Y+4	; 0x04
    6b90:	ed 80       	ldd	r14, Y+5	; 0x05
    6b92:	fe 80       	ldd	r15, Y+6	; 0x06
    6b94:	0f 81       	ldd	r16, Y+7	; 0x07
    6b96:	18 85       	ldd	r17, Y+8	; 0x08
    6b98:	2a 2d       	mov	r18, r10
    6b9a:	3b 2d       	mov	r19, r11
    6b9c:	4c 2d       	mov	r20, r12
    6b9e:	5d 2d       	mov	r21, r13
    6ba0:	6e 2d       	mov	r22, r14
    6ba2:	7f 2d       	mov	r23, r15
    6ba4:	80 2f       	mov	r24, r16
    6ba6:	91 2f       	mov	r25, r17
    6ba8:	0e 94 d4 32 	call	0x65a8	; 0x65a8 <LCD_vidWriteUnSignedInteger>


}
    6bac:	ec 96       	adiw	r28, 0x3c	; 60
    6bae:	0f b6       	in	r0, 0x3f	; 63
    6bb0:	f8 94       	cli
    6bb2:	de bf       	out	0x3e, r29	; 62
    6bb4:	0f be       	out	0x3f, r0	; 63
    6bb6:	cd bf       	out	0x3d, r28	; 61
    6bb8:	cf 91       	pop	r28
    6bba:	df 91       	pop	r29
    6bbc:	1f 91       	pop	r17
    6bbe:	0f 91       	pop	r16
    6bc0:	ff 90       	pop	r15
    6bc2:	ef 90       	pop	r14
    6bc4:	df 90       	pop	r13
    6bc6:	cf 90       	pop	r12
    6bc8:	bf 90       	pop	r11
    6bca:	af 90       	pop	r10
    6bcc:	08 95       	ret

00006bce <LCD_vidWriteSignedInteger4>:
//......................................................................................
void LCD_vidWriteSignedInteger4(sint64 s64SignedNumCpy)
{
    6bce:	af 92       	push	r10
    6bd0:	bf 92       	push	r11
    6bd2:	cf 92       	push	r12
    6bd4:	df 92       	push	r13
    6bd6:	ef 92       	push	r14
    6bd8:	ff 92       	push	r15
    6bda:	0f 93       	push	r16
    6bdc:	1f 93       	push	r17
    6bde:	df 93       	push	r29
    6be0:	cf 93       	push	r28
    6be2:	cd b7       	in	r28, 0x3d	; 61
    6be4:	de b7       	in	r29, 0x3e	; 62
    6be6:	ec 97       	sbiw	r28, 0x3c	; 60
    6be8:	0f b6       	in	r0, 0x3f	; 63
    6bea:	f8 94       	cli
    6bec:	de bf       	out	0x3e, r29	; 62
    6bee:	0f be       	out	0x3f, r0	; 63
    6bf0:	cd bf       	out	0x3d, r28	; 61
    6bf2:	29 87       	std	Y+9, r18	; 0x09
    6bf4:	3a 87       	std	Y+10, r19	; 0x0a
    6bf6:	4b 87       	std	Y+11, r20	; 0x0b
    6bf8:	5c 87       	std	Y+12, r21	; 0x0c
    6bfa:	6d 87       	std	Y+13, r22	; 0x0d
    6bfc:	7e 87       	std	Y+14, r23	; 0x0e
    6bfe:	8f 87       	std	Y+15, r24	; 0x0f
    6c00:	98 8b       	std	Y+16, r25	; 0x10
	uint64 u64UnsignedNumCpy=0;
    6c02:	19 82       	std	Y+1, r1	; 0x01
    6c04:	1a 82       	std	Y+2, r1	; 0x02
    6c06:	1b 82       	std	Y+3, r1	; 0x03
    6c08:	1c 82       	std	Y+4, r1	; 0x04
    6c0a:	1d 82       	std	Y+5, r1	; 0x05
    6c0c:	1e 82       	std	Y+6, r1	; 0x06
    6c0e:	1f 82       	std	Y+7, r1	; 0x07
    6c10:	18 86       	std	Y+8, r1	; 0x08
		if(s64SignedNumCpy<(sint64)0)
    6c12:	88 89       	ldd	r24, Y+16	; 0x10
    6c14:	88 23       	and	r24, r24
    6c16:	d4 f0       	brlt	.+52     	; 0x6c4c <LCD_vidWriteSignedInteger4+0x7e>
    6c18:	88 89       	ldd	r24, Y+16	; 0x10
    6c1a:	88 23       	and	r24, r24
    6c1c:	09 f0       	breq	.+2      	; 0x6c20 <LCD_vidWriteSignedInteger4+0x52>
    6c1e:	fd c0       	rjmp	.+506    	; 0x6e1a <LCD_vidWriteSignedInteger4+0x24c>
    6c20:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c22:	88 23       	and	r24, r24
    6c24:	09 f0       	breq	.+2      	; 0x6c28 <LCD_vidWriteSignedInteger4+0x5a>
    6c26:	f9 c0       	rjmp	.+498    	; 0x6e1a <LCD_vidWriteSignedInteger4+0x24c>
    6c28:	8e 85       	ldd	r24, Y+14	; 0x0e
    6c2a:	88 23       	and	r24, r24
    6c2c:	09 f0       	breq	.+2      	; 0x6c30 <LCD_vidWriteSignedInteger4+0x62>
    6c2e:	f5 c0       	rjmp	.+490    	; 0x6e1a <LCD_vidWriteSignedInteger4+0x24c>
    6c30:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c32:	88 23       	and	r24, r24
    6c34:	09 f0       	breq	.+2      	; 0x6c38 <LCD_vidWriteSignedInteger4+0x6a>
    6c36:	f1 c0       	rjmp	.+482    	; 0x6e1a <LCD_vidWriteSignedInteger4+0x24c>
    6c38:	8c 85       	ldd	r24, Y+12	; 0x0c
    6c3a:	88 23       	and	r24, r24
    6c3c:	09 f0       	breq	.+2      	; 0x6c40 <LCD_vidWriteSignedInteger4+0x72>
    6c3e:	ed c0       	rjmp	.+474    	; 0x6e1a <LCD_vidWriteSignedInteger4+0x24c>
    6c40:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c42:	88 23       	and	r24, r24
    6c44:	09 f0       	breq	.+2      	; 0x6c48 <LCD_vidWriteSignedInteger4+0x7a>
    6c46:	e9 c0       	rjmp	.+466    	; 0x6e1a <LCD_vidWriteSignedInteger4+0x24c>
    6c48:	8a 85       	ldd	r24, Y+10	; 0x0a
    6c4a:	e7 c0       	rjmp	.+462    	; 0x6e1a <LCD_vidWriteSignedInteger4+0x24c>
		{
			u64UnsignedNumCpy=s64SignedNumCpy*(-1);
    6c4c:	1a 8a       	std	Y+18, r1	; 0x12
    6c4e:	1b 8a       	std	Y+19, r1	; 0x13
    6c50:	1c 8a       	std	Y+20, r1	; 0x14
    6c52:	1d 8a       	std	Y+21, r1	; 0x15
    6c54:	1e 8a       	std	Y+22, r1	; 0x16
    6c56:	1f 8a       	std	Y+23, r1	; 0x17
    6c58:	18 8e       	std	Y+24, r1	; 0x18
    6c5a:	19 8e       	std	Y+25, r1	; 0x19
    6c5c:	99 85       	ldd	r25, Y+9	; 0x09
    6c5e:	9a 8f       	std	Y+26, r25	; 0x1a
    6c60:	8a 85       	ldd	r24, Y+10	; 0x0a
    6c62:	8b 8f       	std	Y+27, r24	; 0x1b
    6c64:	9b 85       	ldd	r25, Y+11	; 0x0b
    6c66:	9c 8f       	std	Y+28, r25	; 0x1c
    6c68:	8c 85       	ldd	r24, Y+12	; 0x0c
    6c6a:	8d 8f       	std	Y+29, r24	; 0x1d
    6c6c:	9d 85       	ldd	r25, Y+13	; 0x0d
    6c6e:	9e 8f       	std	Y+30, r25	; 0x1e
    6c70:	8e 85       	ldd	r24, Y+14	; 0x0e
    6c72:	8f 8f       	std	Y+31, r24	; 0x1f
    6c74:	9f 85       	ldd	r25, Y+15	; 0x0f
    6c76:	98 a3       	std	Y+32, r25	; 0x20
    6c78:	88 89       	ldd	r24, Y+16	; 0x10
    6c7a:	89 a3       	std	Y+33, r24	; 0x21
    6c7c:	9a 89       	ldd	r25, Y+18	; 0x12
    6c7e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6c80:	98 1b       	sub	r25, r24
    6c82:	9a a3       	std	Y+34, r25	; 0x22
    6c84:	91 e0       	ldi	r25, 0x01	; 1
    6c86:	9a a7       	std	Y+42, r25	; 0x2a
    6c88:	8a a1       	ldd	r24, Y+34	; 0x22
    6c8a:	9a 89       	ldd	r25, Y+18	; 0x12
    6c8c:	98 17       	cp	r25, r24
    6c8e:	08 f0       	brcs	.+2      	; 0x6c92 <LCD_vidWriteSignedInteger4+0xc4>
    6c90:	1a a6       	std	Y+42, r1	; 0x2a
    6c92:	8b 89       	ldd	r24, Y+19	; 0x13
    6c94:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6c96:	89 1b       	sub	r24, r25
    6c98:	8b a3       	std	Y+35, r24	; 0x23
    6c9a:	81 e0       	ldi	r24, 0x01	; 1
    6c9c:	8b a7       	std	Y+43, r24	; 0x2b
    6c9e:	9b a1       	ldd	r25, Y+35	; 0x23
    6ca0:	8b 89       	ldd	r24, Y+19	; 0x13
    6ca2:	89 17       	cp	r24, r25
    6ca4:	08 f0       	brcs	.+2      	; 0x6ca8 <LCD_vidWriteSignedInteger4+0xda>
    6ca6:	1b a6       	std	Y+43, r1	; 0x2b
    6ca8:	9b a1       	ldd	r25, Y+35	; 0x23
    6caa:	8a a5       	ldd	r24, Y+42	; 0x2a
    6cac:	98 1b       	sub	r25, r24
    6cae:	9c a7       	std	Y+44, r25	; 0x2c
    6cb0:	91 e0       	ldi	r25, 0x01	; 1
    6cb2:	9d a7       	std	Y+45, r25	; 0x2d
    6cb4:	8c a5       	ldd	r24, Y+44	; 0x2c
    6cb6:	9b a1       	ldd	r25, Y+35	; 0x23
    6cb8:	98 17       	cp	r25, r24
    6cba:	08 f0       	brcs	.+2      	; 0x6cbe <LCD_vidWriteSignedInteger4+0xf0>
    6cbc:	1d a6       	std	Y+45, r1	; 0x2d
    6cbe:	8b a5       	ldd	r24, Y+43	; 0x2b
    6cc0:	9d a5       	ldd	r25, Y+45	; 0x2d
    6cc2:	89 2b       	or	r24, r25
    6cc4:	8b a7       	std	Y+43, r24	; 0x2b
    6cc6:	8c a5       	ldd	r24, Y+44	; 0x2c
    6cc8:	8b a3       	std	Y+35, r24	; 0x23
    6cca:	9c 89       	ldd	r25, Y+20	; 0x14
    6ccc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6cce:	98 1b       	sub	r25, r24
    6cd0:	9c a3       	std	Y+36, r25	; 0x24
    6cd2:	91 e0       	ldi	r25, 0x01	; 1
    6cd4:	9e a7       	std	Y+46, r25	; 0x2e
    6cd6:	8c a1       	ldd	r24, Y+36	; 0x24
    6cd8:	9c 89       	ldd	r25, Y+20	; 0x14
    6cda:	98 17       	cp	r25, r24
    6cdc:	08 f0       	brcs	.+2      	; 0x6ce0 <LCD_vidWriteSignedInteger4+0x112>
    6cde:	1e a6       	std	Y+46, r1	; 0x2e
    6ce0:	8c a1       	ldd	r24, Y+36	; 0x24
    6ce2:	9b a5       	ldd	r25, Y+43	; 0x2b
    6ce4:	89 1b       	sub	r24, r25
    6ce6:	8f a7       	std	Y+47, r24	; 0x2f
    6ce8:	81 e0       	ldi	r24, 0x01	; 1
    6cea:	88 ab       	std	Y+48, r24	; 0x30
    6cec:	9f a5       	ldd	r25, Y+47	; 0x2f
    6cee:	8c a1       	ldd	r24, Y+36	; 0x24
    6cf0:	89 17       	cp	r24, r25
    6cf2:	08 f0       	brcs	.+2      	; 0x6cf6 <LCD_vidWriteSignedInteger4+0x128>
    6cf4:	18 aa       	std	Y+48, r1	; 0x30
    6cf6:	9e a5       	ldd	r25, Y+46	; 0x2e
    6cf8:	88 a9       	ldd	r24, Y+48	; 0x30
    6cfa:	98 2b       	or	r25, r24
    6cfc:	9e a7       	std	Y+46, r25	; 0x2e
    6cfe:	9f a5       	ldd	r25, Y+47	; 0x2f
    6d00:	9c a3       	std	Y+36, r25	; 0x24
    6d02:	8d 89       	ldd	r24, Y+21	; 0x15
    6d04:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6d06:	89 1b       	sub	r24, r25
    6d08:	8d a3       	std	Y+37, r24	; 0x25
    6d0a:	81 e0       	ldi	r24, 0x01	; 1
    6d0c:	89 ab       	std	Y+49, r24	; 0x31
    6d0e:	9d a1       	ldd	r25, Y+37	; 0x25
    6d10:	8d 89       	ldd	r24, Y+21	; 0x15
    6d12:	89 17       	cp	r24, r25
    6d14:	08 f0       	brcs	.+2      	; 0x6d18 <LCD_vidWriteSignedInteger4+0x14a>
    6d16:	19 aa       	std	Y+49, r1	; 0x31
    6d18:	9d a1       	ldd	r25, Y+37	; 0x25
    6d1a:	8e a5       	ldd	r24, Y+46	; 0x2e
    6d1c:	98 1b       	sub	r25, r24
    6d1e:	9a ab       	std	Y+50, r25	; 0x32
    6d20:	91 e0       	ldi	r25, 0x01	; 1
    6d22:	9b ab       	std	Y+51, r25	; 0x33
    6d24:	8a a9       	ldd	r24, Y+50	; 0x32
    6d26:	9d a1       	ldd	r25, Y+37	; 0x25
    6d28:	98 17       	cp	r25, r24
    6d2a:	08 f0       	brcs	.+2      	; 0x6d2e <LCD_vidWriteSignedInteger4+0x160>
    6d2c:	1b aa       	std	Y+51, r1	; 0x33
    6d2e:	89 a9       	ldd	r24, Y+49	; 0x31
    6d30:	9b a9       	ldd	r25, Y+51	; 0x33
    6d32:	89 2b       	or	r24, r25
    6d34:	89 ab       	std	Y+49, r24	; 0x31
    6d36:	8a a9       	ldd	r24, Y+50	; 0x32
    6d38:	8d a3       	std	Y+37, r24	; 0x25
    6d3a:	9e 89       	ldd	r25, Y+22	; 0x16
    6d3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6d3e:	98 1b       	sub	r25, r24
    6d40:	9e a3       	std	Y+38, r25	; 0x26
    6d42:	91 e0       	ldi	r25, 0x01	; 1
    6d44:	9c ab       	std	Y+52, r25	; 0x34
    6d46:	8e a1       	ldd	r24, Y+38	; 0x26
    6d48:	9e 89       	ldd	r25, Y+22	; 0x16
    6d4a:	98 17       	cp	r25, r24
    6d4c:	08 f0       	brcs	.+2      	; 0x6d50 <LCD_vidWriteSignedInteger4+0x182>
    6d4e:	1c aa       	std	Y+52, r1	; 0x34
    6d50:	8e a1       	ldd	r24, Y+38	; 0x26
    6d52:	99 a9       	ldd	r25, Y+49	; 0x31
    6d54:	89 1b       	sub	r24, r25
    6d56:	8d ab       	std	Y+53, r24	; 0x35
    6d58:	81 e0       	ldi	r24, 0x01	; 1
    6d5a:	8e ab       	std	Y+54, r24	; 0x36
    6d5c:	9d a9       	ldd	r25, Y+53	; 0x35
    6d5e:	8e a1       	ldd	r24, Y+38	; 0x26
    6d60:	89 17       	cp	r24, r25
    6d62:	08 f0       	brcs	.+2      	; 0x6d66 <LCD_vidWriteSignedInteger4+0x198>
    6d64:	1e aa       	std	Y+54, r1	; 0x36
    6d66:	9c a9       	ldd	r25, Y+52	; 0x34
    6d68:	8e a9       	ldd	r24, Y+54	; 0x36
    6d6a:	98 2b       	or	r25, r24
    6d6c:	9c ab       	std	Y+52, r25	; 0x34
    6d6e:	9d a9       	ldd	r25, Y+53	; 0x35
    6d70:	9e a3       	std	Y+38, r25	; 0x26
    6d72:	8f 89       	ldd	r24, Y+23	; 0x17
    6d74:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6d76:	89 1b       	sub	r24, r25
    6d78:	8f a3       	std	Y+39, r24	; 0x27
    6d7a:	81 e0       	ldi	r24, 0x01	; 1
    6d7c:	8f ab       	std	Y+55, r24	; 0x37
    6d7e:	9f a1       	ldd	r25, Y+39	; 0x27
    6d80:	8f 89       	ldd	r24, Y+23	; 0x17
    6d82:	89 17       	cp	r24, r25
    6d84:	08 f0       	brcs	.+2      	; 0x6d88 <LCD_vidWriteSignedInteger4+0x1ba>
    6d86:	1f aa       	std	Y+55, r1	; 0x37
    6d88:	9f a1       	ldd	r25, Y+39	; 0x27
    6d8a:	8c a9       	ldd	r24, Y+52	; 0x34
    6d8c:	98 1b       	sub	r25, r24
    6d8e:	98 af       	std	Y+56, r25	; 0x38
    6d90:	91 e0       	ldi	r25, 0x01	; 1
    6d92:	99 af       	std	Y+57, r25	; 0x39
    6d94:	88 ad       	ldd	r24, Y+56	; 0x38
    6d96:	9f a1       	ldd	r25, Y+39	; 0x27
    6d98:	98 17       	cp	r25, r24
    6d9a:	08 f0       	brcs	.+2      	; 0x6d9e <LCD_vidWriteSignedInteger4+0x1d0>
    6d9c:	19 ae       	std	Y+57, r1	; 0x39
    6d9e:	8f a9       	ldd	r24, Y+55	; 0x37
    6da0:	99 ad       	ldd	r25, Y+57	; 0x39
    6da2:	89 2b       	or	r24, r25
    6da4:	8f ab       	std	Y+55, r24	; 0x37
    6da6:	88 ad       	ldd	r24, Y+56	; 0x38
    6da8:	8f a3       	std	Y+39, r24	; 0x27
    6daa:	98 8d       	ldd	r25, Y+24	; 0x18
    6dac:	88 a1       	ldd	r24, Y+32	; 0x20
    6dae:	98 1b       	sub	r25, r24
    6db0:	98 a7       	std	Y+40, r25	; 0x28
    6db2:	91 e0       	ldi	r25, 0x01	; 1
    6db4:	9a af       	std	Y+58, r25	; 0x3a
    6db6:	88 a5       	ldd	r24, Y+40	; 0x28
    6db8:	98 8d       	ldd	r25, Y+24	; 0x18
    6dba:	98 17       	cp	r25, r24
    6dbc:	08 f0       	brcs	.+2      	; 0x6dc0 <LCD_vidWriteSignedInteger4+0x1f2>
    6dbe:	1a ae       	std	Y+58, r1	; 0x3a
    6dc0:	88 a5       	ldd	r24, Y+40	; 0x28
    6dc2:	9f a9       	ldd	r25, Y+55	; 0x37
    6dc4:	89 1b       	sub	r24, r25
    6dc6:	8b af       	std	Y+59, r24	; 0x3b
    6dc8:	81 e0       	ldi	r24, 0x01	; 1
    6dca:	8c af       	std	Y+60, r24	; 0x3c
    6dcc:	9b ad       	ldd	r25, Y+59	; 0x3b
    6dce:	88 a5       	ldd	r24, Y+40	; 0x28
    6dd0:	89 17       	cp	r24, r25
    6dd2:	08 f0       	brcs	.+2      	; 0x6dd6 <LCD_vidWriteSignedInteger4+0x208>
    6dd4:	1c ae       	std	Y+60, r1	; 0x3c
    6dd6:	9a ad       	ldd	r25, Y+58	; 0x3a
    6dd8:	8c ad       	ldd	r24, Y+60	; 0x3c
    6dda:	98 2b       	or	r25, r24
    6ddc:	9a af       	std	Y+58, r25	; 0x3a
    6dde:	9b ad       	ldd	r25, Y+59	; 0x3b
    6de0:	98 a7       	std	Y+40, r25	; 0x28
    6de2:	89 8d       	ldd	r24, Y+25	; 0x19
    6de4:	99 a1       	ldd	r25, Y+33	; 0x21
    6de6:	89 1b       	sub	r24, r25
    6de8:	89 a7       	std	Y+41, r24	; 0x29
    6dea:	89 a5       	ldd	r24, Y+41	; 0x29
    6dec:	9a ad       	ldd	r25, Y+58	; 0x3a
    6dee:	89 1b       	sub	r24, r25
    6df0:	89 a7       	std	Y+41, r24	; 0x29
    6df2:	2a a1       	ldd	r18, Y+34	; 0x22
    6df4:	3b a1       	ldd	r19, Y+35	; 0x23
    6df6:	4c a1       	ldd	r20, Y+36	; 0x24
    6df8:	5d a1       	ldd	r21, Y+37	; 0x25
    6dfa:	6e a1       	ldd	r22, Y+38	; 0x26
    6dfc:	7f a1       	ldd	r23, Y+39	; 0x27
    6dfe:	88 a5       	ldd	r24, Y+40	; 0x28
    6e00:	99 a5       	ldd	r25, Y+41	; 0x29
    6e02:	29 83       	std	Y+1, r18	; 0x01
    6e04:	3a 83       	std	Y+2, r19	; 0x02
    6e06:	4b 83       	std	Y+3, r20	; 0x03
    6e08:	5c 83       	std	Y+4, r21	; 0x04
    6e0a:	6d 83       	std	Y+5, r22	; 0x05
    6e0c:	7e 83       	std	Y+6, r23	; 0x06
    6e0e:	8f 83       	std	Y+7, r24	; 0x07
    6e10:	98 87       	std	Y+8, r25	; 0x08
	        LCD_vidWriteCharacter4('-');
    6e12:	8d e2       	ldi	r24, 0x2D	; 45
    6e14:	0e 94 75 31 	call	0x62ea	; 0x62ea <LCD_vidWriteCharacter4>
    6e18:	10 c0       	rjmp	.+32     	; 0x6e3a <LCD_vidWriteSignedInteger4+0x26c>
		}
		else
		{
			u64UnsignedNumCpy=s64SignedNumCpy;
    6e1a:	89 85       	ldd	r24, Y+9	; 0x09
    6e1c:	89 83       	std	Y+1, r24	; 0x01
    6e1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6e20:	8a 83       	std	Y+2, r24	; 0x02
    6e22:	8b 85       	ldd	r24, Y+11	; 0x0b
    6e24:	8b 83       	std	Y+3, r24	; 0x03
    6e26:	8c 85       	ldd	r24, Y+12	; 0x0c
    6e28:	8c 83       	std	Y+4, r24	; 0x04
    6e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e2c:	8d 83       	std	Y+5, r24	; 0x05
    6e2e:	8e 85       	ldd	r24, Y+14	; 0x0e
    6e30:	8e 83       	std	Y+6, r24	; 0x06
    6e32:	8f 85       	ldd	r24, Y+15	; 0x0f
    6e34:	8f 83       	std	Y+7, r24	; 0x07
    6e36:	88 89       	ldd	r24, Y+16	; 0x10
    6e38:	88 87       	std	Y+8, r24	; 0x08
		}

		LCD_vidWriteUnSignedInteger4(u64UnsignedNumCpy);
    6e3a:	a9 80       	ldd	r10, Y+1	; 0x01
    6e3c:	ba 80       	ldd	r11, Y+2	; 0x02
    6e3e:	cb 80       	ldd	r12, Y+3	; 0x03
    6e40:	dc 80       	ldd	r13, Y+4	; 0x04
    6e42:	ed 80       	ldd	r14, Y+5	; 0x05
    6e44:	fe 80       	ldd	r15, Y+6	; 0x06
    6e46:	0f 81       	ldd	r16, Y+7	; 0x07
    6e48:	18 85       	ldd	r17, Y+8	; 0x08
    6e4a:	2a 2d       	mov	r18, r10
    6e4c:	3b 2d       	mov	r19, r11
    6e4e:	4c 2d       	mov	r20, r12
    6e50:	5d 2d       	mov	r21, r13
    6e52:	6e 2d       	mov	r22, r14
    6e54:	7f 2d       	mov	r23, r15
    6e56:	80 2f       	mov	r24, r16
    6e58:	91 2f       	mov	r25, r17
    6e5a:	0e 94 b1 33 	call	0x6762	; 0x6762 <LCD_vidWriteUnSignedInteger4>

}
    6e5e:	ec 96       	adiw	r28, 0x3c	; 60
    6e60:	0f b6       	in	r0, 0x3f	; 63
    6e62:	f8 94       	cli
    6e64:	de bf       	out	0x3e, r29	; 62
    6e66:	0f be       	out	0x3f, r0	; 63
    6e68:	cd bf       	out	0x3d, r28	; 61
    6e6a:	cf 91       	pop	r28
    6e6c:	df 91       	pop	r29
    6e6e:	1f 91       	pop	r17
    6e70:	0f 91       	pop	r16
    6e72:	ff 90       	pop	r15
    6e74:	ef 90       	pop	r14
    6e76:	df 90       	pop	r13
    6e78:	cf 90       	pop	r12
    6e7a:	bf 90       	pop	r11
    6e7c:	af 90       	pop	r10
    6e7e:	08 95       	ret

00006e80 <LCD_vidGotoxy>:



//...............................................................................................
void LCD_vidGotoxy(uint8 u8Numx,uint8 u8Numy)
{
    6e80:	df 93       	push	r29
    6e82:	cf 93       	push	r28
    6e84:	00 d0       	rcall	.+0      	; 0x6e86 <LCD_vidGotoxy+0x6>
    6e86:	00 d0       	rcall	.+0      	; 0x6e88 <LCD_vidGotoxy+0x8>
    6e88:	cd b7       	in	r28, 0x3d	; 61
    6e8a:	de b7       	in	r29, 0x3e	; 62
    6e8c:	89 83       	std	Y+1, r24	; 0x01
    6e8e:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8Numy)
    6e90:	8a 81       	ldd	r24, Y+2	; 0x02
    6e92:	28 2f       	mov	r18, r24
    6e94:	30 e0       	ldi	r19, 0x00	; 0
    6e96:	3c 83       	std	Y+4, r19	; 0x04
    6e98:	2b 83       	std	Y+3, r18	; 0x03
    6e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    6e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    6e9e:	00 97       	sbiw	r24, 0x00	; 0
    6ea0:	31 f0       	breq	.+12     	; 0x6eae <LCD_vidGotoxy+0x2e>
    6ea2:	2b 81       	ldd	r18, Y+3	; 0x03
    6ea4:	3c 81       	ldd	r19, Y+4	; 0x04
    6ea6:	21 30       	cpi	r18, 0x01	; 1
    6ea8:	31 05       	cpc	r19, r1
    6eaa:	49 f0       	breq	.+18     	; 0x6ebe <LCD_vidGotoxy+0x3e>
    6eac:	0f c0       	rjmp	.+30     	; 0x6ecc <LCD_vidGotoxy+0x4c>
	{
	case 0 : if((u8Numx<16)&&(u8Numx>=0))
    6eae:	89 81       	ldd	r24, Y+1	; 0x01
    6eb0:	80 31       	cpi	r24, 0x10	; 16
    6eb2:	60 f4       	brcc	.+24     	; 0x6ecc <LCD_vidGotoxy+0x4c>
		    LCD_vidSendCommand(0x80+u8Numx);
    6eb4:	89 81       	ldd	r24, Y+1	; 0x01
    6eb6:	80 58       	subi	r24, 0x80	; 128
    6eb8:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
    6ebc:	07 c0       	rjmp	.+14     	; 0x6ecc <LCD_vidGotoxy+0x4c>
	        break;

	case 1:if((u8Numx<16)&&(u8Numx>=0))
    6ebe:	89 81       	ldd	r24, Y+1	; 0x01
    6ec0:	80 31       	cpi	r24, 0x10	; 16
    6ec2:	20 f4       	brcc	.+8      	; 0x6ecc <LCD_vidGotoxy+0x4c>
	          LCD_vidSendCommand(0xc0+u8Numx);
    6ec4:	89 81       	ldd	r24, Y+1	; 0x01
    6ec6:	80 54       	subi	r24, 0x40	; 64
    6ec8:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
                break;
	}
}
    6ecc:	0f 90       	pop	r0
    6ece:	0f 90       	pop	r0
    6ed0:	0f 90       	pop	r0
    6ed2:	0f 90       	pop	r0
    6ed4:	cf 91       	pop	r28
    6ed6:	df 91       	pop	r29
    6ed8:	08 95       	ret

00006eda <LCD_vidGotoxy4>:
//...........................................................................................
void LCD_vidGotoxy4(uint8 u8Numx,uint8 u8Numy)
{
    6eda:	df 93       	push	r29
    6edc:	cf 93       	push	r28
    6ede:	00 d0       	rcall	.+0      	; 0x6ee0 <LCD_vidGotoxy4+0x6>
    6ee0:	00 d0       	rcall	.+0      	; 0x6ee2 <LCD_vidGotoxy4+0x8>
    6ee2:	cd b7       	in	r28, 0x3d	; 61
    6ee4:	de b7       	in	r29, 0x3e	; 62
    6ee6:	89 83       	std	Y+1, r24	; 0x01
    6ee8:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8Numy)
    6eea:	8a 81       	ldd	r24, Y+2	; 0x02
    6eec:	28 2f       	mov	r18, r24
    6eee:	30 e0       	ldi	r19, 0x00	; 0
    6ef0:	3c 83       	std	Y+4, r19	; 0x04
    6ef2:	2b 83       	std	Y+3, r18	; 0x03
    6ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    6ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    6ef8:	00 97       	sbiw	r24, 0x00	; 0
    6efa:	31 f0       	breq	.+12     	; 0x6f08 <LCD_vidGotoxy4+0x2e>
    6efc:	2b 81       	ldd	r18, Y+3	; 0x03
    6efe:	3c 81       	ldd	r19, Y+4	; 0x04
    6f00:	21 30       	cpi	r18, 0x01	; 1
    6f02:	31 05       	cpc	r19, r1
    6f04:	49 f0       	breq	.+18     	; 0x6f18 <LCD_vidGotoxy4+0x3e>
    6f06:	0f c0       	rjmp	.+30     	; 0x6f26 <LCD_vidGotoxy4+0x4c>
		{
		case 0 : if((u8Numx<16)&&(u8Numx>=0))
    6f08:	89 81       	ldd	r24, Y+1	; 0x01
    6f0a:	80 31       	cpi	r24, 0x10	; 16
    6f0c:	60 f4       	brcc	.+24     	; 0x6f26 <LCD_vidGotoxy4+0x4c>
			LCD_vidSendCommand4(0x80+u8Numx);
    6f0e:	89 81       	ldd	r24, Y+1	; 0x01
    6f10:	80 58       	subi	r24, 0x80	; 128
    6f12:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <LCD_vidSendCommand4>
    6f16:	07 c0       	rjmp	.+14     	; 0x6f26 <LCD_vidGotoxy4+0x4c>
		        break;

		case 1:if((u8Numx<16)&&(u8Numx>=0))
    6f18:	89 81       	ldd	r24, Y+1	; 0x01
    6f1a:	80 31       	cpi	r24, 0x10	; 16
    6f1c:	20 f4       	brcc	.+8      	; 0x6f26 <LCD_vidGotoxy4+0x4c>
			LCD_vidSendCommand4(0xc0+u8Numx);
    6f1e:	89 81       	ldd	r24, Y+1	; 0x01
    6f20:	80 54       	subi	r24, 0x40	; 64
    6f22:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <LCD_vidSendCommand4>
	                break;
		}


}
    6f26:	0f 90       	pop	r0
    6f28:	0f 90       	pop	r0
    6f2a:	0f 90       	pop	r0
    6f2c:	0f 90       	pop	r0
    6f2e:	cf 91       	pop	r28
    6f30:	df 91       	pop	r29
    6f32:	08 95       	ret

00006f34 <LCD_vidShiftDisplayCursor>:

//.........................................................................................
void LCD_vidShiftDisplayCursor(uint8 u8Direction,uint8 u8ShiftNumber,uint8 u8DisplayOrcursor)

{   uint8 u8CommandValue=0x10;
    6f34:	df 93       	push	r29
    6f36:	cf 93       	push	r28
    6f38:	cd b7       	in	r28, 0x3d	; 61
    6f3a:	de b7       	in	r29, 0x3e	; 62
    6f3c:	66 97       	sbiw	r28, 0x16	; 22
    6f3e:	0f b6       	in	r0, 0x3f	; 63
    6f40:	f8 94       	cli
    6f42:	de bf       	out	0x3e, r29	; 62
    6f44:	0f be       	out	0x3f, r0	; 63
    6f46:	cd bf       	out	0x3d, r28	; 61
    6f48:	88 8b       	std	Y+16, r24	; 0x10
    6f4a:	69 8b       	std	Y+17, r22	; 0x11
    6f4c:	4a 8b       	std	Y+18, r20	; 0x12
    6f4e:	80 e1       	ldi	r24, 0x10	; 16
    6f50:	8f 87       	std	Y+15, r24	; 0x0f
	switch(u8Direction)
    6f52:	88 89       	ldd	r24, Y+16	; 0x10
    6f54:	28 2f       	mov	r18, r24
    6f56:	30 e0       	ldi	r19, 0x00	; 0
    6f58:	3e 8b       	std	Y+22, r19	; 0x16
    6f5a:	2d 8b       	std	Y+21, r18	; 0x15
    6f5c:	8d 89       	ldd	r24, Y+21	; 0x15
    6f5e:	9e 89       	ldd	r25, Y+22	; 0x16
    6f60:	00 97       	sbiw	r24, 0x00	; 0
    6f62:	49 f0       	breq	.+18     	; 0x6f76 <LCD_vidShiftDisplayCursor+0x42>
    6f64:	2d 89       	ldd	r18, Y+21	; 0x15
    6f66:	3e 89       	ldd	r19, Y+22	; 0x16
    6f68:	21 30       	cpi	r18, 0x01	; 1
    6f6a:	31 05       	cpc	r19, r1
    6f6c:	39 f4       	brne	.+14     	; 0x6f7c <LCD_vidShiftDisplayCursor+0x48>
	{
	case Right:SET_BIT(u8CommandValue,2);
    6f6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f70:	84 60       	ori	r24, 0x04	; 4
    6f72:	8f 87       	std	Y+15, r24	; 0x0f
    6f74:	03 c0       	rjmp	.+6      	; 0x6f7c <LCD_vidShiftDisplayCursor+0x48>
	            break;

	case Left:CLR_BIT(u8CommandValue,2);
    6f76:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f78:	8b 7f       	andi	r24, 0xFB	; 251
    6f7a:	8f 87       	std	Y+15, r24	; 0x0f
	          break;

	}

	switch(u8DisplayOrcursor)
    6f7c:	8a 89       	ldd	r24, Y+18	; 0x12
    6f7e:	28 2f       	mov	r18, r24
    6f80:	30 e0       	ldi	r19, 0x00	; 0
    6f82:	3c 8b       	std	Y+20, r19	; 0x14
    6f84:	2b 8b       	std	Y+19, r18	; 0x13
    6f86:	8b 89       	ldd	r24, Y+19	; 0x13
    6f88:	9c 89       	ldd	r25, Y+20	; 0x14
    6f8a:	00 97       	sbiw	r24, 0x00	; 0
    6f8c:	51 f0       	breq	.+20     	; 0x6fa2 <LCD_vidShiftDisplayCursor+0x6e>
    6f8e:	2b 89       	ldd	r18, Y+19	; 0x13
    6f90:	3c 89       	ldd	r19, Y+20	; 0x14
    6f92:	21 30       	cpi	r18, 0x01	; 1
    6f94:	31 05       	cpc	r19, r1
    6f96:	09 f0       	breq	.+2      	; 0x6f9a <LCD_vidShiftDisplayCursor+0x66>
    6f98:	80 c0       	rjmp	.+256    	; 0x709a <LCD_vidShiftDisplayCursor+0x166>
	{
	case Display:SET_BIT(u8CommandValue,3);
    6f9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f9c:	88 60       	ori	r24, 0x08	; 8
    6f9e:	8f 87       	std	Y+15, r24	; 0x0f
    6fa0:	7c c0       	rjmp	.+248    	; 0x709a <LCD_vidShiftDisplayCursor+0x166>
	               break;
	case Cursor:CLR_BIT(u8CommandValue,3);
    6fa2:	8f 85       	ldd	r24, Y+15	; 0x0f
    6fa4:	87 7f       	andi	r24, 0xF7	; 247
    6fa6:	8f 87       	std	Y+15, r24	; 0x0f
    6fa8:	78 c0       	rjmp	.+240    	; 0x709a <LCD_vidShiftDisplayCursor+0x166>
                 break;
	}

	while(u8ShiftNumber!=0)
	{
		 LCD_vidSendCommand(u8CommandValue);
    6faa:	8f 85       	ldd	r24, Y+15	; 0x0f
    6fac:	0e 94 b1 2c 	call	0x5962	; 0x5962 <LCD_vidSendCommand>
		 u8ShiftNumber--;
    6fb0:	89 89       	ldd	r24, Y+17	; 0x11
    6fb2:	81 50       	subi	r24, 0x01	; 1
    6fb4:	89 8b       	std	Y+17, r24	; 0x11
    6fb6:	80 e0       	ldi	r24, 0x00	; 0
    6fb8:	90 e0       	ldi	r25, 0x00	; 0
    6fba:	a0 e2       	ldi	r26, 0x20	; 32
    6fbc:	b1 e4       	ldi	r27, 0x41	; 65
    6fbe:	8b 87       	std	Y+11, r24	; 0x0b
    6fc0:	9c 87       	std	Y+12, r25	; 0x0c
    6fc2:	ad 87       	std	Y+13, r26	; 0x0d
    6fc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    6fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    6fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    6fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    6fce:	20 e0       	ldi	r18, 0x00	; 0
    6fd0:	30 e0       	ldi	r19, 0x00	; 0
    6fd2:	4a ef       	ldi	r20, 0xFA	; 250
    6fd4:	54 e4       	ldi	r21, 0x44	; 68
    6fd6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    6fda:	dc 01       	movw	r26, r24
    6fdc:	cb 01       	movw	r24, r22
    6fde:	8f 83       	std	Y+7, r24	; 0x07
    6fe0:	98 87       	std	Y+8, r25	; 0x08
    6fe2:	a9 87       	std	Y+9, r26	; 0x09
    6fe4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6fe6:	6f 81       	ldd	r22, Y+7	; 0x07
    6fe8:	78 85       	ldd	r23, Y+8	; 0x08
    6fea:	89 85       	ldd	r24, Y+9	; 0x09
    6fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fee:	20 e0       	ldi	r18, 0x00	; 0
    6ff0:	30 e0       	ldi	r19, 0x00	; 0
    6ff2:	40 e8       	ldi	r20, 0x80	; 128
    6ff4:	5f e3       	ldi	r21, 0x3F	; 63
    6ff6:	0e 94 28 11 	call	0x2250	; 0x2250 <__ltsf2>
    6ffa:	88 23       	and	r24, r24
    6ffc:	2c f4       	brge	.+10     	; 0x7008 <LCD_vidShiftDisplayCursor+0xd4>
		__ticks = 1;
    6ffe:	81 e0       	ldi	r24, 0x01	; 1
    7000:	90 e0       	ldi	r25, 0x00	; 0
    7002:	9e 83       	std	Y+6, r25	; 0x06
    7004:	8d 83       	std	Y+5, r24	; 0x05
    7006:	3f c0       	rjmp	.+126    	; 0x7086 <LCD_vidShiftDisplayCursor+0x152>
	else if (__tmp > 65535)
    7008:	6f 81       	ldd	r22, Y+7	; 0x07
    700a:	78 85       	ldd	r23, Y+8	; 0x08
    700c:	89 85       	ldd	r24, Y+9	; 0x09
    700e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7010:	20 e0       	ldi	r18, 0x00	; 0
    7012:	3f ef       	ldi	r19, 0xFF	; 255
    7014:	4f e7       	ldi	r20, 0x7F	; 127
    7016:	57 e4       	ldi	r21, 0x47	; 71
    7018:	0e 94 c8 10 	call	0x2190	; 0x2190 <__gtsf2>
    701c:	18 16       	cp	r1, r24
    701e:	4c f5       	brge	.+82     	; 0x7072 <LCD_vidShiftDisplayCursor+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7020:	6b 85       	ldd	r22, Y+11	; 0x0b
    7022:	7c 85       	ldd	r23, Y+12	; 0x0c
    7024:	8d 85       	ldd	r24, Y+13	; 0x0d
    7026:	9e 85       	ldd	r25, Y+14	; 0x0e
    7028:	20 e0       	ldi	r18, 0x00	; 0
    702a:	30 e0       	ldi	r19, 0x00	; 0
    702c:	40 e2       	ldi	r20, 0x20	; 32
    702e:	51 e4       	ldi	r21, 0x41	; 65
    7030:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__mulsf3>
    7034:	dc 01       	movw	r26, r24
    7036:	cb 01       	movw	r24, r22
    7038:	bc 01       	movw	r22, r24
    703a:	cd 01       	movw	r24, r26
    703c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    7040:	dc 01       	movw	r26, r24
    7042:	cb 01       	movw	r24, r22
    7044:	9e 83       	std	Y+6, r25	; 0x06
    7046:	8d 83       	std	Y+5, r24	; 0x05
    7048:	0f c0       	rjmp	.+30     	; 0x7068 <LCD_vidShiftDisplayCursor+0x134>
    704a:	88 ec       	ldi	r24, 0xC8	; 200
    704c:	90 e0       	ldi	r25, 0x00	; 0
    704e:	9c 83       	std	Y+4, r25	; 0x04
    7050:	8b 83       	std	Y+3, r24	; 0x03
    7052:	8b 81       	ldd	r24, Y+3	; 0x03
    7054:	9c 81       	ldd	r25, Y+4	; 0x04
    7056:	01 97       	sbiw	r24, 0x01	; 1
    7058:	f1 f7       	brne	.-4      	; 0x7056 <LCD_vidShiftDisplayCursor+0x122>
    705a:	9c 83       	std	Y+4, r25	; 0x04
    705c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    705e:	8d 81       	ldd	r24, Y+5	; 0x05
    7060:	9e 81       	ldd	r25, Y+6	; 0x06
    7062:	01 97       	sbiw	r24, 0x01	; 1
    7064:	9e 83       	std	Y+6, r25	; 0x06
    7066:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7068:	8d 81       	ldd	r24, Y+5	; 0x05
    706a:	9e 81       	ldd	r25, Y+6	; 0x06
    706c:	00 97       	sbiw	r24, 0x00	; 0
    706e:	69 f7       	brne	.-38     	; 0x704a <LCD_vidShiftDisplayCursor+0x116>
    7070:	14 c0       	rjmp	.+40     	; 0x709a <LCD_vidShiftDisplayCursor+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7072:	6f 81       	ldd	r22, Y+7	; 0x07
    7074:	78 85       	ldd	r23, Y+8	; 0x08
    7076:	89 85       	ldd	r24, Y+9	; 0x09
    7078:	9a 85       	ldd	r25, Y+10	; 0x0a
    707a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    707e:	dc 01       	movw	r26, r24
    7080:	cb 01       	movw	r24, r22
    7082:	9e 83       	std	Y+6, r25	; 0x06
    7084:	8d 83       	std	Y+5, r24	; 0x05
    7086:	8d 81       	ldd	r24, Y+5	; 0x05
    7088:	9e 81       	ldd	r25, Y+6	; 0x06
    708a:	9a 83       	std	Y+2, r25	; 0x02
    708c:	89 83       	std	Y+1, r24	; 0x01
    708e:	89 81       	ldd	r24, Y+1	; 0x01
    7090:	9a 81       	ldd	r25, Y+2	; 0x02
    7092:	01 97       	sbiw	r24, 0x01	; 1
    7094:	f1 f7       	brne	.-4      	; 0x7092 <LCD_vidShiftDisplayCursor+0x15e>
    7096:	9a 83       	std	Y+2, r25	; 0x02
    7098:	89 83       	std	Y+1, r24	; 0x01
	               break;
	case Cursor:CLR_BIT(u8CommandValue,3);
                 break;
	}

	while(u8ShiftNumber!=0)
    709a:	89 89       	ldd	r24, Y+17	; 0x11
    709c:	88 23       	and	r24, r24
    709e:	09 f0       	breq	.+2      	; 0x70a2 <LCD_vidShiftDisplayCursor+0x16e>
    70a0:	84 cf       	rjmp	.-248    	; 0x6faa <LCD_vidShiftDisplayCursor+0x76>
		 LCD_vidSendCommand(u8CommandValue);
		 u8ShiftNumber--;
		 _delay_ms(10);
	}

}
    70a2:	66 96       	adiw	r28, 0x16	; 22
    70a4:	0f b6       	in	r0, 0x3f	; 63
    70a6:	f8 94       	cli
    70a8:	de bf       	out	0x3e, r29	; 62
    70aa:	0f be       	out	0x3f, r0	; 63
    70ac:	cd bf       	out	0x3d, r28	; 61
    70ae:	cf 91       	pop	r28
    70b0:	df 91       	pop	r29
    70b2:	08 95       	ret

000070b4 <LCD_vidShiftDisplayCursor4>:

//.....................................................................................
void LCD_vidShiftDisplayCursor4(uint8 u8Direction,uint8 u8ShiftNumber,uint8 u8DisplayOrcursor)
{
    70b4:	df 93       	push	r29
    70b6:	cf 93       	push	r28
    70b8:	cd b7       	in	r28, 0x3d	; 61
    70ba:	de b7       	in	r29, 0x3e	; 62
    70bc:	28 97       	sbiw	r28, 0x08	; 8
    70be:	0f b6       	in	r0, 0x3f	; 63
    70c0:	f8 94       	cli
    70c2:	de bf       	out	0x3e, r29	; 62
    70c4:	0f be       	out	0x3f, r0	; 63
    70c6:	cd bf       	out	0x3d, r28	; 61
    70c8:	8a 83       	std	Y+2, r24	; 0x02
    70ca:	6b 83       	std	Y+3, r22	; 0x03
    70cc:	4c 83       	std	Y+4, r20	; 0x04
	 uint8 u8CommandValue=0x10;
    70ce:	80 e1       	ldi	r24, 0x10	; 16
    70d0:	89 83       	std	Y+1, r24	; 0x01
		switch( u8Direction)
    70d2:	8a 81       	ldd	r24, Y+2	; 0x02
    70d4:	28 2f       	mov	r18, r24
    70d6:	30 e0       	ldi	r19, 0x00	; 0
    70d8:	38 87       	std	Y+8, r19	; 0x08
    70da:	2f 83       	std	Y+7, r18	; 0x07
    70dc:	8f 81       	ldd	r24, Y+7	; 0x07
    70de:	98 85       	ldd	r25, Y+8	; 0x08
    70e0:	00 97       	sbiw	r24, 0x00	; 0
    70e2:	49 f0       	breq	.+18     	; 0x70f6 <LCD_vidShiftDisplayCursor4+0x42>
    70e4:	2f 81       	ldd	r18, Y+7	; 0x07
    70e6:	38 85       	ldd	r19, Y+8	; 0x08
    70e8:	21 30       	cpi	r18, 0x01	; 1
    70ea:	31 05       	cpc	r19, r1
    70ec:	39 f4       	brne	.+14     	; 0x70fc <LCD_vidShiftDisplayCursor4+0x48>
		{
		case Right:SET_BIT(u8CommandValue,2);
    70ee:	89 81       	ldd	r24, Y+1	; 0x01
    70f0:	84 60       	ori	r24, 0x04	; 4
    70f2:	89 83       	std	Y+1, r24	; 0x01
    70f4:	03 c0       	rjmp	.+6      	; 0x70fc <LCD_vidShiftDisplayCursor4+0x48>
		            break;

		case Left:CLR_BIT(u8CommandValue,2);
    70f6:	89 81       	ldd	r24, Y+1	; 0x01
    70f8:	8b 7f       	andi	r24, 0xFB	; 251
    70fa:	89 83       	std	Y+1, r24	; 0x01
		          break;

		}

		switch( u8DisplayOrcursor)
    70fc:	8c 81       	ldd	r24, Y+4	; 0x04
    70fe:	28 2f       	mov	r18, r24
    7100:	30 e0       	ldi	r19, 0x00	; 0
    7102:	3e 83       	std	Y+6, r19	; 0x06
    7104:	2d 83       	std	Y+5, r18	; 0x05
    7106:	8d 81       	ldd	r24, Y+5	; 0x05
    7108:	9e 81       	ldd	r25, Y+6	; 0x06
    710a:	00 97       	sbiw	r24, 0x00	; 0
    710c:	49 f0       	breq	.+18     	; 0x7120 <LCD_vidShiftDisplayCursor4+0x6c>
    710e:	2d 81       	ldd	r18, Y+5	; 0x05
    7110:	3e 81       	ldd	r19, Y+6	; 0x06
    7112:	21 30       	cpi	r18, 0x01	; 1
    7114:	31 05       	cpc	r19, r1
    7116:	71 f4       	brne	.+28     	; 0x7134 <LCD_vidShiftDisplayCursor4+0x80>
		{
		case Display:SET_BIT(u8CommandValue,3);
    7118:	89 81       	ldd	r24, Y+1	; 0x01
    711a:	88 60       	ori	r24, 0x08	; 8
    711c:	89 83       	std	Y+1, r24	; 0x01
    711e:	0a c0       	rjmp	.+20     	; 0x7134 <LCD_vidShiftDisplayCursor4+0x80>
		               break;
		case Cursor:CLR_BIT(u8CommandValue,3);
    7120:	89 81       	ldd	r24, Y+1	; 0x01
    7122:	87 7f       	andi	r24, 0xF7	; 247
    7124:	89 83       	std	Y+1, r24	; 0x01
    7126:	06 c0       	rjmp	.+12     	; 0x7134 <LCD_vidShiftDisplayCursor4+0x80>
	                 break;
		}
		while(u8ShiftNumber!=0)
		{
			 LCD_vidSendCommand4(u8CommandValue);
    7128:	89 81       	ldd	r24, Y+1	; 0x01
    712a:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <LCD_vidSendCommand4>
			 u8ShiftNumber--;
    712e:	8b 81       	ldd	r24, Y+3	; 0x03
    7130:	81 50       	subi	r24, 0x01	; 1
    7132:	8b 83       	std	Y+3, r24	; 0x03
		case Display:SET_BIT(u8CommandValue,3);
		               break;
		case Cursor:CLR_BIT(u8CommandValue,3);
	                 break;
		}
		while(u8ShiftNumber!=0)
    7134:	8b 81       	ldd	r24, Y+3	; 0x03
    7136:	88 23       	and	r24, r24
    7138:	b9 f7       	brne	.-18     	; 0x7128 <LCD_vidShiftDisplayCursor4+0x74>
		{
			 LCD_vidSendCommand4(u8CommandValue);
			 u8ShiftNumber--;
		}

}
    713a:	28 96       	adiw	r28, 0x08	; 8
    713c:	0f b6       	in	r0, 0x3f	; 63
    713e:	f8 94       	cli
    7140:	de bf       	out	0x3e, r29	; 62
    7142:	0f be       	out	0x3f, r0	; 63
    7144:	cd bf       	out	0x3d, r28	; 61
    7146:	cf 91       	pop	r28
    7148:	df 91       	pop	r29
    714a:	08 95       	ret

0000714c <LCD_vidPrint>:

//.......................................................................................
void LCD_vidPrint(uint8 str[])
{
    714c:	df 93       	push	r29
    714e:	cf 93       	push	r28
    7150:	00 d0       	rcall	.+0      	; 0x7152 <LCD_vidPrint+0x6>
    7152:	0f 92       	push	r0
    7154:	cd b7       	in	r28, 0x3d	; 61
    7156:	de b7       	in	r29, 0x3e	; 62
    7158:	9b 83       	std	Y+3, r25	; 0x03
    715a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    715c:	19 82       	std	Y+1, r1	; 0x01
    715e:	0f c0       	rjmp	.+30     	; 0x717e <LCD_vidPrint+0x32>
	while(str[i]!=0)
	{
		LCD_vidWriteCharacter(str[i++]);
    7160:	89 81       	ldd	r24, Y+1	; 0x01
    7162:	28 2f       	mov	r18, r24
    7164:	30 e0       	ldi	r19, 0x00	; 0
    7166:	8a 81       	ldd	r24, Y+2	; 0x02
    7168:	9b 81       	ldd	r25, Y+3	; 0x03
    716a:	fc 01       	movw	r30, r24
    716c:	e2 0f       	add	r30, r18
    716e:	f3 1f       	adc	r31, r19
    7170:	90 81       	ld	r25, Z
    7172:	89 81       	ldd	r24, Y+1	; 0x01
    7174:	8f 5f       	subi	r24, 0xFF	; 255
    7176:	89 83       	std	Y+1, r24	; 0x01
    7178:	89 2f       	mov	r24, r25
    717a:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <LCD_vidWriteCharacter>

//.......................................................................................
void LCD_vidPrint(uint8 str[])
{
	uint8 i=0;
	while(str[i]!=0)
    717e:	89 81       	ldd	r24, Y+1	; 0x01
    7180:	28 2f       	mov	r18, r24
    7182:	30 e0       	ldi	r19, 0x00	; 0
    7184:	8a 81       	ldd	r24, Y+2	; 0x02
    7186:	9b 81       	ldd	r25, Y+3	; 0x03
    7188:	fc 01       	movw	r30, r24
    718a:	e2 0f       	add	r30, r18
    718c:	f3 1f       	adc	r31, r19
    718e:	80 81       	ld	r24, Z
    7190:	88 23       	and	r24, r24
    7192:	31 f7       	brne	.-52     	; 0x7160 <LCD_vidPrint+0x14>
	{
		LCD_vidWriteCharacter(str[i++]);
	}
}
    7194:	0f 90       	pop	r0
    7196:	0f 90       	pop	r0
    7198:	0f 90       	pop	r0
    719a:	cf 91       	pop	r28
    719c:	df 91       	pop	r29
    719e:	08 95       	ret

000071a0 <LCD_vidPrintInTwoLines>:
//.........................................................................................
void LCD_vidPrintInTwoLines(uint8 str[])
{
    71a0:	df 93       	push	r29
    71a2:	cf 93       	push	r28
    71a4:	00 d0       	rcall	.+0      	; 0x71a6 <LCD_vidPrintInTwoLines+0x6>
    71a6:	0f 92       	push	r0
    71a8:	cd b7       	in	r28, 0x3d	; 61
    71aa:	de b7       	in	r29, 0x3e	; 62
    71ac:	9b 83       	std	Y+3, r25	; 0x03
    71ae:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i=0;
    71b0:	19 82       	std	Y+1, r1	; 0x01
    71b2:	5b c0       	rjmp	.+182    	; 0x726a <LCD_vidPrintInTwoLines+0xca>
		while(str[i]!=0)
		{
			if(i<=15){
    71b4:	89 81       	ldd	r24, Y+1	; 0x01
    71b6:	80 31       	cpi	r24, 0x10	; 16
    71b8:	a0 f4       	brcc	.+40     	; 0x71e2 <LCD_vidPrintInTwoLines+0x42>

			LCD_vidGotoxy(i,0);
    71ba:	89 81       	ldd	r24, Y+1	; 0x01
    71bc:	60 e0       	ldi	r22, 0x00	; 0
    71be:	0e 94 40 37 	call	0x6e80	; 0x6e80 <LCD_vidGotoxy>
			LCD_vidWriteCharacter(str[i++]);
    71c2:	89 81       	ldd	r24, Y+1	; 0x01
    71c4:	28 2f       	mov	r18, r24
    71c6:	30 e0       	ldi	r19, 0x00	; 0
    71c8:	8a 81       	ldd	r24, Y+2	; 0x02
    71ca:	9b 81       	ldd	r25, Y+3	; 0x03
    71cc:	fc 01       	movw	r30, r24
    71ce:	e2 0f       	add	r30, r18
    71d0:	f3 1f       	adc	r31, r19
    71d2:	90 81       	ld	r25, Z
    71d4:	89 81       	ldd	r24, Y+1	; 0x01
    71d6:	8f 5f       	subi	r24, 0xFF	; 255
    71d8:	89 83       	std	Y+1, r24	; 0x01
    71da:	89 2f       	mov	r24, r25
    71dc:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <LCD_vidWriteCharacter>
    71e0:	44 c0       	rjmp	.+136    	; 0x726a <LCD_vidPrintInTwoLines+0xca>
		}
			else if(i<=31)
    71e2:	89 81       	ldd	r24, Y+1	; 0x01
    71e4:	80 32       	cpi	r24, 0x20	; 32
    71e6:	a8 f4       	brcc	.+42     	; 0x7212 <LCD_vidPrintInTwoLines+0x72>
			{

				LCD_vidGotoxy(i-16,1);
    71e8:	89 81       	ldd	r24, Y+1	; 0x01
    71ea:	80 51       	subi	r24, 0x10	; 16
    71ec:	61 e0       	ldi	r22, 0x01	; 1
    71ee:	0e 94 40 37 	call	0x6e80	; 0x6e80 <LCD_vidGotoxy>
				LCD_vidWriteCharacter(str[i++]);
    71f2:	89 81       	ldd	r24, Y+1	; 0x01
    71f4:	28 2f       	mov	r18, r24
    71f6:	30 e0       	ldi	r19, 0x00	; 0
    71f8:	8a 81       	ldd	r24, Y+2	; 0x02
    71fa:	9b 81       	ldd	r25, Y+3	; 0x03
    71fc:	fc 01       	movw	r30, r24
    71fe:	e2 0f       	add	r30, r18
    7200:	f3 1f       	adc	r31, r19
    7202:	90 81       	ld	r25, Z
    7204:	89 81       	ldd	r24, Y+1	; 0x01
    7206:	8f 5f       	subi	r24, 0xFF	; 255
    7208:	89 83       	std	Y+1, r24	; 0x01
    720a:	89 2f       	mov	r24, r25
    720c:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <LCD_vidWriteCharacter>
    7210:	2c c0       	rjmp	.+88     	; 0x726a <LCD_vidPrintInTwoLines+0xca>

			}
			else if(i>31)
    7212:	89 81       	ldd	r24, Y+1	; 0x01
    7214:	80 32       	cpi	r24, 0x20	; 32
    7216:	a8 f0       	brcs	.+42     	; 0x7242 <LCD_vidPrintInTwoLines+0xa2>
				{
					LCD_vidGotoxy(i-32,0);
    7218:	89 81       	ldd	r24, Y+1	; 0x01
    721a:	80 52       	subi	r24, 0x20	; 32
    721c:	60 e0       	ldi	r22, 0x00	; 0
    721e:	0e 94 40 37 	call	0x6e80	; 0x6e80 <LCD_vidGotoxy>
					LCD_vidWriteCharacter(str[i++]);
    7222:	89 81       	ldd	r24, Y+1	; 0x01
    7224:	28 2f       	mov	r18, r24
    7226:	30 e0       	ldi	r19, 0x00	; 0
    7228:	8a 81       	ldd	r24, Y+2	; 0x02
    722a:	9b 81       	ldd	r25, Y+3	; 0x03
    722c:	fc 01       	movw	r30, r24
    722e:	e2 0f       	add	r30, r18
    7230:	f3 1f       	adc	r31, r19
    7232:	90 81       	ld	r25, Z
    7234:	89 81       	ldd	r24, Y+1	; 0x01
    7236:	8f 5f       	subi	r24, 0xFF	; 255
    7238:	89 83       	std	Y+1, r24	; 0x01
    723a:	89 2f       	mov	r24, r25
    723c:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <LCD_vidWriteCharacter>
    7240:	14 c0       	rjmp	.+40     	; 0x726a <LCD_vidPrintInTwoLines+0xca>
				}
			else
			{

				LCD_vidGotoxy(i-64,1);
    7242:	89 81       	ldd	r24, Y+1	; 0x01
    7244:	80 54       	subi	r24, 0x40	; 64
    7246:	61 e0       	ldi	r22, 0x01	; 1
    7248:	0e 94 40 37 	call	0x6e80	; 0x6e80 <LCD_vidGotoxy>
				LCD_vidWriteCharacter(str[i++]);
    724c:	89 81       	ldd	r24, Y+1	; 0x01
    724e:	28 2f       	mov	r18, r24
    7250:	30 e0       	ldi	r19, 0x00	; 0
    7252:	8a 81       	ldd	r24, Y+2	; 0x02
    7254:	9b 81       	ldd	r25, Y+3	; 0x03
    7256:	fc 01       	movw	r30, r24
    7258:	e2 0f       	add	r30, r18
    725a:	f3 1f       	adc	r31, r19
    725c:	90 81       	ld	r25, Z
    725e:	89 81       	ldd	r24, Y+1	; 0x01
    7260:	8f 5f       	subi	r24, 0xFF	; 255
    7262:	89 83       	std	Y+1, r24	; 0x01
    7264:	89 2f       	mov	r24, r25
    7266:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <LCD_vidWriteCharacter>
//.........................................................................................
void LCD_vidPrintInTwoLines(uint8 str[])
{

	uint8 i=0;
		while(str[i]!=0)
    726a:	89 81       	ldd	r24, Y+1	; 0x01
    726c:	28 2f       	mov	r18, r24
    726e:	30 e0       	ldi	r19, 0x00	; 0
    7270:	8a 81       	ldd	r24, Y+2	; 0x02
    7272:	9b 81       	ldd	r25, Y+3	; 0x03
    7274:	fc 01       	movw	r30, r24
    7276:	e2 0f       	add	r30, r18
    7278:	f3 1f       	adc	r31, r19
    727a:	80 81       	ld	r24, Z
    727c:	88 23       	and	r24, r24
    727e:	09 f0       	breq	.+2      	; 0x7282 <LCD_vidPrintInTwoLines+0xe2>
    7280:	99 cf       	rjmp	.-206    	; 0x71b4 <LCD_vidPrintInTwoLines+0x14>

				}

}

}
    7282:	0f 90       	pop	r0
    7284:	0f 90       	pop	r0
    7286:	0f 90       	pop	r0
    7288:	cf 91       	pop	r28
    728a:	df 91       	pop	r29
    728c:	08 95       	ret

0000728e <LCD_vidPrint4>:
//.........................................................................................
void LCD_vidPrint4(uint8 str[])
{
    728e:	df 93       	push	r29
    7290:	cf 93       	push	r28
    7292:	00 d0       	rcall	.+0      	; 0x7294 <LCD_vidPrint4+0x6>
    7294:	0f 92       	push	r0
    7296:	cd b7       	in	r28, 0x3d	; 61
    7298:	de b7       	in	r29, 0x3e	; 62
    729a:	9b 83       	std	Y+3, r25	; 0x03
    729c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    729e:	19 82       	std	Y+1, r1	; 0x01
    72a0:	0f c0       	rjmp	.+30     	; 0x72c0 <LCD_vidPrint4+0x32>
	while(str[i]!=0)
	{
		LCD_vidWriteCharacter4(str[i++]);
    72a2:	89 81       	ldd	r24, Y+1	; 0x01
    72a4:	28 2f       	mov	r18, r24
    72a6:	30 e0       	ldi	r19, 0x00	; 0
    72a8:	8a 81       	ldd	r24, Y+2	; 0x02
    72aa:	9b 81       	ldd	r25, Y+3	; 0x03
    72ac:	fc 01       	movw	r30, r24
    72ae:	e2 0f       	add	r30, r18
    72b0:	f3 1f       	adc	r31, r19
    72b2:	90 81       	ld	r25, Z
    72b4:	89 81       	ldd	r24, Y+1	; 0x01
    72b6:	8f 5f       	subi	r24, 0xFF	; 255
    72b8:	89 83       	std	Y+1, r24	; 0x01
    72ba:	89 2f       	mov	r24, r25
    72bc:	0e 94 75 31 	call	0x62ea	; 0x62ea <LCD_vidWriteCharacter4>
}
//.........................................................................................
void LCD_vidPrint4(uint8 str[])
{
	uint8 i=0;
	while(str[i]!=0)
    72c0:	89 81       	ldd	r24, Y+1	; 0x01
    72c2:	28 2f       	mov	r18, r24
    72c4:	30 e0       	ldi	r19, 0x00	; 0
    72c6:	8a 81       	ldd	r24, Y+2	; 0x02
    72c8:	9b 81       	ldd	r25, Y+3	; 0x03
    72ca:	fc 01       	movw	r30, r24
    72cc:	e2 0f       	add	r30, r18
    72ce:	f3 1f       	adc	r31, r19
    72d0:	80 81       	ld	r24, Z
    72d2:	88 23       	and	r24, r24
    72d4:	31 f7       	brne	.-52     	; 0x72a2 <LCD_vidPrint4+0x14>
	{
		LCD_vidWriteCharacter4(str[i++]);
	}
}
    72d6:	0f 90       	pop	r0
    72d8:	0f 90       	pop	r0
    72da:	0f 90       	pop	r0
    72dc:	cf 91       	pop	r28
    72de:	df 91       	pop	r29
    72e0:	08 95       	ret

000072e2 <LCD_vidPrintInTwoLines4>:

//......................................................................................
void LCD_vidPrintInTwoLines4(uint8 str[])
{
    72e2:	df 93       	push	r29
    72e4:	cf 93       	push	r28
    72e6:	00 d0       	rcall	.+0      	; 0x72e8 <LCD_vidPrintInTwoLines4+0x6>
    72e8:	0f 92       	push	r0
    72ea:	cd b7       	in	r28, 0x3d	; 61
    72ec:	de b7       	in	r29, 0x3e	; 62
    72ee:	9b 83       	std	Y+3, r25	; 0x03
    72f0:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i=0;
    72f2:	19 82       	std	Y+1, r1	; 0x01
    72f4:	2b c0       	rjmp	.+86     	; 0x734c <LCD_vidPrintInTwoLines4+0x6a>
		while(str[i]!=0)
		{
			if(i<=15)
    72f6:	89 81       	ldd	r24, Y+1	; 0x01
    72f8:	80 31       	cpi	r24, 0x10	; 16
    72fa:	a0 f4       	brcc	.+40     	; 0x7324 <LCD_vidPrintInTwoLines4+0x42>
			{

			LCD_vidGotoxy4(i,0);
    72fc:	89 81       	ldd	r24, Y+1	; 0x01
    72fe:	60 e0       	ldi	r22, 0x00	; 0
    7300:	0e 94 6d 37 	call	0x6eda	; 0x6eda <LCD_vidGotoxy4>
			LCD_vidWriteCharacter4(str[i++]);
    7304:	89 81       	ldd	r24, Y+1	; 0x01
    7306:	28 2f       	mov	r18, r24
    7308:	30 e0       	ldi	r19, 0x00	; 0
    730a:	8a 81       	ldd	r24, Y+2	; 0x02
    730c:	9b 81       	ldd	r25, Y+3	; 0x03
    730e:	fc 01       	movw	r30, r24
    7310:	e2 0f       	add	r30, r18
    7312:	f3 1f       	adc	r31, r19
    7314:	90 81       	ld	r25, Z
    7316:	89 81       	ldd	r24, Y+1	; 0x01
    7318:	8f 5f       	subi	r24, 0xFF	; 255
    731a:	89 83       	std	Y+1, r24	; 0x01
    731c:	89 2f       	mov	r24, r25
    731e:	0e 94 75 31 	call	0x62ea	; 0x62ea <LCD_vidWriteCharacter4>
    7322:	14 c0       	rjmp	.+40     	; 0x734c <LCD_vidPrintInTwoLines4+0x6a>
		}
			else
			{
				LCD_vidGotoxy4(i-16,1);
    7324:	89 81       	ldd	r24, Y+1	; 0x01
    7326:	80 51       	subi	r24, 0x10	; 16
    7328:	61 e0       	ldi	r22, 0x01	; 1
    732a:	0e 94 6d 37 	call	0x6eda	; 0x6eda <LCD_vidGotoxy4>
				LCD_vidWriteCharacter4(str[i++]);
    732e:	89 81       	ldd	r24, Y+1	; 0x01
    7330:	28 2f       	mov	r18, r24
    7332:	30 e0       	ldi	r19, 0x00	; 0
    7334:	8a 81       	ldd	r24, Y+2	; 0x02
    7336:	9b 81       	ldd	r25, Y+3	; 0x03
    7338:	fc 01       	movw	r30, r24
    733a:	e2 0f       	add	r30, r18
    733c:	f3 1f       	adc	r31, r19
    733e:	90 81       	ld	r25, Z
    7340:	89 81       	ldd	r24, Y+1	; 0x01
    7342:	8f 5f       	subi	r24, 0xFF	; 255
    7344:	89 83       	std	Y+1, r24	; 0x01
    7346:	89 2f       	mov	r24, r25
    7348:	0e 94 75 31 	call	0x62ea	; 0x62ea <LCD_vidWriteCharacter4>
//......................................................................................
void LCD_vidPrintInTwoLines4(uint8 str[])
{

	uint8 i=0;
		while(str[i]!=0)
    734c:	89 81       	ldd	r24, Y+1	; 0x01
    734e:	28 2f       	mov	r18, r24
    7350:	30 e0       	ldi	r19, 0x00	; 0
    7352:	8a 81       	ldd	r24, Y+2	; 0x02
    7354:	9b 81       	ldd	r25, Y+3	; 0x03
    7356:	fc 01       	movw	r30, r24
    7358:	e2 0f       	add	r30, r18
    735a:	f3 1f       	adc	r31, r19
    735c:	80 81       	ld	r24, Z
    735e:	88 23       	and	r24, r24
    7360:	51 f6       	brne	.-108    	; 0x72f6 <LCD_vidPrintInTwoLines4+0x14>

			}

		}

}
    7362:	0f 90       	pop	r0
    7364:	0f 90       	pop	r0
    7366:	0f 90       	pop	r0
    7368:	cf 91       	pop	r28
    736a:	df 91       	pop	r29
    736c:	08 95       	ret

0000736e <main>:
#include"../HAL/ULTRASONIC/ULTRASONIC.h"
#include"../HAL/LCD_V2/LCD_V2.h"
volatile uint32 front_wheel=0,back_wheel=0;
int main()
{
    736e:	af 92       	push	r10
    7370:	bf 92       	push	r11
    7372:	cf 92       	push	r12
    7374:	df 92       	push	r13
    7376:	ef 92       	push	r14
    7378:	ff 92       	push	r15
    737a:	0f 93       	push	r16
    737c:	1f 93       	push	r17
    737e:	df 93       	push	r29
    7380:	cf 93       	push	r28
    7382:	cd b7       	in	r28, 0x3d	; 61
    7384:	de b7       	in	r29, 0x3e	; 62
	LCD_vidDirections();
    7386:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <LCD_vidDirections>
	LCD_vidInit();
    738a:	0e 94 3f 2a 	call	0x547e	; 0x547e <LCD_vidInit>
	Ultrasonic_init();
    738e:	0e 94 c7 23 	call	0x478e	; 0x478e <Ultrasonic_init>
	sei();
    7392:	78 94       	sei
while(1)
{
	LCD_vidGotoxy(0,0);
    7394:	80 e0       	ldi	r24, 0x00	; 0
    7396:	60 e0       	ldi	r22, 0x00	; 0
    7398:	0e 94 40 37 	call	0x6e80	; 0x6e80 <LCD_vidGotoxy>
    LCD_vidWriteString("F_W");
    739c:	80 e0       	ldi	r24, 0x00	; 0
    739e:	91 e0       	ldi	r25, 0x01	; 1
    73a0:	0e 94 8e 31 	call	0x631c	; 0x631c <LCD_vidWriteString>
	front_wheel=Ultrasonic_front_Get_Distance();
    73a4:	0e 94 ef 23 	call	0x47de	; 0x47de <Ultrasonic_front_Get_Distance>
    73a8:	dc 01       	movw	r26, r24
    73aa:	cb 01       	movw	r24, r22
    73ac:	80 93 44 02 	sts	0x0244, r24
    73b0:	90 93 45 02 	sts	0x0245, r25
    73b4:	a0 93 46 02 	sts	0x0246, r26
    73b8:	b0 93 47 02 	sts	0x0247, r27
	LCD_vidGotoxy(4,0);
    73bc:	84 e0       	ldi	r24, 0x04	; 4
    73be:	60 e0       	ldi	r22, 0x00	; 0
    73c0:	0e 94 40 37 	call	0x6e80	; 0x6e80 <LCD_vidGotoxy>
	LCD_vidWriteString("   ");
    73c4:	84 e0       	ldi	r24, 0x04	; 4
    73c6:	91 e0       	ldi	r25, 0x01	; 1
    73c8:	0e 94 8e 31 	call	0x631c	; 0x631c <LCD_vidWriteString>
	LCD_vidGotoxy(4,0);
    73cc:	84 e0       	ldi	r24, 0x04	; 4
    73ce:	60 e0       	ldi	r22, 0x00	; 0
    73d0:	0e 94 40 37 	call	0x6e80	; 0x6e80 <LCD_vidGotoxy>
	LCD_vidWriteUnSignedInteger(front_wheel);
    73d4:	80 91 44 02 	lds	r24, 0x0244
    73d8:	90 91 45 02 	lds	r25, 0x0245
    73dc:	a0 91 46 02 	lds	r26, 0x0246
    73e0:	b0 91 47 02 	lds	r27, 0x0247
    73e4:	5c 01       	movw	r10, r24
    73e6:	6d 01       	movw	r12, r26
    73e8:	ee 24       	eor	r14, r14
    73ea:	ff 24       	eor	r15, r15
    73ec:	87 01       	movw	r16, r14
    73ee:	2a 2d       	mov	r18, r10
    73f0:	3b 2d       	mov	r19, r11
    73f2:	4c 2d       	mov	r20, r12
    73f4:	5d 2d       	mov	r21, r13
    73f6:	6e 2d       	mov	r22, r14
    73f8:	7f 2d       	mov	r23, r15
    73fa:	80 2f       	mov	r24, r16
    73fc:	91 2f       	mov	r25, r17
    73fe:	0e 94 d4 32 	call	0x65a8	; 0x65a8 <LCD_vidWriteUnSignedInteger>

	LCD_vidGotoxy(8,0);
    7402:	88 e0       	ldi	r24, 0x08	; 8
    7404:	60 e0       	ldi	r22, 0x00	; 0
    7406:	0e 94 40 37 	call	0x6e80	; 0x6e80 <LCD_vidGotoxy>
	LCD_vidWriteString("B_W");
    740a:	88 e0       	ldi	r24, 0x08	; 8
    740c:	91 e0       	ldi	r25, 0x01	; 1
    740e:	0e 94 8e 31 	call	0x631c	; 0x631c <LCD_vidWriteString>
    back_wheel=Ultrasonic_back_Get_Distance();
    7412:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <Ultrasonic_back_Get_Distance>
    7416:	dc 01       	movw	r26, r24
    7418:	cb 01       	movw	r24, r22
    741a:	80 93 48 02 	sts	0x0248, r24
    741e:	90 93 49 02 	sts	0x0249, r25
    7422:	a0 93 4a 02 	sts	0x024A, r26
    7426:	b0 93 4b 02 	sts	0x024B, r27
    LCD_vidGotoxy(12,0);
    742a:	8c e0       	ldi	r24, 0x0C	; 12
    742c:	60 e0       	ldi	r22, 0x00	; 0
    742e:	0e 94 40 37 	call	0x6e80	; 0x6e80 <LCD_vidGotoxy>
    LCD_vidWriteString("   ");
    7432:	84 e0       	ldi	r24, 0x04	; 4
    7434:	91 e0       	ldi	r25, 0x01	; 1
    7436:	0e 94 8e 31 	call	0x631c	; 0x631c <LCD_vidWriteString>
	LCD_vidGotoxy(12,0);
    743a:	8c e0       	ldi	r24, 0x0C	; 12
    743c:	60 e0       	ldi	r22, 0x00	; 0
    743e:	0e 94 40 37 	call	0x6e80	; 0x6e80 <LCD_vidGotoxy>
	LCD_vidWriteUnSignedInteger(back_wheel);
    7442:	80 91 48 02 	lds	r24, 0x0248
    7446:	90 91 49 02 	lds	r25, 0x0249
    744a:	a0 91 4a 02 	lds	r26, 0x024A
    744e:	b0 91 4b 02 	lds	r27, 0x024B
    7452:	5c 01       	movw	r10, r24
    7454:	6d 01       	movw	r12, r26
    7456:	ee 24       	eor	r14, r14
    7458:	ff 24       	eor	r15, r15
    745a:	87 01       	movw	r16, r14
    745c:	2a 2d       	mov	r18, r10
    745e:	3b 2d       	mov	r19, r11
    7460:	4c 2d       	mov	r20, r12
    7462:	5d 2d       	mov	r21, r13
    7464:	6e 2d       	mov	r22, r14
    7466:	7f 2d       	mov	r23, r15
    7468:	80 2f       	mov	r24, r16
    746a:	91 2f       	mov	r25, r17
    746c:	0e 94 d4 32 	call	0x65a8	; 0x65a8 <LCD_vidWriteUnSignedInteger>

	if((front_wheel>back_wheel)&&((front_wheel-back_wheel)>5))
    7470:	20 91 44 02 	lds	r18, 0x0244
    7474:	30 91 45 02 	lds	r19, 0x0245
    7478:	40 91 46 02 	lds	r20, 0x0246
    747c:	50 91 47 02 	lds	r21, 0x0247
    7480:	80 91 48 02 	lds	r24, 0x0248
    7484:	90 91 49 02 	lds	r25, 0x0249
    7488:	a0 91 4a 02 	lds	r26, 0x024A
    748c:	b0 91 4b 02 	lds	r27, 0x024B
    7490:	82 17       	cp	r24, r18
    7492:	93 07       	cpc	r25, r19
    7494:	a4 07       	cpc	r26, r20
    7496:	b5 07       	cpc	r27, r21
    7498:	10 f5       	brcc	.+68     	; 0x74de <main+0x170>
    749a:	80 91 44 02 	lds	r24, 0x0244
    749e:	90 91 45 02 	lds	r25, 0x0245
    74a2:	a0 91 46 02 	lds	r26, 0x0246
    74a6:	b0 91 47 02 	lds	r27, 0x0247
    74aa:	20 91 48 02 	lds	r18, 0x0248
    74ae:	30 91 49 02 	lds	r19, 0x0249
    74b2:	40 91 4a 02 	lds	r20, 0x024A
    74b6:	50 91 4b 02 	lds	r21, 0x024B
    74ba:	82 1b       	sub	r24, r18
    74bc:	93 0b       	sbc	r25, r19
    74be:	a4 0b       	sbc	r26, r20
    74c0:	b5 0b       	sbc	r27, r21
    74c2:	86 30       	cpi	r24, 0x06	; 6
    74c4:	91 05       	cpc	r25, r1
    74c6:	a1 05       	cpc	r26, r1
    74c8:	b1 05       	cpc	r27, r1
    74ca:	48 f0       	brcs	.+18     	; 0x74de <main+0x170>
	{
		//tale3a matab
		LCD_vidGotoxy(0,1);
    74cc:	80 e0       	ldi	r24, 0x00	; 0
    74ce:	61 e0       	ldi	r22, 0x01	; 1
    74d0:	0e 94 40 37 	call	0x6e80	; 0x6e80 <LCD_vidGotoxy>
		LCD_vidWriteString("NAZEL MATAB");
    74d4:	8c e0       	ldi	r24, 0x0C	; 12
    74d6:	91 e0       	ldi	r25, 0x01	; 1
    74d8:	0e 94 8e 31 	call	0x631c	; 0x631c <LCD_vidWriteString>
    74dc:	5b cf       	rjmp	.-330    	; 0x7394 <main+0x26>
	}
	else if((front_wheel<back_wheel)&&((back_wheel-front_wheel)>5))
    74de:	20 91 44 02 	lds	r18, 0x0244
    74e2:	30 91 45 02 	lds	r19, 0x0245
    74e6:	40 91 46 02 	lds	r20, 0x0246
    74ea:	50 91 47 02 	lds	r21, 0x0247
    74ee:	80 91 48 02 	lds	r24, 0x0248
    74f2:	90 91 49 02 	lds	r25, 0x0249
    74f6:	a0 91 4a 02 	lds	r26, 0x024A
    74fa:	b0 91 4b 02 	lds	r27, 0x024B
    74fe:	28 17       	cp	r18, r24
    7500:	39 07       	cpc	r19, r25
    7502:	4a 07       	cpc	r20, r26
    7504:	5b 07       	cpc	r21, r27
    7506:	10 f5       	brcc	.+68     	; 0x754c <main+0x1de>
    7508:	80 91 48 02 	lds	r24, 0x0248
    750c:	90 91 49 02 	lds	r25, 0x0249
    7510:	a0 91 4a 02 	lds	r26, 0x024A
    7514:	b0 91 4b 02 	lds	r27, 0x024B
    7518:	20 91 44 02 	lds	r18, 0x0244
    751c:	30 91 45 02 	lds	r19, 0x0245
    7520:	40 91 46 02 	lds	r20, 0x0246
    7524:	50 91 47 02 	lds	r21, 0x0247
    7528:	82 1b       	sub	r24, r18
    752a:	93 0b       	sbc	r25, r19
    752c:	a4 0b       	sbc	r26, r20
    752e:	b5 0b       	sbc	r27, r21
    7530:	86 30       	cpi	r24, 0x06	; 6
    7532:	91 05       	cpc	r25, r1
    7534:	a1 05       	cpc	r26, r1
    7536:	b1 05       	cpc	r27, r1
    7538:	48 f0       	brcs	.+18     	; 0x754c <main+0x1de>
		{
		LCD_vidGotoxy(0,1);
    753a:	80 e0       	ldi	r24, 0x00	; 0
    753c:	61 e0       	ldi	r22, 0x01	; 1
    753e:	0e 94 40 37 	call	0x6e80	; 0x6e80 <LCD_vidGotoxy>
		LCD_vidWriteString("TALE3A MATAB");
    7542:	88 e1       	ldi	r24, 0x18	; 24
    7544:	91 e0       	ldi	r25, 0x01	; 1
    7546:	0e 94 8e 31 	call	0x631c	; 0x631c <LCD_vidWriteString>
    754a:	24 cf       	rjmp	.-440    	; 0x7394 <main+0x26>
		}
	else
			{
			LCD_vidGotoxy(0,1);
    754c:	80 e0       	ldi	r24, 0x00	; 0
    754e:	61 e0       	ldi	r22, 0x01	; 1
    7550:	0e 94 40 37 	call	0x6e80	; 0x6e80 <LCD_vidGotoxy>
			LCD_vidWriteString("STRAAAAAAAAAAIT");
    7554:	85 e2       	ldi	r24, 0x25	; 37
    7556:	91 e0       	ldi	r25, 0x01	; 1
    7558:	0e 94 8e 31 	call	0x631c	; 0x631c <LCD_vidWriteString>
    755c:	1b cf       	rjmp	.-458    	; 0x7394 <main+0x26>

0000755e <__udivmodsi4>:
    755e:	a1 e2       	ldi	r26, 0x21	; 33
    7560:	1a 2e       	mov	r1, r26
    7562:	aa 1b       	sub	r26, r26
    7564:	bb 1b       	sub	r27, r27
    7566:	fd 01       	movw	r30, r26
    7568:	0d c0       	rjmp	.+26     	; 0x7584 <__udivmodsi4_ep>

0000756a <__udivmodsi4_loop>:
    756a:	aa 1f       	adc	r26, r26
    756c:	bb 1f       	adc	r27, r27
    756e:	ee 1f       	adc	r30, r30
    7570:	ff 1f       	adc	r31, r31
    7572:	a2 17       	cp	r26, r18
    7574:	b3 07       	cpc	r27, r19
    7576:	e4 07       	cpc	r30, r20
    7578:	f5 07       	cpc	r31, r21
    757a:	20 f0       	brcs	.+8      	; 0x7584 <__udivmodsi4_ep>
    757c:	a2 1b       	sub	r26, r18
    757e:	b3 0b       	sbc	r27, r19
    7580:	e4 0b       	sbc	r30, r20
    7582:	f5 0b       	sbc	r31, r21

00007584 <__udivmodsi4_ep>:
    7584:	66 1f       	adc	r22, r22
    7586:	77 1f       	adc	r23, r23
    7588:	88 1f       	adc	r24, r24
    758a:	99 1f       	adc	r25, r25
    758c:	1a 94       	dec	r1
    758e:	69 f7       	brne	.-38     	; 0x756a <__udivmodsi4_loop>
    7590:	60 95       	com	r22
    7592:	70 95       	com	r23
    7594:	80 95       	com	r24
    7596:	90 95       	com	r25
    7598:	9b 01       	movw	r18, r22
    759a:	ac 01       	movw	r20, r24
    759c:	bd 01       	movw	r22, r26
    759e:	cf 01       	movw	r24, r30
    75a0:	08 95       	ret

000075a2 <__mulsi3>:
    75a2:	62 9f       	mul	r22, r18
    75a4:	d0 01       	movw	r26, r0
    75a6:	73 9f       	mul	r23, r19
    75a8:	f0 01       	movw	r30, r0
    75aa:	82 9f       	mul	r24, r18
    75ac:	e0 0d       	add	r30, r0
    75ae:	f1 1d       	adc	r31, r1
    75b0:	64 9f       	mul	r22, r20
    75b2:	e0 0d       	add	r30, r0
    75b4:	f1 1d       	adc	r31, r1
    75b6:	92 9f       	mul	r25, r18
    75b8:	f0 0d       	add	r31, r0
    75ba:	83 9f       	mul	r24, r19
    75bc:	f0 0d       	add	r31, r0
    75be:	74 9f       	mul	r23, r20
    75c0:	f0 0d       	add	r31, r0
    75c2:	65 9f       	mul	r22, r21
    75c4:	f0 0d       	add	r31, r0
    75c6:	99 27       	eor	r25, r25
    75c8:	72 9f       	mul	r23, r18
    75ca:	b0 0d       	add	r27, r0
    75cc:	e1 1d       	adc	r30, r1
    75ce:	f9 1f       	adc	r31, r25
    75d0:	63 9f       	mul	r22, r19
    75d2:	b0 0d       	add	r27, r0
    75d4:	e1 1d       	adc	r30, r1
    75d6:	f9 1f       	adc	r31, r25
    75d8:	bd 01       	movw	r22, r26
    75da:	cf 01       	movw	r24, r30
    75dc:	11 24       	eor	r1, r1
    75de:	08 95       	ret

000075e0 <__prologue_saves__>:
    75e0:	2f 92       	push	r2
    75e2:	3f 92       	push	r3
    75e4:	4f 92       	push	r4
    75e6:	5f 92       	push	r5
    75e8:	6f 92       	push	r6
    75ea:	7f 92       	push	r7
    75ec:	8f 92       	push	r8
    75ee:	9f 92       	push	r9
    75f0:	af 92       	push	r10
    75f2:	bf 92       	push	r11
    75f4:	cf 92       	push	r12
    75f6:	df 92       	push	r13
    75f8:	ef 92       	push	r14
    75fa:	ff 92       	push	r15
    75fc:	0f 93       	push	r16
    75fe:	1f 93       	push	r17
    7600:	cf 93       	push	r28
    7602:	df 93       	push	r29
    7604:	cd b7       	in	r28, 0x3d	; 61
    7606:	de b7       	in	r29, 0x3e	; 62
    7608:	ca 1b       	sub	r28, r26
    760a:	db 0b       	sbc	r29, r27
    760c:	0f b6       	in	r0, 0x3f	; 63
    760e:	f8 94       	cli
    7610:	de bf       	out	0x3e, r29	; 62
    7612:	0f be       	out	0x3f, r0	; 63
    7614:	cd bf       	out	0x3d, r28	; 61
    7616:	09 94       	ijmp

00007618 <__epilogue_restores__>:
    7618:	2a 88       	ldd	r2, Y+18	; 0x12
    761a:	39 88       	ldd	r3, Y+17	; 0x11
    761c:	48 88       	ldd	r4, Y+16	; 0x10
    761e:	5f 84       	ldd	r5, Y+15	; 0x0f
    7620:	6e 84       	ldd	r6, Y+14	; 0x0e
    7622:	7d 84       	ldd	r7, Y+13	; 0x0d
    7624:	8c 84       	ldd	r8, Y+12	; 0x0c
    7626:	9b 84       	ldd	r9, Y+11	; 0x0b
    7628:	aa 84       	ldd	r10, Y+10	; 0x0a
    762a:	b9 84       	ldd	r11, Y+9	; 0x09
    762c:	c8 84       	ldd	r12, Y+8	; 0x08
    762e:	df 80       	ldd	r13, Y+7	; 0x07
    7630:	ee 80       	ldd	r14, Y+6	; 0x06
    7632:	fd 80       	ldd	r15, Y+5	; 0x05
    7634:	0c 81       	ldd	r16, Y+4	; 0x04
    7636:	1b 81       	ldd	r17, Y+3	; 0x03
    7638:	aa 81       	ldd	r26, Y+2	; 0x02
    763a:	b9 81       	ldd	r27, Y+1	; 0x01
    763c:	ce 0f       	add	r28, r30
    763e:	d1 1d       	adc	r29, r1
    7640:	0f b6       	in	r0, 0x3f	; 63
    7642:	f8 94       	cli
    7644:	de bf       	out	0x3e, r29	; 62
    7646:	0f be       	out	0x3f, r0	; 63
    7648:	cd bf       	out	0x3d, r28	; 61
    764a:	ed 01       	movw	r28, r26
    764c:	08 95       	ret

0000764e <_exit>:
    764e:	f8 94       	cli

00007650 <__stop_program>:
    7650:	ff cf       	rjmp	.-2      	; 0x7650 <__stop_program>
